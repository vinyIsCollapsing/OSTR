
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  08006d88  08006d88  00007d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080077c0  080077c0  000087c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080077c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003220  20000018  080077dc  00009018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003238  080077dc  00009238  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000883b  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b0e  00000000  00000000  0001187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000948  00000000  00000000  00013390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000707  00000000  00000000  00013cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001f01  00000000  00000000  000143df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b78c  00000000  00000000  000162e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075a8f  00000000  00000000  00021a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000974fb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021f0  00000000  00000000  00097540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00099730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d70 	.word	0x08006d70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08006d70 	.word	0x08006d70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fc23 	bl	8000a74 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fbad 	bl	8000994 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 f80a 	bl	800025c <__aeabi_dsub>
 8000248:	f000 fba4 	bl	8000994 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dsub>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464e      	mov	r6, r9
 8000260:	4645      	mov	r5, r8
 8000262:	46de      	mov	lr, fp
 8000264:	4657      	mov	r7, sl
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b085      	sub	sp, #20
 800026a:	9000      	str	r0, [sp, #0]
 800026c:	9101      	str	r1, [sp, #4]
 800026e:	030c      	lsls	r4, r1, #12
 8000270:	004f      	lsls	r7, r1, #1
 8000272:	0fce      	lsrs	r6, r1, #31
 8000274:	0a61      	lsrs	r1, r4, #9
 8000276:	9c00      	ldr	r4, [sp, #0]
 8000278:	46b0      	mov	r8, r6
 800027a:	0f64      	lsrs	r4, r4, #29
 800027c:	430c      	orrs	r4, r1
 800027e:	9900      	ldr	r1, [sp, #0]
 8000280:	0d7f      	lsrs	r7, r7, #21
 8000282:	00c8      	lsls	r0, r1, #3
 8000284:	0011      	movs	r1, r2
 8000286:	001a      	movs	r2, r3
 8000288:	031b      	lsls	r3, r3, #12
 800028a:	469c      	mov	ip, r3
 800028c:	9100      	str	r1, [sp, #0]
 800028e:	9201      	str	r2, [sp, #4]
 8000290:	0051      	lsls	r1, r2, #1
 8000292:	0d4b      	lsrs	r3, r1, #21
 8000294:	4699      	mov	r9, r3
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	9d00      	ldr	r5, [sp, #0]
 800029a:	0fd9      	lsrs	r1, r3, #31
 800029c:	4663      	mov	r3, ip
 800029e:	0f6a      	lsrs	r2, r5, #29
 80002a0:	0a5b      	lsrs	r3, r3, #9
 80002a2:	4313      	orrs	r3, r2
 80002a4:	00ea      	lsls	r2, r5, #3
 80002a6:	4694      	mov	ip, r2
 80002a8:	4693      	mov	fp, r2
 80002aa:	4ac1      	ldr	r2, [pc, #772]	@ (80005b0 <__aeabi_dsub+0x354>)
 80002ac:	9003      	str	r0, [sp, #12]
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	4591      	cmp	r9, r2
 80002b2:	d100      	bne.n	80002b6 <__aeabi_dsub+0x5a>
 80002b4:	e0cd      	b.n	8000452 <__aeabi_dsub+0x1f6>
 80002b6:	2501      	movs	r5, #1
 80002b8:	4069      	eors	r1, r5
 80002ba:	464d      	mov	r5, r9
 80002bc:	1b7d      	subs	r5, r7, r5
 80002be:	46aa      	mov	sl, r5
 80002c0:	428e      	cmp	r6, r1
 80002c2:	d100      	bne.n	80002c6 <__aeabi_dsub+0x6a>
 80002c4:	e080      	b.n	80003c8 <__aeabi_dsub+0x16c>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	dc00      	bgt.n	80002cc <__aeabi_dsub+0x70>
 80002ca:	e335      	b.n	8000938 <__aeabi_dsub+0x6dc>
 80002cc:	4649      	mov	r1, r9
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d100      	bne.n	80002d4 <__aeabi_dsub+0x78>
 80002d2:	e0df      	b.n	8000494 <__aeabi_dsub+0x238>
 80002d4:	4297      	cmp	r7, r2
 80002d6:	d100      	bne.n	80002da <__aeabi_dsub+0x7e>
 80002d8:	e194      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80002da:	4652      	mov	r2, sl
 80002dc:	2501      	movs	r5, #1
 80002de:	2a38      	cmp	r2, #56	@ 0x38
 80002e0:	dc19      	bgt.n	8000316 <__aeabi_dsub+0xba>
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	9b02      	ldr	r3, [sp, #8]
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	4313      	orrs	r3, r2
 80002ea:	9302      	str	r3, [sp, #8]
 80002ec:	4652      	mov	r2, sl
 80002ee:	2a1f      	cmp	r2, #31
 80002f0:	dd00      	ble.n	80002f4 <__aeabi_dsub+0x98>
 80002f2:	e1e3      	b.n	80006bc <__aeabi_dsub+0x460>
 80002f4:	4653      	mov	r3, sl
 80002f6:	2220      	movs	r2, #32
 80002f8:	4661      	mov	r1, ip
 80002fa:	9d02      	ldr	r5, [sp, #8]
 80002fc:	1ad2      	subs	r2, r2, r3
 80002fe:	4095      	lsls	r5, r2
 8000300:	40d9      	lsrs	r1, r3
 8000302:	430d      	orrs	r5, r1
 8000304:	4661      	mov	r1, ip
 8000306:	4091      	lsls	r1, r2
 8000308:	000a      	movs	r2, r1
 800030a:	1e51      	subs	r1, r2, #1
 800030c:	418a      	sbcs	r2, r1
 800030e:	4315      	orrs	r5, r2
 8000310:	9a02      	ldr	r2, [sp, #8]
 8000312:	40da      	lsrs	r2, r3
 8000314:	1aa4      	subs	r4, r4, r2
 8000316:	1b45      	subs	r5, r0, r5
 8000318:	42a8      	cmp	r0, r5
 800031a:	4180      	sbcs	r0, r0
 800031c:	4240      	negs	r0, r0
 800031e:	1a24      	subs	r4, r4, r0
 8000320:	0223      	lsls	r3, r4, #8
 8000322:	d400      	bmi.n	8000326 <__aeabi_dsub+0xca>
 8000324:	e13d      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000326:	0264      	lsls	r4, r4, #9
 8000328:	0a64      	lsrs	r4, r4, #9
 800032a:	2c00      	cmp	r4, #0
 800032c:	d100      	bne.n	8000330 <__aeabi_dsub+0xd4>
 800032e:	e147      	b.n	80005c0 <__aeabi_dsub+0x364>
 8000330:	0020      	movs	r0, r4
 8000332:	f000 fba9 	bl	8000a88 <__clzsi2>
 8000336:	0003      	movs	r3, r0
 8000338:	3b08      	subs	r3, #8
 800033a:	2120      	movs	r1, #32
 800033c:	0028      	movs	r0, r5
 800033e:	1aca      	subs	r2, r1, r3
 8000340:	40d0      	lsrs	r0, r2
 8000342:	409c      	lsls	r4, r3
 8000344:	0002      	movs	r2, r0
 8000346:	409d      	lsls	r5, r3
 8000348:	4322      	orrs	r2, r4
 800034a:	429f      	cmp	r7, r3
 800034c:	dd00      	ble.n	8000350 <__aeabi_dsub+0xf4>
 800034e:	e177      	b.n	8000640 <__aeabi_dsub+0x3e4>
 8000350:	1bd8      	subs	r0, r3, r7
 8000352:	3001      	adds	r0, #1
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	002c      	movs	r4, r5
 8000358:	408d      	lsls	r5, r1
 800035a:	40c4      	lsrs	r4, r0
 800035c:	1e6b      	subs	r3, r5, #1
 800035e:	419d      	sbcs	r5, r3
 8000360:	0013      	movs	r3, r2
 8000362:	40c2      	lsrs	r2, r0
 8000364:	408b      	lsls	r3, r1
 8000366:	4325      	orrs	r5, r4
 8000368:	2700      	movs	r7, #0
 800036a:	0014      	movs	r4, r2
 800036c:	431d      	orrs	r5, r3
 800036e:	076b      	lsls	r3, r5, #29
 8000370:	d009      	beq.n	8000386 <__aeabi_dsub+0x12a>
 8000372:	230f      	movs	r3, #15
 8000374:	402b      	ands	r3, r5
 8000376:	2b04      	cmp	r3, #4
 8000378:	d005      	beq.n	8000386 <__aeabi_dsub+0x12a>
 800037a:	1d2b      	adds	r3, r5, #4
 800037c:	42ab      	cmp	r3, r5
 800037e:	41ad      	sbcs	r5, r5
 8000380:	426d      	negs	r5, r5
 8000382:	1964      	adds	r4, r4, r5
 8000384:	001d      	movs	r5, r3
 8000386:	0223      	lsls	r3, r4, #8
 8000388:	d400      	bmi.n	800038c <__aeabi_dsub+0x130>
 800038a:	e140      	b.n	800060e <__aeabi_dsub+0x3b2>
 800038c:	4a88      	ldr	r2, [pc, #544]	@ (80005b0 <__aeabi_dsub+0x354>)
 800038e:	3701      	adds	r7, #1
 8000390:	4297      	cmp	r7, r2
 8000392:	d100      	bne.n	8000396 <__aeabi_dsub+0x13a>
 8000394:	e101      	b.n	800059a <__aeabi_dsub+0x33e>
 8000396:	2601      	movs	r6, #1
 8000398:	4643      	mov	r3, r8
 800039a:	4986      	ldr	r1, [pc, #536]	@ (80005b4 <__aeabi_dsub+0x358>)
 800039c:	08ed      	lsrs	r5, r5, #3
 800039e:	4021      	ands	r1, r4
 80003a0:	074a      	lsls	r2, r1, #29
 80003a2:	432a      	orrs	r2, r5
 80003a4:	057c      	lsls	r4, r7, #21
 80003a6:	024d      	lsls	r5, r1, #9
 80003a8:	0b2d      	lsrs	r5, r5, #12
 80003aa:	0d64      	lsrs	r4, r4, #21
 80003ac:	401e      	ands	r6, r3
 80003ae:	0524      	lsls	r4, r4, #20
 80003b0:	432c      	orrs	r4, r5
 80003b2:	07f6      	lsls	r6, r6, #31
 80003b4:	4334      	orrs	r4, r6
 80003b6:	0010      	movs	r0, r2
 80003b8:	0021      	movs	r1, r4
 80003ba:	b005      	add	sp, #20
 80003bc:	bcf0      	pop	{r4, r5, r6, r7}
 80003be:	46bb      	mov	fp, r7
 80003c0:	46b2      	mov	sl, r6
 80003c2:	46a9      	mov	r9, r5
 80003c4:	46a0      	mov	r8, r4
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	dc00      	bgt.n	80003ce <__aeabi_dsub+0x172>
 80003cc:	e2d0      	b.n	8000970 <__aeabi_dsub+0x714>
 80003ce:	4649      	mov	r1, r9
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d000      	beq.n	80003d6 <__aeabi_dsub+0x17a>
 80003d4:	e0d4      	b.n	8000580 <__aeabi_dsub+0x324>
 80003d6:	4661      	mov	r1, ip
 80003d8:	9b02      	ldr	r3, [sp, #8]
 80003da:	4319      	orrs	r1, r3
 80003dc:	d100      	bne.n	80003e0 <__aeabi_dsub+0x184>
 80003de:	e12b      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80003e0:	1e69      	subs	r1, r5, #1
 80003e2:	2d01      	cmp	r5, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dsub+0x18c>
 80003e6:	e1d9      	b.n	800079c <__aeabi_dsub+0x540>
 80003e8:	4295      	cmp	r5, r2
 80003ea:	d100      	bne.n	80003ee <__aeabi_dsub+0x192>
 80003ec:	e10a      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80003ee:	2501      	movs	r5, #1
 80003f0:	2938      	cmp	r1, #56	@ 0x38
 80003f2:	dc17      	bgt.n	8000424 <__aeabi_dsub+0x1c8>
 80003f4:	468a      	mov	sl, r1
 80003f6:	4653      	mov	r3, sl
 80003f8:	2b1f      	cmp	r3, #31
 80003fa:	dd00      	ble.n	80003fe <__aeabi_dsub+0x1a2>
 80003fc:	e1e7      	b.n	80007ce <__aeabi_dsub+0x572>
 80003fe:	2220      	movs	r2, #32
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	9b02      	ldr	r3, [sp, #8]
 8000404:	4661      	mov	r1, ip
 8000406:	4093      	lsls	r3, r2
 8000408:	001d      	movs	r5, r3
 800040a:	4653      	mov	r3, sl
 800040c:	40d9      	lsrs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	4093      	lsls	r3, r2
 8000412:	001a      	movs	r2, r3
 8000414:	430d      	orrs	r5, r1
 8000416:	1e51      	subs	r1, r2, #1
 8000418:	418a      	sbcs	r2, r1
 800041a:	4653      	mov	r3, sl
 800041c:	4315      	orrs	r5, r2
 800041e:	9a02      	ldr	r2, [sp, #8]
 8000420:	40da      	lsrs	r2, r3
 8000422:	18a4      	adds	r4, r4, r2
 8000424:	182d      	adds	r5, r5, r0
 8000426:	4285      	cmp	r5, r0
 8000428:	4180      	sbcs	r0, r0
 800042a:	4240      	negs	r0, r0
 800042c:	1824      	adds	r4, r4, r0
 800042e:	0223      	lsls	r3, r4, #8
 8000430:	d400      	bmi.n	8000434 <__aeabi_dsub+0x1d8>
 8000432:	e0b6      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000434:	4b5e      	ldr	r3, [pc, #376]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000436:	3701      	adds	r7, #1
 8000438:	429f      	cmp	r7, r3
 800043a:	d100      	bne.n	800043e <__aeabi_dsub+0x1e2>
 800043c:	e0ad      	b.n	800059a <__aeabi_dsub+0x33e>
 800043e:	2101      	movs	r1, #1
 8000440:	4b5c      	ldr	r3, [pc, #368]	@ (80005b4 <__aeabi_dsub+0x358>)
 8000442:	086a      	lsrs	r2, r5, #1
 8000444:	401c      	ands	r4, r3
 8000446:	4029      	ands	r1, r5
 8000448:	430a      	orrs	r2, r1
 800044a:	07e5      	lsls	r5, r4, #31
 800044c:	4315      	orrs	r5, r2
 800044e:	0864      	lsrs	r4, r4, #1
 8000450:	e78d      	b.n	800036e <__aeabi_dsub+0x112>
 8000452:	4a59      	ldr	r2, [pc, #356]	@ (80005b8 <__aeabi_dsub+0x35c>)
 8000454:	9b02      	ldr	r3, [sp, #8]
 8000456:	4692      	mov	sl, r2
 8000458:	4662      	mov	r2, ip
 800045a:	44ba      	add	sl, r7
 800045c:	431a      	orrs	r2, r3
 800045e:	d02c      	beq.n	80004ba <__aeabi_dsub+0x25e>
 8000460:	428e      	cmp	r6, r1
 8000462:	d02e      	beq.n	80004c2 <__aeabi_dsub+0x266>
 8000464:	4652      	mov	r2, sl
 8000466:	2a00      	cmp	r2, #0
 8000468:	d060      	beq.n	800052c <__aeabi_dsub+0x2d0>
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_dsub+0x214>
 800046e:	e0db      	b.n	8000628 <__aeabi_dsub+0x3cc>
 8000470:	4663      	mov	r3, ip
 8000472:	000e      	movs	r6, r1
 8000474:	9c02      	ldr	r4, [sp, #8]
 8000476:	08d8      	lsrs	r0, r3, #3
 8000478:	0762      	lsls	r2, r4, #29
 800047a:	4302      	orrs	r2, r0
 800047c:	08e4      	lsrs	r4, r4, #3
 800047e:	0013      	movs	r3, r2
 8000480:	4323      	orrs	r3, r4
 8000482:	d100      	bne.n	8000486 <__aeabi_dsub+0x22a>
 8000484:	e254      	b.n	8000930 <__aeabi_dsub+0x6d4>
 8000486:	2580      	movs	r5, #128	@ 0x80
 8000488:	032d      	lsls	r5, r5, #12
 800048a:	4325      	orrs	r5, r4
 800048c:	032d      	lsls	r5, r5, #12
 800048e:	4c48      	ldr	r4, [pc, #288]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000490:	0b2d      	lsrs	r5, r5, #12
 8000492:	e78c      	b.n	80003ae <__aeabi_dsub+0x152>
 8000494:	4661      	mov	r1, ip
 8000496:	9b02      	ldr	r3, [sp, #8]
 8000498:	4319      	orrs	r1, r3
 800049a:	d100      	bne.n	800049e <__aeabi_dsub+0x242>
 800049c:	e0cc      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800049e:	0029      	movs	r1, r5
 80004a0:	3901      	subs	r1, #1
 80004a2:	2d01      	cmp	r5, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x24c>
 80004a6:	e188      	b.n	80007ba <__aeabi_dsub+0x55e>
 80004a8:	4295      	cmp	r5, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dsub+0x252>
 80004ac:	e0aa      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80004ae:	2501      	movs	r5, #1
 80004b0:	2938      	cmp	r1, #56	@ 0x38
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dsub+0x25a>
 80004b4:	e72f      	b.n	8000316 <__aeabi_dsub+0xba>
 80004b6:	468a      	mov	sl, r1
 80004b8:	e718      	b.n	80002ec <__aeabi_dsub+0x90>
 80004ba:	2201      	movs	r2, #1
 80004bc:	4051      	eors	r1, r2
 80004be:	428e      	cmp	r6, r1
 80004c0:	d1d0      	bne.n	8000464 <__aeabi_dsub+0x208>
 80004c2:	4653      	mov	r3, sl
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_dsub+0x26e>
 80004c8:	e0be      	b.n	8000648 <__aeabi_dsub+0x3ec>
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_dsub+0x274>
 80004ce:	e138      	b.n	8000742 <__aeabi_dsub+0x4e6>
 80004d0:	46ca      	mov	sl, r9
 80004d2:	0022      	movs	r2, r4
 80004d4:	4302      	orrs	r2, r0
 80004d6:	d100      	bne.n	80004da <__aeabi_dsub+0x27e>
 80004d8:	e1e2      	b.n	80008a0 <__aeabi_dsub+0x644>
 80004da:	4653      	mov	r3, sl
 80004dc:	1e59      	subs	r1, r3, #1
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dsub+0x288>
 80004e2:	e20d      	b.n	8000900 <__aeabi_dsub+0x6a4>
 80004e4:	4a32      	ldr	r2, [pc, #200]	@ (80005b0 <__aeabi_dsub+0x354>)
 80004e6:	4592      	cmp	sl, r2
 80004e8:	d100      	bne.n	80004ec <__aeabi_dsub+0x290>
 80004ea:	e1d2      	b.n	8000892 <__aeabi_dsub+0x636>
 80004ec:	2701      	movs	r7, #1
 80004ee:	2938      	cmp	r1, #56	@ 0x38
 80004f0:	dc13      	bgt.n	800051a <__aeabi_dsub+0x2be>
 80004f2:	291f      	cmp	r1, #31
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dsub+0x29c>
 80004f6:	e1ee      	b.n	80008d6 <__aeabi_dsub+0x67a>
 80004f8:	2220      	movs	r2, #32
 80004fa:	9b02      	ldr	r3, [sp, #8]
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	0025      	movs	r5, r4
 8000500:	0007      	movs	r7, r0
 8000502:	469a      	mov	sl, r3
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4090      	lsls	r0, r2
 8000508:	4095      	lsls	r5, r2
 800050a:	40cf      	lsrs	r7, r1
 800050c:	44a2      	add	sl, r4
 800050e:	1e42      	subs	r2, r0, #1
 8000510:	4190      	sbcs	r0, r2
 8000512:	4653      	mov	r3, sl
 8000514:	432f      	orrs	r7, r5
 8000516:	4307      	orrs	r7, r0
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	003d      	movs	r5, r7
 800051c:	4465      	add	r5, ip
 800051e:	4565      	cmp	r5, ip
 8000520:	4192      	sbcs	r2, r2
 8000522:	9b02      	ldr	r3, [sp, #8]
 8000524:	4252      	negs	r2, r2
 8000526:	464f      	mov	r7, r9
 8000528:	18d4      	adds	r4, r2, r3
 800052a:	e780      	b.n	800042e <__aeabi_dsub+0x1d2>
 800052c:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <__aeabi_dsub+0x360>)
 800052e:	1c7d      	adds	r5, r7, #1
 8000530:	4215      	tst	r5, r2
 8000532:	d000      	beq.n	8000536 <__aeabi_dsub+0x2da>
 8000534:	e0aa      	b.n	800068c <__aeabi_dsub+0x430>
 8000536:	4662      	mov	r2, ip
 8000538:	0025      	movs	r5, r4
 800053a:	9b02      	ldr	r3, [sp, #8]
 800053c:	4305      	orrs	r5, r0
 800053e:	431a      	orrs	r2, r3
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_dsub+0x2ea>
 8000544:	e0f5      	b.n	8000732 <__aeabi_dsub+0x4d6>
 8000546:	2d00      	cmp	r5, #0
 8000548:	d100      	bne.n	800054c <__aeabi_dsub+0x2f0>
 800054a:	e16b      	b.n	8000824 <__aeabi_dsub+0x5c8>
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dsub+0x2f6>
 8000550:	e152      	b.n	80007f8 <__aeabi_dsub+0x59c>
 8000552:	4663      	mov	r3, ip
 8000554:	1ac5      	subs	r5, r0, r3
 8000556:	9b02      	ldr	r3, [sp, #8]
 8000558:	1ae2      	subs	r2, r4, r3
 800055a:	42a8      	cmp	r0, r5
 800055c:	419b      	sbcs	r3, r3
 800055e:	425b      	negs	r3, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	021a      	lsls	r2, r3, #8
 8000564:	d400      	bmi.n	8000568 <__aeabi_dsub+0x30c>
 8000566:	e1d5      	b.n	8000914 <__aeabi_dsub+0x6b8>
 8000568:	4663      	mov	r3, ip
 800056a:	1a1d      	subs	r5, r3, r0
 800056c:	45ac      	cmp	ip, r5
 800056e:	4192      	sbcs	r2, r2
 8000570:	2601      	movs	r6, #1
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	4252      	negs	r2, r2
 8000576:	1b1c      	subs	r4, r3, r4
 8000578:	4688      	mov	r8, r1
 800057a:	1aa4      	subs	r4, r4, r2
 800057c:	400e      	ands	r6, r1
 800057e:	e6f6      	b.n	800036e <__aeabi_dsub+0x112>
 8000580:	4297      	cmp	r7, r2
 8000582:	d03f      	beq.n	8000604 <__aeabi_dsub+0x3a8>
 8000584:	4652      	mov	r2, sl
 8000586:	2501      	movs	r5, #1
 8000588:	2a38      	cmp	r2, #56	@ 0x38
 800058a:	dd00      	ble.n	800058e <__aeabi_dsub+0x332>
 800058c:	e74a      	b.n	8000424 <__aeabi_dsub+0x1c8>
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	9b02      	ldr	r3, [sp, #8]
 8000592:	0412      	lsls	r2, r2, #16
 8000594:	4313      	orrs	r3, r2
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	e72d      	b.n	80003f6 <__aeabi_dsub+0x19a>
 800059a:	003c      	movs	r4, r7
 800059c:	2500      	movs	r5, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	e705      	b.n	80003ae <__aeabi_dsub+0x152>
 80005a2:	2307      	movs	r3, #7
 80005a4:	402b      	ands	r3, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dsub+0x350>
 80005aa:	e6e2      	b.n	8000372 <__aeabi_dsub+0x116>
 80005ac:	e06b      	b.n	8000686 <__aeabi_dsub+0x42a>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	000007ff 	.word	0x000007ff
 80005b4:	ff7fffff 	.word	0xff7fffff
 80005b8:	fffff801 	.word	0xfffff801
 80005bc:	000007fe 	.word	0x000007fe
 80005c0:	0028      	movs	r0, r5
 80005c2:	f000 fa61 	bl	8000a88 <__clzsi2>
 80005c6:	0003      	movs	r3, r0
 80005c8:	3318      	adds	r3, #24
 80005ca:	2b1f      	cmp	r3, #31
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_dsub+0x374>
 80005ce:	e6b4      	b.n	800033a <__aeabi_dsub+0xde>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3808      	subs	r0, #8
 80005d4:	4082      	lsls	r2, r0
 80005d6:	429f      	cmp	r7, r3
 80005d8:	dd00      	ble.n	80005dc <__aeabi_dsub+0x380>
 80005da:	e0b9      	b.n	8000750 <__aeabi_dsub+0x4f4>
 80005dc:	1bdb      	subs	r3, r3, r7
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	281f      	cmp	r0, #31
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dsub+0x38a>
 80005e4:	e1a0      	b.n	8000928 <__aeabi_dsub+0x6cc>
 80005e6:	0015      	movs	r5, r2
 80005e8:	3b1f      	subs	r3, #31
 80005ea:	40dd      	lsrs	r5, r3
 80005ec:	2820      	cmp	r0, #32
 80005ee:	d005      	beq.n	80005fc <__aeabi_dsub+0x3a0>
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	1a1b      	subs	r3, r3, r0
 80005f4:	409a      	lsls	r2, r3
 80005f6:	1e53      	subs	r3, r2, #1
 80005f8:	419a      	sbcs	r2, r3
 80005fa:	4315      	orrs	r5, r2
 80005fc:	2307      	movs	r3, #7
 80005fe:	2700      	movs	r7, #0
 8000600:	402b      	ands	r3, r5
 8000602:	e7d0      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000604:	08c0      	lsrs	r0, r0, #3
 8000606:	0762      	lsls	r2, r4, #29
 8000608:	4302      	orrs	r2, r0
 800060a:	08e4      	lsrs	r4, r4, #3
 800060c:	e737      	b.n	800047e <__aeabi_dsub+0x222>
 800060e:	08ea      	lsrs	r2, r5, #3
 8000610:	0763      	lsls	r3, r4, #29
 8000612:	431a      	orrs	r2, r3
 8000614:	4bd3      	ldr	r3, [pc, #844]	@ (8000964 <__aeabi_dsub+0x708>)
 8000616:	08e4      	lsrs	r4, r4, #3
 8000618:	429f      	cmp	r7, r3
 800061a:	d100      	bne.n	800061e <__aeabi_dsub+0x3c2>
 800061c:	e72f      	b.n	800047e <__aeabi_dsub+0x222>
 800061e:	0324      	lsls	r4, r4, #12
 8000620:	0b25      	lsrs	r5, r4, #12
 8000622:	057c      	lsls	r4, r7, #21
 8000624:	0d64      	lsrs	r4, r4, #21
 8000626:	e6c2      	b.n	80003ae <__aeabi_dsub+0x152>
 8000628:	46ca      	mov	sl, r9
 800062a:	0022      	movs	r2, r4
 800062c:	4302      	orrs	r2, r0
 800062e:	d158      	bne.n	80006e2 <__aeabi_dsub+0x486>
 8000630:	4663      	mov	r3, ip
 8000632:	000e      	movs	r6, r1
 8000634:	9c02      	ldr	r4, [sp, #8]
 8000636:	9303      	str	r3, [sp, #12]
 8000638:	9b03      	ldr	r3, [sp, #12]
 800063a:	4657      	mov	r7, sl
 800063c:	08da      	lsrs	r2, r3, #3
 800063e:	e7e7      	b.n	8000610 <__aeabi_dsub+0x3b4>
 8000640:	4cc9      	ldr	r4, [pc, #804]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000642:	1aff      	subs	r7, r7, r3
 8000644:	4014      	ands	r4, r2
 8000646:	e692      	b.n	800036e <__aeabi_dsub+0x112>
 8000648:	4dc8      	ldr	r5, [pc, #800]	@ (800096c <__aeabi_dsub+0x710>)
 800064a:	1c7a      	adds	r2, r7, #1
 800064c:	422a      	tst	r2, r5
 800064e:	d000      	beq.n	8000652 <__aeabi_dsub+0x3f6>
 8000650:	e084      	b.n	800075c <__aeabi_dsub+0x500>
 8000652:	0022      	movs	r2, r4
 8000654:	4302      	orrs	r2, r0
 8000656:	2f00      	cmp	r7, #0
 8000658:	d000      	beq.n	800065c <__aeabi_dsub+0x400>
 800065a:	e0ef      	b.n	800083c <__aeabi_dsub+0x5e0>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_dsub+0x406>
 8000660:	e0e5      	b.n	800082e <__aeabi_dsub+0x5d2>
 8000662:	4662      	mov	r2, ip
 8000664:	9902      	ldr	r1, [sp, #8]
 8000666:	430a      	orrs	r2, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dsub+0x410>
 800066a:	e0c5      	b.n	80007f8 <__aeabi_dsub+0x59c>
 800066c:	4663      	mov	r3, ip
 800066e:	18c5      	adds	r5, r0, r3
 8000670:	468c      	mov	ip, r1
 8000672:	4285      	cmp	r5, r0
 8000674:	4180      	sbcs	r0, r0
 8000676:	4464      	add	r4, ip
 8000678:	4240      	negs	r0, r0
 800067a:	1824      	adds	r4, r4, r0
 800067c:	0223      	lsls	r3, r4, #8
 800067e:	d502      	bpl.n	8000686 <__aeabi_dsub+0x42a>
 8000680:	4bb9      	ldr	r3, [pc, #740]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000682:	3701      	adds	r7, #1
 8000684:	401c      	ands	r4, r3
 8000686:	46ba      	mov	sl, r7
 8000688:	9503      	str	r5, [sp, #12]
 800068a:	e7d5      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800068c:	4662      	mov	r2, ip
 800068e:	1a85      	subs	r5, r0, r2
 8000690:	42a8      	cmp	r0, r5
 8000692:	4192      	sbcs	r2, r2
 8000694:	4252      	negs	r2, r2
 8000696:	4691      	mov	r9, r2
 8000698:	9b02      	ldr	r3, [sp, #8]
 800069a:	1ae3      	subs	r3, r4, r3
 800069c:	001a      	movs	r2, r3
 800069e:	464b      	mov	r3, r9
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	0013      	movs	r3, r2
 80006a4:	4691      	mov	r9, r2
 80006a6:	021a      	lsls	r2, r3, #8
 80006a8:	d46c      	bmi.n	8000784 <__aeabi_dsub+0x528>
 80006aa:	464a      	mov	r2, r9
 80006ac:	464c      	mov	r4, r9
 80006ae:	432a      	orrs	r2, r5
 80006b0:	d000      	beq.n	80006b4 <__aeabi_dsub+0x458>
 80006b2:	e63a      	b.n	800032a <__aeabi_dsub+0xce>
 80006b4:	2600      	movs	r6, #0
 80006b6:	2400      	movs	r4, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	e678      	b.n	80003ae <__aeabi_dsub+0x152>
 80006bc:	9902      	ldr	r1, [sp, #8]
 80006be:	4653      	mov	r3, sl
 80006c0:	000d      	movs	r5, r1
 80006c2:	3a20      	subs	r2, #32
 80006c4:	40d5      	lsrs	r5, r2
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	d006      	beq.n	80006d8 <__aeabi_dsub+0x47c>
 80006ca:	2240      	movs	r2, #64	@ 0x40
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4662      	mov	r2, ip
 80006d4:	431a      	orrs	r2, r3
 80006d6:	4693      	mov	fp, r2
 80006d8:	465b      	mov	r3, fp
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	431d      	orrs	r5, r3
 80006e0:	e619      	b.n	8000316 <__aeabi_dsub+0xba>
 80006e2:	4653      	mov	r3, sl
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dsub+0x490>
 80006ea:	e0c6      	b.n	800087a <__aeabi_dsub+0x61e>
 80006ec:	4e9d      	ldr	r6, [pc, #628]	@ (8000964 <__aeabi_dsub+0x708>)
 80006ee:	45b2      	cmp	sl, r6
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dsub+0x498>
 80006f2:	e6bd      	b.n	8000470 <__aeabi_dsub+0x214>
 80006f4:	4688      	mov	r8, r1
 80006f6:	000e      	movs	r6, r1
 80006f8:	2501      	movs	r5, #1
 80006fa:	2a38      	cmp	r2, #56	@ 0x38
 80006fc:	dc10      	bgt.n	8000720 <__aeabi_dsub+0x4c4>
 80006fe:	2a1f      	cmp	r2, #31
 8000700:	dc7f      	bgt.n	8000802 <__aeabi_dsub+0x5a6>
 8000702:	2120      	movs	r1, #32
 8000704:	0025      	movs	r5, r4
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	0007      	movs	r7, r0
 800070a:	4088      	lsls	r0, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d7      	lsrs	r7, r2
 8000710:	40d4      	lsrs	r4, r2
 8000712:	1e41      	subs	r1, r0, #1
 8000714:	4188      	sbcs	r0, r1
 8000716:	9b02      	ldr	r3, [sp, #8]
 8000718:	433d      	orrs	r5, r7
 800071a:	1b1b      	subs	r3, r3, r4
 800071c:	4305      	orrs	r5, r0
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	4662      	mov	r2, ip
 8000722:	1b55      	subs	r5, r2, r5
 8000724:	45ac      	cmp	ip, r5
 8000726:	4192      	sbcs	r2, r2
 8000728:	9b02      	ldr	r3, [sp, #8]
 800072a:	4252      	negs	r2, r2
 800072c:	464f      	mov	r7, r9
 800072e:	1a9c      	subs	r4, r3, r2
 8000730:	e5f6      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_dsub+0x4dc>
 8000736:	e0b7      	b.n	80008a8 <__aeabi_dsub+0x64c>
 8000738:	2a00      	cmp	r2, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dsub+0x4e2>
 800073c:	e0f0      	b.n	8000920 <__aeabi_dsub+0x6c4>
 800073e:	2601      	movs	r6, #1
 8000740:	400e      	ands	r6, r1
 8000742:	4663      	mov	r3, ip
 8000744:	9802      	ldr	r0, [sp, #8]
 8000746:	08d9      	lsrs	r1, r3, #3
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	430a      	orrs	r2, r1
 800074c:	08c4      	lsrs	r4, r0, #3
 800074e:	e696      	b.n	800047e <__aeabi_dsub+0x222>
 8000750:	4c85      	ldr	r4, [pc, #532]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000752:	1aff      	subs	r7, r7, r3
 8000754:	4014      	ands	r4, r2
 8000756:	0762      	lsls	r2, r4, #29
 8000758:	08e4      	lsrs	r4, r4, #3
 800075a:	e760      	b.n	800061e <__aeabi_dsub+0x3c2>
 800075c:	4981      	ldr	r1, [pc, #516]	@ (8000964 <__aeabi_dsub+0x708>)
 800075e:	428a      	cmp	r2, r1
 8000760:	d100      	bne.n	8000764 <__aeabi_dsub+0x508>
 8000762:	e0c9      	b.n	80008f8 <__aeabi_dsub+0x69c>
 8000764:	4663      	mov	r3, ip
 8000766:	18c1      	adds	r1, r0, r3
 8000768:	4281      	cmp	r1, r0
 800076a:	4180      	sbcs	r0, r0
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	4240      	negs	r0, r0
 8000770:	18e3      	adds	r3, r4, r3
 8000772:	181b      	adds	r3, r3, r0
 8000774:	07dd      	lsls	r5, r3, #31
 8000776:	085c      	lsrs	r4, r3, #1
 8000778:	2307      	movs	r3, #7
 800077a:	0849      	lsrs	r1, r1, #1
 800077c:	430d      	orrs	r5, r1
 800077e:	0017      	movs	r7, r2
 8000780:	402b      	ands	r3, r5
 8000782:	e710      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000784:	4663      	mov	r3, ip
 8000786:	1a1d      	subs	r5, r3, r0
 8000788:	45ac      	cmp	ip, r5
 800078a:	4192      	sbcs	r2, r2
 800078c:	2601      	movs	r6, #1
 800078e:	9b02      	ldr	r3, [sp, #8]
 8000790:	4252      	negs	r2, r2
 8000792:	1b1c      	subs	r4, r3, r4
 8000794:	4688      	mov	r8, r1
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	400e      	ands	r6, r1
 800079a:	e5c6      	b.n	800032a <__aeabi_dsub+0xce>
 800079c:	4663      	mov	r3, ip
 800079e:	18c5      	adds	r5, r0, r3
 80007a0:	9b02      	ldr	r3, [sp, #8]
 80007a2:	4285      	cmp	r5, r0
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	469c      	mov	ip, r3
 80007a8:	4240      	negs	r0, r0
 80007aa:	4464      	add	r4, ip
 80007ac:	1824      	adds	r4, r4, r0
 80007ae:	2701      	movs	r7, #1
 80007b0:	0223      	lsls	r3, r4, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dsub+0x55a>
 80007b4:	e6f5      	b.n	80005a2 <__aeabi_dsub+0x346>
 80007b6:	2702      	movs	r7, #2
 80007b8:	e641      	b.n	800043e <__aeabi_dsub+0x1e2>
 80007ba:	4663      	mov	r3, ip
 80007bc:	1ac5      	subs	r5, r0, r3
 80007be:	42a8      	cmp	r0, r5
 80007c0:	4180      	sbcs	r0, r0
 80007c2:	9b02      	ldr	r3, [sp, #8]
 80007c4:	4240      	negs	r0, r0
 80007c6:	1ae4      	subs	r4, r4, r3
 80007c8:	2701      	movs	r7, #1
 80007ca:	1a24      	subs	r4, r4, r0
 80007cc:	e5a8      	b.n	8000320 <__aeabi_dsub+0xc4>
 80007ce:	9d02      	ldr	r5, [sp, #8]
 80007d0:	4652      	mov	r2, sl
 80007d2:	002b      	movs	r3, r5
 80007d4:	3a20      	subs	r2, #32
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	0019      	movs	r1, r3
 80007da:	4653      	mov	r3, sl
 80007dc:	2b20      	cmp	r3, #32
 80007de:	d006      	beq.n	80007ee <__aeabi_dsub+0x592>
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	002b      	movs	r3, r5
 80007e6:	4093      	lsls	r3, r2
 80007e8:	4662      	mov	r2, ip
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4693      	mov	fp, r2
 80007ee:	465d      	mov	r5, fp
 80007f0:	1e6b      	subs	r3, r5, #1
 80007f2:	419d      	sbcs	r5, r3
 80007f4:	430d      	orrs	r5, r1
 80007f6:	e615      	b.n	8000424 <__aeabi_dsub+0x1c8>
 80007f8:	0762      	lsls	r2, r4, #29
 80007fa:	08c0      	lsrs	r0, r0, #3
 80007fc:	4302      	orrs	r2, r0
 80007fe:	08e4      	lsrs	r4, r4, #3
 8000800:	e70d      	b.n	800061e <__aeabi_dsub+0x3c2>
 8000802:	0011      	movs	r1, r2
 8000804:	0027      	movs	r7, r4
 8000806:	3920      	subs	r1, #32
 8000808:	40cf      	lsrs	r7, r1
 800080a:	2a20      	cmp	r2, #32
 800080c:	d005      	beq.n	800081a <__aeabi_dsub+0x5be>
 800080e:	2140      	movs	r1, #64	@ 0x40
 8000810:	1a8a      	subs	r2, r1, r2
 8000812:	4094      	lsls	r4, r2
 8000814:	0025      	movs	r5, r4
 8000816:	4305      	orrs	r5, r0
 8000818:	9503      	str	r5, [sp, #12]
 800081a:	9d03      	ldr	r5, [sp, #12]
 800081c:	1e6a      	subs	r2, r5, #1
 800081e:	4195      	sbcs	r5, r2
 8000820:	433d      	orrs	r5, r7
 8000822:	e77d      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dsub+0x5ce>
 8000828:	e744      	b.n	80006b4 <__aeabi_dsub+0x458>
 800082a:	2601      	movs	r6, #1
 800082c:	400e      	ands	r6, r1
 800082e:	4663      	mov	r3, ip
 8000830:	08d9      	lsrs	r1, r3, #3
 8000832:	9b02      	ldr	r3, [sp, #8]
 8000834:	075a      	lsls	r2, r3, #29
 8000836:	430a      	orrs	r2, r1
 8000838:	08dc      	lsrs	r4, r3, #3
 800083a:	e6f0      	b.n	800061e <__aeabi_dsub+0x3c2>
 800083c:	2a00      	cmp	r2, #0
 800083e:	d028      	beq.n	8000892 <__aeabi_dsub+0x636>
 8000840:	4662      	mov	r2, ip
 8000842:	9f02      	ldr	r7, [sp, #8]
 8000844:	08c0      	lsrs	r0, r0, #3
 8000846:	433a      	orrs	r2, r7
 8000848:	d100      	bne.n	800084c <__aeabi_dsub+0x5f0>
 800084a:	e6dc      	b.n	8000606 <__aeabi_dsub+0x3aa>
 800084c:	0762      	lsls	r2, r4, #29
 800084e:	4310      	orrs	r0, r2
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	08e4      	lsrs	r4, r4, #3
 8000854:	0312      	lsls	r2, r2, #12
 8000856:	4214      	tst	r4, r2
 8000858:	d009      	beq.n	800086e <__aeabi_dsub+0x612>
 800085a:	08fd      	lsrs	r5, r7, #3
 800085c:	4215      	tst	r5, r2
 800085e:	d106      	bne.n	800086e <__aeabi_dsub+0x612>
 8000860:	4663      	mov	r3, ip
 8000862:	2601      	movs	r6, #1
 8000864:	002c      	movs	r4, r5
 8000866:	08d8      	lsrs	r0, r3, #3
 8000868:	077b      	lsls	r3, r7, #29
 800086a:	4318      	orrs	r0, r3
 800086c:	400e      	ands	r6, r1
 800086e:	0f42      	lsrs	r2, r0, #29
 8000870:	00c0      	lsls	r0, r0, #3
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	0752      	lsls	r2, r2, #29
 8000876:	4302      	orrs	r2, r0
 8000878:	e601      	b.n	800047e <__aeabi_dsub+0x222>
 800087a:	4663      	mov	r3, ip
 800087c:	1a1d      	subs	r5, r3, r0
 800087e:	45ac      	cmp	ip, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	9b02      	ldr	r3, [sp, #8]
 8000884:	4252      	negs	r2, r2
 8000886:	1b1c      	subs	r4, r3, r4
 8000888:	000e      	movs	r6, r1
 800088a:	4688      	mov	r8, r1
 800088c:	2701      	movs	r7, #1
 800088e:	1aa4      	subs	r4, r4, r2
 8000890:	e546      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000892:	4663      	mov	r3, ip
 8000894:	08d9      	lsrs	r1, r3, #3
 8000896:	9b02      	ldr	r3, [sp, #8]
 8000898:	075a      	lsls	r2, r3, #29
 800089a:	430a      	orrs	r2, r1
 800089c:	08dc      	lsrs	r4, r3, #3
 800089e:	e5ee      	b.n	800047e <__aeabi_dsub+0x222>
 80008a0:	4663      	mov	r3, ip
 80008a2:	9c02      	ldr	r4, [sp, #8]
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	e6c7      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x654>
 80008ae:	e6aa      	b.n	8000606 <__aeabi_dsub+0x3aa>
 80008b0:	0762      	lsls	r2, r4, #29
 80008b2:	4310      	orrs	r0, r2
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	08e4      	lsrs	r4, r4, #3
 80008b8:	0312      	lsls	r2, r2, #12
 80008ba:	4214      	tst	r4, r2
 80008bc:	d0d7      	beq.n	800086e <__aeabi_dsub+0x612>
 80008be:	9f02      	ldr	r7, [sp, #8]
 80008c0:	08fd      	lsrs	r5, r7, #3
 80008c2:	4215      	tst	r5, r2
 80008c4:	d1d3      	bne.n	800086e <__aeabi_dsub+0x612>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2601      	movs	r6, #1
 80008ca:	08d8      	lsrs	r0, r3, #3
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	002c      	movs	r4, r5
 80008d0:	4318      	orrs	r0, r3
 80008d2:	400e      	ands	r6, r1
 80008d4:	e7cb      	b.n	800086e <__aeabi_dsub+0x612>
 80008d6:	000a      	movs	r2, r1
 80008d8:	0027      	movs	r7, r4
 80008da:	3a20      	subs	r2, #32
 80008dc:	40d7      	lsrs	r7, r2
 80008de:	2920      	cmp	r1, #32
 80008e0:	d005      	beq.n	80008ee <__aeabi_dsub+0x692>
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	1a52      	subs	r2, r2, r1
 80008e6:	4094      	lsls	r4, r2
 80008e8:	0025      	movs	r5, r4
 80008ea:	4305      	orrs	r5, r0
 80008ec:	9503      	str	r5, [sp, #12]
 80008ee:	9d03      	ldr	r5, [sp, #12]
 80008f0:	1e6a      	subs	r2, r5, #1
 80008f2:	4195      	sbcs	r5, r2
 80008f4:	432f      	orrs	r7, r5
 80008f6:	e610      	b.n	800051a <__aeabi_dsub+0x2be>
 80008f8:	0014      	movs	r4, r2
 80008fa:	2500      	movs	r5, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	e556      	b.n	80003ae <__aeabi_dsub+0x152>
 8000900:	9b02      	ldr	r3, [sp, #8]
 8000902:	4460      	add	r0, ip
 8000904:	4699      	mov	r9, r3
 8000906:	4560      	cmp	r0, ip
 8000908:	4192      	sbcs	r2, r2
 800090a:	444c      	add	r4, r9
 800090c:	4252      	negs	r2, r2
 800090e:	0005      	movs	r5, r0
 8000910:	18a4      	adds	r4, r4, r2
 8000912:	e74c      	b.n	80007ae <__aeabi_dsub+0x552>
 8000914:	001a      	movs	r2, r3
 8000916:	001c      	movs	r4, r3
 8000918:	432a      	orrs	r2, r5
 800091a:	d000      	beq.n	800091e <__aeabi_dsub+0x6c2>
 800091c:	e6b3      	b.n	8000686 <__aeabi_dsub+0x42a>
 800091e:	e6c9      	b.n	80006b4 <__aeabi_dsub+0x458>
 8000920:	2480      	movs	r4, #128	@ 0x80
 8000922:	2600      	movs	r6, #0
 8000924:	0324      	lsls	r4, r4, #12
 8000926:	e5ae      	b.n	8000486 <__aeabi_dsub+0x22a>
 8000928:	2120      	movs	r1, #32
 800092a:	2500      	movs	r5, #0
 800092c:	1a09      	subs	r1, r1, r0
 800092e:	e517      	b.n	8000360 <__aeabi_dsub+0x104>
 8000930:	2200      	movs	r2, #0
 8000932:	2500      	movs	r5, #0
 8000934:	4c0b      	ldr	r4, [pc, #44]	@ (8000964 <__aeabi_dsub+0x708>)
 8000936:	e53a      	b.n	80003ae <__aeabi_dsub+0x152>
 8000938:	2d00      	cmp	r5, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dsub+0x6e2>
 800093c:	e5f6      	b.n	800052c <__aeabi_dsub+0x2d0>
 800093e:	464b      	mov	r3, r9
 8000940:	1bda      	subs	r2, r3, r7
 8000942:	4692      	mov	sl, r2
 8000944:	2f00      	cmp	r7, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dsub+0x6ee>
 8000948:	e66f      	b.n	800062a <__aeabi_dsub+0x3ce>
 800094a:	2a38      	cmp	r2, #56	@ 0x38
 800094c:	dc05      	bgt.n	800095a <__aeabi_dsub+0x6fe>
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	0436      	lsls	r6, r6, #16
 8000952:	4334      	orrs	r4, r6
 8000954:	4688      	mov	r8, r1
 8000956:	000e      	movs	r6, r1
 8000958:	e6d1      	b.n	80006fe <__aeabi_dsub+0x4a2>
 800095a:	4688      	mov	r8, r1
 800095c:	000e      	movs	r6, r1
 800095e:	2501      	movs	r5, #1
 8000960:	e6de      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	000007ff 	.word	0x000007ff
 8000968:	ff7fffff 	.word	0xff7fffff
 800096c:	000007fe 	.word	0x000007fe
 8000970:	2d00      	cmp	r5, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_dsub+0x71a>
 8000974:	e668      	b.n	8000648 <__aeabi_dsub+0x3ec>
 8000976:	464b      	mov	r3, r9
 8000978:	1bd9      	subs	r1, r3, r7
 800097a:	2f00      	cmp	r7, #0
 800097c:	d101      	bne.n	8000982 <__aeabi_dsub+0x726>
 800097e:	468a      	mov	sl, r1
 8000980:	e5a7      	b.n	80004d2 <__aeabi_dsub+0x276>
 8000982:	2701      	movs	r7, #1
 8000984:	2938      	cmp	r1, #56	@ 0x38
 8000986:	dd00      	ble.n	800098a <__aeabi_dsub+0x72e>
 8000988:	e5c7      	b.n	800051a <__aeabi_dsub+0x2be>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0412      	lsls	r2, r2, #16
 800098e:	4314      	orrs	r4, r2
 8000990:	e5af      	b.n	80004f2 <__aeabi_dsub+0x296>
 8000992:	46c0      	nop			@ (mov r8, r8)

08000994 <__aeabi_d2iz>:
 8000994:	000b      	movs	r3, r1
 8000996:	0002      	movs	r2, r0
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d16      	ldr	r5, [pc, #88]	@ (80009f4 <__aeabi_d2iz+0x60>)
 800099c:	030c      	lsls	r4, r1, #12
 800099e:	b082      	sub	sp, #8
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	2000      	movs	r0, #0
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	0b24      	lsrs	r4, r4, #12
 80009aa:	0d49      	lsrs	r1, r1, #21
 80009ac:	0fde      	lsrs	r6, r3, #31
 80009ae:	42a9      	cmp	r1, r5
 80009b0:	dd04      	ble.n	80009bc <__aeabi_d2iz+0x28>
 80009b2:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <__aeabi_d2iz+0x64>)
 80009b4:	4281      	cmp	r1, r0
 80009b6:	dd03      	ble.n	80009c0 <__aeabi_d2iz+0x2c>
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <__aeabi_d2iz+0x68>)
 80009ba:	18f0      	adds	r0, r6, r3
 80009bc:	b002      	add	sp, #8
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	2080      	movs	r0, #128	@ 0x80
 80009c2:	0340      	lsls	r0, r0, #13
 80009c4:	4320      	orrs	r0, r4
 80009c6:	4c0e      	ldr	r4, [pc, #56]	@ (8000a00 <__aeabi_d2iz+0x6c>)
 80009c8:	1a64      	subs	r4, r4, r1
 80009ca:	2c1f      	cmp	r4, #31
 80009cc:	dd08      	ble.n	80009e0 <__aeabi_d2iz+0x4c>
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <__aeabi_d2iz+0x70>)
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	40d8      	lsrs	r0, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4258      	negs	r0, r3
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d1ef      	bne.n	80009bc <__aeabi_d2iz+0x28>
 80009dc:	0018      	movs	r0, r3
 80009de:	e7ed      	b.n	80009bc <__aeabi_d2iz+0x28>
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <__aeabi_d2iz+0x74>)
 80009e2:	9a00      	ldr	r2, [sp, #0]
 80009e4:	469c      	mov	ip, r3
 80009e6:	0003      	movs	r3, r0
 80009e8:	4461      	add	r1, ip
 80009ea:	408b      	lsls	r3, r1
 80009ec:	40e2      	lsrs	r2, r4
 80009ee:	4313      	orrs	r3, r2
 80009f0:	e7f1      	b.n	80009d6 <__aeabi_d2iz+0x42>
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	000003fe 	.word	0x000003fe
 80009f8:	0000041d 	.word	0x0000041d
 80009fc:	7fffffff 	.word	0x7fffffff
 8000a00:	00000433 	.word	0x00000433
 8000a04:	00000413 	.word	0x00000413
 8000a08:	fffffbed 	.word	0xfffffbed

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	0010      	movs	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	0019      	movs	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	46c0      	nop			@ (mov r8, r8)

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a1e:	f000 f909 	bl	8000c34 <__ledf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d401      	bmi.n	8000a2a <__aeabi_cdcmpeq+0xe>
 8000a26:	2100      	movs	r1, #0
 8000a28:	42c8      	cmn	r0, r1
 8000a2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	f000 f849 	bl	8000ac4 <__eqdf2>
 8000a32:	4240      	negs	r0, r0
 8000a34:	3001      	adds	r0, #1
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <__aeabi_dcmplt>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	f000 f8fb 	bl	8000c34 <__ledf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	db01      	blt.n	8000a46 <__aeabi_dcmplt+0xe>
 8000a42:	2000      	movs	r0, #0
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	2001      	movs	r0, #1
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)

08000a4c <__aeabi_dcmple>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	f000 f8f1 	bl	8000c34 <__ledf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	dd01      	ble.n	8000a5a <__aeabi_dcmple+0xe>
 8000a56:	2000      	movs	r0, #0
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)

08000a60 <__aeabi_dcmpgt>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	f000 f873 	bl	8000b4c <__gedf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	dc01      	bgt.n	8000a6e <__aeabi_dcmpgt+0xe>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	2001      	movs	r0, #1
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)

08000a74 <__aeabi_dcmpge>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	f000 f869 	bl	8000b4c <__gedf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	da01      	bge.n	8000a82 <__aeabi_dcmpge+0xe>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	2001      	movs	r0, #1
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)

08000a88 <__clzsi2>:
 8000a88:	211c      	movs	r1, #28
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d301      	bcc.n	8000a96 <__clzsi2+0xe>
 8000a92:	0c00      	lsrs	r0, r0, #16
 8000a94:	3910      	subs	r1, #16
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	4298      	cmp	r0, r3
 8000a9a:	d301      	bcc.n	8000aa0 <__clzsi2+0x18>
 8000a9c:	0a00      	lsrs	r0, r0, #8
 8000a9e:	3908      	subs	r1, #8
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d301      	bcc.n	8000aaa <__clzsi2+0x22>
 8000aa6:	0900      	lsrs	r0, r0, #4
 8000aa8:	3904      	subs	r1, #4
 8000aaa:	a202      	add	r2, pc, #8	@ (adr r2, 8000ab4 <__clzsi2+0x2c>)
 8000aac:	5c10      	ldrb	r0, [r2, r0]
 8000aae:	1840      	adds	r0, r0, r1
 8000ab0:	4770      	bx	lr
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	02020304 	.word	0x02020304
 8000ab8:	01010101 	.word	0x01010101
	...

08000ac4 <__eqdf2>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	46de      	mov	lr, fp
 8000aca:	464e      	mov	r6, r9
 8000acc:	4645      	mov	r5, r8
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	000d      	movs	r5, r1
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	0fe8      	lsrs	r0, r5, #31
 8000ad6:	4683      	mov	fp, r0
 8000ad8:	0309      	lsls	r1, r1, #12
 8000ada:	0fd8      	lsrs	r0, r3, #31
 8000adc:	0b09      	lsrs	r1, r1, #12
 8000ade:	4682      	mov	sl, r0
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <__eqdf2+0x84>)
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	031f      	lsls	r7, r3, #12
 8000ae6:	0069      	lsls	r1, r5, #1
 8000ae8:	005e      	lsls	r6, r3, #1
 8000aea:	0d49      	lsrs	r1, r1, #21
 8000aec:	0b3f      	lsrs	r7, r7, #12
 8000aee:	0d76      	lsrs	r6, r6, #21
 8000af0:	4281      	cmp	r1, r0
 8000af2:	d018      	beq.n	8000b26 <__eqdf2+0x62>
 8000af4:	4286      	cmp	r6, r0
 8000af6:	d00f      	beq.n	8000b18 <__eqdf2+0x54>
 8000af8:	2001      	movs	r0, #1
 8000afa:	42b1      	cmp	r1, r6
 8000afc:	d10d      	bne.n	8000b1a <__eqdf2+0x56>
 8000afe:	45bc      	cmp	ip, r7
 8000b00:	d10b      	bne.n	8000b1a <__eqdf2+0x56>
 8000b02:	4294      	cmp	r4, r2
 8000b04:	d109      	bne.n	8000b1a <__eqdf2+0x56>
 8000b06:	45d3      	cmp	fp, sl
 8000b08:	d01c      	beq.n	8000b44 <__eqdf2+0x80>
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d105      	bne.n	8000b1a <__eqdf2+0x56>
 8000b0e:	4660      	mov	r0, ip
 8000b10:	4320      	orrs	r0, r4
 8000b12:	1e43      	subs	r3, r0, #1
 8000b14:	4198      	sbcs	r0, r3
 8000b16:	e000      	b.n	8000b1a <__eqdf2+0x56>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b1c:	46bb      	mov	fp, r7
 8000b1e:	46b2      	mov	sl, r6
 8000b20:	46a9      	mov	r9, r5
 8000b22:	46a0      	mov	r8, r4
 8000b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b26:	2001      	movs	r0, #1
 8000b28:	428e      	cmp	r6, r1
 8000b2a:	d1f6      	bne.n	8000b1a <__eqdf2+0x56>
 8000b2c:	4661      	mov	r1, ip
 8000b2e:	4339      	orrs	r1, r7
 8000b30:	000f      	movs	r7, r1
 8000b32:	4317      	orrs	r7, r2
 8000b34:	4327      	orrs	r7, r4
 8000b36:	d1f0      	bne.n	8000b1a <__eqdf2+0x56>
 8000b38:	465b      	mov	r3, fp
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	1a98      	subs	r0, r3, r2
 8000b3e:	1e43      	subs	r3, r0, #1
 8000b40:	4198      	sbcs	r0, r3
 8000b42:	e7ea      	b.n	8000b1a <__eqdf2+0x56>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e7e8      	b.n	8000b1a <__eqdf2+0x56>
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__gedf2>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	4657      	mov	r7, sl
 8000b50:	464e      	mov	r6, r9
 8000b52:	4645      	mov	r5, r8
 8000b54:	46de      	mov	lr, fp
 8000b56:	b5e0      	push	{r5, r6, r7, lr}
 8000b58:	000d      	movs	r5, r1
 8000b5a:	030f      	lsls	r7, r1, #12
 8000b5c:	0b39      	lsrs	r1, r7, #12
 8000b5e:	b083      	sub	sp, #12
 8000b60:	0004      	movs	r4, r0
 8000b62:	4680      	mov	r8, r0
 8000b64:	9101      	str	r1, [sp, #4]
 8000b66:	0058      	lsls	r0, r3, #1
 8000b68:	0fe9      	lsrs	r1, r5, #31
 8000b6a:	4f31      	ldr	r7, [pc, #196]	@ (8000c30 <__gedf2+0xe4>)
 8000b6c:	0d40      	lsrs	r0, r0, #21
 8000b6e:	468c      	mov	ip, r1
 8000b70:	006e      	lsls	r6, r5, #1
 8000b72:	0319      	lsls	r1, r3, #12
 8000b74:	4682      	mov	sl, r0
 8000b76:	4691      	mov	r9, r2
 8000b78:	0d76      	lsrs	r6, r6, #21
 8000b7a:	0b09      	lsrs	r1, r1, #12
 8000b7c:	0fd8      	lsrs	r0, r3, #31
 8000b7e:	42be      	cmp	r6, r7
 8000b80:	d01f      	beq.n	8000bc2 <__gedf2+0x76>
 8000b82:	45ba      	cmp	sl, r7
 8000b84:	d00f      	beq.n	8000ba6 <__gedf2+0x5a>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d12f      	bne.n	8000bea <__gedf2+0x9e>
 8000b8a:	4655      	mov	r5, sl
 8000b8c:	9e01      	ldr	r6, [sp, #4]
 8000b8e:	4334      	orrs	r4, r6
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d127      	bne.n	8000be4 <__gedf2+0x98>
 8000b94:	430a      	orrs	r2, r1
 8000b96:	d03a      	beq.n	8000c0e <__gedf2+0xc2>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d145      	bne.n	8000c28 <__gedf2+0xdc>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d11a      	bne.n	8000bd6 <__gedf2+0x8a>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e017      	b.n	8000bd6 <__gedf2+0x8a>
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	d13b      	bne.n	8000c22 <__gedf2+0xd6>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d102      	bne.n	8000bb4 <__gedf2+0x68>
 8000bae:	9f01      	ldr	r7, [sp, #4]
 8000bb0:	4327      	orrs	r7, r4
 8000bb2:	d0f3      	beq.n	8000b9c <__gedf2+0x50>
 8000bb4:	4584      	cmp	ip, r0
 8000bb6:	d109      	bne.n	8000bcc <__gedf2+0x80>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <__gedf2+0x54>
 8000bbe:	4660      	mov	r0, ip
 8000bc0:	e009      	b.n	8000bd6 <__gedf2+0x8a>
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	4327      	orrs	r7, r4
 8000bc6:	d12c      	bne.n	8000c22 <__gedf2+0xd6>
 8000bc8:	45b2      	cmp	sl, r6
 8000bca:	d024      	beq.n	8000c16 <__gedf2+0xca>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	2002      	movs	r0, #2
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4018      	ands	r0, r3
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bda:	46bb      	mov	fp, r7
 8000bdc:	46b2      	mov	sl, r6
 8000bde:	46a9      	mov	r9, r5
 8000be0:	46a0      	mov	r8, r4
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d0d9      	beq.n	8000b9c <__gedf2+0x50>
 8000be8:	e7e4      	b.n	8000bb4 <__gedf2+0x68>
 8000bea:	4654      	mov	r4, sl
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d0ed      	beq.n	8000bcc <__gedf2+0x80>
 8000bf0:	4584      	cmp	ip, r0
 8000bf2:	d1eb      	bne.n	8000bcc <__gedf2+0x80>
 8000bf4:	4556      	cmp	r6, sl
 8000bf6:	dce9      	bgt.n	8000bcc <__gedf2+0x80>
 8000bf8:	dbde      	blt.n	8000bb8 <__gedf2+0x6c>
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d8e5      	bhi.n	8000bcc <__gedf2+0x80>
 8000c00:	d1da      	bne.n	8000bb8 <__gedf2+0x6c>
 8000c02:	45c8      	cmp	r8, r9
 8000c04:	d8e2      	bhi.n	8000bcc <__gedf2+0x80>
 8000c06:	2000      	movs	r0, #0
 8000c08:	45c8      	cmp	r8, r9
 8000c0a:	d2e4      	bcs.n	8000bd6 <__gedf2+0x8a>
 8000c0c:	e7d4      	b.n	8000bb8 <__gedf2+0x6c>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d0e0      	beq.n	8000bd6 <__gedf2+0x8a>
 8000c14:	e7da      	b.n	8000bcc <__gedf2+0x80>
 8000c16:	4311      	orrs	r1, r2
 8000c18:	d103      	bne.n	8000c22 <__gedf2+0xd6>
 8000c1a:	4584      	cmp	ip, r0
 8000c1c:	d1d6      	bne.n	8000bcc <__gedf2+0x80>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e7d9      	b.n	8000bd6 <__gedf2+0x8a>
 8000c22:	2002      	movs	r0, #2
 8000c24:	4240      	negs	r0, r0
 8000c26:	e7d6      	b.n	8000bd6 <__gedf2+0x8a>
 8000c28:	4584      	cmp	ip, r0
 8000c2a:	d0e6      	beq.n	8000bfa <__gedf2+0xae>
 8000c2c:	e7ce      	b.n	8000bcc <__gedf2+0x80>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	000007ff 	.word	0x000007ff

08000c34 <__ledf2>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	4657      	mov	r7, sl
 8000c38:	464e      	mov	r6, r9
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	000d      	movs	r5, r1
 8000c42:	030f      	lsls	r7, r1, #12
 8000c44:	0004      	movs	r4, r0
 8000c46:	4680      	mov	r8, r0
 8000c48:	0fe8      	lsrs	r0, r5, #31
 8000c4a:	0b39      	lsrs	r1, r7, #12
 8000c4c:	4684      	mov	ip, r0
 8000c4e:	b083      	sub	sp, #12
 8000c50:	0058      	lsls	r0, r3, #1
 8000c52:	4f30      	ldr	r7, [pc, #192]	@ (8000d14 <__ledf2+0xe0>)
 8000c54:	0d40      	lsrs	r0, r0, #21
 8000c56:	9101      	str	r1, [sp, #4]
 8000c58:	031e      	lsls	r6, r3, #12
 8000c5a:	0069      	lsls	r1, r5, #1
 8000c5c:	4682      	mov	sl, r0
 8000c5e:	4691      	mov	r9, r2
 8000c60:	0d49      	lsrs	r1, r1, #21
 8000c62:	0b36      	lsrs	r6, r6, #12
 8000c64:	0fd8      	lsrs	r0, r3, #31
 8000c66:	42b9      	cmp	r1, r7
 8000c68:	d020      	beq.n	8000cac <__ledf2+0x78>
 8000c6a:	45ba      	cmp	sl, r7
 8000c6c:	d00f      	beq.n	8000c8e <__ledf2+0x5a>
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d12b      	bne.n	8000cca <__ledf2+0x96>
 8000c72:	9901      	ldr	r1, [sp, #4]
 8000c74:	430c      	orrs	r4, r1
 8000c76:	4651      	mov	r1, sl
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d137      	bne.n	8000cec <__ledf2+0xb8>
 8000c7c:	4332      	orrs	r2, r6
 8000c7e:	d038      	beq.n	8000cf2 <__ledf2+0xbe>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d144      	bne.n	8000d0e <__ledf2+0xda>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d119      	bne.n	8000cbc <__ledf2+0x88>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	e016      	b.n	8000cbc <__ledf2+0x88>
 8000c8e:	4316      	orrs	r6, r2
 8000c90:	d113      	bne.n	8000cba <__ledf2+0x86>
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d102      	bne.n	8000c9c <__ledf2+0x68>
 8000c96:	9f01      	ldr	r7, [sp, #4]
 8000c98:	4327      	orrs	r7, r4
 8000c9a:	d0f3      	beq.n	8000c84 <__ledf2+0x50>
 8000c9c:	4584      	cmp	ip, r0
 8000c9e:	d020      	beq.n	8000ce2 <__ledf2+0xae>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4018      	ands	r0, r3
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e007      	b.n	8000cbc <__ledf2+0x88>
 8000cac:	9f01      	ldr	r7, [sp, #4]
 8000cae:	4327      	orrs	r7, r4
 8000cb0:	d103      	bne.n	8000cba <__ledf2+0x86>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d1f4      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cb6:	4316      	orrs	r6, r2
 8000cb8:	d01f      	beq.n	8000cfa <__ledf2+0xc6>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	4654      	mov	r4, sl
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d0e7      	beq.n	8000ca0 <__ledf2+0x6c>
 8000cd0:	4584      	cmp	ip, r0
 8000cd2:	d1e5      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cd4:	4551      	cmp	r1, sl
 8000cd6:	dce3      	bgt.n	8000ca0 <__ledf2+0x6c>
 8000cd8:	db03      	blt.n	8000ce2 <__ledf2+0xae>
 8000cda:	9b01      	ldr	r3, [sp, #4]
 8000cdc:	42b3      	cmp	r3, r6
 8000cde:	d8df      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000ce0:	d00f      	beq.n	8000d02 <__ledf2+0xce>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0cf      	beq.n	8000c88 <__ledf2+0x54>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e7e7      	b.n	8000cbc <__ledf2+0x88>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d0c9      	beq.n	8000c84 <__ledf2+0x50>
 8000cf0:	e7d4      	b.n	8000c9c <__ledf2+0x68>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d0e1      	beq.n	8000cbc <__ledf2+0x88>
 8000cf8:	e7d2      	b.n	8000ca0 <__ledf2+0x6c>
 8000cfa:	4584      	cmp	ip, r0
 8000cfc:	d1d0      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e7dc      	b.n	8000cbc <__ledf2+0x88>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d8cc      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000d06:	2000      	movs	r0, #0
 8000d08:	45c8      	cmp	r8, r9
 8000d0a:	d2d7      	bcs.n	8000cbc <__ledf2+0x88>
 8000d0c:	e7e9      	b.n	8000ce2 <__ledf2+0xae>
 8000d0e:	4584      	cmp	ip, r0
 8000d10:	d0e3      	beq.n	8000cda <__ledf2+0xa6>
 8000d12:	e7c5      	b.n	8000ca0 <__ledf2+0x6c>
 8000d14:	000007ff 	.word	0x000007ff

08000d18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3308      	adds	r3, #8
 8000d24:	001a      	movs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4252      	negs	r2, r2
 8000d30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3308      	adds	r3, #8
 8000d36:	001a      	movs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3308      	adds	r3, #8
 8000d40:	001a      	movs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	d103      	bne.n	8000d88 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e00c      	b.n	8000da2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e002      	b.n	8000d96 <vListInsert+0x2c>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d2f6      	bcs.n	8000d90 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6892      	ldr	r2, [r2, #8]
 8000dec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d103      	bne.n	8000e0a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e26:	b5b0      	push	{r4, r5, r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <xQueueGenericReset+0x1e>
 8000e3e:	b672      	cpsid	i
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	e7fd      	b.n	8000e40 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <xQueueGenericReset+0x26>
 8000e4a:	e06a      	b.n	8000f22 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d066      	beq.n	8000f22 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	0c15      	lsrs	r5, r2, #16
 8000e60:	0c19      	lsrs	r1, r3, #16
 8000e62:	b2a8      	uxth	r0, r5
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d104      	bne.n	8000e72 <xQueueGenericReset+0x4c>
 8000e68:	b288      	uxth	r0, r1
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d013      	beq.n	8000e96 <xQueueGenericReset+0x70>
 8000e6e:	1c10      	adds	r0, r2, #0
 8000e70:	e004      	b.n	8000e7c <xQueueGenericReset+0x56>
 8000e72:	b289      	uxth	r1, r1
 8000e74:	2900      	cmp	r1, #0
 8000e76:	d10d      	bne.n	8000e94 <xQueueGenericReset+0x6e>
 8000e78:	1c29      	adds	r1, r5, #0
 8000e7a:	1c18      	adds	r0, r3, #0
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	435a      	muls	r2, r3
 8000e82:	b283      	uxth	r3, r0
 8000e84:	b289      	uxth	r1, r1
 8000e86:	434b      	muls	r3, r1
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	141b      	asrs	r3, r3, #16
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d000      	beq.n	8000e96 <xQueueGenericReset+0x70>
 8000e94:	2401      	movs	r4, #1
 8000e96:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8000e98:	d143      	bne.n	8000f22 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8000e9a:	f002 fd31 	bl	8003900 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	434b      	muls	r3, r1
 8000eac:	18d2      	adds	r2, r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec8:	1e59      	subs	r1, r3, #1
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	434b      	muls	r3, r1
 8000ed0:	18d2      	adds	r2, r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2244      	movs	r2, #68	@ 0x44
 8000eda:	21ff      	movs	r1, #255	@ 0xff
 8000edc:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2245      	movs	r2, #69	@ 0x45
 8000ee2:	21ff      	movs	r1, #255	@ 0xff
 8000ee4:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10d      	bne.n	8000f08 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fe27 	bl	8002b4c <xTaskRemoveFromEventList>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d00c      	beq.n	8000f1c <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f02:	f002 fced 	bl	80038e0 <vPortYield>
 8000f06:	e009      	b.n	8000f1c <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff03 	bl	8000d18 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3324      	adds	r3, #36	@ 0x24
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fefe 	bl	8000d18 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f1c:	f002 fd02 	bl	8003924 <vPortExitCritical>
 8000f20:	e001      	b.n	8000f26 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <xQueueGenericReset+0x10c>
 8000f2c:	b672      	cpsid	i
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	e7fd      	b.n	8000f2e <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bdb0      	pop	{r4, r5, r7, pc}

08000f3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b08b      	sub	sp, #44	@ 0x2c
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d065      	beq.n	8001020 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f54:	2000      	movs	r0, #0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	0c19      	lsrs	r1, r3, #16
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1c1e      	adds	r6, r3, #0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	1c15      	adds	r5, r2, #0
 8000f66:	b28a      	uxth	r2, r1
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d105      	bne.n	8000f78 <xQueueGenericCreate+0x3c>
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d013      	beq.n	8000f9a <xQueueGenericCreate+0x5e>
 8000f72:	1c19      	adds	r1, r3, #0
 8000f74:	1c34      	adds	r4, r6, #0
 8000f76:	e003      	b.n	8000f80 <xQueueGenericCreate+0x44>
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <xQueueGenericCreate+0x5c>
 8000f7e:	1c2c      	adds	r4, r5, #0
 8000f80:	b2b3      	uxth	r3, r6
 8000f82:	b2aa      	uxth	r2, r5
 8000f84:	435a      	muls	r2, r3
 8000f86:	b2a3      	uxth	r3, r4
 8000f88:	b289      	uxth	r1, r1
 8000f8a:	434b      	muls	r3, r1
 8000f8c:	0c12      	lsrs	r2, r2, #16
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	141b      	asrs	r3, r3, #16
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d000      	beq.n	8000f9a <xQueueGenericCreate+0x5e>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f9c:	d140      	bne.n	8001020 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000fa4:	3351      	adds	r3, #81	@ 0x51
 8000fa6:	d83b      	bhi.n	8001020 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4353      	muls	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3350      	adds	r3, #80	@ 0x50
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 fd3b 	bl	8003a30 <pvPortMalloc>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00f      	beq.n	8000fe4 <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3350      	adds	r3, #80	@ 0x50
 8000fcc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781c      	ldrb	r4, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	0023      	movs	r3, r4
 8000fde:	f000 f82f 	bl	8001040 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000fe2:	e023      	b.n	800102c <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000fe4:	f002 feb9 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f002 fdc6 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <xQueueGenericCreate+0xfc>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <xQueueGenericCreate+0xf0>
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <xQueueGenericCreate+0x100>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	3340      	adds	r3, #64	@ 0x40
 800100a:	b2db      	uxtb	r3, r3
 800100c:	0018      	movs	r0, r3
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <xQueueGenericCreate+0x100>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	2200      	movs	r2, #0
 8001018:	0019      	movs	r1, r3
 800101a:	f003 ff03 	bl	8004e24 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 800101e:	e005      	b.n	800102c <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <xQueueGenericCreate+0xf2>
 8001026:	b672      	cpsid	i
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	e7fd      	b.n	8001028 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 800102c:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800102e:	69fb      	ldr	r3, [r7, #28]
    }
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b009      	add	sp, #36	@ 0x24
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001038:	20001dc8 	.word	0x20001dc8
 800103c:	20000008 	.word	0x20000008

08001040 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	001a      	movs	r2, r3
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	6a3a      	ldr	r2, [r7, #32]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e002      	b.n	8001066 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	2101      	movs	r1, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fed5 	bl	8000e26 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	1cfa      	adds	r2, r7, #3
 8001080:	214c      	movs	r1, #76	@ 0x4c
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fd5c 	bl	8003b46 <prvTraceGetQueueType>
 800108e:	0003      	movs	r3, r0
 8001090:	001a      	movs	r2, r3
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	0018      	movs	r0, r3
 8001098:	f004 f9ee 	bl	8005478 <prvTraceGetObjectHandle>
 800109c:	0003      	movs	r3, r0
 800109e:	001a      	movs	r2, r3
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f002 fdca 	bl	8003c3e <prvTraceSetQueueNumberLow16>
 80010aa:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <prvInitialiseNewQueue+0x140>)
 80010ac:	881a      	ldrh	r2, [r3, #0]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 fddd 	bl	8003c72 <prvTraceSetQueueNumberHigh16>
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 fd43 	bl	8003b46 <prvTraceGetQueueType>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 80010c6:	5c9c      	ldrb	r4, [r3, r2]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f002 fd9a 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80010d0:	0003      	movs	r3, r0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	0019      	movs	r1, r3
 80010d6:	0020      	movs	r0, r4
 80010d8:	f004 fa7e 	bl	80055d8 <prvMarkObjectAsUsed>
 80010dc:	f002 fe3d 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 fd4a 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80010e8:	0003      	movs	r3, r0
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <prvInitialiseNewQueue+0x144>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d029      	beq.n	800114c <prvInitialiseNewQueue+0x10c>
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 fd90 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001100:	0003      	movs	r3, r0
 8001102:	001a      	movs	r2, r3
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <prvInitialiseNewQueue+0x144>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4013      	ands	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01d      	beq.n	800114c <prvInitialiseNewQueue+0x10c>
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0018      	movs	r0, r3
 8001114:	f002 fd17 	bl	8003b46 <prvTraceGetQueueType>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	3318      	adds	r3, #24
 8001122:	b2db      	uxtb	r3, r3
 8001124:	001d      	movs	r5, r3
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	0018      	movs	r0, r3
 800112a:	f002 fd0c 	bl	8003b46 <prvTraceGetQueueType>
 800112e:	0003      	movs	r3, r0
 8001130:	001a      	movs	r2, r3
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 8001134:	5c9c      	ldrb	r4, [r3, r2]
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	0018      	movs	r0, r3
 800113a:	f002 fd63 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 800113e:	0003      	movs	r3, r0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	001a      	movs	r2, r3
 8001144:	0021      	movs	r1, r4
 8001146:	0028      	movs	r0, r5
 8001148:	f003 fe6c 	bl	8004e24 <prvTraceStoreKernelCall>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	0018      	movs	r0, r3
 8001150:	f002 fcf9 	bl	8003b46 <prvTraceGetQueueType>
 8001154:	0003      	movs	r3, r0
 8001156:	001a      	movs	r2, r3
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 800115a:	5c9c      	ldrb	r4, [r3, r2]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	0018      	movs	r0, r3
 8001160:	f002 fd50 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8001164:	0003      	movs	r3, r0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2200      	movs	r2, #0
 800116a:	0019      	movs	r1, r3
 800116c:	0020      	movs	r0, r4
 800116e:	f004 f897 	bl	80052a0 <prvTraceSetObjectState>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	20001dca 	.word	0x20001dca
 8001184:	20001dc8 	.word	0x20001dc8

08001188 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00e      	beq.n	80011b4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	f000 f820 	bl	80011f4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff feaf 	bl	8000f3c <xQueueGenericCreate>
 80011de:	0003      	movs	r3, r0
 80011e0:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ffcf 	bl	8001188 <prvInitialiseMutex>

        return xNewQueue;
 80011ea:	68fb      	ldr	r3, [r7, #12]
    }
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <xQueueGenericSend+0x22>
 8001210:	b672      	cpsid	i
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	e7fd      	b.n	8001212 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <xQueueGenericSend+0x30>
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <xQueueGenericSend+0x34>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <xQueueGenericSend+0x36>
 8001228:	2300      	movs	r3, #0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <xQueueGenericSend+0x40>
 800122e:	b672      	cpsid	i
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	e7fd      	b.n	8001230 <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d103      	bne.n	8001242 <xQueueGenericSend+0x4e>
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <xQueueGenericSend+0x52>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <xQueueGenericSend+0x54>
 8001246:	2300      	movs	r3, #0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <xQueueGenericSend+0x5e>
 800124c:	b672      	cpsid	i
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	e7fd      	b.n	800124e <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001252:	f001 fe9b 	bl	8002f8c <xTaskGetSchedulerState>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d102      	bne.n	8001260 <xQueueGenericSend+0x6c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <xQueueGenericSend+0x70>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <xQueueGenericSend+0x72>
 8001264:	2300      	movs	r3, #0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <xQueueGenericSend+0x7c>
 800126a:	b672      	cpsid	i
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	e7fd      	b.n	800126c <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001270:	f002 fb46 	bl	8003900 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800127c:	429a      	cmp	r2, r3
 800127e:	d303      	bcc.n	8001288 <xQueueGenericSend+0x94>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d000      	beq.n	8001288 <xQueueGenericSend+0x94>
 8001286:	e07f      	b.n	8001388 <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 8001288:	f002 fd67 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 800128c:	0003      	movs	r3, r0
 800128e:	0018      	movs	r0, r3
 8001290:	f002 fc74 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001294:	0003      	movs	r3, r0
 8001296:	001a      	movs	r2, r3
 8001298:	4bc7      	ldr	r3, [pc, #796]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	4013      	ands	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02e      	beq.n	8001302 <xQueueGenericSend+0x10e>
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 fcba 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 80012ac:	0003      	movs	r3, r0
 80012ae:	001a      	movs	r2, r3
 80012b0:	4bc1      	ldr	r3, [pc, #772]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	4013      	ands	r3, r2
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d022      	beq.n	8001302 <xQueueGenericSend+0x10e>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10b      	bne.n	80012da <xQueueGenericSend+0xe6>
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f002 fc3e 	bl	8003b46 <prvTraceGetQueueType>
 80012ca:	0003      	movs	r3, r0
 80012cc:	001a      	movs	r2, r3
 80012ce:	4bbb      	ldr	r3, [pc, #748]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80012d0:	5c9b      	ldrb	r3, [r3, r2]
 80012d2:	3320      	adds	r3, #32
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	001d      	movs	r5, r3
 80012d8:	e000      	b.n	80012dc <xQueueGenericSend+0xe8>
 80012da:	2525      	movs	r5, #37	@ 0x25
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	0018      	movs	r0, r3
 80012e0:	f002 fc31 	bl	8003b46 <prvTraceGetQueueType>
 80012e4:	0003      	movs	r3, r0
 80012e6:	001a      	movs	r2, r3
 80012e8:	4bb4      	ldr	r3, [pc, #720]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80012ea:	5c9c      	ldrb	r4, [r3, r2]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	0018      	movs	r0, r3
 80012f0:	f002 fc88 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80012f4:	0003      	movs	r3, r0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	001a      	movs	r2, r3
 80012fa:	0021      	movs	r1, r4
 80012fc:	0028      	movs	r0, r5
 80012fe:	f003 fd91 	bl	8004e24 <prvTraceStoreKernelCall>
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	0018      	movs	r0, r3
 8001306:	f002 fc1e 	bl	8003b46 <prvTraceGetQueueType>
 800130a:	0003      	movs	r3, r0
 800130c:	001a      	movs	r2, r3
 800130e:	4bab      	ldr	r3, [pc, #684]	@ (80015bc <xQueueGenericSend+0x3c8>)
 8001310:	5c9c      	ldrb	r4, [r3, r2]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	0018      	movs	r0, r3
 8001316:	f002 fc75 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 800131a:	0003      	movs	r3, r0
 800131c:	b2dd      	uxtb	r5, r3
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	0018      	movs	r0, r3
 8001322:	f002 fc10 	bl	8003b46 <prvTraceGetQueueType>
 8001326:	0003      	movs	r3, r0
 8001328:	001a      	movs	r2, r3
 800132a:	4ba4      	ldr	r3, [pc, #656]	@ (80015bc <xQueueGenericSend+0x3c8>)
 800132c:	5c9b      	ldrb	r3, [r3, r2]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d005      	beq.n	800133e <xQueueGenericSend+0x14a>
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	e000      	b.n	8001340 <xQueueGenericSend+0x14c>
 800133e:	2300      	movs	r3, #0
 8001340:	001a      	movs	r2, r3
 8001342:	0029      	movs	r1, r5
 8001344:	0020      	movs	r0, r4
 8001346:	f003 ffab 	bl	80052a0 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 fc4c 	bl	8001bee <prvCopyDataToQueue>
 8001356:	0003      	movs	r3, r0
 8001358:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	3324      	adds	r3, #36	@ 0x24
 8001366:	0018      	movs	r0, r3
 8001368:	f001 fbf0 	bl	8002b4c <xTaskRemoveFromEventList>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d007      	beq.n	8001380 <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001370:	f002 fab6 	bl	80038e0 <vPortYield>
 8001374:	e004      	b.n	8001380 <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800137c:	f002 fab0 	bl	80038e0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001380:	f002 fad0 	bl	8003924 <vPortExitCritical>
                return pdPASS;
 8001384:	2301      	movs	r3, #1
 8001386:	e113      	b.n	80015b0 <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d140      	bne.n	8001410 <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800138e:	f002 fac9 	bl	8003924 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001392:	f002 fce2 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001396:	0003      	movs	r3, r0
 8001398:	0018      	movs	r0, r3
 800139a:	f002 fbef 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	4b85      	ldr	r3, [pc, #532]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4013      	ands	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d02e      	beq.n	800140c <xQueueGenericSend+0x218>
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f002 fc35 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 80013b6:	0003      	movs	r3, r0
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	4013      	ands	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d022      	beq.n	800140c <xQueueGenericSend+0x218>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10b      	bne.n	80013e4 <xQueueGenericSend+0x1f0>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f002 fbb9 	bl	8003b46 <prvTraceGetQueueType>
 80013d4:	0003      	movs	r3, r0
 80013d6:	001a      	movs	r2, r3
 80013d8:	4b78      	ldr	r3, [pc, #480]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	3348      	adds	r3, #72	@ 0x48
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	001d      	movs	r5, r3
 80013e2:	e000      	b.n	80013e6 <xQueueGenericSend+0x1f2>
 80013e4:	254d      	movs	r5, #77	@ 0x4d
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 fbac 	bl	8003b46 <prvTraceGetQueueType>
 80013ee:	0003      	movs	r3, r0
 80013f0:	001a      	movs	r2, r3
 80013f2:	4b72      	ldr	r3, [pc, #456]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80013f4:	5c9c      	ldrb	r4, [r3, r2]
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f002 fc03 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80013fe:	0003      	movs	r3, r0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	001a      	movs	r2, r3
 8001404:	0021      	movs	r1, r4
 8001406:	0028      	movs	r0, r5
 8001408:	f003 fd0c 	bl	8004e24 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 800140c:	2300      	movs	r3, #0
 800140e:	e0cf      	b.n	80015b0 <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001416:	2314      	movs	r3, #20
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fc78 	bl	8002d10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001424:	f002 fa7e 	bl	8003924 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001428:	f001 f830 	bl	800248c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800142c:	f002 fa68 	bl	8003900 <vPortEnterCritical>
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2244      	movs	r2, #68	@ 0x44
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	d103      	bne.n	8001444 <xQueueGenericSend+0x250>
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2244      	movs	r2, #68	@ 0x44
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2245      	movs	r2, #69	@ 0x45
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	d103      	bne.n	8001458 <xQueueGenericSend+0x264>
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	2245      	movs	r2, #69	@ 0x45
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]
 8001458:	f002 fa64 	bl	8003924 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	2314      	movs	r3, #20
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f001 fc67 	bl	8002d38 <xTaskCheckForTimeOut>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d15c      	bne.n	8001528 <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 fcc1 	bl	8001df8 <prvIsQueueFull>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d04f      	beq.n	800151a <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800147a:	f002 fc6e 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 800147e:	0003      	movs	r3, r0
 8001480:	0018      	movs	r0, r3
 8001482:	f002 fb7b 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001486:	0003      	movs	r3, r0
 8001488:	001a      	movs	r2, r3
 800148a:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4013      	ands	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02e      	beq.n	80014f4 <xQueueGenericSend+0x300>
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	0018      	movs	r0, r3
 800149a:	f002 fbc1 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 800149e:	0003      	movs	r3, r0
 80014a0:	001a      	movs	r2, r3
 80014a2:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	4013      	ands	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d022      	beq.n	80014f4 <xQueueGenericSend+0x300>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10b      	bne.n	80014cc <xQueueGenericSend+0x2d8>
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f002 fb45 	bl	8003b46 <prvTraceGetQueueType>
 80014bc:	0003      	movs	r3, r0
 80014be:	001a      	movs	r2, r3
 80014c0:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80014c2:	5c9b      	ldrb	r3, [r3, r2]
 80014c4:	3370      	adds	r3, #112	@ 0x70
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	001d      	movs	r5, r3
 80014ca:	e000      	b.n	80014ce <xQueueGenericSend+0x2da>
 80014cc:	2575      	movs	r5, #117	@ 0x75
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f002 fb38 	bl	8003b46 <prvTraceGetQueueType>
 80014d6:	0003      	movs	r3, r0
 80014d8:	001a      	movs	r2, r3
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <xQueueGenericSend+0x3c8>)
 80014dc:	5c9c      	ldrb	r4, [r3, r2]
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f002 fb8f 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80014e6:	0003      	movs	r3, r0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	001a      	movs	r2, r3
 80014ec:	0021      	movs	r1, r4
 80014ee:	0028      	movs	r0, r5
 80014f0:	f003 fc98 	bl	8004e24 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	3310      	adds	r3, #16
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f001 fa89 	bl	8002a14 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	0018      	movs	r0, r3
 8001506:	f000 fc03 	bl	8001d10 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800150a:	f000 ffcb 	bl	80024a4 <xTaskResumeAll>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d000      	beq.n	8001514 <xQueueGenericSend+0x320>
 8001512:	e6ad      	b.n	8001270 <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 8001514:	f002 f9e4 	bl	80038e0 <vPortYield>
 8001518:	e6aa      	b.n	8001270 <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fbf7 	bl	8001d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001522:	f000 ffbf 	bl	80024a4 <xTaskResumeAll>
 8001526:	e6a3      	b.n	8001270 <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fbf0 	bl	8001d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001530:	f000 ffb8 	bl	80024a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001534:	f002 fc11 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001538:	0003      	movs	r3, r0
 800153a:	0018      	movs	r0, r3
 800153c:	f002 fb1e 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001540:	0003      	movs	r3, r0
 8001542:	001a      	movs	r2, r3
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4013      	ands	r3, r2
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d02e      	beq.n	80015ae <xQueueGenericSend+0x3ba>
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fb64 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001558:	0003      	movs	r3, r0
 800155a:	001a      	movs	r2, r3
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <xQueueGenericSend+0x3c4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	4013      	ands	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d022      	beq.n	80015ae <xQueueGenericSend+0x3ba>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10b      	bne.n	8001586 <xQueueGenericSend+0x392>
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	0018      	movs	r0, r3
 8001572:	f002 fae8 	bl	8003b46 <prvTraceGetQueueType>
 8001576:	0003      	movs	r3, r0
 8001578:	001a      	movs	r2, r3
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <xQueueGenericSend+0x3c8>)
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	3348      	adds	r3, #72	@ 0x48
 8001580:	b2db      	uxtb	r3, r3
 8001582:	001d      	movs	r5, r3
 8001584:	e000      	b.n	8001588 <xQueueGenericSend+0x394>
 8001586:	254d      	movs	r5, #77	@ 0x4d
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	0018      	movs	r0, r3
 800158c:	f002 fadb 	bl	8003b46 <prvTraceGetQueueType>
 8001590:	0003      	movs	r3, r0
 8001592:	001a      	movs	r2, r3
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <xQueueGenericSend+0x3c8>)
 8001596:	5c9c      	ldrb	r4, [r3, r2]
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	0018      	movs	r0, r3
 800159c:	f002 fb32 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80015a0:	0003      	movs	r3, r0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	001a      	movs	r2, r3
 80015a6:	0021      	movs	r1, r4
 80015a8:	0028      	movs	r0, r5
 80015aa:	f003 fc3b 	bl	8004e24 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 80015ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b00a      	add	sp, #40	@ 0x28
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	20001dc8 	.word	0x20001dc8
 80015bc:	20000008 	.word	0x20000008

080015c0 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 f805 	bl	80015e0 <MyWrapper_xQueueGiveFromISR>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <MyWrapper_xQueueGiveFromISR+0x1c>
 80015f6:	b672      	cpsid	i
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	e7fd      	b.n	80015f8 <MyWrapper_xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <MyWrapper_xQueueGiveFromISR+0x2a>
 8001604:	b672      	cpsid	i
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	e7fd      	b.n	8001606 <MyWrapper_xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <MyWrapper_xQueueGiveFromISR+0x3a>
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <MyWrapper_xQueueGiveFromISR+0x3e>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <MyWrapper_xQueueGiveFromISR+0x40>
 800161e:	2300      	movs	r3, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <MyWrapper_xQueueGiveFromISR+0x4a>
 8001624:	b672      	cpsid	i
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	e7fd      	b.n	8001626 <MyWrapper_xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800162a:	f002 f993 	bl	8003954 <ulSetInterruptMaskFromISR>
 800162e:	0003      	movs	r3, r0
 8001630:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001636:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	429a      	cmp	r2, r3
 8001640:	d300      	bcc.n	8001644 <MyWrapper_xQueueGiveFromISR+0x64>
 8001642:	e086      	b.n	8001752 <MyWrapper_xQueueGiveFromISR+0x172>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001644:	2317      	movs	r3, #23
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	2145      	movs	r1, #69	@ 0x45
 800164c:	5c52      	ldrb	r2, [r2, r1]
 800164e:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	0018      	movs	r0, r3
 8001654:	f002 fae4 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001658:	0003      	movs	r3, r0
 800165a:	001a      	movs	r2, r3
 800165c:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4013      	ands	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d022      	beq.n	80016ae <MyWrapper_xQueueGiveFromISR+0xce>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10b      	bne.n	8001686 <MyWrapper_xQueueGiveFromISR+0xa6>
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	0018      	movs	r0, r3
 8001672:	f002 fa68 	bl	8003b46 <prvTraceGetQueueType>
 8001676:	0003      	movs	r3, r0
 8001678:	001a      	movs	r2, r3
 800167a:	4b54      	ldr	r3, [pc, #336]	@ (80017cc <MyWrapper_xQueueGiveFromISR+0x1ec>)
 800167c:	5c9b      	ldrb	r3, [r3, r2]
 800167e:	3330      	adds	r3, #48	@ 0x30
 8001680:	b2db      	uxtb	r3, r3
 8001682:	001d      	movs	r5, r3
 8001684:	e000      	b.n	8001688 <MyWrapper_xQueueGiveFromISR+0xa8>
 8001686:	2535      	movs	r5, #53	@ 0x35
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	0018      	movs	r0, r3
 800168c:	f002 fa5b 	bl	8003b46 <prvTraceGetQueueType>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001696:	5c9c      	ldrb	r4, [r3, r2]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	0018      	movs	r0, r3
 800169c:	f002 fab2 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80016a0:	0003      	movs	r3, r0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	001a      	movs	r2, r3
 80016a6:	0021      	movs	r1, r4
 80016a8:	0028      	movs	r0, r5
 80016aa:	f003 fbbb 	bl	8004e24 <prvTraceStoreKernelCall>
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f002 fa48 	bl	8003b46 <prvTraceGetQueueType>
 80016b6:	0003      	movs	r3, r0
 80016b8:	001a      	movs	r2, r3
 80016ba:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <MyWrapper_xQueueGiveFromISR+0x1ec>)
 80016bc:	5c9c      	ldrb	r4, [r3, r2]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f002 fa9f 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80016c6:	0003      	movs	r3, r0
 80016c8:	b2d9      	uxtb	r1, r3
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	001a      	movs	r2, r3
 80016d6:	0020      	movs	r0, r4
 80016d8:	f003 fde2 	bl	80052a0 <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80016e4:	2317      	movs	r3, #23
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	d111      	bne.n	8001714 <MyWrapper_xQueueGiveFromISR+0x134>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d029      	beq.n	800174c <MyWrapper_xQueueGiveFromISR+0x16c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	3324      	adds	r3, #36	@ 0x24
 80016fc:	0018      	movs	r0, r3
 80016fe:	f001 fa25 	bl	8002b4c <xTaskRemoveFromEventList>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d022      	beq.n	800174c <MyWrapper_xQueueGiveFromISR+0x16c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01f      	beq.n	800174c <MyWrapper_xQueueGiveFromISR+0x16c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e01b      	b.n	800174c <MyWrapper_xQueueGiveFromISR+0x16c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001714:	f000 ffd4 	bl	80026c0 <uxTaskGetNumberOfTasks>
 8001718:	0003      	movs	r3, r0
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	2117      	movs	r1, #23
 800171e:	187b      	adds	r3, r7, r1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <MyWrapper_xQueueGiveFromISR+0x16c>
 800172a:	187b      	adds	r3, r7, r1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	2b7f      	cmp	r3, #127	@ 0x7f
 8001732:	d102      	bne.n	800173a <MyWrapper_xQueueGiveFromISR+0x15a>
 8001734:	b672      	cpsid	i
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	e7fd      	b.n	8001736 <MyWrapper_xQueueGiveFromISR+0x156>
 800173a:	2317      	movs	r3, #23
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	b259      	sxtb	r1, r3
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2245      	movs	r2, #69	@ 0x45
 800174a:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	e030      	b.n	80017b4 <MyWrapper_xQueueGiveFromISR+0x1d4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	0018      	movs	r0, r3
 8001756:	f002 fa63 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 800175a:	0003      	movs	r3, r0
 800175c:	001a      	movs	r2, r3
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	4013      	ands	r3, r2
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d022      	beq.n	80017b0 <MyWrapper_xQueueGiveFromISR+0x1d0>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10b      	bne.n	8001788 <MyWrapper_xQueueGiveFromISR+0x1a8>
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	0018      	movs	r0, r3
 8001774:	f002 f9e7 	bl	8003b46 <prvTraceGetQueueType>
 8001778:	0003      	movs	r3, r0
 800177a:	001a      	movs	r2, r3
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MyWrapper_xQueueGiveFromISR+0x1ec>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	3358      	adds	r3, #88	@ 0x58
 8001782:	b2db      	uxtb	r3, r3
 8001784:	001d      	movs	r5, r3
 8001786:	e000      	b.n	800178a <MyWrapper_xQueueGiveFromISR+0x1aa>
 8001788:	255d      	movs	r5, #93	@ 0x5d
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	0018      	movs	r0, r3
 800178e:	f002 f9da 	bl	8003b46 <prvTraceGetQueueType>
 8001792:	0003      	movs	r3, r0
 8001794:	001a      	movs	r2, r3
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001798:	5c9c      	ldrb	r4, [r3, r2]
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	0018      	movs	r0, r3
 800179e:	f002 fa31 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80017a2:	0003      	movs	r3, r0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	001a      	movs	r2, r3
 80017a8:	0021      	movs	r1, r4
 80017aa:	0028      	movs	r0, r5
 80017ac:	f003 fb3a 	bl	8004e24 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f002 f8d2 	bl	8003960 <vClearInterruptMaskFromISR>

    return xReturn;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b00a      	add	sp, #40	@ 0x28
 80017c4:	bdb0      	pop	{r4, r5, r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	20001dc8 	.word	0x20001dc8
 80017cc:	20000008 	.word	0x20000008

080017d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <xQueueReceive+0x20>
 80017ea:	b672      	cpsid	i
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	e7fd      	b.n	80017ec <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <xQueueReceive+0x2e>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <xQueueReceive+0x32>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <xQueueReceive+0x34>
 8001802:	2300      	movs	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <xQueueReceive+0x3e>
 8001808:	b672      	cpsid	i
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	e7fd      	b.n	800180a <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800180e:	f001 fbbd 	bl	8002f8c <xTaskGetSchedulerState>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d102      	bne.n	800181c <xQueueReceive+0x4c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <xQueueReceive+0x50>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <xQueueReceive+0x52>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <xQueueReceive+0x5c>
 8001826:	b672      	cpsid	i
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	e7fd      	b.n	8001828 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800182c:	f002 f868 	bl	8003900 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001834:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d100      	bne.n	800183e <xQueueReceive+0x6e>
 800183c:	e07d      	b.n	800193a <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	0011      	movs	r1, r2
 8001844:	0018      	movs	r0, r3
 8001846:	f000 fa3d 	bl	8001cc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800184a:	f002 fa86 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 800184e:	0003      	movs	r3, r0
 8001850:	0018      	movs	r0, r3
 8001852:	f002 f993 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001856:	0003      	movs	r3, r0
 8001858:	001a      	movs	r2, r3
 800185a:	4bd2      	ldr	r3, [pc, #840]	@ (8001ba4 <xQueueReceive+0x3d4>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	4013      	ands	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d029      	beq.n	80018ba <xQueueReceive+0xea>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	0018      	movs	r0, r3
 800186a:	f002 f9d9 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 800186e:	0003      	movs	r3, r0
 8001870:	001a      	movs	r2, r3
 8001872:	4bcc      	ldr	r3, [pc, #816]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	4013      	ands	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01d      	beq.n	80018ba <xQueueReceive+0xea>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0018      	movs	r0, r3
 8001882:	f002 f960 	bl	8003b46 <prvTraceGetQueueType>
 8001886:	0003      	movs	r3, r0
 8001888:	001a      	movs	r2, r3
 800188a:	4bc7      	ldr	r3, [pc, #796]	@ (8001ba8 <xQueueReceive+0x3d8>)
 800188c:	5c9b      	ldrb	r3, [r3, r2]
 800188e:	3328      	adds	r3, #40	@ 0x28
 8001890:	b2db      	uxtb	r3, r3
 8001892:	001d      	movs	r5, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	0018      	movs	r0, r3
 8001898:	f002 f955 	bl	8003b46 <prvTraceGetQueueType>
 800189c:	0003      	movs	r3, r0
 800189e:	001a      	movs	r2, r3
 80018a0:	4bc1      	ldr	r3, [pc, #772]	@ (8001ba8 <xQueueReceive+0x3d8>)
 80018a2:	5c9c      	ldrb	r4, [r3, r2]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f002 f9ac 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80018ac:	0003      	movs	r3, r0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	001a      	movs	r2, r3
 80018b2:	0021      	movs	r1, r4
 80018b4:	0028      	movs	r0, r5
 80018b6:	f003 fab5 	bl	8004e24 <prvTraceStoreKernelCall>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	0018      	movs	r0, r3
 80018be:	f002 f942 	bl	8003b46 <prvTraceGetQueueType>
 80018c2:	0003      	movs	r3, r0
 80018c4:	001a      	movs	r2, r3
 80018c6:	4bb8      	ldr	r3, [pc, #736]	@ (8001ba8 <xQueueReceive+0x3d8>)
 80018c8:	5c9c      	ldrb	r4, [r3, r2]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f002 f999 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80018d2:	0003      	movs	r3, r0
 80018d4:	b2dd      	uxtb	r5, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 f934 	bl	8003b46 <prvTraceGetQueueType>
 80018de:	0003      	movs	r3, r0
 80018e0:	001a      	movs	r2, r3
 80018e2:	4bb1      	ldr	r3, [pc, #708]	@ (8001ba8 <xQueueReceive+0x3d8>)
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d108      	bne.n	80018fc <xQueueReceive+0x12c>
 80018ea:	f002 fa36 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80018ee:	0003      	movs	r3, r0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 f935 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 80018f6:	0003      	movs	r3, r0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e004      	b.n	8001906 <xQueueReceive+0x136>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	001a      	movs	r2, r3
 8001908:	0029      	movs	r1, r5
 800190a:	0020      	movs	r0, r4
 800190c:	f003 fcc8 	bl	80052a0 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1e5a      	subs	r2, r3, #1
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3310      	adds	r3, #16
 8001924:	0018      	movs	r0, r3
 8001926:	f001 f911 	bl	8002b4c <xTaskRemoveFromEventList>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800192e:	f001 ffd7 	bl	80038e0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001932:	f001 fff7 	bl	8003924 <vPortExitCritical>
                return pdPASS;
 8001936:	2301      	movs	r3, #1
 8001938:	e12f      	b.n	8001b9a <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d13b      	bne.n	80019b8 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001940:	f001 fff0 	bl	8003924 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001944:	f002 fa09 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001948:	0003      	movs	r3, r0
 800194a:	0018      	movs	r0, r3
 800194c:	f002 f916 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001950:	0003      	movs	r3, r0
 8001952:	001a      	movs	r2, r3
 8001954:	4b93      	ldr	r3, [pc, #588]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4013      	ands	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d029      	beq.n	80019b4 <xQueueReceive+0x1e4>
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	0018      	movs	r0, r3
 8001964:	f002 f95c 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ba4 <xQueueReceive+0x3d4>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01d      	beq.n	80019b4 <xQueueReceive+0x1e4>
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	0018      	movs	r0, r3
 800197c:	f002 f8e3 	bl	8003b46 <prvTraceGetQueueType>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	4b88      	ldr	r3, [pc, #544]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	3350      	adds	r3, #80	@ 0x50
 800198a:	b2db      	uxtb	r3, r3
 800198c:	001d      	movs	r5, r3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	0018      	movs	r0, r3
 8001992:	f002 f8d8 	bl	8003b46 <prvTraceGetQueueType>
 8001996:	0003      	movs	r3, r0
 8001998:	001a      	movs	r2, r3
 800199a:	4b83      	ldr	r3, [pc, #524]	@ (8001ba8 <xQueueReceive+0x3d8>)
 800199c:	5c9c      	ldrb	r4, [r3, r2]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 f92f 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 80019a6:	0003      	movs	r3, r0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	001a      	movs	r2, r3
 80019ac:	0021      	movs	r1, r4
 80019ae:	0028      	movs	r0, r5
 80019b0:	f003 fa38 	bl	8004e24 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e0f0      	b.n	8001b9a <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80019be:	2314      	movs	r3, #20
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	0018      	movs	r0, r3
 80019c4:	f001 f9a4 	bl	8002d10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80019cc:	f001 ffaa 	bl	8003924 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80019d0:	f000 fd5c 	bl	800248c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80019d4:	f001 ff94 	bl	8003900 <vPortEnterCritical>
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2244      	movs	r2, #68	@ 0x44
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	d103      	bne.n	80019ec <xQueueReceive+0x21c>
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2244      	movs	r2, #68	@ 0x44
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2245      	movs	r2, #69	@ 0x45
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	d103      	bne.n	8001a00 <xQueueReceive+0x230>
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2245      	movs	r2, #69	@ 0x45
 80019fc:	2100      	movs	r1, #0
 80019fe:	5499      	strb	r1, [r3, r2]
 8001a00:	f001 ff90 	bl	8003924 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a04:	1d3a      	adds	r2, r7, #4
 8001a06:	2314      	movs	r3, #20
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 f993 	bl	8002d38 <xTaskCheckForTimeOut>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d000      	beq.n	8001a18 <xQueueReceive+0x248>
 8001a16:	e07a      	b.n	8001b0e <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 f9d6 	bl	8001dcc <prvIsQueueEmpty>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d06d      	beq.n	8001b00 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001a24:	f002 f999 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f002 f8a6 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001a30:	0003      	movs	r3, r0
 8001a32:	001a      	movs	r2, r3
 8001a34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d029      	beq.n	8001a94 <xQueueReceive+0x2c4>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f002 f8ec 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	4b55      	ldr	r3, [pc, #340]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01d      	beq.n	8001a94 <xQueueReceive+0x2c4>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f002 f873 	bl	8003b46 <prvTraceGetQueueType>
 8001a60:	0003      	movs	r3, r0
 8001a62:	001a      	movs	r2, r3
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	3368      	adds	r3, #104	@ 0x68
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	001d      	movs	r5, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f002 f868 	bl	8003b46 <prvTraceGetQueueType>
 8001a76:	0003      	movs	r3, r0
 8001a78:	001a      	movs	r2, r3
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001a7c:	5c9c      	ldrb	r4, [r3, r2]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f002 f8bf 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8001a86:	0003      	movs	r3, r0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	0021      	movs	r1, r4
 8001a8e:	0028      	movs	r0, r5
 8001a90:	f003 f9c8 	bl	8004e24 <prvTraceStoreKernelCall>
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f002 f855 	bl	8003b46 <prvTraceGetQueueType>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d018      	beq.n	8001ada <xQueueReceive+0x30a>
 8001aa8:	f002 f957 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001aac:	0003      	movs	r3, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f002 f864 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4013      	ands	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <xQueueReceive+0x30a>
 8001ac4:	f002 f949 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	0018      	movs	r0, r3
 8001acc:	f002 f848 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f003 fc3b 	bl	8005350 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3324      	adds	r3, #36	@ 0x24
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 ff96 	bl	8002a14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 f910 	bl	8001d10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001af0:	f000 fcd8 	bl	80024a4 <xTaskResumeAll>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d000      	beq.n	8001afa <xQueueReceive+0x32a>
 8001af8:	e698      	b.n	800182c <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8001afa:	f001 fef1 	bl	80038e0 <vPortYield>
 8001afe:	e695      	b.n	800182c <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 f904 	bl	8001d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b08:	f000 fccc 	bl	80024a4 <xTaskResumeAll>
 8001b0c:	e68e      	b.n	800182c <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 f8fd 	bl	8001d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001b16:	f000 fcc5 	bl	80024a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f955 	bl	8001dcc <prvIsQueueEmpty>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d100      	bne.n	8001b28 <xQueueReceive+0x358>
 8001b26:	e681      	b.n	800182c <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001b28:	f002 f917 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f002 f824 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8001b34:	0003      	movs	r3, r0
 8001b36:	001a      	movs	r2, r3
 8001b38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d029      	beq.n	8001b98 <xQueueReceive+0x3c8>
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f002 f86a 	bl	8003c20 <prvTraceGetQueueNumberHigh16>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	001a      	movs	r2, r3
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <xQueueReceive+0x3d4>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4013      	ands	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01d      	beq.n	8001b98 <xQueueReceive+0x3c8>
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fff1 	bl	8003b46 <prvTraceGetQueueType>
 8001b64:	0003      	movs	r3, r0
 8001b66:	001a      	movs	r2, r3
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	3350      	adds	r3, #80	@ 0x50
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	001d      	movs	r5, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 ffe6 	bl	8003b46 <prvTraceGetQueueType>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <xQueueReceive+0x3d8>)
 8001b80:	5c9c      	ldrb	r4, [r3, r2]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f002 f83d 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	001a      	movs	r2, r3
 8001b90:	0021      	movs	r1, r4
 8001b92:	0028      	movs	r0, r5
 8001b94:	f003 f946 	bl	8004e24 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8001b98:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b00a      	add	sp, #40	@ 0x28
 8001ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	20001dc8 	.word	0x20001dc8
 8001ba8:	20000008 	.word	0x20000008

08001bac <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	224c      	movs	r2, #76	@ 0x4c
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
    }
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}

08001bee <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c02:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10e      	bne.n	8001c2a <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d14e      	bne.n	8001cb2 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f001 f9d3 	bl	8002fc4 <xTaskPriorityDisinherit>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e043      	b.n	8001cb2 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d119      	bne.n	8001c64 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6858      	ldr	r0, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	f005 f88e 	bl	8006d5c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	18d2      	adds	r2, r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d32b      	bcc.n	8001cb2 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	e026      	b.n	8001cb2 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68d8      	ldr	r0, [r3, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0019      	movs	r1, r3
 8001c70:	f005 f874 	bl	8006d5c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	18d2      	adds	r2, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	425b      	negs	r3, r3
 8001c9a:	18d2      	adds	r2, r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d105      	bne.n	8001cb2 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001cba:	697b      	ldr	r3, [r7, #20]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b006      	add	sp, #24
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d018      	beq.n	8001d08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	18d2      	adds	r2, r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d303      	bcc.n	8001cf8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f005 f82a 	bl	8006d5c <memcpy>
    }
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001d18:	f001 fdf2 	bl	8003900 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	2145      	movs	r1, #69	@ 0x45
 8001d24:	5c52      	ldrb	r2, [r2, r1]
 8001d26:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d28:	e013      	b.n	8001d52 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d016      	beq.n	8001d60 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3324      	adds	r3, #36	@ 0x24
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 ff08 	bl	8002b4c <xTaskRemoveFromEventList>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001d40:	f001 f848 	bl	8002dd4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001d44:	210f      	movs	r1, #15
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d52:	230f      	movs	r3, #15
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	dce5      	bgt.n	8001d2a <prvUnlockQueue+0x1a>
 8001d5e:	e000      	b.n	8001d62 <prvUnlockQueue+0x52>
                    break;
 8001d60:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2245      	movs	r2, #69	@ 0x45
 8001d66:	21ff      	movs	r1, #255	@ 0xff
 8001d68:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001d6a:	f001 fddb 	bl	8003924 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001d6e:	f001 fdc7 	bl	8003900 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001d72:	230e      	movs	r3, #14
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	2144      	movs	r1, #68	@ 0x44
 8001d7a:	5c52      	ldrb	r2, [r2, r1]
 8001d7c:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d7e:	e013      	b.n	8001da8 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d016      	beq.n	8001db6 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3310      	adds	r3, #16
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 fedd 	bl	8002b4c <xTaskRemoveFromEventList>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001d96:	f001 f81d 	bl	8002dd4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001d9a:	210e      	movs	r1, #14
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001da8:	230e      	movs	r3, #14
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dce5      	bgt.n	8001d80 <prvUnlockQueue+0x70>
 8001db4:	e000      	b.n	8001db8 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001db6:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2244      	movs	r2, #68	@ 0x44
 8001dbc:	21ff      	movs	r1, #255	@ 0xff
 8001dbe:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001dc0:	f001 fdb0 	bl	8003924 <vPortExitCritical>
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001dd4:	f001 fd94 	bl	8003900 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e001      	b.n	8001dea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001dea:	f001 fd9b 	bl	8003924 <vPortExitCritical>

    return xReturn;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001e00:	f001 fd7e 	bl	8003900 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d102      	bne.n	8001e16 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e001      	b.n	8001e1a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001e1a:	f001 fd83 	bl	8003924 <vPortExitCritical>

    return xReturn;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <vQueueAddToRegistry+0x1a>
 8001e3c:	b672      	cpsid	i
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	e7fd      	b.n	8001e3e <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d025      	beq.n	8001e94 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e01f      	b.n	8001e8e <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <vQueueAddToRegistry+0xac>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d105      	bne.n	8001e6c <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	00da      	lsls	r2, r3, #3
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <vQueueAddToRegistry+0xac>)
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	60bb      	str	r3, [r7, #8]
                    break;
 8001e6a:	e013      	b.n	8001e94 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <vQueueAddToRegistry+0x60>
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <vQueueAddToRegistry+0xac>)
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	00d2      	lsls	r2, r2, #3
 8001e78:	58d3      	ldr	r3, [r2, r3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	00da      	lsls	r2, r3, #3
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <vQueueAddToRegistry+0xac>)
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d9dc      	bls.n	8001e4e <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d018      	beq.n	8001ecc <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f001 fe4c 	bl	8003b46 <prvTraceGetQueueType>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <vQueueAddToRegistry+0xb0>)
 8001eb4:	5c9c      	ldrb	r4, [r3, r2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f001 fea3 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	f003 fbce 	bl	8005668 <prvTraceSetObjectName>
        }
    }
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b005      	add	sp, #20
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	20000034 	.word	0x20000034
 8001ed8:	20000008 	.word	0x20000008

08001edc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001eec:	f001 fd08 	bl	8003900 <vPortEnterCritical>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2244      	movs	r2, #68	@ 0x44
 8001ef4:	5c9b      	ldrb	r3, [r3, r2]
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	d103      	bne.n	8001f04 <vQueueWaitForMessageRestricted+0x28>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2244      	movs	r2, #68	@ 0x44
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2245      	movs	r2, #69	@ 0x45
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	d103      	bne.n	8001f18 <vQueueWaitForMessageRestricted+0x3c>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2245      	movs	r2, #69	@ 0x45
 8001f14:	2100      	movs	r1, #0
 8001f16:	5499      	strb	r1, [r3, r2]
 8001f18:	f001 fd04 	bl	8003924 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3324      	adds	r3, #36	@ 0x24
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fd91 	bl	8002a54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff feeb 	bl	8001d10 <prvUnlockQueue>
    }
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b006      	add	sp, #24
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f42:	b590      	push	{r4, r7, lr}
 8001f44:	b08d      	sub	sp, #52	@ 0x34
 8001f46:	af04      	add	r7, sp, #16
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	1dbb      	adds	r3, r7, #6
 8001f50:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f52:	1dbb      	adds	r3, r7, #6
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f001 fd69 	bl	8003a30 <pvPortMalloc>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f68:	2060      	movs	r0, #96	@ 0x60
 8001f6a:	f001 fd61 	bl	8003a30 <pvPortMalloc>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2260      	movs	r2, #96	@ 0x60
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f004 feae 	bl	8006ce0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f8a:	e006      	b.n	8001f9a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f001 fdb0 	bl	8003af4 <vPortFree>
 8001f94:	e001      	b.n	8001f9a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d016      	beq.n	8001fce <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fa0:	1dbb      	adds	r3, r7, #6
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	683c      	ldr	r4, [r7, #0]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	9303      	str	r3, [sp, #12]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	0023      	movs	r3, r4
 8001fbc:	f000 f810 	bl	8001fe0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 f88e 	bl	80020e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e002      	b.n	8001fd4 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
    }
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b009      	add	sp, #36	@ 0x24
 8001fdc:	bd90      	pop	{r4, r7, pc}
	...

08001fe0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	21a5      	movs	r1, #165	@ 0xa5
 8001ffa:	f004 fe71 	bl	8006ce0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4936      	ldr	r1, [pc, #216]	@ (80020e0 <prvInitialiseNewTask+0x100>)
 8002006:	468c      	mov	ip, r1
 8002008:	4463      	add	r3, ip
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2207      	movs	r2, #7
 8002014:	4393      	bics	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	d002      	beq.n	8002026 <prvInitialiseNewTask+0x46>
 8002020:	b672      	cpsid	i
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	e7fd      	b.n	8002022 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01f      	beq.n	800206c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e013      	b.n	800205a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	18d3      	adds	r3, r2, r3
 8002038:	7818      	ldrb	r0, [r3, #0]
 800203a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800203c:	2134      	movs	r1, #52	@ 0x34
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	185b      	adds	r3, r3, r1
 8002044:	1c02      	adds	r2, r0, #0
 8002046:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	18d3      	adds	r3, r2, r3
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d9e8      	bls.n	8002032 <prvInitialiseNewTask+0x52>
 8002060:	e000      	b.n	8002064 <prvInitialiseNewTask+0x84>
            {
                break;
 8002062:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	2243      	movs	r2, #67	@ 0x43
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d902      	bls.n	8002078 <prvInitialiseNewTask+0x98>
 8002072:	b672      	cpsid	i
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	e7fd      	b.n	8002074 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d901      	bls.n	8002082 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800207e:	2304      	movs	r3, #4
 8002080:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002090:	3304      	adds	r3, #4
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe fe5e 	bl	8000d54 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209a:	3318      	adds	r3, #24
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe fe59 	bl	8000d54 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2205      	movs	r2, #5
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	0018      	movs	r0, r3
 80020c0:	f001 fb82 	bl	80037c8 <pxPortInitialiseStack>
 80020c4:	0002      	movs	r2, r0
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b006      	add	sp, #24
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	3fffffff 	.word	0x3fffffff

080020e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020ec:	f001 fc08 	bl	8003900 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020f0:	4b7c      	ldr	r3, [pc, #496]	@ (80022e4 <prvAddNewTaskToReadyList+0x200>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	4b7b      	ldr	r3, [pc, #492]	@ (80022e4 <prvAddNewTaskToReadyList+0x200>)
 80020f8:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80020fa:	4b7b      	ldr	r3, [pc, #492]	@ (80022e8 <prvAddNewTaskToReadyList+0x204>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002102:	4b79      	ldr	r3, [pc, #484]	@ (80022e8 <prvAddNewTaskToReadyList+0x204>)
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002108:	4b76      	ldr	r3, [pc, #472]	@ (80022e4 <prvAddNewTaskToReadyList+0x200>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d110      	bne.n	8002132 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002110:	f000 fea0 	bl	8002e54 <prvInitialiseTaskLists>
 8002114:	e00d      	b.n	8002132 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002116:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <prvAddNewTaskToReadyList+0x208>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <prvAddNewTaskToReadyList+0x204>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	429a      	cmp	r2, r3
 800212a:	d802      	bhi.n	8002132 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800212c:	4b6e      	ldr	r3, [pc, #440]	@ (80022e8 <prvAddNewTaskToReadyList+0x204>)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002132:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <prvAddNewTaskToReadyList+0x20c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	4b6d      	ldr	r3, [pc, #436]	@ (80022f0 <prvAddNewTaskToReadyList+0x20c>)
 800213a:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800213c:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <prvAddNewTaskToReadyList+0x20c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d065      	beq.n	8002216 <prvAddNewTaskToReadyList+0x132>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d04f      	beq.n	80021f0 <prvAddNewTaskToReadyList+0x10c>
 8002150:	2003      	movs	r0, #3
 8002152:	f003 f991 	bl	8005478 <prvTraceGetObjectHandle>
 8002156:	0003      	movs	r3, r0
 8002158:	001a      	movs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0011      	movs	r1, r2
 800215e:	0018      	movs	r0, r3
 8002160:	f001 fd1b 	bl	8003b9a <prvTraceSetTaskNumberLow16>
 8002164:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <prvAddNewTaskToReadyList+0x210>)
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0011      	movs	r1, r2
 800216c:	0018      	movs	r0, r3
 800216e:	f001 fd2e 	bl	8003bce <prvTraceSetTaskNumberHigh16>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f001 fcf3 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 800217a:	0003      	movs	r3, r0
 800217c:	b2d9      	uxtb	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3334      	adds	r3, #52	@ 0x34
 8002182:	001a      	movs	r2, r3
 8002184:	2003      	movs	r0, #3
 8002186:	f003 fa6f 	bl	8005668 <prvTraceSetObjectName>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f001 fce7 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002192:	0003      	movs	r3, r0
 8002194:	b2d9      	uxtb	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	b2db      	uxtb	r3, r3
 800219c:	001a      	movs	r2, r3
 800219e:	2003      	movs	r0, #3
 80021a0:	f003 f822 	bl	80051e8 <prvTraceSetPriorityProperty>
 80021a4:	f001 fdd9 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80021a8:	0003      	movs	r3, r0
 80021aa:	0018      	movs	r0, r3
 80021ac:	f001 fce6 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80021b0:	0003      	movs	r3, r0
 80021b2:	001a      	movs	r2, r3
 80021b4:	4b50      	ldr	r3, [pc, #320]	@ (80022f8 <prvAddNewTaskToReadyList+0x214>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	4013      	ands	r3, r2
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d02a      	beq.n	8002216 <prvAddNewTaskToReadyList+0x132>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f001 fcda 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80021c8:	0003      	movs	r3, r0
 80021ca:	001a      	movs	r2, r3
 80021cc:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <prvAddNewTaskToReadyList+0x214>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01e      	beq.n	8002216 <prvAddNewTaskToReadyList+0x132>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0018      	movs	r0, r3
 80021dc:	f001 fcc0 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 80021e0:	0003      	movs	r3, r0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	001a      	movs	r2, r3
 80021e6:	2103      	movs	r1, #3
 80021e8:	201b      	movs	r0, #27
 80021ea:	f002 fe1b 	bl	8004e24 <prvTraceStoreKernelCall>
 80021ee:	e012      	b.n	8002216 <prvAddNewTaskToReadyList+0x132>
 80021f0:	f001 fdb3 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80021f4:	0003      	movs	r3, r0
 80021f6:	0018      	movs	r0, r3
 80021f8:	f001 fcc0 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80021fc:	0003      	movs	r3, r0
 80021fe:	001a      	movs	r2, r3
 8002200:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <prvAddNewTaskToReadyList+0x214>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <prvAddNewTaskToReadyList+0x132>
 800220c:	2200      	movs	r2, #0
 800220e:	2103      	movs	r1, #3
 8002210:	201b      	movs	r0, #27
 8002212:	f002 fe07 	bl	8004e24 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f001 fcaf 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800221e:	0003      	movs	r3, r0
 8002220:	001a      	movs	r2, r3
 8002222:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <prvAddNewTaskToReadyList+0x214>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <prvAddNewTaskToReadyList+0x15c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f001 fc95 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002236:	0003      	movs	r3, r0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	0018      	movs	r0, r3
 800223c:	f002 fce4 	bl	8004c08 <prvTraceStoreTaskReady>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <prvAddNewTaskToReadyList+0x218>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d903      	bls.n	8002254 <prvAddNewTaskToReadyList+0x170>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002250:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <prvAddNewTaskToReadyList+0x218>)
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002258:	4929      	ldr	r1, [pc, #164]	@ (8002300 <prvAddNewTaskToReadyList+0x21c>)
 800225a:	0013      	movs	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	189b      	adds	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	18cb      	adds	r3, r1, r3
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	3204      	adds	r2, #4
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800228e:	0013      	movs	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	189b      	adds	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4a1a      	ldr	r2, [pc, #104]	@ (8002300 <prvAddNewTaskToReadyList+0x21c>)
 8002298:	189a      	adds	r2, r3, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a2:	4917      	ldr	r1, [pc, #92]	@ (8002300 <prvAddNewTaskToReadyList+0x21c>)
 80022a4:	0013      	movs	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	585b      	ldr	r3, [r3, r1]
 80022ae:	1c58      	adds	r0, r3, #1
 80022b0:	4913      	ldr	r1, [pc, #76]	@ (8002300 <prvAddNewTaskToReadyList+0x21c>)
 80022b2:	0013      	movs	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80022bc:	f001 fb32 	bl	8003924 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <prvAddNewTaskToReadyList+0x208>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022c8:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <prvAddNewTaskToReadyList+0x204>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d201      	bcs.n	80022da <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80022d6:	f001 fb03 	bl	80038e0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	20000130 	.word	0x20000130
 80022e8:	20000084 	.word	0x20000084
 80022ec:	2000013c 	.word	0x2000013c
 80022f0:	2000014c 	.word	0x2000014c
 80022f4:	20001dca 	.word	0x20001dca
 80022f8:	20001dc8 	.word	0x20001dc8
 80022fc:	20000138 	.word	0x20000138
 8002300:	20000088 	.word	0x20000088

08002304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d046      	beq.n	80023a4 <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <vTaskDelay+0xb4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <vTaskDelay+0x20>
 800231e:	b672      	cpsid	i
 8002320:	46c0      	nop			@ (mov r8, r8)
 8002322:	e7fd      	b.n	8002320 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8002324:	f000 f8b2 	bl	800248c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002328:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <vTaskDelay+0xb8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f001 fc25 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8002332:	0003      	movs	r3, r0
 8002334:	001a      	movs	r2, r3
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <vTaskDelay+0xbc>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	4013      	ands	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00e      	beq.n	8002360 <vTaskDelay+0x5c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0019      	movs	r1, r3
 8002346:	2089      	movs	r0, #137	@ 0x89
 8002348:	f002 fe70 	bl	800502c <prvTraceStoreKernelCallWithNumericParamOnly>
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <vTaskDelay+0xb8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0018      	movs	r0, r3
 8002352:	f001 fc05 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002356:	0003      	movs	r3, r0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	0018      	movs	r0, r3
 800235c:	f002 fff8 	bl	8005350 <prvTraceSetTaskInstanceFinished>
 8002360:	f001 fcfb 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002364:	0003      	movs	r3, r0
 8002366:	0018      	movs	r0, r3
 8002368:	f001 fc08 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800236c:	0003      	movs	r3, r0
 800236e:	001a      	movs	r2, r3
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <vTaskDelay+0xbc>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <vTaskDelay+0x8e>
 800237c:	f001 fced 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002380:	0003      	movs	r3, r0
 8002382:	0018      	movs	r0, r3
 8002384:	f001 fbec 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002388:	0003      	movs	r3, r0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	0018      	movs	r0, r3
 800238e:	f002 ffdf 	bl	8005350 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2100      	movs	r1, #0
 8002396:	0018      	movs	r0, r3
 8002398:	f000 fee2 	bl	8003160 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800239c:	f000 f882 	bl	80024a4 <xTaskResumeAll>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 80023aa:	f001 fa99 	bl	80038e0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	20000158 	.word	0x20000158
 80023bc:	20000084 	.word	0x20000084
 80023c0:	20001dc8 	.word	0x20001dc8

080023c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80023ca:	4927      	ldr	r1, [pc, #156]	@ (8002468 <vTaskStartScheduler+0xa4>)
 80023cc:	4827      	ldr	r0, [pc, #156]	@ (800246c <vTaskStartScheduler+0xa8>)
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <vTaskStartScheduler+0xac>)
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	f7ff fdb2 	bl	8001f42 <xTaskCreate>
 80023de:	0003      	movs	r3, r0
 80023e0:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d103      	bne.n	80023f0 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80023e8:	f000 fefe 	bl	80031e8 <xTimerCreateTimerTask>
 80023ec:	0003      	movs	r3, r0
 80023ee:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d12c      	bne.n	8002450 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80023f6:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <vTaskStartScheduler+0xb0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	4252      	negs	r2, r2
 80023fe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <vTaskStartScheduler+0xb4>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <vTaskStartScheduler+0xb8>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <vTaskStartScheduler+0xbc>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f001 fca2 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002416:	0003      	movs	r3, r0
 8002418:	0018      	movs	r0, r3
 800241a:	f001 fbaf 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800241e:	0003      	movs	r3, r0
 8002420:	001a      	movs	r2, r3
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <vTaskStartScheduler+0xc0>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	4013      	ands	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <vTaskStartScheduler+0x80>
 800242e:	f001 fc94 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002432:	0003      	movs	r3, r0
 8002434:	0018      	movs	r0, r3
 8002436:	f001 fb93 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 800243a:	0003      	movs	r3, r0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fe5e 	bl	8005100 <prvTraceStoreTaskswitch>
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <vTaskStartScheduler+0xbc>)
 8002446:	2202      	movs	r2, #2
 8002448:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800244a:	f001 fa25 	bl	8003898 <xPortStartScheduler>
 800244e:	e005      	b.n	800245c <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	d102      	bne.n	800245c <vTaskStartScheduler+0x98>
 8002456:	b672      	cpsid	i
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	e7fd      	b.n	8002458 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <vTaskStartScheduler+0xc4>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	46c0      	nop			@ (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}
 8002468:	08006d88 	.word	0x08006d88
 800246c:	08002e35 	.word	0x08002e35
 8002470:	20000154 	.word	0x20000154
 8002474:	20000150 	.word	0x20000150
 8002478:	2000013c 	.word	0x2000013c
 800247c:	20000134 	.word	0x20000134
 8002480:	20001db0 	.word	0x20001db0
 8002484:	20001dc8 	.word	0x20001dc8
 8002488:	20000000 	.word	0x20000000

0800248c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <vTaskSuspendAll+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4b02      	ldr	r3, [pc, #8]	@ (80024a0 <vTaskSuspendAll+0x14>)
 8002498:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000158 	.word	0x20000158

080024a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024b2:	4b73      	ldr	r3, [pc, #460]	@ (8002680 <xTaskResumeAll+0x1dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <xTaskResumeAll+0x1c>
 80024ba:	b672      	cpsid	i
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	e7fd      	b.n	80024bc <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024c0:	f001 fa1e 	bl	8003900 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002680 <xTaskResumeAll+0x1dc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <xTaskResumeAll+0x1dc>)
 80024cc:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002680 <xTaskResumeAll+0x1dc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d000      	beq.n	80024d8 <xTaskResumeAll+0x34>
 80024d6:	e0cc      	b.n	8002672 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002684 <xTaskResumeAll+0x1e0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d100      	bne.n	80024e2 <xTaskResumeAll+0x3e>
 80024e0:	e0c7      	b.n	8002672 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024e2:	e09e      	b.n	8002622 <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024e4:	4b68      	ldr	r3, [pc, #416]	@ (8002688 <xTaskResumeAll+0x1e4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	6a12      	ldr	r2, [r2, #32]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	69d2      	ldr	r2, [r2, #28]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3318      	adds	r3, #24
 800250e:	429a      	cmp	r2, r3
 8002510:	d103      	bne.n	800251a <xTaskResumeAll+0x76>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	68d2      	ldr	r2, [r2, #12]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3304      	adds	r3, #4
 800254c:	429a      	cmp	r2, r3
 800254e:	d103      	bne.n	8002558 <xTaskResumeAll+0xb4>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	0018      	movs	r0, r3
 800256c:	f001 fb06 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8002570:	0003      	movs	r3, r0
 8002572:	001a      	movs	r2, r3
 8002574:	4b45      	ldr	r3, [pc, #276]	@ (800268c <xTaskResumeAll+0x1e8>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <xTaskResumeAll+0xee>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	0018      	movs	r0, r3
 8002584:	f001 faec 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002588:	0003      	movs	r3, r0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	0018      	movs	r0, r3
 800258e:	f002 fb3b 	bl	8004c08 <prvTraceStoreTaskReady>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002596:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <xTaskResumeAll+0x1ec>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d903      	bls.n	80025a6 <xTaskResumeAll+0x102>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <xTaskResumeAll+0x1ec>)
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025aa:	493a      	ldr	r1, [pc, #232]	@ (8002694 <xTaskResumeAll+0x1f0>)
 80025ac:	0013      	movs	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	189b      	adds	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	18cb      	adds	r3, r1, r3
 80025b6:	3304      	adds	r3, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	3204      	adds	r2, #4
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e0:	0013      	movs	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	189b      	adds	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <xTaskResumeAll+0x1f0>)
 80025ea:	189a      	adds	r2, r3, r2
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	615a      	str	r2, [r3, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	4927      	ldr	r1, [pc, #156]	@ (8002694 <xTaskResumeAll+0x1f0>)
 80025f6:	0013      	movs	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	189b      	adds	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	585b      	ldr	r3, [r3, r1]
 8002600:	1c58      	adds	r0, r3, #1
 8002602:	4924      	ldr	r1, [pc, #144]	@ (8002694 <xTaskResumeAll+0x1f0>)
 8002604:	0013      	movs	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	189b      	adds	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002612:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <xTaskResumeAll+0x1f4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <xTaskResumeAll+0x1f8>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002622:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <xTaskResumeAll+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d000      	beq.n	800262c <xTaskResumeAll+0x188>
 800262a:	e75b      	b.n	80024e4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002632:	f000 fc83 	bl	8002f3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <xTaskResumeAll+0x1fc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00f      	beq.n	8002662 <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002642:	f000 f847 	bl	80026d4 <xTaskIncrementTick>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d002      	beq.n	8002650 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <xTaskResumeAll+0x1f8>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f2      	bne.n	8002642 <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <xTaskResumeAll+0x1fc>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <xTaskResumeAll+0x1f8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800266a:	2301      	movs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800266e:	f001 f937 	bl	80038e0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002672:	f001 f957 	bl	8003924 <vPortExitCritical>

    return xAlreadyYielded;
 8002676:	693b      	ldr	r3, [r7, #16]
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b006      	add	sp, #24
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000158 	.word	0x20000158
 8002684:	20000130 	.word	0x20000130
 8002688:	2000011c 	.word	0x2000011c
 800268c:	20001dc8 	.word	0x20001dc8
 8002690:	20000138 	.word	0x20000138
 8002694:	20000088 	.word	0x20000088
 8002698:	20000084 	.word	0x20000084
 800269c:	20000144 	.word	0x20000144
 80026a0:	20000140 	.word	0x20000140

080026a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <xTaskGetTickCount+0x18>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	20000134 	.word	0x20000134

080026c0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80026c4:	4b02      	ldr	r3, [pc, #8]	@ (80026d0 <uxTaskGetNumberOfTasks+0x10>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	20000130 	.word	0x20000130

080026d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80026de:	4b85      	ldr	r3, [pc, #532]	@ (80028f4 <xTaskIncrementTick+0x220>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <xTaskIncrementTick+0x1a>
 80026e6:	4b84      	ldr	r3, [pc, #528]	@ (80028f8 <xTaskIncrementTick+0x224>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <xTaskIncrementTick+0x2a>
 80026ee:	4b83      	ldr	r3, [pc, #524]	@ (80028fc <xTaskIncrementTick+0x228>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	4b81      	ldr	r3, [pc, #516]	@ (80028fc <xTaskIncrementTick+0x228>)
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	2000      	movs	r0, #0
 80026fa:	f003 fbcb 	bl	8005e94 <prvTracePortGetTimeStamp>
 80026fe:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <xTaskIncrementTick+0x220>)
 8002700:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002702:	4b7c      	ldr	r3, [pc, #496]	@ (80028f4 <xTaskIncrementTick+0x220>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d000      	beq.n	800270c <xTaskIncrementTick+0x38>
 800270a:	e0e9      	b.n	80028e0 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800270c:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <xTaskIncrementTick+0x22c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002714:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <xTaskIncrementTick+0x22c>)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8002720:	4b78      	ldr	r3, [pc, #480]	@ (8002904 <xTaskIncrementTick+0x230>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <xTaskIncrementTick+0x5c>
 800272a:	b672      	cpsid	i
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	e7fd      	b.n	800272c <xTaskIncrementTick+0x58>
 8002730:	4b74      	ldr	r3, [pc, #464]	@ (8002904 <xTaskIncrementTick+0x230>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	4b74      	ldr	r3, [pc, #464]	@ (8002908 <xTaskIncrementTick+0x234>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b72      	ldr	r3, [pc, #456]	@ (8002904 <xTaskIncrementTick+0x230>)
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	4b72      	ldr	r3, [pc, #456]	@ (8002908 <xTaskIncrementTick+0x234>)
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b71      	ldr	r3, [pc, #452]	@ (800290c <xTaskIncrementTick+0x238>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <xTaskIncrementTick+0x238>)
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f000 fbf5 	bl	8002f3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002752:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <xTaskIncrementTick+0x23c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	429a      	cmp	r2, r3
 800275a:	d200      	bcs.n	800275e <xTaskIncrementTick+0x8a>
 800275c:	e0b9      	b.n	80028d2 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275e:	4b69      	ldr	r3, [pc, #420]	@ (8002904 <xTaskIncrementTick+0x230>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002768:	4b69      	ldr	r3, [pc, #420]	@ (8002910 <xTaskIncrementTick+0x23c>)
 800276a:	2201      	movs	r2, #1
 800276c:	4252      	negs	r2, r2
 800276e:	601a      	str	r2, [r3, #0]
                    break;
 8002770:	e0af      	b.n	80028d2 <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002772:	4b64      	ldr	r3, [pc, #400]	@ (8002904 <xTaskIncrementTick+0x230>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	429a      	cmp	r2, r3
 8002788:	d203      	bcs.n	8002792 <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800278a:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <xTaskIncrementTick+0x23c>)
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002790:	e09f      	b.n	80028d2 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	68d2      	ldr	r2, [r2, #12]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3304      	adds	r3, #4
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d103      	bne.n	80027c0 <xTaskIncrementTick+0xec>
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2200      	movs	r2, #0
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01e      	beq.n	8002816 <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	6a12      	ldr	r2, [r2, #32]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	69d2      	ldr	r2, [r2, #28]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	3318      	adds	r3, #24
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d103      	bne.n	8002806 <xTaskIncrementTick+0x132>
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	0018      	movs	r0, r3
 800281a:	f001 f9af 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800281e:	0003      	movs	r3, r0
 8002820:	001a      	movs	r2, r3
 8002822:	4b3c      	ldr	r3, [pc, #240]	@ (8002914 <xTaskIncrementTick+0x240>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <xTaskIncrementTick+0x16c>
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	0018      	movs	r0, r3
 8002832:	f001 f995 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002836:	0003      	movs	r3, r0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	0018      	movs	r0, r3
 800283c:	f002 f9e4 	bl	8004c08 <prvTraceStoreTaskReady>
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002844:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <xTaskIncrementTick+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d903      	bls.n	8002854 <xTaskIncrementTick+0x180>
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002850:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <xTaskIncrementTick+0x244>)
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	4930      	ldr	r1, [pc, #192]	@ (800291c <xTaskIncrementTick+0x248>)
 800285a:	0013      	movs	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	189b      	adds	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	18cb      	adds	r3, r1, r3
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	3204      	adds	r2, #4
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1d1a      	adds	r2, r3, #4
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	0013      	movs	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	189b      	adds	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4a21      	ldr	r2, [pc, #132]	@ (800291c <xTaskIncrementTick+0x248>)
 8002898:	189a      	adds	r2, r3, r2
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a2:	491e      	ldr	r1, [pc, #120]	@ (800291c <xTaskIncrementTick+0x248>)
 80028a4:	0013      	movs	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	189b      	adds	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	585b      	ldr	r3, [r3, r1]
 80028ae:	1c58      	adds	r0, r3, #1
 80028b0:	491a      	ldr	r1, [pc, #104]	@ (800291c <xTaskIncrementTick+0x248>)
 80028b2:	0013      	movs	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <xTaskIncrementTick+0x24c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d800      	bhi.n	80028cc <xTaskIncrementTick+0x1f8>
 80028ca:	e748      	b.n	800275e <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028d0:	e745      	b.n	800275e <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <xTaskIncrementTick+0x250>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e004      	b.n	80028ea <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <xTaskIncrementTick+0x224>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <xTaskIncrementTick+0x224>)
 80028e8:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80028ea:	69fb      	ldr	r3, [r7, #28]
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b008      	add	sp, #32
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000158 	.word	0x20000158
 80028f8:	20000140 	.word	0x20000140
 80028fc:	20001da4 	.word	0x20001da4
 8002900:	20000134 	.word	0x20000134
 8002904:	20000114 	.word	0x20000114
 8002908:	20000118 	.word	0x20000118
 800290c:	20000148 	.word	0x20000148
 8002910:	20000150 	.word	0x20000150
 8002914:	20001dc8 	.word	0x20001dc8
 8002918:	20000138 	.word	0x20000138
 800291c:	20000088 	.word	0x20000088
 8002920:	20000084 	.word	0x20000084
 8002924:	20000144 	.word	0x20000144

08002928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800292e:	4b32      	ldr	r3, [pc, #200]	@ (80029f8 <vTaskSwitchContext+0xd0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <vTaskSwitchContext+0xd4>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800293c:	e057      	b.n	80029ee <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <vTaskSwitchContext+0xd4>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <vTaskSwitchContext+0xd8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	e008      	b.n	800295e <vTaskSwitchContext+0x36>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <vTaskSwitchContext+0x30>
 8002952:	b672      	cpsid	i
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	e7fd      	b.n	8002954 <vTaskSwitchContext+0x2c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4929      	ldr	r1, [pc, #164]	@ (8002a04 <vTaskSwitchContext+0xdc>)
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	0013      	movs	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	189b      	adds	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	585b      	ldr	r3, [r3, r1]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ed      	beq.n	800294c <vTaskSwitchContext+0x24>
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	0013      	movs	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	189b      	adds	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4a22      	ldr	r2, [pc, #136]	@ (8002a04 <vTaskSwitchContext+0xdc>)
 800297c:	189b      	adds	r3, r3, r2
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	3308      	adds	r3, #8
 8002992:	429a      	cmp	r2, r3
 8002994:	d104      	bne.n	80029a0 <vTaskSwitchContext+0x78>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <vTaskSwitchContext+0xe0>)
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <vTaskSwitchContext+0xd8>)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 80029b0:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <vTaskSwitchContext+0xe4>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f001 f9d0 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80029ba:	0003      	movs	r3, r0
 80029bc:	0018      	movs	r0, r3
 80029be:	f001 f8dd 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80029c2:	0003      	movs	r3, r0
 80029c4:	001a      	movs	r2, r3
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <vTaskSwitchContext+0xe8>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	4013      	ands	r3, r2
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <vTaskSwitchContext+0xc0>
 80029d2:	f001 f9c2 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80029d6:	0003      	movs	r3, r0
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 f8c1 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 80029de:	0003      	movs	r3, r0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	0018      	movs	r0, r3
 80029e4:	f002 fb8c 	bl	8005100 <prvTraceStoreTaskswitch>
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <vTaskSwitchContext+0xe4>)
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	20000158 	.word	0x20000158
 80029fc:	20000144 	.word	0x20000144
 8002a00:	20000138 	.word	0x20000138
 8002a04:	20000088 	.word	0x20000088
 8002a08:	20000084 	.word	0x20000084
 8002a0c:	20001db0 	.word	0x20001db0
 8002a10:	20001dc8 	.word	0x20001dc8

08002a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <vTaskPlaceOnEventList+0x16>
 8002a24:	b672      	cpsid	i
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	e7fd      	b.n	8002a26 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <vTaskPlaceOnEventList+0x3c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	001a      	movs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7fe f997 	bl	8000d6a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 fb8d 	bl	8003160 <prvAddCurrentTaskToDelayedList>
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	20000084 	.word	0x20000084

08002a54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <vTaskPlaceOnEventListRestricted+0x18>
 8002a66:	b672      	cpsid	i
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	e7fd      	b.n	8002a68 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	61da      	str	r2, [r3, #28]
 8002a7a:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	621a      	str	r2, [r3, #32]
 8002a84:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	3218      	adds	r2, #24
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3318      	adds	r3, #24
 8002a96:	001a      	movs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f001 f85c 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <vTaskPlaceOnEventListRestricted+0xf0>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d011      	beq.n	8002af8 <vTaskPlaceOnEventListRestricted+0xa4>
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <vTaskPlaceOnEventListRestricted+0xf4>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	18d3      	adds	r3, r2, r3
 8002adc:	0019      	movs	r1, r3
 8002ade:	2088      	movs	r0, #136	@ 0x88
 8002ae0:	f002 faa4 	bl	800502c <prvTraceStoreKernelCallWithNumericParamOnly>
 8002ae4:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <vTaskPlaceOnEventListRestricted+0xec>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f001 f839 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002aee:	0003      	movs	r3, r0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	0018      	movs	r0, r3
 8002af4:	f002 fc2c 	bl	8005350 <prvTraceSetTaskInstanceFinished>
 8002af8:	f001 f92f 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002afc:	0003      	movs	r3, r0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 f83c 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8002b04:	0003      	movs	r3, r0
 8002b06:	001a      	movs	r2, r3
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <vTaskPlaceOnEventListRestricted+0xf0>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <vTaskPlaceOnEventListRestricted+0xd6>
 8002b14:	f001 f921 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f001 f820 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002b20:	0003      	movs	r3, r0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	0018      	movs	r0, r3
 8002b26:	f002 fc13 	bl	8005350 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fb15 	bl	8003160 <prvAddCurrentTaskToDelayedList>
    }
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	20000084 	.word	0x20000084
 8002b44:	20001dc8 	.word	0x20001dc8
 8002b48:	20000134 	.word	0x20000134

08002b4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <xTaskRemoveFromEventList+0x1c>
 8002b62:	b672      	cpsid	i
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	e7fd      	b.n	8002b64 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	6a12      	ldr	r2, [r2, #32]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	69d2      	ldr	r2, [r2, #28]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	3318      	adds	r3, #24
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d103      	bne.n	8002b96 <xTaskRemoveFromEventList+0x4a>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba6:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <xTaskRemoveFromEventList+0x1a8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d172      	bne.n	8002c94 <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d103      	bne.n	8002bdc <xTaskRemoveFromEventList+0x90>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 ffc4 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <xTaskRemoveFromEventList+0x1ac>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <xTaskRemoveFromEventList+0xca>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 ffaa 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	0018      	movs	r0, r3
 8002c12:	f001 fff9 	bl	8004c08 <prvTraceStoreTaskReady>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <xTaskRemoveFromEventList+0x1b0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d903      	bls.n	8002c2a <xTaskRemoveFromEventList+0xde>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c26:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <xTaskRemoveFromEventList+0x1b0>)
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2e:	4934      	ldr	r1, [pc, #208]	@ (8002d00 <xTaskRemoveFromEventList+0x1b4>)
 8002c30:	0013      	movs	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	18cb      	adds	r3, r1, r3
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	3204      	adds	r2, #4
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1d1a      	adds	r2, r3, #4
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	0013      	movs	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <xTaskRemoveFromEventList+0x1b4>)
 8002c6e:	189a      	adds	r2, r3, r2
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c78:	4921      	ldr	r1, [pc, #132]	@ (8002d00 <xTaskRemoveFromEventList+0x1b4>)
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	585b      	ldr	r3, [r3, r1]
 8002c84:	1c58      	adds	r0, r3, #1
 8002c86:	491e      	ldr	r1, [pc, #120]	@ (8002d00 <xTaskRemoveFromEventList+0x1b4>)
 8002c88:	0013      	movs	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	5058      	str	r0, [r3, r1]
 8002c92:	e01b      	b.n	8002ccc <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <xTaskRemoveFromEventList+0x1b8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	61da      	str	r2, [r3, #28]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	621a      	str	r2, [r3, #32]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	3218      	adds	r2, #24
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3318      	adds	r3, #24
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4a11      	ldr	r2, [pc, #68]	@ (8002d04 <xTaskRemoveFromEventList+0x1b8>)
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <xTaskRemoveFromEventList+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <xTaskRemoveFromEventList+0x1b8>)
 8002cca:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <xTaskRemoveFromEventList+0x1bc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d905      	bls.n	8002ce6 <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <xTaskRemoveFromEventList+0x1c0>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e001      	b.n	8002cea <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002cea:	69fb      	ldr	r3, [r7, #28]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b008      	add	sp, #32
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000158 	.word	0x20000158
 8002cf8:	20001dc8 	.word	0x20001dc8
 8002cfc:	20000138 	.word	0x20000138
 8002d00:	20000088 	.word	0x20000088
 8002d04:	2000011c 	.word	0x2000011c
 8002d08:	20000084 	.word	0x20000084
 8002d0c:	20000144 	.word	0x20000144

08002d10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <vTaskInternalSetTimeOutState+0x20>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <vTaskInternalSetTimeOutState+0x24>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000148 	.word	0x20000148
 8002d34:	20000134 	.word	0x20000134

08002d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xTaskCheckForTimeOut+0x16>
 8002d48:	b672      	cpsid	i
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	e7fd      	b.n	8002d4a <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <xTaskCheckForTimeOut+0x22>
 8002d54:	b672      	cpsid	i
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	e7fd      	b.n	8002d56 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8002d5a:	f000 fdd1 	bl	8003900 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <xTaskCheckForTimeOut+0x94>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <xTaskCheckForTimeOut+0x98>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d00a      	beq.n	8002d90 <xTaskCheckForTimeOut+0x58>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d305      	bcc.n	8002d90 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e016      	b.n	8002dbe <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad2      	subs	r2, r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ffb1 	bl	8002d10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e004      	b.n	8002dbe <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002dbe:	f000 fdb1 	bl	8003924 <vPortExitCritical>

    return xReturn;
 8002dc2:	697b      	ldr	r3, [r7, #20]
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b006      	add	sp, #24
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000134 	.word	0x20000134
 8002dd0:	20000148 	.word	0x20000148

08002dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <vTaskMissedYield+0x10>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000144 	.word	0x20000144

08002de8 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e001      	b.n	8002e06 <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8002e06:	68fb      	ldr	r3, [r7, #12]
    }
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e3c:	f000 f842 	bl	8002ec4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <prvIdleTask+0x1c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d9f9      	bls.n	8002e3c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e48:	f000 fd4a 	bl	80038e0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002e4c:	e7f6      	b.n	8002e3c <prvIdleTask+0x8>
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	20000088 	.word	0x20000088

08002e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	e00c      	b.n	8002e7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	0013      	movs	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <prvInitialiseTaskLists+0x58>)
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fd ff52 	bl	8000d18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d9ef      	bls.n	8002e60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <prvInitialiseTaskLists+0x5c>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7fd ff48 	bl	8000d18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <prvInitialiseTaskLists+0x60>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd ff44 	bl	8000d18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <prvInitialiseTaskLists+0x64>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fd ff40 	bl	8000d18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <prvInitialiseTaskLists+0x68>)
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <prvInitialiseTaskLists+0x5c>)
 8002e9c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <prvInitialiseTaskLists+0x6c>)
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <prvInitialiseTaskLists+0x60>)
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000088 	.word	0x20000088
 8002eb0:	200000ec 	.word	0x200000ec
 8002eb4:	20000100 	.word	0x20000100
 8002eb8:	2000011c 	.word	0x2000011c
 8002ebc:	20000114 	.word	0x20000114
 8002ec0:	20000118 	.word	0x20000118

08002ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002eda:	e005      	b.n	8002ee8 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
            ulCount++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2ba5      	cmp	r3, #165	@ 0xa5
 8002eee:	d0f5      	beq.n	8002edc <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	b29b      	uxth	r3, r3
    }
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <uxTaskGetStackHighWaterMark+0x14>
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <uxTaskGetStackHighWaterMark+0x34>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	e000      	b.n	8002f1a <uxTaskGetStackHighWaterMark+0x16>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ffd2 	bl	8002ece <prvTaskCheckFreeStackSpace>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
    }
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b006      	add	sp, #24
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000084 	.word	0x20000084

08002f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <prvResetNextTaskUnblockTime+0x2c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <prvResetNextTaskUnblockTime+0x30>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4252      	negs	r2, r2
 8002f50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f52:	e005      	b.n	8002f60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <prvResetNextTaskUnblockTime+0x2c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <prvResetNextTaskUnblockTime+0x30>)
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	20000114 	.word	0x20000114
 8002f6c:	20000150 	.word	0x20000150

08002f70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002f76:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <xTaskGetCurrentTaskHandle+0x18>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002f7c:	687b      	ldr	r3, [r7, #4]
    }
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	20000084 	.word	0x20000084

08002f8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <xTaskGetSchedulerState+0x30>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e008      	b.n	8002fb2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fa0:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <xTaskGetSchedulerState+0x34>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	e001      	b.n	8002fb2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fb2:	687b      	ldr	r3, [r7, #4]
    }
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000013c 	.word	0x2000013c
 8002fc0:	20000158 	.word	0x20000158

08002fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d100      	bne.n	8002fdc <xTaskPriorityDisinherit+0x18>
 8002fda:	e0b3      	b.n	8003144 <xTaskPriorityDisinherit+0x180>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8003150 <xTaskPriorityDisinherit+0x18c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d002      	beq.n	8002fec <xTaskPriorityDisinherit+0x28>
 8002fe6:	b672      	cpsid	i
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	e7fd      	b.n	8002fe8 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <xTaskPriorityDisinherit+0x36>
 8002ff4:	b672      	cpsid	i
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	e7fd      	b.n	8002ff6 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffe:	1e5a      	subs	r2, r3, #1
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300c:	429a      	cmp	r2, r3
 800300e:	d100      	bne.n	8003012 <xTaskPriorityDisinherit+0x4e>
 8003010:	e098      	b.n	8003144 <xTaskPriorityDisinherit+0x180>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003016:	2b00      	cmp	r3, #0
 8003018:	d000      	beq.n	800301c <xTaskPriorityDisinherit+0x58>
 800301a:	e093      	b.n	8003144 <xTaskPriorityDisinherit+0x180>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3304      	adds	r3, #4
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd fed8 	bl	8000dd6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fda7 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 800302e:	0003      	movs	r3, r0
 8003030:	001a      	movs	r2, r3
 8003032:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <xTaskPriorityDisinherit+0x190>)
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	4013      	ands	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d023      	beq.n	8003086 <xTaskPriorityDisinherit+0xc2>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 fd8d 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8003046:	0003      	movs	r3, r0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	001c      	movs	r4, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fd86 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8003054:	0003      	movs	r3, r0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	0019      	movs	r1, r3
 800305a:	2003      	movs	r0, #3
 800305c:	f002 f8f6 	bl	800524c <prvTraceGetPriorityProperty>
 8003060:	0003      	movs	r3, r0
 8003062:	0022      	movs	r2, r4
 8003064:	2103      	movs	r1, #3
 8003066:	208f      	movs	r0, #143	@ 0x8f
 8003068:	f001 ff42 	bl	8004ef0 <prvTraceStoreKernelCallWithParam>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fd76 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 8003074:	0003      	movs	r3, r0
 8003076:	b2d9      	uxtb	r1, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	b2db      	uxtb	r3, r3
 800307e:	001a      	movs	r2, r3
 8003080:	2003      	movs	r0, #3
 8003082:	f002 f8b1 	bl	80051e8 <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	2205      	movs	r2, #5
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fd6d 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80030a2:	0003      	movs	r3, r0
 80030a4:	001a      	movs	r2, r3
 80030a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <xTaskPriorityDisinherit+0x190>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <xTaskPriorityDisinherit+0x100>
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fd53 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 80030ba:	0003      	movs	r3, r0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	0018      	movs	r0, r3
 80030c0:	f001 fda2 	bl	8004c08 <prvTraceStoreTaskReady>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c8:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <xTaskPriorityDisinherit+0x194>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d903      	bls.n	80030d8 <xTaskPriorityDisinherit+0x114>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <xTaskPriorityDisinherit+0x194>)
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030dc:	491f      	ldr	r1, [pc, #124]	@ (800315c <xTaskPriorityDisinherit+0x198>)
 80030de:	0013      	movs	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	18cb      	adds	r3, r1, r3
 80030e8:	3304      	adds	r3, #4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	3204      	adds	r2, #4
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1d1a      	adds	r2, r3, #4
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003112:	0013      	movs	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	189b      	adds	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a10      	ldr	r2, [pc, #64]	@ (800315c <xTaskPriorityDisinherit+0x198>)
 800311c:	189a      	adds	r2, r3, r2
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	615a      	str	r2, [r3, #20]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003126:	490d      	ldr	r1, [pc, #52]	@ (800315c <xTaskPriorityDisinherit+0x198>)
 8003128:	0013      	movs	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	189b      	adds	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	585b      	ldr	r3, [r3, r1]
 8003132:	1c58      	adds	r0, r3, #1
 8003134:	4909      	ldr	r1, [pc, #36]	@ (800315c <xTaskPriorityDisinherit+0x198>)
 8003136:	0013      	movs	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	189b      	adds	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003144:	697b      	ldr	r3, [r7, #20]
    }
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b007      	add	sp, #28
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	20000084 	.word	0x20000084
 8003154:	20001dc8 	.word	0x20001dc8
 8003158:	20000138 	.word	0x20000138
 800315c:	20000088 	.word	0x20000088

08003160 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800316a:	4b1a      	ldr	r3, [pc, #104]	@ (80031d4 <prvAddCurrentTaskToDelayedList+0x74>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0x78>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd fe2d 	bl	8000dd6 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	18d3      	adds	r3, r2, r3
 8003182:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003184:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0x78>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d209      	bcs.n	80031a8 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <prvAddCurrentTaskToDelayedList+0x7c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0x78>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3304      	adds	r3, #4
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f7fd fde2 	bl	8000d6a <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80031a6:	e010      	b.n	80031ca <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <prvAddCurrentTaskToDelayedList+0x80>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <prvAddCurrentTaskToDelayedList+0x78>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3304      	adds	r3, #4
 80031b2:	0019      	movs	r1, r3
 80031b4:	0010      	movs	r0, r2
 80031b6:	f7fd fdd8 	bl	8000d6a <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <prvAddCurrentTaskToDelayedList+0x84>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d202      	bcs.n	80031ca <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 80031c4:	4b07      	ldr	r3, [pc, #28]	@ (80031e4 <prvAddCurrentTaskToDelayedList+0x84>)
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	20000134 	.word	0x20000134
 80031d8:	20000084 	.word	0x20000084
 80031dc:	20000118 	.word	0x20000118
 80031e0:	20000114 	.word	0x20000114
 80031e4:	20000150 	.word	0x20000150

080031e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80031f2:	f000 faa5 	bl	8003740 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <xTimerCreateTimerTask+0x44>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80031fe:	490c      	ldr	r1, [pc, #48]	@ (8003230 <xTimerCreateTimerTask+0x48>)
 8003200:	480c      	ldr	r0, [pc, #48]	@ (8003234 <xTimerCreateTimerTask+0x4c>)
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <xTimerCreateTimerTask+0x50>)
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	2303      	movs	r3, #3
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2300      	movs	r3, #0
 800320c:	2280      	movs	r2, #128	@ 0x80
 800320e:	f7fe fe98 	bl	8001f42 <xTaskCreate>
 8003212:	0003      	movs	r3, r0
 8003214:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <xTimerCreateTimerTask+0x3a>
 800321c:	b672      	cpsid	i
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	e7fd      	b.n	800321e <xTimerCreateTimerTask+0x36>
        return xReturn;
 8003222:	687b      	ldr	r3, [r7, #4]
    }
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000018c 	.word	0x2000018c
 8003230:	08006d90 	.word	0x08006d90
 8003234:	0800337d 	.word	0x0800337d
 8003238:	20000190 	.word	0x20000190

0800323c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003248:	e02e      	b.n	80032a8 <prvReloadTimer+0x6c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 8003254:	f000 fd81 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8003258:	0003      	movs	r3, r0
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fc8e 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8003260:	0003      	movs	r3, r0
 8003262:	001a      	movs	r2, r3
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <prvReloadTimer+0x8c>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <prvReloadTimer+0x62>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fd26 	bl	8003cc4 <prvTraceGetTimerNumberHigh16>
 8003278:	0003      	movs	r3, r0
 800327a:	001a      	movs	r2, r3
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <prvReloadTimer+0x8c>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <prvReloadTimer+0x62>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0018      	movs	r0, r3
 800328c:	f000 fd0c 	bl	8003ca8 <prvTraceGetTimerNumberLow16>
 8003290:	0003      	movs	r3, r0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	001a      	movs	r2, r3
 8003296:	2105      	movs	r1, #5
 8003298:	20db      	movs	r0, #219	@ 0xdb
 800329a:	f001 fdc3 	bl	8004e24 <prvTraceStoreKernelCall>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	0010      	movs	r0, r2
 80032a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	18d1      	adds	r1, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f901 	bl	80034bc <prvInsertTimerInActiveList>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d1c5      	bne.n	800324a <prvReloadTimer+0xe>
        }
    }
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b004      	add	sp, #16
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20001dc8 	.word	0x20001dc8

080032cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d6:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <prvProcessExpiredTimer+0xa8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7fd fd76 	bl	8000dd6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2228      	movs	r2, #40	@ 0x28
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	001a      	movs	r2, r3
 80032f2:	2304      	movs	r3, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d006      	beq.n	8003306 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff9c 	bl	800323c <prvReloadTimer>
 8003304:	e008      	b.n	8003318 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2228      	movs	r2, #40	@ 0x28
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	2201      	movs	r2, #1
 800330e:	4393      	bics	r3, r2
 8003310:	b2d9      	uxtb	r1, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2228      	movs	r2, #40	@ 0x28
 8003316:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 8003318:	f000 fd1f 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 800331c:	0003      	movs	r3, r0
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fc2c 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 8003324:	0003      	movs	r3, r0
 8003326:	001a      	movs	r2, r3
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <prvProcessExpiredTimer+0xac>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	4013      	ands	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d016      	beq.n	8003362 <prvProcessExpiredTimer+0x96>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fcc4 	bl	8003cc4 <prvTraceGetTimerNumberHigh16>
 800333c:	0003      	movs	r3, r0
 800333e:	001a      	movs	r2, r3
 8003340:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <prvProcessExpiredTimer+0xac>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	4013      	ands	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <prvProcessExpiredTimer+0x96>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fcaa 	bl	8003ca8 <prvTraceGetTimerNumberLow16>
 8003354:	0003      	movs	r3, r0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	001a      	movs	r2, r3
 800335a:	2105      	movs	r1, #5
 800335c:	20db      	movs	r0, #219	@ 0xdb
 800335e:	f001 fd61 	bl	8004e24 <prvTraceStoreKernelCall>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	0010      	movs	r0, r2
 800336a:	4798      	blx	r3
    }
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000184 	.word	0x20000184
 8003378:	20001dc8 	.word	0x20001dc8

0800337c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003384:	2308      	movs	r3, #8
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f855 	bl	8003438 <prvGetNextExpireTime>
 800338e:	0003      	movs	r3, r0
 8003390:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f805 	bl	80033a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800339e:	f000 f8cf 	bl	8003540 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	e7ee      	b.n	8003384 <prvTimerTask+0x8>
	...

080033a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80033b2:	f7ff f86b 	bl	800248c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033b6:	2308      	movs	r3, #8
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f85e 	bl	800347c <prvSampleTimeNow>
 80033c0:	0003      	movs	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d12b      	bne.n	8003422 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <prvProcessTimerOrBlockTask+0x42>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d808      	bhi.n	80033ea <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80033d8:	f7ff f864 	bl	80024a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff72 	bl	80032cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80033e8:	e01d      	b.n	8003426 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <prvProcessTimerOrBlockTask+0x88>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <prvProcessTimerOrBlockTask+0x56>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <prvProcessTimerOrBlockTask+0x58>
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003402:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <prvProcessTimerOrBlockTask+0x8c>)
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	0019      	movs	r1, r3
 8003410:	f7fe fd64 	bl	8001edc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003414:	f7ff f846 	bl	80024a4 <xTaskResumeAll>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d104      	bne.n	8003426 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 800341c:	f000 fa60 	bl	80038e0 <vPortYield>
    }
 8003420:	e001      	b.n	8003426 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8003422:	f7ff f83f 	bl	80024a4 <xTaskResumeAll>
    }
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	20000188 	.word	0x20000188
 8003434:	2000018c 	.word	0x2000018c

08003438 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003440:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <prvGetNextExpireTime+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <prvGetNextExpireTime+0x16>
 800344a:	2201      	movs	r2, #1
 800344c:	e000      	b.n	8003450 <prvGetNextExpireTime+0x18>
 800344e:	2200      	movs	r2, #0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <prvGetNextExpireTime+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e001      	b.n	800346c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800346c:	68fb      	ldr	r3, [r7, #12]
    }
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20000184 	.word	0x20000184

0800347c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003484:	f7ff f90e 	bl	80026a4 <xTaskGetTickCount>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <prvSampleTimeNow+0x3c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d205      	bcs.n	80034a2 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003496:	f000 f92b 	bl	80036f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e002      	b.n	80034a8 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <prvSampleTimeNow+0x3c>)
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80034ae:	68fb      	ldr	r3, [r7, #12]
    }
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000194 	.word	0x20000194

080034bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d812      	bhi.n	8003508 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e01b      	b.n	800352e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <prvInsertTimerInActiveList+0x7c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3304      	adds	r3, #4
 80034fe:	0019      	movs	r1, r3
 8003500:	0010      	movs	r0, r2
 8003502:	f7fd fc32 	bl	8000d6a <vListInsert>
 8003506:	e012      	b.n	800352e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d206      	bcs.n	800351e <prvInsertTimerInActiveList+0x62>
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003518:	2301      	movs	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e007      	b.n	800352e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800351e:	4b07      	ldr	r3, [pc, #28]	@ (800353c <prvInsertTimerInActiveList+0x80>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3304      	adds	r3, #4
 8003526:	0019      	movs	r1, r3
 8003528:	0010      	movs	r0, r2
 800352a:	f7fd fc1e 	bl	8000d6a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800352e:	697b      	ldr	r3, [r7, #20]
    }
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000188 	.word	0x20000188
 800353c:	20000184 	.word	0x20000184

08003540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003546:	e0be      	b.n	80036c6 <prvProcessReceivedCommands+0x186>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	da00      	bge.n	8003552 <prvProcessReceivedCommands+0x12>
 8003550:	e0b9      	b.n	80036c6 <prvProcessReceivedCommands+0x186>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3304      	adds	r3, #4
 8003564:	0018      	movs	r0, r3
 8003566:	f7fd fc36 	bl	8000dd6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800356a:	003b      	movs	r3, r7
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff ff85 	bl	800347c <prvSampleTimeNow>
 8003572:	0003      	movs	r3, r0
 8003574:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b09      	cmp	r3, #9
 800357c:	d900      	bls.n	8003580 <prvProcessReceivedCommands+0x40>
 800357e:	e09f      	b.n	80036c0 <prvProcessReceivedCommands+0x180>
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	4b58      	ldr	r3, [pc, #352]	@ (80036e4 <prvProcessReceivedCommands+0x1a4>)
 8003584:	18d3      	adds	r3, r2, r3
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2228      	movs	r2, #40	@ 0x28
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	2201      	movs	r2, #1
 8003592:	4313      	orrs	r3, r2
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2228      	movs	r2, #40	@ 0x28
 800359a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	18d1      	adds	r1, r2, r3
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	6978      	ldr	r0, [r7, #20]
 80035ae:	f7ff ff85 	bl	80034bc <prvInsertTimerInActiveList>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d100      	bne.n	80035b8 <prvProcessReceivedCommands+0x78>
 80035b6:	e085      	b.n	80036c4 <prvProcessReceivedCommands+0x184>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2228      	movs	r2, #40	@ 0x28
 80035bc:	5c9b      	ldrb	r3, [r3, r2]
 80035be:	001a      	movs	r2, r3
 80035c0:	2304      	movs	r3, #4
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00a      	beq.n	80035dc <prvProcessReceivedCommands+0x9c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	18d1      	adds	r1, r2, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff fe31 	bl	800323c <prvReloadTimer>
 80035da:	e008      	b.n	80035ee <prvProcessReceivedCommands+0xae>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2228      	movs	r2, #40	@ 0x28
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4393      	bics	r3, r2
 80035e6:	b2d9      	uxtb	r1, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2228      	movs	r2, #40	@ 0x28
 80035ec:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 80035ee:	f000 fbb4 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 80035f2:	0003      	movs	r3, r0
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fac1 	bl	8003b7c <prvTraceGetTaskNumberHigh16>
 80035fa:	0003      	movs	r3, r0
 80035fc:	001a      	movs	r2, r3
 80035fe:	4b3a      	ldr	r3, [pc, #232]	@ (80036e8 <prvProcessReceivedCommands+0x1a8>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	4013      	ands	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <prvProcessReceivedCommands+0xf8>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 fb59 	bl	8003cc4 <prvTraceGetTimerNumberHigh16>
 8003612:	0003      	movs	r3, r0
 8003614:	001a      	movs	r2, r3
 8003616:	4b34      	ldr	r3, [pc, #208]	@ (80036e8 <prvProcessReceivedCommands+0x1a8>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <prvProcessReceivedCommands+0xf8>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 fb3f 	bl	8003ca8 <prvTraceGetTimerNumberLow16>
 800362a:	0003      	movs	r3, r0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	001a      	movs	r2, r3
 8003630:	2105      	movs	r1, #5
 8003632:	20db      	movs	r0, #219	@ 0xdb
 8003634:	f001 fbf6 	bl	8004e24 <prvTraceStoreKernelCall>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	0010      	movs	r0, r2
 8003640:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003642:	e03f      	b.n	80036c4 <prvProcessReceivedCommands+0x184>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2228      	movs	r2, #40	@ 0x28
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2201      	movs	r2, #1
 800364c:	4393      	bics	r3, r2
 800364e:	b2d9      	uxtb	r1, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2228      	movs	r2, #40	@ 0x28
 8003654:	5499      	strb	r1, [r3, r2]
                        break;
 8003656:	e036      	b.n	80036c6 <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2228      	movs	r2, #40	@ 0x28
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	2201      	movs	r2, #1
 8003660:	4313      	orrs	r3, r2
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2228      	movs	r2, #40	@ 0x28
 8003668:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <prvProcessReceivedCommands+0x140>
 800367a:	b672      	cpsid	i
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	e7fd      	b.n	800367c <prvProcessReceivedCommands+0x13c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	18d1      	adds	r1, r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7ff ff15 	bl	80034bc <prvInsertTimerInActiveList>
                        break;
 8003692:	e018      	b.n	80036c6 <prvProcessReceivedCommands+0x186>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2228      	movs	r2, #40	@ 0x28
 8003698:	5c9b      	ldrb	r3, [r3, r2]
 800369a:	001a      	movs	r2, r3
 800369c:	2302      	movs	r3, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	d104      	bne.n	80036ac <prvProcessReceivedCommands+0x16c>
                            {
                                vPortFree( pxTimer );
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fa25 	bl	8003af4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80036aa:	e00c      	b.n	80036c6 <prvProcessReceivedCommands+0x186>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2228      	movs	r2, #40	@ 0x28
 80036b0:	5c9b      	ldrb	r3, [r3, r2]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4393      	bics	r3, r2
 80036b6:	b2d9      	uxtb	r1, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2228      	movs	r2, #40	@ 0x28
 80036bc:	5499      	strb	r1, [r3, r2]
                        break;
 80036be:	e002      	b.n	80036c6 <prvProcessReceivedCommands+0x186>

                    default:
                        /* Don't expect to get here. */
                        break;
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	e000      	b.n	80036c6 <prvProcessReceivedCommands+0x186>
                        break;
 80036c4:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <prvProcessReceivedCommands+0x1ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1d39      	adds	r1, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fe f87e 	bl	80017d0 <xQueueReceive>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d000      	beq.n	80036da <prvProcessReceivedCommands+0x19a>
 80036d8:	e736      	b.n	8003548 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b006      	add	sp, #24
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	080076dc 	.word	0x080076dc
 80036e8:	20001dc8 	.word	0x20001dc8
 80036ec:	2000018c 	.word	0x2000018c

080036f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036f6:	e00b      	b.n	8003710 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <prvSwitchTimerLists+0x48>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003702:	2301      	movs	r3, #1
 8003704:	425a      	negs	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	0011      	movs	r1, r2
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff fdde 	bl	80032cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <prvSwitchTimerLists+0x48>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ee      	bne.n	80036f8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <prvSwitchTimerLists+0x48>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <prvSwitchTimerLists+0x4c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <prvSwitchTimerLists+0x48>)
 8003726:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <prvSwitchTimerLists+0x4c>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
    }
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000184 	.word	0x20000184
 800373c:	20000188 	.word	0x20000188

08003740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003744:	f000 f8dc 	bl	8003900 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <prvCheckForValidListAndQueue+0x5c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d120      	bne.n	8003792 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8003750:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <prvCheckForValidListAndQueue+0x60>)
 8003752:	0018      	movs	r0, r3
 8003754:	f7fd fae0 	bl	8000d18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003758:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <prvCheckForValidListAndQueue+0x64>)
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd fadc 	bl	8000d18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <prvCheckForValidListAndQueue+0x68>)
 8003762:	4a0f      	ldr	r2, [pc, #60]	@ (80037a0 <prvCheckForValidListAndQueue+0x60>)
 8003764:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <prvCheckForValidListAndQueue+0x6c>)
 8003768:	4a0e      	ldr	r2, [pc, #56]	@ (80037a4 <prvCheckForValidListAndQueue+0x64>)
 800376a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800376c:	2200      	movs	r2, #0
 800376e:	210c      	movs	r1, #12
 8003770:	200a      	movs	r0, #10
 8003772:	f7fd fbe3 	bl	8000f3c <xQueueGenericCreate>
 8003776:	0002      	movs	r2, r0
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <prvCheckForValidListAndQueue+0x5c>)
 800377a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800377c:	4b07      	ldr	r3, [pc, #28]	@ (800379c <prvCheckForValidListAndQueue+0x5c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <prvCheckForValidListAndQueue+0x5c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a09      	ldr	r2, [pc, #36]	@ (80037b0 <prvCheckForValidListAndQueue+0x70>)
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f7fe fb4b 	bl	8001e28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003792:	f000 f8c7 	bl	8003924 <vPortExitCritical>
    }
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000018c 	.word	0x2000018c
 80037a0:	2000015c 	.word	0x2000015c
 80037a4:	20000170 	.word	0x20000170
 80037a8:	20000184 	.word	0x20000184
 80037ac:	20000188 	.word	0x20000188
 80037b0:	08006d98 	.word	0x08006d98

080037b4 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        }
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b04      	subs	r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0452      	lsls	r2, r2, #17
 80037e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b04      	subs	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3b04      	subs	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80037f4:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <pxPortInitialiseStack+0x50>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b14      	subs	r3, #20
 80037fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b20      	subs	r3, #32
 800380a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800380c:	68fb      	ldr	r3, [r7, #12]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	0800381d 	.word	0x0800381d

0800381c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <prvTaskExitError+0x2c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	d002      	beq.n	8003834 <prvTaskExitError+0x18>
 800382e:	b672      	cpsid	i
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	e7fd      	b.n	8003830 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8003834:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0fc      	beq.n	8003838 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000004 	.word	0x20000004

0800384c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003860 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8003860:	4a0b      	ldr	r2, [pc, #44]	@ (8003890 <pxCurrentTCBConst2>)
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	3020      	adds	r0, #32
 8003868:	f380 8809 	msr	PSP, r0
 800386c:	2002      	movs	r0, #2
 800386e:	f380 8814 	msr	CONTROL, r0
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003878:	46ae      	mov	lr, r5
 800387a:	bc08      	pop	{r3}
 800387c:	bc04      	pop	{r2}
 800387e:	b662      	cpsie	i
 8003880:	4718      	bx	r3
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46c0      	nop			@ (mov r8, r8)

08003890 <pxCurrentTCBConst2>:
 8003890:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46c0      	nop			@ (mov r8, r8)

08003898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800389c:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <xPortStartScheduler+0x40>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <xPortStartScheduler+0x40>)
 80038a2:	21ff      	movs	r1, #255	@ 0xff
 80038a4:	0409      	lsls	r1, r1, #16
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <xPortStartScheduler+0x40>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <xPortStartScheduler+0x40>)
 80038b0:	21ff      	movs	r1, #255	@ 0xff
 80038b2:	0609      	lsls	r1, r1, #24
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80038b8:	f000 f898 	bl	80039ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <xPortStartScheduler+0x44>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80038c2:	f7ff ffcd 	bl	8003860 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80038c6:	f7ff f82f 	bl	8002928 <vTaskSwitchContext>
    prvTaskExitError();
 80038ca:	f7ff ffa7 	bl	800381c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	e000ed20 	.word	0xe000ed20
 80038dc:	20000004 	.word	0x20000004

080038e0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <vPortYield+0x1c>)
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	0552      	lsls	r2, r2, #21
 80038ea:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80038ec:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80038f0:	f3bf 8f6f 	isb	sy
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003904:	b672      	cpsid	i
    uxCriticalNesting++;
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <vPortEnterCritical+0x20>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <vPortEnterCritical+0x20>)
 800390e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003910:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003914:	f3bf 8f6f 	isb	sy
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	20000004 	.word	0x20000004

08003924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <vPortExitCritical+0x2c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <vPortExitCritical+0x12>
 8003930:	b672      	cpsid	i
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	e7fd      	b.n	8003932 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <vPortExitCritical+0x2c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <vPortExitCritical+0x2c>)
 800393e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <vPortExitCritical+0x2c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d100      	bne.n	800394a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003948:	b662      	cpsie	i
    }
}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000004 	.word	0x20000004

08003954 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8003954:	f3ef 8010 	mrs	r0, PRIMASK
 8003958:	b672      	cpsid	i
 800395a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800395c:	46c0      	nop			@ (mov r8, r8)
 800395e:	0018      	movs	r0, r3

08003960 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8003960:	f380 8810 	msr	PRIMASK, r0
 8003964:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003966:	46c0      	nop			@ (mov r8, r8)
	...

08003970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003970:	f3ef 8009 	mrs	r0, PSP
 8003974:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <pxCurrentTCBConst>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	3820      	subs	r0, #32
 800397a:	6010      	str	r0, [r2, #0]
 800397c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800397e:	4644      	mov	r4, r8
 8003980:	464d      	mov	r5, r9
 8003982:	4656      	mov	r6, sl
 8003984:	465f      	mov	r7, fp
 8003986:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003988:	b508      	push	{r3, lr}
 800398a:	b672      	cpsid	i
 800398c:	f7fe ffcc 	bl	8002928 <vTaskSwitchContext>
 8003990:	b662      	cpsie	i
 8003992:	bc0c      	pop	{r2, r3}
 8003994:	6811      	ldr	r1, [r2, #0]
 8003996:	6808      	ldr	r0, [r1, #0]
 8003998:	3010      	adds	r0, #16
 800399a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800399c:	46a0      	mov	r8, r4
 800399e:	46a9      	mov	r9, r5
 80039a0:	46b2      	mov	sl, r6
 80039a2:	46bb      	mov	fp, r7
 80039a4:	f380 8809 	msr	PSP, r0
 80039a8:	3820      	subs	r0, #32
 80039aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80039ac:	4718      	bx	r3
 80039ae:	46c0      	nop			@ (mov r8, r8)

080039b0 <pxCurrentTCBConst>:
 80039b0:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46c0      	nop			@ (mov r8, r8)

080039b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80039be:	f7ff ffc9 	bl	8003954 <ulSetInterruptMaskFromISR>
 80039c2:	0003      	movs	r3, r0
 80039c4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039c6:	f7fe fe85 	bl	80026d4 <xTaskIncrementTick>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d003      	beq.n	80039d6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <SysTick_Handler+0x30>)
 80039d0:	2280      	movs	r2, #128	@ 0x80
 80039d2:	0552      	lsls	r2, r2, #21
 80039d4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff ffc1 	bl	8003960 <vClearInterruptMaskFromISR>
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <vPortSetupTimerInterrupt+0x34>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <vPortSetupTimerInterrupt+0x38>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <vPortSetupTimerInterrupt+0x3c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	22fa      	movs	r2, #250	@ 0xfa
 8003a02:	0091      	lsls	r1, r2, #2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7fc fb7f 	bl	8000108 <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <vPortSetupTimerInterrupt+0x40>)
 8003a10:	3a01      	subs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a14:	4b02      	ldr	r3, [pc, #8]	@ (8003a20 <vPortSetupTimerInterrupt+0x34>)
 8003a16:	2207      	movs	r2, #7
 8003a18:	601a      	str	r2, [r3, #0]
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	e000e010 	.word	0xe000e010
 8003a24:	e000e018 	.word	0xe000e018
 8003a28:	20000014 	.word	0x20000014
 8003a2c:	e000e014 	.word	0xe000e014

08003a30 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2207      	movs	r2, #7
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2207      	movs	r2, #7
 8003a48:	4393      	bics	r3, r2
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d205      	bcs.n	8003a5e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2207      	movs	r2, #7
 8003a56:	4393      	bics	r3, r2
 8003a58:	3308      	adds	r3, #8
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e001      	b.n	8003a62 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8003a62:	f7fe fd13 	bl	800248c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8003a66:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae4 <pvPortMalloc+0xb4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae8 <pvPortMalloc+0xb8>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	4393      	bics	r3, r2
 8003a74:	001a      	movs	r2, r3
 8003a76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <pvPortMalloc+0xb4>)
 8003a78:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01a      	beq.n	8003ab6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <pvPortMalloc+0xbc>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <pvPortMalloc+0xc0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d813      	bhi.n	8003ab6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8003a8e:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <pvPortMalloc+0xbc>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	18d2      	adds	r2, r2, r3
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <pvPortMalloc+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90b      	bls.n	8003ab6 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <pvPortMalloc+0xb4>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <pvPortMalloc+0xbc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <pvPortMalloc+0xbc>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	18d2      	adds	r2, r2, r3
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <pvPortMalloc+0xbc>)
 8003ab4:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <pvPortMalloc+0x9a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	2094      	movs	r0, #148	@ 0x94
 8003ac4:	f001 f908 	bl	8004cd8 <vTraceStoreMemMangEvent>
 8003ac8:	e005      	b.n	8003ad6 <pvPortMalloc+0xa6>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	0019      	movs	r1, r3
 8003ad0:	20e8      	movs	r0, #232	@ 0xe8
 8003ad2:	f001 f901 	bl	8004cd8 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8003ad6:	f7fe fce5 	bl	80024a4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20001d9c 	.word	0x20001d9c
 8003ae8:	2000019f 	.word	0x2000019f
 8003aec:	20001d98 	.word	0x20001d98
 8003af0:	00001bf7 	.word	0x00001bf7

08003af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <vPortFree+0x14>
 8003b02:	b672      	cpsid	i
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	e7fd      	b.n	8003b04 <vPortFree+0x10>
}
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <xPortGetFreeHeapSize+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a03      	ldr	r2, [pc, #12]	@ (8003b28 <xPortGetFreeHeapSize+0x18>)
 8003b1a:	1ad3      	subs	r3, r2, r3
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	20001d98 	.word	0x20001d98
 8003b28:	00001bf8 	.word	0x00001bf8

08003b2c <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fe f838 	bl	8001bac <uxQueueGetQueueNumber>
 8003b3c:	0003      	movs	r3, r0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fe f841 	bl	8001bd8 <ucQueueGetQueueType>
 8003b56:	0003      	movs	r3, r0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff f93c 	bl	8002de8 <uxTaskGetTaskNumber>
 8003b70:	0003      	movs	r3, r0
 8003b72:	b29b      	uxth	r3, r3
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7ff f92e 	bl	8002de8 <uxTaskGetTaskNumber>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b29b      	uxth	r3, r3
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	1cbb      	adds	r3, r7, #2
 8003ba6:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff f91c 	bl	8002de8 <uxTaskGetTaskNumber>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	041a      	lsls	r2, r3, #16
 8003bb6:	1cbb      	adds	r3, r7, #2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0011      	movs	r1, r2
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff f925 	bl	8002e10 <vTaskSetTaskNumber>
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff f902 	bl	8002de8 <uxTaskGetTaskNumber>
 8003be4:	0003      	movs	r3, r0
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	0c1a      	lsrs	r2, r3, #16
 8003bea:	1cbb      	adds	r3, r7, #2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff f90a 	bl	8002e10 <vTaskSetTaskNumber>
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7ff ff8c 	bl	8003b2c <prvTraceGetQueueNumber>
 8003c14:	0003      	movs	r3, r0
 8003c16:	b29b      	uxth	r3, r3
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff ff7e 	bl	8003b2c <prvTraceGetQueueNumber>
 8003c30:	0003      	movs	r3, r0
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	b29b      	uxth	r3, r3
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	000a      	movs	r2, r1
 8003c48:	1cbb      	adds	r3, r7, #2
 8003c4a:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7ff ff6c 	bl	8003b2c <prvTraceGetQueueNumber>
 8003c54:	0003      	movs	r3, r0
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	0011      	movs	r1, r2
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fd ffab 	bl	8001bc0 <vQueueSetQueueNumber>
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	000a      	movs	r2, r1
 8003c7c:	1cbb      	adds	r3, r7, #2
 8003c7e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff ff52 	bl	8003b2c <prvTraceGetQueueNumber>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	0c1a      	lsrs	r2, r3, #16
 8003c8e:	1cbb      	adds	r3, r7, #2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0011      	movs	r1, r2
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fd ff90 	bl	8001bc0 <vQueueSetQueueNumber>
}
 8003ca0:	46c0      	nop			@ (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvTraceGetTimerNumberLow16>:

#if (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetTimerNumberLow16(void* pvTimer)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff fd7e 	bl	80037b4 <uxTimerGetTimerNumber>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	b29b      	uxth	r3, r3
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <prvTraceGetTimerNumberHigh16>:

uint16_t prvTraceGetTimerNumberHigh16(void* pvTimer)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff fd70 	bl	80037b4 <uxTimerGetTimerNumber>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	b29b      	uxth	r3, r3
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <vTraceSetQueueName>:
};

#if (TRC_CFG_SCHEDULING_ONLY == 0)

void vTraceSetQueueName(void* pvQueue, const char* szName)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff ff88 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f001 fcb3 	bl	8005668 <prvTraceSetObjectName>
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <vTraceSetSemaphoreName>:

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff ff74 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	0019      	movs	r1, r3
 8003d24:	2001      	movs	r0, #1
 8003d26:	f001 fc9f 	bl	8005668 <prvTraceSetObjectName>
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <vTraceSetMutexName>:

void vTraceSetMutexName(void* pvMutex, const char* szName)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_MUTEX, TRACE_GET_OBJECT_NUMBER(QUEUE, pvMutex), szName);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7ff ff60 	bl	8003c04 <prvTraceGetQueueNumberLow16>
 8003d44:	0003      	movs	r3, r0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f001 fc8b 	bl	8005668 <prvTraceSetObjectName>
}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b002      	add	sp, #8
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8003d5e:	f7ff f907 	bl	8002f70 <xTaskGetCurrentTaskHandle>
 8003d62:	0003      	movs	r3, r0
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8003d8c:	4b62      	ldr	r3, [pc, #392]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2209      	movs	r2, #9
 8003d92:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8003d94:	4b60      	ldr	r3, [pc, #384]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2250      	movs	r2, #80	@ 0x50
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8003d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2251      	movs	r2, #81	@ 0x51
 8003da4:	2106      	movs	r1, #6
 8003da6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003da8:	4b5b      	ldr	r3, [pc, #364]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2252      	movs	r2, #82	@ 0x52
 8003dae:	2102      	movs	r1, #2
 8003db0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8003db2:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2253      	movs	r2, #83	@ 0x53
 8003db8:	2106      	movs	r1, #6
 8003dba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8003dbc:	4b56      	ldr	r3, [pc, #344]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2254      	movs	r2, #84	@ 0x54
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8003dc6:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2255      	movs	r2, #85	@ 0x55
 8003dcc:	2101      	movs	r1, #1
 8003dce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8003dd0:	4b51      	ldr	r3, [pc, #324]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2256      	movs	r2, #86	@ 0x56
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8003dda:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2257      	movs	r2, #87	@ 0x57
 8003de0:	2102      	movs	r1, #2
 8003de2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8003de4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2258      	movs	r2, #88	@ 0x58
 8003dea:	2102      	movs	r1, #2
 8003dec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8003dee:	4b4a      	ldr	r3, [pc, #296]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	225c      	movs	r2, #92	@ 0x5c
 8003df4:	210f      	movs	r1, #15
 8003df6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8003df8:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	225d      	movs	r2, #93	@ 0x5d
 8003dfe:	210f      	movs	r1, #15
 8003e00:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8003e02:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	225e      	movs	r2, #94	@ 0x5e
 8003e08:	210f      	movs	r1, #15
 8003e0a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8003e0c:	4b42      	ldr	r3, [pc, #264]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	225f      	movs	r2, #95	@ 0x5f
 8003e12:	210f      	movs	r1, #15
 8003e14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8003e16:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2260      	movs	r2, #96	@ 0x60
 8003e1c:	210f      	movs	r1, #15
 8003e1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8003e20:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2261      	movs	r2, #97	@ 0x61
 8003e26:	210f      	movs	r1, #15
 8003e28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2262      	movs	r2, #98	@ 0x62
 8003e30:	210f      	movs	r1, #15
 8003e32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8003e34:	4b38      	ldr	r3, [pc, #224]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2263      	movs	r2, #99	@ 0x63
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8003e3e:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2264      	movs	r2, #100	@ 0x64
 8003e44:	210f      	movs	r1, #15
 8003e46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8003e48:	4b33      	ldr	r3, [pc, #204]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2268      	movs	r2, #104	@ 0x68
 8003e4e:	2110      	movs	r1, #16
 8003e50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8003e52:	4b31      	ldr	r3, [pc, #196]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2269      	movs	r2, #105	@ 0x69
 8003e58:	2110      	movs	r1, #16
 8003e5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	226a      	movs	r2, #106	@ 0x6a
 8003e62:	2110      	movs	r1, #16
 8003e64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8003e66:	4b2c      	ldr	r3, [pc, #176]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	226b      	movs	r2, #107	@ 0x6b
 8003e6c:	2113      	movs	r1, #19
 8003e6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003e70:	4b29      	ldr	r3, [pc, #164]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	226c      	movs	r2, #108	@ 0x6c
 8003e76:	2111      	movs	r1, #17
 8003e78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8003e7a:	4b27      	ldr	r3, [pc, #156]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	226d      	movs	r2, #109	@ 0x6d
 8003e80:	2110      	movs	r1, #16
 8003e82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8003e84:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	226e      	movs	r2, #110	@ 0x6e
 8003e8a:	2113      	movs	r1, #19
 8003e8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8003e8e:	4b22      	ldr	r3, [pc, #136]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	226f      	movs	r2, #111	@ 0x6f
 8003e94:	2113      	movs	r1, #19
 8003e96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003e98:	4b1f      	ldr	r3, [pc, #124]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2270      	movs	r2, #112	@ 0x70
 8003e9e:	2113      	movs	r1, #19
 8003ea0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2274      	movs	r2, #116	@ 0x74
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8003eac:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2276      	movs	r2, #118	@ 0x76
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8003eb6:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2278      	movs	r2, #120	@ 0x78
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	227a      	movs	r2, #122	@ 0x7a
 8003ec6:	21a0      	movs	r1, #160	@ 0xa0
 8003ec8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8003eca:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	227c      	movs	r2, #124	@ 0x7c
 8003ed0:	2189      	movs	r1, #137	@ 0x89
 8003ed2:	0049      	lsls	r1, r1, #1
 8003ed4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8003ed6:	4b10      	ldr	r3, [pc, #64]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	227e      	movs	r2, #126	@ 0x7e
 8003edc:	21ab      	movs	r1, #171	@ 0xab
 8003ede:	0049      	lsls	r1, r1, #1
 8003ee0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2280      	movs	r2, #128	@ 0x80
 8003ee8:	21b3      	movs	r1, #179	@ 0xb3
 8003eea:	0049      	lsls	r1, r1, #1
 8003eec:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2282      	movs	r2, #130	@ 0x82
 8003ef4:	21c6      	movs	r1, #198	@ 0xc6
 8003ef6:	0049      	lsls	r1, r1, #1
 8003ef8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2284      	movs	r2, #132	@ 0x84
 8003f00:	21d9      	movs	r1, #217	@ 0xd9
 8003f02:	0049      	lsls	r1, r1, #1
 8003f04:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8003f06:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	22ec      	movs	r2, #236	@ 0xec
 8003f0c:	0052      	lsls	r2, r2, #1
 8003f0e:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200031f8 	.word	0x200031f8

08003f1c <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003f26:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	825a      	strh	r2, [r3, #18]
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f2e:	8a5a      	ldrh	r2, [r3, #18]
 8003f30:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f32:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8003f34:	4b3c      	ldr	r3, [pc, #240]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f36:	2202      	movs	r2, #2
 8003f38:	829a      	strh	r2, [r3, #20]
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f3c:	8a9a      	ldrh	r2, [r3, #20]
 8003f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f40:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8003f42:	4b39      	ldr	r3, [pc, #228]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f44:	2208      	movs	r2, #8
 8003f46:	82da      	strh	r2, [r3, #22]
 8003f48:	4b37      	ldr	r3, [pc, #220]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f4a:	8ada      	ldrh	r2, [r3, #22]
 8003f4c:	4b36      	ldr	r3, [pc, #216]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f4e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f52:	220a      	movs	r2, #10
 8003f54:	831a      	strh	r2, [r3, #24]
 8003f56:	4b34      	ldr	r3, [pc, #208]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f58:	8b1a      	ldrh	r2, [r3, #24]
 8003f5a:	4b33      	ldr	r3, [pc, #204]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f5c:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8003f5e:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f60:	2210      	movs	r2, #16
 8003f62:	835a      	strh	r2, [r3, #26]
 8003f64:	4b30      	ldr	r3, [pc, #192]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f66:	8b5a      	ldrh	r2, [r3, #26]
 8003f68:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f6a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f6e:	2214      	movs	r2, #20
 8003f70:	839a      	strh	r2, [r3, #28]
 8003f72:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f74:	8b9a      	ldrh	r2, [r3, #28]
 8003f76:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f78:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f7c:	2215      	movs	r2, #21
 8003f7e:	83da      	strh	r2, [r3, #30]
 8003f80:	4b29      	ldr	r3, [pc, #164]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f82:	8bda      	ldrh	r2, [r3, #30]
 8003f84:	4b28      	ldr	r3, [pc, #160]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f86:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f8a:	2217      	movs	r2, #23
 8003f8c:	841a      	strh	r2, [r3, #32]
 8003f8e:	4b26      	ldr	r3, [pc, #152]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f90:	8c1a      	ldrh	r2, [r3, #32]
 8003f92:	4b25      	ldr	r3, [pc, #148]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f94:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003f96:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f98:	2219      	movs	r2, #25
 8003f9a:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003f9c:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003f9e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003fa0:	4b21      	ldr	r3, [pc, #132]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fa2:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003fa4:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fac:	2207      	movs	r2, #7
 8003fae:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fb2:	2209      	movs	r2, #9
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fb8:	220f      	movs	r2, #15
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fbe:	2213      	movs	r2, #19
 8003fc0:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8003fc2:	4b19      	ldr	r3, [pc, #100]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fc4:	2214      	movs	r2, #20
 8003fc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003fc8:	4b17      	ldr	r3, [pc, #92]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fca:	2216      	movs	r2, #22
 8003fcc:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8003fce:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fd0:	2218      	movs	r2, #24
 8003fd2:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fd6:	221a      	movs	r2, #26
 8003fd8:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e00a      	b.n	8003ff6 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003fe0:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	3306      	adds	r3, #6
 8003fec:	2200      	movs	r2, #0
 8003fee:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d9f1      	bls.n	8003fe0 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	e009      	b.n	8004016 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8004002:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004004:	2148      	movs	r1, #72	@ 0x48
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	185b      	adds	r3, r3, r1
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b1a      	cmp	r3, #26
 800401a:	d9f2      	bls.n	8004002 <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 800401c:	2300      	movs	r3, #0
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b002      	add	sp, #8
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	20001dcc 	.word	0x20001dcc

0800402c <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	0002      	movs	r2, r0
 8004034:	1dfb      	adds	r3, r7, #7
 8004036:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 8004038:	1dfb      	adds	r3, r7, #7
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d816      	bhi.n	800406e <pszTraceGetErrorNotEnoughHandles+0x42>
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 800404a:	4b0c      	ldr	r3, [pc, #48]	@ (800407c <pszTraceGetErrorNotEnoughHandles+0x50>)
 800404c:	e010      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 800404e:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <pszTraceGetErrorNotEnoughHandles+0x54>)
 8004050:	e00e      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8004054:	e00c      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8004056:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8004058:	e00a      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 800405a:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <pszTraceGetErrorNotEnoughHandles+0x60>)
 800405c:	e008      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 800405e:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <pszTraceGetErrorNotEnoughHandles+0x64>)
 8004060:	e006      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8004062:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8004064:	e004      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8004066:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8004068:	e002      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800406a:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <pszTraceGetErrorNotEnoughHandles+0x70>)
 800406c:	e000      	b.n	8004070 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}
 8004078:	08007704 	.word	0x08007704
 800407c:	08006da0 	.word	0x08006da0
 8004080:	08006de8 	.word	0x08006de8
 8004084:	08006e30 	.word	0x08006e30
 8004088:	08006e84 	.word	0x08006e84
 800408c:	08006ed0 	.word	0x08006ed0
 8004090:	08006f1c 	.word	0x08006f1c
 8004094:	08006f68 	.word	0x08006f68
 8004098:	08006fbc 	.word	0x08006fbc
 800409c:	08007014 	.word	0x08007014
 80040a0:	08007070 	.word	0x08007070

080040a4 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 80040ac:	f000 fc74 	bl	8004998 <xTraceInitialize>
 80040b0:	0003      	movs	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e021      	b.n	80040fe <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10b      	bne.n	80040d8 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80040c0:	f7ff fe5c 	bl	8003d7c <xTraceKernelPortEnable>
 80040c4:	0003      	movs	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e017      	b.n	80040fe <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 80040ce:	f000 f8a9 	bl	8004224 <prvTraceInitTimestamps>

		prvTraceStart();
 80040d2:	f000 f825 	bl	8004120 <prvTraceStart>
 80040d6:	e011      	b.n	80040fc <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d105      	bne.n	80040ea <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80040de:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <xTraceEnable+0x64>)
 80040e0:	0018      	movs	r0, r3
 80040e2:	f001 fb7d 	bl	80057e0 <prvTraceError>

		return TRC_FAIL;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e009      	b.n	80040fe <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <xTraceEnable+0x68>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f001 fb74 	bl	80057e0 <prvTraceError>

		return TRC_FAIL;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	080070a0 	.word	0x080070a0
 800410c:	080070e0 	.word	0x080070e0

08004110 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
	prvTraceStop();
 8004114:	f000 f86e 	bl	80041f4 <prvTraceStop>

	return TRC_SUCCESS;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8004126:	2417      	movs	r4, #23
 8004128:	193b      	adds	r3, r7, r4
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 800412e:	4b2d      	ldr	r3, [pc, #180]	@ (80041e4 <prvTraceStart+0xc4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d050      	beq.n	80041d8 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8004136:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <prvTraceStart+0xc4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	2b01      	cmp	r3, #1
 800413e:	d04d      	beq.n	80041dc <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8004140:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <prvTraceStart+0xc8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d14a      	bne.n	80041de <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004148:	f3ef 8310 	mrs	r3, PRIMASK
 800414c:	60bb      	str	r3, [r7, #8]
  return(result);
 800414e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	2301      	movs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	46c0      	nop			@ (mov r8, r8)
 800415e:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <prvTraceStart+0xcc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	4b21      	ldr	r3, [pc, #132]	@ (80041ec <prvTraceStart+0xcc>)
 8004166:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8004168:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <prvTraceStart+0xc4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8004170:	f7ff fdf3 	bl	8003d5a <prvTraceGetCurrentTaskHandle>
 8004174:	0003      	movs	r3, r0
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fcf2 	bl	8003b60 <prvTraceGetTaskNumberLow16>
 800417c:	0003      	movs	r3, r0
 800417e:	001a      	movs	r2, r3
 8004180:	0025      	movs	r5, r4
 8004182:	197b      	adds	r3, r7, r5
 8004184:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8004186:	197b      	adds	r3, r7, r5
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800418e:	197c      	adds	r4, r7, r5
 8004190:	2003      	movs	r0, #3
 8004192:	f001 f971 	bl	8005478 <prvTraceGetObjectHandle>
 8004196:	0003      	movs	r3, r0
 8004198:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800419a:	4a15      	ldr	r2, [pc, #84]	@ (80041f0 <prvTraceStart+0xd0>)
 800419c:	197b      	adds	r3, r7, r5
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	0019      	movs	r1, r3
 80041a2:	2003      	movs	r0, #3
 80041a4:	f001 fa60 	bl	8005668 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80041a8:	197b      	adds	r3, r7, r5
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	0019      	movs	r1, r3
 80041b0:	2003      	movs	r0, #3
 80041b2:	f001 f819 	bl	80051e8 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80041b6:	2317      	movs	r3, #23
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 ff9f 	bl	8005100 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80041c2:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <prvTraceStart+0xcc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <prvTraceStart+0xcc>)
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	e002      	b.n	80041de <prvTraceStart+0xbe>
		return;
 80041d8:	46c0      	nop			@ (mov r8, r8)
 80041da:	e000      	b.n	80041de <prvTraceStart+0xbe>
		return; /* Already running */
 80041dc:	46c0      	nop			@ (mov r8, r8)
	}
}
 80041de:	46bd      	mov	sp, r7
 80041e0:	b006      	add	sp, #24
 80041e2:	bdb0      	pop	{r4, r5, r7, pc}
 80041e4:	200031f8 	.word	0x200031f8
 80041e8:	20001e30 	.word	0x20001e30
 80041ec:	20001db4 	.word	0x20001db4
 80041f0:	08007120 	.word	0x08007120

080041f4 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80041f8:	4b08      	ldr	r3, [pc, #32]	@ (800421c <prvTraceStop+0x28>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <prvTraceStop+0x28>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <prvTraceStop+0x2c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <prvTraceStop+0x2c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4798      	blx	r3
	}
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200031f8 	.word	0x200031f8
 8004220:	20001dc0 	.word	0x20001dc0

08004224 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <prvTraceInitTimestamps+0x14>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b03      	ldr	r3, [pc, #12]	@ (800423c <prvTraceInitTimestamps+0x18>)
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	e000e018 	.word	0xe000e018
 800423c:	20001dc4 	.word	0x20001dc4

08004240 <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	0008      	movs	r0, r1
 800424a:	0011      	movs	r1, r2
 800424c:	1cfb      	adds	r3, r7, #3
 800424e:	1c02      	adds	r2, r0, #0
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	1cbb      	adds	r3, r7, #2
 8004254:	1c0a      	adds	r2, r1, #0
 8004256:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
 8004258:	1cfb      	adds	r3, r7, #3
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b23      	cmp	r3, #35	@ 0x23
 800425e:	d901      	bls.n	8004264 <writeInt8+0x24>
	{
		return 255;
 8004260:	23ff      	movs	r3, #255	@ 0xff
 8004262:	e010      	b.n	8004286 <writeInt8+0x46>
	}

	((uint8_t*)buffer)[i] = value;
 8004264:	1cfb      	adds	r3, r7, #3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	18d3      	adds	r3, r2, r3
 800426c:	1cba      	adds	r2, r7, #2
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 8004272:	1cfb      	adds	r3, r7, #3
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b23      	cmp	r3, #35	@ 0x23
 8004278:	d901      	bls.n	800427e <writeInt8+0x3e>
	{
		return 255;
 800427a:	23ff      	movs	r3, #255	@ 0xff
 800427c:	e003      	b.n	8004286 <writeInt8+0x46>
	}

	return ((uint8_t) (i + 1));
 800427e:	1cfb      	adds	r3, r7, #3
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	b2db      	uxtb	r3, r3
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b002      	add	sp, #8
 800428c:	bd80      	pop	{r7, pc}

0800428e <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	0008      	movs	r0, r1
 8004298:	0011      	movs	r1, r2
 800429a:	1cfb      	adds	r3, r7, #3
 800429c:	1c02      	adds	r2, r0, #0
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	003b      	movs	r3, r7
 80042a2:	1c0a      	adds	r2, r1, #0
 80042a4:	801a      	strh	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
 80042a6:	e010      	b.n	80042ca <writeInt16+0x3c>
	{
		if (i >= MAX_ARG_SIZE)
 80042a8:	1cfb      	adds	r3, r7, #3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b23      	cmp	r3, #35	@ 0x23
 80042ae:	d901      	bls.n	80042b4 <writeInt16+0x26>
		{
			return 255;
 80042b0:	23ff      	movs	r3, #255	@ 0xff
 80042b2:	e025      	b.n	8004300 <writeInt16+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 80042b4:	1cfb      	adds	r3, r7, #3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	18d3      	adds	r3, r2, r3
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
		i++;
 80042c0:	1cfb      	adds	r3, r7, #3
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	1cfb      	adds	r3, r7, #3
 80042c6:	3201      	adds	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
	while ((i % 2) != 0)
 80042ca:	1cfb      	adds	r3, r7, #3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	4013      	ands	r3, r2
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e7      	bne.n	80042a8 <writeInt16+0x1a>
	}

	if (i + 2 > MAX_ARG_SIZE)
 80042d8:	1cfb      	adds	r3, r7, #3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b22      	cmp	r3, #34	@ 0x22
 80042de:	d901      	bls.n	80042e4 <writeInt16+0x56>
	{
		return 255;
 80042e0:	23ff      	movs	r3, #255	@ 0xff
 80042e2:	e00d      	b.n	8004300 <writeInt16+0x72>
	}

	((uint16_t*)buffer)[i/2] = value;
 80042e4:	1cfb      	adds	r3, r7, #3
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	003a      	movs	r2, r7
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 80042f8:	1cfb      	adds	r3, r7, #3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	3302      	adds	r3, #2
 80042fe:	b2db      	uxtb	r3, r3
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}

08004308 <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	230b      	movs	r3, #11
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	1c0a      	adds	r2, r1, #0
 8004318:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
 800431a:	e012      	b.n	8004342 <writeInt32+0x3a>
	{
		if (i >= MAX_ARG_SIZE)
 800431c:	230b      	movs	r3, #11
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b23      	cmp	r3, #35	@ 0x23
 8004324:	d901      	bls.n	800432a <writeInt32+0x22>
		{
			return 255;
 8004326:	23ff      	movs	r3, #255	@ 0xff
 8004328:	e027      	b.n	800437a <writeInt32+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 800432a:	210b      	movs	r1, #11
 800432c:	187b      	adds	r3, r7, r1
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
		i++;
 8004338:	187b      	adds	r3, r7, r1
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	187b      	adds	r3, r7, r1
 800433e:	3201      	adds	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
	while ((i % 4) != 0)
 8004342:	210b      	movs	r1, #11
 8004344:	187b      	adds	r3, r7, r1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2203      	movs	r2, #3
 800434a:	4013      	ands	r3, r2
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e4      	bne.n	800431c <writeInt32+0x14>
	}

	if (i + 4 > MAX_ARG_SIZE)
 8004352:	187b      	adds	r3, r7, r1
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b20      	cmp	r3, #32
 8004358:	d901      	bls.n	800435e <writeInt32+0x56>
	{
		return 255;
 800435a:	23ff      	movs	r3, #255	@ 0xff
 800435c:	e00d      	b.n	800437a <writeInt32+0x72>
	}

	((uint32_t*)buffer)[i/4] = value;
 800435e:	210b      	movs	r1, #11
 8004360:	187b      	adds	r3, r7, r1
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 8004372:	187b      	adds	r3, r7, r1
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	b2db      	uxtb	r3, r3
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 8004384:	b5b0      	push	{r4, r5, r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	001a      	movs	r2, r3
 8004392:	1cfb      	adds	r3, r7, #3
 8004394:	701a      	strb	r2, [r3, #0]
	uint16_t formatStrIndex = 0;
 8004396:	2316      	movs	r3, #22
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]
	uint8_t argCounter = 0;
 800439e:	2315      	movs	r3, #21
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
	uint8_t i = byteOffset;
 80043a6:	2314      	movs	r3, #20
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	1cfa      	adds	r2, r7, #3
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	701a      	strb	r2, [r3, #0]

	while (formatStr[formatStrIndex] != '\0')
 80043b0:	e16f      	b.n	8004692 <prvTraceUserEventFormat+0x30e>
	{
		if (formatStr[formatStrIndex] == '%')
 80043b2:	2116      	movs	r1, #22
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b25      	cmp	r3, #37	@ 0x25
 80043c0:	d000      	beq.n	80043c4 <prvTraceUserEventFormat+0x40>
 80043c2:	e155      	b.n	8004670 <prvTraceUserEventFormat+0x2ec>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	18d3      	adds	r3, r2, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b25      	cmp	r3, #37	@ 0x25
 80043d2:	d105      	bne.n	80043e0 <prvTraceUserEventFormat+0x5c>
			{
				formatStrIndex += 2;
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	187a      	adds	r2, r7, r1
 80043d8:	8812      	ldrh	r2, [r2, #0]
 80043da:	3202      	adds	r2, #2
 80043dc:	801a      	strh	r2, [r3, #0]
				continue;
 80043de:	e158      	b.n	8004692 <prvTraceUserEventFormat+0x30e>
			}

			/* We found a possible argument */
			argCounter++;
 80043e0:	2115      	movs	r1, #21
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	3201      	adds	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]

			formatStrIndex++;
 80043ec:	2116      	movs	r1, #22
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	881a      	ldrh	r2, [r3, #0]
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	3201      	adds	r2, #1
 80043f6:	801a      	strh	r2, [r3, #0]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80043f8:	e005      	b.n	8004406 <prvTraceUserEventFormat+0x82>
				formatStrIndex++;
 80043fa:	2116      	movs	r1, #22
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	187b      	adds	r3, r7, r1
 8004402:	3201      	adds	r2, #1
 8004404:	801a      	strh	r2, [r3, #0]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 8004406:	2116      	movs	r1, #22
 8004408:	187b      	adds	r3, r7, r1
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b2f      	cmp	r3, #47	@ 0x2f
 8004414:	d906      	bls.n	8004424 <prvTraceUserEventFormat+0xa0>
 8004416:	187b      	adds	r3, r7, r1
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	18d3      	adds	r3, r2, r3
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b39      	cmp	r3, #57	@ 0x39
 8004422:	d9ea      	bls.n	80043fa <prvTraceUserEventFormat+0x76>
 8004424:	2116      	movs	r1, #22
 8004426:	187b      	adds	r3, r7, r1
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b23      	cmp	r3, #35	@ 0x23
 8004432:	d0e2      	beq.n	80043fa <prvTraceUserEventFormat+0x76>
 8004434:	187b      	adds	r3, r7, r1
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004440:	d0db      	beq.n	80043fa <prvTraceUserEventFormat+0x76>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 8004442:	187b      	adds	r3, r7, r1
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	18d3      	adds	r3, r2, r3
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d100      	bne.n	8004452 <prvTraceUserEventFormat+0xce>
 8004450:	e129      	b.n	80046a6 <prvTraceUserEventFormat+0x322>
			{
				switch (formatStr[formatStrIndex])
 8004452:	187b      	adds	r3, r7, r1
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	3b58      	subs	r3, #88	@ 0x58
 800445e:	2b20      	cmp	r3, #32
 8004460:	d900      	bls.n	8004464 <prvTraceUserEventFormat+0xe0>
 8004462:	e0f3      	b.n	800464c <prvTraceUserEventFormat+0x2c8>
 8004464:	009a      	lsls	r2, r3, #2
 8004466:	4b96      	ldr	r3, [pc, #600]	@ (80046c0 <prvTraceUserEventFormat+0x33c>)
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	469f      	mov	pc, r3
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	60ba      	str	r2, [r7, #8]
 8004474:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004476:	2314      	movs	r3, #20
 8004478:	18fc      	adds	r4, r7, r3
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	7819      	ldrb	r1, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f7ff ff41 	bl	8004308 <writeInt32>
 8004486:	0003      	movs	r3, r0
 8004488:	7023      	strb	r3, [r4, #0]
						break;
 800448a:	e0e6      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	60ba      	str	r2, [r7, #8]
 8004492:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004494:	2314      	movs	r3, #20
 8004496:	18fc      	adds	r4, r7, r3
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	7819      	ldrb	r1, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff ff32 	bl	8004308 <writeInt32>
 80044a4:	0003      	movs	r3, r0
 80044a6:	7023      	strb	r3, [r4, #0]
						break;
 80044a8:	e0d7      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					case 's':
						{
							TraceStringHandle_t xString;
							xTraceStringRegister((char*)va_arg(vl, char*), &xString);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	60ba      	str	r2, [r7, #8]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	18ba      	adds	r2, r7, r2
 80044b6:	0011      	movs	r1, r2
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fa49 	bl	8004950 <xTraceStringRegister>
							
							i = writeInt16(buffer,
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	2314      	movs	r3, #20
 80044c4:	18fc      	adds	r4, r7, r3
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	7819      	ldrb	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff fede 	bl	800428e <writeInt16>
 80044d2:	0003      	movs	r3, r0
 80044d4:	7023      	strb	r3, [r4, #0]
								i,
								(uint16_t)xString);
						}
						break;
 80044d6:	e0c0      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	3307      	adds	r3, #7
 80044dc:	2207      	movs	r2, #7
 80044de:	4393      	bics	r3, r2
 80044e0:	001a      	movs	r2, r3
 80044e2:	3208      	adds	r2, #8
 80044e4:	60ba      	str	r2, [r7, #8]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
						i = writeInt32(	buffer,
 80044ea:	0010      	movs	r0, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	f7fb fe97 	bl	8000220 <__aeabi_d2uiz>
 80044f2:	0002      	movs	r2, r0
 80044f4:	2314      	movs	r3, #20
 80044f6:	18fc      	adds	r4, r7, r3
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	7819      	ldrb	r1, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f7ff ff02 	bl	8004308 <writeInt32>
 8004504:	0003      	movs	r3, r0
 8004506:	7023      	strb	r3, [r4, #0]
						break;
 8004508:	e0a7      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
#endif
					case 'l':
						formatStrIndex++;
 800450a:	2116      	movs	r1, #22
 800450c:	187b      	adds	r3, r7, r1
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	187b      	adds	r3, r7, r1
 8004512:	3201      	adds	r2, #1
 8004514:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004516:	187b      	adds	r3, r7, r1
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	18d3      	adds	r3, r2, r3
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b66      	cmp	r3, #102	@ 0x66
 8004522:	d12f      	bne.n	8004584 <prvTraceUserEventFormat+0x200>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3307      	adds	r3, #7
 8004528:	2207      	movs	r2, #7
 800452a:	4393      	bics	r3, r2
 800452c:	001a      	movs	r2, r3
 800452e:	3208      	adds	r2, #8
 8004530:	60ba      	str	r2, [r7, #8]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 8004536:	0010      	movs	r0, r2
 8004538:	0019      	movs	r1, r3
 800453a:	f7fb fe71 	bl	8000220 <__aeabi_d2uiz>
 800453e:	0002      	movs	r2, r0
 8004540:	2514      	movs	r5, #20
 8004542:	197c      	adds	r4, r7, r5
 8004544:	197b      	adds	r3, r7, r5
 8004546:	7819      	ldrb	r1, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff fedc 	bl	8004308 <writeInt32>
 8004550:	0003      	movs	r3, r0
 8004552:	7023      	strb	r3, [r4, #0]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3307      	adds	r3, #7
 8004558:	2207      	movs	r2, #7
 800455a:	4393      	bics	r3, r2
 800455c:	001a      	movs	r2, r3
 800455e:	3208      	adds	r2, #8
 8004560:	60ba      	str	r2, [r7, #8]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8004566:	0010      	movs	r0, r2
 8004568:	0019      	movs	r1, r3
 800456a:	f7fb fe59 	bl	8000220 <__aeabi_d2uiz>
 800456e:	0002      	movs	r2, r0
 8004570:	197c      	adds	r4, r7, r5
 8004572:	197b      	adds	r3, r7, r5
 8004574:	7819      	ldrb	r1, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff fec5 	bl	8004308 <writeInt32>
 800457e:	0003      	movs	r3, r0
 8004580:	7023      	strb	r3, [r4, #0]
								break;
 8004582:	e000      	b.n	8004586 <prvTraceUserEventFormat+0x202>
#endif
							default:
								break;
 8004584:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004586:	e068      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					case 'h':
						formatStrIndex++;
 8004588:	2116      	movs	r1, #22
 800458a:	187b      	adds	r3, r7, r1
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	187b      	adds	r3, r7, r1
 8004590:	3201      	adds	r2, #1
 8004592:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004594:	187b      	adds	r3, r7, r1
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	18d3      	adds	r3, r2, r3
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d002      	beq.n	80045a8 <prvTraceUserEventFormat+0x224>
 80045a2:	2b75      	cmp	r3, #117	@ 0x75
 80045a4:	d010      	beq.n	80045c8 <prvTraceUserEventFormat+0x244>
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 80045a6:	e01f      	b.n	80045e8 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	60ba      	str	r2, [r7, #8]
 80045ae:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	2314      	movs	r3, #20
 80045b4:	18fc      	adds	r4, r7, r3
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	7819      	ldrb	r1, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff fe66 	bl	800428e <writeInt16>
 80045c2:	0003      	movs	r3, r0
 80045c4:	7023      	strb	r3, [r4, #0]
								break;
 80045c6:	e00f      	b.n	80045e8 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	60ba      	str	r2, [r7, #8]
 80045ce:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	2314      	movs	r3, #20
 80045d4:	18fc      	adds	r4, r7, r3
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	7819      	ldrb	r1, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7ff fe56 	bl	800428e <writeInt16>
 80045e2:	0003      	movs	r3, r0
 80045e4:	7023      	strb	r3, [r4, #0]
								break;
 80045e6:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 80045e8:	e037      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					case 'b':
						formatStrIndex++;
 80045ea:	2116      	movs	r1, #22
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	3201      	adds	r2, #1
 80045f4:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b64      	cmp	r3, #100	@ 0x64
 8004602:	d002      	beq.n	800460a <prvTraceUserEventFormat+0x286>
 8004604:	2b75      	cmp	r3, #117	@ 0x75
 8004606:	d010      	beq.n	800462a <prvTraceUserEventFormat+0x2a6>
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8004608:	e01f      	b.n	800464a <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	60ba      	str	r2, [r7, #8]
 8004610:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8004612:	b2da      	uxtb	r2, r3
 8004614:	2314      	movs	r3, #20
 8004616:	18fc      	adds	r4, r7, r3
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	7819      	ldrb	r1, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0018      	movs	r0, r3
 8004620:	f7ff fe0e 	bl	8004240 <writeInt8>
 8004624:	0003      	movs	r3, r0
 8004626:	7023      	strb	r3, [r4, #0]
								break;
 8004628:	e00f      	b.n	800464a <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	60ba      	str	r2, [r7, #8]
 8004630:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8004632:	b2da      	uxtb	r2, r3
 8004634:	2314      	movs	r3, #20
 8004636:	18fc      	adds	r4, r7, r3
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	7819      	ldrb	r1, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f7ff fdfe 	bl	8004240 <writeInt8>
 8004644:	0003      	movs	r3, r0
 8004646:	7023      	strb	r3, [r4, #0]
								break;
 8004648:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 800464a:	e006      	b.n	800465a <prvTraceUserEventFormat+0x2d6>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 800464c:	2115      	movs	r1, #21
 800464e:	187b      	adds	r3, r7, r1
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	187b      	adds	r3, r7, r1
 8004654:	3a01      	subs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
						break;
 8004658:	46c0      	nop			@ (mov r8, r8)
				}

				if (argCounter > 15)
 800465a:	2315      	movs	r3, #21
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d905      	bls.n	8004670 <prvTraceUserEventFormat+0x2ec>
				{
					prvTraceError("xTracePrintF - Too many arguments, max 15 allowed!");
 8004664:	4b17      	ldr	r3, [pc, #92]	@ (80046c4 <prvTraceUserEventFormat+0x340>)
 8004666:	0018      	movs	r0, r3
 8004668:	f001 f8ba 	bl	80057e0 <prvTraceError>
					return 0;
 800466c:	2300      	movs	r3, #0
 800466e:	e022      	b.n	80046b6 <prvTraceUserEventFormat+0x332>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 8004670:	2116      	movs	r1, #22
 8004672:	187b      	adds	r3, r7, r1
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	187b      	adds	r3, r7, r1
 8004678:	3201      	adds	r2, #1
 800467a:	801a      	strh	r2, [r3, #0]
		if (i == 255)
 800467c:	2314      	movs	r3, #20
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2bff      	cmp	r3, #255	@ 0xff
 8004684:	d105      	bne.n	8004692 <prvTraceUserEventFormat+0x30e>
		{
			prvTraceError("xTracePrintF - Too large arguments, max 32 byte allowed!");
 8004686:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <prvTraceUserEventFormat+0x344>)
 8004688:	0018      	movs	r0, r3
 800468a:	f001 f8a9 	bl	80057e0 <prvTraceError>
			return 0;
 800468e:	2300      	movs	r3, #0
 8004690:	e011      	b.n	80046b6 <prvTraceUserEventFormat+0x332>
	while (formatStr[formatStrIndex] != '\0')
 8004692:	2316      	movs	r3, #22
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d000      	beq.n	80046a4 <prvTraceUserEventFormat+0x320>
 80046a2:	e686      	b.n	80043b2 <prvTraceUserEventFormat+0x2e>
 80046a4:	e000      	b.n	80046a8 <prvTraceUserEventFormat+0x324>
				break;
 80046a6:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return (uint8_t)(i+3)/4;
 80046a8:	2314      	movs	r3, #20
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	3303      	adds	r3, #3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	b2db      	uxtb	r3, r3
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bdb0      	pop	{r4, r5, r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	08007728 	.word	0x08007728
 80046c4:	0800712c 	.word	0x0800712c
 80046c8:	08007160 	.word	0x08007160

080046cc <xTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrintF(TraceStringHandle_t eventLabel, const char* formatStr, ...)
{
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
	va_list vl;

	va_start(vl, formatStr);
 80046d6:	2320      	movs	r3, #32
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	60fb      	str	r3, [r7, #12]
	xTraceVPrintF(eventLabel, formatStr, vl);
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f808 	bl	80046f8 <xTraceVPrintF>
	va_end(vl);

	return TRC_SUCCESS;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b005      	add	sp, #20
 80046f0:	bc80      	pop	{r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	b003      	add	sp, #12
 80046f6:	4718      	bx	r3

080046f8 <xTraceVPrintF>:
 * See xTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceVPrintF(TraceStringHandle_t eventLabel, const char* formatStr, va_list vl)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b094      	sub	sp, #80	@ 0x50
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004704:	f3ef 8310 	mrs	r3, PRIMASK
 8004708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800470a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != (void*)0, "vTraceVPrintF: formatStr == NULL", TRC_FAIL);

	trcCRITICAL_SECTION_BEGIN();
 800470c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470e:	2301      	movs	r3, #1
 8004710:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			@ (mov r8, r8)
 800471a:	4b5e      	ldr	r3, [pc, #376]	@ (8004894 <xTraceVPrintF+0x19c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	4b5c      	ldr	r3, [pc, #368]	@ (8004894 <xTraceVPrintF+0x19c>)
 8004722:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004724:	4b5c      	ldr	r3, [pc, #368]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	2b00      	cmp	r3, #0
 800472c:	d100      	bne.n	8004730 <xTraceVPrintF+0x38>
 800472e:	e0a0      	b.n	8004872 <xTraceVPrintF+0x17a>
 8004730:	4b5a      	ldr	r3, [pc, #360]	@ (800489c <xTraceVPrintF+0x1a4>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d100      	bne.n	800473a <xTraceVPrintF+0x42>
 8004738:	e09b      	b.n	8004872 <xTraceVPrintF+0x17a>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 800473a:	2114      	movs	r1, #20
 800473c:	187b      	adds	r3, r7, r1
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48

		ue1->type = (uint8_t)EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 8004740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004742:	22aa      	movs	r2, #170	@ 0xaa
 8004744:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 8004746:	187a      	adds	r2, r7, r1
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	68b8      	ldr	r0, [r7, #8]
 800474c:	2304      	movs	r3, #4
 800474e:	f7ff fe19 	bl	8004384 <prvTraceUserEventFormat>
 8004752:	0003      	movs	r3, r0
 8004754:	647b      	str	r3, [r7, #68]	@ 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f000 ffed 	bl	800573c <prvTraceOpenSymbol>
 8004762:	0003      	movs	r3, r0
 8004764:	b29a      	uxth	r2, r3
 8004766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004768:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 800476a:	20ff      	movs	r0, #255	@ 0xff
 800476c:	f001 f92c 	bl	80059c8 <prvTraceGetDTS>
 8004770:	0003      	movs	r3, r0
 8004772:	b2da      	uxtb	r2, r3
 8004774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004776:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 8004778:	4b47      	ldr	r3, [pc, #284]	@ (8004898 <xTraceVPrintF+0x1a0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d077      	beq.n	8004872 <xTraceVPrintF+0x17a>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 8004782:	4b45      	ldr	r3, [pc, #276]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478a:	18d2      	adds	r2, r2, r3
 800478c:	4b42      	ldr	r3, [pc, #264]	@ (8004898 <xTraceVPrintF+0x1a0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d91f      	bls.n	80047d6 <xTraceVPrintF+0xde>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004796:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b3f      	ldr	r3, [pc, #252]	@ (8004898 <xTraceVPrintF+0x1a0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	2182      	movs	r1, #130	@ 0x82
 80047a4:	00c9      	lsls	r1, r1, #3
 80047a6:	468c      	mov	ip, r1
 80047a8:	4463      	add	r3, ip
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 80047ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	4b38      	ldr	r3, [pc, #224]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80047be:	001a      	movs	r2, r3
 80047c0:	2100      	movs	r1, #0
 80047c2:	f002 fa8d 	bl	8006ce0 <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 80047c6:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 80047ce:	4b32      	ldr	r3, [pc, #200]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 80047d6:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d045      	beq.n	800486c <xTraceVPrintF+0x174>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 80047e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	0018      	movs	r0, r3
 80047e6:	f001 f829 	bl	800583c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80047ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <xTraceVPrintF+0x1a0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	2182      	movs	r1, #130	@ 0x82
 80047f8:	00c9      	lsls	r1, r1, #3
 80047fa:	468c      	mov	ip, r1
 80047fc:	4463      	add	r3, ip
 80047fe:	18d3      	adds	r3, r2, r3
 8004800:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 8004802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004804:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004806:	2314      	movs	r3, #20
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	0019      	movs	r1, r3
 800480c:	f002 faa6 	bl	8006d5c <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8004810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004812:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8004814:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b1f      	ldr	r3, [pc, #124]	@ (8004898 <xTraceVPrintF+0x1a0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8004820:	3969      	subs	r1, #105	@ 0x69
 8004822:	b2c8      	uxtb	r0, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8004824:	491e      	ldr	r1, [pc, #120]	@ (80048a0 <xTraceVPrintF+0x1a8>)
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	185b      	adds	r3, r3, r1
 800482a:	1c02      	adds	r2, r0, #0
 800482c:	701a      	strb	r2, [r3, #0]

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483a:	188a      	adds	r2, r1, r2
 800483c:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 800483e:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	4b14      	ldr	r3, [pc, #80]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800484a:	188a      	adds	r2, r1, r2
 800484c:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800484e:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	23fa      	movs	r3, #250	@ 0xfa
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d307      	bcc.n	800486c <xTraceVPrintF+0x174>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 800485c:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <xTraceVPrintF+0x1a0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 8004864:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <xTraceVPrintF+0x1a0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800486c:	2001      	movs	r0, #1
 800486e:	f000 ffe5 	bl	800583c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <xTraceVPrintF+0x19c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	1e5a      	subs	r2, r3, #1
 8004878:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <xTraceVPrintF+0x19c>)
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	f383 8810 	msr	PRIMASK, r3
}
 8004886:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif

	return TRC_SUCCESS;
 8004888:	2300      	movs	r3, #0
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b014      	add	sp, #80	@ 0x50
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	20001db4 	.word	0x20001db4
 8004898:	200031f8 	.word	0x200031f8
 800489c:	20001dbc 	.word	0x20001dbc
 80048a0:	00000414 	.word	0x00000414

080048a4 <xTracePrint>:
 * Generates a User Event with a text label. The label is created/looked up
 * in the symbol table using xTraceStringRegister.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrint(TraceStringHandle_t chn, const char* str)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b089      	sub	sp, #36	@ 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8310 	mrs	r3, PRIMASK
 80048b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80048b4:	68fb      	ldr	r3, [r7, #12]
#if (TRC_CFG_USE_SEPARATE_USER_EVENT_BUFFER == 0)
	UserEvent* ue;
	uint8_t dts1;
	TRACE_ALLOC_CRITICAL_SECTION();

	trcCRITICAL_SECTION_BEGIN();
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004944 <xTracePrint+0xa0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <xTracePrint+0xa0>)
 80048cc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <xTracePrint+0xa4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d025      	beq.n	8004924 <xTracePrint+0x80>
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <xTracePrint+0xa8>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d021      	beq.n	8004924 <xTracePrint+0x80>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80048e0:	20ff      	movs	r0, #255	@ 0xff
 80048e2:	f001 f871 	bl	80059c8 <prvTraceGetDTS>
 80048e6:	0003      	movs	r3, r0
 80048e8:	001a      	movs	r2, r3
 80048ea:	241b      	movs	r4, #27
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	701a      	strb	r2, [r3, #0]
		ue = (UserEvent*) prvTraceNextFreeEventBufferSlot();
 80048f0:	f000 fd4e 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 80048f4:	0003      	movs	r3, r0
 80048f6:	617b      	str	r3, [r7, #20]
		if (ue != (void*)0)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <xTracePrint+0x80>
		{
			ue->dts = dts1;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	193a      	adds	r2, r7, r4
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	705a      	strb	r2, [r3, #1]
			ue->type = (uint8_t)USER_EVENT;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2298      	movs	r2, #152	@ 0x98
 800490a:	701a      	strb	r2, [r3, #0]
			ue->payload = prvTraceOpenSymbol(str, chn);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f000 ff12 	bl	800573c <prvTraceOpenSymbol>
 8004918:	0003      	movs	r3, r0
 800491a:	b29a      	uxth	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004920:	f001 f828 	bl	8005974 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <xTracePrint+0xa0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <xTracePrint+0xa0>)
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f383 8810 	msr	PRIMASK, r3
}
 8004938:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper2(channel, tempDataBuffer, noOfSlots);
	}
#endif

	return TRC_SUCCESS;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b009      	add	sp, #36	@ 0x24
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	20001db4 	.word	0x20001db4
 8004948:	200031f8 	.word	0x200031f8
 800494c:	20001dbc 	.word	0x20001dbc

08004950 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2100      	movs	r1, #0
 800495e:	0018      	movs	r0, r3
 8004960:	f000 feec 	bl	800573c <prvTraceOpenSymbol>
 8004964:	0002      	movs	r2, r0
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800496a:	2300      	movs	r3, #0
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8004980:	230c      	movs	r3, #12
 8004982:	18fa      	adds	r2, r7, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0011      	movs	r1, r2
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff ffe1 	bl	8004950 <xTraceStringRegister>

	return trcStr;
 800498e:	68fb      	ldr	r3, [r7, #12]
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bd80      	pop	{r7, pc}

08004998 <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 800499c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b9c <xTraceInitialize+0x204>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e0f6      	b.n	8004b96 <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80049a8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ba0 <xTraceInitialize+0x208>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	4252      	negs	r2, r2
 80049ae:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80049b0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba4 <xTraceInitialize+0x20c>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80049b6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba8 <xTraceInitialize+0x210>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80049bc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bac <xTraceInitialize+0x214>)
 80049be:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb0 <xTraceInitialize+0x218>)
 80049c0:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80049c2:	4b7c      	ldr	r3, [pc, #496]	@ (8004bb4 <xTraceInitialize+0x21c>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b7c      	ldr	r3, [pc, #496]	@ (8004bb8 <xTraceInitialize+0x220>)
 80049c8:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 80049ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004bbc <xTraceInitialize+0x224>)
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff f9cc 	bl	8003d6a <xTraceKernelPortInitialize>
 80049d2:	0003      	movs	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0dc      	b.n	8004b96 <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80049dc:	4b73      	ldr	r3, [pc, #460]	@ (8004bac <xTraceInitialize+0x214>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a77      	ldr	r2, [pc, #476]	@ (8004bc0 <xTraceInitialize+0x228>)
 80049e2:	2100      	movs	r1, #0
 80049e4:	0018      	movs	r0, r3
 80049e6:	f002 f97b 	bl	8006ce0 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 80049ea:	4b70      	ldr	r3, [pc, #448]	@ (8004bac <xTraceInitialize+0x214>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	@ (8004bc4 <xTraceInitialize+0x22c>)
 80049f0:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 80049f2:	4b6e      	ldr	r3, [pc, #440]	@ (8004bac <xTraceInitialize+0x214>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2207      	movs	r2, #7
 80049f8:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80049fa:	4b6c      	ldr	r3, [pc, #432]	@ (8004bac <xTraceInitialize+0x214>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8004a02:	4b6a      	ldr	r3, [pc, #424]	@ (8004bac <xTraceInitialize+0x214>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6e      	ldr	r2, [pc, #440]	@ (8004bc0 <xTraceInitialize+0x228>)
 8004a08:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8004a0a:	4b68      	ldr	r3, [pc, #416]	@ (8004bac <xTraceInitialize+0x214>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	22fa      	movs	r2, #250	@ 0xfa
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8004a14:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <xTraceInitialize+0x214>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a6b      	ldr	r2, [pc, #428]	@ (8004bc8 <xTraceInitialize+0x230>)
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8004a1c:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <xTraceInitialize+0x214>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2200      	movs	r2, #0
 8004a22:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8004a24:	4b61      	ldr	r3, [pc, #388]	@ (8004bac <xTraceInitialize+0x214>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8004a2c:	f7ff f9ac 	bl	8003d88 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8004a30:	4b5e      	ldr	r3, [pc, #376]	@ (8004bac <xTraceInitialize+0x214>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2398      	movs	r3, #152	@ 0x98
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4964      	ldr	r1, [pc, #400]	@ (8004bcc <xTraceInitialize+0x234>)
 8004a3a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8004a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bac <xTraceInitialize+0x214>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	2399      	movs	r3, #153	@ 0x99
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	21c8      	movs	r1, #200	@ 0xc8
 8004a46:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8004a48:	4b58      	ldr	r3, [pc, #352]	@ (8004bac <xTraceInitialize+0x214>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	239a      	movs	r3, #154	@ 0x9a
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	2101      	movs	r1, #1
 8004a52:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8004a54:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <xTraceInitialize+0x214>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	23ef      	movs	r3, #239	@ 0xef
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	495c      	ldr	r1, [pc, #368]	@ (8004bd0 <xTraceInitialize+0x238>)
 8004a5e:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8004a60:	4b52      	ldr	r3, [pc, #328]	@ (8004bac <xTraceInitialize+0x214>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	22f0      	movs	r2, #240	@ 0xf0
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	4694      	mov	ip, r2
 8004a6a:	4463      	add	r3, ip
 8004a6c:	4959      	ldr	r1, [pc, #356]	@ (8004bd4 <xTraceInitialize+0x23c>)
 8004a6e:	2250      	movs	r2, #80	@ 0x50
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 fdd5 	bl	8005620 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8004a76:	4b4d      	ldr	r3, [pc, #308]	@ (8004bac <xTraceInitialize+0x214>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	2382      	movs	r3, #130	@ 0x82
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4956      	ldr	r1, [pc, #344]	@ (8004bd8 <xTraceInitialize+0x240>)
 8004a80:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8004a82:	4b4a      	ldr	r3, [pc, #296]	@ (8004bac <xTraceInitialize+0x214>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a55      	ldr	r2, [pc, #340]	@ (8004bdc <xTraceInitialize+0x244>)
 8004a88:	210a      	movs	r1, #10
 8004a8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8004a8c:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <xTraceInitialize+0x214>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a53      	ldr	r2, [pc, #332]	@ (8004be0 <xTraceInitialize+0x248>)
 8004a92:	210b      	movs	r1, #11
 8004a94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 8004a96:	4b45      	ldr	r3, [pc, #276]	@ (8004bac <xTraceInitialize+0x214>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a52      	ldr	r2, [pc, #328]	@ (8004be4 <xTraceInitialize+0x24c>)
 8004a9c:	210c      	movs	r1, #12
 8004a9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8004aa0:	4b42      	ldr	r3, [pc, #264]	@ (8004bac <xTraceInitialize+0x214>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a50      	ldr	r2, [pc, #320]	@ (8004be8 <xTraceInitialize+0x250>)
 8004aa6:	210d      	movs	r1, #13
 8004aa8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 8004aaa:	4b40      	ldr	r3, [pc, #256]	@ (8004bac <xTraceInitialize+0x214>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a4f      	ldr	r2, [pc, #316]	@ (8004bec <xTraceInitialize+0x254>)
 8004ab0:	2171      	movs	r1, #113	@ 0x71
 8004ab2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8004bac <xTraceInitialize+0x214>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8004bf0 <xTraceInitialize+0x258>)
 8004aba:	2172      	movs	r1, #114	@ 0x72
 8004abc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8004abe:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <xTraceInitialize+0x214>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf4 <xTraceInitialize+0x25c>)
 8004ac4:	2173      	movs	r1, #115	@ 0x73
 8004ac6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8004ac8:	4b38      	ldr	r3, [pc, #224]	@ (8004bac <xTraceInitialize+0x214>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf8 <xTraceInitialize+0x260>)
 8004ace:	2174      	movs	r1, #116	@ 0x74
 8004ad0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <xTraceInitialize+0x214>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	239e      	movs	r3, #158	@ 0x9e
 8004ad8:	015b      	lsls	r3, r3, #5
 8004ada:	21f1      	movs	r1, #241	@ 0xf1
 8004adc:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 8004ade:	4b33      	ldr	r3, [pc, #204]	@ (8004bac <xTraceInitialize+0x214>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	@ (8004bfc <xTraceInitialize+0x264>)
 8004ae4:	21f2      	movs	r1, #242	@ 0xf2
 8004ae6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 8004ae8:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <xTraceInitialize+0x214>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a44      	ldr	r2, [pc, #272]	@ (8004c00 <xTraceInitialize+0x268>)
 8004aee:	21f3      	movs	r1, #243	@ 0xf3
 8004af0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8004af2:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <xTraceInitialize+0x214>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a43      	ldr	r2, [pc, #268]	@ (8004c04 <xTraceInitialize+0x26c>)
 8004af8:	21f4      	movs	r1, #244	@ 0xf4
 8004afa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8004afc:	f7ff fa0e 	bl	8003f1c <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8004b00:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <xTraceInitialize+0x214>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	22f4      	movs	r2, #244	@ 0xf4
 8004b06:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8004b08:	4b28      	ldr	r3, [pc, #160]	@ (8004bac <xTraceInitialize+0x214>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	22f3      	movs	r2, #243	@ 0xf3
 8004b0e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8004b10:	4b26      	ldr	r3, [pc, #152]	@ (8004bac <xTraceInitialize+0x214>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	22f2      	movs	r2, #242	@ 0xf2
 8004b16:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8004b18:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <xTraceInitialize+0x214>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	22f1      	movs	r2, #241	@ 0xf1
 8004b1e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8004b20:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <xTraceInitialize+0x214>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2274      	movs	r2, #116	@ 0x74
 8004b26:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8004b28:	4b20      	ldr	r3, [pc, #128]	@ (8004bac <xTraceInitialize+0x214>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2273      	movs	r2, #115	@ 0x73
 8004b2e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8004b30:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <xTraceInitialize+0x214>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2272      	movs	r2, #114	@ 0x72
 8004b36:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8004b38:	4b1c      	ldr	r3, [pc, #112]	@ (8004bac <xTraceInitialize+0x214>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2271      	movs	r2, #113	@ 0x71
 8004b3e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8004b40:	4b1a      	ldr	r3, [pc, #104]	@ (8004bac <xTraceInitialize+0x214>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2204      	movs	r2, #4
 8004b46:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8004b48:	4b18      	ldr	r3, [pc, #96]	@ (8004bac <xTraceInitialize+0x214>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8004b50:	4b16      	ldr	r3, [pc, #88]	@ (8004bac <xTraceInitialize+0x214>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2202      	movs	r2, #2
 8004b56:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8004b58:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <xTraceInitialize+0x214>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8004b60:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <xTraceInitialize+0x210>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d012      	beq.n	8004b8e <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004b68:	4b10      	ldr	r3, [pc, #64]	@ (8004bac <xTraceInitialize+0x214>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	22f0      	movs	r2, #240	@ 0xf0
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	1898      	adds	r0, r3, r2
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <xTraceInitialize+0x210>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2250      	movs	r2, #80	@ 0x50
 8004b78:	0019      	movs	r1, r3
 8004b7a:	f000 fd51 	bl	8005620 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <xTraceInitialize+0x214>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	23ee      	movs	r3, #238	@ 0xee
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	2101      	movs	r1, #1
 8004b88:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 8004b8a:	f7ff fb33 	bl	80041f4 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8004b8e:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <xTraceInitialize+0x204>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	200031fc 	.word	0x200031fc
 8004ba0:	20001dc8 	.word	0x20001dc8
 8004ba4:	20001dca 	.word	0x20001dca
 8004ba8:	20001e30 	.word	0x20001e30
 8004bac:	200031f8 	.word	0x200031f8
 8004bb0:	20001e34 	.word	0x20001e34
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20001dc4 	.word	0x20001dc4
 8004bbc:	20001da0 	.word	0x20001da0
 8004bc0:	000013c4 	.word	0x000013c4
 8004bc4:	00001aa1 	.word	0x00001aa1
 8004bc8:	f0f0f0f0 	.word	0xf0f0f0f0
 8004bcc:	f1f1f1f1 	.word	0xf1f1f1f1
 8004bd0:	f2f2f2f2 	.word	0xf2f2f2f2
 8004bd4:	0800719c 	.word	0x0800719c
 8004bd8:	f3f3f3f3 	.word	0xf3f3f3f3
 8004bdc:	000013b8 	.word	0x000013b8
 8004be0:	000013b9 	.word	0x000013b9
 8004be4:	000013ba 	.word	0x000013ba
 8004be8:	000013bb 	.word	0x000013bb
 8004bec:	000013bc 	.word	0x000013bc
 8004bf0:	000013bd 	.word	0x000013bd
 8004bf4:	000013be 	.word	0x000013be
 8004bf8:	000013bf 	.word	0x000013bf
 8004bfc:	000013c1 	.word	0x000013c1
 8004c00:	000013c2 	.word	0x000013c2
 8004c04:	000013c3 	.word	0x000013c3

08004c08 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	0002      	movs	r2, r0
 8004c10:	1dfb      	adds	r3, r7, #7
 8004c12:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d04d      	beq.n	8004cb8 <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8004c1c:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <prvTraceStoreTaskReady+0xbc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d04b      	beq.n	8004cbc <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8004c24:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <prvTraceStoreTaskReady+0xc0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8004c2c:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <prvTraceStoreTaskReady+0xc4>)
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 fdd6 	bl	80057e0 <prvTraceError>
		return;
 8004c34:	e043      	b.n	8004cbe <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c36:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	2301      	movs	r3, #1
 8004c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <prvTraceStoreTaskReady+0xc0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <prvTraceStoreTaskReady+0xc0>)
 8004c54:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8004c56:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd0 <prvTraceStoreTaskReady+0xc8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004c60:	251a      	movs	r5, #26
 8004c62:	197c      	adds	r4, r7, r5
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <prvTraceStoreTaskReady+0xcc>)
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 feae 	bl	80059c8 <prvTraceGetDTS>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8004c70:	2419      	movs	r4, #25
 8004c72:	193b      	adds	r3, r7, r4
 8004c74:	1dfa      	adds	r2, r7, #7
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8004c7a:	f000 fb89 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	197a      	adds	r2, r7, r5
 8004c92:	8812      	ldrh	r2, [r2, #0]
 8004c94:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	193a      	adds	r2, r7, r4
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004c9e:	f000 fe69 	bl	8005974 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <prvTraceStoreTaskReady+0xc0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1e5a      	subs	r2, r3, #1
 8004ca8:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <prvTraceStoreTaskReady+0xc0>)
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	e002      	b.n	8004cbe <prvTraceStoreTaskReady+0xb6>
		return;
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	e000      	b.n	8004cbe <prvTraceStoreTaskReady+0xb6>
		return;
 8004cbc:	46c0      	nop			@ (mov r8, r8)
}
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b008      	add	sp, #32
 8004cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc4:	20000010 	.word	0x20000010
 8004cc8:	20001db4 	.word	0x20001db4
 8004ccc:	080071b0 	.word	0x080071b0
 8004cd0:	200031f8 	.word	0x200031f8
 8004cd4:	0000ffff 	.word	0x0000ffff

08004cd8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8004cd8:	b5b0      	push	{r4, r5, r7, lr}
 8004cda:	b08e      	sub	sp, #56	@ 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8004ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d100      	bne.n	8004cee <vTraceStoreMemMangEvent+0x16>
 8004cec:	e090      	b.n	8004e10 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da03      	bge.n	8004cfc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	e001      	b.n	8004d00 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d06:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <vTraceStoreMemMangEvent+0x144>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e1c <vTraceStoreMemMangEvent+0x144>)
 8004d1e:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d015      	beq.n	8004d52 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8004d26:	4b3c      	ldr	r3, [pc, #240]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	188a      	adds	r2, r1, r2
 8004d34:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8004d36:	4b38      	ldr	r3, [pc, #224]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d3c:	4b36      	ldr	r3, [pc, #216]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d905      	bls.n	8004d52 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8004d46:	4b34      	ldr	r3, [pc, #208]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b33      	ldr	r3, [pc, #204]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8004d52:	4b31      	ldr	r3, [pc, #196]	@ (8004e18 <vTraceStoreMemMangEvent+0x140>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d04e      	beq.n	8004dfa <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004d5c:	20ff      	movs	r0, #255	@ 0xff
 8004d5e:	f000 fe33 	bl	80059c8 <prvTraceGetDTS>
 8004d62:	0003      	movs	r3, r0
 8004d64:	001a      	movs	r2, r3
 8004d66:	242f      	movs	r4, #47	@ 0x2f
 8004d68:	193b      	adds	r3, r7, r4
 8004d6a:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e20 <vTraceStoreMemMangEvent+0x148>)
 8004d70:	0019      	movs	r1, r3
 8004d72:	0010      	movs	r0, r2
 8004d74:	f000 f92c 	bl	8004fd0 <prvTraceGetParam>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	252c      	movs	r5, #44	@ 0x2c
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8004d80:	f000 fb06 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004d84:	0003      	movs	r3, r0
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d035      	beq.n	8004dfa <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	193a      	adds	r2, r7, r4
 8004d92:	7812      	ldrb	r2, [r2, #0]
 8004d94:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	197a      	adds	r2, r7, r5
 8004da0:	8812      	ldrh	r2, [r2, #0]
 8004da2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004da4:	f000 fde6 	bl	8005974 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a1d      	ldr	r2, [pc, #116]	@ (8004e20 <vTraceStoreMemMangEvent+0x148>)
 8004dac:	0019      	movs	r1, r3
 8004dae:	0010      	movs	r0, r2
 8004db0:	f000 f90e 	bl	8004fd0 <prvTraceGetParam>
 8004db4:	0002      	movs	r2, r0
 8004db6:	2426      	movs	r4, #38	@ 0x26
 8004db8:	193b      	adds	r3, r7, r4
 8004dba:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8004dbc:	2525      	movs	r5, #37	@ 0x25
 8004dbe:	197b      	adds	r3, r7, r5
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8004dc4:	f000 fae4 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	193a      	adds	r2, r7, r4
 8004dd6:	8812      	ldrh	r2, [r2, #0]
 8004dd8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	197a      	adds	r2, r7, r5
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8004df6:	f000 fdbd 	bl	8005974 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <vTraceStoreMemMangEvent+0x144>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <vTraceStoreMemMangEvent+0x144>)
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	e000      	b.n	8004e12 <vTraceStoreMemMangEvent+0x13a>
		return;
 8004e10:	46c0      	nop			@ (mov r8, r8)
}
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b00e      	add	sp, #56	@ 0x38
 8004e16:	bdb0      	pop	{r4, r5, r7, pc}
 8004e18:	200031f8 	.word	0x200031f8
 8004e1c:	20001db4 	.word	0x20001db4
 8004e20:	0000ffff 	.word	0x0000ffff

08004e24 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	230b      	movs	r3, #11
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	1c0a      	adds	r2, r1, #0
 8004e34:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8004e36:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <prvTraceStoreKernelCall+0xb8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8004e3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <prvTraceStoreKernelCall+0xbc>)
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 fccd 	bl	80057e0 <prvTraceError>
		return;
 8004e46:	e045      	b.n	8004ed4 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 8004e48:	4b26      	ldr	r3, [pc, #152]	@ (8004ee4 <prvTraceStoreKernelCall+0xc0>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d040      	beq.n	8004ed2 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e50:	f3ef 8310 	mrs	r3, PRIMASK
 8004e54:	617b      	str	r3, [r7, #20]
  return(result);
 8004e56:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <prvTraceStoreKernelCall+0xb8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <prvTraceStoreKernelCall+0xb8>)
 8004e6e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <prvTraceStoreKernelCall+0xc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004e7a:	2522      	movs	r5, #34	@ 0x22
 8004e7c:	197c      	adds	r4, r7, r5
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <prvTraceStoreKernelCall+0xc8>)
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 fda1 	bl	80059c8 <prvTraceGetDTS>
 8004e86:	0003      	movs	r3, r0
 8004e88:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004e8a:	2421      	movs	r4, #33	@ 0x21
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8004e92:	f000 fa7d 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004e96:	0003      	movs	r3, r0
 8004e98:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	197a      	adds	r2, r7, r5
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	193a      	adds	r2, r7, r4
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004eb8:	f000 fd5c 	bl	8005974 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <prvTraceStoreKernelCall+0xb8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1e5a      	subs	r2, r3, #1
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <prvTraceStoreKernelCall+0xb8>)
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f383 8810 	msr	PRIMASK, r3
}
 8004ed0:	e000      	b.n	8004ed4 <prvTraceStoreKernelCall+0xb0>
		return;
 8004ed2:	46c0      	nop			@ (mov r8, r8)
}
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b00a      	add	sp, #40	@ 0x28
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	20001db4 	.word	0x20001db4
 8004ee0:	080071e8 	.word	0x080071e8
 8004ee4:	20001dbc 	.word	0x20001dbc
 8004ee8:	200031f8 	.word	0x200031f8
 8004eec:	0000ffff 	.word	0x0000ffff

08004ef0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b08b      	sub	sp, #44	@ 0x2c
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	230b      	movs	r3, #11
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	1c0a      	adds	r2, r1, #0
 8004f02:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8004f04:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8004f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc4 <prvTraceStoreKernelCallWithParam+0xd4>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f000 fc66 	bl	80057e0 <prvTraceError>
		return;
 8004f14:	e051      	b.n	8004fba <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f16:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f20:	2301      	movs	r3, #1
 8004f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8004f34:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004f36:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <prvTraceStoreKernelCallWithParam+0xd8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d031      	beq.n	8004fa4 <prvTraceStoreKernelCallWithParam+0xb4>
 8004f40:	4b22      	ldr	r3, [pc, #136]	@ (8004fcc <prvTraceStoreKernelCallWithParam+0xdc>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02d      	beq.n	8004fa4 <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8004f48:	20ff      	movs	r0, #255	@ 0xff
 8004f4a:	f000 fd3d 	bl	80059c8 <prvTraceGetDTS>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	001a      	movs	r2, r3
 8004f52:	2423      	movs	r4, #35	@ 0x23
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	20ff      	movs	r0, #255	@ 0xff
 8004f5e:	f000 f837 	bl	8004fd0 <prvTraceGetParam>
 8004f62:	0002      	movs	r2, r0
 8004f64:	2522      	movs	r5, #34	@ 0x22
 8004f66:	197b      	adds	r3, r7, r5
 8004f68:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004f6a:	2621      	movs	r6, #33	@ 0x21
 8004f6c:	19bb      	adds	r3, r7, r6
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8004f72:	f000 fa0d 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d011      	beq.n	8004fa4 <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	193a      	adds	r2, r7, r4
 8004f84:	7812      	ldrb	r2, [r2, #0]
 8004f86:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	19ba      	adds	r2, r7, r6
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	197a      	adds	r2, r7, r5
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004fa0:	f000 fce8 	bl	8005974 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004fa4:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f383 8810 	msr	PRIMASK, r3
}
 8004fb8:	46c0      	nop			@ (mov r8, r8)
}
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b00b      	add	sp, #44	@ 0x2c
 8004fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc0:	20001db4 	.word	0x20001db4
 8004fc4:	08007220 	.word	0x08007220
 8004fc8:	200031f8 	.word	0x200031f8
 8004fcc:	20001dbc 	.word	0x20001dbc

08004fd0 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d801      	bhi.n	8004fe6 <prvTraceGetParam+0x16>
	{
		return param;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	e01e      	b.n	8005024 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8004fe6:	f000 f9d3 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8004fea:	0003      	movs	r3, r0
 8004fec:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d014      	beq.n	800501e <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4013      	ands	r3, r2
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	43db      	mvns	r3, r3
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4013      	ands	r3, r2
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800501a:	f000 fcab 	bl	8005974 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4013      	ands	r3, r2
	}
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}

0800502c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800502c:	b5b0      	push	{r4, r5, r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8005036:	2326      	movs	r3, #38	@ 0x26
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	2200      	movs	r2, #0
 800503c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 800503e:	4b2b      	ldr	r3, [pc, #172]	@ (80050ec <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8005048:	0018      	movs	r0, r3
 800504a:	f000 fbc9 	bl	80057e0 <prvTraceError>
		return;
 800504e:	e04a      	b.n	80050e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005050:	f3ef 8310 	mrs	r3, PRIMASK
 8005054:	613b      	str	r3, [r7, #16]
  return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f383 8810 	msr	PRIMASK, r3
}
 8005064:	46c0      	nop			@ (mov r8, r8)
 8005066:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	4b1f      	ldr	r3, [pc, #124]	@ (80050ec <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 800506e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005070:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02a      	beq.n	80050d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 800507a:	4b1f      	ldr	r3, [pc, #124]	@ (80050f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d026      	beq.n	80050d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8005082:	20ff      	movs	r0, #255	@ 0xff
 8005084:	f000 fca0 	bl	80059c8 <prvTraceGetDTS>
 8005088:	0003      	movs	r3, r0
 800508a:	001a      	movs	r2, r3
 800508c:	241f      	movs	r4, #31
 800508e:	193b      	adds	r3, r7, r4
 8005090:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8005096:	0019      	movs	r1, r3
 8005098:	0010      	movs	r0, r2
 800509a:	f7ff ff99 	bl	8004fd0 <prvTraceGetParam>
 800509e:	0002      	movs	r2, r0
 80050a0:	2526      	movs	r5, #38	@ 0x26
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 80050a6:	f000 f973 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 80050aa:	0003      	movs	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	193a      	adds	r2, r7, r4
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	197a      	adds	r2, r7, r5
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80050cc:	f000 fc52 	bl	8005974 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80050d0:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
}
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b00a      	add	sp, #40	@ 0x28
 80050ea:	bdb0      	pop	{r4, r5, r7, pc}
 80050ec:	20001db4 	.word	0x20001db4
 80050f0:	08007258 	.word	0x08007258
 80050f4:	200031f8 	.word	0x200031f8
 80050f8:	20001dbc 	.word	0x20001dbc
 80050fc:	0000ffff 	.word	0x0000ffff

08005100 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b089      	sub	sp, #36	@ 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	0002      	movs	r2, r0
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510c:	f3ef 8310 	mrs	r3, PRIMASK
 8005110:	60fb      	str	r3, [r7, #12]
  return(result);
 8005112:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	2301      	movs	r3, #1
 8005118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f383 8810 	msr	PRIMASK, r3
}
 8005120:	46c0      	nop			@ (mov r8, r8)
 8005122:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <prvTraceStoreTaskswitch+0xd8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <prvTraceStoreTaskswitch+0xd8>)
 800512a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800512c:	4b2b      	ldr	r3, [pc, #172]	@ (80051dc <prvTraceStoreTaskswitch+0xdc>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	1dfa      	adds	r2, r7, #7
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d03f      	beq.n	80051b8 <prvTraceStoreTaskswitch+0xb8>
 8005138:	4b29      	ldr	r3, [pc, #164]	@ (80051e0 <prvTraceStoreTaskswitch+0xe0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	2b00      	cmp	r3, #0
 8005140:	d03a      	beq.n	80051b8 <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005142:	231a      	movs	r3, #26
 8005144:	18fc      	adds	r4, r7, r3
 8005146:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <prvTraceStoreTaskswitch+0xe4>)
 8005148:	0018      	movs	r0, r3
 800514a:	f000 fc3d 	bl	80059c8 <prvTraceGetDTS>
 800514e:	0003      	movs	r3, r0
 8005150:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8005152:	4b22      	ldr	r3, [pc, #136]	@ (80051dc <prvTraceStoreTaskswitch+0xdc>)
 8005154:	1dfa      	adds	r2, r7, #7
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800515a:	2319      	movs	r3, #25
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	4a1f      	ldr	r2, [pc, #124]	@ (80051dc <prvTraceStoreTaskswitch+0xdc>)
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8005164:	f000 f914 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8005168:	0003      	movs	r3, r0
 800516a:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d022      	beq.n	80051b8 <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8005172:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <prvTraceStoreTaskswitch+0xdc>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	0019      	movs	r1, r3
 8005178:	2003      	movs	r0, #3
 800517a:	f000 f8c1 	bl	8005300 <prvTraceGetObjectState>
 800517e:	0003      	movs	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d103      	bne.n	800518c <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2207      	movs	r2, #7
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e002      	b.n	8005192 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2206      	movs	r2, #6
 8005190:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	221a      	movs	r2, #26
 8005196:	18ba      	adds	r2, r7, r2
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2219      	movs	r2, #25
 80051a0:	18ba      	adds	r2, r7, r2
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80051a6:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <prvTraceStoreTaskswitch+0xdc>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	0019      	movs	r1, r3
 80051ae:	2003      	movs	r0, #3
 80051b0:	f000 f876 	bl	80052a0 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80051b4:	f000 fbde 	bl	8005974 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <prvTraceStoreTaskswitch+0xd8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <prvTraceStoreTaskswitch+0xd8>)
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f383 8810 	msr	PRIMASK, r3
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b009      	add	sp, #36	@ 0x24
 80051d4:	bd90      	pop	{r4, r7, pc}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	20001db4 	.word	0x20001db4
 80051dc:	20001dbc 	.word	0x20001dbc
 80051e0:	200031f8 	.word	0x200031f8
 80051e4:	0000ffff 	.word	0x0000ffff

080051e8 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	0004      	movs	r4, r0
 80051f0:	0008      	movs	r0, r1
 80051f2:	0011      	movs	r1, r2
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	1c22      	adds	r2, r4, #0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	1dbb      	adds	r3, r7, #6
 80051fc:	1c02      	adds	r2, r0, #0
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	1d7b      	adds	r3, r7, #5
 8005202:	1c0a      	adds	r2, r1, #0
 8005204:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8005206:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <prvTraceSetPriorityProperty+0x60>)
 8005208:	681c      	ldr	r4, [r3, #0]
 800520a:	1dfb      	adds	r3, r7, #7
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	1dbb      	adds	r3, r7, #6
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	0011      	movs	r1, r2
 8005214:	0018      	movs	r0, r3
 8005216:	f000 f8e5 	bl	80053e4 <uiIndexOfObject>
 800521a:	0003      	movs	r3, r0
 800521c:	0018      	movs	r0, r3
 800521e:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <prvTraceSetPriorityProperty+0x60>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	215c      	movs	r1, #92	@ 0x5c
 8005228:	18d3      	adds	r3, r2, r3
 800522a:	185b      	adds	r3, r3, r1
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	18c3      	adds	r3, r0, r3
 8005230:	3301      	adds	r3, #1
 8005232:	2288      	movs	r2, #136	@ 0x88
 8005234:	18e3      	adds	r3, r4, r3
 8005236:	189b      	adds	r3, r3, r2
 8005238:	1d7a      	adds	r2, r7, #5
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	701a      	strb	r2, [r3, #0]
}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	b003      	add	sp, #12
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	200031f8 	.word	0x200031f8

0800524c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	0002      	movs	r2, r0
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	1dbb      	adds	r3, r7, #6
 800525a:	1c0a      	adds	r2, r1, #0
 800525c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 800525e:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <prvTraceGetPriorityProperty+0x50>)
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	1dfb      	adds	r3, r7, #7
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	1dbb      	adds	r3, r7, #6
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	0011      	movs	r1, r2
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f8b9 	bl	80053e4 <uiIndexOfObject>
 8005272:	0003      	movs	r3, r0
 8005274:	0018      	movs	r0, r3
 8005276:	4b09      	ldr	r3, [pc, #36]	@ (800529c <prvTraceGetPriorityProperty+0x50>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	1dfb      	adds	r3, r7, #7
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	215c      	movs	r1, #92	@ 0x5c
 8005280:	18d3      	adds	r3, r2, r3
 8005282:	185b      	adds	r3, r3, r1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	18c3      	adds	r3, r0, r3
 8005288:	3301      	adds	r3, #1
 800528a:	2288      	movs	r2, #136	@ 0x88
 800528c:	18e3      	adds	r3, r4, r3
 800528e:	189b      	adds	r3, r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b003      	add	sp, #12
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	200031f8 	.word	0x200031f8

080052a0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	0004      	movs	r4, r0
 80052a8:	0008      	movs	r0, r1
 80052aa:	0011      	movs	r1, r2
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	1c22      	adds	r2, r4, #0
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	1dbb      	adds	r3, r7, #6
 80052b4:	1c02      	adds	r2, r0, #0
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	1d7b      	adds	r3, r7, #5
 80052ba:	1c0a      	adds	r2, r1, #0
 80052bc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <prvTraceSetObjectState+0x5c>)
 80052c0:	681c      	ldr	r4, [r3, #0]
 80052c2:	1dfb      	adds	r3, r7, #7
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	0011      	movs	r1, r2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f889 	bl	80053e4 <uiIndexOfObject>
 80052d2:	0003      	movs	r3, r0
 80052d4:	0018      	movs	r0, r3
 80052d6:	4b09      	ldr	r3, [pc, #36]	@ (80052fc <prvTraceSetObjectState+0x5c>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	1dfb      	adds	r3, r7, #7
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	215c      	movs	r1, #92	@ 0x5c
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	185b      	adds	r3, r3, r1
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	18c3      	adds	r3, r0, r3
 80052e8:	2288      	movs	r2, #136	@ 0x88
 80052ea:	18e3      	adds	r3, r4, r3
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	1d7a      	adds	r2, r7, #5
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	701a      	strb	r2, [r3, #0]
}
 80052f4:	46c0      	nop			@ (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b003      	add	sp, #12
 80052fa:	bd90      	pop	{r4, r7, pc}
 80052fc:	200031f8 	.word	0x200031f8

08005300 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	0002      	movs	r2, r0
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	1dbb      	adds	r3, r7, #6
 800530e:	1c0a      	adds	r2, r1, #0
 8005310:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8005312:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <prvTraceGetObjectState+0x4c>)
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	1dfb      	adds	r3, r7, #7
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	1dbb      	adds	r3, r7, #6
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	0011      	movs	r1, r2
 8005320:	0018      	movs	r0, r3
 8005322:	f000 f85f 	bl	80053e4 <uiIndexOfObject>
 8005326:	0003      	movs	r3, r0
 8005328:	0018      	movs	r0, r3
 800532a:	4b08      	ldr	r3, [pc, #32]	@ (800534c <prvTraceGetObjectState+0x4c>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	1dfb      	adds	r3, r7, #7
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	215c      	movs	r1, #92	@ 0x5c
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	185b      	adds	r3, r3, r1
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	18c3      	adds	r3, r0, r3
 800533c:	2288      	movs	r2, #136	@ 0x88
 800533e:	18e3      	adds	r3, r4, r3
 8005340:	189b      	adds	r3, r3, r2
 8005342:	781b      	ldrb	r3, [r3, #0]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b003      	add	sp, #12
 800534a:	bd90      	pop	{r4, r7, pc}
 800534c:	200031f8 	.word	0x200031f8

08005350 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	0002      	movs	r2, r0
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <prvTraceSetTaskInstanceFinished+0x3c>)
 800535e:	681c      	ldr	r4, [r3, #0]
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2103      	movs	r1, #3
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f83c 	bl	80053e4 <uiIndexOfObject>
 800536c:	0003      	movs	r3, r0
 800536e:	0019      	movs	r1, r3
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <prvTraceSetTaskInstanceFinished+0x3c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	225f      	movs	r2, #95	@ 0x5f
 8005376:	5c9b      	ldrb	r3, [r3, r2]
 8005378:	18cb      	adds	r3, r1, r3
 800537a:	2288      	movs	r2, #136	@ 0x88
 800537c:	18e3      	adds	r3, r4, r3
 800537e:	189b      	adds	r3, r3, r2
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
#endif
}
 8005384:	46c0      	nop			@ (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b003      	add	sp, #12
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	200031f8 	.word	0x200031f8

08005390 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8005394:	4b11      	ldr	r3, [pc, #68]	@ (80053dc <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 800539e:	2300      	movs	r3, #0
 80053a0:	e018      	b.n	80053d4 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80053a2:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <prvTraceNextFreeEventBufferSlot+0x4c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	23fa      	movs	r3, #250	@ 0xfa
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d305      	bcc.n	80053bc <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <prvTraceNextFreeEventBufferSlot+0x50>)
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fa14 	bl	80057e0 <prvTraceError>
		return (void*)0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e00b      	b.n	80053d4 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <prvTraceNextFreeEventBufferSlot+0x4c>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <prvTraceNextFreeEventBufferSlot+0x4c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	2182      	movs	r1, #130	@ 0x82
 80053ca:	00c9      	lsls	r1, r1, #3
 80053cc:	468c      	mov	ip, r1
 80053ce:	4463      	add	r3, ip
 80053d0:	18d3      	adds	r3, r2, r3
 80053d2:	3304      	adds	r3, #4
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	200031f8 	.word	0x200031f8
 80053e0:	08007290 	.word	0x08007290

080053e4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	0002      	movs	r2, r0
 80053ec:	1dfb      	adds	r3, r7, #7
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	1dbb      	adds	r3, r7, #6
 80053f2:	1c0a      	adds	r2, r1, #0
 80053f4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80053f6:	1dbb      	adds	r3, r7, #6
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d82e      	bhi.n	800545c <uiIndexOfObject+0x78>
 80053fe:	1dfb      	adds	r3, r7, #7
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d02a      	beq.n	800545c <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8005406:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <uiIndexOfObject+0x8c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	1dbb      	adds	r3, r7, #6
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2150      	movs	r1, #80	@ 0x50
 8005410:	18d3      	adds	r3, r2, r3
 8005412:	185b      	adds	r3, r3, r1
 8005414:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005416:	1dfa      	adds	r2, r7, #7
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d81e      	bhi.n	800545c <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 800541e:	4b14      	ldr	r3, [pc, #80]	@ (8005470 <uiIndexOfObject+0x8c>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	1dbb      	adds	r3, r7, #6
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	3338      	adds	r3, #56	@ 0x38
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	3304      	adds	r3, #4
 800542e:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8005430:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <uiIndexOfObject+0x8c>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	1dbb      	adds	r3, r7, #6
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2068      	movs	r0, #104	@ 0x68
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	181b      	adds	r3, r3, r0
 800543e:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8005440:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8005442:	1dfb      	adds	r3, r7, #7
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8005448:	b29b      	uxth	r3, r3
 800544a:	4353      	muls	r3, r2
 800544c:	b29a      	uxth	r2, r3
 800544e:	200e      	movs	r0, #14
 8005450:	183b      	adds	r3, r7, r0
 8005452:	188a      	adds	r2, r1, r2
 8005454:	801a      	strh	r2, [r3, #0]
		return index;
 8005456:	183b      	adds	r3, r7, r0
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	e004      	b.n	8005466 <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800545c:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <uiIndexOfObject+0x90>)
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f9be 	bl	80057e0 <prvTraceError>
	return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	200031f8 	.word	0x200031f8
 8005474:	080072b8 	.word	0x080072b8

08005478 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b089      	sub	sp, #36	@ 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	0002      	movs	r2, r0
 8005480:	1dfb      	adds	r3, r7, #7
 8005482:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005484:	f3ef 8310 	mrs	r3, PRIMASK
 8005488:	60fb      	str	r3, [r7, #12]
  return(result);
 800548a:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	2301      	movs	r3, #1
 8005490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f383 8810 	msr	PRIMASK, r3
}
 8005498:	46c0      	nop			@ (mov r8, r8)
 800549a:	4b4c      	ldr	r3, [pc, #304]	@ (80055cc <prvTraceGetObjectHandle+0x154>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	4b4a      	ldr	r3, [pc, #296]	@ (80055cc <prvTraceGetObjectHandle+0x154>)
 80054a2:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80054a4:	1dfb      	adds	r3, r7, #7
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	4b49      	ldr	r3, [pc, #292]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 80054aa:	0052      	lsls	r2, r2, #1
 80054ac:	5ad3      	ldrh	r3, [r2, r3]
 80054ae:	001a      	movs	r2, r3
 80054b0:	4b48      	ldr	r3, [pc, #288]	@ (80055d4 <prvTraceGetObjectHandle+0x15c>)
 80054b2:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80054b4:	4b47      	ldr	r3, [pc, #284]	@ (80055d4 <prvTraceGetObjectHandle+0x15c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a45      	ldr	r2, [pc, #276]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 80054ba:	2148      	movs	r1, #72	@ 0x48
 80054bc:	18d3      	adds	r3, r2, r3
 80054be:	185b      	adds	r3, r3, r1
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d117      	bne.n	80054f6 <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80054c6:	4b43      	ldr	r3, [pc, #268]	@ (80055d4 <prvTraceGetObjectHandle+0x15c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	493f      	ldr	r1, [pc, #252]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 80054d2:	3308      	adds	r3, #8
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	18cb      	adds	r3, r1, r3
 80054d8:	3302      	adds	r3, #2
 80054da:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80054e2:	4b3c      	ldr	r3, [pc, #240]	@ (80055d4 <prvTraceGetObjectHandle+0x15c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80054e6:	3201      	adds	r2, #1
 80054e8:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80054ea:	4a39      	ldr	r2, [pc, #228]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 80054ec:	2148      	movs	r1, #72	@ 0x48
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	185b      	adds	r3, r3, r1
 80054f2:	1c02      	adds	r2, r0, #0
 80054f4:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80054f6:	4b37      	ldr	r3, [pc, #220]	@ (80055d4 <prvTraceGetObjectHandle+0x15c>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	241f      	movs	r4, #31
 80054fc:	193b      	adds	r3, r7, r4
 80054fe:	4934      	ldr	r1, [pc, #208]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 8005500:	2048      	movs	r0, #72	@ 0x48
 8005502:	188a      	adds	r2, r1, r2
 8005504:	1812      	adds	r2, r2, r0
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800550a:	1dfb      	adds	r3, r7, #7
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	4b30      	ldr	r3, [pc, #192]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 8005510:	0052      	lsls	r2, r2, #1
 8005512:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8005514:	1dfb      	adds	r3, r7, #7
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	492d      	ldr	r1, [pc, #180]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 800551a:	3310      	adds	r3, #16
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	18cb      	adds	r3, r1, r3
 8005520:	3304      	adds	r3, #4
 8005522:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005524:	429a      	cmp	r2, r3
 8005526:	d90c      	bls.n	8005542 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005528:	1dfb      	adds	r3, r7, #7
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	0018      	movs	r0, r3
 800552e:	f7fe fd7d 	bl	800402c <pszTraceGetErrorNotEnoughHandles>
 8005532:	0003      	movs	r3, r0
 8005534:	0018      	movs	r0, r3
 8005536:	f000 f953 	bl	80057e0 <prvTraceError>
		handle = 0;
 800553a:	193b      	adds	r3, r7, r4
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e031      	b.n	80055a6 <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005542:	1dfb      	adds	r3, r7, #7
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	4a22      	ldr	r2, [pc, #136]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 8005548:	0059      	lsls	r1, r3, #1
 800554a:	5a8a      	ldrh	r2, [r1, r2]
 800554c:	3201      	adds	r2, #1
 800554e:	b291      	uxth	r1, r2
 8005550:	4a1f      	ldr	r2, [pc, #124]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	5ad3      	ldrh	r3, [r2, r3]
 8005560:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005562:	1dfb      	adds	r3, r7, #7
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	4a1a      	ldr	r2, [pc, #104]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 8005568:	3308      	adds	r3, #8
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	3302      	adds	r3, #2
 8005570:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005572:	1acb      	subs	r3, r1, r3
 8005574:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8005576:	1dfb      	adds	r3, r7, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4a15      	ldr	r2, [pc, #84]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 800557c:	3318      	adds	r3, #24
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	18d3      	adds	r3, r2, r3
 8005582:	3306      	adds	r3, #6
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	001a      	movs	r2, r3
		if (hndCount >
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4293      	cmp	r3, r2
 800558c:	dd0b      	ble.n	80055a6 <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8005596:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005598:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <prvTraceGetObjectHandle+0x158>)
 800559a:	3318      	adds	r3, #24
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	3306      	adds	r3, #6
 80055a2:	1c0a      	adds	r2, r1, #0
 80055a4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 80055a6:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <prvTraceGetObjectHandle+0x154>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4b07      	ldr	r3, [pc, #28]	@ (80055cc <prvTraceGetObjectHandle+0x154>)
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f383 8810 	msr	PRIMASK, r3
}
 80055ba:	46c0      	nop			@ (mov r8, r8)

	return handle;
 80055bc:	231f      	movs	r3, #31
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	781b      	ldrb	r3, [r3, #0]
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b009      	add	sp, #36	@ 0x24
 80055c8:	bd90      	pop	{r4, r7, pc}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	20001db4 	.word	0x20001db4
 80055d0:	20001dcc 	.word	0x20001dcc
 80055d4:	20003200 	.word	0x20003200

080055d8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	0002      	movs	r2, r0
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	1c0a      	adds	r2, r1, #0
 80055e8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80055ea:	250e      	movs	r5, #14
 80055ec:	197c      	adds	r4, r7, r5
 80055ee:	1dfb      	adds	r3, r7, #7
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	1dbb      	adds	r3, r7, #6
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff fef3 	bl	80053e4 <uiIndexOfObject>
 80055fe:	0003      	movs	r3, r0
 8005600:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <prvMarkObjectAsUsed+0x44>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	197b      	adds	r3, r7, r5
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2188      	movs	r1, #136	@ 0x88
 800560c:	18d3      	adds	r3, r2, r3
 800560e:	185b      	adds	r3, r3, r1
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bdb0      	pop	{r4, r5, r7, pc}
 800561c:	200031f8 	.word	0x200031f8

08005620 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e010      	b.n	8005654 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	18d2      	adds	r2, r2, r3
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	18cb      	adds	r3, r1, r3
 800563e:	7812      	ldrb	r2, [r2, #0]
 8005640:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	3301      	adds	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d3ea      	bcc.n	8005632 <prvStrncpy+0x12>
			break;
	}
}
 800565c:	e000      	b.n	8005660 <prvStrncpy+0x40>
			break;
 800565e:	46c0      	nop			@ (mov r8, r8)
}
 8005660:	46c0      	nop			@ (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b006      	add	sp, #24
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	603a      	str	r2, [r7, #0]
 8005670:	1dfb      	adds	r3, r7, #7
 8005672:	1c02      	adds	r2, r0, #0
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	1c0a      	adds	r2, r1, #0
 800567a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8005682:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <prvTraceSetObjectName+0xbc>)
 8005684:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8005686:	1dfb      	adds	r3, r7, #7
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d904      	bls.n	8005698 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800568e:	4b26      	ldr	r3, [pc, #152]	@ (8005728 <prvTraceSetObjectName+0xc0>)
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f8a5 	bl	80057e0 <prvTraceError>
		return;
 8005696:	e041      	b.n	800571c <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8005698:	1dbb      	adds	r3, r7, #6
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80056a0:	4b22      	ldr	r3, [pc, #136]	@ (800572c <prvTraceSetObjectName+0xc4>)
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f89c 	bl	80057e0 <prvTraceError>
		return;
 80056a8:	e038      	b.n	800571c <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <prvTraceSetObjectName+0xc8>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	1dfb      	adds	r3, r7, #7
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2150      	movs	r1, #80	@ 0x50
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	185b      	adds	r3, r3, r1
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	1dba      	adds	r2, r7, #6
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d909      	bls.n	80056d6 <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80056c2:	1dfb      	adds	r3, r7, #7
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fe fcb0 	bl	800402c <pszTraceGetErrorNotEnoughHandles>
 80056cc:	0003      	movs	r3, r0
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f886 	bl	80057e0 <prvTraceError>
 80056d4:	e022      	b.n	800571c <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80056d6:	1dfb      	adds	r3, r7, #7
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	1dbb      	adds	r3, r7, #6
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff fe7f 	bl	80053e4 <uiIndexOfObject>
 80056e6:	0003      	movs	r3, r0
 80056e8:	001a      	movs	r2, r3
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <prvTraceSetObjectName+0xcc>)
 80056ec:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 80056ee:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <prvTraceSetObjectName+0xd0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d112      	bne.n	800571c <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80056f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <prvTraceSetObjectName+0xc8>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <prvTraceSetObjectName+0xcc>)
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	3388      	adds	r3, #136	@ 0x88
 8005700:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <prvTraceSetObjectName+0xc8>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	215c      	movs	r1, #92	@ 0x5c
 800570c:	18d3      	adds	r3, r2, r3
 800570e:	185b      	adds	r3, r3, r1
 8005710:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005712:	001a      	movs	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	0019      	movs	r1, r3
 8005718:	f7ff ff82 	bl	8005620 <prvStrncpy>
		}
	}
}
 800571c:	46bd      	mov	sp, r7
 800571e:	b002      	add	sp, #8
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	08007328 	.word	0x08007328
 8005728:	0800732c 	.word	0x0800732c
 800572c:	0800735c 	.word	0x0800735c
 8005730:	200031f8 	.word	0x200031f8
 8005734:	20003204 	.word	0x20003204
 8005738:	20001e30 	.word	0x20001e30

0800573c <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573e:	b089      	sub	sp, #36	@ 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8005746:	240b      	movs	r4, #11
 8005748:	193b      	adds	r3, r7, r4
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]
	crc = 0;
 800574e:	250a      	movs	r5, #10
 8005750:	197b      	adds	r3, r7, r5
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 8005756:	193a      	adds	r2, r7, r4
 8005758:	1979      	adds	r1, r7, r5
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0018      	movs	r0, r3
 800575e:	f000 fb67 	bl	8005e30 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	613b      	str	r3, [r7, #16]
  return(result);
 8005768:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	4b18      	ldr	r3, [pc, #96]	@ (80057dc <prvTraceOpenSymbol+0xa0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <prvTraceOpenSymbol+0xa0>)
 8005780:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8005782:	197b      	adds	r3, r7, r5
 8005784:	7819      	ldrb	r1, [r3, #0]
 8005786:	193b      	adds	r3, r7, r4
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9f1 	bl	8005b74 <prvTraceLookupSymbolTableEntry>
 8005792:	0002      	movs	r2, r0
 8005794:	261e      	movs	r6, #30
 8005796:	19bb      	adds	r3, r7, r6
 8005798:	801a      	strh	r2, [r3, #0]
	if (!result)
 800579a:	19bb      	adds	r3, r7, r6
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 80057a2:	197b      	adds	r3, r7, r5
 80057a4:	7819      	ldrb	r1, [r3, #0]
 80057a6:	193b      	adds	r3, r7, r4
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa6b 	bl	8005c88 <prvTraceCreateSymbolTableEntry>
 80057b2:	0002      	movs	r2, r0
 80057b4:	19bb      	adds	r3, r7, r6
 80057b6:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <prvTraceOpenSymbol+0xa0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <prvTraceOpenSymbol+0xa0>)
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			@ (mov r8, r8)

	return result;
 80057ce:	231e      	movs	r3, #30
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	881b      	ldrh	r3, [r3, #0]
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b009      	add	sp, #36	@ 0x24
 80057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057dc:	20001db4 	.word	0x20001db4

080057e0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 80057e8:	4b12      	ldr	r3, [pc, #72]	@ (8005834 <prvTraceError+0x54>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <prvTraceError+0x14>
	{
		xTraceDisable();
 80057f0:	f7fe fc8e 	bl	8004110 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 80057f4:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <prvTraceError+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d117      	bne.n	800582c <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80057fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <prvTraceError+0x58>)
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 8005802:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <prvTraceError+0x54>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d010      	beq.n	800582c <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800580a:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <prvTraceError+0x54>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	22f0      	movs	r2, #240	@ 0xf0
 8005810:	0092      	lsls	r2, r2, #2
 8005812:	1898      	adds	r0, r3, r2
 8005814:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <prvTraceError+0x58>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2250      	movs	r2, #80	@ 0x50
 800581a:	0019      	movs	r1, r3
 800581c:	f7ff ff00 	bl	8005620 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8005820:	4b04      	ldr	r3, [pc, #16]	@ (8005834 <prvTraceError+0x54>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	23ee      	movs	r3, #238	@ 0xee
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	2101      	movs	r1, #1
 800582a:	50d1      	str	r1, [r2, r3]
		}
	}
}
 800582c:	46c0      	nop			@ (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200031f8 	.word	0x200031f8
 8005838:	20001e30 	.word	0x20001e30

0800583c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	0002      	movs	r2, r0
 8005844:	1dfb      	adds	r3, r7, #7
 8005846:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8005850:	e080      	b.n	8005954 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8005852:	4b46      	ldr	r3, [pc, #280]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	18d3      	adds	r3, r2, r3
 800585c:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800585e:	4b43      	ldr	r3, [pc, #268]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4942      	ldr	r1, [pc, #264]	@ (8005970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005868:	18d3      	adds	r3, r2, r3
 800586a:	185b      	adds	r3, r3, r1
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b98      	cmp	r3, #152	@ 0x98
 8005870:	d931      	bls.n	80058d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8005872:	4b3e      	ldr	r3, [pc, #248]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	493d      	ldr	r1, [pc, #244]	@ (8005970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	185b      	adds	r3, r3, r1
 8005880:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005882:	2ba7      	cmp	r3, #167	@ 0xa7
 8005884:	d827      	bhi.n	80058d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8005886:	4b39      	ldr	r3, [pc, #228]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4938      	ldr	r1, [pc, #224]	@ (8005970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	185b      	adds	r3, r3, r1
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	210f      	movs	r1, #15
 8005898:	187b      	adds	r3, r7, r1
 800589a:	3268      	adds	r2, #104	@ 0x68
 800589c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	781a      	ldrb	r2, [r3, #0]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	18d2      	adds	r2, r2, r3
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d24d      	bcs.n	800594c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 80058b0:	4b2e      	ldr	r3, [pc, #184]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	2082      	movs	r0, #130	@ 0x82
 80058ba:	00c0      	lsls	r0, r0, #3
 80058bc:	4684      	mov	ip, r0
 80058be:	4463      	add	r3, ip
 80058c0:	18d3      	adds	r3, r2, r3
 80058c2:	1d18      	adds	r0, r3, #4
 80058c4:	187b      	adds	r3, r7, r1
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	001a      	movs	r2, r3
 80058ce:	2100      	movs	r1, #0
 80058d0:	f001 fa06 	bl	8006ce0 <memset>
		{
 80058d4:	e03a      	b.n	800594c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 80058d6:	4b25      	ldr	r3, [pc, #148]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4924      	ldr	r1, [pc, #144]	@ (8005970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80058e0:	18d3      	adds	r3, r2, r3
 80058e2:	185b      	adds	r3, r3, r1
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d131      	bne.n	800594e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	4b1f      	ldr	r3, [pc, #124]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d20f      	bcs.n	8005918 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80058f8:	4b1c      	ldr	r3, [pc, #112]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	2182      	movs	r1, #130	@ 0x82
 8005902:	00c9      	lsls	r1, r1, #3
 8005904:	468c      	mov	ip, r1
 8005906:	4463      	add	r3, ip
 8005908:	18d3      	adds	r3, r2, r3
 800590a:	3304      	adds	r3, #4
 800590c:	2208      	movs	r2, #8
 800590e:	2100      	movs	r1, #0
 8005910:	0018      	movs	r0, r3
 8005912:	f001 f9e5 	bl	8006ce0 <memset>
 8005916:	e01a      	b.n	800594e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8005918:	4b14      	ldr	r3, [pc, #80]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800591e:	4694      	mov	ip, r2
 8005920:	4463      	add	r3, ip
 8005922:	2204      	movs	r2, #4
 8005924:	2100      	movs	r1, #0
 8005926:	0018      	movs	r0, r3
 8005928:	f001 f9da 	bl	8006ce0 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 800592c:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	2182      	movs	r1, #130	@ 0x82
 8005936:	00c9      	lsls	r1, r1, #3
 8005938:	468c      	mov	ip, r1
 800593a:	4463      	add	r3, ip
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	3304      	adds	r3, #4
 8005940:	2204      	movs	r2, #4
 8005942:	2100      	movs	r1, #0
 8005944:	0018      	movs	r0, r3
 8005946:	f001 f9cb 	bl	8006ce0 <memset>
 800594a:	e000      	b.n	800594e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 800594c:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3301      	adds	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	429a      	cmp	r2, r3
 800595c:	d200      	bcs.n	8005960 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 800595e:	e778      	b.n	8005852 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b006      	add	sp, #24
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	200031f8 	.word	0x200031f8
 8005970:	00000414 	.word	0x00000414

08005974 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8005978:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01c      	beq.n	80059bc <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8005982:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	3201      	adds	r2, #1
 800598a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 800598c:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	3201      	adds	r2, #1
 8005994:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005996:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	23fa      	movs	r3, #250	@ 0xfa
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d307      	bcc.n	80059b4 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80059a4:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <prvTraceUpdateCounters+0x50>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2200      	movs	r2, #0
 80059b2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f7ff ff41 	bl	800583c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80059ba:	e000      	b.n	80059be <prvTraceUpdateCounters+0x4a>
		return;
 80059bc:	46c0      	nop			@ (mov r8, r8)
#endif
}
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	200031f8 	.word	0x200031f8

080059c8 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80059c8:	b590      	push	{r4, r7, lr}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	0002      	movs	r2, r0
 80059d0:	1dbb      	adds	r3, r7, #6
 80059d2:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 80059e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 80059ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005b58 <prvTraceGetDTS+0x190>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80059f2:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <prvTraceGetDTS+0x190>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b57      	ldr	r3, [pc, #348]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	0892      	lsrs	r2, r2, #2
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80059fe:	e00b      	b.n	8005a18 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005a00:	4b56      	ldr	r3, [pc, #344]	@ (8005b5c <prvTraceGetDTS+0x194>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b56      	ldr	r3, [pc, #344]	@ (8005b60 <prvTraceGetDTS+0x198>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d005      	beq.n	8005a18 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005a0c:	4b55      	ldr	r3, [pc, #340]	@ (8005b64 <prvTraceGetDTS+0x19c>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	4b50      	ldr	r3, [pc, #320]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	0892      	lsrs	r2, r2, #2
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8005a18:	230c      	movs	r3, #12
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 fa39 	bl	8005e94 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4b50      	ldr	r3, [pc, #320]	@ (8005b68 <prvTraceGetDTS+0x1a0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005b68 <prvTraceGetDTS+0x1a0>)
 8005a30:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 8005a32:	4b48      	ldr	r3, [pc, #288]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d047      	beq.n	8005acc <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8005a3c:	4b45      	ldr	r3, [pc, #276]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d921      	bls.n	8005a8c <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005a48:	4b42      	ldr	r3, [pc, #264]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005a4e:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	0019      	movs	r1, r3
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fa fb56 	bl	8000108 <__udivsi3>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	001a      	movs	r2, r3
 8005a60:	4b3c      	ldr	r3, [pc, #240]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	18a2      	adds	r2, r4, r2
 8005a66:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005a68:	4b3a      	ldr	r3, [pc, #232]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005a6e:	4b39      	ldr	r3, [pc, #228]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	0011      	movs	r1, r2
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7fa fbcb 	bl	8000214 <__aeabi_uidivmod>
 8005a7e:	000b      	movs	r3, r1
 8005a80:	001a      	movs	r2, r3
 8005a82:	4b34      	ldr	r3, [pc, #208]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	18a2      	adds	r2, r4, r2
 8005a88:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a8a:	e007      	b.n	8005a9c <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8005a8c:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005a92:	4b30      	ldr	r3, [pc, #192]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	188a      	adds	r2, r1, r2
 8005a9a:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8005a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d313      	bcc.n	8005ad4 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8005aac:	4b29      	ldr	r3, [pc, #164]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8005ab6:	4b27      	ldr	r3, [pc, #156]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005abc:	4b25      	ldr	r3, [pc, #148]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ac2:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1a8a      	subs	r2, r1, r2
 8005ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aca:	e003      	b.n	8005ad4 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005acc:	4b21      	ldr	r3, [pc, #132]	@ (8005b54 <prvTraceGetDTS+0x18c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d92f      	bls.n	8005b3e <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005ade:	f7ff fc57 	bl	8005390 <prvTraceNextFreeEventBufferSlot>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d028      	beq.n	8005b3e <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 8005aec:	1dbb      	adds	r3, r7, #6
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b6c <prvTraceGetDTS+0x1a4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10b      	bne.n	8005b0e <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	22a9      	movs	r2, #169	@ 0xa9
 8005afa:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	705a      	strb	r2, [r3, #1]
 8005b0c:	e015      	b.n	8005b3a <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 8005b0e:	1dbb      	adds	r3, r7, #6
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	2bff      	cmp	r3, #255	@ 0xff
 8005b14:	d10d      	bne.n	8005b32 <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	22a8      	movs	r2, #168	@ 0xa8
 8005b1a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	705a      	strb	r2, [r3, #1]
 8005b30:	e003      	b.n	8005b3a <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8005b32:	4b0f      	ldr	r3, [pc, #60]	@ (8005b70 <prvTraceGetDTS+0x1a8>)
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff fe53 	bl	80057e0 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8005b3a:	f7ff ff1b 	bl	8005974 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	1dba      	adds	r2, r7, #6
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b29b      	uxth	r3, r3
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b007      	add	sp, #28
 8005b50:	bd90      	pop	{r4, r7, pc}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	200031f8 	.word	0x200031f8
 8005b58:	20001db8 	.word	0x20001db8
 8005b5c:	e000e018 	.word	0xe000e018
 8005b60:	20001dc4 	.word	0x20001dc4
 8005b64:	20000014 	.word	0x20000014
 8005b68:	20003208 	.word	0x20003208
 8005b6c:	0000ffff 	.word	0x0000ffff
 8005b70:	0800738c 	.word	0x0800738c

08005b74 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	0008      	movs	r0, r1
 8005b7e:	0011      	movs	r1, r2
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	240b      	movs	r4, #11
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	1c02      	adds	r2, r0, #0
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	1c0a      	adds	r2, r1, #0
 8005b90:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8005b92:	4b3c      	ldr	r3, [pc, #240]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	193b      	adds	r3, r7, r4
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	2316      	movs	r3, #22
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	3299      	adds	r2, #153	@ 0x99
 8005ba0:	32ff      	adds	r2, #255	@ 0xff
 8005ba2:	0052      	lsls	r2, r2, #1
 8005ba4:	188a      	adds	r2, r1, r2
 8005ba6:	3204      	adds	r2, #4
 8005ba8:	8812      	ldrh	r2, [r2, #0]
 8005baa:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8005bac:	e05c      	b.n	8005c68 <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8005bae:	4b35      	ldr	r3, [pc, #212]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	2016      	movs	r0, #22
 8005bb4:	183b      	adds	r3, r7, r0
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	1c9a      	adds	r2, r3, #2
 8005bba:	239b      	movs	r3, #155	@ 0x9b
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	188a      	adds	r2, r1, r2
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	22ff      	movs	r2, #255	@ 0xff
 8005bca:	4013      	ands	r3, r2
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d131      	bne.n	8005c34 <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8005bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	183b      	adds	r3, r7, r0
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	1cda      	adds	r2, r3, #3
 8005bda:	239b      	movs	r3, #155	@ 0x9b
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	188a      	adds	r2, r1, r2
 8005be0:	18d3      	adds	r3, r2, r3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	001a      	movs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d122      	bne.n	8005c34 <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8005bee:	4b25      	ldr	r3, [pc, #148]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005bf0:	6819      	ldr	r1, [r3, #0]
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	1d1a      	adds	r2, r3, #4
 8005bf8:	240a      	movs	r4, #10
 8005bfa:	193b      	adds	r3, r7, r4
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	18d2      	adds	r2, r2, r3
 8005c00:	239b      	movs	r3, #155	@ 0x9b
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	188a      	adds	r2, r1, r2
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d112      	bne.n	8005c34 <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	3304      	adds	r3, #4
 8005c18:	219a      	movs	r1, #154	@ 0x9a
 8005c1a:	0089      	lsls	r1, r1, #2
 8005c1c:	468c      	mov	ip, r1
 8005c1e:	4463      	add	r3, ip
 8005c20:	18d3      	adds	r3, r2, r3
 8005c22:	1d18      	adds	r0, r3, #4
 8005c24:	193b      	adds	r3, r7, r4
 8005c26:	781a      	ldrb	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	f001 f860 	bl	8006cf0 <strncmp>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d01f      	beq.n	8005c74 <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8005c34:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	2416      	movs	r4, #22
 8005c3a:	193b      	adds	r3, r7, r4
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	239b      	movs	r3, #155	@ 0x9b
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	188a      	adds	r2, r1, r2
 8005c44:	18d3      	adds	r3, r2, r3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <prvTraceLookupSymbolTableEntry+0x110>)
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	193b      	adds	r3, r7, r4
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	239b      	movs	r3, #155	@ 0x9b
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	188a      	adds	r2, r1, r2
 8005c5a:	18d3      	adds	r3, r2, r3
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	1882      	adds	r2, r0, r2
 8005c66:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 8005c68:	2316      	movs	r3, #22
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d19d      	bne.n	8005bae <prvTraceLookupSymbolTableEntry+0x3a>
 8005c72:	e000      	b.n	8005c76 <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 8005c74:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 8005c76:	2316      	movs	r3, #22
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	881b      	ldrh	r3, [r3, #0]
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b007      	add	sp, #28
 8005c82:	bd90      	pop	{r4, r7, pc}
 8005c84:	200031f8 	.word	0x200031f8

08005c88 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 8005c88:	b5b0      	push	{r4, r5, r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	0008      	movs	r0, r1
 8005c92:	0011      	movs	r1, r2
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	230b      	movs	r3, #11
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	1c02      	adds	r2, r0, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	200a      	movs	r0, #10
 8005ca0:	183b      	adds	r3, r7, r0
 8005ca2:	1c0a      	adds	r2, r1, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8005caa:	4b5f      	ldr	r3, [pc, #380]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	239a      	movs	r3, #154	@ 0x9a
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	58d2      	ldr	r2, [r2, r3]
 8005cb4:	183b      	adds	r3, r7, r0
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	18d3      	adds	r3, r2, r3
 8005cba:	3304      	adds	r3, #4
 8005cbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cbe:	d906      	bls.n	8005cce <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8005cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e2c <prvTraceCreateSymbolTableEntry+0x1a4>)
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7ff fd8c 	bl	80057e0 <prvTraceError>
		ret = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e0a7      	b.n	8005e1e <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8005cce:	4b56      	ldr	r3, [pc, #344]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	250b      	movs	r5, #11
 8005cd4:	197b      	adds	r3, r7, r5
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	3399      	adds	r3, #153	@ 0x99
 8005cda:	33ff      	adds	r3, #255	@ 0xff
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	18d3      	adds	r3, r2, r3
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 8005ce4:	4b50      	ldr	r3, [pc, #320]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005ce6:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	239a      	movs	r3, #154	@ 0x9a
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8005cf2:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8005cf4:	239b      	movs	r3, #155	@ 0x9b
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	188a      	adds	r2, r1, r2
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	1c02      	adds	r2, r0, #0
 8005cfe:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8005d00:	4b49      	ldr	r3, [pc, #292]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	197b      	adds	r3, r7, r5
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	3399      	adds	r3, #153	@ 0x99
 8005d0a:	33ff      	adds	r3, #255	@ 0xff
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	18d3      	adds	r3, r2, r3
 8005d10:	3304      	adds	r3, #4
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 8005d18:	4b43      	ldr	r3, [pc, #268]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d1a:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8005d1c:	4b42      	ldr	r3, [pc, #264]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	239a      	movs	r3, #154	@ 0x9a
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	58d3      	ldr	r3, [r2, r3]
 8005d26:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8005d28:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8005d2a:	239b      	movs	r3, #155	@ 0x9b
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	188a      	adds	r2, r1, r2
 8005d30:	18d3      	adds	r3, r2, r3
 8005d32:	1c02      	adds	r2, r0, #0
 8005d34:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 8005d36:	4b3c      	ldr	r3, [pc, #240]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d38:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8005d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	239a      	movs	r3, #154	@ 0x9a
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	58d3      	ldr	r3, [r2, r3]
 8005d44:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8005d4a:	239b      	movs	r3, #155	@ 0x9b
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	188a      	adds	r2, r1, r2
 8005d50:	18d3      	adds	r3, r2, r3
 8005d52:	1c02      	adds	r2, r0, #0
 8005d54:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 8005d5a:	4b33      	ldr	r3, [pc, #204]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d5c:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8005d5e:	4b32      	ldr	r3, [pc, #200]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	239a      	movs	r3, #154	@ 0x9a
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	58d3      	ldr	r3, [r2, r3]
 8005d68:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 8005d6a:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8005d6c:	239b      	movs	r3, #155	@ 0x9b
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	188a      	adds	r2, r1, r2
 8005d72:	18d3      	adds	r3, r2, r3
 8005d74:	1c02      	adds	r2, r0, #0
 8005d76:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8005d78:	4b2b      	ldr	r3, [pc, #172]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8005d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	239a      	movs	r3, #154	@ 0x9a
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	58cb      	ldr	r3, [r1, r3]
 8005d86:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8005d88:	219a      	movs	r1, #154	@ 0x9a
 8005d8a:	0089      	lsls	r1, r1, #2
 8005d8c:	468c      	mov	ip, r1
 8005d8e:	4463      	add	r3, ip
 8005d90:	18d3      	adds	r3, r2, r3
 8005d92:	1d18      	adds	r0, r3, #4
 8005d94:	240a      	movs	r4, #10
 8005d96:	193b      	adds	r3, r7, r4
 8005d98:	781a      	ldrb	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	f7ff fc3f 	bl	8005620 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8005da2:	4b21      	ldr	r3, [pc, #132]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005da4:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8005da6:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	239a      	movs	r3, #154	@ 0x9a
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	58d2      	ldr	r2, [r2, r3]
 8005db0:	0020      	movs	r0, r4
 8005db2:	183b      	adds	r3, r7, r0
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	18d3      	adds	r3, r2, r3
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	239b      	movs	r3, #155	@ 0x9b
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	188a      	adds	r2, r1, r2
 8005dc0:	18d3      	adds	r3, r2, r3
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005dc6:	4b18      	ldr	r3, [pc, #96]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	239a      	movs	r3, #154	@ 0x9a
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8005dd0:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005dd4:	197b      	adds	r3, r7, r5
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b289      	uxth	r1, r1
 8005dda:	3399      	adds	r3, #153	@ 0x99
 8005ddc:	33ff      	adds	r3, #255	@ 0xff
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	18d3      	adds	r3, r2, r3
 8005de2:	3304      	adds	r3, #4
 8005de4:	1c0a      	adds	r2, r1, #0
 8005de6:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8005de8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	239a      	movs	r3, #154	@ 0x9a
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	58d2      	ldr	r2, [r2, r3]
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	18d1      	adds	r1, r2, r3
 8005df8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	3105      	adds	r1, #5
 8005dfe:	239a      	movs	r3, #154	@ 0x9a
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	239a      	movs	r3, #154	@ 0x9a
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	58d3      	ldr	r3, [r2, r3]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	183a      	adds	r2, r7, r0
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	3205      	adds	r2, #5
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b006      	add	sp, #24
 8005e26:	bdb0      	pop	{r4, r5, r7, pc}
 8005e28:	200031f8 	.word	0x200031f8
 8005e2c:	080073b0 	.word	0x080073b0

08005e30 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8005e4a:	e008      	b.n	8005e5e <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8005e4c:	2317      	movs	r3, #23
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	18d3      	adds	r3, r2, r3
 8005e56:	61bb      	str	r3, [r7, #24]
			length++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	2117      	movs	r1, #23
 8005e66:	187a      	adds	r2, r7, r1
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	7013      	strb	r3, [r2, #0]
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1eb      	bne.n	8005e4c <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	223f      	movs	r2, #63	@ 0x3f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	701a      	strb	r2, [r3, #0]
}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b008      	add	sp, #32
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8005ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f5c <prvTracePortGetTimeStamp+0xc8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d107      	bne.n	8005ebc <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04f      	beq.n	8005f52 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8005eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f60 <prvTracePortGetTimeStamp+0xcc>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
		return;
 8005eba:	e04a      	b.n	8005f52 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8005ebc:	4b29      	ldr	r3, [pc, #164]	@ (8005f64 <prvTracePortGetTimeStamp+0xd0>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <prvTracePortGetTimeStamp+0xd4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8005eca:	4b28      	ldr	r3, [pc, #160]	@ (8005f6c <prvTracePortGetTimeStamp+0xd8>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b28      	ldr	r3, [pc, #160]	@ (8005f70 <prvTracePortGetTimeStamp+0xdc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	db03      	blt.n	8005ee2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8005eda:	4b24      	ldr	r3, [pc, #144]	@ (8005f6c <prvTracePortGetTimeStamp+0xd8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e002      	b.n	8005ee8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8005ee2:	4b23      	ldr	r3, [pc, #140]	@ (8005f70 <prvTracePortGetTimeStamp+0xdc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8005ee8:	4b20      	ldr	r3, [pc, #128]	@ (8005f6c <prvTracePortGetTimeStamp+0xd8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d107      	bne.n	8005f02 <prvTracePortGetTimeStamp+0x6e>
 8005ef2:	4b20      	ldr	r3, [pc, #128]	@ (8005f74 <prvTracePortGetTimeStamp+0xe0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d202      	bcs.n	8005f02 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8005f08:	4b16      	ldr	r3, [pc, #88]	@ (8005f64 <prvTracePortGetTimeStamp+0xd0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	435a      	muls	r2, r3
 8005f14:	4b12      	ldr	r3, [pc, #72]	@ (8005f60 <prvTracePortGetTimeStamp+0xcc>)
 8005f16:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8005f18:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <prvTracePortGetTimeStamp+0xd0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	2203      	movs	r2, #3
 8005f20:	4013      	ands	r3, r2
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	435a      	muls	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	18d3      	adds	r3, r2, r3
 8005f2a:	089a      	lsrs	r2, r3, #2
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f60 <prvTracePortGetTimeStamp+0xcc>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	18d2      	adds	r2, r2, r3
 8005f32:	4b0b      	ldr	r3, [pc, #44]	@ (8005f60 <prvTracePortGetTimeStamp+0xcc>)
 8005f34:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <prvTracePortGetTimeStamp+0xd8>)
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8005f42:	4b07      	ldr	r3, [pc, #28]	@ (8005f60 <prvTracePortGetTimeStamp+0xcc>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <prvTracePortGetTimeStamp+0xe0>)
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e000      	b.n	8005f54 <prvTracePortGetTimeStamp+0xc0>
		return;
 8005f52:	46c0      	nop			@ (mov r8, r8)
}
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b004      	add	sp, #16
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	20001da8 	.word	0x20001da8
 8005f60:	20001dac 	.word	0x20001dac
 8005f64:	e000e014 	.word	0xe000e014
 8005f68:	e000e018 	.word	0xe000e018
 8005f6c:	2000320c 	.word	0x2000320c
 8005f70:	20001da4 	.word	0x20001da4
 8005f74:	20003210 	.word	0x20003210

08005f78 <main>:
// Define the message_t type as an array of 60 char
typedef uint8_t message_t[64];		// typedef uint8_t msg_t[64];

// Main function
int main()
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8005f7e:	f000 f8ff 	bl	8006180 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8005f82:	f000 fcfb 	bl	800697c <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8005f86:	f000 fd45 	bl	8006a14 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8005f8a:	f000 fd91 	bl	8006ab0 <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8005f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8006108 <main+0x190>)
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 fcad 	bl	80068f0 <my_printf>

	// Initialize NVIC
	//BSP_NVIC_Init();

	// Start Trace Recording
	vTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 8005f96:	2001      	movs	r0, #1
 8005f98:	f7fe f884 	bl	80040a4 <xTraceEnable>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8005f9c:	f7fd fdb8 	bl	8003b10 <xPortGetFreeHeapSize>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	607b      	str	r3, [r7, #4]
	my_printf("\r\nFree Heap Size is %d bytes\r\n", free_heap_size);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4b59      	ldr	r3, [pc, #356]	@ (800610c <main+0x194>)
 8005fa8:	0011      	movs	r1, r2
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 fca0 	bl	80068f0 <my_printf>


	// Create Semaphore object (this is not a 'give')
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8005fb0:	4b57      	ldr	r3, [pc, #348]	@ (8006110 <main+0x198>)
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 fc9c 	bl	80068f0 <my_printf>
	xSem = xSemaphoreCreateBinary();
 8005fb8:	2203      	movs	r2, #3
 8005fba:	2100      	movs	r1, #0
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	f7fa ffbd 	bl	8000f3c <xQueueGenericCreate>
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	4b53      	ldr	r3, [pc, #332]	@ (8006114 <main+0x19c>)
 8005fc6:	601a      	str	r2, [r3, #0]
	vTraceSetSemaphoreName(xSem, "xSEM");
 8005fc8:	4b52      	ldr	r3, [pc, #328]	@ (8006114 <main+0x19c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a52      	ldr	r2, [pc, #328]	@ (8006118 <main+0x1a0>)
 8005fce:	0011      	movs	r1, r2
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fd fe9a 	bl	8003d0a <vTraceSetSemaphoreName>
	free_heap_size = xPortGetFreeHeapSize();
 8005fd6:	f7fd fd9b 	bl	8003b10 <xPortGetFreeHeapSize>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800611c <main+0x1a4>)
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 fc83 	bl	80068f0 <my_printf>

	// Create Queue to hold console messages
	my_printf("\r\nNow creating Message Queue...\r\n");
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <main+0x1a8>)
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 fc7f 	bl	80068f0 <my_printf>
	xConsoleQueue = xQueueCreate(4, sizeof(message_t));
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2140      	movs	r1, #64	@ 0x40
 8005ff6:	2004      	movs	r0, #4
 8005ff8:	f7fa ffa0 	bl	8000f3c <xQueueGenericCreate>
 8005ffc:	0002      	movs	r2, r0
 8005ffe:	4b49      	ldr	r3, [pc, #292]	@ (8006124 <main+0x1ac>)
 8006000:	601a      	str	r2, [r3, #0]
	vTraceSetQueueName(xConsoleQueue, "Console Queue");
 8006002:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <main+0x1ac>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a48      	ldr	r2, [pc, #288]	@ (8006128 <main+0x1b0>)
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7fd fe69 	bl	8003ce2 <vTraceSetQueueName>
	free_heap_size = xPortGetFreeHeapSize();
 8006010:	f7fd fd7e 	bl	8003b10 <xPortGetFreeHeapSize>
 8006014:	0003      	movs	r3, r0
 8006016:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4b40      	ldr	r3, [pc, #256]	@ (800611c <main+0x1a4>)
 800601c:	0011      	movs	r1, r2
 800601e:	0018      	movs	r0, r3
 8006020:	f000 fc66 	bl	80068f0 <my_printf>

	// Create a Mutex for accessing the console
	my_printf("\r\nNow creating Mutex...\r\n");
 8006024:	4b41      	ldr	r3, [pc, #260]	@ (800612c <main+0x1b4>)
 8006026:	0018      	movs	r0, r3
 8006028:	f000 fc62 	bl	80068f0 <my_printf>
	xConsoleMutex = xSemaphoreCreateMutex();
 800602c:	2001      	movs	r0, #1
 800602e:	f7fb f8c5 	bl	80011bc <xQueueCreateMutex>
 8006032:	0002      	movs	r2, r0
 8006034:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <main+0x1b8>)
 8006036:	601a      	str	r2, [r3, #0]
	vTraceSetMutexName(xConsoleMutex, "Console Mutex");
 8006038:	4b3d      	ldr	r3, [pc, #244]	@ (8006130 <main+0x1b8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3d      	ldr	r2, [pc, #244]	@ (8006134 <main+0x1bc>)
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f7fd fe76 	bl	8003d32 <vTraceSetMutexName>
	free_heap_size = xPortGetFreeHeapSize();
 8006046:	f7fd fd63 	bl	8003b10 <xPortGetFreeHeapSize>
 800604a:	0003      	movs	r3, r0
 800604c:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4b32      	ldr	r3, [pc, #200]	@ (800611c <main+0x1a4>)
 8006052:	0011      	movs	r1, r2
 8006054:	0018      	movs	r0, r3
 8006056:	f000 fc4b 	bl	80068f0 <my_printf>

	// Register the Trace User Event Channels
	my_printf("\r\nNow registering Trace events...\r\n");
 800605a:	4b37      	ldr	r3, [pc, #220]	@ (8006138 <main+0x1c0>)
 800605c:	0018      	movs	r0, r3
 800605e:	f000 fc47 	bl	80068f0 <my_printf>
	ue1 = xTraceRegisterString("ticks");
 8006062:	4b36      	ldr	r3, [pc, #216]	@ (800613c <main+0x1c4>)
 8006064:	0018      	movs	r0, r3
 8006066:	f7fe fc85 	bl	8004974 <xTraceRegisterString>
 800606a:	0002      	movs	r2, r0
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <main+0x1c8>)
 800606e:	601a      	str	r2, [r3, #0]
	ue2 = xTraceRegisterString("msg");
 8006070:	4b34      	ldr	r3, [pc, #208]	@ (8006144 <main+0x1cc>)
 8006072:	0018      	movs	r0, r3
 8006074:	f7fe fc7e 	bl	8004974 <xTraceRegisterString>
 8006078:	0002      	movs	r2, r0
 800607a:	4b33      	ldr	r3, [pc, #204]	@ (8006148 <main+0x1d0>)
 800607c:	601a      	str	r2, [r3, #0]
	ue3 = xTraceRegisterString("HWM");
 800607e:	4b33      	ldr	r3, [pc, #204]	@ (800614c <main+0x1d4>)
 8006080:	0018      	movs	r0, r3
 8006082:	f7fe fc77 	bl	8004974 <xTraceRegisterString>
 8006086:	0002      	movs	r2, r0
 8006088:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <main+0x1d8>)
 800608a:	601a      	str	r2, [r3, #0]
	free_heap_size = xPortGetFreeHeapSize();
 800608c:	f7fd fd40 	bl	8003b10 <xPortGetFreeHeapSize>
 8006090:	0003      	movs	r3, r0
 8006092:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4b21      	ldr	r3, [pc, #132]	@ (800611c <main+0x1a4>)
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f000 fc28 	bl	80068f0 <my_printf>

	// Create Tasks
	my_printf("\r\nNow creating Tasks...\r\n");
 80060a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006154 <main+0x1dc>)
 80060a2:	0018      	movs	r0, r3
 80060a4:	f000 fc24 	bl	80068f0 <my_printf>
	xTaskCreate(vTask1,	"Task_1",	128, NULL, 2, &vTask1_handle);
 80060a8:	492b      	ldr	r1, [pc, #172]	@ (8006158 <main+0x1e0>)
 80060aa:	482c      	ldr	r0, [pc, #176]	@ (800615c <main+0x1e4>)
 80060ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006160 <main+0x1e8>)
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	2302      	movs	r3, #2
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	2280      	movs	r2, #128	@ 0x80
 80060b8:	f7fb ff43 	bl	8001f42 <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2",	128, NULL, 3, &vTask2_handle);
 80060bc:	4929      	ldr	r1, [pc, #164]	@ (8006164 <main+0x1ec>)
 80060be:	482a      	ldr	r0, [pc, #168]	@ (8006168 <main+0x1f0>)
 80060c0:	4b2a      	ldr	r3, [pc, #168]	@ (800616c <main+0x1f4>)
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	2303      	movs	r3, #3
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	2280      	movs	r2, #128	@ 0x80
 80060cc:	f7fb ff39 	bl	8001f42 <xTaskCreate>
	xTaskCreate(vTaskHWM,	"Task_HWM",	128, NULL, 1, &vTaskHWM_handle);
 80060d0:	4927      	ldr	r1, [pc, #156]	@ (8006170 <main+0x1f8>)
 80060d2:	4828      	ldr	r0, [pc, #160]	@ (8006174 <main+0x1fc>)
 80060d4:	4b28      	ldr	r3, [pc, #160]	@ (8006178 <main+0x200>)
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	2301      	movs	r3, #1
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2300      	movs	r3, #0
 80060de:	2280      	movs	r2, #128	@ 0x80
 80060e0:	f7fb ff2f 	bl	8001f42 <xTaskCreate>
	free_heap_size = xPortGetFreeHeapSize();
 80060e4:	f7fd fd14 	bl	8003b10 <xPortGetFreeHeapSize>
 80060e8:	0003      	movs	r3, r0
 80060ea:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <main+0x1a4>)
 80060f0:	0011      	movs	r1, r2
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fbfc 	bl	80068f0 <my_printf>

	// Give a nice name to the Queue in the trace recorder
	// vTraceSetQueueName(xConsoleQueue, "Console Queue");

	// Start the Scheduler
	my_printf("\r\nNow Starting Scheduler...\r\n");
 80060f8:	4b20      	ldr	r3, [pc, #128]	@ (800617c <main+0x204>)
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 fbf8 	bl	80068f0 <my_printf>
	vTaskStartScheduler();
 8006100:	f7fc f960 	bl	80023c4 <vTaskStartScheduler>

	while(1)
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	e7fd      	b.n	8006104 <main+0x18c>
 8006108:	080073f8 	.word	0x080073f8
 800610c:	0800740c 	.word	0x0800740c
 8006110:	0800742c 	.word	0x0800742c
 8006114:	20003220 	.word	0x20003220
 8006118:	08007454 	.word	0x08007454
 800611c:	0800745c 	.word	0x0800745c
 8006120:	0800747c 	.word	0x0800747c
 8006124:	20003228 	.word	0x20003228
 8006128:	080074a0 	.word	0x080074a0
 800612c:	080074b0 	.word	0x080074b0
 8006130:	20003224 	.word	0x20003224
 8006134:	080074cc 	.word	0x080074cc
 8006138:	080074dc 	.word	0x080074dc
 800613c:	08007500 	.word	0x08007500
 8006140:	2000322c 	.word	0x2000322c
 8006144:	08007508 	.word	0x08007508
 8006148:	20003230 	.word	0x20003230
 800614c:	0800750c 	.word	0x0800750c
 8006150:	20003234 	.word	0x20003234
 8006154:	08007510 	.word	0x08007510
 8006158:	0800752c 	.word	0x0800752c
 800615c:	080062b5 	.word	0x080062b5
 8006160:	20003214 	.word	0x20003214
 8006164:	08007534 	.word	0x08007534
 8006168:	080062f5 	.word	0x080062f5
 800616c:	20003218 	.word	0x20003218
 8006170:	0800753c 	.word	0x0800753c
 8006174:	08006335 	.word	0x08006335
 8006178:	2000321c 	.word	0x2000321c
 800617c:	08007548 	.word	0x08007548

08006180 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 800618a:	4b44      	ldr	r3, [pc, #272]	@ (800629c <SystemClock_Config+0x11c>)
 800618c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 800618e:	4b44      	ldr	r3, [pc, #272]	@ (80062a0 <SystemClock_Config+0x120>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b43      	ldr	r3, [pc, #268]	@ (80062a0 <SystemClock_Config+0x120>)
 8006194:	2180      	movs	r1, #128	@ 0x80
 8006196:	02c9      	lsls	r1, r1, #11
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 800619c:	4b40      	ldr	r3, [pc, #256]	@ (80062a0 <SystemClock_Config+0x120>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b3f      	ldr	r3, [pc, #252]	@ (80062a0 <SystemClock_Config+0x120>)
 80061a2:	2180      	movs	r1, #128	@ 0x80
 80061a4:	0249      	lsls	r1, r1, #9
 80061a6:	430a      	orrs	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 80061aa:	4b3d      	ldr	r3, [pc, #244]	@ (80062a0 <SystemClock_Config+0x120>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	4013      	ands	r3, r2
 80061b4:	60bb      	str	r3, [r7, #8]
		timeout--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <SystemClock_Config+0x48>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80061c8:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <SystemClock_Config+0x120>)
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b34      	ldr	r3, [pc, #208]	@ (80062a0 <SystemClock_Config+0x120>)
 80061ce:	4935      	ldr	r1, [pc, #212]	@ (80062a4 <SystemClock_Config+0x124>)
 80061d0:	400a      	ands	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80061d4:	4b32      	ldr	r3, [pc, #200]	@ (80062a0 <SystemClock_Config+0x120>)
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <SystemClock_Config+0x120>)
 80061da:	2180      	movs	r1, #128	@ 0x80
 80061dc:	0249      	lsls	r1, r1, #9
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80061e2:	4b2f      	ldr	r3, [pc, #188]	@ (80062a0 <SystemClock_Config+0x120>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80061e8:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <SystemClock_Config+0x120>)
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b2c      	ldr	r3, [pc, #176]	@ (80062a0 <SystemClock_Config+0x120>)
 80061ee:	492e      	ldr	r1, [pc, #184]	@ (80062a8 <SystemClock_Config+0x128>)
 80061f0:	400a      	ands	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80061f4:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <SystemClock_Config+0x120>)
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <SystemClock_Config+0x120>)
 80061fa:	2180      	movs	r1, #128	@ 0x80
 80061fc:	0349      	lsls	r1, r1, #13
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8006202:	4b27      	ldr	r3, [pc, #156]	@ (80062a0 <SystemClock_Config+0x120>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <SystemClock_Config+0x120>)
 8006208:	2180      	movs	r1, #128	@ 0x80
 800620a:	0449      	lsls	r1, r1, #17
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8006210:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <SystemClock_Config+0x120>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	049b      	lsls	r3, r3, #18
 8006218:	4013      	ands	r3, r2
 800621a:	607b      	str	r3, [r7, #4]
		timeout--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <SystemClock_Config+0xae>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f0      	bne.n	8006210 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 800622e:	4b1c      	ldr	r3, [pc, #112]	@ (80062a0 <SystemClock_Config+0x120>)
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4b1b      	ldr	r3, [pc, #108]	@ (80062a0 <SystemClock_Config+0x120>)
 8006234:	21f0      	movs	r1, #240	@ 0xf0
 8006236:	438a      	bics	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800623a:	4a19      	ldr	r2, [pc, #100]	@ (80062a0 <SystemClock_Config+0x120>)
 800623c:	4b18      	ldr	r3, [pc, #96]	@ (80062a0 <SystemClock_Config+0x120>)
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8006242:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <SystemClock_Config+0x120>)
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	4b16      	ldr	r3, [pc, #88]	@ (80062a0 <SystemClock_Config+0x120>)
 8006248:	4918      	ldr	r1, [pc, #96]	@ (80062ac <SystemClock_Config+0x12c>)
 800624a:	400a      	ands	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 800624e:	4a14      	ldr	r2, [pc, #80]	@ (80062a0 <SystemClock_Config+0x120>)
 8006250:	4b13      	ldr	r3, [pc, #76]	@ (80062a0 <SystemClock_Config+0x120>)
 8006252:	6852      	ldr	r2, [r2, #4]
 8006254:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8006256:	4b16      	ldr	r3, [pc, #88]	@ (80062b0 <SystemClock_Config+0x130>)
 8006258:	2211      	movs	r2, #17
 800625a:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800625c:	4b10      	ldr	r3, [pc, #64]	@ (80062a0 <SystemClock_Config+0x120>)
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <SystemClock_Config+0x120>)
 8006262:	2103      	movs	r1, #3
 8006264:	438a      	bics	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006268:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <SystemClock_Config+0x120>)
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <SystemClock_Config+0x120>)
 800626e:	2102      	movs	r1, #2
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8006274:	4b0a      	ldr	r3, [pc, #40]	@ (80062a0 <SystemClock_Config+0x120>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	220c      	movs	r2, #12
 800627a:	4013      	ands	r3, r2
 800627c:	603b      	str	r3, [r7, #0]
		timeout--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3b01      	subs	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d002      	beq.n	8006290 <SystemClock_Config+0x110>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f1      	bne.n	8006274 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8006290:	f000 fca0 	bl	8006bd4 <SystemCoreClockUpdate>
}
 8006294:	46c0      	nop			@ (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b004      	add	sp, #16
 800629a:	bd80      	pop	{r7, pc}
 800629c:	000f4240 	.word	0x000f4240
 80062a0:	40021000 	.word	0x40021000
 80062a4:	fffe7fff 	.word	0xfffe7fff
 80062a8:	ffc3ffff 	.word	0xffc3ffff
 80062ac:	fffff8ff 	.word	0xfffff8ff
 80062b0:	40022000 	.word	0x40022000

080062b4 <vTask1>:
/*
 *	Task_1
 */
void vTask1 (void *pvParameters)
{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b089      	sub	sp, #36	@ 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	uint8_t	msg[] = "This is task_1 message"; // 22 bytes string
 80062bc:	2308      	movs	r3, #8
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <vTask1+0x38>)
 80062c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80062c4:	c313      	stmia	r3!, {r0, r1, r4}
 80062c6:	ca03      	ldmia	r2!, {r0, r1}
 80062c8:	c303      	stmia	r3!, {r0, r1}
 80062ca:	8811      	ldrh	r1, [r2, #0]
 80062cc:	8019      	strh	r1, [r3, #0]
 80062ce:	7892      	ldrb	r2, [r2, #2]
 80062d0:	709a      	strb	r2, [r3, #2]

	while(1)
	{
		// Send message to Trace Recorder
		vTracePrint(ue2, (char *)msg);
 80062d2:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <vTask1+0x3c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2208      	movs	r2, #8
 80062d8:	18ba      	adds	r2, r7, r2
 80062da:	0011      	movs	r1, r2
 80062dc:	0018      	movs	r0, r3
 80062de:	f7fe fae1 	bl	80048a4 <xTracePrint>

		// Wait for 20ms
		vTaskDelay(20);
 80062e2:	2014      	movs	r0, #20
 80062e4:	f7fc f80e 	bl	8002304 <vTaskDelay>
		vTracePrint(ue2, (char *)msg);
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	e7f2      	b.n	80062d2 <vTask1+0x1e>
 80062ec:	08007568 	.word	0x08007568
 80062f0:	20003230 	.word	0x20003230

080062f4 <vTask2>:

/*
 *	Task_2
 */
void vTask2 (void *pvParameters)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b08d      	sub	sp, #52	@ 0x34
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	uint8_t	msg[] = "This is a much longer task_2 message"; // 36 bytes string
 80062fc:	2308      	movs	r3, #8
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <vTask2+0x38>)
 8006302:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006304:	c313      	stmia	r3!, {r0, r1, r4}
 8006306:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006308:	c313      	stmia	r3!, {r0, r1, r4}
 800630a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800630c:	c313      	stmia	r3!, {r0, r1, r4}
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		// Send message to trace Recorder
		vTracePrint(ue2, (char *)msg);
 8006312:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <vTask2+0x3c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2208      	movs	r2, #8
 8006318:	18ba      	adds	r2, r7, r2
 800631a:	0011      	movs	r1, r2
 800631c:	0018      	movs	r0, r3
 800631e:	f7fe fac1 	bl	80048a4 <xTracePrint>

		// Wait for 30ms
		vTaskDelay(30);
 8006322:	201e      	movs	r0, #30
 8006324:	f7fb ffee 	bl	8002304 <vTaskDelay>
		vTracePrint(ue2, (char *)msg);
 8006328:	46c0      	nop			@ (mov r8, r8)
 800632a:	e7f2      	b.n	8006312 <vTask2+0x1e>
 800632c:	08007580 	.word	0x08007580
 8006330:	20003230 	.word	0x20003230

08006334 <vTaskHWM>:

/*
 * vTaskHWM
 */
void vTaskHWM (void *pvParameters)
{
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
	uint32_t	count;
	uint16_t	hwm_Task1, hwm_Task2, hwm_TaskHWM;
	uint32_t	free_heap_size;

	count = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]

	// Prepare console layout using ANSI escape sequences
	my_printf("%c[0m",   0x1B);	// Remove all text attributes
 8006340:	4b62      	ldr	r3, [pc, #392]	@ (80064cc <vTaskHWM+0x198>)
 8006342:	211b      	movs	r1, #27
 8006344:	0018      	movs	r0, r3
 8006346:	f000 fad3 	bl	80068f0 <my_printf>
	my_printf("%c[2J",   0x1B); 	// Clear console
 800634a:	4b61      	ldr	r3, [pc, #388]	@ (80064d0 <vTaskHWM+0x19c>)
 800634c:	211b      	movs	r1, #27
 800634e:	0018      	movs	r0, r3
 8006350:	f000 face 	bl	80068f0 <my_printf>
	my_printf("%c[1;0H", 0x1B);	// Move cursor [1:0]
 8006354:	4b5f      	ldr	r3, [pc, #380]	@ (80064d4 <vTaskHWM+0x1a0>)
 8006356:	211b      	movs	r1, #27
 8006358:	0018      	movs	r0, r3
 800635a:	f000 fac9 	bl	80068f0 <my_printf>

	my_printf("High Water Marks console");
 800635e:	4b5e      	ldr	r3, [pc, #376]	@ (80064d8 <vTaskHWM+0x1a4>)
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fac5 	bl	80068f0 <my_printf>

	my_printf("%c[3;0H", 0x1B);	// Move cursor line 3
 8006366:	4b5d      	ldr	r3, [pc, #372]	@ (80064dc <vTaskHWM+0x1a8>)
 8006368:	211b      	movs	r1, #27
 800636a:	0018      	movs	r0, r3
 800636c:	f000 fac0 	bl	80068f0 <my_printf>
	my_printf("Iteration");
 8006370:	4b5b      	ldr	r3, [pc, #364]	@ (80064e0 <vTaskHWM+0x1ac>)
 8006372:	0018      	movs	r0, r3
 8006374:	f000 fabc 	bl	80068f0 <my_printf>

	my_printf("%c[4;0H", 0x1B);	// Move cursor line 4
 8006378:	4b5a      	ldr	r3, [pc, #360]	@ (80064e4 <vTaskHWM+0x1b0>)
 800637a:	211b      	movs	r1, #27
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fab7 	bl	80068f0 <my_printf>
	my_printf("Task1");
 8006382:	4b59      	ldr	r3, [pc, #356]	@ (80064e8 <vTaskHWM+0x1b4>)
 8006384:	0018      	movs	r0, r3
 8006386:	f000 fab3 	bl	80068f0 <my_printf>

	my_printf("%c[5;0H", 0x1B);	// Move cursor line 5
 800638a:	4b58      	ldr	r3, [pc, #352]	@ (80064ec <vTaskHWM+0x1b8>)
 800638c:	211b      	movs	r1, #27
 800638e:	0018      	movs	r0, r3
 8006390:	f000 faae 	bl	80068f0 <my_printf>
	my_printf("Task2");
 8006394:	4b56      	ldr	r3, [pc, #344]	@ (80064f0 <vTaskHWM+0x1bc>)
 8006396:	0018      	movs	r0, r3
 8006398:	f000 faaa 	bl	80068f0 <my_printf>

	my_printf("%c[6;0H", 0x1B);	// Move cursor line 6
 800639c:	4b55      	ldr	r3, [pc, #340]	@ (80064f4 <vTaskHWM+0x1c0>)
 800639e:	211b      	movs	r1, #27
 80063a0:	0018      	movs	r0, r3
 80063a2:	f000 faa5 	bl	80068f0 <my_printf>
	my_printf("TaskHWM");
 80063a6:	4b54      	ldr	r3, [pc, #336]	@ (80064f8 <vTaskHWM+0x1c4>)
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 faa1 	bl	80068f0 <my_printf>

	my_printf("%c[7;0H", 0x1B);	// Move cursor line 7
 80063ae:	4b53      	ldr	r3, [pc, #332]	@ (80064fc <vTaskHWM+0x1c8>)
 80063b0:	211b      	movs	r1, #27
 80063b2:	0018      	movs	r0, r3
 80063b4:	f000 fa9c 	bl	80068f0 <my_printf>
	my_printf("Free Heap");
 80063b8:	4b51      	ldr	r3, [pc, #324]	@ (8006500 <vTaskHWM+0x1cc>)
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fa98 	bl	80068f0 <my_printf>


	while(1)
	{
	  // Gather High Water Marks
	  hwm_Task1	= uxTaskGetStackHighWaterMark(vTask1_handle);
 80063c0:	4b50      	ldr	r3, [pc, #320]	@ (8006504 <vTaskHWM+0x1d0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7fc fd9d 	bl	8002f04 <uxTaskGetStackHighWaterMark>
 80063ca:	0002      	movs	r2, r0
 80063cc:	2412      	movs	r4, #18
 80063ce:	193b      	adds	r3, r7, r4
 80063d0:	801a      	strh	r2, [r3, #0]
	  hwm_Task2 	= uxTaskGetStackHighWaterMark(vTask2_handle);
 80063d2:	4b4d      	ldr	r3, [pc, #308]	@ (8006508 <vTaskHWM+0x1d4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fc fd94 	bl	8002f04 <uxTaskGetStackHighWaterMark>
 80063dc:	0002      	movs	r2, r0
 80063de:	2610      	movs	r6, #16
 80063e0:	19bb      	adds	r3, r7, r6
 80063e2:	801a      	strh	r2, [r3, #0]
	  hwm_TaskHWM	= uxTaskGetStackHighWaterMark(vTaskHWM_handle);
 80063e4:	4b49      	ldr	r3, [pc, #292]	@ (800650c <vTaskHWM+0x1d8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7fc fd8b 	bl	8002f04 <uxTaskGetStackHighWaterMark>
 80063ee:	0002      	movs	r2, r0
 80063f0:	230e      	movs	r3, #14
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	801a      	strh	r2, [r3, #0]

	  // Get free Heap size
	  free_heap_size = xPortGetFreeHeapSize();
 80063f6:	f7fd fb8b 	bl	8003b10 <xPortGetFreeHeapSize>
 80063fa:	0003      	movs	r3, r0
 80063fc:	60bb      	str	r3, [r7, #8]

	  // Reports watermarks into Trace Recorder
	  vTracePrintF(ue3, (char *)"1[%d] 2[%d] HWM[%d]",
 80063fe:	4b44      	ldr	r3, [pc, #272]	@ (8006510 <vTaskHWM+0x1dc>)
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	0025      	movs	r5, r4
 8006404:	193b      	adds	r3, r7, r4
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	19bb      	adds	r3, r7, r6
 800640a:	881c      	ldrh	r4, [r3, #0]
 800640c:	230e      	movs	r3, #14
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	4940      	ldr	r1, [pc, #256]	@ (8006514 <vTaskHWM+0x1e0>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	0023      	movs	r3, r4
 8006418:	f7fe f958 	bl	80046cc <xTracePrintF>
                             hwm_Task1,
                             hwm_Task2,
                             hwm_TaskHWM );

	  // Display results into console
	  my_printf("%c[0;31;40m", 0x1B); 	// Red over black
 800641c:	4b3e      	ldr	r3, [pc, #248]	@ (8006518 <vTaskHWM+0x1e4>)
 800641e:	211b      	movs	r1, #27
 8006420:	0018      	movs	r0, r3
 8006422:	f000 fa65 	bl	80068f0 <my_printf>

	  my_printf("%c[3;12H", 0x1B);
 8006426:	4b3d      	ldr	r3, [pc, #244]	@ (800651c <vTaskHWM+0x1e8>)
 8006428:	211b      	movs	r1, #27
 800642a:	0018      	movs	r0, r3
 800642c:	f000 fa60 	bl	80068f0 <my_printf>
	  my_printf("%5d", count);
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4b3b      	ldr	r3, [pc, #236]	@ (8006520 <vTaskHWM+0x1ec>)
 8006434:	0011      	movs	r1, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f000 fa5a 	bl	80068f0 <my_printf>

	  my_printf("%c[1;33;44m", 0x1B); 	// Yellow over blue
 800643c:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <vTaskHWM+0x1f0>)
 800643e:	211b      	movs	r1, #27
 8006440:	0018      	movs	r0, r3
 8006442:	f000 fa55 	bl	80068f0 <my_printf>

	  my_printf("%c[4;12H", 0x1B);
 8006446:	4b38      	ldr	r3, [pc, #224]	@ (8006528 <vTaskHWM+0x1f4>)
 8006448:	211b      	movs	r1, #27
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fa50 	bl	80068f0 <my_printf>
	  my_printf("%5d", hwm_Task1);
 8006450:	197b      	adds	r3, r7, r5
 8006452:	881a      	ldrh	r2, [r3, #0]
 8006454:	4b32      	ldr	r3, [pc, #200]	@ (8006520 <vTaskHWM+0x1ec>)
 8006456:	0011      	movs	r1, r2
 8006458:	0018      	movs	r0, r3
 800645a:	f000 fa49 	bl	80068f0 <my_printf>

	  my_printf("%c[5;12H", 0x1B);
 800645e:	4b33      	ldr	r3, [pc, #204]	@ (800652c <vTaskHWM+0x1f8>)
 8006460:	211b      	movs	r1, #27
 8006462:	0018      	movs	r0, r3
 8006464:	f000 fa44 	bl	80068f0 <my_printf>
	  my_printf("%5d", hwm_Task2);
 8006468:	19bb      	adds	r3, r7, r6
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	4b2c      	ldr	r3, [pc, #176]	@ (8006520 <vTaskHWM+0x1ec>)
 800646e:	0011      	movs	r1, r2
 8006470:	0018      	movs	r0, r3
 8006472:	f000 fa3d 	bl	80068f0 <my_printf>

	  my_printf("%c[6;12H", 0x1B);
 8006476:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <vTaskHWM+0x1fc>)
 8006478:	211b      	movs	r1, #27
 800647a:	0018      	movs	r0, r3
 800647c:	f000 fa38 	bl	80068f0 <my_printf>
	  my_printf("%5d", hwm_TaskHWM);
 8006480:	230e      	movs	r3, #14
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <vTaskHWM+0x1ec>)
 8006488:	0011      	movs	r1, r2
 800648a:	0018      	movs	r0, r3
 800648c:	f000 fa30 	bl	80068f0 <my_printf>

	  my_printf("%c[1;35;40m", 0x1B); 	// Majenta over black
 8006490:	4b28      	ldr	r3, [pc, #160]	@ (8006534 <vTaskHWM+0x200>)
 8006492:	211b      	movs	r1, #27
 8006494:	0018      	movs	r0, r3
 8006496:	f000 fa2b 	bl	80068f0 <my_printf>
	  my_printf("%c[7;12H", 0x1B);
 800649a:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <vTaskHWM+0x204>)
 800649c:	211b      	movs	r1, #27
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 fa26 	bl	80068f0 <my_printf>
	  my_printf("%5d", free_heap_size);
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006520 <vTaskHWM+0x1ec>)
 80064a8:	0011      	movs	r1, r2
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 fa20 	bl	80068f0 <my_printf>

	  my_printf("%c[0m", 0x1B); 		// Remove all text attributes
 80064b0:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <vTaskHWM+0x198>)
 80064b2:	211b      	movs	r1, #27
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 fa1b 	bl	80068f0 <my_printf>
	  count++;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	3301      	adds	r3, #1
 80064be:	617b      	str	r3, [r7, #20]

	  // Wait for 200ms
	  vTaskDelay(200);
 80064c0:	20c8      	movs	r0, #200	@ 0xc8
 80064c2:	f7fb ff1f 	bl	8002304 <vTaskDelay>
	  hwm_Task1	= uxTaskGetStackHighWaterMark(vTask1_handle);
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	e77a      	b.n	80063c0 <vTaskHWM+0x8c>
 80064ca:	46c0      	nop			@ (mov r8, r8)
 80064cc:	080075a8 	.word	0x080075a8
 80064d0:	080075b0 	.word	0x080075b0
 80064d4:	080075b8 	.word	0x080075b8
 80064d8:	080075c0 	.word	0x080075c0
 80064dc:	080075dc 	.word	0x080075dc
 80064e0:	080075e4 	.word	0x080075e4
 80064e4:	080075f0 	.word	0x080075f0
 80064e8:	080075f8 	.word	0x080075f8
 80064ec:	08007600 	.word	0x08007600
 80064f0:	08007608 	.word	0x08007608
 80064f4:	08007610 	.word	0x08007610
 80064f8:	08007618 	.word	0x08007618
 80064fc:	08007620 	.word	0x08007620
 8006500:	08007628 	.word	0x08007628
 8006504:	20003214 	.word	0x20003214
 8006508:	20003218 	.word	0x20003218
 800650c:	2000321c 	.word	0x2000321c
 8006510:	20003234 	.word	0x20003234
 8006514:	08007634 	.word	0x08007634
 8006518:	08007648 	.word	0x08007648
 800651c:	08007654 	.word	0x08007654
 8006520:	08007660 	.word	0x08007660
 8006524:	08007664 	.word	0x08007664
 8006528:	08007670 	.word	0x08007670
 800652c:	0800767c 	.word	0x0800767c
 8006530:	08007688 	.word	0x08007688
 8006534:	08007694 	.word	0x08007694
 8006538:	080076a0 	.word	0x080076a0

0800653c <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	if (str) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <printchar+0x26>
		**str = c;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
		++(*str);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8006560:	e00a      	b.n	8006578 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <printchar+0x44>)
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	2240      	movs	r2, #64	@ 0x40
 800656a:	4013      	ands	r3, r2
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	d1f9      	bne.n	8006564 <printchar+0x28>
		USART2->TDR = c;
 8006570:	4b03      	ldr	r3, [pc, #12]	@ (8006580 <printchar+0x44>)
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	b292      	uxth	r2, r2
 8006576:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8006578:	46c0      	nop			@ (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40004400 	.word	0x40004400

08006584 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	46c6      	mov	lr, r8
 8006588:	b500      	push	{lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8006596:	2400      	movs	r4, #0
 8006598:	2320      	movs	r3, #32
 800659a:	4698      	mov	r8, r3

	if (width > 0) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd16      	ble.n	80065d0 <prints+0x4c>
		register int len = 0;
 80065a2:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80065a4:	68be      	ldr	r6, [r7, #8]
 80065a6:	e001      	b.n	80065ac <prints+0x28>
 80065a8:	3501      	adds	r5, #1
 80065aa:	3601      	adds	r6, #1
 80065ac:	7833      	ldrb	r3, [r6, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1fa      	bne.n	80065a8 <prints+0x24>
		if (len >= width) width = 0;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	429d      	cmp	r5, r3
 80065b6:	db02      	blt.n	80065be <prints+0x3a>
 80065b8:	2300      	movs	r3, #0
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	e002      	b.n	80065c4 <prints+0x40>
		else width -= len;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	1b5b      	subs	r3, r3, r5
 80065c2:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2202      	movs	r2, #2
 80065c8:	4013      	ands	r3, r2
 80065ca:	d001      	beq.n	80065d0 <prints+0x4c>
 80065cc:	2330      	movs	r3, #48	@ 0x30
 80065ce:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	4013      	ands	r3, r2
 80065d6:	d119      	bne.n	800660c <prints+0x88>
		for ( ; width > 0; --width) {
 80065d8:	e008      	b.n	80065ec <prints+0x68>
			printchar (out, padchar);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4641      	mov	r1, r8
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff ffac 	bl	800653c <printchar>
			++pc;
 80065e4:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	dcf3      	bgt.n	80065da <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 80065f2:	e00b      	b.n	800660c <prints+0x88>
		printchar (out, *string);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	001a      	movs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	0011      	movs	r1, r2
 80065fe:	0018      	movs	r0, r3
 8006600:	f7ff ff9c 	bl	800653c <printchar>
		++pc;
 8006604:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3301      	adds	r3, #1
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ef      	bne.n	80065f4 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8006614:	e008      	b.n	8006628 <prints+0xa4>
		printchar (out, padchar);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4641      	mov	r1, r8
 800661a:	0018      	movs	r0, r3
 800661c:	f7ff ff8e 	bl	800653c <printchar>
		++pc;
 8006620:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3b01      	subs	r3, #1
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	dcf3      	bgt.n	8006616 <prints+0x92>
	}

	return pc;
 800662e:	0023      	movs	r3, r4
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bc80      	pop	{r7}
 8006638:	46b8      	mov	r8, r7
 800663a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800663c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800663c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663e:	46ce      	mov	lr, r9
 8006640:	4647      	mov	r7, r8
 8006642:	b580      	push	{r7, lr}
 8006644:	b089      	sub	sp, #36	@ 0x24
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	4699      	mov	r9, r3
 8006654:	2600      	movs	r6, #0
	register unsigned int u = i;
 8006656:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <printi+0x40>
		print_buf[0] = '0';
 800665e:	2114      	movs	r1, #20
 8006660:	187b      	adds	r3, r7, r1
 8006662:	2230      	movs	r2, #48	@ 0x30
 8006664:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8006666:	187b      	adds	r3, r7, r1
 8006668:	2200      	movs	r2, #0
 800666a:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 800666c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006670:	1879      	adds	r1, r7, r1
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff ff86 	bl	8006584 <prints>
 8006678:	0003      	movs	r3, r0
 800667a:	e04e      	b.n	800671a <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <printi+0x5c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b0a      	cmp	r3, #10
 8006686:	d107      	bne.n	8006698 <printi+0x5c>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da04      	bge.n	8006698 <printi+0x5c>
		neg = 1;
 800668e:	2301      	movs	r3, #1
 8006690:	4699      	mov	r9, r3
		u = -i;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	425b      	negs	r3, r3
 8006696:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8006698:	2314      	movs	r3, #20
 800669a:	18fc      	adds	r4, r7, r3
 800669c:	340b      	adds	r4, #11
	*s = '\0';
 800669e:	2300      	movs	r3, #0
 80066a0:	7023      	strb	r3, [r4, #0]

	while (u) {
 80066a2:	e019      	b.n	80066d8 <printi+0x9c>
		t = u % b;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0019      	movs	r1, r3
 80066a8:	0028      	movs	r0, r5
 80066aa:	f7f9 fdb3 	bl	8000214 <__aeabi_uidivmod>
 80066ae:	000b      	movs	r3, r1
 80066b0:	4698      	mov	r8, r3
		if( t >= 10 )
 80066b2:	4643      	mov	r3, r8
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	dd02      	ble.n	80066be <printi+0x82>
			t += letbase - '0' - 10;
 80066b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ba:	3b3a      	subs	r3, #58	@ 0x3a
 80066bc:	4498      	add	r8, r3
		*--s = t + '0';
 80066be:	4643      	mov	r3, r8
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	3c01      	subs	r4, #1
 80066c4:	3330      	adds	r3, #48	@ 0x30
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	7023      	strb	r3, [r4, #0]
		u /= b;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	0019      	movs	r1, r3
 80066ce:	0028      	movs	r0, r5
 80066d0:	f7f9 fd1a 	bl	8000108 <__udivsi3>
 80066d4:	0003      	movs	r3, r0
 80066d6:	001d      	movs	r5, r3
	while (u) {
 80066d8:	2d00      	cmp	r5, #0
 80066da:	d1e3      	bne.n	80066a4 <printi+0x68>
	}

	if (neg) {
 80066dc:	464b      	mov	r3, r9
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d013      	beq.n	800670a <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 80066e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <printi+0xc8>
 80066e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ea:	2202      	movs	r2, #2
 80066ec:	4013      	ands	r3, r2
 80066ee:	d009      	beq.n	8006704 <printi+0xc8>
			printchar (out, '-');
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	212d      	movs	r1, #45	@ 0x2d
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff ff21 	bl	800653c <printchar>
			++pc;
 80066fa:	3601      	adds	r6, #1
			--width;
 80066fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fe:	3b01      	subs	r3, #1
 8006700:	643b      	str	r3, [r7, #64]	@ 0x40
 8006702:	e002      	b.n	800670a <printi+0xce>
		}
		else {
			*--s = '-';
 8006704:	3c01      	subs	r4, #1
 8006706:	232d      	movs	r3, #45	@ 0x2d
 8006708:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800670a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	0021      	movs	r1, r4
 8006712:	f7ff ff37 	bl	8006584 <prints>
 8006716:	0003      	movs	r3, r0
 8006718:	18f3      	adds	r3, r6, r3
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b009      	add	sp, #36	@ 0x24
 8006720:	bcc0      	pop	{r6, r7}
 8006722:	46b9      	mov	r9, r7
 8006724:	46b0      	mov	r8, r6
 8006726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006728 <print>:

static int print(char **out, const char *format, va_list args )
{
 8006728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672a:	b08b      	sub	sp, #44	@ 0x2c
 800672c:	af04      	add	r7, sp, #16
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8006734:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8006736:	e0c6      	b.n	80068c6 <print+0x19e>
		if (*format == '%') {
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b25      	cmp	r3, #37	@ 0x25
 800673e:	d000      	beq.n	8006742 <print+0x1a>
 8006740:	e0b2      	b.n	80068a8 <print+0x180>
			++format;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3301      	adds	r3, #1
 8006746:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8006748:	2600      	movs	r6, #0
 800674a:	0035      	movs	r5, r6
			if (*format == '\0') break;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d100      	bne.n	8006756 <print+0x2e>
 8006754:	e0bd      	b.n	80068d2 <print+0x1aa>
			if (*format == '%') goto out;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b25      	cmp	r3, #37	@ 0x25
 800675c:	d100      	bne.n	8006760 <print+0x38>
 800675e:	e0a5      	b.n	80068ac <print+0x184>
			if (*format == '-') {
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b2d      	cmp	r3, #45	@ 0x2d
 8006766:	d10a      	bne.n	800677e <print+0x56>
				++format;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	3301      	adds	r3, #1
 800676c:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800676e:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8006770:	e005      	b.n	800677e <print+0x56>
				++format;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8006778:	2302      	movs	r3, #2
 800677a:	4333      	orrs	r3, r6
 800677c:	001e      	movs	r6, r3
			while (*format == '0') {
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b30      	cmp	r3, #48	@ 0x30
 8006784:	d0f5      	beq.n	8006772 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8006786:	e00b      	b.n	80067a0 <print+0x78>
				width *= 10;
 8006788:	002b      	movs	r3, r5
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	195b      	adds	r3, r3, r5
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	001d      	movs	r5, r3
				width += *format - '0';
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	3b30      	subs	r3, #48	@ 0x30
 8006798:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3301      	adds	r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80067a6:	d903      	bls.n	80067b0 <print+0x88>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b39      	cmp	r3, #57	@ 0x39
 80067ae:	d9eb      	bls.n	8006788 <print+0x60>
			}
			if( *format == 's' ) {
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b73      	cmp	r3, #115	@ 0x73
 80067b6:	d10f      	bne.n	80067d8 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 80067c2:	d000      	beq.n	80067c6 <print+0x9e>
 80067c4:	e000      	b.n	80067c8 <print+0xa0>
 80067c6:	4949      	ldr	r1, [pc, #292]	@ (80068ec <print+0x1c4>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	0033      	movs	r3, r6
 80067cc:	002a      	movs	r2, r5
 80067ce:	f7ff fed9 	bl	8006584 <prints>
 80067d2:	0003      	movs	r3, r0
 80067d4:	18e4      	adds	r4, r4, r3
				continue;
 80067d6:	e073      	b.n	80068c0 <print+0x198>
			}
			if( *format == 'd' ) {
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b64      	cmp	r3, #100	@ 0x64
 80067de:	d10f      	bne.n	8006800 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	6819      	ldr	r1, [r3, #0]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	2361      	movs	r3, #97	@ 0x61
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	9601      	str	r6, [sp, #4]
 80067f0:	9500      	str	r5, [sp, #0]
 80067f2:	2301      	movs	r3, #1
 80067f4:	220a      	movs	r2, #10
 80067f6:	f7ff ff21 	bl	800663c <printi>
 80067fa:	0003      	movs	r3, r0
 80067fc:	18e4      	adds	r4, r4, r3
				continue;
 80067fe:	e05f      	b.n	80068c0 <print+0x198>
			}
			if( *format == 'x' ) {
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b78      	cmp	r3, #120	@ 0x78
 8006806:	d10f      	bne.n	8006828 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	2361      	movs	r3, #97	@ 0x61
 8006814:	9302      	str	r3, [sp, #8]
 8006816:	9601      	str	r6, [sp, #4]
 8006818:	9500      	str	r5, [sp, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2210      	movs	r2, #16
 800681e:	f7ff ff0d 	bl	800663c <printi>
 8006822:	0003      	movs	r3, r0
 8006824:	18e4      	adds	r4, r4, r3
				continue;
 8006826:	e04b      	b.n	80068c0 <print+0x198>
			}
			if( *format == 'X' ) {
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b58      	cmp	r3, #88	@ 0x58
 800682e:	d10f      	bne.n	8006850 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	6819      	ldr	r1, [r3, #0]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	2341      	movs	r3, #65	@ 0x41
 800683c:	9302      	str	r3, [sp, #8]
 800683e:	9601      	str	r6, [sp, #4]
 8006840:	9500      	str	r5, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	2210      	movs	r2, #16
 8006846:	f7ff fef9 	bl	800663c <printi>
 800684a:	0003      	movs	r3, r0
 800684c:	18e4      	adds	r4, r4, r3
				continue;
 800684e:	e037      	b.n	80068c0 <print+0x198>
			}
			if( *format == 'u' ) {
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b75      	cmp	r3, #117	@ 0x75
 8006856:	d10f      	bne.n	8006878 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	2361      	movs	r3, #97	@ 0x61
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	9601      	str	r6, [sp, #4]
 8006868:	9500      	str	r5, [sp, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	220a      	movs	r2, #10
 800686e:	f7ff fee5 	bl	800663c <printi>
 8006872:	0003      	movs	r3, r0
 8006874:	18e4      	adds	r4, r4, r3
				continue;
 8006876:	e023      	b.n	80068c0 <print+0x198>
			}
			if( *format == 'c' ) {
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b63      	cmp	r3, #99	@ 0x63
 800687e:	d11f      	bne.n	80068c0 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	2114      	movs	r1, #20
 800688c:	187b      	adds	r3, r7, r1
 800688e:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8006890:	187b      	adds	r3, r7, r1
 8006892:	2200      	movs	r2, #0
 8006894:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8006896:	1879      	adds	r1, r7, r1
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	0033      	movs	r3, r6
 800689c:	002a      	movs	r2, r5
 800689e:	f7ff fe71 	bl	8006584 <prints>
 80068a2:	0003      	movs	r3, r0
 80068a4:	18e4      	adds	r4, r4, r3
				continue;
 80068a6:	e00b      	b.n	80068c0 <print+0x198>
			}
		}
		else {
		out:
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	e000      	b.n	80068ae <print+0x186>
			if (*format == '%') goto out;
 80068ac:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	001a      	movs	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff fe3f 	bl	800653c <printchar>
			++pc;
 80068be:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d000      	beq.n	80068d0 <print+0x1a8>
 80068ce:	e733      	b.n	8006738 <print+0x10>
 80068d0:	e000      	b.n	80068d4 <print+0x1ac>
			if (*format == '\0') break;
 80068d2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <print+0x1ba>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80068e2:	0023      	movs	r3, r4
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b007      	add	sp, #28
 80068ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ec:	080076d4 	.word	0x080076d4

080068f0 <my_printf>:

int my_printf(const char *format, ...)
{
 80068f0:	b40f      	push	{r0, r1, r2, r3}
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 80068f8:	2314      	movs	r3, #20
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	0019      	movs	r1, r3
 8006904:	2000      	movs	r0, #0
 8006906:	f7ff ff0f 	bl	8006728 <print>
 800690a:	0003      	movs	r3, r0
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b002      	add	sp, #8
 8006912:	bc80      	pop	{r7}
 8006914:	bc08      	pop	{r3}
 8006916:	b004      	add	sp, #16
 8006918:	4718      	bx	r3

0800691a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	af00      	add	r7, sp, #0
}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006928:	46c0      	nop			@ (mov r8, r8)
 800692a:	e7fd      	b.n	8006928 <HardFault_Handler+0x4>

0800692c <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 8006936:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <EXTI4_15_IRQHandler+0x44>)
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	2380      	movs	r3, #128	@ 0x80
 800693c:	019b      	lsls	r3, r3, #6
 800693e:	4013      	ands	r3, r2
 8006940:	d011      	beq.n	8006966 <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 8006942:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <EXTI4_15_IRQHandler+0x44>)
 8006944:	2280      	movs	r2, #128	@ 0x80
 8006946:	0192      	lsls	r2, r2, #6
 8006948:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 800694a:	4b0a      	ldr	r3, [pc, #40]	@ (8006974 <EXTI4_15_IRQHandler+0x48>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	1d3a      	adds	r2, r7, #4
 8006950:	0011      	movs	r1, r2
 8006952:	0018      	movs	r0, r3
 8006954:	f7fa fe34 	bl	80015c0 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <EXTI4_15_IRQHandler+0x3a>
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <EXTI4_15_IRQHandler+0x4c>)
 8006960:	2280      	movs	r2, #128	@ 0x80
 8006962:	0552      	lsls	r2, r2, #21
 8006964:	601a      	str	r2, [r3, #0]
	}
}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	46bd      	mov	sp, r7
 800696a:	b002      	add	sp, #8
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	40010400 	.word	0x40010400
 8006974:	20003220 	.word	0x20003220
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006980:	4b22      	ldr	r3, [pc, #136]	@ (8006a0c <BSP_LED_Init+0x90>)
 8006982:	695a      	ldr	r2, [r3, #20]
 8006984:	4b21      	ldr	r3, [pc, #132]	@ (8006a0c <BSP_LED_Init+0x90>)
 8006986:	2180      	movs	r1, #128	@ 0x80
 8006988:	0289      	lsls	r1, r1, #10
 800698a:	430a      	orrs	r2, r1
 800698c:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800698e:	2390      	movs	r3, #144	@ 0x90
 8006990:	05db      	lsls	r3, r3, #23
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2390      	movs	r3, #144	@ 0x90
 8006996:	05db      	lsls	r3, r3, #23
 8006998:	491d      	ldr	r1, [pc, #116]	@ (8006a10 <BSP_LED_Init+0x94>)
 800699a:	400a      	ands	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 800699e:	2390      	movs	r3, #144	@ 0x90
 80069a0:	05db      	lsls	r3, r3, #23
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	2390      	movs	r3, #144	@ 0x90
 80069a6:	05db      	lsls	r3, r3, #23
 80069a8:	2180      	movs	r1, #128	@ 0x80
 80069aa:	00c9      	lsls	r1, r1, #3
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 80069b0:	2390      	movs	r3, #144	@ 0x90
 80069b2:	05db      	lsls	r3, r3, #23
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	2390      	movs	r3, #144	@ 0x90
 80069b8:	05db      	lsls	r3, r3, #23
 80069ba:	2120      	movs	r1, #32
 80069bc:	438a      	bics	r2, r1
 80069be:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 80069c0:	2390      	movs	r3, #144	@ 0x90
 80069c2:	05db      	lsls	r3, r3, #23
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	2390      	movs	r3, #144	@ 0x90
 80069c8:	05db      	lsls	r3, r3, #23
 80069ca:	4911      	ldr	r1, [pc, #68]	@ (8006a10 <BSP_LED_Init+0x94>)
 80069cc:	400a      	ands	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80069d0:	2390      	movs	r3, #144	@ 0x90
 80069d2:	05db      	lsls	r3, r3, #23
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	2390      	movs	r3, #144	@ 0x90
 80069d8:	05db      	lsls	r3, r3, #23
 80069da:	21c0      	movs	r1, #192	@ 0xc0
 80069dc:	0109      	lsls	r1, r1, #4
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80069e2:	2390      	movs	r3, #144	@ 0x90
 80069e4:	05db      	lsls	r3, r3, #23
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	2390      	movs	r3, #144	@ 0x90
 80069ea:	05db      	lsls	r3, r3, #23
 80069ec:	4908      	ldr	r1, [pc, #32]	@ (8006a10 <BSP_LED_Init+0x94>)
 80069ee:	400a      	ands	r2, r1
 80069f0:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 80069f2:	2390      	movs	r3, #144	@ 0x90
 80069f4:	05db      	lsls	r3, r3, #23
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	2390      	movs	r3, #144	@ 0x90
 80069fa:	05db      	lsls	r3, r3, #23
 80069fc:	2180      	movs	r1, #128	@ 0x80
 80069fe:	0389      	lsls	r1, r1, #14
 8006a00:	430a      	orrs	r2, r1
 8006a02:	619a      	str	r2, [r3, #24]
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	fffff3ff 	.word	0xfffff3ff

08006a14 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8006a18:	4b1f      	ldr	r3, [pc, #124]	@ (8006a98 <BSP_PB_Init+0x84>)
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <BSP_PB_Init+0x84>)
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	0309      	lsls	r1, r1, #12
 8006a22:	430a      	orrs	r2, r1
 8006a24:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8006a26:	4b1d      	ldr	r3, [pc, #116]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a2c:	491c      	ldr	r1, [pc, #112]	@ (8006aa0 <BSP_PB_Init+0x8c>)
 8006a2e:	400a      	ands	r2, r1
 8006a30:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8006a32:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a34:	4b19      	ldr	r3, [pc, #100]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8006a3a:	4b18      	ldr	r3, [pc, #96]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <BSP_PB_Init+0x88>)
 8006a40:	4917      	ldr	r1, [pc, #92]	@ (8006aa0 <BSP_PB_Init+0x8c>)
 8006a42:	400a      	ands	r2, r1
 8006a44:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006a46:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <BSP_PB_Init+0x84>)
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	4b13      	ldr	r3, [pc, #76]	@ (8006a98 <BSP_PB_Init+0x84>)
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 8006a52:	4b14      	ldr	r3, [pc, #80]	@ (8006aa4 <BSP_PB_Init+0x90>)
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	4b13      	ldr	r3, [pc, #76]	@ (8006aa4 <BSP_PB_Init+0x90>)
 8006a58:	21f0      	movs	r1, #240	@ 0xf0
 8006a5a:	438a      	bics	r2, r1
 8006a5c:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 8006a5e:	4b11      	ldr	r3, [pc, #68]	@ (8006aa4 <BSP_PB_Init+0x90>)
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <BSP_PB_Init+0x90>)
 8006a64:	2120      	movs	r1, #32
 8006a66:	430a      	orrs	r2, r1
 8006a68:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a70:	2180      	movs	r1, #128	@ 0x80
 8006a72:	0189      	lsls	r1, r1, #6
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a7e:	490b      	ldr	r1, [pc, #44]	@ (8006aac <BSP_PB_Init+0x98>)
 8006a80:	400a      	ands	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8006a84:	4b08      	ldr	r3, [pc, #32]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <BSP_PB_Init+0x94>)
 8006a8a:	2180      	movs	r1, #128	@ 0x80
 8006a8c:	0189      	lsls	r1, r1, #6
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	60da      	str	r2, [r3, #12]
}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	48000800 	.word	0x48000800
 8006aa0:	f3ffffff 	.word	0xf3ffffff
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40010400 	.word	0x40010400
 8006aac:	ffffdfff 	.word	0xffffdfff

08006ab0 <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	0289      	lsls	r1, r1, #10
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006ac2:	2390      	movs	r3, #144	@ 0x90
 8006ac4:	05db      	lsls	r3, r3, #23
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	2390      	movs	r3, #144	@ 0x90
 8006aca:	05db      	lsls	r3, r3, #23
 8006acc:	21f0      	movs	r1, #240	@ 0xf0
 8006ace:	438a      	bics	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006ad2:	2390      	movs	r3, #144	@ 0x90
 8006ad4:	05db      	lsls	r3, r3, #23
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2390      	movs	r3, #144	@ 0x90
 8006ada:	05db      	lsls	r3, r3, #23
 8006adc:	21a0      	movs	r1, #160	@ 0xa0
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006ae2:	2390      	movs	r3, #144	@ 0x90
 8006ae4:	05db      	lsls	r3, r3, #23
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	2390      	movs	r3, #144	@ 0x90
 8006aea:	05db      	lsls	r3, r3, #23
 8006aec:	491e      	ldr	r1, [pc, #120]	@ (8006b68 <BSP_Console_Init+0xb8>)
 8006aee:	400a      	ands	r2, r1
 8006af0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006af2:	2390      	movs	r3, #144	@ 0x90
 8006af4:	05db      	lsls	r3, r3, #23
 8006af6:	6a1a      	ldr	r2, [r3, #32]
 8006af8:	2390      	movs	r3, #144	@ 0x90
 8006afa:	05db      	lsls	r3, r3, #23
 8006afc:	2188      	movs	r1, #136	@ 0x88
 8006afe:	0149      	lsls	r1, r1, #5
 8006b00:	430a      	orrs	r2, r1
 8006b02:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006b04:	4b17      	ldr	r3, [pc, #92]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006b0a:	2180      	movs	r1, #128	@ 0x80
 8006b0c:	0289      	lsls	r1, r1, #10
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006b12:	4b16      	ldr	r3, [pc, #88]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006b18:	4b14      	ldr	r3, [pc, #80]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8006b24:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <BSP_Console_Init+0xb4>)
 8006b2a:	4911      	ldr	r1, [pc, #68]	@ (8006b70 <BSP_Console_Init+0xc0>)
 8006b2c:	400a      	ands	r2, r1
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8006b30:	4b0e      	ldr	r3, [pc, #56]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b36:	2180      	movs	r1, #128	@ 0x80
 8006b38:	0209      	lsls	r1, r1, #8
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b40:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <BSP_Console_Init+0xc4>)
 8006b42:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8006b44:	4b09      	ldr	r3, [pc, #36]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b4a:	210c      	movs	r1, #12
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8006b50:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <BSP_Console_Init+0xbc>)
 8006b56:	2101      	movs	r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
}
 8006b5c:	46c0      	nop			@ (mov r8, r8)
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			@ (mov r8, r8)
 8006b64:	40021000 	.word	0x40021000
 8006b68:	ffff00ff 	.word	0xffff00ff
 8006b6c:	40004400 	.word	0x40004400
 8006b70:	fffcffff 	.word	0xfffcffff
 8006b74:	00000341 	.word	0x00000341

08006b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006b78:	480d      	ldr	r0, [pc, #52]	@ (8006bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b7c:	f000 f825 	bl	8006bca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b80:	480c      	ldr	r0, [pc, #48]	@ (8006bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b82:	490d      	ldr	r1, [pc, #52]	@ (8006bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b84:	4a0d      	ldr	r2, [pc, #52]	@ (8006bbc <LoopForever+0xe>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b88:	e002      	b.n	8006b90 <LoopCopyDataInit>

08006b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b8e:	3304      	adds	r3, #4

08006b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b94:	d3f9      	bcc.n	8006b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b96:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b98:	4c0a      	ldr	r4, [pc, #40]	@ (8006bc4 <LoopForever+0x16>)
  movs r3, #0
 8006b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b9c:	e001      	b.n	8006ba2 <LoopFillZerobss>

08006b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ba0:	3204      	adds	r2, #4

08006ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ba4:	d3fb      	bcc.n	8006b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006ba6:	f000 f8b5 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006baa:	f7ff f9e5 	bl	8005f78 <main>

08006bae <LoopForever>:

LoopForever:
    b LoopForever
 8006bae:	e7fe      	b.n	8006bae <LoopForever>
  ldr   r0, =_estack
 8006bb0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bb8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8006bbc:	080077c4 	.word	0x080077c4
  ldr r2, =_sbss
 8006bc0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8006bc4:	20003238 	.word	0x20003238

08006bc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006bc8:	e7fe      	b.n	8006bc8 <ADC1_COMP_IRQHandler>

08006bca <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	2300      	movs	r3, #0
 8006be8:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006bea:	4b38      	ldr	r3, [pc, #224]	@ (8006ccc <SystemCoreClockUpdate+0xf8>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	220c      	movs	r2, #12
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d011      	beq.n	8006c1e <SystemCoreClockUpdate+0x4a>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d84f      	bhi.n	8006ca0 <SystemCoreClockUpdate+0xcc>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <SystemCoreClockUpdate+0x3a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d004      	beq.n	8006c16 <SystemCoreClockUpdate+0x42>
 8006c0c:	e048      	b.n	8006ca0 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006c0e:	4b30      	ldr	r3, [pc, #192]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006c10:	4a30      	ldr	r2, [pc, #192]	@ (8006cd4 <SystemCoreClockUpdate+0x100>)
 8006c12:	601a      	str	r2, [r3, #0]
      break;
 8006c14:	e048      	b.n	8006ca8 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006c16:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006c18:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd4 <SystemCoreClockUpdate+0x100>)
 8006c1a:	601a      	str	r2, [r3, #0]
      break;
 8006c1c:	e044      	b.n	8006ca8 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ccc <SystemCoreClockUpdate+0xf8>)
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	23f0      	movs	r3, #240	@ 0xf0
 8006c24:	039b      	lsls	r3, r3, #14
 8006c26:	4013      	ands	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006c2a:	4b28      	ldr	r3, [pc, #160]	@ (8006ccc <SystemCoreClockUpdate+0xf8>)
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	23c0      	movs	r3, #192	@ 0xc0
 8006c30:	025b      	lsls	r3, r3, #9
 8006c32:	4013      	ands	r3, r2
 8006c34:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	0c9b      	lsrs	r3, r3, #18
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8006c3e:	4b23      	ldr	r3, [pc, #140]	@ (8006ccc <SystemCoreClockUpdate+0xf8>)
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	220f      	movs	r2, #15
 8006c44:	4013      	ands	r3, r2
 8006c46:	3301      	adds	r3, #1
 8006c48:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	2380      	movs	r3, #128	@ 0x80
 8006c4e:	025b      	lsls	r3, r3, #9
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d10a      	bne.n	8006c6a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	481f      	ldr	r0, [pc, #124]	@ (8006cd4 <SystemCoreClockUpdate+0x100>)
 8006c58:	f7f9 fa56 	bl	8000108 <__udivsi3>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	001a      	movs	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	435a      	muls	r2, r3
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006c66:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8006c68:	e01e      	b.n	8006ca8 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	23c0      	movs	r3, #192	@ 0xc0
 8006c6e:	025b      	lsls	r3, r3, #9
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d10a      	bne.n	8006c8a <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	4818      	ldr	r0, [pc, #96]	@ (8006cd8 <SystemCoreClockUpdate+0x104>)
 8006c78:	f7f9 fa46 	bl	8000108 <__udivsi3>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	001a      	movs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	435a      	muls	r2, r3
 8006c84:	4b12      	ldr	r3, [pc, #72]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006c86:	601a      	str	r2, [r3, #0]
      break;
 8006c88:	e00e      	b.n	8006ca8 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	4811      	ldr	r0, [pc, #68]	@ (8006cd4 <SystemCoreClockUpdate+0x100>)
 8006c8e:	f7f9 fa3b 	bl	8000108 <__udivsi3>
 8006c92:	0003      	movs	r3, r0
 8006c94:	001a      	movs	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	435a      	muls	r2, r3
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006c9c:	601a      	str	r2, [r3, #0]
      break;
 8006c9e:	e003      	b.n	8006ca8 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd4 <SystemCoreClockUpdate+0x100>)
 8006ca4:	601a      	str	r2, [r3, #0]
      break;
 8006ca6:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006ca8:	4b08      	ldr	r3, [pc, #32]	@ (8006ccc <SystemCoreClockUpdate+0xf8>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	220f      	movs	r2, #15
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <SystemCoreClockUpdate+0x108>)
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006cb8:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	40da      	lsrs	r2, r3
 8006cc0:	4b03      	ldr	r3, [pc, #12]	@ (8006cd0 <SystemCoreClockUpdate+0xfc>)
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	46c0      	nop			@ (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	20000014 	.word	0x20000014
 8006cd4:	007a1200 	.word	0x007a1200
 8006cd8:	02dc6c00 	.word	0x02dc6c00
 8006cdc:	080077ac 	.word	0x080077ac

08006ce0 <memset>:
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	1882      	adds	r2, r0, r2
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d100      	bne.n	8006cea <memset+0xa>
 8006ce8:	4770      	bx	lr
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	e7f9      	b.n	8006ce4 <memset+0x4>

08006cf0 <strncmp>:
 8006cf0:	b530      	push	{r4, r5, lr}
 8006cf2:	0005      	movs	r5, r0
 8006cf4:	1e10      	subs	r0, r2, #0
 8006cf6:	d00b      	beq.n	8006d10 <strncmp+0x20>
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	5d2b      	ldrb	r3, [r5, r4]
 8006cfe:	5d08      	ldrb	r0, [r1, r4]
 8006d00:	4283      	cmp	r3, r0
 8006d02:	d104      	bne.n	8006d0e <strncmp+0x1e>
 8006d04:	42a2      	cmp	r2, r4
 8006d06:	d002      	beq.n	8006d0e <strncmp+0x1e>
 8006d08:	3401      	adds	r4, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f6      	bne.n	8006cfc <strncmp+0xc>
 8006d0e:	1a18      	subs	r0, r3, r0
 8006d10:	bd30      	pop	{r4, r5, pc}
	...

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	2600      	movs	r6, #0
 8006d18:	4c0c      	ldr	r4, [pc, #48]	@ (8006d4c <__libc_init_array+0x38>)
 8006d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d50 <__libc_init_array+0x3c>)
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	2600      	movs	r6, #0
 8006d26:	f000 f823 	bl	8006d70 <_init>
 8006d2a:	4c0a      	ldr	r4, [pc, #40]	@ (8006d54 <__libc_init_array+0x40>)
 8006d2c:	4d0a      	ldr	r5, [pc, #40]	@ (8006d58 <__libc_init_array+0x44>)
 8006d2e:	1b64      	subs	r4, r4, r5
 8006d30:	10a4      	asrs	r4, r4, #2
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	00b3      	lsls	r3, r6, #2
 8006d3a:	58eb      	ldr	r3, [r5, r3]
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	00b3      	lsls	r3, r6, #2
 8006d44:	58eb      	ldr	r3, [r5, r3]
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	080077bc 	.word	0x080077bc
 8006d50:	080077bc 	.word	0x080077bc
 8006d54:	080077c0 	.word	0x080077c0
 8006d58:	080077bc 	.word	0x080077bc

08006d5c <memcpy>:
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d100      	bne.n	8006d66 <memcpy+0xa>
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	5ccc      	ldrb	r4, [r1, r3]
 8006d68:	54c4      	strb	r4, [r0, r3]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	e7f8      	b.n	8006d60 <memcpy+0x4>
	...

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	46c0      	nop			@ (mov r8, r8)
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	46c0      	nop			@ (mov r8, r8)
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
