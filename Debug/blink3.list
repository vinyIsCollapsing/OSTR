
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005cf0  08005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08005cf8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e14  20000018  08005d10  00007018  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002e2c  08005d10  00007e2c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008ef3  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d80  00000000  00000000  0000ff33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000998  00000000  00000000  00011cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000740  00000000  00000000  00012650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002cd5  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c36b  00000000  00000000  00015a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000757a5  00000000  00000000  00021dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00097575  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002194  00000000  00000000  000975b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  0009974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005564 	.word	0x08005564

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005564 	.word	0x08005564

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000226:	201c      	movs	r0, #28
 8000228:	f002 fd2a 	bl	8002c80 <pvPortMalloc>
 800022c:	0003      	movs	r3, r0
 800022e:	607b      	str	r3, [r7, #4]

        if( pxEventBits != NULL )
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d053      	beq.n	80002de <xEventGroupCreate+0xbe>
        {
            pxEventBits->uxEventBits = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3304      	adds	r3, #4
 8000240:	0018      	movs	r0, r3
 8000242:	f000 f889 	bl	8000358 <vListInitialise>
                 * later deleted. */
                pxEventBits->ucStaticallyAllocated = pdFALSE;
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            traceEVENT_GROUP_CREATE( pxEventBits );
 8000246:	2006      	movs	r0, #6
 8000248:	f003 fe78 	bl	8003f3c <prvTraceGetObjectHandle>
 800024c:	0003      	movs	r3, r0
 800024e:	001a      	movs	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0011      	movs	r1, r2
 8000254:	0018      	movs	r0, r3
 8000256:	f002 fe5e 	bl	8002f16 <prvTraceSetEventGroupNumberLow16>
 800025a:	4b2d      	ldr	r3, [pc, #180]	@ (8000310 <xEventGroupCreate+0xf0>)
 800025c:	881a      	ldrh	r2, [r3, #0]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	0011      	movs	r1, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fe71 	bl	8002f4a <prvTraceSetEventGroupNumberHigh16>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	0018      	movs	r0, r3
 800026c:	f002 fe36 	bl	8002edc <prvTraceGetEventGroupNumberLow16>
 8000270:	0003      	movs	r3, r0
 8000272:	b2db      	uxtb	r3, r3
 8000274:	0019      	movs	r1, r3
 8000276:	2006      	movs	r0, #6
 8000278:	f003 ff10 	bl	800409c <prvMarkObjectAsUsed>
 800027c:	f002 fe80 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000280:	0003      	movs	r3, r0
 8000282:	0018      	movs	r0, r3
 8000284:	f002 fd94 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000288:	0003      	movs	r3, r0
 800028a:	001a      	movs	r2, r3
 800028c:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <xEventGroupCreate+0xf4>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	4013      	ands	r3, r2
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d016      	beq.n	80002c6 <xEventGroupCreate+0xa6>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fe2c 	bl	8002ef8 <prvTraceGetEventGroupNumberHigh16>
 80002a0:	0003      	movs	r3, r0
 80002a2:	001a      	movs	r2, r3
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <xEventGroupCreate+0xf4>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	4013      	ands	r3, r2
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d00a      	beq.n	80002c6 <xEventGroupCreate+0xa6>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	0018      	movs	r0, r3
 80002b4:	f002 fe12 	bl	8002edc <prvTraceGetEventGroupNumberLow16>
 80002b8:	0003      	movs	r3, r0
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	001a      	movs	r2, r3
 80002be:	2106      	movs	r1, #6
 80002c0:	20c2      	movs	r0, #194	@ 0xc2
 80002c2:	f003 fb3b 	bl	800393c <prvTraceStoreKernelCall>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0018      	movs	r0, r3
 80002ca:	f002 fe07 	bl	8002edc <prvTraceGetEventGroupNumberLow16>
 80002ce:	0003      	movs	r3, r0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2200      	movs	r2, #0
 80002d4:	0019      	movs	r1, r3
 80002d6:	2006      	movs	r0, #6
 80002d8:	f003 fd44 	bl	8003d64 <prvTraceSetObjectState>
 80002dc:	e012      	b.n	8000304 <xEventGroupCreate+0xe4>
        }
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 80002de:	f002 fe4f 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 80002e2:	0003      	movs	r3, r0
 80002e4:	0018      	movs	r0, r3
 80002e6:	f002 fd63 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 80002ea:	0003      	movs	r3, r0
 80002ec:	001a      	movs	r2, r3
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <xEventGroupCreate+0xf4>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	4013      	ands	r3, r2
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <xEventGroupCreate+0xe4>
 80002fa:	2200      	movs	r2, #0
 80002fc:	2106      	movs	r1, #6
 80002fe:	20c3      	movs	r0, #195	@ 0xc3
 8000300:	f003 fb1c 	bl	800393c <prvTraceStoreKernelCall>
        }

        return pxEventBits;
 8000304:	687b      	ldr	r3, [r7, #4]
    }
 8000306:	0018      	movs	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	200019ca 	.word	0x200019ca
 8000314:	200019c8 	.word	0x200019c8

08000318 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	60bb      	str	r3, [r7, #8]

        if( xEventGroup == NULL )
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d102      	bne.n	8000330 <uxEventGroupGetNumber+0x18>
        {
            xReturn = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e002      	b.n	8000336 <uxEventGroupGetNumber+0x1e>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8000336:	68fb      	ldr	r3, [r7, #12]
    }
 8000338:	0018      	movs	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	b004      	add	sp, #16
 800033e:	bd80      	pop	{r7, pc}

08000340 <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	619a      	str	r2, [r3, #24]
    }
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}

08000358 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3308      	adds	r3, #8
 8000364:	001a      	movs	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2201      	movs	r2, #1
 800036e:	4252      	negs	r2, r2
 8000370:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3308      	adds	r3, #8
 8000376:	001a      	movs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3308      	adds	r3, #8
 8000380:	001a      	movs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800038c:	46c0      	nop			@ (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b002      	add	sp, #8
 8000392:	bd80      	pop	{r7, pc}

08000394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}

080003aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b084      	sub	sp, #16
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	3301      	adds	r3, #1
 80003be:	d103      	bne.n	80003c8 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e00c      	b.n	80003e2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3308      	adds	r3, #8
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	e002      	b.n	80003d6 <vListInsert+0x2c>
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d2f6      	bcs.n	80003d0 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b004      	add	sp, #16
 8000414:	bd80      	pop	{r7, pc}

08000416 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	6892      	ldr	r2, [r2, #8]
 800042c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	6852      	ldr	r2, [r2, #4]
 8000436:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	d103      	bne.n	800044a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1e5a      	subs	r2, r3, #1
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
}
 800045e:	0018      	movs	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bd80      	pop	{r7, pc}

08000466 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000466:	b5b0      	push	{r4, r5, r7, lr}
 8000468:	b084      	sub	sp, #16
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000470:	2301      	movs	r3, #1
 8000472:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d102      	bne.n	8000484 <xQueueGenericReset+0x1e>
 800047e:	b672      	cpsid	i
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	e7fd      	b.n	8000480 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <xQueueGenericReset+0x26>
 800048a:	e06a      	b.n	8000562 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000490:	2b00      	cmp	r3, #0
 8000492:	d066      	beq.n	8000562 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800049c:	2400      	movs	r4, #0
 800049e:	0c15      	lsrs	r5, r2, #16
 80004a0:	0c19      	lsrs	r1, r3, #16
 80004a2:	b2a8      	uxth	r0, r5
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d104      	bne.n	80004b2 <xQueueGenericReset+0x4c>
 80004a8:	b288      	uxth	r0, r1
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d013      	beq.n	80004d6 <xQueueGenericReset+0x70>
 80004ae:	1c10      	adds	r0, r2, #0
 80004b0:	e004      	b.n	80004bc <xQueueGenericReset+0x56>
 80004b2:	b289      	uxth	r1, r1
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d10d      	bne.n	80004d4 <xQueueGenericReset+0x6e>
 80004b8:	1c29      	adds	r1, r5, #0
 80004ba:	1c18      	adds	r0, r3, #0
 80004bc:	b292      	uxth	r2, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	435a      	muls	r2, r3
 80004c2:	b283      	uxth	r3, r0
 80004c4:	b289      	uxth	r1, r1
 80004c6:	434b      	muls	r3, r1
 80004c8:	0c12      	lsrs	r2, r2, #16
 80004ca:	189b      	adds	r3, r3, r2
 80004cc:	141b      	asrs	r3, r3, #16
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d000      	beq.n	80004d6 <xQueueGenericReset+0x70>
 80004d4:	2401      	movs	r4, #1
 80004d6:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80004d8:	d143      	bne.n	8000562 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80004da:	f002 fb39 	bl	8002b50 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ea:	434b      	muls	r3, r1
 80004ec:	18d2      	adds	r2, r2, r3
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	2200      	movs	r2, #0
 80004f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000508:	1e59      	subs	r1, r3, #1
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050e:	434b      	muls	r3, r1
 8000510:	18d2      	adds	r2, r2, r3
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2244      	movs	r2, #68	@ 0x44
 800051a:	21ff      	movs	r1, #255	@ 0xff
 800051c:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2245      	movs	r2, #69	@ 0x45
 8000522:	21ff      	movs	r1, #255	@ 0xff
 8000524:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10d      	bne.n	8000548 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d013      	beq.n	800055c <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	3310      	adds	r3, #16
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fb89 	bl	8001c50 <xTaskRemoveFromEventList>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d00c      	beq.n	800055c <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000542:	f002 faf5 	bl	8002b30 <vPortYield>
 8000546:	e009      	b.n	800055c <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3310      	adds	r3, #16
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff ff03 	bl	8000358 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	3324      	adds	r3, #36	@ 0x24
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fefe 	bl	8000358 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800055c:	f002 fb0a 	bl	8002b74 <vPortExitCritical>
 8000560:	e001      	b.n	8000566 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <xQueueGenericReset+0x10c>
 800056c:	b672      	cpsid	i
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	e7fd      	b.n	800056e <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	b004      	add	sp, #16
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b08b      	sub	sp, #44	@ 0x2c
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d065      	beq.n	8000660 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000594:	2000      	movs	r0, #0
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	0c19      	lsrs	r1, r3, #16
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1c1e      	adds	r6, r3, #0
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	0c1b      	lsrs	r3, r3, #16
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	1c15      	adds	r5, r2, #0
 80005a6:	b28a      	uxth	r2, r1
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d105      	bne.n	80005b8 <xQueueGenericCreate+0x3c>
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d013      	beq.n	80005da <xQueueGenericCreate+0x5e>
 80005b2:	1c19      	adds	r1, r3, #0
 80005b4:	1c34      	adds	r4, r6, #0
 80005b6:	e003      	b.n	80005c0 <xQueueGenericCreate+0x44>
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10c      	bne.n	80005d8 <xQueueGenericCreate+0x5c>
 80005be:	1c2c      	adds	r4, r5, #0
 80005c0:	b2b3      	uxth	r3, r6
 80005c2:	b2aa      	uxth	r2, r5
 80005c4:	435a      	muls	r2, r3
 80005c6:	b2a3      	uxth	r3, r4
 80005c8:	b289      	uxth	r1, r1
 80005ca:	434b      	muls	r3, r1
 80005cc:	0c12      	lsrs	r2, r2, #16
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	141b      	asrs	r3, r3, #16
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d000      	beq.n	80005da <xQueueGenericCreate+0x5e>
 80005d8:	2001      	movs	r0, #1
 80005da:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005dc:	d140      	bne.n	8000660 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005e4:	3351      	adds	r3, #81	@ 0x51
 80005e6:	d83b      	bhi.n	8000660 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	4353      	muls	r3, r2
 80005ee:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	3350      	adds	r3, #80	@ 0x50
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fb43 	bl	8002c80 <pvPortMalloc>
 80005fa:	0003      	movs	r3, r0
 80005fc:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00f      	beq.n	8000624 <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3350      	adds	r3, #80	@ 0x50
 800060c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781c      	ldrb	r4, [r3, #0]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	0023      	movs	r3, r4
 800061e:	f000 f82f 	bl	8000680 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000622:	e023      	b.n	800066c <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000624:	f002 fcac 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000628:	0003      	movs	r3, r0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fbc0 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000630:	0003      	movs	r3, r0
 8000632:	001a      	movs	r2, r3
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <xQueueGenericCreate+0xfc>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4013      	ands	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d015      	beq.n	800066c <xQueueGenericCreate+0xf0>
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <xQueueGenericCreate+0x100>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	3340      	adds	r3, #64	@ 0x40
 800064a:	b2db      	uxtb	r3, r3
 800064c:	0018      	movs	r0, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <xQueueGenericCreate+0x100>)
 8000654:	5cd3      	ldrb	r3, [r2, r3]
 8000656:	2200      	movs	r2, #0
 8000658:	0019      	movs	r1, r3
 800065a:	f003 f96f 	bl	800393c <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 800065e:	e005      	b.n	800066c <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d103      	bne.n	800066e <xQueueGenericCreate+0xf2>
 8000666:	b672      	cpsid	i
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	e7fd      	b.n	8000668 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 800066c:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800066e:	69fb      	ldr	r3, [r7, #28]
    }
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b009      	add	sp, #36	@ 0x24
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000678:	200019c8 	.word	0x200019c8
 800067c:	20000008 	.word	0x20000008

08000680 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	001a      	movs	r2, r3
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d103      	bne.n	80006a0 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000698:	6a3b      	ldr	r3, [r7, #32]
 800069a:	6a3a      	ldr	r2, [r7, #32]
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e002      	b.n	80006a6 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	2101      	movs	r1, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff fed5 	bl	8000466 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	1cfa      	adds	r2, r7, #3
 80006c0:	214c      	movs	r1, #76	@ 0x4c
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 fb56 	bl	8002d7a <prvTraceGetQueueType>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b3a      	ldr	r3, [pc, #232]	@ (80007bc <prvInitialiseNewQueue+0x13c>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
 80006d6:	0018      	movs	r0, r3
 80006d8:	f003 fc30 	bl	8003f3c <prvTraceGetObjectHandle>
 80006dc:	0003      	movs	r3, r0
 80006de:	001a      	movs	r2, r3
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fbc4 	bl	8002e72 <prvTraceSetQueueNumberLow16>
 80006ea:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <prvInitialiseNewQueue+0x140>)
 80006ec:	881a      	ldrh	r2, [r3, #0]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fbd7 	bl	8002ea6 <prvTraceSetQueueNumberHigh16>
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fb3d 	bl	8002d7a <prvTraceGetQueueType>
 8000700:	0003      	movs	r3, r0
 8000702:	001a      	movs	r2, r3
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <prvInitialiseNewQueue+0x13c>)
 8000706:	5c9c      	ldrb	r4, [r3, r2]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	0018      	movs	r0, r3
 800070c:	f002 fb94 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000710:	0003      	movs	r3, r0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	0019      	movs	r1, r3
 8000716:	0020      	movs	r0, r4
 8000718:	f003 fcc0 	bl	800409c <prvMarkObjectAsUsed>
 800071c:	f002 fc30 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000720:	0003      	movs	r3, r0
 8000722:	0018      	movs	r0, r3
 8000724:	f002 fb44 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <prvInitialiseNewQueue+0x144>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	4013      	ands	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d029      	beq.n	800078c <prvInitialiseNewQueue+0x10c>
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fb8a 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000740:	0003      	movs	r3, r0
 8000742:	001a      	movs	r2, r3
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <prvInitialiseNewQueue+0x144>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	4013      	ands	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d01d      	beq.n	800078c <prvInitialiseNewQueue+0x10c>
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fb11 	bl	8002d7a <prvTraceGetQueueType>
 8000758:	0003      	movs	r3, r0
 800075a:	001a      	movs	r2, r3
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <prvInitialiseNewQueue+0x13c>)
 800075e:	5c9b      	ldrb	r3, [r3, r2]
 8000760:	3318      	adds	r3, #24
 8000762:	b2db      	uxtb	r3, r3
 8000764:	001d      	movs	r5, r3
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fb06 	bl	8002d7a <prvTraceGetQueueType>
 800076e:	0003      	movs	r3, r0
 8000770:	001a      	movs	r2, r3
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <prvInitialiseNewQueue+0x13c>)
 8000774:	5c9c      	ldrb	r4, [r3, r2]
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fb5d 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 800077e:	0003      	movs	r3, r0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	001a      	movs	r2, r3
 8000784:	0021      	movs	r1, r4
 8000786:	0028      	movs	r0, r5
 8000788:	f003 f8d8 	bl	800393c <prvTraceStoreKernelCall>
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	0018      	movs	r0, r3
 8000790:	f002 faf3 	bl	8002d7a <prvTraceGetQueueType>
 8000794:	0003      	movs	r3, r0
 8000796:	001a      	movs	r2, r3
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <prvInitialiseNewQueue+0x13c>)
 800079a:	5c9c      	ldrb	r4, [r3, r2]
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fb4a 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 80007a4:	0003      	movs	r3, r0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2200      	movs	r2, #0
 80007aa:	0019      	movs	r1, r3
 80007ac:	0020      	movs	r0, r4
 80007ae:	f003 fad9 	bl	8003d64 <prvTraceSetObjectState>
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b004      	add	sp, #16
 80007b8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	20000008 	.word	0x20000008
 80007c0:	200019ca 	.word	0x200019ca
 80007c4:	200019c8 	.word	0x200019c8

080007c8 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f805 	bl	80007e8 <MyWrapper_xQueueGiveFromISR>
 80007de:	0003      	movs	r3, r0
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <MyWrapper_xQueueGiveFromISR+0x1c>
 80007fe:	b672      	cpsid	i
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	e7fd      	b.n	8000800 <MyWrapper_xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <MyWrapper_xQueueGiveFromISR+0x2a>
 800080c:	b672      	cpsid	i
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	e7fd      	b.n	800080e <MyWrapper_xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <MyWrapper_xQueueGiveFromISR+0x3a>
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <MyWrapper_xQueueGiveFromISR+0x3e>
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <MyWrapper_xQueueGiveFromISR+0x40>
 8000826:	2300      	movs	r3, #0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <MyWrapper_xQueueGiveFromISR+0x4a>
 800082c:	b672      	cpsid	i
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	e7fd      	b.n	800082e <MyWrapper_xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000832:	f002 f9b7 	bl	8002ba4 <ulSetInterruptMaskFromISR>
 8000836:	0003      	movs	r3, r0
 8000838:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800083e:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	429a      	cmp	r2, r3
 8000848:	d300      	bcc.n	800084c <MyWrapper_xQueueGiveFromISR+0x64>
 800084a:	e086      	b.n	800095a <MyWrapper_xQueueGiveFromISR+0x172>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800084c:	2317      	movs	r3, #23
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	6a3a      	ldr	r2, [r7, #32]
 8000852:	2145      	movs	r1, #69	@ 0x45
 8000854:	5c52      	ldrb	r2, [r2, r1]
 8000856:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	0018      	movs	r0, r3
 800085c:	f002 fafa 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000860:	0003      	movs	r3, r0
 8000862:	001a      	movs	r2, r3
 8000864:	4b5a      	ldr	r3, [pc, #360]	@ (80009d0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	b29b      	uxth	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d022      	beq.n	80008b6 <MyWrapper_xQueueGiveFromISR+0xce>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10b      	bne.n	800088e <MyWrapper_xQueueGiveFromISR+0xa6>
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fa7e 	bl	8002d7a <prvTraceGetQueueType>
 800087e:	0003      	movs	r3, r0
 8000880:	001a      	movs	r2, r3
 8000882:	4b54      	ldr	r3, [pc, #336]	@ (80009d4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000884:	5c9b      	ldrb	r3, [r3, r2]
 8000886:	3330      	adds	r3, #48	@ 0x30
 8000888:	b2db      	uxtb	r3, r3
 800088a:	001d      	movs	r5, r3
 800088c:	e000      	b.n	8000890 <MyWrapper_xQueueGiveFromISR+0xa8>
 800088e:	2535      	movs	r5, #53	@ 0x35
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	0018      	movs	r0, r3
 8000894:	f002 fa71 	bl	8002d7a <prvTraceGetQueueType>
 8000898:	0003      	movs	r3, r0
 800089a:	001a      	movs	r2, r3
 800089c:	4b4d      	ldr	r3, [pc, #308]	@ (80009d4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 800089e:	5c9c      	ldrb	r4, [r3, r2]
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fac8 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 80008a8:	0003      	movs	r3, r0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	001a      	movs	r2, r3
 80008ae:	0021      	movs	r1, r4
 80008b0:	0028      	movs	r0, r5
 80008b2:	f003 f843 	bl	800393c <prvTraceStoreKernelCall>
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 fa5e 	bl	8002d7a <prvTraceGetQueueType>
 80008be:	0003      	movs	r3, r0
 80008c0:	001a      	movs	r2, r3
 80008c2:	4b44      	ldr	r3, [pc, #272]	@ (80009d4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 80008c4:	5c9c      	ldrb	r4, [r3, r2]
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fab5 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 80008ce:	0003      	movs	r3, r0
 80008d0:	b2d9      	uxtb	r1, r3
 80008d2:	6a3b      	ldr	r3, [r7, #32]
 80008d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3301      	adds	r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	001a      	movs	r2, r3
 80008de:	0020      	movs	r0, r4
 80008e0:	f003 fa40 	bl	8003d64 <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80008ec:	2317      	movs	r3, #23
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	3301      	adds	r3, #1
 80008f6:	d111      	bne.n	800091c <MyWrapper_xQueueGiveFromISR+0x134>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d029      	beq.n	8000954 <MyWrapper_xQueueGiveFromISR+0x16c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	3324      	adds	r3, #36	@ 0x24
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f9a3 	bl	8001c50 <xTaskRemoveFromEventList>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d022      	beq.n	8000954 <MyWrapper_xQueueGiveFromISR+0x16c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d01f      	beq.n	8000954 <MyWrapper_xQueueGiveFromISR+0x16c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e01b      	b.n	8000954 <MyWrapper_xQueueGiveFromISR+0x16c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800091c:	f000 ff52 	bl	80017c4 <uxTaskGetNumberOfTasks>
 8000920:	0003      	movs	r3, r0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	2117      	movs	r1, #23
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b25b      	sxtb	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	429a      	cmp	r2, r3
 8000930:	d910      	bls.n	8000954 <MyWrapper_xQueueGiveFromISR+0x16c>
 8000932:	187b      	adds	r3, r7, r1
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	2b7f      	cmp	r3, #127	@ 0x7f
 800093a:	d102      	bne.n	8000942 <MyWrapper_xQueueGiveFromISR+0x15a>
 800093c:	b672      	cpsid	i
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	e7fd      	b.n	800093e <MyWrapper_xQueueGiveFromISR+0x156>
 8000942:	2317      	movs	r3, #23
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	b259      	sxtb	r1, r3
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	2245      	movs	r2, #69	@ 0x45
 8000952:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
 8000958:	e030      	b.n	80009bc <MyWrapper_xQueueGiveFromISR+0x1d4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	0018      	movs	r0, r3
 800095e:	f002 fa79 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000962:	0003      	movs	r3, r0
 8000964:	001a      	movs	r2, r3
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	4013      	ands	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d022      	beq.n	80009b8 <MyWrapper_xQueueGiveFromISR+0x1d0>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10b      	bne.n	8000990 <MyWrapper_xQueueGiveFromISR+0x1a8>
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f9fd 	bl	8002d7a <prvTraceGetQueueType>
 8000980:	0003      	movs	r3, r0
 8000982:	001a      	movs	r2, r3
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000986:	5c9b      	ldrb	r3, [r3, r2]
 8000988:	3358      	adds	r3, #88	@ 0x58
 800098a:	b2db      	uxtb	r3, r3
 800098c:	001d      	movs	r5, r3
 800098e:	e000      	b.n	8000992 <MyWrapper_xQueueGiveFromISR+0x1aa>
 8000990:	255d      	movs	r5, #93	@ 0x5d
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	0018      	movs	r0, r3
 8000996:	f002 f9f0 	bl	8002d7a <prvTraceGetQueueType>
 800099a:	0003      	movs	r3, r0
 800099c:	001a      	movs	r2, r3
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 80009a0:	5c9c      	ldrb	r4, [r3, r2]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 fa47 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 80009aa:	0003      	movs	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	001a      	movs	r2, r3
 80009b0:	0021      	movs	r1, r4
 80009b2:	0028      	movs	r0, r5
 80009b4:	f002 ffc2 	bl	800393c <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 f8f6 	bl	8002bb0 <vClearInterruptMaskFromISR>

    return xReturn;
 80009c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b00a      	add	sp, #40	@ 0x28
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	200019c8 	.word	0x200019c8
 80009d4:	20000008 	.word	0x20000008

080009d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <xQueueReceive+0x20>
 80009f2:	b672      	cpsid	i
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	e7fd      	b.n	80009f4 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d103      	bne.n	8000a06 <xQueueReceive+0x2e>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <xQueueReceive+0x32>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <xQueueReceive+0x34>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <xQueueReceive+0x3e>
 8000a10:	b672      	cpsid	i
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	e7fd      	b.n	8000a12 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a16:	f001 fb05 	bl	8002024 <xTaskGetSchedulerState>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d102      	bne.n	8000a24 <xQueueReceive+0x4c>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <xQueueReceive+0x50>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <xQueueReceive+0x52>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <xQueueReceive+0x5c>
 8000a2e:	b672      	cpsid	i
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	e7fd      	b.n	8000a30 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a34:	f002 f88c 	bl	8002b50 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a3c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d100      	bne.n	8000a46 <xQueueReceive+0x6e>
 8000a44:	e07d      	b.n	8000b42 <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 f9d2 	bl	8000df6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000a52:	f002 fa95 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 f9a9 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	001a      	movs	r2, r3
 8000a62:	4bd2      	ldr	r3, [pc, #840]	@ (8000dac <xQueueReceive+0x3d4>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	4013      	ands	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d029      	beq.n	8000ac2 <xQueueReceive+0xea>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 f9ef 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000a76:	0003      	movs	r3, r0
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4bcc      	ldr	r3, [pc, #816]	@ (8000dac <xQueueReceive+0x3d4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d01d      	beq.n	8000ac2 <xQueueReceive+0xea>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 f976 	bl	8002d7a <prvTraceGetQueueType>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	001a      	movs	r2, r3
 8000a92:	4bc7      	ldr	r3, [pc, #796]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000a94:	5c9b      	ldrb	r3, [r3, r2]
 8000a96:	3328      	adds	r3, #40	@ 0x28
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	001d      	movs	r5, r3
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 f96b 	bl	8002d7a <prvTraceGetQueueType>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	4bc1      	ldr	r3, [pc, #772]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000aaa:	5c9c      	ldrb	r4, [r3, r2]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 f9c2 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	001a      	movs	r2, r3
 8000aba:	0021      	movs	r1, r4
 8000abc:	0028      	movs	r0, r5
 8000abe:	f002 ff3d 	bl	800393c <prvTraceStoreKernelCall>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 f958 	bl	8002d7a <prvTraceGetQueueType>
 8000aca:	0003      	movs	r3, r0
 8000acc:	001a      	movs	r2, r3
 8000ace:	4bb8      	ldr	r3, [pc, #736]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000ad0:	5c9c      	ldrb	r4, [r3, r2]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 f9af 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000ada:	0003      	movs	r3, r0
 8000adc:	b2dd      	uxtb	r5, r3
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 f94a 	bl	8002d7a <prvTraceGetQueueType>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4bb1      	ldr	r3, [pc, #708]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000aec:	5c9b      	ldrb	r3, [r3, r2]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d108      	bne.n	8000b04 <xQueueReceive+0x12c>
 8000af2:	f002 fa45 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000af6:	0003      	movs	r3, r0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f002 f94b 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8000afe:	0003      	movs	r3, r0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	e004      	b.n	8000b0e <xQueueReceive+0x136>
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	0029      	movs	r1, r5
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 f926 	bl	8003d64 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d008      	beq.n	8000b3a <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3310      	adds	r3, #16
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 f88f 	bl	8001c50 <xTaskRemoveFromEventList>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b36:	f001 fffb 	bl	8002b30 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b3a:	f002 f81b 	bl	8002b74 <vPortExitCritical>
                return pdPASS;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e12f      	b.n	8000da2 <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d13b      	bne.n	8000bc0 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b48:	f002 f814 	bl	8002b74 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000b4c:	f002 fa18 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000b50:	0003      	movs	r3, r0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f92c 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	4b93      	ldr	r3, [pc, #588]	@ (8000dac <xQueueReceive+0x3d4>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d029      	beq.n	8000bbc <xQueueReceive+0x1e4>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 f972 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000b70:	0003      	movs	r3, r0
 8000b72:	001a      	movs	r2, r3
 8000b74:	4b8d      	ldr	r3, [pc, #564]	@ (8000dac <xQueueReceive+0x3d4>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d01d      	beq.n	8000bbc <xQueueReceive+0x1e4>
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 f8f9 	bl	8002d7a <prvTraceGetQueueType>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	4b88      	ldr	r3, [pc, #544]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000b8e:	5c9b      	ldrb	r3, [r3, r2]
 8000b90:	3350      	adds	r3, #80	@ 0x50
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	001d      	movs	r5, r3
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 f8ee 	bl	8002d7a <prvTraceGetQueueType>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	4b83      	ldr	r3, [pc, #524]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000ba4:	5c9c      	ldrb	r4, [r3, r2]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 f945 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	0021      	movs	r1, r4
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	f002 fec0 	bl	800393c <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e0f0      	b.n	8000da2 <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 f922 	bl	8001e14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bd4:	f001 ffce 	bl	8002b74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bd8:	f000 fcda 	bl	8001590 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bdc:	f001 ffb8 	bl	8002b50 <vPortEnterCritical>
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	2244      	movs	r2, #68	@ 0x44
 8000be4:	5c9b      	ldrb	r3, [r3, r2]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	3301      	adds	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <xQueueReceive+0x21c>
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	2244      	movs	r2, #68	@ 0x44
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	5499      	strb	r1, [r3, r2]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	2245      	movs	r2, #69	@ 0x45
 8000bf8:	5c9b      	ldrb	r3, [r3, r2]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	d103      	bne.n	8000c08 <xQueueReceive+0x230>
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	2245      	movs	r2, #69	@ 0x45
 8000c04:	2100      	movs	r1, #0
 8000c06:	5499      	strb	r1, [r3, r2]
 8000c08:	f001 ffb4 	bl	8002b74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c0c:	1d3a      	adds	r2, r7, #4
 8000c0e:	2314      	movs	r3, #20
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 f911 	bl	8001e3c <xTaskCheckForTimeOut>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d000      	beq.n	8000c20 <xQueueReceive+0x248>
 8000c1e:	e07a      	b.n	8000d16 <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f96b 	bl	8000efe <prvIsQueueEmpty>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d06d      	beq.n	8000d08 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000c2c:	f002 f9a8 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000c30:	0003      	movs	r3, r0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 f8bc 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8000dac <xQueueReceive+0x3d4>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4013      	ands	r3, r2
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d029      	beq.n	8000c9c <xQueueReceive+0x2c4>
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 f902 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000c50:	0003      	movs	r3, r0
 8000c52:	001a      	movs	r2, r3
 8000c54:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <xQueueReceive+0x3d4>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01d      	beq.n	8000c9c <xQueueReceive+0x2c4>
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 f889 	bl	8002d7a <prvTraceGetQueueType>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	4b50      	ldr	r3, [pc, #320]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000c6e:	5c9b      	ldrb	r3, [r3, r2]
 8000c70:	3368      	adds	r3, #104	@ 0x68
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	001d      	movs	r5, r3
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f002 f87e 	bl	8002d7a <prvTraceGetQueueType>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b4b      	ldr	r3, [pc, #300]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000c84:	5c9c      	ldrb	r4, [r3, r2]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 f8d5 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	001a      	movs	r2, r3
 8000c94:	0021      	movs	r1, r4
 8000c96:	0028      	movs	r0, r5
 8000c98:	f002 fe50 	bl	800393c <prvTraceStoreKernelCall>
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 f86b 	bl	8002d7a <prvTraceGetQueueType>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000caa:	5c9b      	ldrb	r3, [r3, r2]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d018      	beq.n	8000ce2 <xQueueReceive+0x30a>
 8000cb0:	f002 f966 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f002 f87a 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <xQueueReceive+0x3d4>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00a      	beq.n	8000ce2 <xQueueReceive+0x30a>
 8000ccc:	f002 f958 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 f85e 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f003 f899 	bl	8003e14 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3324      	adds	r3, #36	@ 0x24
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 ff14 	bl	8001b18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f8a5 	bl	8000e42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000cf8:	f000 fc56 	bl	80015a8 <xTaskResumeAll>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d000      	beq.n	8000d02 <xQueueReceive+0x32a>
 8000d00:	e698      	b.n	8000a34 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8000d02:	f001 ff15 	bl	8002b30 <vPortYield>
 8000d06:	e695      	b.n	8000a34 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f899 	bl	8000e42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d10:	f000 fc4a 	bl	80015a8 <xTaskResumeAll>
 8000d14:	e68e      	b.n	8000a34 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f892 	bl	8000e42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d1e:	f000 fc43 	bl	80015a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 f8ea 	bl	8000efe <prvIsQueueEmpty>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d100      	bne.n	8000d30 <xQueueReceive+0x358>
 8000d2e:	e681      	b.n	8000a34 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d30:	f002 f926 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8000d34:	0003      	movs	r3, r0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 f83a 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	001a      	movs	r2, r3
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <xQueueReceive+0x3d4>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	4013      	ands	r3, r2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d029      	beq.n	8000da0 <xQueueReceive+0x3c8>
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 f880 	bl	8002e54 <prvTraceGetQueueNumberHigh16>
 8000d54:	0003      	movs	r3, r0
 8000d56:	001a      	movs	r2, r3
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <xQueueReceive+0x3d4>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d01d      	beq.n	8000da0 <xQueueReceive+0x3c8>
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 f807 	bl	8002d7a <prvTraceGetQueueType>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	001a      	movs	r2, r3
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000d72:	5c9b      	ldrb	r3, [r3, r2]
 8000d74:	3350      	adds	r3, #80	@ 0x50
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	001d      	movs	r5, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fffc 	bl	8002d7a <prvTraceGetQueueType>
 8000d82:	0003      	movs	r3, r0
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <xQueueReceive+0x3d8>)
 8000d88:	5c9c      	ldrb	r4, [r3, r2]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 f853 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000d92:	0003      	movs	r3, r0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	001a      	movs	r2, r3
 8000d98:	0021      	movs	r1, r4
 8000d9a:	0028      	movs	r0, r5
 8000d9c:	f002 fdce 	bl	800393c <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8000da0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b00a      	add	sp, #40	@ 0x28
 8000da8:	bdb0      	pop	{r4, r5, r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	200019c8 	.word	0x200019c8
 8000db0:	20000008 	.word	0x20000008

08000db4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	224c      	movs	r2, #76	@ 0x4c
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
    }
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d018      	beq.n	8000e3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	18d2      	adds	r2, r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d303      	bcc.n	8000e2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68d9      	ldr	r1, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	0018      	movs	r0, r3
 8000e36:	f004 fb8b 	bl	8005550 <memcpy>
    }
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e4a:	f001 fe81 	bl	8002b50 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	2145      	movs	r1, #69	@ 0x45
 8000e56:	5c52      	ldrb	r2, [r2, r1]
 8000e58:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e5a:	e013      	b.n	8000e84 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d016      	beq.n	8000e92 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3324      	adds	r3, #36	@ 0x24
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fef1 	bl	8001c50 <xTaskRemoveFromEventList>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000e72:	f001 f831 	bl	8001ed8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e76:	210f      	movs	r1, #15
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	dce5      	bgt.n	8000e5c <prvUnlockQueue+0x1a>
 8000e90:	e000      	b.n	8000e94 <prvUnlockQueue+0x52>
                    break;
 8000e92:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2245      	movs	r2, #69	@ 0x45
 8000e98:	21ff      	movs	r1, #255	@ 0xff
 8000e9a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000e9c:	f001 fe6a 	bl	8002b74 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ea0:	f001 fe56 	bl	8002b50 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ea4:	230e      	movs	r3, #14
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	2144      	movs	r1, #68	@ 0x44
 8000eac:	5c52      	ldrb	r2, [r2, r1]
 8000eae:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eb0:	e013      	b.n	8000eda <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d016      	beq.n	8000ee8 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3310      	adds	r3, #16
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fec6 	bl	8001c50 <xTaskRemoveFromEventList>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000ec8:	f001 f806 	bl	8001ed8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ecc:	210e      	movs	r1, #14
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000eda:	230e      	movs	r3, #14
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dce5      	bgt.n	8000eb2 <prvUnlockQueue+0x70>
 8000ee6:	e000      	b.n	8000eea <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8000ee8:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2244      	movs	r2, #68	@ 0x44
 8000eee:	21ff      	movs	r1, #255	@ 0xff
 8000ef0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000ef2:	f001 fe3f 	bl	8002b74 <vPortExitCritical>
}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}

08000efe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f06:	f001 fe23 	bl	8002b50 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e001      	b.n	8000f1c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f1c:	f001 fe2a 	bl	8002b74 <vPortExitCritical>

    return xReturn;
 8000f20:	68fb      	ldr	r3, [r7, #12]
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <vQueueAddToRegistry+0x1a>
 8000f40:	b672      	cpsid	i
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	e7fd      	b.n	8000f42 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d025      	beq.n	8000f98 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	e01f      	b.n	8000f92 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000f52:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <vQueueAddToRegistry+0xac>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d105      	bne.n	8000f70 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <vQueueAddToRegistry+0xac>)
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	60bb      	str	r3, [r7, #8]
                    break;
 8000f6e:	e013      	b.n	8000f98 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10a      	bne.n	8000f8c <vQueueAddToRegistry+0x60>
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <vQueueAddToRegistry+0xac>)
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d104      	bne.n	8000f8c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	00da      	lsls	r2, r3, #3
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <vQueueAddToRegistry+0xac>)
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d9dc      	bls.n	8000f52 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d018      	beq.n	8000fd0 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fee4 	bl	8002d7a <prvTraceGetQueueType>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <vQueueAddToRegistry+0xb0>)
 8000fb8:	5c9c      	ldrb	r4, [r3, r2]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 ff3b 	bl	8002e38 <prvTraceGetQueueNumberLow16>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0020      	movs	r0, r4
 8000fcc:	f003 f8ae 	bl	800412c <prvTraceSetObjectName>
        }
    }
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b005      	add	sp, #20
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	20000034 	.word	0x20000034
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ff0:	f001 fdae 	bl	8002b50 <vPortEnterCritical>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2244      	movs	r2, #68	@ 0x44
 8000ff8:	5c9b      	ldrb	r3, [r3, r2]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	d103      	bne.n	8001008 <vQueueWaitForMessageRestricted+0x28>
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2244      	movs	r2, #68	@ 0x44
 8001004:	2100      	movs	r1, #0
 8001006:	5499      	strb	r1, [r3, r2]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2245      	movs	r2, #69	@ 0x45
 800100c:	5c9b      	ldrb	r3, [r3, r2]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	d103      	bne.n	800101c <vQueueWaitForMessageRestricted+0x3c>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2245      	movs	r2, #69	@ 0x45
 8001018:	2100      	movs	r1, #0
 800101a:	5499      	strb	r1, [r3, r2]
 800101c:	f001 fdaa 	bl	8002b74 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001024:	2b00      	cmp	r3, #0
 8001026:	d106      	bne.n	8001036 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3324      	adds	r3, #36	@ 0x24
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fd91 	bl	8001b58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff02 	bl	8000e42 <prvUnlockQueue>
    }
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b006      	add	sp, #24
 8001044:	bd80      	pop	{r7, pc}

08001046 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b08d      	sub	sp, #52	@ 0x34
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	1dbb      	adds	r3, r7, #6
 8001054:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001056:	1dbb      	adds	r3, r7, #6
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fe0f 	bl	8002c80 <pvPortMalloc>
 8001062:	0003      	movs	r3, r0
 8001064:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d016      	beq.n	800109a <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800106c:	2060      	movs	r0, #96	@ 0x60
 800106e:	f001 fe07 	bl	8002c80 <pvPortMalloc>
 8001072:	0003      	movs	r3, r0
 8001074:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d009      	beq.n	8001090 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2260      	movs	r2, #96	@ 0x60
 8001080:	2100      	movs	r1, #0
 8001082:	0018      	movs	r0, r3
 8001084:	f004 fa26 	bl	80054d4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	631a      	str	r2, [r3, #48]	@ 0x30
 800108e:	e006      	b.n	800109e <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	0018      	movs	r0, r3
 8001094:	f001 fe56 	bl	8002d44 <vPortFree>
 8001098:	e001      	b.n	800109e <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d016      	beq.n	80010d2 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	683c      	ldr	r4, [r7, #0]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	2300      	movs	r3, #0
 80010b0:	9303      	str	r3, [sp, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	0023      	movs	r3, r4
 80010c0:	f000 f810 	bl	80010e4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f88e 	bl	80011e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e002      	b.n	80010d8 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010d2:	2301      	movs	r3, #1
 80010d4:	425b      	negs	r3, r3
 80010d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010d8:	69bb      	ldr	r3, [r7, #24]
    }
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b009      	add	sp, #36	@ 0x24
 80010e0:	bd90      	pop	{r4, r7, pc}
	...

080010e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	001a      	movs	r2, r3
 80010fc:	21a5      	movs	r1, #165	@ 0xa5
 80010fe:	f004 f9e9 	bl	80054d4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4936      	ldr	r1, [pc, #216]	@ (80011e4 <prvInitialiseNewTask+0x100>)
 800110a:	468c      	mov	ip, r1
 800110c:	4463      	add	r3, ip
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2207      	movs	r2, #7
 8001118:	4393      	bics	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2207      	movs	r2, #7
 8001120:	4013      	ands	r3, r2
 8001122:	d002      	beq.n	800112a <prvInitialiseNewTask+0x46>
 8001124:	b672      	cpsid	i
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	e7fd      	b.n	8001126 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01f      	beq.n	8001170 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e013      	b.n	800115e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	7818      	ldrb	r0, [r3, #0]
 800113e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001140:	2134      	movs	r1, #52	@ 0x34
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	185b      	adds	r3, r3, r1
 8001148:	1c02      	adds	r2, r0, #0
 800114a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d9e8      	bls.n	8001136 <prvInitialiseNewTask+0x52>
 8001164:	e000      	b.n	8001168 <prvInitialiseNewTask+0x84>
            {
                break;
 8001166:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800116a:	2243      	movs	r2, #67	@ 0x43
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d902      	bls.n	800117c <prvInitialiseNewTask+0x98>
 8001176:	b672      	cpsid	i
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	e7fd      	b.n	8001178 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d901      	bls.n	8001186 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001182:	2304      	movs	r3, #4
 8001184:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800118c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001194:	3304      	adds	r3, #4
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff f8fc 	bl	8000394 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	3318      	adds	r3, #24
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff f8f7 	bl	8000394 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011aa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	2205      	movs	r2, #5
 80011b0:	1ad2      	subs	r2, r2, r3
 80011b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f001 fc2c 	bl	8002a20 <pxPortInitialiseStack>
 80011c8:	0002      	movs	r2, r0
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b006      	add	sp, #24
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	3fffffff 	.word	0x3fffffff

080011e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80011f0:	f001 fcae 	bl	8002b50 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80011f4:	4b7c      	ldr	r3, [pc, #496]	@ (80013e8 <prvAddNewTaskToReadyList+0x200>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	4b7b      	ldr	r3, [pc, #492]	@ (80013e8 <prvAddNewTaskToReadyList+0x200>)
 80011fc:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80011fe:	4b7b      	ldr	r3, [pc, #492]	@ (80013ec <prvAddNewTaskToReadyList+0x204>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001206:	4b79      	ldr	r3, [pc, #484]	@ (80013ec <prvAddNewTaskToReadyList+0x204>)
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800120c:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <prvAddNewTaskToReadyList+0x200>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d110      	bne.n	8001236 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001214:	f000 fea0 	bl	8001f58 <prvInitialiseTaskLists>
 8001218:	e00d      	b.n	8001236 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800121a:	4b75      	ldr	r3, [pc, #468]	@ (80013f0 <prvAddNewTaskToReadyList+0x208>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001222:	4b72      	ldr	r3, [pc, #456]	@ (80013ec <prvAddNewTaskToReadyList+0x204>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	429a      	cmp	r2, r3
 800122e:	d802      	bhi.n	8001236 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001230:	4b6e      	ldr	r3, [pc, #440]	@ (80013ec <prvAddNewTaskToReadyList+0x204>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001236:	4b6f      	ldr	r3, [pc, #444]	@ (80013f4 <prvAddNewTaskToReadyList+0x20c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	4b6d      	ldr	r3, [pc, #436]	@ (80013f4 <prvAddNewTaskToReadyList+0x20c>)
 800123e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001240:	4b6c      	ldr	r3, [pc, #432]	@ (80013f4 <prvAddNewTaskToReadyList+0x20c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d065      	beq.n	800131a <prvAddNewTaskToReadyList+0x132>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d04f      	beq.n	80012f4 <prvAddNewTaskToReadyList+0x10c>
 8001254:	2003      	movs	r0, #3
 8001256:	f002 fe71 	bl	8003f3c <prvTraceGetObjectHandle>
 800125a:	0003      	movs	r3, r0
 800125c:	001a      	movs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0011      	movs	r1, r2
 8001262:	0018      	movs	r0, r3
 8001264:	f001 fdb3 	bl	8002dce <prvTraceSetTaskNumberLow16>
 8001268:	4b63      	ldr	r3, [pc, #396]	@ (80013f8 <prvAddNewTaskToReadyList+0x210>)
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f001 fdc6 	bl	8002e02 <prvTraceSetTaskNumberHigh16>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0018      	movs	r0, r3
 800127a:	f001 fd8b 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800127e:	0003      	movs	r3, r0
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3334      	adds	r3, #52	@ 0x34
 8001286:	001a      	movs	r2, r3
 8001288:	2003      	movs	r0, #3
 800128a:	f002 ff4f 	bl	800412c <prvTraceSetObjectName>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fd7f 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8001296:	0003      	movs	r3, r0
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	001a      	movs	r2, r3
 80012a2:	2003      	movs	r0, #3
 80012a4:	f002 fd2c 	bl	8003d00 <prvTraceSetPriorityProperty>
 80012a8:	f001 fe6a 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 80012ac:	0003      	movs	r3, r0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 fd7e 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 80012b4:	0003      	movs	r3, r0
 80012b6:	001a      	movs	r2, r3
 80012b8:	4b50      	ldr	r3, [pc, #320]	@ (80013fc <prvAddNewTaskToReadyList+0x214>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4013      	ands	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d02a      	beq.n	800131a <prvAddNewTaskToReadyList+0x132>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 fd72 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 80012cc:	0003      	movs	r3, r0
 80012ce:	001a      	movs	r2, r3
 80012d0:	4b4a      	ldr	r3, [pc, #296]	@ (80013fc <prvAddNewTaskToReadyList+0x214>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	4013      	ands	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01e      	beq.n	800131a <prvAddNewTaskToReadyList+0x132>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fd58 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 80012e4:	0003      	movs	r3, r0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	001a      	movs	r2, r3
 80012ea:	2103      	movs	r1, #3
 80012ec:	201b      	movs	r0, #27
 80012ee:	f002 fb25 	bl	800393c <prvTraceStoreKernelCall>
 80012f2:	e012      	b.n	800131a <prvAddNewTaskToReadyList+0x132>
 80012f4:	f001 fe44 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 80012f8:	0003      	movs	r3, r0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fd58 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001300:	0003      	movs	r3, r0
 8001302:	001a      	movs	r2, r3
 8001304:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <prvAddNewTaskToReadyList+0x214>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	4013      	ands	r3, r2
 800130a:	b29b      	uxth	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <prvAddNewTaskToReadyList+0x132>
 8001310:	2200      	movs	r2, #0
 8001312:	2103      	movs	r1, #3
 8001314:	201b      	movs	r0, #27
 8001316:	f002 fb11 	bl	800393c <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f001 fd47 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001322:	0003      	movs	r3, r0
 8001324:	001a      	movs	r2, r3
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <prvAddNewTaskToReadyList+0x214>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	4013      	ands	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <prvAddNewTaskToReadyList+0x15c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f001 fd2d 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800133a:	0003      	movs	r3, r0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	0018      	movs	r0, r3
 8001340:	f002 f9ee 	bl	8003720 <prvTraceStoreTaskReady>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <prvAddNewTaskToReadyList+0x218>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d903      	bls.n	8001358 <prvAddNewTaskToReadyList+0x170>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001354:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <prvAddNewTaskToReadyList+0x218>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800135c:	4929      	ldr	r1, [pc, #164]	@ (8001404 <prvAddNewTaskToReadyList+0x21c>)
 800135e:	0013      	movs	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	18cb      	adds	r3, r1, r3
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	3204      	adds	r2, #4
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	1d1a      	adds	r2, r3, #4
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001392:	0013      	movs	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	189b      	adds	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4a1a      	ldr	r2, [pc, #104]	@ (8001404 <prvAddNewTaskToReadyList+0x21c>)
 800139c:	189a      	adds	r2, r3, r2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a6:	4917      	ldr	r1, [pc, #92]	@ (8001404 <prvAddNewTaskToReadyList+0x21c>)
 80013a8:	0013      	movs	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	189b      	adds	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	585b      	ldr	r3, [r3, r1]
 80013b2:	1c58      	adds	r0, r3, #1
 80013b4:	4913      	ldr	r1, [pc, #76]	@ (8001404 <prvAddNewTaskToReadyList+0x21c>)
 80013b6:	0013      	movs	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	189b      	adds	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013c0:	f001 fbd8 	bl	8002b74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <prvAddNewTaskToReadyList+0x208>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <prvAddNewTaskToReadyList+0x204>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d201      	bcs.n	80013de <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80013da:	f001 fba9 	bl	8002b30 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	20000130 	.word	0x20000130
 80013ec:	20000084 	.word	0x20000084
 80013f0:	2000013c 	.word	0x2000013c
 80013f4:	2000014c 	.word	0x2000014c
 80013f8:	200019ca 	.word	0x200019ca
 80013fc:	200019c8 	.word	0x200019c8
 8001400:	20000138 	.word	0x20000138
 8001404:	20000088 	.word	0x20000088

08001408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d046      	beq.n	80014a8 <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <vTaskDelay+0xb4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <vTaskDelay+0x20>
 8001422:	b672      	cpsid	i
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	e7fd      	b.n	8001424 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001428:	f000 f8b2 	bl	8001590 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <vTaskDelay+0xb8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fcbd 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001436:	0003      	movs	r3, r0
 8001438:	001a      	movs	r2, r3
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <vTaskDelay+0xbc>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4013      	ands	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00e      	beq.n	8001464 <vTaskDelay+0x5c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0019      	movs	r1, r3
 800144a:	2089      	movs	r0, #137	@ 0x89
 800144c:	f002 fb7a 	bl	8003b44 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <vTaskDelay+0xb8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f001 fc9d 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800145a:	0003      	movs	r3, r0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	0018      	movs	r0, r3
 8001460:	f002 fcd8 	bl	8003e14 <prvTraceSetTaskInstanceFinished>
 8001464:	f001 fd8c 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001468:	0003      	movs	r3, r0
 800146a:	0018      	movs	r0, r3
 800146c:	f001 fca0 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <vTaskDelay+0xbc>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	4013      	ands	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00a      	beq.n	8001496 <vTaskDelay+0x8e>
 8001480:	f001 fd7e 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001484:	0003      	movs	r3, r0
 8001486:	0018      	movs	r0, r3
 8001488:	f001 fc84 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800148c:	0003      	movs	r3, r0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fcbf 	bl	8003e14 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2100      	movs	r1, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f001 f80a 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80014a0:	f000 f882 	bl	80015a8 <xTaskResumeAll>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 80014ae:	f001 fb3f 	bl	8002b30 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000158 	.word	0x20000158
 80014c0:	20000084 	.word	0x20000084
 80014c4:	200019c8 	.word	0x200019c8

080014c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80014ce:	4927      	ldr	r1, [pc, #156]	@ (800156c <vTaskStartScheduler+0xa4>)
 80014d0:	4827      	ldr	r0, [pc, #156]	@ (8001570 <vTaskStartScheduler+0xa8>)
 80014d2:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <vTaskStartScheduler+0xac>)
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	f7ff fdb2 	bl	8001046 <xTaskCreate>
 80014e2:	0003      	movs	r3, r0
 80014e4:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d103      	bne.n	80014f4 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80014ec:	f001 f826 	bl	800253c <xTimerCreateTimerTask>
 80014f0:	0003      	movs	r3, r0
 80014f2:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12c      	bne.n	8001554 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80014fa:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <vTaskStartScheduler+0xb0>)
 80014fe:	2201      	movs	r2, #1
 8001500:	4252      	negs	r2, r2
 8001502:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <vTaskStartScheduler+0xb4>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <vTaskStartScheduler+0xb8>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <vTaskStartScheduler+0xbc>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f001 fd33 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 800151a:	0003      	movs	r3, r0
 800151c:	0018      	movs	r0, r3
 800151e:	f001 fc47 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001522:	0003      	movs	r3, r0
 8001524:	001a      	movs	r2, r3
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <vTaskStartScheduler+0xc0>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4013      	ands	r3, r2
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <vTaskStartScheduler+0x80>
 8001532:	f001 fd25 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001536:	0003      	movs	r3, r0
 8001538:	0018      	movs	r0, r3
 800153a:	f001 fc2b 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800153e:	0003      	movs	r3, r0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	0018      	movs	r0, r3
 8001544:	f002 fb68 	bl	8003c18 <prvTraceStoreTaskswitch>
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <vTaskStartScheduler+0xbc>)
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800154e:	f001 facb 	bl	8002ae8 <xPortStartScheduler>
 8001552:	e005      	b.n	8001560 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	d102      	bne.n	8001560 <vTaskStartScheduler+0x98>
 800155a:	b672      	cpsid	i
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	e7fd      	b.n	800155c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <vTaskStartScheduler+0xc4>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	0800557c 	.word	0x0800557c
 8001570:	08001f39 	.word	0x08001f39
 8001574:	20000154 	.word	0x20000154
 8001578:	20000150 	.word	0x20000150
 800157c:	2000013c 	.word	0x2000013c
 8001580:	20000134 	.word	0x20000134
 8001584:	200019b0 	.word	0x200019b0
 8001588:	200019c8 	.word	0x200019c8
 800158c:	20000000 	.word	0x20000000

08001590 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <vTaskSuspendAll+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4b02      	ldr	r3, [pc, #8]	@ (80015a4 <vTaskSuspendAll+0x14>)
 800159c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000158 	.word	0x20000158

080015a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015b6:	4b73      	ldr	r3, [pc, #460]	@ (8001784 <xTaskResumeAll+0x1dc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <xTaskResumeAll+0x1c>
 80015be:	b672      	cpsid	i
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	e7fd      	b.n	80015c0 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015c4:	f001 fac4 	bl	8002b50 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001784 <xTaskResumeAll+0x1dc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001784 <xTaskResumeAll+0x1dc>)
 80015d0:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001784 <xTaskResumeAll+0x1dc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <xTaskResumeAll+0x34>
 80015da:	e0cc      	b.n	8001776 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <xTaskResumeAll+0x1e0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <xTaskResumeAll+0x3e>
 80015e4:	e0c7      	b.n	8001776 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015e6:	e09e      	b.n	8001726 <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015e8:	4b68      	ldr	r3, [pc, #416]	@ (800178c <xTaskResumeAll+0x1e4>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	6a12      	ldr	r2, [r2, #32]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	69d2      	ldr	r2, [r2, #28]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	429a      	cmp	r2, r3
 8001614:	d103      	bne.n	800161e <xTaskResumeAll+0x76>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	6a1a      	ldr	r2, [r3, #32]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	68d2      	ldr	r2, [r2, #12]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	6892      	ldr	r2, [r2, #8]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3304      	adds	r3, #4
 8001650:	429a      	cmp	r2, r3
 8001652:	d103      	bne.n	800165c <xTaskResumeAll+0xb4>
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	0018      	movs	r0, r3
 8001670:	f001 fb9e 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001674:	0003      	movs	r3, r0
 8001676:	001a      	movs	r2, r3
 8001678:	4b45      	ldr	r3, [pc, #276]	@ (8001790 <xTaskResumeAll+0x1e8>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4013      	ands	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <xTaskResumeAll+0xee>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	0018      	movs	r0, r3
 8001688:	f001 fb84 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800168c:	0003      	movs	r3, r0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	0018      	movs	r0, r3
 8001692:	f002 f845 	bl	8003720 <prvTraceStoreTaskReady>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169a:	4b3e      	ldr	r3, [pc, #248]	@ (8001794 <xTaskResumeAll+0x1ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d903      	bls.n	80016aa <xTaskResumeAll+0x102>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <xTaskResumeAll+0x1ec>)
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ae:	493a      	ldr	r1, [pc, #232]	@ (8001798 <xTaskResumeAll+0x1f0>)
 80016b0:	0013      	movs	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	18cb      	adds	r3, r1, r3
 80016ba:	3304      	adds	r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	3204      	adds	r2, #4
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1d1a      	adds	r2, r3, #4
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e4:	0013      	movs	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <xTaskResumeAll+0x1f0>)
 80016ee:	189a      	adds	r2, r3, r2
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f8:	4927      	ldr	r1, [pc, #156]	@ (8001798 <xTaskResumeAll+0x1f0>)
 80016fa:	0013      	movs	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	585b      	ldr	r3, [r3, r1]
 8001704:	1c58      	adds	r0, r3, #1
 8001706:	4924      	ldr	r1, [pc, #144]	@ (8001798 <xTaskResumeAll+0x1f0>)
 8001708:	0013      	movs	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	189b      	adds	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <xTaskResumeAll+0x1f4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	429a      	cmp	r2, r3
 800171e:	d302      	bcc.n	8001726 <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <xTaskResumeAll+0x1f8>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <xTaskResumeAll+0x1e4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d000      	beq.n	8001730 <xTaskResumeAll+0x188>
 800172e:	e75b      	b.n	80015e8 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001736:	f000 fc4d 	bl	8001fd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <xTaskResumeAll+0x1fc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00f      	beq.n	8001766 <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001746:	f000 f847 	bl	80017d8 <xTaskIncrementTick>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d002      	beq.n	8001754 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <xTaskResumeAll+0x1f8>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3b01      	subs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f2      	bne.n	8001746 <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <xTaskResumeAll+0x1fc>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <xTaskResumeAll+0x1f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001772:	f001 f9dd 	bl	8002b30 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001776:	f001 f9fd 	bl	8002b74 <vPortExitCritical>

    return xAlreadyYielded;
 800177a:	693b      	ldr	r3, [r7, #16]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b006      	add	sp, #24
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000158 	.word	0x20000158
 8001788:	20000130 	.word	0x20000130
 800178c:	2000011c 	.word	0x2000011c
 8001790:	200019c8 	.word	0x200019c8
 8001794:	20000138 	.word	0x20000138
 8001798:	20000088 	.word	0x20000088
 800179c:	20000084 	.word	0x20000084
 80017a0:	20000144 	.word	0x20000144
 80017a4:	20000140 	.word	0x20000140

080017a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <xTaskGetTickCount+0x18>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	20000134 	.word	0x20000134

080017c4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80017c8:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <uxTaskGetNumberOfTasks+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	20000130 	.word	0x20000130

080017d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80017e2:	4b85      	ldr	r3, [pc, #532]	@ (80019f8 <xTaskIncrementTick+0x220>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d003      	beq.n	80017f2 <xTaskIncrementTick+0x1a>
 80017ea:	4b84      	ldr	r3, [pc, #528]	@ (80019fc <xTaskIncrementTick+0x224>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <xTaskIncrementTick+0x2a>
 80017f2:	4b83      	ldr	r3, [pc, #524]	@ (8001a00 <xTaskIncrementTick+0x228>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	4b81      	ldr	r3, [pc, #516]	@ (8001a00 <xTaskIncrementTick+0x228>)
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	2000      	movs	r0, #0
 80017fe:	f003 f8ab 	bl	8004958 <prvTracePortGetTimeStamp>
 8001802:	4b7d      	ldr	r3, [pc, #500]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001804:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001806:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <xTaskIncrementTick+0x220>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d000      	beq.n	8001810 <xTaskIncrementTick+0x38>
 800180e:	e0e9      	b.n	80019e4 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001810:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <xTaskIncrementTick+0x22c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001818:	4b7a      	ldr	r3, [pc, #488]	@ (8001a04 <xTaskIncrementTick+0x22c>)
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001824:	4b78      	ldr	r3, [pc, #480]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <xTaskIncrementTick+0x5c>
 800182e:	b672      	cpsid	i
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	e7fd      	b.n	8001830 <xTaskIncrementTick+0x58>
 8001834:	4b74      	ldr	r3, [pc, #464]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4b74      	ldr	r3, [pc, #464]	@ (8001a0c <xTaskIncrementTick+0x234>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b72      	ldr	r3, [pc, #456]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	4b72      	ldr	r3, [pc, #456]	@ (8001a0c <xTaskIncrementTick+0x234>)
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	4b71      	ldr	r3, [pc, #452]	@ (8001a10 <xTaskIncrementTick+0x238>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <xTaskIncrementTick+0x238>)
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f000 fbbf 	bl	8001fd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001856:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <xTaskIncrementTick+0x23c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	429a      	cmp	r2, r3
 800185e:	d200      	bcs.n	8001862 <xTaskIncrementTick+0x8a>
 8001860:	e0b9      	b.n	80019d6 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001862:	4b69      	ldr	r3, [pc, #420]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d104      	bne.n	8001876 <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800186c:	4b69      	ldr	r3, [pc, #420]	@ (8001a14 <xTaskIncrementTick+0x23c>)
 800186e:	2201      	movs	r2, #1
 8001870:	4252      	negs	r2, r2
 8001872:	601a      	str	r2, [r3, #0]
                    break;
 8001874:	e0af      	b.n	80019d6 <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001876:	4b64      	ldr	r3, [pc, #400]	@ (8001a08 <xTaskIncrementTick+0x230>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	429a      	cmp	r2, r3
 800188c:	d203      	bcs.n	8001896 <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800188e:	4b61      	ldr	r3, [pc, #388]	@ (8001a14 <xTaskIncrementTick+0x23c>)
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001894:	e09f      	b.n	80019d6 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68d2      	ldr	r2, [r2, #12]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	6892      	ldr	r2, [r2, #8]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	3304      	adds	r3, #4
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d103      	bne.n	80018c4 <xTaskIncrementTick+0xec>
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01e      	beq.n	800191a <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	6a12      	ldr	r2, [r2, #32]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	69d2      	ldr	r2, [r2, #28]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	3318      	adds	r3, #24
 80018fe:	429a      	cmp	r2, r3
 8001900:	d103      	bne.n	800190a <xTaskIncrementTick+0x132>
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	0018      	movs	r0, r3
 800191e:	f001 fa47 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001922:	0003      	movs	r3, r0
 8001924:	001a      	movs	r2, r3
 8001926:	4b3c      	ldr	r3, [pc, #240]	@ (8001a18 <xTaskIncrementTick+0x240>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4013      	ands	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <xTaskIncrementTick+0x16c>
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	0018      	movs	r0, r3
 8001936:	f001 fa2d 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800193a:	0003      	movs	r3, r0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	0018      	movs	r0, r3
 8001940:	f001 feee 	bl	8003720 <prvTraceStoreTaskReady>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <xTaskIncrementTick+0x244>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d903      	bls.n	8001958 <xTaskIncrementTick+0x180>
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <xTaskIncrementTick+0x244>)
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195c:	4930      	ldr	r1, [pc, #192]	@ (8001a20 <xTaskIncrementTick+0x248>)
 800195e:	0013      	movs	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	189b      	adds	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	18cb      	adds	r3, r1, r3
 8001968:	3304      	adds	r3, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	3204      	adds	r2, #4
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	0013      	movs	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	189b      	adds	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <xTaskIncrementTick+0x248>)
 800199c:	189a      	adds	r2, r3, r2
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a6:	491e      	ldr	r1, [pc, #120]	@ (8001a20 <xTaskIncrementTick+0x248>)
 80019a8:	0013      	movs	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	189b      	adds	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	585b      	ldr	r3, [r3, r1]
 80019b2:	1c58      	adds	r0, r3, #1
 80019b4:	491a      	ldr	r1, [pc, #104]	@ (8001a20 <xTaskIncrementTick+0x248>)
 80019b6:	0013      	movs	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <xTaskIncrementTick+0x24c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d800      	bhi.n	80019d0 <xTaskIncrementTick+0x1f8>
 80019ce:	e748      	b.n	8001862 <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019d4:	e745      	b.n	8001862 <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80019d6:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <xTaskIncrementTick+0x250>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e004      	b.n	80019ee <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <xTaskIncrementTick+0x224>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <xTaskIncrementTick+0x224>)
 80019ec:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80019ee:	69fb      	ldr	r3, [r7, #28]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b008      	add	sp, #32
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000158 	.word	0x20000158
 80019fc:	20000140 	.word	0x20000140
 8001a00:	200019a4 	.word	0x200019a4
 8001a04:	20000134 	.word	0x20000134
 8001a08:	20000114 	.word	0x20000114
 8001a0c:	20000118 	.word	0x20000118
 8001a10:	20000148 	.word	0x20000148
 8001a14:	20000150 	.word	0x20000150
 8001a18:	200019c8 	.word	0x200019c8
 8001a1c:	20000138 	.word	0x20000138
 8001a20:	20000088 	.word	0x20000088
 8001a24:	20000084 	.word	0x20000084
 8001a28:	20000144 	.word	0x20000144

08001a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <vTaskSwitchContext+0xd0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a3a:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <vTaskSwitchContext+0xd4>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001a40:	e057      	b.n	8001af2 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8001a42:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <vTaskSwitchContext+0xd4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <vTaskSwitchContext+0xd8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	e008      	b.n	8001a62 <vTaskSwitchContext+0x36>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <vTaskSwitchContext+0x30>
 8001a56:	b672      	cpsid	i
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	e7fd      	b.n	8001a58 <vTaskSwitchContext+0x2c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4929      	ldr	r1, [pc, #164]	@ (8001b08 <vTaskSwitchContext+0xdc>)
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	0013      	movs	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	585b      	ldr	r3, [r3, r1]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ed      	beq.n	8001a50 <vTaskSwitchContext+0x24>
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	0013      	movs	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <vTaskSwitchContext+0xdc>)
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3308      	adds	r3, #8
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d104      	bne.n	8001aa4 <vTaskSwitchContext+0x78>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <vTaskSwitchContext+0xe0>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <vTaskSwitchContext+0xd8>)
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <vTaskSwitchContext+0xe4>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f001 fa61 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f001 f975 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	001a      	movs	r2, r3
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <vTaskSwitchContext+0xe8>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <vTaskSwitchContext+0xc0>
 8001ad6:	f001 fa53 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001ada:	0003      	movs	r3, r0
 8001adc:	0018      	movs	r0, r3
 8001ade:	f001 f959 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f002 f896 	bl	8003c18 <prvTraceStoreTaskswitch>
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <vTaskSwitchContext+0xe4>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	601a      	str	r2, [r3, #0]
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	20000158 	.word	0x20000158
 8001b00:	20000144 	.word	0x20000144
 8001b04:	20000138 	.word	0x20000138
 8001b08:	20000088 	.word	0x20000088
 8001b0c:	20000084 	.word	0x20000084
 8001b10:	200019b0 	.word	0x200019b0
 8001b14:	200019c8 	.word	0x200019c8

08001b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <vTaskPlaceOnEventList+0x16>
 8001b28:	b672      	cpsid	i
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	e7fd      	b.n	8001b2a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <vTaskPlaceOnEventList+0x3c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3318      	adds	r3, #24
 8001b34:	001a      	movs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fc35 	bl	80003aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fcb5 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	20000084 	.word	0x20000084

08001b58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <vTaskPlaceOnEventListRestricted+0x18>
 8001b6a:	b672      	cpsid	i
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	e7fd      	b.n	8001b6c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	61da      	str	r2, [r3, #28]
 8001b7e:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	6892      	ldr	r2, [r2, #8]
 8001b86:	621a      	str	r2, [r3, #32]
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	3218      	adds	r2, #24
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3318      	adds	r3, #24
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	425b      	negs	r3, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 f8f4 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	001a      	movs	r2, r3
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <vTaskPlaceOnEventListRestricted+0xf0>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d011      	beq.n	8001bfc <vTaskPlaceOnEventListRestricted+0xa4>
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <vTaskPlaceOnEventListRestricted+0xf4>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	18d3      	adds	r3, r2, r3
 8001be0:	0019      	movs	r1, r3
 8001be2:	2088      	movs	r0, #136	@ 0x88
 8001be4:	f001 ffae 	bl	8003b44 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <vTaskPlaceOnEventListRestricted+0xec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f001 f8d1 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f002 f90c 	bl	8003e14 <prvTraceSetTaskInstanceFinished>
 8001bfc:	f001 f9c0 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 f8d4 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <vTaskPlaceOnEventListRestricted+0xf0>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <vTaskPlaceOnEventListRestricted+0xd6>
 8001c18:	f001 f9b2 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f001 f8b8 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8001c24:	0003      	movs	r3, r0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f002 f8f3 	bl	8003e14 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 fc3d 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
    }
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b006      	add	sp, #24
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	20000084 	.word	0x20000084
 8001c48:	200019c8 	.word	0x200019c8
 8001c4c:	20000134 	.word	0x20000134

08001c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <xTaskRemoveFromEventList+0x1c>
 8001c66:	b672      	cpsid	i
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	e7fd      	b.n	8001c68 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	6a12      	ldr	r2, [r2, #32]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	69d2      	ldr	r2, [r2, #28]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d103      	bne.n	8001c9a <xTaskRemoveFromEventList+0x4a>
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001caa:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <xTaskRemoveFromEventList+0x1a8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d172      	bne.n	8001d98 <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	68d2      	ldr	r2, [r2, #12]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	6892      	ldr	r2, [r2, #8]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d103      	bne.n	8001ce0 <xTaskRemoveFromEventList+0x90>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f001 f85c 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dfc <xTaskRemoveFromEventList+0x1ac>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	4013      	ands	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <xTaskRemoveFromEventList+0xca>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f001 f842 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8001d10:	0003      	movs	r3, r0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 fd03 	bl	8003720 <prvTraceStoreTaskReady>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <xTaskRemoveFromEventList+0x1b0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d903      	bls.n	8001d2e <xTaskRemoveFromEventList+0xde>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2a:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <xTaskRemoveFromEventList+0x1b0>)
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <xTaskRemoveFromEventList+0x1b4>)
 8001d34:	0013      	movs	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	18cb      	adds	r3, r1, r3
 8001d3e:	3304      	adds	r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	3204      	adds	r2, #4
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1d1a      	adds	r2, r3, #4
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d68:	0013      	movs	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <xTaskRemoveFromEventList+0x1b4>)
 8001d72:	189a      	adds	r2, r3, r2
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	4921      	ldr	r1, [pc, #132]	@ (8001e04 <xTaskRemoveFromEventList+0x1b4>)
 8001d7e:	0013      	movs	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	585b      	ldr	r3, [r3, r1]
 8001d88:	1c58      	adds	r0, r3, #1
 8001d8a:	491e      	ldr	r1, [pc, #120]	@ (8001e04 <xTaskRemoveFromEventList+0x1b4>)
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	189b      	adds	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	5058      	str	r0, [r3, r1]
 8001d96:	e01b      	b.n	8001dd0 <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <xTaskRemoveFromEventList+0x1b8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	61da      	str	r2, [r3, #28]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	621a      	str	r2, [r3, #32]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	3218      	adds	r2, #24
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	3318      	adds	r3, #24
 8001dba:	001a      	movs	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <xTaskRemoveFromEventList+0x1b8>)
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <xTaskRemoveFromEventList+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <xTaskRemoveFromEventList+0x1b8>)
 8001dce:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <xTaskRemoveFromEventList+0x1bc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d905      	bls.n	8001dea <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <xTaskRemoveFromEventList+0x1c0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e001      	b.n	8001dee <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001dee:	69fb      	ldr	r3, [r7, #28]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b008      	add	sp, #32
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000158 	.word	0x20000158
 8001dfc:	200019c8 	.word	0x200019c8
 8001e00:	20000138 	.word	0x20000138
 8001e04:	20000088 	.word	0x20000088
 8001e08:	2000011c 	.word	0x2000011c
 8001e0c:	20000084 	.word	0x20000084
 8001e10:	20000144 	.word	0x20000144

08001e14 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <vTaskInternalSetTimeOutState+0x20>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <vTaskInternalSetTimeOutState+0x24>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000148 	.word	0x20000148
 8001e38:	20000134 	.word	0x20000134

08001e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <xTaskCheckForTimeOut+0x16>
 8001e4c:	b672      	cpsid	i
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	e7fd      	b.n	8001e4e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <xTaskCheckForTimeOut+0x22>
 8001e58:	b672      	cpsid	i
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	e7fd      	b.n	8001e5a <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8001e5e:	f000 fe77 	bl	8002b50 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <xTaskCheckForTimeOut+0x94>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <xTaskCheckForTimeOut+0x98>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d00a      	beq.n	8001e94 <xTaskCheckForTimeOut+0x58>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d305      	bcc.n	8001e94 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e016      	b.n	8001ec2 <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d20c      	bcs.n	8001eb8 <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ffb1 	bl	8001e14 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e004      	b.n	8001ec2 <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001ec2:	f000 fe57 	bl	8002b74 <vPortExitCritical>

    return xReturn;
 8001ec6:	697b      	ldr	r3, [r7, #20]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b006      	add	sp, #24
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000134 	.word	0x20000134
 8001ed4:	20000148 	.word	0x20000148

08001ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001edc:	4b02      	ldr	r3, [pc, #8]	@ (8001ee8 <vTaskMissedYield+0x10>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000144 	.word	0x20000144

08001eec <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e001      	b.n	8001f0a <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    }
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f40:	f000 f842 	bl	8001fc8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <prvIdleTask+0x1c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d9f9      	bls.n	8001f40 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f4c:	f000 fdf0 	bl	8002b30 <vPortYield>
        prvCheckTasksWaitingTermination();
 8001f50:	e7f6      	b.n	8001f40 <prvIdleTask+0x8>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	20000088 	.word	0x20000088

08001f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	e00c      	b.n	8001f7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	0013      	movs	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <prvInitialiseTaskLists+0x58>)
 8001f70:	189b      	adds	r3, r3, r2
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe f9f0 	bl	8000358 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d9ef      	bls.n	8001f64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <prvInitialiseTaskLists+0x5c>)
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe f9e6 	bl	8000358 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <prvInitialiseTaskLists+0x60>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe f9e2 	bl	8000358 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <prvInitialiseTaskLists+0x64>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7fe f9de 	bl	8000358 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <prvInitialiseTaskLists+0x68>)
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <prvInitialiseTaskLists+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <prvInitialiseTaskLists+0x6c>)
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <prvInitialiseTaskLists+0x60>)
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000088 	.word	0x20000088
 8001fb4:	200000ec 	.word	0x200000ec
 8001fb8:	20000100 	.word	0x20000100
 8001fbc:	2000011c 	.word	0x2000011c
 8001fc0:	20000114 	.word	0x20000114
 8001fc4:	20000118 	.word	0x20000118

08001fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <prvResetNextTaskUnblockTime+0x2c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <prvResetNextTaskUnblockTime+0x30>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001fea:	e005      	b.n	8001ff8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <prvResetNextTaskUnblockTime+0x2c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <prvResetNextTaskUnblockTime+0x30>)
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	20000114 	.word	0x20000114
 8002004:	20000150 	.word	0x20000150

08002008 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <xTaskGetCurrentTaskHandle+0x18>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002014:	687b      	ldr	r3, [r7, #4]
    }
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	20000084 	.word	0x20000084

08002024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <xTaskGetSchedulerState+0x30>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002032:	2301      	movs	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	e008      	b.n	800204a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <xTaskGetSchedulerState+0x34>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002040:	2302      	movs	r3, #2
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	e001      	b.n	800204a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800204a:	687b      	ldr	r3, [r7, #4]
    }
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000013c 	.word	0x2000013c
 8002058:	20000158 	.word	0x20000158

0800205c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d902      	bls.n	8002076 <xTaskGenericNotifyWait+0x1a>
 8002070:	b672      	cpsid	i
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	e7fd      	b.n	8002072 <xTaskGenericNotifyWait+0x16>

        taskENTER_CRITICAL();
 8002076:	f000 fd6b 	bl	8002b50 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800207a:	4b69      	ldr	r3, [pc, #420]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	215c      	movs	r1, #92	@ 0x5c
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	185b      	adds	r3, r3, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d055      	beq.n	800213a <xTaskGenericNotifyWait+0xde>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800208e:	4b64      	ldr	r3, [pc, #400]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	3214      	adds	r2, #20
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	189a      	adds	r2, r3, r2
 800209a:	3204      	adds	r2, #4
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	43c9      	mvns	r1, r1
 80020a2:	400a      	ands	r2, r1
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	3114      	adds	r1, #20
 80020a8:	0089      	lsls	r1, r1, #2
 80020aa:	185b      	adds	r3, r3, r1
 80020ac:	3304      	adds	r3, #4
 80020ae:	601a      	str	r2, [r3, #0]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80020b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	215c      	movs	r1, #92	@ 0x5c
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	18d3      	adds	r3, r2, r3
 80020ba:	185b      	adds	r3, r3, r1
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d039      	beq.n	800213a <xTaskGenericNotifyWait+0xde>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2101      	movs	r1, #1
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f9f2 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
                    traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 80020d0:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fe6b 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 80020da:	0003      	movs	r3, r0
 80020dc:	001a      	movs	r2, r3
 80020de:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <xTaskGenericNotifyWait+0x1c8>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	4013      	ands	r3, r2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <xTaskGenericNotifyWait+0xa8>
 80020ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 fe50 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 80020f4:	0003      	movs	r3, r0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	001a      	movs	r2, r3
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	2103      	movs	r1, #3
 80020fe:	20d7      	movs	r0, #215	@ 0xd7
 8002100:	f001 fc82 	bl	8003a08 <prvTraceStoreKernelCallWithParam>
 8002104:	f000 ff3c 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8002108:	0003      	movs	r3, r0
 800210a:	0018      	movs	r0, r3
 800210c:	f000 fe50 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8002110:	0003      	movs	r3, r0
 8002112:	001a      	movs	r2, r3
 8002114:	4b43      	ldr	r3, [pc, #268]	@ (8002224 <xTaskGenericNotifyWait+0x1c8>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <xTaskGenericNotifyWait+0xda>
 8002120:	f000 ff2e 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8002124:	0003      	movs	r3, r0
 8002126:	0018      	movs	r0, r3
 8002128:	f000 fe34 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800212c:	0003      	movs	r3, r0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	0018      	movs	r0, r3
 8002132:	f001 fe6f 	bl	8003e14 <prvTraceSetTaskInstanceFinished>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002136:	f000 fcfb 	bl	8002b30 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800213a:	f000 fd1b 	bl	8002b74 <vPortExitCritical>

        taskENTER_CRITICAL();
 800213e:	f000 fd07 	bl	8002b50 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fe32 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 800214c:	0003      	movs	r3, r0
 800214e:	001a      	movs	r2, r3
 8002150:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <xTaskGenericNotifyWait+0x1c8>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d024      	beq.n	80021a6 <xTaskGenericNotifyWait+0x14a>
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	215c      	movs	r1, #92	@ 0x5c
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	185b      	adds	r3, r3, r1
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d10d      	bne.n	800218c <xTaskGenericNotifyWait+0x130>
 8002170:	4b2b      	ldr	r3, [pc, #172]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fe0d 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800217a:	0003      	movs	r3, r0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	001a      	movs	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	2103      	movs	r1, #3
 8002184:	20d6      	movs	r0, #214	@ 0xd6
 8002186:	f001 fc3f 	bl	8003a08 <prvTraceStoreKernelCallWithParam>
 800218a:	e00c      	b.n	80021a6 <xTaskGenericNotifyWait+0x14a>
 800218c:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fdff 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 8002196:	0003      	movs	r3, r0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	001a      	movs	r2, r3
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2103      	movs	r1, #3
 80021a0:	20d8      	movs	r0, #216	@ 0xd8
 80021a2:	f001 fc31 	bl	8003a08 <prvTraceStoreKernelCallWithParam>

            if( pulNotificationValue != NULL )
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <xTaskGenericNotifyWait+0x164>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3314      	adds	r3, #20
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	18d3      	adds	r3, r2, r3
 80021b8:	3304      	adds	r3, #4
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	215c      	movs	r1, #92	@ 0x5c
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	185b      	adds	r3, r3, r1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d002      	beq.n	80021da <xTaskGenericNotifyWait+0x17e>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e012      	b.n	8002200 <xTaskGenericNotifyWait+0x1a4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	3214      	adds	r2, #20
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	189a      	adds	r2, r3, r2
 80021e6:	3204      	adds	r2, #4
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	43c9      	mvns	r1, r1
 80021ee:	400a      	ands	r2, r1
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	3114      	adds	r1, #20
 80021f4:	0089      	lsls	r1, r1, #2
 80021f6:	185b      	adds	r3, r3, r1
 80021f8:	3304      	adds	r3, #4
 80021fa:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <xTaskGenericNotifyWait+0x1c4>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	215c      	movs	r1, #92	@ 0x5c
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	18d3      	adds	r3, r2, r3
 800220a:	185b      	adds	r3, r3, r1
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002210:	f000 fcb0 	bl	8002b74 <vPortExitCritical>

        return xReturn;
 8002214:	697b      	ldr	r3, [r7, #20]
    }
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20000084 	.word	0x20000084
 8002224:	200019c8 	.word	0x200019c8

08002228 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	001a      	movs	r2, r3
 8002236:	1cfb      	adds	r3, r7, #3
 8002238:	701a      	strb	r2, [r3, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800223a:	2301      	movs	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d902      	bls.n	800224a <xTaskGenericNotify+0x22>
 8002244:	b672      	cpsid	i
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	e7fd      	b.n	8002246 <xTaskGenericNotify+0x1e>
        configASSERT( xTaskToNotify );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <xTaskGenericNotify+0x2e>
 8002250:	b672      	cpsid	i
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	e7fd      	b.n	8002252 <xTaskGenericNotify+0x2a>
        pxTCB = xTaskToNotify;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 800225a:	f000 fc79 	bl	8002b50 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <xTaskGenericNotify+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3314      	adds	r3, #20
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	3304      	adds	r3, #4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002276:	231f      	movs	r3, #31
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	205c      	movs	r0, #92	@ 0x5c
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	188a      	adds	r2, r1, r2
 8002282:	1812      	adds	r2, r2, r0
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	215c      	movs	r1, #92	@ 0x5c
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	185b      	adds	r3, r3, r1
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002296:	1cfb      	adds	r3, r7, #3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d83f      	bhi.n	800231e <xTaskGenericNotify+0xf6>
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	4b7e      	ldr	r3, [pc, #504]	@ (800249c <xTaskGenericNotify+0x274>)
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	469f      	mov	pc, r3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3314      	adds	r3, #20
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	3304      	adds	r3, #4
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3314      	adds	r3, #20
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18cb      	adds	r3, r1, r3
 80022c4:	3304      	adds	r3, #4
 80022c6:	601a      	str	r2, [r3, #0]
                    break;
 80022c8:	e033      	b.n	8002332 <xTaskGenericNotify+0x10a>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80022ca:	6a3a      	ldr	r2, [r7, #32]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3314      	adds	r3, #20
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	18d3      	adds	r3, r2, r3
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3314      	adds	r3, #20
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	18cb      	adds	r3, r1, r3
 80022e4:	3304      	adds	r3, #4
 80022e6:	601a      	str	r2, [r3, #0]
                    break;
 80022e8:	e023      	b.n	8002332 <xTaskGenericNotify+0x10a>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3314      	adds	r3, #20
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	3304      	adds	r3, #4
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
                    break;
 80022fa:	e01a      	b.n	8002332 <xTaskGenericNotify+0x10a>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80022fc:	231f      	movs	r3, #31
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d008      	beq.n	8002318 <xTaskGenericNotify+0xf0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3314      	adds	r3, #20
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	18d3      	adds	r3, r2, r3
 8002310:	3304      	adds	r3, #4
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002316:	e00c      	b.n	8002332 <xTaskGenericNotify+0x10a>
                        xReturn = pdFAIL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 800231c:	e009      	b.n	8002332 <xTaskGenericNotify+0x10a>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800231e:	4b60      	ldr	r3, [pc, #384]	@ (80024a0 <xTaskGenericNotify+0x278>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <xTaskGenericNotify+0x108>
 8002326:	b672      	cpsid	i
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	e7fd      	b.n	8002328 <xTaskGenericNotify+0x100>
                    break;
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	e000      	b.n	8002332 <xTaskGenericNotify+0x10a>

                    break;
 8002330:	46c0      	nop			@ (mov r8, r8)
            }

            traceTASK_NOTIFY( uxIndexToNotify );
 8002332:	f000 fe25 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 8002336:	0003      	movs	r3, r0
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fd39 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 800233e:	0003      	movs	r3, r0
 8002340:	001a      	movs	r2, r3
 8002342:	4b58      	ldr	r3, [pc, #352]	@ (80024a4 <xTaskGenericNotify+0x27c>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d016      	beq.n	800237c <xTaskGenericNotify+0x154>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fd2d 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 8002356:	0003      	movs	r3, r0
 8002358:	001a      	movs	r2, r3
 800235a:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <xTaskGenericNotify+0x27c>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4013      	ands	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <xTaskGenericNotify+0x154>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 fd13 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 800236e:	0003      	movs	r3, r0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	001a      	movs	r2, r3
 8002374:	2103      	movs	r1, #3
 8002376:	20d2      	movs	r0, #210	@ 0xd2
 8002378:	f001 fae0 	bl	800393c <prvTraceStoreKernelCall>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800237c:	231f      	movs	r3, #31
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d000      	beq.n	8002388 <xTaskGenericNotify+0x160>
 8002386:	e081      	b.n	800248c <xTaskGenericNotify+0x264>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	6892      	ldr	r2, [r2, #8]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	3304      	adds	r3, #4
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d103      	bne.n	80023b6 <xTaskGenericNotify+0x18e>
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fcf1 	bl	8002db0 <prvTraceGetTaskNumberHigh16>
 80023ce:	0003      	movs	r3, r0
 80023d0:	001a      	movs	r2, r3
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <xTaskGenericNotify+0x27c>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <xTaskGenericNotify+0x1c8>
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fcd7 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 80023e6:	0003      	movs	r3, r0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	0018      	movs	r0, r3
 80023ec:	f001 f998 	bl	8003720 <prvTraceStoreTaskReady>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <xTaskGenericNotify+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d903      	bls.n	8002404 <xTaskGenericNotify+0x1dc>
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <xTaskGenericNotify+0x280>)
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002408:	4928      	ldr	r1, [pc, #160]	@ (80024ac <xTaskGenericNotify+0x284>)
 800240a:	0013      	movs	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	189b      	adds	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	18cb      	adds	r3, r1, r3
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	3204      	adds	r2, #4
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243e:	0013      	movs	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	189b      	adds	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <xTaskGenericNotify+0x284>)
 8002448:	189a      	adds	r2, r3, r2
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002452:	4916      	ldr	r1, [pc, #88]	@ (80024ac <xTaskGenericNotify+0x284>)
 8002454:	0013      	movs	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	189b      	adds	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	585b      	ldr	r3, [r3, r1]
 800245e:	1c58      	adds	r0, r3, #1
 8002460:	4912      	ldr	r1, [pc, #72]	@ (80024ac <xTaskGenericNotify+0x284>)
 8002462:	0013      	movs	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	189b      	adds	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	5058      	str	r0, [r3, r1]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <xTaskGenericNotify+0x252>
 8002474:	b672      	cpsid	i
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	e7fd      	b.n	8002476 <xTaskGenericNotify+0x24e>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <xTaskGenericNotify+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d901      	bls.n	800248c <xTaskGenericNotify+0x264>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002488:	f000 fb52 	bl	8002b30 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800248c:	f000 fb72 	bl	8002b74 <vPortExitCritical>

        return xReturn;
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b00a      	add	sp, #40	@ 0x28
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	08005c80 	.word	0x08005c80
 80024a0:	20000134 	.word	0x20000134
 80024a4:	200019c8 	.word	0x200019c8
 80024a8:	20000138 	.word	0x20000138
 80024ac:	20000088 	.word	0x20000088
 80024b0:	20000084 	.word	0x20000084

080024b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <prvAddCurrentTaskToDelayedList+0x74>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <prvAddCurrentTaskToDelayedList+0x78>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3304      	adds	r3, #4
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7fd ffa3 	bl	8000416 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	18d3      	adds	r3, r2, r3
 80024d6:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <prvAddCurrentTaskToDelayedList+0x78>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d209      	bcs.n	80024fc <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <prvAddCurrentTaskToDelayedList+0x7c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <prvAddCurrentTaskToDelayedList+0x78>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3304      	adds	r3, #4
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f7fd ff58 	bl	80003aa <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80024fa:	e010      	b.n	800251e <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <prvAddCurrentTaskToDelayedList+0x80>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <prvAddCurrentTaskToDelayedList+0x78>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3304      	adds	r3, #4
 8002506:	0019      	movs	r1, r3
 8002508:	0010      	movs	r0, r2
 800250a:	f7fd ff4e 	bl	80003aa <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <prvAddCurrentTaskToDelayedList+0x84>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d202      	bcs.n	800251e <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <prvAddCurrentTaskToDelayedList+0x84>)
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	20000134 	.word	0x20000134
 800252c:	20000084 	.word	0x20000084
 8002530:	20000118 	.word	0x20000118
 8002534:	20000114 	.word	0x20000114
 8002538:	20000150 	.word	0x20000150

0800253c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002546:	f000 fa31 	bl	80029ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <xTimerCreateTimerTask+0x44>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002552:	490c      	ldr	r1, [pc, #48]	@ (8002584 <xTimerCreateTimerTask+0x48>)
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <xTimerCreateTimerTask+0x4c>)
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <xTimerCreateTimerTask+0x50>)
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2303      	movs	r3, #3
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	f7fe fd70 	bl	8001046 <xTaskCreate>
 8002566:	0003      	movs	r3, r0
 8002568:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <xTimerCreateTimerTask+0x3a>
 8002570:	b672      	cpsid	i
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	e7fd      	b.n	8002572 <xTimerCreateTimerTask+0x36>
        return xReturn;
 8002576:	687b      	ldr	r3, [r7, #4]
    }
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000018c 	.word	0x2000018c
 8002584:	08005584 	.word	0x08005584
 8002588:	08002639 	.word	0x08002639
 800258c:	20000190 	.word	0x20000190

08002590 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800259c:	e009      	b.n	80025b2 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0010      	movs	r0, r2
 80025b0:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	18d1      	adds	r1, r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f8da 	bl	8002778 <prvInsertTimerInActiveList>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d1ea      	bne.n	800259e <prvReloadTimer+0xe>
        }
    }
 80025c8:	46c0      	nop			@ (mov r8, r8)
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <prvProcessExpiredTimer+0x60>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3304      	adds	r3, #4
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fd ff12 	bl	8000416 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2228      	movs	r2, #40	@ 0x28
 80025f6:	5c9b      	ldrb	r3, [r3, r2]
 80025f8:	001a      	movs	r2, r3
 80025fa:	2304      	movs	r3, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d006      	beq.n	800260e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ffc2 	bl	8002590 <prvReloadTimer>
 800260c:	e008      	b.n	8002620 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2228      	movs	r2, #40	@ 0x28
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	2201      	movs	r2, #1
 8002616:	4393      	bics	r3, r2
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2228      	movs	r2, #40	@ 0x28
 800261e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	0010      	movs	r0, r2
 8002628:	4798      	blx	r3
    }
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	20000184 	.word	0x20000184

08002638 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002640:	2308      	movs	r3, #8
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f855 	bl	80026f4 <prvGetNextExpireTime>
 800264a:	0003      	movs	r3, r0
 800264c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f805 	bl	8002664 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800265a:	f000 f8cf 	bl	80027fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	e7ee      	b.n	8002640 <prvTimerTask+0x8>
	...

08002664 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800266e:	f7fe ff8f 	bl	8001590 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002672:	2308      	movs	r3, #8
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	0018      	movs	r0, r3
 8002678:	f000 f85e 	bl	8002738 <prvSampleTimeNow>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12b      	bne.n	80026de <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <prvProcessTimerOrBlockTask+0x42>
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d808      	bhi.n	80026a6 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002694:	f7fe ff88 	bl	80015a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0011      	movs	r1, r2
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff98 	bl	80025d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80026a4:	e01d      	b.n	80026e2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <prvProcessTimerOrBlockTask+0x88>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <prvProcessTimerOrBlockTask+0x56>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <prvProcessTimerOrBlockTask+0x58>
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026be:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <prvProcessTimerOrBlockTask+0x8c>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	0019      	movs	r1, r3
 80026cc:	f7fe fc88 	bl	8000fe0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80026d0:	f7fe ff6a 	bl	80015a8 <xTaskResumeAll>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d104      	bne.n	80026e2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80026d8:	f000 fa2a 	bl	8002b30 <vPortYield>
    }
 80026dc:	e001      	b.n	80026e2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80026de:	f7fe ff63 	bl	80015a8 <xTaskResumeAll>
    }
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b004      	add	sp, #16
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	20000188 	.word	0x20000188
 80026f0:	2000018c 	.word	0x2000018c

080026f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <prvGetNextExpireTime+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <prvGetNextExpireTime+0x16>
 8002706:	2201      	movs	r2, #1
 8002708:	e000      	b.n	800270c <prvGetNextExpireTime+0x18>
 800270a:	2200      	movs	r2, #0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <prvGetNextExpireTime+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e001      	b.n	8002728 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002728:	68fb      	ldr	r3, [r7, #12]
    }
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	20000184 	.word	0x20000184

08002738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002740:	f7ff f832 	bl	80017a8 <xTaskGetTickCount>
 8002744:	0003      	movs	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002748:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <prvSampleTimeNow+0x3c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d205      	bcs.n	800275e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002752:	f000 f903 	bl	800295c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e002      	b.n	8002764 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <prvSampleTimeNow+0x3c>)
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800276a:	68fb      	ldr	r3, [r7, #12]
    }
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000194 	.word	0x20000194

08002778 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d812      	bhi.n	80027c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e01b      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <prvInsertTimerInActiveList+0x7c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	0019      	movs	r1, r3
 80027bc:	0010      	movs	r0, r2
 80027be:	f7fd fdf4 	bl	80003aa <vListInsert>
 80027c2:	e012      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d206      	bcs.n	80027da <prvInsertTimerInActiveList+0x62>
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e007      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <prvInsertTimerInActiveList+0x80>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	0019      	movs	r1, r3
 80027e4:	0010      	movs	r0, r2
 80027e6:	f7fd fde0 	bl	80003aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80027ea:	697b      	ldr	r3, [r7, #20]
    }
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000188 	.word	0x20000188
 80027f8:	20000184 	.word	0x20000184

080027fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002802:	e098      	b.n	8002936 <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da00      	bge.n	800280e <prvProcessReceivedCommands+0x12>
 800280c:	e093      	b.n	8002936 <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3304      	adds	r3, #4
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd fdf8 	bl	8000416 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002826:	003b      	movs	r3, r7
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff ff85 	bl	8002738 <prvSampleTimeNow>
 800282e:	0003      	movs	r3, r0
 8002830:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b09      	cmp	r3, #9
 8002838:	d900      	bls.n	800283c <prvProcessReceivedCommands+0x40>
 800283a:	e079      	b.n	8002930 <prvProcessReceivedCommands+0x134>
 800283c:	009a      	lsls	r2, r3, #2
 800283e:	4b45      	ldr	r3, [pc, #276]	@ (8002954 <prvProcessReceivedCommands+0x158>)
 8002840:	18d3      	adds	r3, r2, r3
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2228      	movs	r2, #40	@ 0x28
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	2201      	movs	r2, #1
 800284e:	4313      	orrs	r3, r2
 8002850:	b2d9      	uxtb	r1, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2228      	movs	r2, #40	@ 0x28
 8002856:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	18d1      	adds	r1, r2, r3
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f7ff ff85 	bl	8002778 <prvInsertTimerInActiveList>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d060      	beq.n	8002934 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2228      	movs	r2, #40	@ 0x28
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	001a      	movs	r2, r3
 800287a:	2304      	movs	r3, #4
 800287c:	4013      	ands	r3, r2
 800287e:	d00a      	beq.n	8002896 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	18d1      	adds	r1, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fe7e 	bl	8002590 <prvReloadTimer>
 8002894:	e008      	b.n	80028a8 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2228      	movs	r2, #40	@ 0x28
 800289a:	5c9b      	ldrb	r3, [r3, r2]
 800289c:	2201      	movs	r2, #1
 800289e:	4393      	bics	r3, r2
 80028a0:	b2d9      	uxtb	r1, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2228      	movs	r2, #40	@ 0x28
 80028a6:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	0010      	movs	r0, r2
 80028b0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80028b2:	e03f      	b.n	8002934 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2228      	movs	r2, #40	@ 0x28
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4393      	bics	r3, r2
 80028be:	b2d9      	uxtb	r1, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2228      	movs	r2, #40	@ 0x28
 80028c4:	5499      	strb	r1, [r3, r2]
                        break;
 80028c6:	e036      	b.n	8002936 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2228      	movs	r2, #40	@ 0x28
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	2201      	movs	r2, #1
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b2d9      	uxtb	r1, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2228      	movs	r2, #40	@ 0x28
 80028d8:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <prvProcessReceivedCommands+0xf4>
 80028ea:	b672      	cpsid	i
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	e7fd      	b.n	80028ec <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	18d1      	adds	r1, r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	6978      	ldr	r0, [r7, #20]
 80028fe:	f7ff ff3b 	bl	8002778 <prvInsertTimerInActiveList>
                        break;
 8002902:	e018      	b.n	8002936 <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2228      	movs	r2, #40	@ 0x28
 8002908:	5c9b      	ldrb	r3, [r3, r2]
 800290a:	001a      	movs	r2, r3
 800290c:	2302      	movs	r3, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d104      	bne.n	800291c <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fa15 	bl	8002d44 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800291a:	e00c      	b.n	8002936 <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2228      	movs	r2, #40	@ 0x28
 8002920:	5c9b      	ldrb	r3, [r3, r2]
 8002922:	2201      	movs	r2, #1
 8002924:	4393      	bics	r3, r2
 8002926:	b2d9      	uxtb	r1, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2228      	movs	r2, #40	@ 0x28
 800292c:	5499      	strb	r1, [r3, r2]
                        break;
 800292e:	e002      	b.n	8002936 <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002930:	46c0      	nop			@ (mov r8, r8)
 8002932:	e000      	b.n	8002936 <prvProcessReceivedCommands+0x13a>
                        break;
 8002934:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <prvProcessReceivedCommands+0x15c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1d39      	adds	r1, r7, #4
 800293c:	2200      	movs	r2, #0
 800293e:	0018      	movs	r0, r3
 8002940:	f7fe f84a 	bl	80009d8 <xQueueReceive>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d000      	beq.n	800294a <prvProcessReceivedCommands+0x14e>
 8002948:	e75c      	b.n	8002804 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08005c94 	.word	0x08005c94
 8002958:	2000018c 	.word	0x2000018c

0800295c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002962:	e00b      	b.n	800297c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <prvSwitchTimerLists+0x48>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800296e:	2301      	movs	r3, #1
 8002970:	425a      	negs	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f7ff fe2c 	bl	80025d4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <prvSwitchTimerLists+0x48>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ee      	bne.n	8002964 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <prvSwitchTimerLists+0x48>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <prvSwitchTimerLists+0x4c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <prvSwitchTimerLists+0x48>)
 8002992:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <prvSwitchTimerLists+0x4c>)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
    }
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	20000184 	.word	0x20000184
 80029a8:	20000188 	.word	0x20000188

080029ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029b0:	f000 f8ce 	bl	8002b50 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029b4:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <prvCheckForValidListAndQueue+0x5c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d120      	bne.n	80029fe <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <prvCheckForValidListAndQueue+0x60>)
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fcca 	bl	8000358 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <prvCheckForValidListAndQueue+0x64>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fd fcc6 	bl	8000358 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <prvCheckForValidListAndQueue+0x68>)
 80029ce:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <prvCheckForValidListAndQueue+0x60>)
 80029d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <prvCheckForValidListAndQueue+0x6c>)
 80029d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <prvCheckForValidListAndQueue+0x64>)
 80029d6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80029d8:	2200      	movs	r2, #0
 80029da:	210c      	movs	r1, #12
 80029dc:	200a      	movs	r0, #10
 80029de:	f7fd fdcd 	bl	800057c <xQueueGenericCreate>
 80029e2:	0002      	movs	r2, r0
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <prvCheckForValidListAndQueue+0x5c>)
 80029e6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80029e8:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <prvCheckForValidListAndQueue+0x5c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <prvCheckForValidListAndQueue+0x5c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <prvCheckForValidListAndQueue+0x70>)
 80029f6:	0011      	movs	r1, r2
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7fe fa97 	bl	8000f2c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80029fe:	f000 f8b9 	bl	8002b74 <vPortExitCritical>
    }
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	2000018c 	.word	0x2000018c
 8002a0c:	2000015c 	.word	0x2000015c
 8002a10:	20000170 	.word	0x20000170
 8002a14:	20000184 	.word	0x20000184
 8002a18:	20000188 	.word	0x20000188
 8002a1c:	0800558c 	.word	0x0800558c

08002a20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	0452      	lsls	r2, r2, #17
 8002a38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b04      	subs	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002a4c:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <pxPortInitialiseStack+0x50>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b14      	subs	r3, #20
 8002a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3b20      	subs	r3, #32
 8002a62:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	08002a75 	.word	0x08002a75

08002a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <prvTaskExitError+0x2c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	d002      	beq.n	8002a8c <prvTaskExitError+0x18>
 8002a86:	b672      	cpsid	i
 8002a88:	46c0      	nop			@ (mov r8, r8)
 8002a8a:	e7fd      	b.n	8002a88 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002a8c:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0fc      	beq.n	8002a90 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000004 	.word	0x20000004

08002aa4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002aa8:	46c0      	nop			@ (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae0 <pxCurrentTCBConst2>)
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	3020      	adds	r0, #32
 8002ab8:	f380 8809 	msr	PSP, r0
 8002abc:	2002      	movs	r0, #2
 8002abe:	f380 8814 	msr	CONTROL, r0
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002ac8:	46ae      	mov	lr, r5
 8002aca:	bc08      	pop	{r3}
 8002acc:	bc04      	pop	{r2}
 8002ace:	b662      	cpsie	i
 8002ad0:	4718      	bx	r3
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	46c0      	nop			@ (mov r8, r8)

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46c0      	nop			@ (mov r8, r8)

08002ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <xPortStartScheduler+0x40>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <xPortStartScheduler+0x40>)
 8002af2:	21ff      	movs	r1, #255	@ 0xff
 8002af4:	0409      	lsls	r1, r1, #16
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <xPortStartScheduler+0x40>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <xPortStartScheduler+0x40>)
 8002b00:	21ff      	movs	r1, #255	@ 0xff
 8002b02:	0609      	lsls	r1, r1, #24
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b08:	f000 f898 	bl	8002c3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b0c:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <xPortStartScheduler+0x44>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002b12:	f7ff ffcd 	bl	8002ab0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b16:	f7fe ff89 	bl	8001a2c <vTaskSwitchContext>
    prvTaskExitError();
 8002b1a:	f7ff ffab 	bl	8002a74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	e000ed20 	.word	0xe000ed20
 8002b2c:	20000004 	.word	0x20000004

08002b30 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <vPortYield+0x1c>)
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	0552      	lsls	r2, r2, #21
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002b3c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002b40:	f3bf 8f6f 	isb	sy
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002b54:	b672      	cpsid	i
    uxCriticalNesting++;
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <vPortEnterCritical+0x20>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <vPortEnterCritical+0x20>)
 8002b5e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002b60:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002b64:	f3bf 8f6f 	isb	sy
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	20000004 	.word	0x20000004

08002b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <vPortExitCritical+0x2c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <vPortExitCritical+0x12>
 8002b80:	b672      	cpsid	i
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	e7fd      	b.n	8002b82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <vPortExitCritical+0x2c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	1e5a      	subs	r2, r3, #1
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <vPortExitCritical+0x2c>)
 8002b8e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <vPortExitCritical+0x2c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002b98:	b662      	cpsie	i
    }
}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002ba4:	f3ef 8010 	mrs	r0, PRIMASK
 8002ba8:	b672      	cpsid	i
 8002baa:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	0018      	movs	r0, r3

08002bb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002bb0:	f380 8810 	msr	PRIMASK, r0
 8002bb4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
	...

08002bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002bc0:	f3ef 8009 	mrs	r0, PSP
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <pxCurrentTCBConst>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	3820      	subs	r0, #32
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bce:	4644      	mov	r4, r8
 8002bd0:	464d      	mov	r5, r9
 8002bd2:	4656      	mov	r6, sl
 8002bd4:	465f      	mov	r7, fp
 8002bd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bd8:	b508      	push	{r3, lr}
 8002bda:	b672      	cpsid	i
 8002bdc:	f7fe ff26 	bl	8001a2c <vTaskSwitchContext>
 8002be0:	b662      	cpsie	i
 8002be2:	bc0c      	pop	{r2, r3}
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	6808      	ldr	r0, [r1, #0]
 8002be8:	3010      	adds	r0, #16
 8002bea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bec:	46a0      	mov	r8, r4
 8002bee:	46a9      	mov	r9, r5
 8002bf0:	46b2      	mov	sl, r6
 8002bf2:	46bb      	mov	fp, r7
 8002bf4:	f380 8809 	msr	PSP, r0
 8002bf8:	3820      	subs	r0, #32
 8002bfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bfc:	4718      	bx	r3
 8002bfe:	46c0      	nop			@ (mov r8, r8)

08002c00 <pxCurrentTCBConst>:
 8002c00:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46c0      	nop			@ (mov r8, r8)

08002c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c0e:	f7ff ffc9 	bl	8002ba4 <ulSetInterruptMaskFromISR>
 8002c12:	0003      	movs	r3, r0
 8002c14:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c16:	f7fe fddf 	bl	80017d8 <xTaskIncrementTick>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d003      	beq.n	8002c26 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SysTick_Handler+0x30>)
 8002c20:	2280      	movs	r2, #128	@ 0x80
 8002c22:	0552      	lsls	r2, r2, #21
 8002c24:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ffc1 	bl	8002bb0 <vClearInterruptMaskFromISR>
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <vPortSetupTimerInterrupt+0x34>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <vPortSetupTimerInterrupt+0x38>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <vPortSetupTimerInterrupt+0x3c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	22fa      	movs	r2, #250	@ 0xfa
 8002c52:	0091      	lsls	r1, r2, #2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fa57 	bl	8000108 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <vPortSetupTimerInterrupt+0x40>)
 8002c60:	3a01      	subs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c64:	4b02      	ldr	r3, [pc, #8]	@ (8002c70 <vPortSetupTimerInterrupt+0x34>)
 8002c66:	2207      	movs	r2, #7
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	e000e010 	.word	0xe000e010
 8002c74:	e000e018 	.word	0xe000e018
 8002c78:	20000014 	.word	0x20000014
 8002c7c:	e000e014 	.word	0xe000e014

08002c80 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4013      	ands	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2207      	movs	r2, #7
 8002c98:	4393      	bics	r3, r2
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d205      	bcs.n	8002cae <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	4393      	bics	r3, r2
 8002ca8:	3308      	adds	r3, #8
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e001      	b.n	8002cb2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002cb2:	f7fe fc6d 	bl	8001590 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <pvPortMalloc+0xb4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <pvPortMalloc+0xb8>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <pvPortMalloc+0xb4>)
 8002cc8:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01a      	beq.n	8002d06 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <pvPortMalloc+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d813      	bhi.n	8002d06 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	18d2      	adds	r2, r2, r3
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90b      	bls.n	8002d06 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <pvPortMalloc+0xb4>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	18d3      	adds	r3, r2, r3
 8002cf8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	18d2      	adds	r2, r2, r3
 8002d02:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <pvPortMalloc+0xbc>)
 8002d04:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <pvPortMalloc+0x9a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	0019      	movs	r1, r3
 8002d12:	2094      	movs	r0, #148	@ 0x94
 8002d14:	f000 fd6c 	bl	80037f0 <vTraceStoreMemMangEvent>
 8002d18:	e005      	b.n	8002d26 <pvPortMalloc+0xa6>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	0019      	movs	r1, r3
 8002d20:	20e8      	movs	r0, #232	@ 0xe8
 8002d22:	f000 fd65 	bl	80037f0 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8002d26:	f7fe fc3f 	bl	80015a8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000199c 	.word	0x2000199c
 8002d38:	2000019f 	.word	0x2000019f
 8002d3c:	20001998 	.word	0x20001998
 8002d40:	000017f7 	.word	0x000017f7

08002d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <vPortFree+0x14>
 8002d52:	b672      	cpsid	i
 8002d54:	46c0      	nop			@ (mov r8, r8)
 8002d56:	e7fd      	b.n	8002d54 <vPortFree+0x10>
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7fe f822 	bl	8000db4 <uxQueueGetQueueNumber>
 8002d70:	0003      	movs	r3, r0
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fe f82b 	bl	8000de0 <ucQueueGetQueueType>
 8002d8a:	0003      	movs	r3, r0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff f8a4 	bl	8001eec <uxTaskGetTaskNumber>
 8002da4:	0003      	movs	r3, r0
 8002da6:	b29b      	uxth	r3, r3
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff f896 	bl	8001eec <uxTaskGetTaskNumber>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b29b      	uxth	r3, r3
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	000a      	movs	r2, r1
 8002dd8:	1cbb      	adds	r3, r7, #2
 8002dda:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff f884 	bl	8001eec <uxTaskGetTaskNumber>
 8002de4:	0003      	movs	r3, r0
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	1cbb      	adds	r3, r7, #2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0011      	movs	r1, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff f88d 	bl	8001f14 <vTaskSetTaskNumber>
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	1cbb      	adds	r3, r7, #2
 8002e0e:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff f86a 	bl	8001eec <uxTaskGetTaskNumber>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	0c1a      	lsrs	r2, r3, #16
 8002e1e:	1cbb      	adds	r3, r7, #2
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0011      	movs	r1, r2
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff f872 	bl	8001f14 <vTaskSetTaskNumber>
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff ff8c 	bl	8002d60 <prvTraceGetQueueNumber>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	b29b      	uxth	r3, r3
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff ff7e 	bl	8002d60 <prvTraceGetQueueNumber>
 8002e64:	0003      	movs	r3, r0
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b29b      	uxth	r3, r3
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	1cbb      	adds	r3, r7, #2
 8002e7e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff ff6c 	bl	8002d60 <prvTraceGetQueueNumber>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	1cbb      	adds	r3, r7, #2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0011      	movs	r1, r2
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd ff95 	bl	8000dc8 <vQueueSetQueueNumber>
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	000a      	movs	r2, r1
 8002eb0:	1cbb      	adds	r3, r7, #2
 8002eb2:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7ff ff52 	bl	8002d60 <prvTraceGetQueueNumber>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	0c1a      	lsrs	r2, r3, #16
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7fd ff7a 	bl	8000dc8 <vQueueSetQueueNumber>
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvTraceGetEventGroupNumberLow16>:
#endif

#if (TRC_CFG_INCLUDE_EVENT_GROUP_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetEventGroupNumberLow16(void* pvEventGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7fd fa16 	bl	8000318 <uxEventGroupGetNumber>
 8002eec:	0003      	movs	r3, r0
 8002eee:	b29b      	uxth	r3, r3
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvTraceGetEventGroupNumberHigh16>:

uint16_t prvTraceGetEventGroupNumberHigh16(void* pvEventGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd fa08 	bl	8000318 <uxEventGroupGetNumber>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b29b      	uxth	r3, r3
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <prvTraceSetEventGroupNumberLow16>:

void prvTraceSetEventGroupNumberLow16(void* pvEventGroup, uint16_t uiValue)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	000a      	movs	r2, r1
 8002f20:	1cbb      	adds	r3, r7, #2
 8002f22:	801a      	strh	r2, [r3, #0]
	vEventGroupSetNumber((EventGroupHandle_t)pvEventGroup, TRACE_SET_LOW16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup), uiValue));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7fd f9f6 	bl	8000318 <uxEventGroupGetNumber>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	1cbb      	adds	r3, r7, #2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fd f9ff 	bl	8000340 <vEventGroupSetNumber>
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <prvTraceSetEventGroupNumberHigh16>:

void prvTraceSetEventGroupNumberHigh16(void* pvEventGroup, uint16_t uiValue)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	000a      	movs	r2, r1
 8002f54:	1cbb      	adds	r3, r7, #2
 8002f56:	801a      	strh	r2, [r3, #0]
	vEventGroupSetNumber((EventGroupHandle_t)pvEventGroup, TRACE_SET_HIGH16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup), uiValue));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd f9dc 	bl	8000318 <uxEventGroupGetNumber>
 8002f60:	0003      	movs	r3, r0
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	0c1a      	lsrs	r2, r3, #16
 8002f66:	1cbb      	adds	r3, r7, #2
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fd f9e4 	bl	8000340 <vEventGroupSetNumber>
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8002f84:	f7ff f840 	bl	8002008 <xTaskGetCurrentTaskHandle>
 8002f88:	0003      	movs	r3, r0
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8002fb4:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2209      	movs	r2, #9
 8002fba:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8002fbc:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2250      	movs	r2, #80	@ 0x50
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8002fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2251      	movs	r2, #81	@ 0x51
 8002fcc:	2106      	movs	r1, #6
 8002fce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2252      	movs	r2, #82	@ 0x52
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8002fda:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2253      	movs	r2, #83	@ 0x53
 8002fe0:	2106      	movs	r1, #6
 8002fe2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8002fe4:	4b56      	ldr	r3, [pc, #344]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2254      	movs	r2, #84	@ 0x54
 8002fea:	2104      	movs	r1, #4
 8002fec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8002fee:	4b54      	ldr	r3, [pc, #336]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2255      	movs	r2, #85	@ 0x55
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8002ff8:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2256      	movs	r2, #86	@ 0x56
 8002ffe:	2102      	movs	r1, #2
 8003000:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8003002:	4b4f      	ldr	r3, [pc, #316]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2257      	movs	r2, #87	@ 0x57
 8003008:	2102      	movs	r1, #2
 800300a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 800300c:	4b4c      	ldr	r3, [pc, #304]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2258      	movs	r2, #88	@ 0x58
 8003012:	2102      	movs	r1, #2
 8003014:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8003016:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	225c      	movs	r2, #92	@ 0x5c
 800301c:	210f      	movs	r1, #15
 800301e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8003020:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	225d      	movs	r2, #93	@ 0x5d
 8003026:	210f      	movs	r1, #15
 8003028:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800302a:	4b45      	ldr	r3, [pc, #276]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	225e      	movs	r2, #94	@ 0x5e
 8003030:	210f      	movs	r1, #15
 8003032:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8003034:	4b42      	ldr	r3, [pc, #264]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	225f      	movs	r2, #95	@ 0x5f
 800303a:	210f      	movs	r1, #15
 800303c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 800303e:	4b40      	ldr	r3, [pc, #256]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2260      	movs	r2, #96	@ 0x60
 8003044:	210f      	movs	r1, #15
 8003046:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8003048:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2261      	movs	r2, #97	@ 0x61
 800304e:	210f      	movs	r1, #15
 8003050:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8003052:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2262      	movs	r2, #98	@ 0x62
 8003058:	210f      	movs	r1, #15
 800305a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 800305c:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2263      	movs	r2, #99	@ 0x63
 8003062:	210f      	movs	r1, #15
 8003064:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8003066:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2264      	movs	r2, #100	@ 0x64
 800306c:	210f      	movs	r1, #15
 800306e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8003070:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2268      	movs	r2, #104	@ 0x68
 8003076:	2110      	movs	r1, #16
 8003078:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800307a:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2269      	movs	r2, #105	@ 0x69
 8003080:	2110      	movs	r1, #16
 8003082:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8003084:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	226a      	movs	r2, #106	@ 0x6a
 800308a:	2110      	movs	r1, #16
 800308c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800308e:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	226b      	movs	r2, #107	@ 0x6b
 8003094:	2113      	movs	r1, #19
 8003096:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003098:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	226c      	movs	r2, #108	@ 0x6c
 800309e:	2111      	movs	r1, #17
 80030a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80030a2:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	226d      	movs	r2, #109	@ 0x6d
 80030a8:	2110      	movs	r1, #16
 80030aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80030ac:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	226e      	movs	r2, #110	@ 0x6e
 80030b2:	2113      	movs	r1, #19
 80030b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80030b6:	4b22      	ldr	r3, [pc, #136]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	226f      	movs	r2, #111	@ 0x6f
 80030bc:	2113      	movs	r1, #19
 80030be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80030c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2270      	movs	r2, #112	@ 0x70
 80030c6:	2113      	movs	r1, #19
 80030c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2274      	movs	r2, #116	@ 0x74
 80030d0:	2100      	movs	r1, #0
 80030d2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2276      	movs	r2, #118	@ 0x76
 80030da:	2120      	movs	r1, #32
 80030dc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80030de:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2278      	movs	r2, #120	@ 0x78
 80030e4:	2180      	movs	r1, #128	@ 0x80
 80030e6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	227a      	movs	r2, #122	@ 0x7a
 80030ee:	21a0      	movs	r1, #160	@ 0xa0
 80030f0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	227c      	movs	r2, #124	@ 0x7c
 80030f8:	2189      	movs	r1, #137	@ 0x89
 80030fa:	0049      	lsls	r1, r1, #1
 80030fc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	227e      	movs	r2, #126	@ 0x7e
 8003104:	21ab      	movs	r1, #171	@ 0xab
 8003106:	0049      	lsls	r1, r1, #1
 8003108:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	21b3      	movs	r1, #179	@ 0xb3
 8003112:	0049      	lsls	r1, r1, #1
 8003114:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2282      	movs	r2, #130	@ 0x82
 800311c:	21c6      	movs	r1, #198	@ 0xc6
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8003122:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2284      	movs	r2, #132	@ 0x84
 8003128:	21d9      	movs	r1, #217	@ 0xd9
 800312a:	0049      	lsls	r1, r1, #1
 800312c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 800312e:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	22ec      	movs	r2, #236	@ 0xec
 8003134:	0052      	lsls	r2, r2, #1
 8003136:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 8003138:	2300      	movs	r3, #0
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20002df8 	.word	0x20002df8

08003144 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 800314e:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003150:	2200      	movs	r2, #0
 8003152:	825a      	strh	r2, [r3, #18]
 8003154:	4b3e      	ldr	r3, [pc, #248]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003156:	8a5a      	ldrh	r2, [r3, #18]
 8003158:	4b3d      	ldr	r3, [pc, #244]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800315a:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 800315c:	4b3c      	ldr	r3, [pc, #240]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800315e:	2202      	movs	r2, #2
 8003160:	829a      	strh	r2, [r3, #20]
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003164:	8a9a      	ldrh	r2, [r3, #20]
 8003166:	4b3a      	ldr	r3, [pc, #232]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003168:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 800316a:	4b39      	ldr	r3, [pc, #228]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800316c:	2208      	movs	r2, #8
 800316e:	82da      	strh	r2, [r3, #22]
 8003170:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003172:	8ada      	ldrh	r2, [r3, #22]
 8003174:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003176:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8003178:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800317a:	220a      	movs	r2, #10
 800317c:	831a      	strh	r2, [r3, #24]
 800317e:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003180:	8b1a      	ldrh	r2, [r3, #24]
 8003182:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003184:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8003186:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003188:	2210      	movs	r2, #16
 800318a:	835a      	strh	r2, [r3, #26]
 800318c:	4b30      	ldr	r3, [pc, #192]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800318e:	8b5a      	ldrh	r2, [r3, #26]
 8003190:	4b2f      	ldr	r3, [pc, #188]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003192:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003194:	4b2e      	ldr	r3, [pc, #184]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003196:	2214      	movs	r2, #20
 8003198:	839a      	strh	r2, [r3, #28]
 800319a:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800319c:	8b9a      	ldrh	r2, [r3, #28]
 800319e:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031a0:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031a4:	2215      	movs	r2, #21
 80031a6:	83da      	strh	r2, [r3, #30]
 80031a8:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031aa:	8bda      	ldrh	r2, [r3, #30]
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031ae:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80031b0:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031b2:	2217      	movs	r2, #23
 80031b4:	841a      	strh	r2, [r3, #32]
 80031b6:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031b8:	8c1a      	ldrh	r2, [r3, #32]
 80031ba:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031bc:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031c0:	2219      	movs	r2, #25
 80031c2:	845a      	strh	r2, [r3, #34]	@ 0x22
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031c6:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031ca:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031da:	2209      	movs	r2, #9
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031e0:	220f      	movs	r2, #15
 80031e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031e6:	2213      	movs	r2, #19
 80031e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031ec:	2214      	movs	r2, #20
 80031ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031f2:	2216      	movs	r2, #22
 80031f4:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031f8:	2218      	movs	r2, #24
 80031fa:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80031fe:	221a      	movs	r2, #26
 8003200:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	e00a      	b.n	800321e <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003208:	4a11      	ldr	r2, [pc, #68]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3318      	adds	r3, #24
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	3306      	adds	r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d9f1      	bls.n	8003208 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	e009      	b.n	800323e <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 800322a:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800322c:	2148      	movs	r1, #72	@ 0x48
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	18d3      	adds	r3, r2, r3
 8003232:	185b      	adds	r3, r3, r1
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3301      	adds	r3, #1
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b1a      	cmp	r3, #26
 8003242:	d9f2      	bls.n	800322a <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	200019cc 	.word	0x200019cc

08003254 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	0002      	movs	r2, r0
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 8003260:	1dfb      	adds	r3, r7, #7
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d816      	bhi.n	8003296 <pszTraceGetErrorNotEnoughHandles+0x42>
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8003272:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8003274:	e010      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8003276:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <pszTraceGetErrorNotEnoughHandles+0x54>)
 8003278:	e00e      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <pszTraceGetErrorNotEnoughHandles+0x58>)
 800327c:	e00c      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8003280:	e00a      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8003282:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8003284:	e008      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <pszTraceGetErrorNotEnoughHandles+0x64>)
 8003288:	e006      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <pszTraceGetErrorNotEnoughHandles+0x68>)
 800328c:	e004      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003290:	e002      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003294:	e000      	b.n	8003298 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08005cbc 	.word	0x08005cbc
 80032a4:	08005594 	.word	0x08005594
 80032a8:	080055dc 	.word	0x080055dc
 80032ac:	08005624 	.word	0x08005624
 80032b0:	08005678 	.word	0x08005678
 80032b4:	080056c4 	.word	0x080056c4
 80032b8:	08005710 	.word	0x08005710
 80032bc:	0800575c 	.word	0x0800575c
 80032c0:	080057b0 	.word	0x080057b0
 80032c4:	08005808 	.word	0x08005808
 80032c8:	08005864 	.word	0x08005864

080032cc <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 80032d4:	f000 f8ec 	bl	80034b0 <xTraceInitialize>
 80032d8:	0003      	movs	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 80032de:	2301      	movs	r3, #1
 80032e0:	e021      	b.n	8003326 <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10b      	bne.n	8003300 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 80032e8:	f7ff fe5b 	bl	8002fa2 <xTraceKernelPortEnable>
 80032ec:	0003      	movs	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e017      	b.n	8003326 <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 80032f6:	f000 f8a9 	bl	800344c <prvTraceInitTimestamps>

		prvTraceStart();
 80032fa:	f000 f825 	bl	8003348 <prvTraceStart>
 80032fe:	e011      	b.n	8003324 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d105      	bne.n	8003312 <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8003306:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <xTraceEnable+0x64>)
 8003308:	0018      	movs	r0, r3
 800330a:	f000 ffcb 	bl	80042a4 <prvTraceError>

		return TRC_FAIL;
 800330e:	2301      	movs	r3, #1
 8003310:	e009      	b.n	8003326 <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <xTraceEnable+0x68>)
 800331a:	0018      	movs	r0, r3
 800331c:	f000 ffc2 	bl	80042a4 <prvTraceError>

		return TRC_FAIL;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	08005894 	.word	0x08005894
 8003334:	080058d4 	.word	0x080058d4

08003338 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	prvTraceStop();
 800333c:	f000 f86e 	bl	800341c <prvTraceStop>

	return TRC_SUCCESS;
 8003340:	2300      	movs	r3, #0
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 800334e:	2417      	movs	r4, #23
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 8003356:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <prvTraceStart+0xc4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d050      	beq.n	8003400 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <prvTraceStart+0xc4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	2b01      	cmp	r3, #1
 8003366:	d04d      	beq.n	8003404 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8003368:	4b29      	ldr	r3, [pc, #164]	@ (8003410 <prvTraceStart+0xc8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d14a      	bne.n	8003406 <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	60bb      	str	r3, [r7, #8]
  return(result);
 8003376:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	2301      	movs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <prvTraceStart+0xcc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <prvTraceStart+0xcc>)
 800338e:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8003390:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <prvTraceStart+0xc4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8003398:	f7ff fdf2 	bl	8002f80 <prvTraceGetCurrentTaskHandle>
 800339c:	0003      	movs	r3, r0
 800339e:	0018      	movs	r0, r3
 80033a0:	f7ff fcf8 	bl	8002d94 <prvTraceGetTaskNumberLow16>
 80033a4:	0003      	movs	r3, r0
 80033a6:	001a      	movs	r2, r3
 80033a8:	0025      	movs	r5, r4
 80033aa:	197b      	adds	r3, r7, r5
 80033ac:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 80033ae:	197b      	adds	r3, r7, r5
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d113      	bne.n	80033de <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 80033b6:	197c      	adds	r4, r7, r5
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 fdbf 	bl	8003f3c <prvTraceGetObjectHandle>
 80033be:	0003      	movs	r3, r0
 80033c0:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <prvTraceStart+0xd0>)
 80033c4:	197b      	adds	r3, r7, r5
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	0019      	movs	r1, r3
 80033ca:	2003      	movs	r0, #3
 80033cc:	f000 feae 	bl	800412c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80033d0:	197b      	adds	r3, r7, r5
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	0019      	movs	r1, r3
 80033d8:	2003      	movs	r0, #3
 80033da:	f000 fc91 	bl	8003d00 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80033de:	2317      	movs	r3, #23
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fc17 	bl	8003c18 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <prvTraceStart+0xcc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <prvTraceStart+0xcc>)
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	e002      	b.n	8003406 <prvTraceStart+0xbe>
		return;
 8003400:	46c0      	nop			@ (mov r8, r8)
 8003402:	e000      	b.n	8003406 <prvTraceStart+0xbe>
		return; /* Already running */
 8003404:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bdb0      	pop	{r4, r5, r7, pc}
 800340c:	20002df8 	.word	0x20002df8
 8003410:	20001a30 	.word	0x20001a30
 8003414:	200019b4 	.word	0x200019b4
 8003418:	08005914 	.word	0x08005914

0800341c <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <prvTraceStop+0x28>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <prvTraceStop+0x28>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <prvTraceStop+0x2c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8003438:	4b03      	ldr	r3, [pc, #12]	@ (8003448 <prvTraceStop+0x2c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4798      	blx	r3
	}
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20002df8 	.word	0x20002df8
 8003448:	200019c0 	.word	0x200019c0

0800344c <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <prvTraceInitTimestamps+0x14>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <prvTraceInitTimestamps+0x18>)
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	e000e018 	.word	0xe000e018
 8003464:	200019c4 	.word	0x200019c4

08003468 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2100      	movs	r1, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fec2 	bl	8004200 <prvTraceOpenSymbol>
 800347c:	0002      	movs	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8003498:	230c      	movs	r3, #12
 800349a:	18fa      	adds	r2, r7, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff ffe1 	bl	8003468 <xTraceStringRegister>

	return trcStr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 80034b4:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <xTraceInitialize+0x204>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 80034bc:	2300      	movs	r3, #0
 80034be:	e0f6      	b.n	80036ae <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80034c0:	4b7d      	ldr	r3, [pc, #500]	@ (80036b8 <xTraceInitialize+0x208>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	4252      	negs	r2, r2
 80034c6:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 80034c8:	4b7c      	ldr	r3, [pc, #496]	@ (80036bc <xTraceInitialize+0x20c>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 80034ce:	4b7c      	ldr	r3, [pc, #496]	@ (80036c0 <xTraceInitialize+0x210>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 80034d4:	4b7b      	ldr	r3, [pc, #492]	@ (80036c4 <xTraceInitialize+0x214>)
 80034d6:	4a7c      	ldr	r2, [pc, #496]	@ (80036c8 <xTraceInitialize+0x218>)
 80034d8:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 80034da:	4b7c      	ldr	r3, [pc, #496]	@ (80036cc <xTraceInitialize+0x21c>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b7c      	ldr	r3, [pc, #496]	@ (80036d0 <xTraceInitialize+0x220>)
 80034e0:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 80034e2:	4b7c      	ldr	r3, [pc, #496]	@ (80036d4 <xTraceInitialize+0x224>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fd53 	bl	8002f90 <xTraceKernelPortInitialize>
 80034ea:	0003      	movs	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0dc      	b.n	80036ae <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80034f4:	4b73      	ldr	r3, [pc, #460]	@ (80036c4 <xTraceInitialize+0x214>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a77      	ldr	r2, [pc, #476]	@ (80036d8 <xTraceInitialize+0x228>)
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f001 ffe9 	bl	80054d4 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8003502:	4b70      	ldr	r3, [pc, #448]	@ (80036c4 <xTraceInitialize+0x214>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a75      	ldr	r2, [pc, #468]	@ (80036dc <xTraceInitialize+0x22c>)
 8003508:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 800350a:	4b6e      	ldr	r3, [pc, #440]	@ (80036c4 <xTraceInitialize+0x214>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2207      	movs	r2, #7
 8003510:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8003512:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <xTraceInitialize+0x214>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 800351a:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <xTraceInitialize+0x214>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6e      	ldr	r2, [pc, #440]	@ (80036d8 <xTraceInitialize+0x228>)
 8003520:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8003522:	4b68      	ldr	r3, [pc, #416]	@ (80036c4 <xTraceInitialize+0x214>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	22fa      	movs	r2, #250	@ 0xfa
 8003528:	0092      	lsls	r2, r2, #2
 800352a:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 800352c:	4b65      	ldr	r3, [pc, #404]	@ (80036c4 <xTraceInitialize+0x214>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6b      	ldr	r2, [pc, #428]	@ (80036e0 <xTraceInitialize+0x230>)
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8003534:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <xTraceInitialize+0x214>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800353c:	4b61      	ldr	r3, [pc, #388]	@ (80036c4 <xTraceInitialize+0x214>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8003544:	f7ff fd34 	bl	8002fb0 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003548:	4b5e      	ldr	r3, [pc, #376]	@ (80036c4 <xTraceInitialize+0x214>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2398      	movs	r3, #152	@ 0x98
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4964      	ldr	r1, [pc, #400]	@ (80036e4 <xTraceInitialize+0x234>)
 8003552:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8003554:	4b5b      	ldr	r3, [pc, #364]	@ (80036c4 <xTraceInitialize+0x214>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2399      	movs	r3, #153	@ 0x99
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	21c8      	movs	r1, #200	@ 0xc8
 800355e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8003560:	4b58      	ldr	r3, [pc, #352]	@ (80036c4 <xTraceInitialize+0x214>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	239a      	movs	r3, #154	@ 0x9a
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	2101      	movs	r1, #1
 800356a:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 800356c:	4b55      	ldr	r3, [pc, #340]	@ (80036c4 <xTraceInitialize+0x214>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	23ef      	movs	r3, #239	@ 0xef
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	495c      	ldr	r1, [pc, #368]	@ (80036e8 <xTraceInitialize+0x238>)
 8003576:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003578:	4b52      	ldr	r3, [pc, #328]	@ (80036c4 <xTraceInitialize+0x214>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	22f0      	movs	r2, #240	@ 0xf0
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	4694      	mov	ip, r2
 8003582:	4463      	add	r3, ip
 8003584:	4959      	ldr	r1, [pc, #356]	@ (80036ec <xTraceInitialize+0x23c>)
 8003586:	2250      	movs	r2, #80	@ 0x50
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fdab 	bl	80040e4 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800358e:	4b4d      	ldr	r3, [pc, #308]	@ (80036c4 <xTraceInitialize+0x214>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2382      	movs	r3, #130	@ 0x82
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4956      	ldr	r1, [pc, #344]	@ (80036f0 <xTraceInitialize+0x240>)
 8003598:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <xTraceInitialize+0x214>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a55      	ldr	r2, [pc, #340]	@ (80036f4 <xTraceInitialize+0x244>)
 80035a0:	210a      	movs	r1, #10
 80035a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 80035a4:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <xTraceInitialize+0x214>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a53      	ldr	r2, [pc, #332]	@ (80036f8 <xTraceInitialize+0x248>)
 80035aa:	210b      	movs	r1, #11
 80035ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 80035ae:	4b45      	ldr	r3, [pc, #276]	@ (80036c4 <xTraceInitialize+0x214>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <xTraceInitialize+0x24c>)
 80035b4:	210c      	movs	r1, #12
 80035b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 80035b8:	4b42      	ldr	r3, [pc, #264]	@ (80036c4 <xTraceInitialize+0x214>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a50      	ldr	r2, [pc, #320]	@ (8003700 <xTraceInitialize+0x250>)
 80035be:	210d      	movs	r1, #13
 80035c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 80035c2:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <xTraceInitialize+0x214>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <xTraceInitialize+0x254>)
 80035c8:	2171      	movs	r1, #113	@ 0x71
 80035ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 80035cc:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <xTraceInitialize+0x214>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <xTraceInitialize+0x258>)
 80035d2:	2172      	movs	r1, #114	@ 0x72
 80035d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <xTraceInitialize+0x214>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <xTraceInitialize+0x25c>)
 80035dc:	2173      	movs	r1, #115	@ 0x73
 80035de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 80035e0:	4b38      	ldr	r3, [pc, #224]	@ (80036c4 <xTraceInitialize+0x214>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003710 <xTraceInitialize+0x260>)
 80035e6:	2174      	movs	r1, #116	@ 0x74
 80035e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 80035ea:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <xTraceInitialize+0x214>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	239e      	movs	r3, #158	@ 0x9e
 80035f0:	015b      	lsls	r3, r3, #5
 80035f2:	21f1      	movs	r1, #241	@ 0xf1
 80035f4:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 80035f6:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <xTraceInitialize+0x214>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a46      	ldr	r2, [pc, #280]	@ (8003714 <xTraceInitialize+0x264>)
 80035fc:	21f2      	movs	r1, #242	@ 0xf2
 80035fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <xTraceInitialize+0x214>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a44      	ldr	r2, [pc, #272]	@ (8003718 <xTraceInitialize+0x268>)
 8003606:	21f3      	movs	r1, #243	@ 0xf3
 8003608:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 800360a:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <xTraceInitialize+0x214>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a43      	ldr	r2, [pc, #268]	@ (800371c <xTraceInitialize+0x26c>)
 8003610:	21f4      	movs	r1, #244	@ 0xf4
 8003612:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8003614:	f7ff fd96 	bl	8003144 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8003618:	4b2a      	ldr	r3, [pc, #168]	@ (80036c4 <xTraceInitialize+0x214>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	22f4      	movs	r2, #244	@ 0xf4
 800361e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003620:	4b28      	ldr	r3, [pc, #160]	@ (80036c4 <xTraceInitialize+0x214>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	22f3      	movs	r2, #243	@ 0xf3
 8003626:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003628:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <xTraceInitialize+0x214>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	22f2      	movs	r2, #242	@ 0xf2
 800362e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8003630:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <xTraceInitialize+0x214>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22f1      	movs	r2, #241	@ 0xf1
 8003636:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8003638:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <xTraceInitialize+0x214>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2274      	movs	r2, #116	@ 0x74
 800363e:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8003640:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <xTraceInitialize+0x214>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2273      	movs	r2, #115	@ 0x73
 8003646:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <xTraceInitialize+0x214>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2272      	movs	r2, #114	@ 0x72
 800364e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8003650:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <xTraceInitialize+0x214>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2271      	movs	r2, #113	@ 0x71
 8003656:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8003658:	4b1a      	ldr	r3, [pc, #104]	@ (80036c4 <xTraceInitialize+0x214>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2204      	movs	r2, #4
 800365e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8003660:	4b18      	ldr	r3, [pc, #96]	@ (80036c4 <xTraceInitialize+0x214>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2203      	movs	r2, #3
 8003666:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8003668:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <xTraceInitialize+0x214>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2202      	movs	r2, #2
 800366e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <xTraceInitialize+0x214>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <xTraceInitialize+0x210>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <xTraceInitialize+0x214>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	22f0      	movs	r2, #240	@ 0xf0
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	1898      	adds	r0, r3, r2
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <xTraceInitialize+0x210>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2250      	movs	r2, #80	@ 0x50
 8003690:	0019      	movs	r1, r3
 8003692:	f000 fd27 	bl	80040e4 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <xTraceInitialize+0x214>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	23ee      	movs	r3, #238	@ 0xee
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	2101      	movs	r1, #1
 80036a0:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 80036a2:	f7ff febb 	bl	800341c <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 80036a6:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <xTraceInitialize+0x204>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20002dfc 	.word	0x20002dfc
 80036b8:	200019c8 	.word	0x200019c8
 80036bc:	200019ca 	.word	0x200019ca
 80036c0:	20001a30 	.word	0x20001a30
 80036c4:	20002df8 	.word	0x20002df8
 80036c8:	20001a34 	.word	0x20001a34
 80036cc:	e000e018 	.word	0xe000e018
 80036d0:	200019c4 	.word	0x200019c4
 80036d4:	200019a0 	.word	0x200019a0
 80036d8:	000013c4 	.word	0x000013c4
 80036dc:	00001aa1 	.word	0x00001aa1
 80036e0:	f0f0f0f0 	.word	0xf0f0f0f0
 80036e4:	f1f1f1f1 	.word	0xf1f1f1f1
 80036e8:	f2f2f2f2 	.word	0xf2f2f2f2
 80036ec:	08005990 	.word	0x08005990
 80036f0:	f3f3f3f3 	.word	0xf3f3f3f3
 80036f4:	000013b8 	.word	0x000013b8
 80036f8:	000013b9 	.word	0x000013b9
 80036fc:	000013ba 	.word	0x000013ba
 8003700:	000013bb 	.word	0x000013bb
 8003704:	000013bc 	.word	0x000013bc
 8003708:	000013bd 	.word	0x000013bd
 800370c:	000013be 	.word	0x000013be
 8003710:	000013bf 	.word	0x000013bf
 8003714:	000013c1 	.word	0x000013c1
 8003718:	000013c2 	.word	0x000013c2
 800371c:	000013c3 	.word	0x000013c3

08003720 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	0002      	movs	r2, r0
 8003728:	1dfb      	adds	r3, r7, #7
 800372a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d04d      	beq.n	80037d0 <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8003734:	4b29      	ldr	r3, [pc, #164]	@ (80037dc <prvTraceStoreTaskReady+0xbc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d04b      	beq.n	80037d4 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 800373c:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <prvTraceStoreTaskReady+0xc0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <prvTraceStoreTaskReady+0xc4>)
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fdac 	bl	80042a4 <prvTraceError>
		return;
 800374c:	e043      	b.n	80037d6 <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
 8003752:	60fb      	str	r3, [r7, #12]
  return(result);
 8003754:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <prvTraceStoreTaskReady+0xc0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <prvTraceStoreTaskReady+0xc0>)
 800376c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800376e:	4b1e      	ldr	r3, [pc, #120]	@ (80037e8 <prvTraceStoreTaskReady+0xc8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003778:	251a      	movs	r5, #26
 800377a:	197c      	adds	r4, r7, r5
 800377c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <prvTraceStoreTaskReady+0xcc>)
 800377e:	0018      	movs	r0, r3
 8003780:	f000 fe84 	bl	800448c <prvTraceGetDTS>
 8003784:	0003      	movs	r3, r0
 8003786:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8003788:	2419      	movs	r4, #25
 800378a:	193b      	adds	r3, r7, r4
 800378c:	1dfa      	adds	r2, r7, #7
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8003792:	f000 fb5f 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 8003796:	0003      	movs	r3, r0
 8003798:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00c      	beq.n	80037ba <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	197a      	adds	r2, r7, r5
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	193a      	adds	r2, r7, r4
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80037b6:	f000 fe3f 	bl	8004438 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <prvTraceStoreTaskReady+0xc0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <prvTraceStoreTaskReady+0xc0>)
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	e002      	b.n	80037d6 <prvTraceStoreTaskReady+0xb6>
		return;
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	e000      	b.n	80037d6 <prvTraceStoreTaskReady+0xb6>
		return;
 80037d4:	46c0      	nop			@ (mov r8, r8)
}
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b008      	add	sp, #32
 80037da:	bdb0      	pop	{r4, r5, r7, pc}
 80037dc:	20000010 	.word	0x20000010
 80037e0:	200019b4 	.word	0x200019b4
 80037e4:	080059a4 	.word	0x080059a4
 80037e8:	20002df8 	.word	0x20002df8
 80037ec:	0000ffff 	.word	0x0000ffff

080037f0 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b08e      	sub	sp, #56	@ 0x38
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 80037fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d100      	bne.n	8003806 <vTraceStoreMemMangEvent+0x16>
 8003804:	e090      	b.n	8003928 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da03      	bge.n	8003814 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	425b      	negs	r3, r3
 8003810:	637b      	str	r3, [r7, #52]	@ 0x34
 8003812:	e001      	b.n	8003818 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	61bb      	str	r3, [r7, #24]
  return(result);
 800381e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8003820:	633b      	str	r3, [r7, #48]	@ 0x30
 8003822:	2301      	movs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <vTraceStoreMemMangEvent+0x144>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <vTraceStoreMemMangEvent+0x144>)
 8003836:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800383e:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	188a      	adds	r2, r1, r2
 800384c:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800384e:	4b38      	ldr	r3, [pc, #224]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003854:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	429a      	cmp	r2, r3
 800385c:	d905      	bls.n	800386a <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <vTraceStoreMemMangEvent+0x140>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d04e      	beq.n	8003912 <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8003874:	20ff      	movs	r0, #255	@ 0xff
 8003876:	f000 fe09 	bl	800448c <prvTraceGetDTS>
 800387a:	0003      	movs	r3, r0
 800387c:	001a      	movs	r2, r3
 800387e:	242f      	movs	r4, #47	@ 0x2f
 8003880:	193b      	adds	r3, r7, r4
 8003882:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8003884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003886:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <vTraceStoreMemMangEvent+0x148>)
 8003888:	0019      	movs	r1, r3
 800388a:	0010      	movs	r0, r2
 800388c:	f000 f92c 	bl	8003ae8 <prvTraceGetParam>
 8003890:	0002      	movs	r2, r0
 8003892:	252c      	movs	r5, #44	@ 0x2c
 8003894:	197b      	adds	r3, r7, r5
 8003896:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003898:	f000 fadc 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 800389c:	0003      	movs	r3, r0
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d035      	beq.n	8003912 <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	193a      	adds	r2, r7, r4
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	197a      	adds	r2, r7, r5
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80038bc:	f000 fdbc 	bl	8004438 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <vTraceStoreMemMangEvent+0x148>)
 80038c4:	0019      	movs	r1, r3
 80038c6:	0010      	movs	r0, r2
 80038c8:	f000 f90e 	bl	8003ae8 <prvTraceGetParam>
 80038cc:	0002      	movs	r2, r0
 80038ce:	2426      	movs	r4, #38	@ 0x26
 80038d0:	193b      	adds	r3, r7, r4
 80038d2:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 80038d4:	2525      	movs	r5, #37	@ 0x25
 80038d6:	197b      	adds	r3, r7, r5
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80038dc:	f000 faba 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 80038e0:	0003      	movs	r3, r0
 80038e2:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	193a      	adds	r2, r7, r4
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	197a      	adds	r2, r7, r5
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 800390e:	f000 fd93 	bl	8004438 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8003912:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <vTraceStoreMemMangEvent+0x144>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <vTraceStoreMemMangEvent+0x144>)
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	e000      	b.n	800392a <vTraceStoreMemMangEvent+0x13a>
		return;
 8003928:	46c0      	nop			@ (mov r8, r8)
}
 800392a:	46bd      	mov	sp, r7
 800392c:	b00e      	add	sp, #56	@ 0x38
 800392e:	bdb0      	pop	{r4, r5, r7, pc}
 8003930:	20002df8 	.word	0x20002df8
 8003934:	200019b4 	.word	0x200019b4
 8003938:	0000ffff 	.word	0x0000ffff

0800393c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	230b      	movs	r3, #11
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	1c0a      	adds	r2, r1, #0
 800394c:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <prvTraceStoreKernelCall+0xb8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <prvTraceStoreKernelCall+0xbc>)
 8003958:	0018      	movs	r0, r3
 800395a:	f000 fca3 	bl	80042a4 <prvTraceError>
		return;
 800395e:	e045      	b.n	80039ec <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <prvTraceStoreKernelCall+0xc0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d040      	beq.n	80039ea <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003968:	f3ef 8310 	mrs	r3, PRIMASK
 800396c:	617b      	str	r3, [r7, #20]
  return(result);
 800396e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
 8003972:	2301      	movs	r3, #1
 8003974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <prvTraceStoreKernelCall+0xb8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <prvTraceStoreKernelCall+0xb8>)
 8003986:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8003988:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <prvTraceStoreKernelCall+0xc4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	2b00      	cmp	r3, #0
 8003990:	d020      	beq.n	80039d4 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003992:	2522      	movs	r5, #34	@ 0x22
 8003994:	197c      	adds	r4, r7, r5
 8003996:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <prvTraceStoreKernelCall+0xc8>)
 8003998:	0018      	movs	r0, r3
 800399a:	f000 fd77 	bl	800448c <prvTraceGetDTS>
 800399e:	0003      	movs	r3, r0
 80039a0:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80039a2:	2421      	movs	r4, #33	@ 0x21
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80039aa:	f000 fa53 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 80039ae:	0003      	movs	r3, r0
 80039b0:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	197a      	adds	r2, r7, r5
 80039bc:	8812      	ldrh	r2, [r2, #0]
 80039be:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	193a      	adds	r2, r7, r4
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80039d0:	f000 fd32 	bl	8004438 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80039d4:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <prvTraceStoreKernelCall+0xb8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <prvTraceStoreKernelCall+0xb8>)
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	e000      	b.n	80039ec <prvTraceStoreKernelCall+0xb0>
		return;
 80039ea:	46c0      	nop			@ (mov r8, r8)
}
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b00a      	add	sp, #40	@ 0x28
 80039f0:	bdb0      	pop	{r4, r5, r7, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	200019b4 	.word	0x200019b4
 80039f8:	080059dc 	.word	0x080059dc
 80039fc:	200019bc 	.word	0x200019bc
 8003a00:	20002df8 	.word	0x20002df8
 8003a04:	0000ffff 	.word	0x0000ffff

08003a08 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0a:	b08b      	sub	sp, #44	@ 0x2c
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	230b      	movs	r3, #11
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	1c0a      	adds	r2, r1, #0
 8003a1a:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8003a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad8 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <prvTraceStoreKernelCallWithParam+0xd4>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f000 fc3c 	bl	80042a4 <prvTraceError>
		return;
 8003a2c:	e051      	b.n	8003ad2 <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	617b      	str	r3, [r7, #20]
  return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003a4c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003a4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ae0 <prvTraceStoreKernelCallWithParam+0xd8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d031      	beq.n	8003abc <prvTraceStoreKernelCallWithParam+0xb4>
 8003a58:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <prvTraceStoreKernelCallWithParam+0xdc>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02d      	beq.n	8003abc <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8003a60:	20ff      	movs	r0, #255	@ 0xff
 8003a62:	f000 fd13 	bl	800448c <prvTraceGetDTS>
 8003a66:	0003      	movs	r3, r0
 8003a68:	001a      	movs	r2, r3
 8003a6a:	2423      	movs	r4, #35	@ 0x23
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	0019      	movs	r1, r3
 8003a74:	20ff      	movs	r0, #255	@ 0xff
 8003a76:	f000 f837 	bl	8003ae8 <prvTraceGetParam>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	2522      	movs	r5, #34	@ 0x22
 8003a7e:	197b      	adds	r3, r7, r5
 8003a80:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003a82:	2621      	movs	r6, #33	@ 0x21
 8003a84:	19bb      	adds	r3, r7, r6
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8003a8a:	f000 f9e3 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d011      	beq.n	8003abc <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	19ba      	adds	r2, r7, r6
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	197a      	adds	r2, r7, r5
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003ab8:	f000 fcbe 	bl	8004438 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
}
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b00b      	add	sp, #44	@ 0x2c
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	200019b4 	.word	0x200019b4
 8003adc:	08005a14 	.word	0x08005a14
 8003ae0:	20002df8 	.word	0x20002df8
 8003ae4:	200019bc 	.word	0x200019bc

08003ae8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d801      	bhi.n	8003afe <prvTraceGetParam+0x16>
	{
		return param;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	e01e      	b.n	8003b3c <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8003afe:	f000 f9a9 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 8003b02:	0003      	movs	r3, r0
 8003b04:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d014      	beq.n	8003b36 <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003b32:	f000 fc81 	bl	8004438 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4013      	ands	r3, r2
	}
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b004      	add	sp, #16
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8003b4e:	2326      	movs	r3, #38	@ 0x26
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8003b56:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fb9f 	bl	80042a4 <prvTraceError>
		return;
 8003b66:	e04a      	b.n	8003bfe <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	2301      	movs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b86:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003b88:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02a      	beq.n	8003be8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 8003b92:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d026      	beq.n	8003be8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8003b9a:	20ff      	movs	r0, #255	@ 0xff
 8003b9c:	f000 fc76 	bl	800448c <prvTraceGetDTS>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	241f      	movs	r4, #31
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8003bae:	0019      	movs	r1, r3
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	f7ff ff99 	bl	8003ae8 <prvTraceGetParam>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	2526      	movs	r5, #38	@ 0x26
 8003bba:	197b      	adds	r3, r7, r5
 8003bbc:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003bbe:	f000 f949 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	193a      	adds	r2, r7, r4
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	197a      	adds	r2, r7, r5
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003be4:	f000 fc28 	bl	8004438 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
}
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b00a      	add	sp, #40	@ 0x28
 8003c02:	bdb0      	pop	{r4, r5, r7, pc}
 8003c04:	200019b4 	.word	0x200019b4
 8003c08:	08005a4c 	.word	0x08005a4c
 8003c0c:	20002df8 	.word	0x20002df8
 8003c10:	200019bc 	.word	0x200019bc
 8003c14:	0000ffff 	.word	0x0000ffff

08003c18 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b089      	sub	sp, #36	@ 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	0002      	movs	r2, r0
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <prvTraceStoreTaskswitch+0xd8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <prvTraceStoreTaskswitch+0xd8>)
 8003c42:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <prvTraceStoreTaskswitch+0xdc>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	1dfa      	adds	r2, r7, #7
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d03f      	beq.n	8003cd0 <prvTraceStoreTaskswitch+0xb8>
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <prvTraceStoreTaskswitch+0xe0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03a      	beq.n	8003cd0 <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003c5a:	231a      	movs	r3, #26
 8003c5c:	18fc      	adds	r4, r7, r3
 8003c5e:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <prvTraceStoreTaskswitch+0xe4>)
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 fc13 	bl	800448c <prvTraceGetDTS>
 8003c66:	0003      	movs	r3, r0
 8003c68:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8003c6a:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <prvTraceStoreTaskswitch+0xdc>)
 8003c6c:	1dfa      	adds	r2, r7, #7
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8003c72:	2319      	movs	r3, #25
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf4 <prvTraceStoreTaskswitch+0xdc>)
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003c7c:	f000 f8ea 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 8003c80:	0003      	movs	r3, r0
 8003c82:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d022      	beq.n	8003cd0 <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <prvTraceStoreTaskswitch+0xdc>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2003      	movs	r0, #3
 8003c92:	f000 f897 	bl	8003dc4 <prvTraceGetObjectState>
 8003c96:	0003      	movs	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d103      	bne.n	8003ca4 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2207      	movs	r2, #7
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2206      	movs	r2, #6
 8003ca8:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	221a      	movs	r2, #26
 8003cae:	18ba      	adds	r2, r7, r2
 8003cb0:	8812      	ldrh	r2, [r2, #0]
 8003cb2:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2219      	movs	r2, #25
 8003cb8:	18ba      	adds	r2, r7, r2
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <prvTraceStoreTaskswitch+0xdc>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	2003      	movs	r0, #3
 8003cc8:	f000 f84c 	bl	8003d64 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8003ccc:	f000 fbb4 	bl	8004438 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <prvTraceStoreTaskswitch+0xd8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <prvTraceStoreTaskswitch+0xd8>)
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b009      	add	sp, #36	@ 0x24
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	200019b4 	.word	0x200019b4
 8003cf4:	200019bc 	.word	0x200019bc
 8003cf8:	20002df8 	.word	0x20002df8
 8003cfc:	0000ffff 	.word	0x0000ffff

08003d00 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	0004      	movs	r4, r0
 8003d08:	0008      	movs	r0, r1
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	1dfb      	adds	r3, r7, #7
 8003d0e:	1c22      	adds	r2, r4, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	1dbb      	adds	r3, r7, #6
 8003d14:	1c02      	adds	r2, r0, #0
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	1d7b      	adds	r3, r7, #5
 8003d1a:	1c0a      	adds	r2, r1, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <prvTraceSetPriorityProperty+0x60>)
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 f8bb 	bl	8003ea8 <uiIndexOfObject>
 8003d32:	0003      	movs	r3, r0
 8003d34:	0018      	movs	r0, r3
 8003d36:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <prvTraceSetPriorityProperty+0x60>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	215c      	movs	r1, #92	@ 0x5c
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	185b      	adds	r3, r3, r1
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	18c3      	adds	r3, r0, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	2288      	movs	r2, #136	@ 0x88
 8003d4c:	18e3      	adds	r3, r4, r3
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	1d7a      	adds	r2, r7, #5
 8003d52:	7812      	ldrb	r2, [r2, #0]
 8003d54:	701a      	strb	r2, [r3, #0]
}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b003      	add	sp, #12
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	20002df8 	.word	0x20002df8

08003d64 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	0004      	movs	r4, r0
 8003d6c:	0008      	movs	r0, r1
 8003d6e:	0011      	movs	r1, r2
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	1c22      	adds	r2, r4, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	1c02      	adds	r2, r0, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	1d7b      	adds	r3, r7, #5
 8003d7e:	1c0a      	adds	r2, r1, #0
 8003d80:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003d82:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <prvTraceSetObjectState+0x5c>)
 8003d84:	681c      	ldr	r4, [r3, #0]
 8003d86:	1dfb      	adds	r3, r7, #7
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f889 	bl	8003ea8 <uiIndexOfObject>
 8003d96:	0003      	movs	r3, r0
 8003d98:	0018      	movs	r0, r3
 8003d9a:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <prvTraceSetObjectState+0x5c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	215c      	movs	r1, #92	@ 0x5c
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	185b      	adds	r3, r3, r1
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	18c3      	adds	r3, r0, r3
 8003dac:	2288      	movs	r2, #136	@ 0x88
 8003dae:	18e3      	adds	r3, r4, r3
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	1d7a      	adds	r2, r7, #5
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
}
 8003db8:	46c0      	nop			@ (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bd90      	pop	{r4, r7, pc}
 8003dc0:	20002df8 	.word	0x20002df8

08003dc4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	0002      	movs	r2, r0
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	1dbb      	adds	r3, r7, #6
 8003dd2:	1c0a      	adds	r2, r1, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <prvTraceGetObjectState+0x4c>)
 8003dd8:	681c      	ldr	r4, [r3, #0]
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	1dbb      	adds	r3, r7, #6
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f85f 	bl	8003ea8 <uiIndexOfObject>
 8003dea:	0003      	movs	r3, r0
 8003dec:	0018      	movs	r0, r3
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <prvTraceGetObjectState+0x4c>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	215c      	movs	r1, #92	@ 0x5c
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	185b      	adds	r3, r3, r1
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	18c3      	adds	r3, r0, r3
 8003e00:	2288      	movs	r2, #136	@ 0x88
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	781b      	ldrb	r3, [r3, #0]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b003      	add	sp, #12
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	20002df8 	.word	0x20002df8

08003e14 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <prvTraceSetTaskInstanceFinished+0x3c>)
 8003e22:	681c      	ldr	r4, [r3, #0]
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2103      	movs	r1, #3
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f83c 	bl	8003ea8 <uiIndexOfObject>
 8003e30:	0003      	movs	r3, r0
 8003e32:	0019      	movs	r1, r3
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <prvTraceSetTaskInstanceFinished+0x3c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	225f      	movs	r2, #95	@ 0x5f
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	18cb      	adds	r3, r1, r3
 8003e3e:	2288      	movs	r2, #136	@ 0x88
 8003e40:	18e3      	adds	r3, r4, r3
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
#endif
}
 8003e48:	46c0      	nop			@ (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	20002df8 	.word	0x20002df8

08003e54 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e018      	b.n	8003e98 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	23fa      	movs	r3, #250	@ 0xfa
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d305      	bcc.n	8003e80 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <prvTraceNextFreeEventBufferSlot+0x50>)
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 fa14 	bl	80042a4 <prvTraceError>
		return (void*)0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e00b      	b.n	8003e98 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	2182      	movs	r1, #130	@ 0x82
 8003e8e:	00c9      	lsls	r1, r1, #3
 8003e90:	468c      	mov	ip, r1
 8003e92:	4463      	add	r3, ip
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	3304      	adds	r3, #4
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	20002df8 	.word	0x20002df8
 8003ea4:	08005a84 	.word	0x08005a84

08003ea8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	0002      	movs	r2, r0
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	1dbb      	adds	r3, r7, #6
 8003eb6:	1c0a      	adds	r2, r1, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003eba:	1dbb      	adds	r3, r7, #6
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d82e      	bhi.n	8003f20 <uiIndexOfObject+0x78>
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02a      	beq.n	8003f20 <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003eca:	4b1a      	ldr	r3, [pc, #104]	@ (8003f34 <uiIndexOfObject+0x8c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	1dbb      	adds	r3, r7, #6
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2150      	movs	r1, #80	@ 0x50
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	185b      	adds	r3, r3, r1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003eda:	1dfa      	adds	r2, r7, #7
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d81e      	bhi.n	8003f20 <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003ee2:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <uiIndexOfObject+0x8c>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	1dbb      	adds	r3, r7, #6
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	3338      	adds	r3, #56	@ 0x38
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <uiIndexOfObject+0x8c>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	1dbb      	adds	r3, r7, #6
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2068      	movs	r0, #104	@ 0x68
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	181b      	adds	r3, r3, r0
 8003f02:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003f04:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003f06:	1dfb      	adds	r3, r7, #7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	4353      	muls	r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	200e      	movs	r0, #14
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	188a      	adds	r2, r1, r2
 8003f18:	801a      	strh	r2, [r3, #0]
		return index;
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	e004      	b.n	8003f2a <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <uiIndexOfObject+0x90>)
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 f9be 	bl	80042a4 <prvTraceError>
	return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	20002df8 	.word	0x20002df8
 8003f38:	08005aac 	.word	0x08005aac

08003f3c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	0002      	movs	r2, r0
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f48:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	2301      	movs	r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8004090 <prvTraceGetObjectHandle+0x154>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <prvTraceGetObjectHandle+0x154>)
 8003f66:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003f6e:	0052      	lsls	r2, r2, #1
 8003f70:	5ad3      	ldrh	r3, [r2, r3]
 8003f72:	001a      	movs	r2, r3
 8003f74:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <prvTraceGetObjectHandle+0x15c>)
 8003f76:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003f78:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <prvTraceGetObjectHandle+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a45      	ldr	r2, [pc, #276]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003f7e:	2148      	movs	r1, #72	@ 0x48
 8003f80:	18d3      	adds	r3, r2, r3
 8003f82:	185b      	adds	r3, r3, r1
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d117      	bne.n	8003fba <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003f8a:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <prvTraceGetObjectHandle+0x15c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	493f      	ldr	r1, [pc, #252]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003f96:	3308      	adds	r3, #8
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	18cb      	adds	r3, r1, r3
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8004098 <prvTraceGetObjectHandle+0x15c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003faa:	3201      	adds	r2, #1
 8003fac:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003fae:	4a39      	ldr	r2, [pc, #228]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003fb0:	2148      	movs	r1, #72	@ 0x48
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	185b      	adds	r3, r3, r1
 8003fb6:	1c02      	adds	r2, r0, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <prvTraceGetObjectHandle+0x15c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	241f      	movs	r4, #31
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	4934      	ldr	r1, [pc, #208]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003fc4:	2048      	movs	r0, #72	@ 0x48
 8003fc6:	188a      	adds	r2, r1, r2
 8003fc8:	1812      	adds	r2, r2, r0
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	4b30      	ldr	r3, [pc, #192]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003fd8:	1dfb      	adds	r3, r7, #7
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	492d      	ldr	r1, [pc, #180]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8003fde:	3310      	adds	r3, #16
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	18cb      	adds	r3, r1, r3
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d90c      	bls.n	8004006 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003fec:	1dfb      	adds	r3, r7, #7
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff f92f 	bl	8003254 <pszTraceGetErrorNotEnoughHandles>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 f953 	bl	80042a4 <prvTraceError>
		handle = 0;
 8003ffe:	193b      	adds	r3, r7, r4
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e031      	b.n	800406a <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 800400c:	0059      	lsls	r1, r3, #1
 800400e:	5a8a      	ldrh	r2, [r1, r2]
 8004010:	3201      	adds	r2, #1
 8004012:	b291      	uxth	r1, r2
 8004014:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800401a:	1dfb      	adds	r3, r7, #7
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8004020:	0052      	lsls	r2, r2, #1
 8004022:	5ad3      	ldrh	r3, [r2, r3]
 8004024:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 800402c:	3308      	adds	r3, #8
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	3302      	adds	r3, #2
 8004034:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8004036:	1acb      	subs	r3, r1, r3
 8004038:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 8004040:	3318      	adds	r3, #24
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	3306      	adds	r3, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	001a      	movs	r2, r3
		if (hndCount >
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	4293      	cmp	r3, r2
 8004050:	dd0b      	ble.n	800406a <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 800405a:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <prvTraceGetObjectHandle+0x158>)
 800405e:	3318      	adds	r3, #24
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	3306      	adds	r3, #6
 8004066:	1c0a      	adds	r2, r1, #0
 8004068:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 800406a:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <prvTraceGetObjectHandle+0x154>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <prvTraceGetObjectHandle+0x154>)
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			@ (mov r8, r8)

	return handle;
 8004080:	231f      	movs	r3, #31
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	781b      	ldrb	r3, [r3, #0]
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b009      	add	sp, #36	@ 0x24
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	200019b4 	.word	0x200019b4
 8004094:	200019cc 	.word	0x200019cc
 8004098:	20002e00 	.word	0x20002e00

0800409c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 800409c:	b5b0      	push	{r4, r5, r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	0002      	movs	r2, r0
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	1dbb      	adds	r3, r7, #6
 80040aa:	1c0a      	adds	r2, r1, #0
 80040ac:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80040ae:	250e      	movs	r5, #14
 80040b0:	197c      	adds	r4, r7, r5
 80040b2:	1dfb      	adds	r3, r7, #7
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	0011      	movs	r1, r2
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff fef3 	bl	8003ea8 <uiIndexOfObject>
 80040c2:	0003      	movs	r3, r0
 80040c4:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <prvMarkObjectAsUsed+0x44>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	197b      	adds	r3, r7, r5
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	2188      	movs	r1, #136	@ 0x88
 80040d0:	18d3      	adds	r3, r2, r3
 80040d2:	185b      	adds	r3, r3, r1
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bdb0      	pop	{r4, r5, r7, pc}
 80040e0:	20002df8 	.word	0x20002df8

080040e4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e010      	b.n	8004118 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	18d2      	adds	r2, r2, r3
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	18cb      	adds	r3, r1, r3
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3ea      	bcc.n	80040f6 <prvStrncpy+0x12>
			break;
	}
}
 8004120:	e000      	b.n	8004124 <prvStrncpy+0x40>
			break;
 8004122:	46c0      	nop			@ (mov r8, r8)
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b006      	add	sp, #24
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	603a      	str	r2, [r7, #0]
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	1c02      	adds	r2, r0, #0
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	1dbb      	adds	r3, r7, #6
 800413c:	1c0a      	adds	r2, r1, #0
 800413e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8004146:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <prvTraceSetObjectName+0xbc>)
 8004148:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d904      	bls.n	800415c <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8004152:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <prvTraceSetObjectName+0xc0>)
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8a5 	bl	80042a4 <prvTraceError>
		return;
 800415a:	e041      	b.n	80041e0 <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8004164:	4b22      	ldr	r3, [pc, #136]	@ (80041f0 <prvTraceSetObjectName+0xc4>)
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f89c 	bl	80042a4 <prvTraceError>
		return;
 800416c:	e038      	b.n	80041e0 <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <prvTraceSetObjectName+0xc8>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2150      	movs	r1, #80	@ 0x50
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	185b      	adds	r3, r3, r1
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	1dba      	adds	r2, r7, #6
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d909      	bls.n	800419a <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	0018      	movs	r0, r3
 800418c:	f7ff f862 	bl	8003254 <pszTraceGetErrorNotEnoughHandles>
 8004190:	0003      	movs	r3, r0
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f886 	bl	80042a4 <prvTraceError>
 8004198:	e022      	b.n	80041e0 <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800419a:	1dfb      	adds	r3, r7, #7
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7ff fe7f 	bl	8003ea8 <uiIndexOfObject>
 80041aa:	0003      	movs	r3, r0
 80041ac:	001a      	movs	r2, r3
 80041ae:	4b12      	ldr	r3, [pc, #72]	@ (80041f8 <prvTraceSetObjectName+0xcc>)
 80041b0:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 80041b2:	4b12      	ldr	r3, [pc, #72]	@ (80041fc <prvTraceSetObjectName+0xd0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d112      	bne.n	80041e0 <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <prvTraceSetObjectName+0xc8>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <prvTraceSetObjectName+0xcc>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	3388      	adds	r3, #136	@ 0x88
 80041c4:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <prvTraceSetObjectName+0xc8>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	1dfb      	adds	r3, r7, #7
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	215c      	movs	r1, #92	@ 0x5c
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	185b      	adds	r3, r3, r1
 80041d4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80041d6:	001a      	movs	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	0019      	movs	r1, r3
 80041dc:	f7ff ff82 	bl	80040e4 <prvStrncpy>
		}
	}
}
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	08005b1c 	.word	0x08005b1c
 80041ec:	08005b20 	.word	0x08005b20
 80041f0:	08005b50 	.word	0x08005b50
 80041f4:	20002df8 	.word	0x20002df8
 80041f8:	20002e04 	.word	0x20002e04
 80041fc:	20001a30 	.word	0x20001a30

08004200 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	b089      	sub	sp, #36	@ 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 800420a:	240b      	movs	r4, #11
 800420c:	193b      	adds	r3, r7, r4
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
	crc = 0;
 8004212:	250a      	movs	r5, #10
 8004214:	197b      	adds	r3, r7, r5
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 800421a:	193a      	adds	r2, r7, r4
 800421c:	1979      	adds	r1, r7, r5
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f000 fb67 	bl	80048f4 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004226:	f3ef 8310 	mrs	r3, PRIMASK
 800422a:	613b      	str	r3, [r7, #16]
  return(result);
 800422c:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f383 8810 	msr	PRIMASK, r3
}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <prvTraceOpenSymbol+0xa0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	4b17      	ldr	r3, [pc, #92]	@ (80042a0 <prvTraceOpenSymbol+0xa0>)
 8004244:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8004246:	197b      	adds	r3, r7, r5
 8004248:	7819      	ldrb	r1, [r3, #0]
 800424a:	193b      	adds	r3, r7, r4
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f9f1 	bl	8004638 <prvTraceLookupSymbolTableEntry>
 8004256:	0002      	movs	r2, r0
 8004258:	261e      	movs	r6, #30
 800425a:	19bb      	adds	r3, r7, r6
 800425c:	801a      	strh	r2, [r3, #0]
	if (!result)
 800425e:	19bb      	adds	r3, r7, r6
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8004266:	197b      	adds	r3, r7, r5
 8004268:	7819      	ldrb	r1, [r3, #0]
 800426a:	193b      	adds	r3, r7, r4
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fa6b 	bl	800474c <prvTraceCreateSymbolTableEntry>
 8004276:	0002      	movs	r2, r0
 8004278:	19bb      	adds	r3, r7, r6
 800427a:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <prvTraceOpenSymbol+0xa0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	4b07      	ldr	r3, [pc, #28]	@ (80042a0 <prvTraceOpenSymbol+0xa0>)
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			@ (mov r8, r8)

	return result;
 8004292:	231e      	movs	r3, #30
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	881b      	ldrh	r3, [r3, #0]
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b009      	add	sp, #36	@ 0x24
 800429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a0:	200019b4 	.word	0x200019b4

080042a4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <prvTraceError+0x54>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <prvTraceError+0x14>
	{
		xTraceDisable();
 80042b4:	f7ff f840 	bl	8003338 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <prvTraceError+0x58>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d117      	bne.n	80042f0 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80042c0:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <prvTraceError+0x58>)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <prvTraceError+0x54>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvTraceError+0x54>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	22f0      	movs	r2, #240	@ 0xf0
 80042d4:	0092      	lsls	r2, r2, #2
 80042d6:	1898      	adds	r0, r3, r2
 80042d8:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <prvTraceError+0x58>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2250      	movs	r2, #80	@ 0x50
 80042de:	0019      	movs	r1, r3
 80042e0:	f7ff ff00 	bl	80040e4 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <prvTraceError+0x54>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	23ee      	movs	r3, #238	@ 0xee
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	2101      	movs	r1, #1
 80042ee:	50d1      	str	r1, [r2, r3]
		}
	}
}
 80042f0:	46c0      	nop			@ (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20002df8 	.word	0x20002df8
 80042fc:	20001a30 	.word	0x20001a30

08004300 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	0002      	movs	r2, r0
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8004314:	e080      	b.n	8004418 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8004316:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004322:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4942      	ldr	r1, [pc, #264]	@ (8004434 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	185b      	adds	r3, r3, r1
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b98      	cmp	r3, #152	@ 0x98
 8004334:	d931      	bls.n	800439a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8004336:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	493d      	ldr	r1, [pc, #244]	@ (8004434 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004340:	18d3      	adds	r3, r2, r3
 8004342:	185b      	adds	r3, r3, r1
 8004344:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004346:	2ba7      	cmp	r3, #167	@ 0xa7
 8004348:	d827      	bhi.n	800439a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800434a:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4938      	ldr	r1, [pc, #224]	@ (8004434 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	185b      	adds	r3, r3, r1
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	210f      	movs	r1, #15
 800435c:	187b      	adds	r3, r7, r1
 800435e:	3268      	adds	r2, #104	@ 0x68
 8004360:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8004362:	187b      	adds	r3, r7, r1
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	18d2      	adds	r2, r2, r3
 800436a:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d24d      	bcs.n	8004410 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004374:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	2082      	movs	r0, #130	@ 0x82
 800437e:	00c0      	lsls	r0, r0, #3
 8004380:	4684      	mov	ip, r0
 8004382:	4463      	add	r3, ip
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	187b      	adds	r3, r7, r1
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	001a      	movs	r2, r3
 8004392:	2100      	movs	r1, #0
 8004394:	f001 f89e 	bl	80054d4 <memset>
		{
 8004398:	e03a      	b.n	8004410 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4924      	ldr	r1, [pc, #144]	@ (8004434 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	185b      	adds	r3, r3, r1
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d131      	bne.n	8004412 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d20f      	bcs.n	80043dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80043bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	2182      	movs	r1, #130	@ 0x82
 80043c6:	00c9      	lsls	r1, r1, #3
 80043c8:	468c      	mov	ip, r1
 80043ca:	4463      	add	r3, ip
 80043cc:	18d3      	adds	r3, r2, r3
 80043ce:	3304      	adds	r3, #4
 80043d0:	2208      	movs	r2, #8
 80043d2:	2100      	movs	r1, #0
 80043d4:	0018      	movs	r0, r3
 80043d6:	f001 f87d 	bl	80054d4 <memset>
 80043da:	e01a      	b.n	8004412 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80043dc:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80043e2:	4694      	mov	ip, r2
 80043e4:	4463      	add	r3, ip
 80043e6:	2204      	movs	r2, #4
 80043e8:	2100      	movs	r1, #0
 80043ea:	0018      	movs	r0, r3
 80043ec:	f001 f872 	bl	80054d4 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80043f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	2182      	movs	r1, #130	@ 0x82
 80043fa:	00c9      	lsls	r1, r1, #3
 80043fc:	468c      	mov	ip, r1
 80043fe:	4463      	add	r3, ip
 8004400:	18d3      	adds	r3, r2, r3
 8004402:	3304      	adds	r3, #4
 8004404:	2204      	movs	r2, #4
 8004406:	2100      	movs	r1, #0
 8004408:	0018      	movs	r0, r3
 800440a:	f001 f863 	bl	80054d4 <memset>
 800440e:	e000      	b.n	8004412 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 8004410:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3301      	adds	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8004418:	1dfb      	adds	r3, r7, #7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	429a      	cmp	r2, r3
 8004420:	d200      	bcs.n	8004424 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 8004422:	e778      	b.n	8004316 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b006      	add	sp, #24
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	20002df8 	.word	0x20002df8
 8004434:	00000414 	.word	0x00000414

08004438 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01c      	beq.n	8004480 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8004446:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	3201      	adds	r2, #1
 800444e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	3201      	adds	r2, #1
 8004458:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	23fa      	movs	r3, #250	@ 0xfa
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d307      	bcc.n	8004478 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <prvTraceUpdateCounters+0x50>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004478:	2001      	movs	r0, #1
 800447a:	f7ff ff41 	bl	8004300 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800447e:	e000      	b.n	8004482 <prvTraceUpdateCounters+0x4a>
		return;
 8004480:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	20002df8 	.word	0x20002df8

0800448c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	0002      	movs	r2, r0
 8004494:	1dbb      	adds	r3, r7, #6
 8004496:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 80044a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004618 <prvTraceGetDTS+0x18c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 80044ae:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <prvTraceGetDTS+0x190>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <prvTraceGetDTS+0x190>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b57      	ldr	r3, [pc, #348]	@ (8004618 <prvTraceGetDTS+0x18c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	0892      	lsrs	r2, r2, #2
 80044c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80044c2:	e00b      	b.n	80044dc <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80044c4:	4b56      	ldr	r3, [pc, #344]	@ (8004620 <prvTraceGetDTS+0x194>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b56      	ldr	r3, [pc, #344]	@ (8004624 <prvTraceGetDTS+0x198>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d005      	beq.n	80044dc <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80044d0:	4b55      	ldr	r3, [pc, #340]	@ (8004628 <prvTraceGetDTS+0x19c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b50      	ldr	r3, [pc, #320]	@ (8004618 <prvTraceGetDTS+0x18c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0892      	lsrs	r2, r2, #2
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80044dc:	230c      	movs	r3, #12
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fa39 	bl	8004958 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4b50      	ldr	r3, [pc, #320]	@ (800462c <prvTraceGetDTS+0x1a0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4b4e      	ldr	r3, [pc, #312]	@ (800462c <prvTraceGetDTS+0x1a0>)
 80044f4:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 80044f6:	4b48      	ldr	r3, [pc, #288]	@ (8004618 <prvTraceGetDTS+0x18c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d047      	beq.n	8004590 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8004500:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d921      	bls.n	8004550 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800450c:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <prvTraceGetDTS+0x18c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004512:	4b41      	ldr	r3, [pc, #260]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	0019      	movs	r1, r3
 800451a:	6938      	ldr	r0, [r7, #16]
 800451c:	f7fb fdf4 	bl	8000108 <__udivsi3>
 8004520:	0003      	movs	r3, r0
 8004522:	001a      	movs	r2, r3
 8004524:	4b3c      	ldr	r3, [pc, #240]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	18a2      	adds	r2, r4, r2
 800452a:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800452c:	4b3a      	ldr	r3, [pc, #232]	@ (8004618 <prvTraceGetDTS+0x18c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004532:	4b39      	ldr	r3, [pc, #228]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f7fb fe69 	bl	8000214 <__aeabi_uidivmod>
 8004542:	000b      	movs	r3, r1
 8004544:	001a      	movs	r2, r3
 8004546:	4b34      	ldr	r3, [pc, #208]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	18a2      	adds	r2, r4, r2
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
 800454e:	e007      	b.n	8004560 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8004550:	4b31      	ldr	r3, [pc, #196]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004556:	4b30      	ldr	r3, [pc, #192]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	188a      	adds	r2, r1, r2
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004560:	4b2d      	ldr	r3, [pc, #180]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004566:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	429a      	cmp	r2, r3
 800456e:	d313      	bcc.n	8004598 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8004570:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	3201      	adds	r2, #1
 8004578:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800457a:	4b27      	ldr	r3, [pc, #156]	@ (8004618 <prvTraceGetDTS+0x18c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004580:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004586:	4b24      	ldr	r3, [pc, #144]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	1a8a      	subs	r2, r1, r2
 800458c:	629a      	str	r2, [r3, #40]	@ 0x28
 800458e:	e003      	b.n	8004598 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004590:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <prvTraceGetDTS+0x18c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004598:	1dbb      	adds	r3, r7, #6
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d92f      	bls.n	8004602 <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80045a2:	f7ff fc57 	bl	8003e54 <prvTraceNextFreeEventBufferSlot>
 80045a6:	0003      	movs	r3, r0
 80045a8:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d028      	beq.n	8004602 <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 80045b0:	1dbb      	adds	r3, r7, #6
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <prvTraceGetDTS+0x1a4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10b      	bne.n	80045d2 <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	22a9      	movs	r2, #169	@ 0xa9
 80045be:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	705a      	strb	r2, [r3, #1]
 80045d0:	e015      	b.n	80045fe <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	2bff      	cmp	r3, #255	@ 0xff
 80045d8:	d10d      	bne.n	80045f6 <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	22a8      	movs	r2, #168	@ 0xa8
 80045de:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	705a      	strb	r2, [r3, #1]
 80045f4:	e003      	b.n	80045fe <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80045f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <prvTraceGetDTS+0x1a8>)
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff fe53 	bl	80042a4 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80045fe:	f7ff ff1b 	bl	8004438 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	b29b      	uxth	r3, r3
 8004606:	1dba      	adds	r2, r7, #6
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	4013      	ands	r3, r2
 800460c:	b29b      	uxth	r3, r3
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b007      	add	sp, #28
 8004614:	bd90      	pop	{r4, r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	20002df8 	.word	0x20002df8
 800461c:	200019b8 	.word	0x200019b8
 8004620:	e000e018 	.word	0xe000e018
 8004624:	200019c4 	.word	0x200019c4
 8004628:	20000014 	.word	0x20000014
 800462c:	20002e08 	.word	0x20002e08
 8004630:	0000ffff 	.word	0x0000ffff
 8004634:	08005b80 	.word	0x08005b80

08004638 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	0008      	movs	r0, r1
 8004642:	0011      	movs	r1, r2
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	240b      	movs	r4, #11
 8004648:	193b      	adds	r3, r7, r4
 800464a:	1c02      	adds	r2, r0, #0
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	230a      	movs	r3, #10
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	1c0a      	adds	r2, r1, #0
 8004654:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004656:	4b3c      	ldr	r3, [pc, #240]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	193b      	adds	r3, r7, r4
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	2316      	movs	r3, #22
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	3299      	adds	r2, #153	@ 0x99
 8004664:	32ff      	adds	r2, #255	@ 0xff
 8004666:	0052      	lsls	r2, r2, #1
 8004668:	188a      	adds	r2, r1, r2
 800466a:	3204      	adds	r2, #4
 800466c:	8812      	ldrh	r2, [r2, #0]
 800466e:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8004670:	e05c      	b.n	800472c <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8004672:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	2016      	movs	r0, #22
 8004678:	183b      	adds	r3, r7, r0
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	239b      	movs	r3, #155	@ 0x9b
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	188a      	adds	r2, r1, r2
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	22ff      	movs	r2, #255	@ 0xff
 800468e:	4013      	ands	r3, r2
 8004690:	4299      	cmp	r1, r3
 8004692:	d131      	bne.n	80046f8 <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8004694:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 8004696:	6819      	ldr	r1, [r3, #0]
 8004698:	183b      	adds	r3, r7, r0
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	1cda      	adds	r2, r3, #3
 800469e:	239b      	movs	r3, #155	@ 0x9b
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	188a      	adds	r2, r1, r2
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	001a      	movs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d122      	bne.n	80046f8 <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	240a      	movs	r4, #10
 80046be:	193b      	adds	r3, r7, r4
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	18d2      	adds	r2, r2, r3
 80046c4:	239b      	movs	r3, #155	@ 0x9b
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	188a      	adds	r2, r1, r2
 80046ca:	18d3      	adds	r3, r2, r3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d112      	bne.n	80046f8 <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	183b      	adds	r3, r7, r0
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	3304      	adds	r3, #4
 80046dc:	219a      	movs	r1, #154	@ 0x9a
 80046de:	0089      	lsls	r1, r1, #2
 80046e0:	468c      	mov	ip, r1
 80046e2:	4463      	add	r3, ip
 80046e4:	18d3      	adds	r3, r2, r3
 80046e6:	1d18      	adds	r0, r3, #4
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0019      	movs	r1, r3
 80046f0:	f000 fef8 	bl	80054e4 <strncmp>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d01f      	beq.n	8004738 <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	2416      	movs	r4, #22
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	881a      	ldrh	r2, [r3, #0]
 8004702:	239b      	movs	r3, #155	@ 0x9b
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	188a      	adds	r2, r1, r2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	0018      	movs	r0, r3
 800470e:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <prvTraceLookupSymbolTableEntry+0x110>)
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	193b      	adds	r3, r7, r4
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	239b      	movs	r3, #155	@ 0x9b
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	188a      	adds	r2, r1, r2
 800471e:	18d3      	adds	r3, r2, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b29a      	uxth	r2, r3
 8004726:	193b      	adds	r3, r7, r4
 8004728:	1882      	adds	r2, r0, r2
 800472a:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 800472c:	2316      	movs	r3, #22
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d19d      	bne.n	8004672 <prvTraceLookupSymbolTableEntry+0x3a>
 8004736:	e000      	b.n	800473a <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 8004738:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 800473a:	2316      	movs	r3, #22
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	881b      	ldrh	r3, [r3, #0]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b007      	add	sp, #28
 8004746:	bd90      	pop	{r4, r7, pc}
 8004748:	20002df8 	.word	0x20002df8

0800474c <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 800474c:	b5b0      	push	{r4, r5, r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	0008      	movs	r0, r1
 8004756:	0011      	movs	r1, r2
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	230b      	movs	r3, #11
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	1c02      	adds	r2, r0, #0
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	200a      	movs	r0, #10
 8004764:	183b      	adds	r3, r7, r0
 8004766:	1c0a      	adds	r2, r1, #0
 8004768:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800476e:	4b5f      	ldr	r3, [pc, #380]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	239a      	movs	r3, #154	@ 0x9a
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	58d2      	ldr	r2, [r2, r3]
 8004778:	183b      	adds	r3, r7, r0
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	3304      	adds	r3, #4
 8004780:	2bc7      	cmp	r3, #199	@ 0xc7
 8004782:	d906      	bls.n	8004792 <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8004784:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <prvTraceCreateSymbolTableEntry+0x1a4>)
 8004786:	0018      	movs	r0, r3
 8004788:	f7ff fd8c 	bl	80042a4 <prvTraceError>
		ret = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e0a7      	b.n	80048e2 <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004792:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	250b      	movs	r5, #11
 8004798:	197b      	adds	r3, r7, r5
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	3399      	adds	r3, #153	@ 0x99
 800479e:	33ff      	adds	r3, #255	@ 0xff
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	18d3      	adds	r3, r2, r3
 80047a4:	3304      	adds	r3, #4
 80047a6:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 80047a8:	4b50      	ldr	r3, [pc, #320]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047aa:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	239a      	movs	r3, #154	@ 0x9a
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80047b6:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80047b8:	239b      	movs	r3, #155	@ 0x9b
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	188a      	adds	r2, r1, r2
 80047be:	18d3      	adds	r3, r2, r3
 80047c0:	1c02      	adds	r2, r0, #0
 80047c2:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80047c4:	4b49      	ldr	r3, [pc, #292]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	197b      	adds	r3, r7, r5
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	3399      	adds	r3, #153	@ 0x99
 80047ce:	33ff      	adds	r3, #255	@ 0xff
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	18d3      	adds	r3, r2, r3
 80047d4:	3304      	adds	r3, #4
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 80047dc:	4b43      	ldr	r3, [pc, #268]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047de:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80047e0:	4b42      	ldr	r3, [pc, #264]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	239a      	movs	r3, #154	@ 0x9a
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	58d3      	ldr	r3, [r2, r3]
 80047ea:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80047ec:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80047ee:	239b      	movs	r3, #155	@ 0x9b
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	188a      	adds	r2, r1, r2
 80047f4:	18d3      	adds	r3, r2, r3
 80047f6:	1c02      	adds	r2, r0, #0
 80047f8:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 80047fa:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80047fc:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80047fe:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	239a      	movs	r3, #154	@ 0x9a
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	58d3      	ldr	r3, [r2, r3]
 8004808:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800480e:	239b      	movs	r3, #155	@ 0x9b
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	188a      	adds	r2, r1, r2
 8004814:	18d3      	adds	r3, r2, r3
 8004816:	1c02      	adds	r2, r0, #0
 8004818:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 800481e:	4b33      	ldr	r3, [pc, #204]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004820:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8004822:	4b32      	ldr	r3, [pc, #200]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	239a      	movs	r3, #154	@ 0x9a
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	58d3      	ldr	r3, [r2, r3]
 800482c:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 800482e:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8004830:	239b      	movs	r3, #155	@ 0x9b
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	188a      	adds	r2, r1, r2
 8004836:	18d3      	adds	r3, r2, r3
 8004838:	1c02      	adds	r2, r0, #0
 800483a:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 800483e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8004840:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	239a      	movs	r3, #154	@ 0x9a
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	58cb      	ldr	r3, [r1, r3]
 800484a:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800484c:	219a      	movs	r1, #154	@ 0x9a
 800484e:	0089      	lsls	r1, r1, #2
 8004850:	468c      	mov	ip, r1
 8004852:	4463      	add	r3, ip
 8004854:	18d3      	adds	r3, r2, r3
 8004856:	1d18      	adds	r0, r3, #4
 8004858:	240a      	movs	r4, #10
 800485a:	193b      	adds	r3, r7, r4
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	0019      	movs	r1, r3
 8004862:	f7ff fc3f 	bl	80040e4 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8004866:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004868:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	239a      	movs	r3, #154	@ 0x9a
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	58d2      	ldr	r2, [r2, r3]
 8004874:	0020      	movs	r0, r4
 8004876:	183b      	adds	r3, r7, r0
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	1d1a      	adds	r2, r3, #4
 800487e:	239b      	movs	r3, #155	@ 0x9b
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	188a      	adds	r2, r1, r2
 8004884:	18d3      	adds	r3, r2, r3
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800488a:	4b18      	ldr	r3, [pc, #96]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	239a      	movs	r3, #154	@ 0x9a
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8004894:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004896:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004898:	197b      	adds	r3, r7, r5
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b289      	uxth	r1, r1
 800489e:	3399      	adds	r3, #153	@ 0x99
 80048a0:	33ff      	adds	r3, #255	@ 0xff
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	18d3      	adds	r3, r2, r3
 80048a6:	3304      	adds	r3, #4
 80048a8:	1c0a      	adds	r2, r1, #0
 80048aa:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 80048ac:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	239a      	movs	r3, #154	@ 0x9a
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	58d2      	ldr	r2, [r2, r3]
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	18d1      	adds	r1, r2, r3
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	3105      	adds	r1, #5
 80048c2:	239a      	movs	r3, #154	@ 0x9a
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 80048c8:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <prvTraceCreateSymbolTableEntry+0x1a0>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	239a      	movs	r3, #154	@ 0x9a
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	58d3      	ldr	r3, [r2, r3]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	183a      	adds	r2, r7, r0
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	3205      	adds	r2, #5
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	617b      	str	r3, [r7, #20]
	}

	return ret;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b006      	add	sp, #24
 80048ea:	bdb0      	pop	{r4, r5, r7, pc}
 80048ec:	20002df8 	.word	0x20002df8
 80048f0:	08005ba4 	.word	0x08005ba4

080048f4 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d014      	beq.n	8004938 <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 800490e:	e008      	b.n	8004922 <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8004910:	2317      	movs	r3, #23
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	18d3      	adds	r3, r2, r3
 800491a:	61bb      	str	r3, [r7, #24]
			length++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	60fa      	str	r2, [r7, #12]
 8004928:	2117      	movs	r1, #23
 800492a:	187a      	adds	r2, r7, r1
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	7013      	strb	r3, [r2, #0]
 8004930:	187b      	adds	r3, r7, r1
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1eb      	bne.n	8004910 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	223f      	movs	r2, #63	@ 0x3f
 800493e:	4013      	ands	r3, r2
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	701a      	strb	r2, [r3, #0]
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b008      	add	sp, #32
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004968:	4b2d      	ldr	r3, [pc, #180]	@ (8004a20 <prvTracePortGetTimeStamp+0xc8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8004976:	4b2b      	ldr	r3, [pc, #172]	@ (8004a24 <prvTracePortGetTimeStamp+0xcc>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
		return;
 800497e:	e04a      	b.n	8004a16 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8004980:	4b29      	ldr	r3, [pc, #164]	@ (8004a28 <prvTracePortGetTimeStamp+0xd0>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <prvTracePortGetTimeStamp+0xd4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	3301      	adds	r3, #1
 800498c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 800498e:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <prvTracePortGetTimeStamp+0xd8>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b28      	ldr	r3, [pc, #160]	@ (8004a34 <prvTracePortGetTimeStamp+0xdc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	db03      	blt.n	80049a6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 800499e:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <prvTracePortGetTimeStamp+0xd8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e002      	b.n	80049ac <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 80049a6:	4b23      	ldr	r3, [pc, #140]	@ (8004a34 <prvTracePortGetTimeStamp+0xdc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 80049ac:	4b20      	ldr	r3, [pc, #128]	@ (8004a30 <prvTracePortGetTimeStamp+0xd8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d107      	bne.n	80049c6 <prvTracePortGetTimeStamp+0x6e>
 80049b6:	4b20      	ldr	r3, [pc, #128]	@ (8004a38 <prvTracePortGetTimeStamp+0xe0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d202      	bcs.n	80049c6 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 80049cc:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <prvTracePortGetTimeStamp+0xd0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	435a      	muls	r2, r3
 80049d8:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <prvTracePortGetTimeStamp+0xcc>)
 80049da:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <prvTracePortGetTimeStamp+0xd0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	2203      	movs	r2, #3
 80049e4:	4013      	ands	r3, r2
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	435a      	muls	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	089a      	lsrs	r2, r3, #2
 80049f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <prvTracePortGetTimeStamp+0xcc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	18d2      	adds	r2, r2, r3
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <prvTracePortGetTimeStamp+0xcc>)
 80049f8:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <prvTracePortGetTimeStamp+0xd8>)
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8004a06:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <prvTracePortGetTimeStamp+0xcc>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <prvTracePortGetTimeStamp+0xe0>)
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e000      	b.n	8004a18 <prvTracePortGetTimeStamp+0xc0>
		return;
 8004a16:	46c0      	nop			@ (mov r8, r8)
}
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b004      	add	sp, #16
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	200019a8 	.word	0x200019a8
 8004a24:	200019ac 	.word	0x200019ac
 8004a28:	e000e014 	.word	0xe000e014
 8004a2c:	e000e018 	.word	0xe000e018
 8004a30:	20002e0c 	.word	0x20002e0c
 8004a34:	200019a4 	.word	0x200019a4
 8004a38:	20002e10 	.word	0x20002e10

08004a3c <main>:
// Define the message_t type as an array of 64 char
typedef uint8_t msg_t[64];

// Main function
int main()
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8004a42:	f000 f855 	bl	8004af0 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8004a46:	f000 fb85 	bl	8005154 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8004a4a:	f000 fbdd 	bl	8005208 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8004a4e:	f000 fc29 	bl	80052a4 <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8004a52:	4b1a      	ldr	r3, [pc, #104]	@ (8004abc <main+0x80>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fb37 	bl	80050c8 <my_printf>

	// Initialize NVIC
	//BSP_NVIC_Init();

	// Start Trace Recording
	xTraceEnable(TRC_START);		// vTraceEnable(TRC_START);
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f7fe fc36 	bl	80032cc <xTraceEnable>

	// Create Event Group                   // <-- Create Event Group here
	myEventGroup = xEventGroupCreate();
 8004a60:	f7fb fbde 	bl	8000220 <xEventGroupCreate>
 8004a64:	0002      	movs	r2, r0
 8004a66:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <main+0x84>)
 8004a68:	601a      	str	r2, [r3, #0]

	// Register the Trace User Event Channels
	ue1 = xTraceRegisterString("state");
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <main+0x88>)
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe fd0d 	bl	800348c <xTraceRegisterString>
 8004a72:	0002      	movs	r2, r0
 8004a74:	4b14      	ldr	r3, [pc, #80]	@ (8004ac8 <main+0x8c>)
 8004a76:	601a      	str	r2, [r3, #0]

	// Give a nice name to the Semaphore in the trace recorder
	//vTraceSetSemaphoreName(xSem, "xSEM");

	// Create Tasks
	xTaskCreate(vTask1,	"Task_1", 128, NULL, 3, &vTask1_handle);
 8004a78:	4914      	ldr	r1, [pc, #80]	@ (8004acc <main+0x90>)
 8004a7a:	4815      	ldr	r0, [pc, #84]	@ (8004ad0 <main+0x94>)
 8004a7c:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <main+0x98>)
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	2303      	movs	r3, #3
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	f7fc fadd 	bl	8001046 <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2", 128, NULL, 2, &vTask2_handle);
 8004a8c:	4912      	ldr	r1, [pc, #72]	@ (8004ad8 <main+0x9c>)
 8004a8e:	4813      	ldr	r0, [pc, #76]	@ (8004adc <main+0xa0>)
 8004a90:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <main+0xa4>)
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	2302      	movs	r3, #2
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2280      	movs	r2, #128	@ 0x80
 8004a9c:	f7fc fad3 	bl	8001046 <xTaskCreate>
	xTaskCreate(vTask3,	"Task_3", 128, NULL, 1, &vTask3_handle);
 8004aa0:	4910      	ldr	r1, [pc, #64]	@ (8004ae4 <main+0xa8>)
 8004aa2:	4811      	ldr	r0, [pc, #68]	@ (8004ae8 <main+0xac>)
 8004aa4:	4b11      	ldr	r3, [pc, #68]	@ (8004aec <main+0xb0>)
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	2280      	movs	r2, #128	@ 0x80
 8004ab0:	f7fc fac9 	bl	8001046 <xTaskCreate>

	// Give a nice name to the Queue in the trace recorder
	// vTraceSetQueueName(xConsoleQueue, "Console Queue");

	 // Start the Scheduler
	vTaskStartScheduler();
 8004ab4:	f7fc fd08 	bl	80014c8 <vTaskStartScheduler>

	while(1)
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	e7fd      	b.n	8004ab8 <main+0x7c>
 8004abc:	08005bec 	.word	0x08005bec
 8004ac0:	20002e24 	.word	0x20002e24
 8004ac4:	08005c00 	.word	0x08005c00
 8004ac8:	20002e28 	.word	0x20002e28
 8004acc:	08005c08 	.word	0x08005c08
 8004ad0:	08004c25 	.word	0x08004c25
 8004ad4:	20002e14 	.word	0x20002e14
 8004ad8:	08005c10 	.word	0x08005c10
 8004adc:	08004c69 	.word	0x08004c69
 8004ae0:	20002e18 	.word	0x20002e18
 8004ae4:	08005c18 	.word	0x08005c18
 8004ae8:	08004cad 	.word	0x08004cad
 8004aec:	20002e1c 	.word	0x20002e1c

08004af0 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8004afa:	4b44      	ldr	r3, [pc, #272]	@ (8004c0c <SystemClock_Config+0x11c>)
 8004afc:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8004afe:	4b44      	ldr	r3, [pc, #272]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	02c9      	lsls	r1, r1, #11
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8004b0c:	4b40      	ldr	r3, [pc, #256]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	0249      	lsls	r1, r1, #9
 8004b16:	430a      	orrs	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	4013      	ands	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]
		timeout--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <SystemClock_Config+0x48>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4b34      	ldr	r3, [pc, #208]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b3e:	4935      	ldr	r1, [pc, #212]	@ (8004c14 <SystemClock_Config+0x124>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8004b44:	4b32      	ldr	r3, [pc, #200]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	0249      	lsls	r1, r1, #9
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b5e:	492e      	ldr	r1, [pc, #184]	@ (8004c18 <SystemClock_Config+0x128>)
 8004b60:	400a      	ands	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8004b64:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b6a:	2180      	movs	r1, #128	@ 0x80
 8004b6c:	0349      	lsls	r1, r1, #13
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8004b72:	4b27      	ldr	r3, [pc, #156]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b26      	ldr	r3, [pc, #152]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b78:	2180      	movs	r1, #128	@ 0x80
 8004b7a:	0449      	lsls	r1, r1, #17
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004b80:	4b23      	ldr	r3, [pc, #140]	@ (8004c10 <SystemClock_Config+0x120>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	049b      	lsls	r3, r3, #18
 8004b88:	4013      	ands	r3, r2
 8004b8a:	607b      	str	r3, [r7, #4]
		timeout--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <SystemClock_Config+0xae>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c10 <SystemClock_Config+0x120>)
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <SystemClock_Config+0x120>)
 8004ba4:	21f0      	movs	r1, #240	@ 0xf0
 8004ba6:	438a      	bics	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004baa:	4a19      	ldr	r2, [pc, #100]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bac:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4b16      	ldr	r3, [pc, #88]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bb8:	4918      	ldr	r1, [pc, #96]	@ (8004c1c <SystemClock_Config+0x12c>)
 8004bba:	400a      	ands	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004bbe:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bc2:	6852      	ldr	r2, [r2, #4]
 8004bc4:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004bc6:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <SystemClock_Config+0x130>)
 8004bc8:	2211      	movs	r2, #17
 8004bca:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <SystemClock_Config+0x120>)
 8004bde:	2102      	movs	r1, #2
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004be4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <SystemClock_Config+0x120>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	220c      	movs	r2, #12
 8004bea:	4013      	ands	r3, r2
 8004bec:	603b      	str	r3, [r7, #0]
		timeout--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d002      	beq.n	8004c00 <SystemClock_Config+0x110>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f1      	bne.n	8004be4 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8004c00:	f000 fbe2 	bl	80053c8 <SystemCoreClockUpdate>
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b004      	add	sp, #16
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	000f4240 	.word	0x000f4240
 8004c10:	40021000 	.word	0x40021000
 8004c14:	fffe7fff 	.word	0xfffe7fff
 8004c18:	ffc3ffff 	.word	0xffc3ffff
 8004c1c:	fffff8ff 	.word	0xfffff8ff
 8004c20:	40022000 	.word	0x40022000

08004c24 <vTask1>:
/*
 *	Task_1
 *	- Sends a notification to Task_3 every 500ms
 */
void vTask1 (void *pvParameters)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b08b      	sub	sp, #44	@ 0x2c
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
	uint8_t		msg[] = "Hello from task #1\r\n";
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	4a0b      	ldr	r2, [pc, #44]	@ (8004c60 <vTask1+0x3c>)
 8004c32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c34:	c313      	stmia	r3!, {r0, r1, r4}
 8004c36:	ca03      	ldmia	r2!, {r0, r1}
 8004c38:	c303      	stmia	r3!, {r0, r1}
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		// Notify Task_3 on slot #0
		xTaskNotifyIndexed(vTask3_handle, 0, (uint32_t)msg, eSetValueWithOverwrite );
 8004c3e:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <vTask1+0x40>)
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	2308      	movs	r3, #8
 8004c44:	18fa      	adds	r2, r7, r3
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f7fd faeb 	bl	8002228 <xTaskGenericNotify>
		// Wait
		vTaskDelay(500);
 8004c52:	23fa      	movs	r3, #250	@ 0xfa
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fc fbd6 	bl	8001408 <vTaskDelay>
		xTaskNotifyIndexed(vTask3_handle, 0, (uint32_t)msg, eSetValueWithOverwrite );
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	e7ee      	b.n	8004c3e <vTask1+0x1a>
 8004c60:	08005c20 	.word	0x08005c20
 8004c64:	20002e1c 	.word	0x20002e1c

08004c68 <vTask2>:
/*
 *	Task_2
 *	- Sends a notification to Task_3 every 1000ms
 */
void vTask2 (void *pvParameters)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b08b      	sub	sp, #44	@ 0x2c
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
	uint8_t		msg[] = "Hello from task #2\r\n";
 8004c70:	2308      	movs	r3, #8
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca4 <vTask2+0x3c>)
 8004c76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c78:	c313      	stmia	r3!, {r0, r1, r4}
 8004c7a:	ca03      	ldmia	r2!, {r0, r1}
 8004c7c:	c303      	stmia	r3!, {r0, r1}
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		// Notify Task_3 on slot #1
		xTaskNotifyIndexed(vTask3_handle, 1, (uint32_t)msg, eSetValueWithOverwrite );
 8004c82:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <vTask2+0x40>)
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	2308      	movs	r3, #8
 8004c88:	18fa      	adds	r2, r7, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2303      	movs	r3, #3
 8004c90:	2101      	movs	r1, #1
 8004c92:	f7fd fac9 	bl	8002228 <xTaskGenericNotify>
		// Wait
		vTaskDelay(1000);
 8004c96:	23fa      	movs	r3, #250	@ 0xfa
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fc fbb4 	bl	8001408 <vTaskDelay>
		xTaskNotifyIndexed(vTask3_handle, 1, (uint32_t)msg, eSetValueWithOverwrite );
 8004ca0:	46c0      	nop			@ (mov r8, r8)
 8004ca2:	e7ee      	b.n	8004c82 <vTask2+0x1a>
 8004ca4:	08005c38 	.word	0x08005c38
 8004ca8:	20002e1c 	.word	0x20002e1c

08004cac <vTask3>:
/*
 *	Task_3
 *	- Sends a message to console when a notification is received
 */
void vTask3 (void *pvParameters)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	6078      	str	r0, [r7, #4]
	BaseType_t	notif_pending;
	uint8_t		*pmsg;
	uint8_t		slot_index;
	while(1)
	{
		BSP_LED_Toggle();
 8004cb4:	f000 fa9a 	bl	80051ec <BSP_LED_Toggle>
		for(slot_index = 0; slot_index<2; slot_index++)
 8004cb8:	2317      	movs	r3, #23
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e01c      	b.n	8004cfc <vTask3+0x50>
		{
			// Poll notification on slot #0 with no timeout
			notif_pending = xTaskNotifyWaitIndexed(slot_index, 0, 0, (uint32_t *)&pmsg, 0);
 8004cc2:	2417      	movs	r4, #23
 8004cc4:	193b      	adds	r3, r7, r4
 8004cc6:	7818      	ldrb	r0, [r3, #0]
 8004cc8:	230c      	movs	r3, #12
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2200      	movs	r2, #0
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f7fd f9c2 	bl	800205c <xTaskGenericNotifyWait>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]
			// If a notification was received
			if (notif_pending == pdPASS)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d106      	bne.n	8004cf0 <vTask3+0x44>
			{
		        my_printf("Notification received on slot[%d] : %s", slot_index, pmsg);
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <vTask3+0x64>)
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 f9ec 	bl	80050c8 <my_printf>
		for(slot_index = 0; slot_index<2; slot_index++)
 8004cf0:	2117      	movs	r1, #23
 8004cf2:	187b      	adds	r3, r7, r1
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	3201      	adds	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	2317      	movs	r3, #23
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d9dd      	bls.n	8004cc2 <vTask3+0x16>
			}
		}
		// Polling period
		vTaskDelay(100);
 8004d06:	2064      	movs	r0, #100	@ 0x64
 8004d08:	f7fc fb7e 	bl	8001408 <vTaskDelay>
		BSP_LED_Toggle();
 8004d0c:	e7d2      	b.n	8004cb4 <vTask3+0x8>
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	08005c50 	.word	0x08005c50

08004d14 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	if (str) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <printchar+0x26>
		**str = c;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
		++(*str);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8004d38:	e00a      	b.n	8004d50 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <printchar+0x44>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2240      	movs	r2, #64	@ 0x40
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d1f9      	bne.n	8004d3c <printchar+0x28>
		USART2->TDR = c;
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <printchar+0x44>)
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40004400 	.word	0x40004400

08004d5c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8004d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5e:	46c6      	mov	lr, r8
 8004d60:	b500      	push	{lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8004d6e:	2400      	movs	r4, #0
 8004d70:	2320      	movs	r3, #32
 8004d72:	4698      	mov	r8, r3

	if (width > 0) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dd16      	ble.n	8004da8 <prints+0x4c>
		register int len = 0;
 8004d7a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8004d7c:	68be      	ldr	r6, [r7, #8]
 8004d7e:	e001      	b.n	8004d84 <prints+0x28>
 8004d80:	3501      	adds	r5, #1
 8004d82:	3601      	adds	r6, #1
 8004d84:	7833      	ldrb	r3, [r6, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1fa      	bne.n	8004d80 <prints+0x24>
		if (len >= width) width = 0;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	429d      	cmp	r5, r3
 8004d8e:	db02      	blt.n	8004d96 <prints+0x3a>
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e002      	b.n	8004d9c <prints+0x40>
		else width -= len;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	1b5b      	subs	r3, r3, r5
 8004d9a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d001      	beq.n	8004da8 <prints+0x4c>
 8004da4:	2330      	movs	r3, #48	@ 0x30
 8004da6:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	4013      	ands	r3, r2
 8004dae:	d119      	bne.n	8004de4 <prints+0x88>
		for ( ; width > 0; --width) {
 8004db0:	e008      	b.n	8004dc4 <prints+0x68>
			printchar (out, padchar);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4641      	mov	r1, r8
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff ffac 	bl	8004d14 <printchar>
			++pc;
 8004dbc:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dcf3      	bgt.n	8004db2 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8004dca:	e00b      	b.n	8004de4 <prints+0x88>
		printchar (out, *string);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0011      	movs	r1, r2
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7ff ff9c 	bl	8004d14 <printchar>
		++pc;
 8004ddc:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ef      	bne.n	8004dcc <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8004dec:	e008      	b.n	8004e00 <prints+0xa4>
		printchar (out, padchar);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4641      	mov	r1, r8
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7ff ff8e 	bl	8004d14 <printchar>
		++pc;
 8004df8:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dcf3      	bgt.n	8004dee <prints+0x92>
	}

	return pc;
 8004e06:	0023      	movs	r3, r4
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b004      	add	sp, #16
 8004e0e:	bc80      	pop	{r7}
 8004e10:	46b8      	mov	r8, r7
 8004e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e14 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8004e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e16:	46ce      	mov	lr, r9
 8004e18:	4647      	mov	r7, r8
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b089      	sub	sp, #36	@ 0x24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	2600      	movs	r6, #0
	register unsigned int u = i;
 8004e2e:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10e      	bne.n	8004e54 <printi+0x40>
		print_buf[0] = '0';
 8004e36:	2114      	movs	r1, #20
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	2230      	movs	r2, #48	@ 0x30
 8004e3c:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8004e3e:	187b      	adds	r3, r7, r1
 8004e40:	2200      	movs	r2, #0
 8004e42:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8004e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e48:	1879      	adds	r1, r7, r1
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff ff86 	bl	8004d5c <prints>
 8004e50:	0003      	movs	r3, r0
 8004e52:	e04e      	b.n	8004ef2 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <printi+0x5c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b0a      	cmp	r3, #10
 8004e5e:	d107      	bne.n	8004e70 <printi+0x5c>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da04      	bge.n	8004e70 <printi+0x5c>
		neg = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	4699      	mov	r9, r3
		u = -i;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8004e70:	2314      	movs	r3, #20
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	340b      	adds	r4, #11
	*s = '\0';
 8004e76:	2300      	movs	r3, #0
 8004e78:	7023      	strb	r3, [r4, #0]

	while (u) {
 8004e7a:	e019      	b.n	8004eb0 <printi+0x9c>
		t = u % b;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0019      	movs	r1, r3
 8004e80:	0028      	movs	r0, r5
 8004e82:	f7fb f9c7 	bl	8000214 <__aeabi_uidivmod>
 8004e86:	000b      	movs	r3, r1
 8004e88:	4698      	mov	r8, r3
		if( t >= 10 )
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	dd02      	ble.n	8004e96 <printi+0x82>
			t += letbase - '0' - 10;
 8004e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e92:	3b3a      	subs	r3, #58	@ 0x3a
 8004e94:	4498      	add	r8, r3
		*--s = t + '0';
 8004e96:	4643      	mov	r3, r8
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	3330      	adds	r3, #48	@ 0x30
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	7023      	strb	r3, [r4, #0]
		u /= b;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	0028      	movs	r0, r5
 8004ea8:	f7fb f92e 	bl	8000108 <__udivsi3>
 8004eac:	0003      	movs	r3, r0
 8004eae:	001d      	movs	r5, r3
	while (u) {
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	d1e3      	bne.n	8004e7c <printi+0x68>
	}

	if (neg) {
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8004eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00d      	beq.n	8004edc <printi+0xc8>
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d009      	beq.n	8004edc <printi+0xc8>
			printchar (out, '-');
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	212d      	movs	r1, #45	@ 0x2d
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff ff21 	bl	8004d14 <printchar>
			++pc;
 8004ed2:	3601      	adds	r6, #1
			--width;
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eda:	e002      	b.n	8004ee2 <printi+0xce>
		}
		else {
			*--s = '-';
 8004edc:	3c01      	subs	r4, #1
 8004ede:	232d      	movs	r3, #45	@ 0x2d
 8004ee0:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	0021      	movs	r1, r4
 8004eea:	f7ff ff37 	bl	8004d5c <prints>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	18f3      	adds	r3, r6, r3
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b009      	add	sp, #36	@ 0x24
 8004ef8:	bcc0      	pop	{r6, r7}
 8004efa:	46b9      	mov	r9, r7
 8004efc:	46b0      	mov	r8, r6
 8004efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f00 <print>:

static int print(char **out, const char *format, va_list args )
{
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	b08b      	sub	sp, #44	@ 0x2c
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8004f0c:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8004f0e:	e0c6      	b.n	800509e <print+0x19e>
		if (*format == '%') {
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b25      	cmp	r3, #37	@ 0x25
 8004f16:	d000      	beq.n	8004f1a <print+0x1a>
 8004f18:	e0b2      	b.n	8005080 <print+0x180>
			++format;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8004f20:	2600      	movs	r6, #0
 8004f22:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <print+0x2e>
 8004f2c:	e0bd      	b.n	80050aa <print+0x1aa>
			if (*format == '%') goto out;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b25      	cmp	r3, #37	@ 0x25
 8004f34:	d100      	bne.n	8004f38 <print+0x38>
 8004f36:	e0a5      	b.n	8005084 <print+0x184>
			if (*format == '-') {
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004f3e:	d10a      	bne.n	8004f56 <print+0x56>
				++format;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8004f46:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8004f48:	e005      	b.n	8004f56 <print+0x56>
				++format;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8004f50:	2302      	movs	r3, #2
 8004f52:	4333      	orrs	r3, r6
 8004f54:	001e      	movs	r6, r3
			while (*format == '0') {
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b30      	cmp	r3, #48	@ 0x30
 8004f5c:	d0f5      	beq.n	8004f4a <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004f5e:	e00b      	b.n	8004f78 <print+0x78>
				width *= 10;
 8004f60:	002b      	movs	r3, r5
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	195b      	adds	r3, r3, r5
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	001d      	movs	r5, r3
				width += *format - '0';
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	3b30      	subs	r3, #48	@ 0x30
 8004f70:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004f7e:	d903      	bls.n	8004f88 <print+0x88>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b39      	cmp	r3, #57	@ 0x39
 8004f86:	d9eb      	bls.n	8004f60 <print+0x60>
			}
			if( *format == 's' ) {
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b73      	cmp	r3, #115	@ 0x73
 8004f8e:	d10f      	bne.n	8004fb0 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8004f9a:	d000      	beq.n	8004f9e <print+0x9e>
 8004f9c:	e000      	b.n	8004fa0 <print+0xa0>
 8004f9e:	4949      	ldr	r1, [pc, #292]	@ (80050c4 <print+0x1c4>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	0033      	movs	r3, r6
 8004fa4:	002a      	movs	r2, r5
 8004fa6:	f7ff fed9 	bl	8004d5c <prints>
 8004faa:	0003      	movs	r3, r0
 8004fac:	18e4      	adds	r4, r4, r3
				continue;
 8004fae:	e073      	b.n	8005098 <print+0x198>
			}
			if( *format == 'd' ) {
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b64      	cmp	r3, #100	@ 0x64
 8004fb6:	d10f      	bne.n	8004fd8 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	2361      	movs	r3, #97	@ 0x61
 8004fc4:	9302      	str	r3, [sp, #8]
 8004fc6:	9601      	str	r6, [sp, #4]
 8004fc8:	9500      	str	r5, [sp, #0]
 8004fca:	2301      	movs	r3, #1
 8004fcc:	220a      	movs	r2, #10
 8004fce:	f7ff ff21 	bl	8004e14 <printi>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	18e4      	adds	r4, r4, r3
				continue;
 8004fd6:	e05f      	b.n	8005098 <print+0x198>
			}
			if( *format == 'x' ) {
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b78      	cmp	r3, #120	@ 0x78
 8004fde:	d10f      	bne.n	8005000 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	6819      	ldr	r1, [r3, #0]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	2361      	movs	r3, #97	@ 0x61
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	9601      	str	r6, [sp, #4]
 8004ff0:	9500      	str	r5, [sp, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	f7ff ff0d 	bl	8004e14 <printi>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	18e4      	adds	r4, r4, r3
				continue;
 8004ffe:	e04b      	b.n	8005098 <print+0x198>
			}
			if( *format == 'X' ) {
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b58      	cmp	r3, #88	@ 0x58
 8005006:	d10f      	bne.n	8005028 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	2341      	movs	r3, #65	@ 0x41
 8005014:	9302      	str	r3, [sp, #8]
 8005016:	9601      	str	r6, [sp, #4]
 8005018:	9500      	str	r5, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	2210      	movs	r2, #16
 800501e:	f7ff fef9 	bl	8004e14 <printi>
 8005022:	0003      	movs	r3, r0
 8005024:	18e4      	adds	r4, r4, r3
				continue;
 8005026:	e037      	b.n	8005098 <print+0x198>
			}
			if( *format == 'u' ) {
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b75      	cmp	r3, #117	@ 0x75
 800502e:	d10f      	bne.n	8005050 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	2361      	movs	r3, #97	@ 0x61
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	9601      	str	r6, [sp, #4]
 8005040:	9500      	str	r5, [sp, #0]
 8005042:	2300      	movs	r3, #0
 8005044:	220a      	movs	r2, #10
 8005046:	f7ff fee5 	bl	8004e14 <printi>
 800504a:	0003      	movs	r3, r0
 800504c:	18e4      	adds	r4, r4, r3
				continue;
 800504e:	e023      	b.n	8005098 <print+0x198>
			}
			if( *format == 'c' ) {
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b63      	cmp	r3, #99	@ 0x63
 8005056:	d11f      	bne.n	8005098 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	2114      	movs	r1, #20
 8005064:	187b      	adds	r3, r7, r1
 8005066:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8005068:	187b      	adds	r3, r7, r1
 800506a:	2200      	movs	r2, #0
 800506c:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 800506e:	1879      	adds	r1, r7, r1
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	0033      	movs	r3, r6
 8005074:	002a      	movs	r2, r5
 8005076:	f7ff fe71 	bl	8004d5c <prints>
 800507a:	0003      	movs	r3, r0
 800507c:	18e4      	adds	r4, r4, r3
				continue;
 800507e:	e00b      	b.n	8005098 <print+0x198>
			}
		}
		else {
		out:
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	e000      	b.n	8005086 <print+0x186>
			if (*format == '%') goto out;
 8005084:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	001a      	movs	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f7ff fe3f 	bl	8004d14 <printchar>
			++pc;
 8005096:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3301      	adds	r3, #1
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d000      	beq.n	80050a8 <print+0x1a8>
 80050a6:	e733      	b.n	8004f10 <print+0x10>
 80050a8:	e000      	b.n	80050ac <print+0x1ac>
			if (*format == '\0') break;
 80050aa:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <print+0x1ba>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80050ba:	0023      	movs	r3, r4
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b007      	add	sp, #28
 80050c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c4:	08005c78 	.word	0x08005c78

080050c8 <my_printf>:

int my_printf(const char *format, ...)
{
 80050c8:	b40f      	push	{r0, r1, r2, r3}
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 80050d0:	2314      	movs	r3, #20
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	0019      	movs	r1, r3
 80050dc:	2000      	movs	r0, #0
 80050de:	f7ff ff0f 	bl	8004f00 <print>
 80050e2:	0003      	movs	r3, r0
}
 80050e4:	0018      	movs	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bc80      	pop	{r7}
 80050ec:	bc08      	pop	{r3}
 80050ee:	b004      	add	sp, #16
 80050f0:	4718      	bx	r3

080050f2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	af00      	add	r7, sp, #0
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	e7fd      	b.n	8005100 <HardFault_Handler+0x4>

08005104 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 800510e:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <EXTI4_15_IRQHandler+0x44>)
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	019b      	lsls	r3, r3, #6
 8005116:	4013      	ands	r3, r2
 8005118:	d011      	beq.n	800513e <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 800511a:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <EXTI4_15_IRQHandler+0x44>)
 800511c:	2280      	movs	r2, #128	@ 0x80
 800511e:	0192      	lsls	r2, r2, #6
 8005120:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <EXTI4_15_IRQHandler+0x48>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1d3a      	adds	r2, r7, #4
 8005128:	0011      	movs	r1, r2
 800512a:	0018      	movs	r0, r3
 800512c:	f7fb fb4c 	bl	80007c8 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <EXTI4_15_IRQHandler+0x3a>
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <EXTI4_15_IRQHandler+0x4c>)
 8005138:	2280      	movs	r2, #128	@ 0x80
 800513a:	0552      	lsls	r2, r2, #21
 800513c:	601a      	str	r2, [r3, #0]
	}
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	40010400 	.word	0x40010400
 800514c:	20002e20 	.word	0x20002e20
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8005158:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <BSP_LED_Init+0x90>)
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	4b21      	ldr	r3, [pc, #132]	@ (80051e4 <BSP_LED_Init+0x90>)
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	0289      	lsls	r1, r1, #10
 8005162:	430a      	orrs	r2, r1
 8005164:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8005166:	2390      	movs	r3, #144	@ 0x90
 8005168:	05db      	lsls	r3, r3, #23
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2390      	movs	r3, #144	@ 0x90
 800516e:	05db      	lsls	r3, r3, #23
 8005170:	491d      	ldr	r1, [pc, #116]	@ (80051e8 <BSP_LED_Init+0x94>)
 8005172:	400a      	ands	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8005176:	2390      	movs	r3, #144	@ 0x90
 8005178:	05db      	lsls	r3, r3, #23
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2390      	movs	r3, #144	@ 0x90
 800517e:	05db      	lsls	r3, r3, #23
 8005180:	2180      	movs	r1, #128	@ 0x80
 8005182:	00c9      	lsls	r1, r1, #3
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8005188:	2390      	movs	r3, #144	@ 0x90
 800518a:	05db      	lsls	r3, r3, #23
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	2390      	movs	r3, #144	@ 0x90
 8005190:	05db      	lsls	r3, r3, #23
 8005192:	2120      	movs	r1, #32
 8005194:	438a      	bics	r2, r1
 8005196:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8005198:	2390      	movs	r3, #144	@ 0x90
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	2390      	movs	r3, #144	@ 0x90
 80051a0:	05db      	lsls	r3, r3, #23
 80051a2:	4911      	ldr	r1, [pc, #68]	@ (80051e8 <BSP_LED_Init+0x94>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80051a8:	2390      	movs	r3, #144	@ 0x90
 80051aa:	05db      	lsls	r3, r3, #23
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	2390      	movs	r3, #144	@ 0x90
 80051b0:	05db      	lsls	r3, r3, #23
 80051b2:	21c0      	movs	r1, #192	@ 0xc0
 80051b4:	0109      	lsls	r1, r1, #4
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80051ba:	2390      	movs	r3, #144	@ 0x90
 80051bc:	05db      	lsls	r3, r3, #23
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	2390      	movs	r3, #144	@ 0x90
 80051c2:	05db      	lsls	r3, r3, #23
 80051c4:	4908      	ldr	r1, [pc, #32]	@ (80051e8 <BSP_LED_Init+0x94>)
 80051c6:	400a      	ands	r2, r1
 80051c8:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 80051ca:	2390      	movs	r3, #144	@ 0x90
 80051cc:	05db      	lsls	r3, r3, #23
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	2390      	movs	r3, #144	@ 0x90
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	2180      	movs	r1, #128	@ 0x80
 80051d6:	0389      	lsls	r1, r1, #14
 80051d8:	430a      	orrs	r2, r1
 80051da:	619a      	str	r2, [r3, #24]
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	40021000 	.word	0x40021000
 80051e8:	fffff3ff 	.word	0xfffff3ff

080051ec <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 80051f0:	2390      	movs	r3, #144	@ 0x90
 80051f2:	05db      	lsls	r3, r3, #23
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	2390      	movs	r3, #144	@ 0x90
 80051f8:	05db      	lsls	r3, r3, #23
 80051fa:	2120      	movs	r1, #32
 80051fc:	404a      	eors	r2, r1
 80051fe:	615a      	str	r2, [r3, #20]
}
 8005200:	46c0      	nop			@ (mov r8, r8)
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <BSP_PB_Init+0x84>)
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <BSP_PB_Init+0x84>)
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	0309      	lsls	r1, r1, #12
 8005216:	430a      	orrs	r2, r1
 8005218:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 800521a:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <BSP_PB_Init+0x88>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <BSP_PB_Init+0x88>)
 8005220:	491c      	ldr	r1, [pc, #112]	@ (8005294 <BSP_PB_Init+0x8c>)
 8005222:	400a      	ands	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8005226:	4a1a      	ldr	r2, [pc, #104]	@ (8005290 <BSP_PB_Init+0x88>)
 8005228:	4b19      	ldr	r3, [pc, #100]	@ (8005290 <BSP_PB_Init+0x88>)
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 800522e:	4b18      	ldr	r3, [pc, #96]	@ (8005290 <BSP_PB_Init+0x88>)
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	4b17      	ldr	r3, [pc, #92]	@ (8005290 <BSP_PB_Init+0x88>)
 8005234:	4917      	ldr	r1, [pc, #92]	@ (8005294 <BSP_PB_Init+0x8c>)
 8005236:	400a      	ands	r2, r1
 8005238:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800523a:	4b14      	ldr	r3, [pc, #80]	@ (800528c <BSP_PB_Init+0x84>)
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	4b13      	ldr	r3, [pc, #76]	@ (800528c <BSP_PB_Init+0x84>)
 8005240:	2101      	movs	r1, #1
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 8005246:	4b14      	ldr	r3, [pc, #80]	@ (8005298 <BSP_PB_Init+0x90>)
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <BSP_PB_Init+0x90>)
 800524c:	21f0      	movs	r1, #240	@ 0xf0
 800524e:	438a      	bics	r2, r1
 8005250:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 8005252:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <BSP_PB_Init+0x90>)
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <BSP_PB_Init+0x90>)
 8005258:	2120      	movs	r1, #32
 800525a:	430a      	orrs	r2, r1
 800525c:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 800525e:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <BSP_PB_Init+0x94>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <BSP_PB_Init+0x94>)
 8005264:	2180      	movs	r1, #128	@ 0x80
 8005266:	0189      	lsls	r1, r1, #6
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <BSP_PB_Init+0x94>)
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <BSP_PB_Init+0x94>)
 8005272:	490b      	ldr	r1, [pc, #44]	@ (80052a0 <BSP_PB_Init+0x98>)
 8005274:	400a      	ands	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <BSP_PB_Init+0x94>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4b07      	ldr	r3, [pc, #28]	@ (800529c <BSP_PB_Init+0x94>)
 800527e:	2180      	movs	r1, #128	@ 0x80
 8005280:	0189      	lsls	r1, r1, #6
 8005282:	430a      	orrs	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	48000800 	.word	0x48000800
 8005294:	f3ffffff 	.word	0xf3ffffff
 8005298:	40010000 	.word	0x40010000
 800529c:	40010400 	.word	0x40010400
 80052a0:	ffffdfff 	.word	0xffffdfff

080052a4 <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80052a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <BSP_Console_Init+0xb4>)
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <BSP_Console_Init+0xb4>)
 80052ae:	2180      	movs	r1, #128	@ 0x80
 80052b0:	0289      	lsls	r1, r1, #10
 80052b2:	430a      	orrs	r2, r1
 80052b4:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80052b6:	2390      	movs	r3, #144	@ 0x90
 80052b8:	05db      	lsls	r3, r3, #23
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2390      	movs	r3, #144	@ 0x90
 80052be:	05db      	lsls	r3, r3, #23
 80052c0:	21f0      	movs	r1, #240	@ 0xf0
 80052c2:	438a      	bics	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 80052c6:	2390      	movs	r3, #144	@ 0x90
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2390      	movs	r3, #144	@ 0x90
 80052ce:	05db      	lsls	r3, r3, #23
 80052d0:	21a0      	movs	r1, #160	@ 0xa0
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80052d6:	2390      	movs	r3, #144	@ 0x90
 80052d8:	05db      	lsls	r3, r3, #23
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	2390      	movs	r3, #144	@ 0x90
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	491e      	ldr	r1, [pc, #120]	@ (800535c <BSP_Console_Init+0xb8>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 80052e6:	2390      	movs	r3, #144	@ 0x90
 80052e8:	05db      	lsls	r3, r3, #23
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	2390      	movs	r3, #144	@ 0x90
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	2188      	movs	r1, #136	@ 0x88
 80052f2:	0149      	lsls	r1, r1, #5
 80052f4:	430a      	orrs	r2, r1
 80052f6:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80052f8:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <BSP_Console_Init+0xb4>)
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	4b16      	ldr	r3, [pc, #88]	@ (8005358 <BSP_Console_Init+0xb4>)
 80052fe:	2180      	movs	r1, #128	@ 0x80
 8005300:	0289      	lsls	r1, r1, #10
 8005302:	430a      	orrs	r2, r1
 8005304:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8005306:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <BSP_Console_Init+0xbc>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 800530c:	4b14      	ldr	r3, [pc, #80]	@ (8005360 <BSP_Console_Init+0xbc>)
 800530e:	2200      	movs	r2, #0
 8005310:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8005312:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <BSP_Console_Init+0xbc>)
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <BSP_Console_Init+0xb4>)
 800531a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531c:	4b0e      	ldr	r3, [pc, #56]	@ (8005358 <BSP_Console_Init+0xb4>)
 800531e:	4911      	ldr	r1, [pc, #68]	@ (8005364 <BSP_Console_Init+0xc0>)
 8005320:	400a      	ands	r2, r1
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8005324:	4b0e      	ldr	r3, [pc, #56]	@ (8005360 <BSP_Console_Init+0xbc>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <BSP_Console_Init+0xbc>)
 800532a:	2180      	movs	r1, #128	@ 0x80
 800532c:	0209      	lsls	r1, r1, #8
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8005332:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <BSP_Console_Init+0xbc>)
 8005334:	4a0c      	ldr	r2, [pc, #48]	@ (8005368 <BSP_Console_Init+0xc4>)
 8005336:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8005338:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <BSP_Console_Init+0xbc>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b08      	ldr	r3, [pc, #32]	@ (8005360 <BSP_Console_Init+0xbc>)
 800533e:	210c      	movs	r1, #12
 8005340:	430a      	orrs	r2, r1
 8005342:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <BSP_Console_Init+0xbc>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <BSP_Console_Init+0xbc>)
 800534a:	2101      	movs	r1, #1
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]
}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	40021000 	.word	0x40021000
 800535c:	ffff00ff 	.word	0xffff00ff
 8005360:	40004400 	.word	0x40004400
 8005364:	fffcffff 	.word	0xfffcffff
 8005368:	00000341 	.word	0x00000341

0800536c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800536c:	480d      	ldr	r0, [pc, #52]	@ (80053a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800536e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005370:	f000 f825 	bl	80053be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005374:	480c      	ldr	r0, [pc, #48]	@ (80053a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005376:	490d      	ldr	r1, [pc, #52]	@ (80053ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <LoopForever+0xe>)
  movs r3, #0
 800537a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800537c:	e002      	b.n	8005384 <LoopCopyDataInit>

0800537e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800537e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005382:	3304      	adds	r3, #4

08005384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005388:	d3f9      	bcc.n	800537e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800538a:	4a0a      	ldr	r2, [pc, #40]	@ (80053b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800538c:	4c0a      	ldr	r4, [pc, #40]	@ (80053b8 <LoopForever+0x16>)
  movs r3, #0
 800538e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005390:	e001      	b.n	8005396 <LoopFillZerobss>

08005392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005394:	3204      	adds	r2, #4

08005396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005398:	d3fb      	bcc.n	8005392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800539a:	f000 f8b5 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800539e:	f7ff fb4d 	bl	8004a3c <main>

080053a2 <LoopForever>:

LoopForever:
    b LoopForever
 80053a2:	e7fe      	b.n	80053a2 <LoopForever>
  ldr   r0, =_estack
 80053a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80053a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80053b0:	08005cf8 	.word	0x08005cf8
  ldr r2, =_sbss
 80053b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80053b8:	20002e2c 	.word	0x20002e2c

080053bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053bc:	e7fe      	b.n	80053bc <ADC1_COMP_IRQHandler>

080053be <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	2300      	movs	r3, #0
 80053dc:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <SystemCoreClockUpdate+0xf8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	220c      	movs	r2, #12
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d011      	beq.n	8005412 <SystemCoreClockUpdate+0x4a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d84f      	bhi.n	8005494 <SystemCoreClockUpdate+0xcc>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <SystemCoreClockUpdate+0x3a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d004      	beq.n	800540a <SystemCoreClockUpdate+0x42>
 8005400:	e048      	b.n	8005494 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005402:	4b30      	ldr	r3, [pc, #192]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 8005404:	4a30      	ldr	r2, [pc, #192]	@ (80054c8 <SystemCoreClockUpdate+0x100>)
 8005406:	601a      	str	r2, [r3, #0]
      break;
 8005408:	e048      	b.n	800549c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800540a:	4b2e      	ldr	r3, [pc, #184]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 800540c:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <SystemCoreClockUpdate+0x100>)
 800540e:	601a      	str	r2, [r3, #0]
      break;
 8005410:	e044      	b.n	800549c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005412:	4b2b      	ldr	r3, [pc, #172]	@ (80054c0 <SystemCoreClockUpdate+0xf8>)
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	23f0      	movs	r3, #240	@ 0xf0
 8005418:	039b      	lsls	r3, r3, #14
 800541a:	4013      	ands	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800541e:	4b28      	ldr	r3, [pc, #160]	@ (80054c0 <SystemCoreClockUpdate+0xf8>)
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	23c0      	movs	r3, #192	@ 0xc0
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	4013      	ands	r3, r2
 8005428:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	0c9b      	lsrs	r3, r3, #18
 800542e:	3302      	adds	r3, #2
 8005430:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8005432:	4b23      	ldr	r3, [pc, #140]	@ (80054c0 <SystemCoreClockUpdate+0xf8>)
 8005434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005436:	220f      	movs	r2, #15
 8005438:	4013      	ands	r3, r2
 800543a:	3301      	adds	r3, #1
 800543c:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	2380      	movs	r3, #128	@ 0x80
 8005442:	025b      	lsls	r3, r3, #9
 8005444:	429a      	cmp	r2, r3
 8005446:	d10a      	bne.n	800545e <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	481f      	ldr	r0, [pc, #124]	@ (80054c8 <SystemCoreClockUpdate+0x100>)
 800544c:	f7fa fe5c 	bl	8000108 <__udivsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	001a      	movs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	435a      	muls	r2, r3
 8005458:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 800545a:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 800545c:	e01e      	b.n	800549c <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	23c0      	movs	r3, #192	@ 0xc0
 8005462:	025b      	lsls	r3, r3, #9
 8005464:	429a      	cmp	r2, r3
 8005466:	d10a      	bne.n	800547e <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4818      	ldr	r0, [pc, #96]	@ (80054cc <SystemCoreClockUpdate+0x104>)
 800546c:	f7fa fe4c 	bl	8000108 <__udivsi3>
 8005470:	0003      	movs	r3, r0
 8005472:	001a      	movs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	435a      	muls	r2, r3
 8005478:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 800547a:	601a      	str	r2, [r3, #0]
      break;
 800547c:	e00e      	b.n	800549c <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	4811      	ldr	r0, [pc, #68]	@ (80054c8 <SystemCoreClockUpdate+0x100>)
 8005482:	f7fa fe41 	bl	8000108 <__udivsi3>
 8005486:	0003      	movs	r3, r0
 8005488:	001a      	movs	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	435a      	muls	r2, r3
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 8005490:	601a      	str	r2, [r3, #0]
      break;
 8005492:	e003      	b.n	800549c <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 8005496:	4a0c      	ldr	r2, [pc, #48]	@ (80054c8 <SystemCoreClockUpdate+0x100>)
 8005498:	601a      	str	r2, [r3, #0]
      break;
 800549a:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800549c:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <SystemCoreClockUpdate+0xf8>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	220f      	movs	r2, #15
 80054a4:	4013      	ands	r3, r2
 80054a6:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <SystemCoreClockUpdate+0x108>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	40da      	lsrs	r2, r3
 80054b4:	4b03      	ldr	r3, [pc, #12]	@ (80054c4 <SystemCoreClockUpdate+0xfc>)
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	46c0      	nop			@ (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	20000014 	.word	0x20000014
 80054c8:	007a1200 	.word	0x007a1200
 80054cc:	02dc6c00 	.word	0x02dc6c00
 80054d0:	08005ce0 	.word	0x08005ce0

080054d4 <memset>:
 80054d4:	0003      	movs	r3, r0
 80054d6:	1882      	adds	r2, r0, r2
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	7019      	strb	r1, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <strncmp>:
 80054e4:	b530      	push	{r4, r5, lr}
 80054e6:	0005      	movs	r5, r0
 80054e8:	1e10      	subs	r0, r2, #0
 80054ea:	d00b      	beq.n	8005504 <strncmp+0x20>
 80054ec:	2400      	movs	r4, #0
 80054ee:	3a01      	subs	r2, #1
 80054f0:	5d2b      	ldrb	r3, [r5, r4]
 80054f2:	5d08      	ldrb	r0, [r1, r4]
 80054f4:	4283      	cmp	r3, r0
 80054f6:	d104      	bne.n	8005502 <strncmp+0x1e>
 80054f8:	42a2      	cmp	r2, r4
 80054fa:	d002      	beq.n	8005502 <strncmp+0x1e>
 80054fc:	3401      	adds	r4, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f6      	bne.n	80054f0 <strncmp+0xc>
 8005502:	1a18      	subs	r0, r3, r0
 8005504:	bd30      	pop	{r4, r5, pc}
	...

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	2600      	movs	r6, #0
 800550c:	4c0c      	ldr	r4, [pc, #48]	@ (8005540 <__libc_init_array+0x38>)
 800550e:	4d0d      	ldr	r5, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	2600      	movs	r6, #0
 800551a:	f000 f823 	bl	8005564 <_init>
 800551e:	4c0a      	ldr	r4, [pc, #40]	@ (8005548 <__libc_init_array+0x40>)
 8005520:	4d0a      	ldr	r5, [pc, #40]	@ (800554c <__libc_init_array+0x44>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	00b3      	lsls	r3, r6, #2
 800552e:	58eb      	ldr	r3, [r5, r3]
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	00b3      	lsls	r3, r6, #2
 8005538:	58eb      	ldr	r3, [r5, r3]
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	08005cf0 	.word	0x08005cf0
 8005544:	08005cf0 	.word	0x08005cf0
 8005548:	08005cf4 	.word	0x08005cf4
 800554c:	08005cf0 	.word	0x08005cf0

08005550 <memcpy>:
 8005550:	2300      	movs	r3, #0
 8005552:	b510      	push	{r4, lr}
 8005554:	429a      	cmp	r2, r3
 8005556:	d100      	bne.n	800555a <memcpy+0xa>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	5ccc      	ldrb	r4, [r1, r3]
 800555c:	54c4      	strb	r4, [r0, r3]
 800555e:	3301      	adds	r3, #1
 8005560:	e7f8      	b.n	8005554 <memcpy+0x4>
	...

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
