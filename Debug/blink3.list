
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005dc0  08005dc0  00006dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08005dc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003014  2000000c  08005dd0  0000700c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003020  08005dd0  00007020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dc3e  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003411  00000000  00000000  00014c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  00018088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000094c  00000000  00000000  00018d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000071e0  00000000  00000000  00019674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a3d1  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000782db  00000000  00000000  0003ac25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000b2f00  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028ac  00000000  00000000  000b2f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  000b57f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800593c 	.word	0x0800593c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800593c 	.word	0x0800593c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800033a:	2301      	movs	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d106      	bne.n	8000356 <xQueueGenericReset+0x26>
 8000348:	2397      	movs	r3, #151	@ 0x97
 800034a:	005a      	lsls	r2, r3, #1
 800034c:	4b42      	ldr	r3, [pc, #264]	@ (8000458 <xQueueGenericReset+0x128>)
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f004 fd07 	bl	8004d64 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <xQueueGenericReset+0x2e>
 800035c:	e06a      	b.n	8000434 <xQueueGenericReset+0x104>
        ( pxQueue->uxLength >= 1U ) &&
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000362:	2b00      	cmp	r3, #0
 8000364:	d066      	beq.n	8000434 <xQueueGenericReset+0x104>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800036e:	2400      	movs	r4, #0
 8000370:	0c15      	lsrs	r5, r2, #16
 8000372:	0c19      	lsrs	r1, r3, #16
 8000374:	b2a8      	uxth	r0, r5
 8000376:	2800      	cmp	r0, #0
 8000378:	d104      	bne.n	8000384 <xQueueGenericReset+0x54>
 800037a:	b288      	uxth	r0, r1
 800037c:	2800      	cmp	r0, #0
 800037e:	d013      	beq.n	80003a8 <xQueueGenericReset+0x78>
 8000380:	1c10      	adds	r0, r2, #0
 8000382:	e004      	b.n	800038e <xQueueGenericReset+0x5e>
 8000384:	b289      	uxth	r1, r1
 8000386:	2900      	cmp	r1, #0
 8000388:	d10d      	bne.n	80003a6 <xQueueGenericReset+0x76>
 800038a:	1c29      	adds	r1, r5, #0
 800038c:	1c18      	adds	r0, r3, #0
 800038e:	b292      	uxth	r2, r2
 8000390:	b29b      	uxth	r3, r3
 8000392:	435a      	muls	r2, r3
 8000394:	b283      	uxth	r3, r0
 8000396:	b289      	uxth	r1, r1
 8000398:	434b      	muls	r3, r1
 800039a:	0c12      	lsrs	r2, r2, #16
 800039c:	189b      	adds	r3, r3, r2
 800039e:	141b      	asrs	r3, r3, #16
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d000      	beq.n	80003a8 <xQueueGenericReset+0x78>
 80003a6:	2401      	movs	r4, #1
 80003a8:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003aa:	d143      	bne.n	8000434 <xQueueGenericReset+0x104>
    {
        taskENTER_CRITICAL();
 80003ac:	f002 f9a8 	bl	8002700 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	434b      	muls	r3, r1
 80003be:	18d2      	adds	r2, r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	2200      	movs	r2, #0
 80003c8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003da:	1e59      	subs	r1, r3, #1
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	434b      	muls	r3, r1
 80003e2:	18d2      	adds	r2, r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2244      	movs	r2, #68	@ 0x44
 80003ec:	21ff      	movs	r1, #255	@ 0xff
 80003ee:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2245      	movs	r2, #69	@ 0x45
 80003f4:	21ff      	movs	r1, #255	@ 0xff
 80003f6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10d      	bne.n	800041a <xQueueGenericReset+0xea>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d013      	beq.n	800042e <xQueueGenericReset+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	3310      	adds	r3, #16
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fba4 	bl	8001b58 <xTaskRemoveFromEventList>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d00c      	beq.n	800042e <xQueueGenericReset+0xfe>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000414:	f002 f964 	bl	80026e0 <vPortYield>
 8000418:	e009      	b.n	800042e <xQueueGenericReset+0xfe>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3310      	adds	r3, #16
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	3324      	adds	r3, #36	@ 0x24
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef9 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800042e:	f002 f979 	bl	8002724 <vPortExitCritical>
 8000432:	e001      	b.n	8000438 <xQueueGenericReset+0x108>
    }
    else
    {
        xReturn = pdFAIL;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d107      	bne.n	800044e <xQueueGenericReset+0x11e>
 800043e:	2364      	movs	r3, #100	@ 0x64
 8000440:	33ff      	adds	r3, #255	@ 0xff
 8000442:	001a      	movs	r2, r3
 8000444:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <xQueueGenericReset+0x128>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f004 fc8b 	bl	8004d64 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}
 8000458:	08005954 	.word	0x08005954

0800045c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af02      	add	r7, sp, #8
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d100      	bne.n	8000476 <xQueueGenericCreate+0x1a>
 8000474:	e06d      	b.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000476:	2000      	movs	r0, #0
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0c19      	lsrs	r1, r3, #16
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c1e      	adds	r6, r3, #0
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	0c1b      	lsrs	r3, r3, #16
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	1c15      	adds	r5, r2, #0
 8000488:	b28a      	uxth	r2, r1
 800048a:	2a00      	cmp	r2, #0
 800048c:	d105      	bne.n	800049a <xQueueGenericCreate+0x3e>
 800048e:	b29a      	uxth	r2, r3
 8000490:	2a00      	cmp	r2, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericCreate+0x60>
 8000494:	1c19      	adds	r1, r3, #0
 8000496:	1c34      	adds	r4, r6, #0
 8000498:	e003      	b.n	80004a2 <xQueueGenericCreate+0x46>
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10c      	bne.n	80004ba <xQueueGenericCreate+0x5e>
 80004a0:	1c2c      	adds	r4, r5, #0
 80004a2:	b2b3      	uxth	r3, r6
 80004a4:	b2aa      	uxth	r2, r5
 80004a6:	435a      	muls	r2, r3
 80004a8:	b2a3      	uxth	r3, r4
 80004aa:	b289      	uxth	r1, r1
 80004ac:	434b      	muls	r3, r1
 80004ae:	0c12      	lsrs	r2, r2, #16
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	141b      	asrs	r3, r3, #16
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d000      	beq.n	80004bc <xQueueGenericCreate+0x60>
 80004ba:	2001      	movs	r0, #1
 80004bc:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004be:	d148      	bne.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004c6:	3351      	adds	r3, #81	@ 0x51
 80004c8:	d843      	bhi.n	8000552 <xQueueGenericCreate+0xf6>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4353      	muls	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004d2:	69bb      	ldr	r3, [r7, #24]
 80004d4:	3350      	adds	r3, #80	@ 0x50
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f9b2 	bl	8002840 <pvPortMalloc>
 80004dc:	0003      	movs	r3, r0
 80004de:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00f      	beq.n	8000506 <xQueueGenericCreate+0xaa>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3350      	adds	r3, #80	@ 0x50
 80004ee:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	781c      	ldrb	r4, [r3, #0]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	0023      	movs	r3, r4
 8000500:	f000 f83a 	bl	8000578 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000504:	e030      	b.n	8000568 <xQueueGenericCreate+0x10c>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d01b      	beq.n	8000546 <xQueueGenericCreate+0xea>
 800050e:	dc2b      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000510:	2b03      	cmp	r3, #3
 8000512:	d00c      	beq.n	800052e <xQueueGenericCreate+0xd2>
 8000514:	dc28      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <xQueueGenericCreate+0xc4>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d00d      	beq.n	800053a <xQueueGenericCreate+0xde>
            if( pxNewQueue != NULL )
 800051e:	e023      	b.n	8000568 <xQueueGenericCreate+0x10c>
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	2041      	movs	r0, #65	@ 0x41
 8000528:	f003 f962 	bl	80037f0 <xTraceEventCreate2>
 800052c:	e010      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2042      	movs	r0, #66	@ 0x42
 8000534:	f003 f95c 	bl	80037f0 <xTraceEventCreate2>
 8000538:	e00a      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2043      	movs	r0, #67	@ 0x43
 8000540:	f003 f956 	bl	80037f0 <xTraceEventCreate2>
 8000544:	e004      	b.n	8000550 <xQueueGenericCreate+0xf4>
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2047      	movs	r0, #71	@ 0x47
 800054c:	f003 f950 	bl	80037f0 <xTraceEventCreate2>
            if( pxNewQueue != NULL )
 8000550:	e00a      	b.n	8000568 <xQueueGenericCreate+0x10c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d108      	bne.n	800056a <xQueueGenericCreate+0x10e>
 8000558:	23f2      	movs	r3, #242	@ 0xf2
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <xQueueGenericCreate+0x118>)
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f004 fbff 	bl	8004d64 <vAssertCalled>
 8000566:	e000      	b.n	800056a <xQueueGenericCreate+0x10e>
            if( pxNewQueue != NULL )
 8000568:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800056a:	69fb      	ldr	r3, [r7, #28]
    }
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	08005954 	.word	0x08005954

08000578 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	001a      	movs	r2, r3
 8000586:	1cfb      	adds	r3, r7, #3
 8000588:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d103      	bne.n	8000598 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e002      	b.n	800059e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff febe 	bl	8000330 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	214c      	movs	r1, #76	@ 0x4c
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	224c      	movs	r2, #76	@ 0x4c
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d01d      	beq.n	8000604 <prvInitialiseNewQueue+0x8c>
 80005c8:	dc22      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d00c      	beq.n	80005e8 <prvInitialiseNewQueue+0x70>
 80005ce:	dc1f      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <prvInitialiseNewQueue+0x62>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00e      	beq.n	80005f6 <prvInitialiseNewQueue+0x7e>
}
 80005d8:	e01a      	b.n	8000610 <prvInitialiseNewQueue+0x98>
    traceQUEUE_CREATE( pxNewQueue );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005de:	69b9      	ldr	r1, [r7, #24]
 80005e0:	2011      	movs	r0, #17
 80005e2:	f003 fdfd 	bl	80041e0 <xTraceObjectRegisterWithoutHandle>
 80005e6:	e013      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005ea:	69b9      	ldr	r1, [r7, #24]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2012      	movs	r0, #18
 80005f0:	f003 fdf6 	bl	80041e0 <xTraceObjectRegisterWithoutHandle>
 80005f4:	e00c      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2013      	movs	r0, #19
 80005fe:	f003 fdef 	bl	80041e0 <xTraceObjectRegisterWithoutHandle>
 8000602:	e005      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 8000606:	69b9      	ldr	r1, [r7, #24]
 8000608:	2300      	movs	r3, #0
 800060a:	2017      	movs	r0, #23
 800060c:	f003 fde8 	bl	80041e0 <xTraceObjectRegisterWithoutHandle>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08005968 	.word	0x08005968

0800061c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d106      	bne.n	8000646 <xQueueGenericSend+0x2a>
 8000638:	23d3      	movs	r3, #211	@ 0xd3
 800063a:	009a      	lsls	r2, r3, #2
 800063c:	4bb3      	ldr	r3, [pc, #716]	@ (800090c <xQueueGenericSend+0x2f0>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f004 fb8f 	bl	8004d64 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <xQueueGenericSend+0x38>
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <xQueueGenericSend+0x3c>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <xQueueGenericSend+0x3e>
 8000658:	2300      	movs	r3, #0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <xQueueGenericSend+0x4e>
 800065e:	4aac      	ldr	r2, [pc, #688]	@ (8000910 <xQueueGenericSend+0x2f4>)
 8000660:	4baa      	ldr	r3, [pc, #680]	@ (800090c <xQueueGenericSend+0x2f0>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f004 fb7d 	bl	8004d64 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d103      	bne.n	8000678 <xQueueGenericSend+0x5c>
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000674:	2b01      	cmp	r3, #1
 8000676:	d101      	bne.n	800067c <xQueueGenericSend+0x60>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <xQueueGenericSend+0x62>
 800067c:	2300      	movs	r3, #0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d105      	bne.n	800068e <xQueueGenericSend+0x72>
 8000682:	4aa4      	ldr	r2, [pc, #656]	@ (8000914 <xQueueGenericSend+0x2f8>)
 8000684:	4ba1      	ldr	r3, [pc, #644]	@ (800090c <xQueueGenericSend+0x2f0>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f004 fb6b 	bl	8004d64 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800068e:	f001 fc1b 	bl	8001ec8 <xTaskGetSchedulerState>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d102      	bne.n	800069c <xQueueGenericSend+0x80>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <xQueueGenericSend+0x84>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <xQueueGenericSend+0x86>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <xQueueGenericSend+0x96>
 80006a6:	4a9c      	ldr	r2, [pc, #624]	@ (8000918 <xQueueGenericSend+0x2fc>)
 80006a8:	4b98      	ldr	r3, [pc, #608]	@ (800090c <xQueueGenericSend+0x2f0>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f004 fb59 	bl	8004d64 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006b2:	f002 f825 	bl	8002700 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006be:	429a      	cmp	r2, r3
 80006c0:	d302      	bcc.n	80006c8 <xQueueGenericSend+0xac>
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d14f      	bne.n	8000768 <xQueueGenericSend+0x14c>
            {
                traceQUEUE_SEND( pxQueue );
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	224c      	movs	r2, #76	@ 0x4c
 80006cc:	5c9b      	ldrb	r3, [r3, r2]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d026      	beq.n	8000720 <xQueueGenericSend+0x104>
 80006d2:	dc2a      	bgt.n	800072a <xQueueGenericSend+0x10e>
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	dc28      	bgt.n	800072a <xQueueGenericSend+0x10e>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	da12      	bge.n	8000702 <xQueueGenericSend+0xe6>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <xQueueGenericSend+0xca>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d017      	beq.n	8000714 <xQueueGenericSend+0xf8>
 80006e4:	e021      	b.n	800072a <xQueueGenericSend+0x10e>
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <xQueueGenericSend+0xd4>
 80006ec:	2050      	movs	r0, #80	@ 0x50
 80006ee:	e000      	b.n	80006f2 <xQueueGenericSend+0xd6>
 80006f0:	20c0      	movs	r0, #192	@ 0xc0
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f8:	3301      	adds	r3, #1
 80006fa:	001a      	movs	r2, r3
 80006fc:	f003 f878 	bl	80037f0 <xTraceEventCreate2>
 8000700:	e013      	b.n	800072a <xQueueGenericSend+0x10e>
 8000702:	6a39      	ldr	r1, [r7, #32]
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000708:	3301      	adds	r3, #1
 800070a:	001a      	movs	r2, r3
 800070c:	2051      	movs	r0, #81	@ 0x51
 800070e:	f003 f86f 	bl	80037f0 <xTraceEventCreate2>
 8000712:	e00a      	b.n	800072a <xQueueGenericSend+0x10e>
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	0019      	movs	r1, r3
 8000718:	2052      	movs	r0, #82	@ 0x52
 800071a:	f002 fff1 	bl	8003700 <xTraceEventCreate1>
 800071e:	e004      	b.n	800072a <xQueueGenericSend+0x10e>
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	0019      	movs	r1, r3
 8000724:	20c5      	movs	r0, #197	@ 0xc5
 8000726:	f002 ffeb 	bl	8003700 <xTraceEventCreate1>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fb5b 	bl	8000dec <prvCopyDataToQueue>
 8000736:	0003      	movs	r3, r0
 8000738:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	d009      	beq.n	8000756 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	3324      	adds	r3, #36	@ 0x24
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fa06 	bl	8001b58 <xTaskRemoveFromEventList>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d007      	beq.n	8000760 <xQueueGenericSend+0x144>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000750:	f001 ffc6 	bl	80026e0 <vPortYield>
 8000754:	e004      	b.n	8000760 <xQueueGenericSend+0x144>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <xQueueGenericSend+0x144>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800075c:	f001 ffc0 	bl	80026e0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000760:	f001 ffe0 	bl	8002724 <vPortExitCritical>
                return pdPASS;
 8000764:	2301      	movs	r3, #1
 8000766:	e0df      	b.n	8000928 <xQueueGenericSend+0x30c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d12c      	bne.n	80007c8 <xQueueGenericSend+0x1ac>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800076e:	f001 ffd9 	bl	8002724 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	224c      	movs	r2, #76	@ 0x4c
 8000776:	5c9b      	ldrb	r3, [r3, r2]
 8000778:	2b04      	cmp	r3, #4
 800077a:	d01e      	beq.n	80007ba <xQueueGenericSend+0x19e>
 800077c:	dc22      	bgt.n	80007c4 <xQueueGenericSend+0x1a8>
 800077e:	2b03      	cmp	r3, #3
 8000780:	dc20      	bgt.n	80007c4 <xQueueGenericSend+0x1a8>
 8000782:	2b02      	cmp	r3, #2
 8000784:	da11      	bge.n	80007aa <xQueueGenericSend+0x18e>
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <xQueueGenericSend+0x174>
 800078a:	2b01      	cmp	r3, #1
 800078c:	d015      	beq.n	80007ba <xQueueGenericSend+0x19e>
 800078e:	e019      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <xQueueGenericSend+0x17e>
 8000796:	2053      	movs	r0, #83	@ 0x53
 8000798:	e000      	b.n	800079c <xQueueGenericSend+0x180>
 800079a:	20c1      	movs	r0, #193	@ 0xc1
 800079c:	6a39      	ldr	r1, [r7, #32]
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007a2:	001a      	movs	r2, r3
 80007a4:	f003 f824 	bl	80037f0 <xTraceEventCreate2>
 80007a8:	e00c      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 80007aa:	6a39      	ldr	r1, [r7, #32]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b0:	001a      	movs	r2, r3
 80007b2:	2054      	movs	r0, #84	@ 0x54
 80007b4:	f003 f81c 	bl	80037f0 <xTraceEventCreate2>
 80007b8:	e004      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	0019      	movs	r1, r3
 80007be:	2055      	movs	r0, #85	@ 0x55
 80007c0:	f002 ff9e 	bl	8003700 <xTraceEventCreate1>
                    return errQUEUE_FULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e0af      	b.n	8000928 <xQueueGenericSend+0x30c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d106      	bne.n	80007dc <xQueueGenericSend+0x1c0>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007ce:	2314      	movs	r3, #20
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fa98 	bl	8001d08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007d8:	2301      	movs	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007dc:	f001 ffa2 	bl	8002724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007e0:	f000 feac 	bl	800153c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007e4:	f001 ff8c 	bl	8002700 <vPortEnterCritical>
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	2244      	movs	r2, #68	@ 0x44
 80007ec:	5c9b      	ldrb	r3, [r3, r2]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	d103      	bne.n	80007fc <xQueueGenericSend+0x1e0>
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	2244      	movs	r2, #68	@ 0x44
 80007f8:	2100      	movs	r1, #0
 80007fa:	5499      	strb	r1, [r3, r2]
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	2245      	movs	r2, #69	@ 0x45
 8000800:	5c9b      	ldrb	r3, [r3, r2]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	d103      	bne.n	8000810 <xQueueGenericSend+0x1f4>
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	2245      	movs	r2, #69	@ 0x45
 800080c:	2100      	movs	r1, #0
 800080e:	5499      	strb	r1, [r3, r2]
 8000810:	f001 ff88 	bl	8002724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	2314      	movs	r3, #20
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fa87 	bl	8001d30 <xTaskCheckForTimeOut>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d148      	bne.n	80008b8 <xQueueGenericSend+0x29c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fbe4 	bl	8000ff6 <prvIsQueueFull>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d03b      	beq.n	80008aa <xQueueGenericSend+0x28e>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	224c      	movs	r2, #76	@ 0x4c
 8000836:	5c9b      	ldrb	r3, [r3, r2]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d01e      	beq.n	800087a <xQueueGenericSend+0x25e>
 800083c:	dc22      	bgt.n	8000884 <xQueueGenericSend+0x268>
 800083e:	2b03      	cmp	r3, #3
 8000840:	dc20      	bgt.n	8000884 <xQueueGenericSend+0x268>
 8000842:	2b02      	cmp	r3, #2
 8000844:	da11      	bge.n	800086a <xQueueGenericSend+0x24e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <xQueueGenericSend+0x234>
 800084a:	2b01      	cmp	r3, #1
 800084c:	d015      	beq.n	800087a <xQueueGenericSend+0x25e>
 800084e:	e019      	b.n	8000884 <xQueueGenericSend+0x268>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <xQueueGenericSend+0x23e>
 8000856:	2056      	movs	r0, #86	@ 0x56
 8000858:	e000      	b.n	800085c <xQueueGenericSend+0x240>
 800085a:	20c2      	movs	r0, #194	@ 0xc2
 800085c:	6a39      	ldr	r1, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000862:	001a      	movs	r2, r3
 8000864:	f002 ffc4 	bl	80037f0 <xTraceEventCreate2>
 8000868:	e00c      	b.n	8000884 <xQueueGenericSend+0x268>
 800086a:	6a39      	ldr	r1, [r7, #32]
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000870:	001a      	movs	r2, r3
 8000872:	2057      	movs	r0, #87	@ 0x57
 8000874:	f002 ffbc 	bl	80037f0 <xTraceEventCreate2>
 8000878:	e004      	b.n	8000884 <xQueueGenericSend+0x268>
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	0019      	movs	r1, r3
 800087e:	2058      	movs	r0, #88	@ 0x58
 8000880:	f002 ff3e 	bl	8003700 <xTraceEventCreate1>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	3310      	adds	r3, #16
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f8ed 	bl	8001a6c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fb3a 	bl	8000f0e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800089a:	f000 fe5b 	bl	8001554 <xTaskResumeAll>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d000      	beq.n	80008a4 <xQueueGenericSend+0x288>
 80008a2:	e706      	b.n	80006b2 <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 80008a4:	f001 ff1c 	bl	80026e0 <vPortYield>
 80008a8:	e703      	b.n	80006b2 <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fb2e 	bl	8000f0e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008b2:	f000 fe4f 	bl	8001554 <xTaskResumeAll>
 80008b6:	e6fc      	b.n	80006b2 <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fb27 	bl	8000f0e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008c0:	f000 fe48 	bl	8001554 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	5c9b      	ldrb	r3, [r3, r2]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d026      	beq.n	800091c <xQueueGenericSend+0x300>
 80008ce:	dc2a      	bgt.n	8000926 <xQueueGenericSend+0x30a>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	dc28      	bgt.n	8000926 <xQueueGenericSend+0x30a>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	da11      	bge.n	80008fc <xQueueGenericSend+0x2e0>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <xQueueGenericSend+0x2c6>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d01d      	beq.n	800091c <xQueueGenericSend+0x300>
 80008e0:	e021      	b.n	8000926 <xQueueGenericSend+0x30a>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <xQueueGenericSend+0x2d0>
 80008e8:	2053      	movs	r0, #83	@ 0x53
 80008ea:	e000      	b.n	80008ee <xQueueGenericSend+0x2d2>
 80008ec:	20c1      	movs	r0, #193	@ 0xc1
 80008ee:	6a39      	ldr	r1, [r7, #32]
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008f4:	001a      	movs	r2, r3
 80008f6:	f002 ff7b 	bl	80037f0 <xTraceEventCreate2>
 80008fa:	e014      	b.n	8000926 <xQueueGenericSend+0x30a>
 80008fc:	6a39      	ldr	r1, [r7, #32]
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000902:	001a      	movs	r2, r3
 8000904:	2054      	movs	r0, #84	@ 0x54
 8000906:	f002 ff73 	bl	80037f0 <xTraceEventCreate2>
 800090a:	e00c      	b.n	8000926 <xQueueGenericSend+0x30a>
 800090c:	08005954 	.word	0x08005954
 8000910:	0000034d 	.word	0x0000034d
 8000914:	0000034e 	.word	0x0000034e
 8000918:	00000351 	.word	0x00000351
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	0019      	movs	r1, r3
 8000920:	2055      	movs	r0, #85	@ 0x55
 8000922:	f002 feed 	bl	8003700 <xTraceEventCreate1>
            return errQUEUE_FULL;
 8000926:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b00a      	add	sp, #40	@ 0x28
 800092e:	bd80      	pop	{r7, pc}

08000930 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	6839      	ldr	r1, [r7, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f805 	bl	8000950 <MyWrapper_xQueueGiveFromISR>
 8000946:	0003      	movs	r3, r0
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d105      	bne.n	8000972 <MyWrapper_xQueueGiveFromISR+0x22>
 8000966:	4a5e      	ldr	r2, [pc, #376]	@ (8000ae0 <MyWrapper_xQueueGiveFromISR+0x190>)
 8000968:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae4 <MyWrapper_xQueueGiveFromISR+0x194>)
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f004 f9f9 	bl	8004d64 <vAssertCalled>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <MyWrapper_xQueueGiveFromISR+0x36>
 800097a:	4a5b      	ldr	r2, [pc, #364]	@ (8000ae8 <MyWrapper_xQueueGiveFromISR+0x198>)
 800097c:	4b59      	ldr	r3, [pc, #356]	@ (8000ae4 <MyWrapper_xQueueGiveFromISR+0x194>)
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f004 f9ef 	bl	8004d64 <vAssertCalled>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <MyWrapper_xQueueGiveFromISR+0x46>
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <MyWrapper_xQueueGiveFromISR+0x4a>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <MyWrapper_xQueueGiveFromISR+0x4c>
 800099a:	2300      	movs	r3, #0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d105      	bne.n	80009ac <MyWrapper_xQueueGiveFromISR+0x5c>
 80009a0:	4a52      	ldr	r2, [pc, #328]	@ (8000aec <MyWrapper_xQueueGiveFromISR+0x19c>)
 80009a2:	4b50      	ldr	r3, [pc, #320]	@ (8000ae4 <MyWrapper_xQueueGiveFromISR+0x194>)
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f004 f9dc 	bl	8004d64 <vAssertCalled>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80009ac:	f001 feda 	bl	8002764 <ulSetInterruptMaskFromISR>
 80009b0:	0003      	movs	r3, r0
 80009b2:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009b8:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d263      	bcs.n	8000a8c <MyWrapper_xQueueGiveFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80009c4:	2317      	movs	r3, #23
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	6a3a      	ldr	r2, [r7, #32]
 80009ca:	2145      	movs	r1, #69	@ 0x45
 80009cc:	5c52      	ldrb	r2, [r2, r1]
 80009ce:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	224c      	movs	r2, #76	@ 0x4c
 80009d4:	5c9b      	ldrb	r3, [r3, r2]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d004      	beq.n	80009e4 <MyWrapper_xQueueGiveFromISR+0x94>
 80009da:	db19      	blt.n	8000a10 <MyWrapper_xQueueGiveFromISR+0xc0>
 80009dc:	3b02      	subs	r3, #2
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d816      	bhi.n	8000a10 <MyWrapper_xQueueGiveFromISR+0xc0>
 80009e2:	e00d      	b.n	8000a00 <MyWrapper_xQueueGiveFromISR+0xb0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <MyWrapper_xQueueGiveFromISR+0x9e>
 80009ea:	2059      	movs	r0, #89	@ 0x59
 80009ec:	e000      	b.n	80009f0 <MyWrapper_xQueueGiveFromISR+0xa0>
 80009ee:	20c3      	movs	r0, #195	@ 0xc3
 80009f0:	6a39      	ldr	r1, [r7, #32]
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f6:	3301      	adds	r3, #1
 80009f8:	001a      	movs	r2, r3
 80009fa:	f002 fef9 	bl	80037f0 <xTraceEventCreate2>
 80009fe:	e007      	b.n	8000a10 <MyWrapper_xQueueGiveFromISR+0xc0>
 8000a00:	6a39      	ldr	r1, [r7, #32]
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a06:	3301      	adds	r3, #1
 8000a08:	001a      	movs	r2, r3
 8000a0a:	205a      	movs	r0, #90	@ 0x5a
 8000a0c:	f002 fef0 	bl	80037f0 <xTraceEventCreate2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000a18:	2317      	movs	r3, #23
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	3301      	adds	r3, #1
 8000a22:	d111      	bne.n	8000a48 <MyWrapper_xQueueGiveFromISR+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d02c      	beq.n	8000a86 <MyWrapper_xQueueGiveFromISR+0x136>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	3324      	adds	r3, #36	@ 0x24
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 f891 	bl	8001b58 <xTaskRemoveFromEventList>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d025      	beq.n	8000a86 <MyWrapper_xQueueGiveFromISR+0x136>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d022      	beq.n	8000a86 <MyWrapper_xQueueGiveFromISR+0x136>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e01e      	b.n	8000a86 <MyWrapper_xQueueGiveFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000a48:	f000 fe88 	bl	800175c <uxTaskGetNumberOfTasks>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	2117      	movs	r1, #23
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d913      	bls.n	8000a86 <MyWrapper_xQueueGiveFromISR+0x136>
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a66:	d105      	bne.n	8000a74 <MyWrapper_xQueueGiveFromISR+0x124>
 8000a68:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <MyWrapper_xQueueGiveFromISR+0x1a0>)
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f978 	bl	8004d64 <vAssertCalled>
 8000a74:	2317      	movs	r3, #23
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	b259      	sxtb	r1, r3
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	2245      	movs	r2, #69	@ 0x45
 8000a84:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8a:	e01f      	b.n	8000acc <MyWrapper_xQueueGiveFromISR+0x17c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	224c      	movs	r2, #76	@ 0x4c
 8000a90:	5c9b      	ldrb	r3, [r3, r2]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d004      	beq.n	8000aa0 <MyWrapper_xQueueGiveFromISR+0x150>
 8000a96:	db17      	blt.n	8000ac8 <MyWrapper_xQueueGiveFromISR+0x178>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d814      	bhi.n	8000ac8 <MyWrapper_xQueueGiveFromISR+0x178>
 8000a9e:	e00c      	b.n	8000aba <MyWrapper_xQueueGiveFromISR+0x16a>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <MyWrapper_xQueueGiveFromISR+0x15a>
 8000aa6:	205c      	movs	r0, #92	@ 0x5c
 8000aa8:	e000      	b.n	8000aac <MyWrapper_xQueueGiveFromISR+0x15c>
 8000aaa:	20c4      	movs	r0, #196	@ 0xc4
 8000aac:	6a39      	ldr	r1, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	f002 fe9c 	bl	80037f0 <xTraceEventCreate2>
 8000ab8:	e006      	b.n	8000ac8 <MyWrapper_xQueueGiveFromISR+0x178>
 8000aba:	6a39      	ldr	r1, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	205d      	movs	r0, #93	@ 0x5d
 8000ac4:	f002 fe94 	bl	80037f0 <xTraceEventCreate2>
            xReturn = errQUEUE_FULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 fe4e 	bl	8002770 <vClearInterruptMaskFromISR>

    return xReturn;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00a      	add	sp, #40	@ 0x28
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	000004c9 	.word	0x000004c9
 8000ae4:	08005954 	.word	0x08005954
 8000ae8:	000004cd 	.word	0x000004cd
 8000aec:	000004d2 	.word	0x000004d2
 8000af0:	00000551 	.word	0x00000551

08000af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <xQueueReceive+0x26>
 8000b0e:	4ab3      	ldr	r2, [pc, #716]	@ (8000ddc <xQueueReceive+0x2e8>)
 8000b10:	4bb3      	ldr	r3, [pc, #716]	@ (8000de0 <xQueueReceive+0x2ec>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f004 f925 	bl	8004d64 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <xQueueReceive+0x34>
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <xQueueReceive+0x38>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <xQueueReceive+0x3a>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <xQueueReceive+0x4a>
 8000b32:	4aac      	ldr	r2, [pc, #688]	@ (8000de4 <xQueueReceive+0x2f0>)
 8000b34:	4baa      	ldr	r3, [pc, #680]	@ (8000de0 <xQueueReceive+0x2ec>)
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f004 f913 	bl	8004d64 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b3e:	f001 f9c3 	bl	8001ec8 <xTaskGetSchedulerState>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d102      	bne.n	8000b4c <xQueueReceive+0x58>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <xQueueReceive+0x5c>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <xQueueReceive+0x5e>
 8000b50:	2300      	movs	r3, #0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <xQueueReceive+0x6e>
 8000b56:	4aa4      	ldr	r2, [pc, #656]	@ (8000de8 <xQueueReceive+0x2f4>)
 8000b58:	4ba1      	ldr	r3, [pc, #644]	@ (8000de0 <xQueueReceive+0x2ec>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f004 f901 	bl	8004d64 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b62:	f001 fdcd 	bl	8002700 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b6a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d048      	beq.n	8000c04 <xQueueReceive+0x110>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f9a2 	bl	8000ec2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	224c      	movs	r2, #76	@ 0x4c
 8000b82:	5c9b      	ldrb	r3, [r3, r2]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d022      	beq.n	8000bce <xQueueReceive+0xda>
 8000b88:	dc27      	bgt.n	8000bda <xQueueReceive+0xe6>
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	dc25      	bgt.n	8000bda <xQueueReceive+0xe6>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	da0d      	bge.n	8000bae <xQueueReceive+0xba>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <xQueueReceive+0xa8>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d012      	beq.n	8000bc0 <xQueueReceive+0xcc>
 8000b9a:	e01e      	b.n	8000bda <xQueueReceive+0xe6>
 8000b9c:	6a39      	ldr	r1, [r7, #32]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	2060      	movs	r0, #96	@ 0x60
 8000ba8:	f002 fe9e 	bl	80038e8 <xTraceEventCreate3>
 8000bac:	e015      	b.n	8000bda <xQueueReceive+0xe6>
 8000bae:	6a39      	ldr	r1, [r7, #32]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	2061      	movs	r0, #97	@ 0x61
 8000bba:	f002 fe95 	bl	80038e8 <xTraceEventCreate3>
 8000bbe:	e00c      	b.n	8000bda <xQueueReceive+0xe6>
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	2062      	movs	r0, #98	@ 0x62
 8000bc8:	f002 fe12 	bl	80037f0 <xTraceEventCreate2>
 8000bcc:	e005      	b.n	8000bda <xQueueReceive+0xe6>
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	20c7      	movs	r0, #199	@ 0xc7
 8000bd6:	f002 fe0b 	bl	80037f0 <xTraceEventCreate2>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d008      	beq.n	8000bfc <xQueueReceive+0x108>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	3310      	adds	r3, #16
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 ffb2 	bl	8001b58 <xTaskRemoveFromEventList>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <xQueueReceive+0x108>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bf8:	f001 fd72 	bl	80026e0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bfc:	f001 fd92 	bl	8002724 <vPortExitCritical>
                return pdPASS;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e0e7      	b.n	8000dd4 <xQueueReceive+0x2e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d12f      	bne.n	8000c6a <xQueueReceive+0x176>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c0a:	f001 fd8b 	bl	8002724 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	224c      	movs	r2, #76	@ 0x4c
 8000c12:	5c9b      	ldrb	r3, [r3, r2]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d020      	beq.n	8000c5a <xQueueReceive+0x166>
 8000c18:	dc25      	bgt.n	8000c66 <xQueueReceive+0x172>
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	dc23      	bgt.n	8000c66 <xQueueReceive+0x172>
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	da0c      	bge.n	8000c3c <xQueueReceive+0x148>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <xQueueReceive+0x138>
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d010      	beq.n	8000c4c <xQueueReceive+0x158>
 8000c2a:	e01c      	b.n	8000c66 <xQueueReceive+0x172>
 8000c2c:	6a39      	ldr	r1, [r7, #32]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c34:	2063      	movs	r0, #99	@ 0x63
 8000c36:	f002 fe57 	bl	80038e8 <xTraceEventCreate3>
 8000c3a:	e014      	b.n	8000c66 <xQueueReceive+0x172>
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c44:	2064      	movs	r0, #100	@ 0x64
 8000c46:	f002 fe4f 	bl	80038e8 <xTraceEventCreate3>
 8000c4a:	e00c      	b.n	8000c66 <xQueueReceive+0x172>
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	0019      	movs	r1, r3
 8000c52:	2065      	movs	r0, #101	@ 0x65
 8000c54:	f002 fdcc 	bl	80037f0 <xTraceEventCreate2>
 8000c58:	e005      	b.n	8000c66 <xQueueReceive+0x172>
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	0019      	movs	r1, r3
 8000c60:	20c8      	movs	r0, #200	@ 0xc8
 8000c62:	f002 fdc5 	bl	80037f0 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e0b4      	b.n	8000dd4 <xQueueReceive+0x2e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d106      	bne.n	8000c7e <xQueueReceive+0x18a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c70:	2314      	movs	r3, #20
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f847 	bl	8001d08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c7e:	f001 fd51 	bl	8002724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c82:	f000 fc5b 	bl	800153c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c86:	f001 fd3b 	bl	8002700 <vPortEnterCritical>
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	2244      	movs	r2, #68	@ 0x44
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	3301      	adds	r3, #1
 8000c94:	d103      	bne.n	8000c9e <xQueueReceive+0x1aa>
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	2244      	movs	r2, #68	@ 0x44
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	5499      	strb	r1, [r3, r2]
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	2245      	movs	r2, #69	@ 0x45
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	d103      	bne.n	8000cb2 <xQueueReceive+0x1be>
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	2245      	movs	r2, #69	@ 0x45
 8000cae:	2100      	movs	r1, #0
 8000cb0:	5499      	strb	r1, [r3, r2]
 8000cb2:	f001 fd37 	bl	8002724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	2314      	movs	r3, #20
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 f836 	bl	8001d30 <xTaskCheckForTimeOut>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d14b      	bne.n	8000d60 <xQueueReceive+0x26c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f97d 	bl	8000fca <prvIsQueueEmpty>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d03e      	beq.n	8000d52 <xQueueReceive+0x25e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	224c      	movs	r2, #76	@ 0x4c
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d020      	beq.n	8000d20 <xQueueReceive+0x22c>
 8000cde:	dc25      	bgt.n	8000d2c <xQueueReceive+0x238>
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	dc23      	bgt.n	8000d2c <xQueueReceive+0x238>
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	da0c      	bge.n	8000d02 <xQueueReceive+0x20e>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <xQueueReceive+0x1fe>
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d010      	beq.n	8000d12 <xQueueReceive+0x21e>
 8000cf0:	e01c      	b.n	8000d2c <xQueueReceive+0x238>
 8000cf2:	6a39      	ldr	r1, [r7, #32]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cfa:	2066      	movs	r0, #102	@ 0x66
 8000cfc:	f002 fdf4 	bl	80038e8 <xTraceEventCreate3>
 8000d00:	e014      	b.n	8000d2c <xQueueReceive+0x238>
 8000d02:	6a39      	ldr	r1, [r7, #32]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d0a:	2067      	movs	r0, #103	@ 0x67
 8000d0c:	f002 fdec 	bl	80038e8 <xTraceEventCreate3>
 8000d10:	e00c      	b.n	8000d2c <xQueueReceive+0x238>
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	0019      	movs	r1, r3
 8000d18:	2068      	movs	r0, #104	@ 0x68
 8000d1a:	f002 fd69 	bl	80037f0 <xTraceEventCreate2>
 8000d1e:	e005      	b.n	8000d2c <xQueueReceive+0x238>
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	0019      	movs	r1, r3
 8000d26:	20f6      	movs	r0, #246	@ 0xf6
 8000d28:	f002 fd62 	bl	80037f0 <xTraceEventCreate2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	3324      	adds	r3, #36	@ 0x24
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fe99 	bl	8001a6c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f8e6 	bl	8000f0e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d42:	f000 fc07 	bl	8001554 <xTaskResumeAll>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d000      	beq.n	8000d4c <xQueueReceive+0x258>
 8000d4a:	e70a      	b.n	8000b62 <xQueueReceive+0x6e>
                {
                    portYIELD_WITHIN_API();
 8000d4c:	f001 fcc8 	bl	80026e0 <vPortYield>
 8000d50:	e707      	b.n	8000b62 <xQueueReceive+0x6e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 f8da 	bl	8000f0e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d5a:	f000 fbfb 	bl	8001554 <xTaskResumeAll>
 8000d5e:	e700      	b.n	8000b62 <xQueueReceive+0x6e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f8d3 	bl	8000f0e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d68:	f000 fbf4 	bl	8001554 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f92b 	bl	8000fca <prvIsQueueEmpty>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d100      	bne.n	8000d7a <xQueueReceive+0x286>
 8000d78:	e6f3      	b.n	8000b62 <xQueueReceive+0x6e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	224c      	movs	r2, #76	@ 0x4c
 8000d7e:	5c9b      	ldrb	r3, [r3, r2]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d020      	beq.n	8000dc6 <xQueueReceive+0x2d2>
 8000d84:	dc25      	bgt.n	8000dd2 <xQueueReceive+0x2de>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	dc23      	bgt.n	8000dd2 <xQueueReceive+0x2de>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	da0c      	bge.n	8000da8 <xQueueReceive+0x2b4>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <xQueueReceive+0x2a4>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d010      	beq.n	8000db8 <xQueueReceive+0x2c4>
 8000d96:	e01c      	b.n	8000dd2 <xQueueReceive+0x2de>
 8000d98:	6a39      	ldr	r1, [r7, #32]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da0:	2063      	movs	r0, #99	@ 0x63
 8000da2:	f002 fda1 	bl	80038e8 <xTraceEventCreate3>
 8000da6:	e014      	b.n	8000dd2 <xQueueReceive+0x2de>
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db0:	2064      	movs	r0, #100	@ 0x64
 8000db2:	f002 fd99 	bl	80038e8 <xTraceEventCreate3>
 8000db6:	e00c      	b.n	8000dd2 <xQueueReceive+0x2de>
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	2065      	movs	r0, #101	@ 0x65
 8000dc0:	f002 fd16 	bl	80037f0 <xTraceEventCreate2>
 8000dc4:	e005      	b.n	8000dd2 <xQueueReceive+0x2de>
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	0019      	movs	r1, r3
 8000dcc:	20c8      	movs	r0, #200	@ 0xc8
 8000dce:	f002 fd0f 	bl	80037f0 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000dd2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b00a      	add	sp, #40	@ 0x28
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	0000056b 	.word	0x0000056b
 8000de0:	08005954 	.word	0x08005954
 8000de4:	0000056f 	.word	0x0000056f
 8000de8:	00000574 	.word	0x00000574

08000dec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e00:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14e      	bne.n	8000eb0 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 f872 	bl	8001f00 <xTaskPriorityDisinherit>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e043      	b.n	8000eb0 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d119      	bne.n	8000e62 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0019      	movs	r1, r3
 8000e3a:	f004 fd75 	bl	8005928 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d32b      	bcc.n	8000eb0 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	e026      	b.n	8000eb0 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68d8      	ldr	r0, [r3, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	f004 fd5b 	bl	8005928 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	18d2      	adds	r2, r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d207      	bcs.n	8000e9e <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	425b      	negs	r3, r3
 8000e98:	18d2      	adds	r2, r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d105      	bne.n	8000eb0 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000eb8:	697b      	ldr	r3, [r7, #20]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d018      	beq.n	8000f06 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	18d2      	adds	r2, r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d303      	bcc.n	8000ef6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f004 fd11 	bl	8005928 <memcpy>
    }
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f16:	f001 fbf3 	bl	8002700 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	2145      	movs	r1, #69	@ 0x45
 8000f22:	5c52      	ldrb	r2, [r2, r1]
 8000f24:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f26:	e013      	b.n	8000f50 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3324      	adds	r3, #36	@ 0x24
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fe0f 	bl	8001b58 <xTaskRemoveFromEventList>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000f3e:	f000 ff51 	bl	8001de4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f42:	210f      	movs	r1, #15
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dce5      	bgt.n	8000f28 <prvUnlockQueue+0x1a>
 8000f5c:	e000      	b.n	8000f60 <prvUnlockQueue+0x52>
                    break;
 8000f5e:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2245      	movs	r2, #69	@ 0x45
 8000f64:	21ff      	movs	r1, #255	@ 0xff
 8000f66:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000f68:	f001 fbdc 	bl	8002724 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f6c:	f001 fbc8 	bl	8002700 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f70:	230e      	movs	r3, #14
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	2144      	movs	r1, #68	@ 0x44
 8000f78:	5c52      	ldrb	r2, [r2, r1]
 8000f7a:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f7c:	e013      	b.n	8000fa6 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3310      	adds	r3, #16
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fde4 	bl	8001b58 <xTaskRemoveFromEventList>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000f94:	f000 ff26 	bl	8001de4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f98:	210e      	movs	r1, #14
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa6:	230e      	movs	r3, #14
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dce5      	bgt.n	8000f7e <prvUnlockQueue+0x70>
 8000fb2:	e000      	b.n	8000fb6 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8000fb4:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2244      	movs	r2, #68	@ 0x44
 8000fba:	21ff      	movs	r1, #255	@ 0xff
 8000fbc:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000fbe:	f001 fbb1 	bl	8002724 <vPortExitCritical>
}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fd2:	f001 fb95 	bl	8002700 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e001      	b.n	8000fe8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fe8:	f001 fb9c 	bl	8002724 <vPortExitCritical>

    return xReturn;
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ffe:	f001 fb7f 	bl	8002700 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800100a:	429a      	cmp	r2, r3
 800100c:	d102      	bne.n	8001014 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e001      	b.n	8001018 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001018:	f001 fb84 	bl	8002724 <vPortExitCritical>

    return xReturn;
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <vQueueAddToRegistry+0x20>
 800103c:	4a20      	ldr	r2, [pc, #128]	@ (80010c0 <vQueueAddToRegistry+0x98>)
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <vQueueAddToRegistry+0x9c>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f003 fe8e 	bl	8004d64 <vAssertCalled>

        if( pcQueueName != NULL )
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d025      	beq.n	800109a <vQueueAddToRegistry+0x72>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e01f      	b.n	8001094 <vQueueAddToRegistry+0x6c>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001054:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <vQueueAddToRegistry+0xa0>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	18d3      	adds	r3, r2, r3
 800105c:	3304      	adds	r3, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d105      	bne.n	8001072 <vQueueAddToRegistry+0x4a>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	00da      	lsls	r2, r3, #3
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <vQueueAddToRegistry+0xa0>)
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	60bb      	str	r3, [r7, #8]
                    break;
 8001070:	e013      	b.n	800109a <vQueueAddToRegistry+0x72>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10a      	bne.n	800108e <vQueueAddToRegistry+0x66>
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <vQueueAddToRegistry+0xa0>)
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	00d2      	lsls	r2, r2, #3
 800107e:	58d3      	ldr	r3, [r2, r3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d104      	bne.n	800108e <vQueueAddToRegistry+0x66>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	00da      	lsls	r2, r3, #3
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <vQueueAddToRegistry+0xa0>)
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b09      	cmp	r3, #9
 8001098:	d9dc      	bls.n	8001054 <vQueueAddToRegistry+0x2c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 f8ad 	bl	8004212 <xTraceObjectSetNameWithoutHandle>
        }
    }
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b004      	add	sp, #16
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	00000ad8 	.word	0x00000ad8
 80010c4:	08005954 	.word	0x08005954
 80010c8:	20000028 	.word	0x20000028

080010cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80010dc:	f001 fb10 	bl	8002700 <vPortEnterCritical>
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2244      	movs	r2, #68	@ 0x44
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	d103      	bne.n	80010f4 <vQueueWaitForMessageRestricted+0x28>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2244      	movs	r2, #68	@ 0x44
 80010f0:	2100      	movs	r1, #0
 80010f2:	5499      	strb	r1, [r3, r2]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2245      	movs	r2, #69	@ 0x45
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	d103      	bne.n	8001108 <vQueueWaitForMessageRestricted+0x3c>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2245      	movs	r2, #69	@ 0x45
 8001104:	2100      	movs	r1, #0
 8001106:	5499      	strb	r1, [r3, r2]
 8001108:	f001 fb0c 	bl	8002724 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3324      	adds	r3, #36	@ 0x24
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fccb 	bl	8001ab8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fef2 	bl	8000f0e <prvUnlockQueue>
    }
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b006      	add	sp, #24
 8001130:	bd80      	pop	{r7, pc}

08001132 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001132:	b590      	push	{r4, r7, lr}
 8001134:	b08d      	sub	sp, #52	@ 0x34
 8001136:	af04      	add	r7, sp, #16
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	1dbb      	adds	r3, r7, #6
 8001140:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001142:	1dbb      	adds	r3, r7, #6
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	0018      	movs	r0, r3
 800114a:	f001 fb79 	bl	8002840 <pvPortMalloc>
 800114e:	0003      	movs	r3, r0
 8001150:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d016      	beq.n	8001186 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001158:	2060      	movs	r0, #96	@ 0x60
 800115a:	f001 fb71 	bl	8002840 <pvPortMalloc>
 800115e:	0003      	movs	r3, r0
 8001160:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2260      	movs	r2, #96	@ 0x60
 800116c:	2100      	movs	r1, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f004 fbae 	bl	80058d0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e006      	b.n	800118a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	0018      	movs	r0, r3
 8001180:	f001 fbc6 	bl	8002910 <vPortFree>
 8001184:	e001      	b.n	800118a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d016      	beq.n	80011be <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	683c      	ldr	r4, [r7, #0]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	2300      	movs	r3, #0
 800119c:	9303      	str	r3, [sp, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	0023      	movs	r3, r4
 80011ac:	f000 f810 	bl	80011d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f89a 	bl	80012ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	e002      	b.n	80011c4 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011be:	2301      	movs	r3, #1
 80011c0:	425b      	negs	r3, r3
 80011c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011c4:	69bb      	ldr	r3, [r7, #24]
    }
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b009      	add	sp, #36	@ 0x24
 80011cc:	bd90      	pop	{r4, r7, pc}
	...

080011d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	001a      	movs	r2, r3
 80011e8:	21a5      	movs	r1, #165	@ 0xa5
 80011ea:	f004 fb71 	bl	80058d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80011ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4939      	ldr	r1, [pc, #228]	@ (80012dc <prvInitialiseNewTask+0x10c>)
 80011f6:	468c      	mov	ip, r1
 80011f8:	4463      	add	r3, ip
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2207      	movs	r2, #7
 8001204:	4393      	bics	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	d005      	beq.n	800121c <prvInitialiseNewTask+0x4c>
 8001210:	4a33      	ldr	r2, [pc, #204]	@ (80012e0 <prvInitialiseNewTask+0x110>)
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <prvInitialiseNewTask+0x114>)
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f003 fda4 	bl	8004d64 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d01f      	beq.n	8001262 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e013      	b.n	8001250 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	7818      	ldrb	r0, [r3, #0]
 8001230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001232:	2134      	movs	r1, #52	@ 0x34
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	185b      	adds	r3, r3, r1
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d9e8      	bls.n	8001228 <prvInitialiseNewTask+0x58>
 8001256:	e000      	b.n	800125a <prvInitialiseNewTask+0x8a>
            {
                break;
 8001258:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2243      	movs	r2, #67	@ 0x43
 800125e:	2100      	movs	r1, #0
 8001260:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d905      	bls.n	8001274 <prvInitialiseNewTask+0xa4>
 8001268:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <prvInitialiseNewTask+0x118>)
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <prvInitialiseNewTask+0x114>)
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f003 fd78 	bl	8004d64 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d901      	bls.n	800127e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800127a:	2304      	movs	r3, #4
 800127c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	6a3a      	ldr	r2, [r7, #32]
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001286:	6a3a      	ldr	r2, [r7, #32]
 8001288:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800128a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128c:	3304      	adds	r3, #4
 800128e:	0018      	movs	r0, r3
 8001290:	f7fe ffe4 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001296:	3318      	adds	r3, #24
 8001298:	0018      	movs	r0, r3
 800129a:	f7fe ffdf 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	2205      	movs	r2, #5
 80012a8:	1ad2      	subs	r2, r2, r3
 80012aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	68f9      	ldr	r1, [r7, #12]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 f982 	bl	80025c4 <pxPortInitialiseStack>
 80012c0:	0002      	movs	r2, r0
 80012c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <prvInitialiseNewTask+0x102>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b006      	add	sp, #24
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	3fffffff 	.word	0x3fffffff
 80012e0:	0000035d 	.word	0x0000035d
 80012e4:	0800596c 	.word	0x0800596c
 80012e8:	00000392 	.word	0x00000392

080012ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80012f4:	f001 fa04 	bl	8002700 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80012f8:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <prvAddNewTaskToReadyList+0x12c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <prvAddNewTaskToReadyList+0x12c>)
 8001300:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <prvAddNewTaskToReadyList+0x130>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800130a:	4b44      	ldr	r3, [pc, #272]	@ (800141c <prvAddNewTaskToReadyList+0x130>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001310:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <prvAddNewTaskToReadyList+0x12c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d110      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001318:	f000 fd7e 	bl	8001e18 <prvInitialiseTaskLists>
 800131c:	e00d      	b.n	800133a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <prvAddNewTaskToReadyList+0x134>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <prvAddNewTaskToReadyList+0x130>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d802      	bhi.n	800133a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <prvAddNewTaskToReadyList+0x130>)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800133a:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <prvAddNewTaskToReadyList+0x138>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <prvAddNewTaskToReadyList+0x138>)
 8001342:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001344:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <prvAddNewTaskToReadyList+0x138>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <prvAddNewTaskToReadyList+0x7e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <prvAddNewTaskToReadyList+0x7e>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3334      	adds	r3, #52	@ 0x34
 800135c:	001a      	movs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2010      	movs	r0, #16
 8001366:	f002 ff3b 	bl	80041e0 <xTraceObjectRegisterWithoutHandle>

        prvAddTaskToReadyList( pxNewTCB );
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	0019      	movs	r1, r3
 800136e:	2030      	movs	r0, #48	@ 0x30
 8001370:	f002 f9c6 	bl	8003700 <xTraceEventCreate1>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <prvAddNewTaskToReadyList+0x13c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d903      	bls.n	8001388 <prvAddNewTaskToReadyList+0x9c>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001384:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <prvAddNewTaskToReadyList+0x13c>)
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800138c:	4927      	ldr	r1, [pc, #156]	@ (800142c <prvAddNewTaskToReadyList+0x140>)
 800138e:	0013      	movs	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	189b      	adds	r3, r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	18cb      	adds	r3, r1, r3
 8001398:	3304      	adds	r3, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	3204      	adds	r2, #4
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	1d1a      	adds	r2, r3, #4
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c2:	0013      	movs	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <prvAddNewTaskToReadyList+0x140>)
 80013cc:	189a      	adds	r2, r3, r2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d6:	4915      	ldr	r1, [pc, #84]	@ (800142c <prvAddNewTaskToReadyList+0x140>)
 80013d8:	0013      	movs	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	189b      	adds	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	585b      	ldr	r3, [r3, r1]
 80013e2:	1c58      	adds	r0, r3, #1
 80013e4:	4911      	ldr	r1, [pc, #68]	@ (800142c <prvAddNewTaskToReadyList+0x140>)
 80013e6:	0013      	movs	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013f0:	f001 f998 	bl	8002724 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <prvAddNewTaskToReadyList+0x134>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <prvAddNewTaskToReadyList+0x122>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <prvAddNewTaskToReadyList+0x130>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001406:	429a      	cmp	r2, r3
 8001408:	d201      	bcs.n	800140e <prvAddNewTaskToReadyList+0x122>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800140a:	f001 f969 	bl	80026e0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b004      	add	sp, #16
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	20000124 	.word	0x20000124
 800141c:	20000078 	.word	0x20000078
 8001420:	20000130 	.word	0x20000130
 8001424:	20000140 	.word	0x20000140
 8001428:	2000012c 	.word	0x2000012c
 800142c:	2000007c 	.word	0x2000007c

08001430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d019      	beq.n	8001476 <vTaskDelay+0x46>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <vTaskDelay+0x58>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <vTaskDelay+0x26>
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <vTaskDelay+0x5c>)
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <vTaskDelay+0x60>)
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f003 fc87 	bl	8004d64 <vAssertCalled>
            vTaskSuspendAll();
 8001456:	f000 f871 	bl	800153c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0019      	movs	r1, r3
 800145e:	207a      	movs	r0, #122	@ 0x7a
 8001460:	f002 f94e 	bl	8003700 <xTraceEventCreate1>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2100      	movs	r1, #0
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fde5 	bl	8002038 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800146e:	f000 f871 	bl	8001554 <xTaskResumeAll>
 8001472:	0003      	movs	r3, r0
 8001474:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <vTaskDelay+0x50>
        {
            portYIELD_WITHIN_API();
 800147c:	f001 f930 	bl	80026e0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000014c 	.word	0x2000014c
 800148c:	0000051c 	.word	0x0000051c
 8001490:	0800596c 	.word	0x0800596c

08001494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800149a:	491e      	ldr	r1, [pc, #120]	@ (8001514 <vTaskStartScheduler+0x80>)
 800149c:	481e      	ldr	r0, [pc, #120]	@ (8001518 <vTaskStartScheduler+0x84>)
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <vTaskStartScheduler+0x88>)
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	f7ff fe42 	bl	8001132 <xTaskCreate>
 80014ae:	0003      	movs	r3, r0
 80014b0:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d103      	bne.n	80014c0 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80014b8:	f000 fe02 	bl	80020c0 <xTimerCreateTimerTask>
 80014bc:	0003      	movs	r3, r0
 80014be:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d116      	bne.n	80014f4 <vTaskStartScheduler+0x60>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80014c6:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <vTaskStartScheduler+0x8c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	4252      	negs	r2, r2
 80014ce:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <vTaskStartScheduler+0x90>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <vTaskStartScheduler+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <vTaskStartScheduler+0x98>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <vTaskStartScheduler+0x98>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f003 fb0d 	bl	8004b08 <xTraceTaskSwitch>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80014ee:	f001 f8d3 	bl	8002698 <xPortStartScheduler>
 80014f2:	e008      	b.n	8001506 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	d105      	bne.n	8001506 <vTaskStartScheduler+0x72>
 80014fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <vTaskStartScheduler+0x9c>)
 80014fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <vTaskStartScheduler+0xa0>)
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f003 fc2f 	bl	8004d64 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <vTaskStartScheduler+0xa4>)
 8001508:	681b      	ldr	r3, [r3, #0]
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	08005980 	.word	0x08005980
 8001518:	08001df9 	.word	0x08001df9
 800151c:	20000148 	.word	0x20000148
 8001520:	20000144 	.word	0x20000144
 8001524:	20000130 	.word	0x20000130
 8001528:	20000128 	.word	0x20000128
 800152c:	20000078 	.word	0x20000078
 8001530:	00000812 	.word	0x00000812
 8001534:	0800596c 	.word	0x0800596c
 8001538:	20000000 	.word	0x20000000

0800153c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <vTaskSuspendAll+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	4b02      	ldr	r3, [pc, #8]	@ (8001550 <vTaskSuspendAll+0x14>)
 8001548:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000014c 	.word	0x2000014c

08001554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001562:	4b6d      	ldr	r3, [pc, #436]	@ (8001718 <xTaskResumeAll+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d105      	bne.n	8001576 <xTaskResumeAll+0x22>
 800156a:	4a6c      	ldr	r2, [pc, #432]	@ (800171c <xTaskResumeAll+0x1c8>)
 800156c:	4b6c      	ldr	r3, [pc, #432]	@ (8001720 <xTaskResumeAll+0x1cc>)
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f003 fbf7 	bl	8004d64 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001576:	f001 f8c3 	bl	8002700 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800157a:	4b67      	ldr	r3, [pc, #412]	@ (8001718 <xTaskResumeAll+0x1c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4b65      	ldr	r3, [pc, #404]	@ (8001718 <xTaskResumeAll+0x1c4>)
 8001582:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001584:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <xTaskResumeAll+0x1c4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d000      	beq.n	800158e <xTaskResumeAll+0x3a>
 800158c:	e0bc      	b.n	8001708 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800158e:	4b65      	ldr	r3, [pc, #404]	@ (8001724 <xTaskResumeAll+0x1d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d100      	bne.n	8001598 <xTaskResumeAll+0x44>
 8001596:	e0b7      	b.n	8001708 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001598:	e08e      	b.n	80016b8 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800159a:	4b63      	ldr	r3, [pc, #396]	@ (8001728 <xTaskResumeAll+0x1d4>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	6a12      	ldr	r2, [r2, #32]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	69d2      	ldr	r2, [r2, #28]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3318      	adds	r3, #24
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d103      	bne.n	80015d0 <xTaskResumeAll+0x7c>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2200      	movs	r2, #0
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	6892      	ldr	r2, [r2, #8]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3304      	adds	r3, #4
 8001602:	429a      	cmp	r2, r3
 8001604:	d103      	bne.n	800160e <xTaskResumeAll+0xba>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	0019      	movs	r1, r3
 8001622:	2030      	movs	r0, #48	@ 0x30
 8001624:	f002 f86c 	bl	8003700 <xTraceEventCreate1>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <xTaskResumeAll+0x1d8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d903      	bls.n	800163c <xTaskResumeAll+0xe8>
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <xTaskResumeAll+0x1d8>)
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001640:	493b      	ldr	r1, [pc, #236]	@ (8001730 <xTaskResumeAll+0x1dc>)
 8001642:	0013      	movs	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	189b      	adds	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	18cb      	adds	r3, r1, r3
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	3204      	adds	r2, #4
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001676:	0013      	movs	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	189b      	adds	r3, r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <xTaskResumeAll+0x1dc>)
 8001680:	189a      	adds	r2, r3, r2
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168a:	4929      	ldr	r1, [pc, #164]	@ (8001730 <xTaskResumeAll+0x1dc>)
 800168c:	0013      	movs	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	189b      	adds	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	585b      	ldr	r3, [r3, r1]
 8001696:	1c58      	adds	r0, r3, #1
 8001698:	4925      	ldr	r1, [pc, #148]	@ (8001730 <xTaskResumeAll+0x1dc>)
 800169a:	0013      	movs	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <xTaskResumeAll+0x1e0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d302      	bcc.n	80016b8 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <xTaskResumeAll+0x1e4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <xTaskResumeAll+0x1d4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d000      	beq.n	80016c2 <xTaskResumeAll+0x16e>
 80016c0:	e76b      	b.n	800159a <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80016c8:	f000 fbe4 	bl	8001e94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <xTaskResumeAll+0x1e8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00f      	beq.n	80016f8 <xTaskResumeAll+0x1a4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80016d8:	f000 f84a 	bl	8001770 <xTaskIncrementTick>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d002      	beq.n	80016e6 <xTaskResumeAll+0x192>
                            {
                                xYieldPending = pdTRUE;
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <xTaskResumeAll+0x1e4>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f2      	bne.n	80016d8 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <xTaskResumeAll+0x1e8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <xTaskResumeAll+0x1e4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <xTaskResumeAll+0x1b4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001704:	f000 ffec 	bl	80026e0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001708:	f001 f80c 	bl	8002724 <vPortExitCritical>

    return xAlreadyYielded;
 800170c:	693b      	ldr	r3, [r7, #16]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b006      	add	sp, #24
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	2000014c 	.word	0x2000014c
 800171c:	00000885 	.word	0x00000885
 8001720:	0800596c 	.word	0x0800596c
 8001724:	20000124 	.word	0x20000124
 8001728:	20000110 	.word	0x20000110
 800172c:	2000012c 	.word	0x2000012c
 8001730:	2000007c 	.word	0x2000007c
 8001734:	20000078 	.word	0x20000078
 8001738:	20000138 	.word	0x20000138
 800173c:	20000134 	.word	0x20000134

08001740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <xTaskGetTickCount+0x18>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	20000128 	.word	0x20000128

0800175c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8001760:	4b02      	ldr	r3, [pc, #8]	@ (800176c <uxTaskGetNumberOfTasks+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	20000124 	.word	0x20000124

08001770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <xTaskIncrementTick+0x200>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <xTaskIncrementTick+0x1a>
 8001782:	4b7c      	ldr	r3, [pc, #496]	@ (8001974 <xTaskIncrementTick+0x204>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <xTaskIncrementTick+0x26>
 800178a:	4b7b      	ldr	r3, [pc, #492]	@ (8001978 <xTaskIncrementTick+0x208>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b7b      	ldr	r3, [pc, #492]	@ (800197c <xTaskIncrementTick+0x20c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3201      	adds	r2, #1
 8001794:	619a      	str	r2, [r3, #24]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001796:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <xTaskIncrementTick+0x200>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d000      	beq.n	80017a0 <xTaskIncrementTick+0x30>
 800179e:	e0dc      	b.n	800195a <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017a0:	4b75      	ldr	r3, [pc, #468]	@ (8001978 <xTaskIncrementTick+0x208>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80017a8:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <xTaskIncrementTick+0x208>)
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11b      	bne.n	80017ec <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 80017b4:	4b72      	ldr	r3, [pc, #456]	@ (8001980 <xTaskIncrementTick+0x210>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <xTaskIncrementTick+0x5a>
 80017be:	4a71      	ldr	r2, [pc, #452]	@ (8001984 <xTaskIncrementTick+0x214>)
 80017c0:	4b71      	ldr	r3, [pc, #452]	@ (8001988 <xTaskIncrementTick+0x218>)
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f003 facd 	bl	8004d64 <vAssertCalled>
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <xTaskIncrementTick+0x210>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	4b6e      	ldr	r3, [pc, #440]	@ (800198c <xTaskIncrementTick+0x21c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <xTaskIncrementTick+0x210>)
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b6c      	ldr	r3, [pc, #432]	@ (800198c <xTaskIncrementTick+0x21c>)
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <xTaskIncrementTick+0x220>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <xTaskIncrementTick+0x220>)
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f000 fb54 	bl	8001e94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80017ec:	4b69      	ldr	r3, [pc, #420]	@ (8001994 <xTaskIncrementTick+0x224>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d200      	bcs.n	80017f8 <xTaskIncrementTick+0x88>
 80017f6:	e0a9      	b.n	800194c <xTaskIncrementTick+0x1dc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017f8:	4b61      	ldr	r3, [pc, #388]	@ (8001980 <xTaskIncrementTick+0x210>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001802:	4b64      	ldr	r3, [pc, #400]	@ (8001994 <xTaskIncrementTick+0x224>)
 8001804:	2201      	movs	r2, #1
 8001806:	4252      	negs	r2, r2
 8001808:	601a      	str	r2, [r3, #0]
                    break;
 800180a:	e09f      	b.n	800194c <xTaskIncrementTick+0x1dc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800180c:	4b5c      	ldr	r3, [pc, #368]	@ (8001980 <xTaskIncrementTick+0x210>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d203      	bcs.n	800182c <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001824:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <xTaskIncrementTick+0x224>)
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800182a:	e08f      	b.n	800194c <xTaskIncrementTick+0x1dc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68d2      	ldr	r2, [r2, #12]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	6892      	ldr	r2, [r2, #8]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3304      	adds	r3, #4
 800184e:	429a      	cmp	r2, r3
 8001850:	d103      	bne.n	800185a <xTaskIncrementTick+0xea>
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01e      	beq.n	80018b0 <xTaskIncrementTick+0x140>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	6a12      	ldr	r2, [r2, #32]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	69d2      	ldr	r2, [r2, #28]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3318      	adds	r3, #24
 8001894:	429a      	cmp	r2, r3
 8001896:	d103      	bne.n	80018a0 <xTaskIncrementTick+0x130>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	0019      	movs	r1, r3
 80018b4:	2030      	movs	r0, #48	@ 0x30
 80018b6:	f001 ff23 	bl	8003700 <xTraceEventCreate1>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018be:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <xTaskIncrementTick+0x228>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d903      	bls.n	80018ce <xTaskIncrementTick+0x15e>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <xTaskIncrementTick+0x228>)
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d2:	4932      	ldr	r1, [pc, #200]	@ (800199c <xTaskIncrementTick+0x22c>)
 80018d4:	0013      	movs	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	18cb      	adds	r3, r1, r3
 80018de:	3304      	adds	r3, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	3204      	adds	r2, #4
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001908:	0013      	movs	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	189b      	adds	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <xTaskIncrementTick+0x22c>)
 8001912:	189a      	adds	r2, r3, r2
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800191c:	491f      	ldr	r1, [pc, #124]	@ (800199c <xTaskIncrementTick+0x22c>)
 800191e:	0013      	movs	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	189b      	adds	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	585b      	ldr	r3, [r3, r1]
 8001928:	1c58      	adds	r0, r3, #1
 800192a:	491c      	ldr	r1, [pc, #112]	@ (800199c <xTaskIncrementTick+0x22c>)
 800192c:	0013      	movs	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	189b      	adds	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <xTaskIncrementTick+0x230>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	429a      	cmp	r2, r3
 8001942:	d800      	bhi.n	8001946 <xTaskIncrementTick+0x1d6>
 8001944:	e758      	b.n	80017f8 <xTaskIncrementTick+0x88>
                        {
                            xSwitchRequired = pdTRUE;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800194a:	e755      	b.n	80017f8 <xTaskIncrementTick+0x88>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <xTaskIncrementTick+0x234>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e004      	b.n	8001964 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <xTaskIncrementTick+0x204>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <xTaskIncrementTick+0x204>)
 8001962:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001964:	69fb      	ldr	r3, [r7, #28]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b008      	add	sp, #32
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	2000014c 	.word	0x2000014c
 8001974:	20000134 	.word	0x20000134
 8001978:	20000128 	.word	0x20000128
 800197c:	20003008 	.word	0x20003008
 8001980:	20000108 	.word	0x20000108
 8001984:	00000ab7 	.word	0x00000ab7
 8001988:	0800596c 	.word	0x0800596c
 800198c:	2000010c 	.word	0x2000010c
 8001990:	2000013c 	.word	0x2000013c
 8001994:	20000144 	.word	0x20000144
 8001998:	2000012c 	.word	0x2000012c
 800199c:	2000007c 	.word	0x2000007c
 80019a0:	20000078 	.word	0x20000078
 80019a4:	20000138 	.word	0x20000138

080019a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <vTaskSwitchContext+0xa8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80019b6:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <vTaskSwitchContext+0xac>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80019bc:	e044      	b.n	8001a48 <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <vTaskSwitchContext+0xac>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <vTaskSwitchContext+0xb0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	e00b      	b.n	80019e4 <vTaskSwitchContext+0x3c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <vTaskSwitchContext+0x36>
 80019d2:	4a22      	ldr	r2, [pc, #136]	@ (8001a5c <vTaskSwitchContext+0xb4>)
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <vTaskSwitchContext+0xb8>)
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f003 f9c3 	bl	8004d64 <vAssertCalled>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	491f      	ldr	r1, [pc, #124]	@ (8001a64 <vTaskSwitchContext+0xbc>)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	0013      	movs	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	585b      	ldr	r3, [r3, r1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ea      	beq.n	80019cc <vTaskSwitchContext+0x24>
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	0013      	movs	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <vTaskSwitchContext+0xbc>)
 8001a02:	189b      	adds	r3, r3, r2
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3308      	adds	r3, #8
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d104      	bne.n	8001a26 <vTaskSwitchContext+0x7e>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <vTaskSwitchContext+0xc0>)
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <vTaskSwitchContext+0xb0>)
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <vTaskSwitchContext+0xc0>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <vTaskSwitchContext+0xc0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	0019      	movs	r1, r3
 8001a42:	0010      	movs	r0, r2
 8001a44:	f003 f860 	bl	8004b08 <xTraceTaskSwitch>
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000014c 	.word	0x2000014c
 8001a54:	20000138 	.word	0x20000138
 8001a58:	2000012c 	.word	0x2000012c
 8001a5c:	00000bf6 	.word	0x00000bf6
 8001a60:	0800596c 	.word	0x0800596c
 8001a64:	2000007c 	.word	0x2000007c
 8001a68:	20000078 	.word	0x20000078

08001a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <vTaskPlaceOnEventList+0x1c>
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <vTaskPlaceOnEventList+0x40>)
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <vTaskPlaceOnEventList+0x44>)
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f003 f96e 	bl	8004d64 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a88:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <vTaskPlaceOnEventList+0x48>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	001a      	movs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fbec 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 faca 	bl	8002038 <prvAddCurrentTaskToDelayedList>
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	00000c0e 	.word	0x00000c0e
 8001ab0:	0800596c 	.word	0x0800596c
 8001ab4:	20000078 	.word	0x20000078

08001ab8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <vTaskPlaceOnEventListRestricted+0x1e>
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <vTaskPlaceOnEventListRestricted+0x90>)
 8001acc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <vTaskPlaceOnEventListRestricted+0x94>)
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f003 f947 	bl	8004d64 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <vTaskPlaceOnEventListRestricted+0x98>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <vTaskPlaceOnEventListRestricted+0x98>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6892      	ldr	r2, [r2, #8]
 8001aec:	621a      	str	r2, [r3, #32]
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <vTaskPlaceOnEventListRestricted+0x98>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	3218      	adds	r2, #24
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <vTaskPlaceOnEventListRestricted+0x98>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3318      	adds	r3, #24
 8001b00:	001a      	movs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <vTaskPlaceOnEventListRestricted+0x98>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <vTaskPlaceOnEventListRestricted+0x6c>
        {
            xTicksToWait = portMAX_DELAY;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	425b      	negs	r3, r3
 8001b22:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <vTaskPlaceOnEventListRestricted+0x9c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	2079      	movs	r0, #121	@ 0x79
 8001b30:	f001 fde6 	bl	8003700 <xTraceEventCreate1>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fa7c 	bl	8002038 <prvAddCurrentTaskToDelayedList>
    }
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	00000c44 	.word	0x00000c44
 8001b4c:	0800596c 	.word	0x0800596c
 8001b50:	20000078 	.word	0x20000078
 8001b54:	20000128 	.word	0x20000128

08001b58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <xTaskRemoveFromEventList+0x22>
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ce8 <xTaskRemoveFromEventList+0x190>)
 8001b70:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <xTaskRemoveFromEventList+0x194>)
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f003 f8f5 	bl	8004d64 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	6a12      	ldr	r2, [r2, #32]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	69d2      	ldr	r2, [r2, #28]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d103      	bne.n	8001ba8 <xTaskRemoveFromEventList+0x50>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1e5a      	subs	r2, r3, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <xTaskRemoveFromEventList+0x198>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d162      	bne.n	8001c86 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	68d2      	ldr	r2, [r2, #12]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	6892      	ldr	r2, [r2, #8]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3304      	adds	r3, #4
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d103      	bne.n	8001bee <xTaskRemoveFromEventList+0x96>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	0019      	movs	r1, r3
 8001c02:	2030      	movs	r0, #48	@ 0x30
 8001c04:	f001 fd7c 	bl	8003700 <xTraceEventCreate1>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0c:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <xTaskRemoveFromEventList+0x19c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d903      	bls.n	8001c1c <xTaskRemoveFromEventList+0xc4>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <xTaskRemoveFromEventList+0x19c>)
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c20:	4935      	ldr	r1, [pc, #212]	@ (8001cf8 <xTaskRemoveFromEventList+0x1a0>)
 8001c22:	0013      	movs	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	18cb      	adds	r3, r1, r3
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	3204      	adds	r2, #4
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1d1a      	adds	r2, r3, #4
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c56:	0013      	movs	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4a26      	ldr	r2, [pc, #152]	@ (8001cf8 <xTaskRemoveFromEventList+0x1a0>)
 8001c60:	189a      	adds	r2, r3, r2
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6a:	4923      	ldr	r1, [pc, #140]	@ (8001cf8 <xTaskRemoveFromEventList+0x1a0>)
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	585b      	ldr	r3, [r3, r1]
 8001c76:	1c58      	adds	r0, r3, #1
 8001c78:	491f      	ldr	r1, [pc, #124]	@ (8001cf8 <xTaskRemoveFromEventList+0x1a0>)
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	5058      	str	r0, [r3, r1]
 8001c84:	e01b      	b.n	8001cbe <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <xTaskRemoveFromEventList+0x1a4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	61da      	str	r2, [r3, #28]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	621a      	str	r2, [r3, #32]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	3218      	adds	r2, #24
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	001a      	movs	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <xTaskRemoveFromEventList+0x1a4>)
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <xTaskRemoveFromEventList+0x1a4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <xTaskRemoveFromEventList+0x1a4>)
 8001cbc:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <xTaskRemoveFromEventList+0x1a8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d905      	bls.n	8001cd8 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <xTaskRemoveFromEventList+0x1ac>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e001      	b.n	8001cdc <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b008      	add	sp, #32
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	00000c74 	.word	0x00000c74
 8001cec:	0800596c 	.word	0x0800596c
 8001cf0:	2000014c 	.word	0x2000014c
 8001cf4:	2000012c 	.word	0x2000012c
 8001cf8:	2000007c 	.word	0x2000007c
 8001cfc:	20000110 	.word	0x20000110
 8001d00:	20000078 	.word	0x20000078
 8001d04:	20000138 	.word	0x20000138

08001d08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <vTaskInternalSetTimeOutState+0x20>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <vTaskInternalSetTimeOutState+0x24>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	605a      	str	r2, [r3, #4]
}
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000013c 	.word	0x2000013c
 8001d2c:	20000128 	.word	0x20000128

08001d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <xTaskCheckForTimeOut+0x1c>
 8001d40:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <xTaskCheckForTimeOut+0xa4>)
 8001d42:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <xTaskCheckForTimeOut+0xa8>)
 8001d44:	0011      	movs	r1, r2
 8001d46:	0018      	movs	r0, r3
 8001d48:	f003 f80c 	bl	8004d64 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <xTaskCheckForTimeOut+0x30>
 8001d52:	23cf      	movs	r3, #207	@ 0xcf
 8001d54:	011a      	lsls	r2, r3, #4
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <xTaskCheckForTimeOut+0xa8>)
 8001d58:	0011      	movs	r1, r2
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f003 f802 	bl	8004d64 <vAssertCalled>

    taskENTER_CRITICAL();
 8001d60:	f000 fcce 	bl	8002700 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <xTaskCheckForTimeOut+0xac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <xTaskCheckForTimeOut+0xb0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d00a      	beq.n	8001d96 <xTaskCheckForTimeOut+0x66>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d305      	bcc.n	8001d96 <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e016      	b.n	8001dc4 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d20c      	bcs.n	8001dba <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff ffaa 	bl	8001d08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e004      	b.n	8001dc4 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001dc4:	f000 fcae 	bl	8002724 <vPortExitCritical>

    return xReturn;
 8001dc8:	697b      	ldr	r3, [r7, #20]
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b006      	add	sp, #24
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	00000cef 	.word	0x00000cef
 8001dd8:	0800596c 	.word	0x0800596c
 8001ddc:	20000128 	.word	0x20000128
 8001de0:	2000013c 	.word	0x2000013c

08001de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001de8:	4b02      	ldr	r3, [pc, #8]	@ (8001df4 <vTaskMissedYield+0x10>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000138 	.word	0x20000138

08001df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e00:	f000 f842 	bl	8001e88 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <prvIdleTask+0x1c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d9f9      	bls.n	8001e00 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001e0c:	f000 fc68 	bl	80026e0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8001e10:	e7f6      	b.n	8001e00 <prvIdleTask+0x8>
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	2000007c 	.word	0x2000007c

08001e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	e00c      	b.n	8001e3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	0013      	movs	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <prvInitialiseTaskLists+0x58>)
 8001e30:	189b      	adds	r3, r3, r2
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe f9f4 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d9ef      	bls.n	8001e24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <prvInitialiseTaskLists+0x5c>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7fe f9ea 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <prvInitialiseTaskLists+0x60>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe f9e6 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <prvInitialiseTaskLists+0x64>)
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7fe f9e2 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <prvInitialiseTaskLists+0x68>)
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <prvInitialiseTaskLists+0x5c>)
 8001e60:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <prvInitialiseTaskLists+0x6c>)
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <prvInitialiseTaskLists+0x60>)
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000007c 	.word	0x2000007c
 8001e74:	200000e0 	.word	0x200000e0
 8001e78:	200000f4 	.word	0x200000f4
 8001e7c:	20000110 	.word	0x20000110
 8001e80:	20000108 	.word	0x20000108
 8001e84:	2000010c 	.word	0x2000010c

08001e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <prvResetNextTaskUnblockTime+0x2c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d104      	bne.n	8001eac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <prvResetNextTaskUnblockTime+0x30>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001eaa:	e005      	b.n	8001eb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <prvResetNextTaskUnblockTime+0x2c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <prvResetNextTaskUnblockTime+0x30>)
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	20000108 	.word	0x20000108
 8001ec4:	20000144 	.word	0x20000144

08001ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <xTaskGetSchedulerState+0x30>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e008      	b.n	8001eee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <xTaskGetSchedulerState+0x34>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001eee:	687b      	ldr	r3, [r7, #4]
    }
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000130 	.word	0x20000130
 8001efc:	2000014c 	.word	0x2000014c

08001f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d100      	bne.n	8001f18 <xTaskPriorityDisinherit+0x18>
 8001f16:	e07e      	b.n	8002016 <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <xTaskPriorityDisinherit+0x120>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d005      	beq.n	8001f2e <xTaskPriorityDisinherit+0x2e>
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <xTaskPriorityDisinherit+0x124>)
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <xTaskPriorityDisinherit+0x128>)
 8001f26:	0011      	movs	r1, r2
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f002 ff1b 	bl	8004d64 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <xTaskPriorityDisinherit+0x42>
 8001f36:	4a3d      	ldr	r2, [pc, #244]	@ (800202c <xTaskPriorityDisinherit+0x12c>)
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <xTaskPriorityDisinherit+0x128>)
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f002 ff11 	bl	8004d64 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d05e      	beq.n	8002016 <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d15a      	bne.n	8002016 <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	3304      	adds	r3, #4
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7fe f9ba 	bl	80002de <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001f6a:	6939      	ldr	r1, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	001a      	movs	r2, r3
 8001f72:	2006      	movs	r0, #6
 8001f74:	f001 fc3c 	bl	80037f0 <xTraceEventCreate2>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	2205      	movs	r2, #5
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	2030      	movs	r0, #48	@ 0x30
 8001f92:	f001 fbb5 	bl	8003700 <xTraceEventCreate1>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <xTaskPriorityDisinherit+0x130>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d903      	bls.n	8001faa <xTaskPriorityDisinherit+0xaa>
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa6:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <xTaskPriorityDisinherit+0x130>)
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fae:	4921      	ldr	r1, [pc, #132]	@ (8002034 <xTaskPriorityDisinherit+0x134>)
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	189b      	adds	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	18cb      	adds	r3, r1, r3
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	3204      	adds	r2, #4
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1d1a      	adds	r2, r3, #4
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	189b      	adds	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <xTaskPriorityDisinherit+0x134>)
 8001fee:	189a      	adds	r2, r3, r2
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff8:	490e      	ldr	r1, [pc, #56]	@ (8002034 <xTaskPriorityDisinherit+0x134>)
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	585b      	ldr	r3, [r3, r1]
 8002004:	1c58      	adds	r0, r3, #1
 8002006:	490b      	ldr	r1, [pc, #44]	@ (8002034 <xTaskPriorityDisinherit+0x134>)
 8002008:	0013      	movs	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	189b      	adds	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002016:	697b      	ldr	r3, [r7, #20]
    }
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000078 	.word	0x20000078
 8002024:	00001048 	.word	0x00001048
 8002028:	0800596c 	.word	0x0800596c
 800202c:	00001049 	.word	0x00001049
 8002030:	2000012c 	.word	0x2000012c
 8002034:	2000007c 	.word	0x2000007c

08002038 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <prvAddCurrentTaskToDelayedList+0x74>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <prvAddCurrentTaskToDelayedList+0x78>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3304      	adds	r3, #4
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe f945 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	18d3      	adds	r3, r2, r3
 800205a:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <prvAddCurrentTaskToDelayedList+0x78>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d209      	bcs.n	8002080 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	0019      	movs	r1, r3
 8002078:	0010      	movs	r0, r2
 800207a:	f7fe f8fa 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800207e:	e010      	b.n	80020a2 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <prvAddCurrentTaskToDelayedList+0x80>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7fe f8f0 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <prvAddCurrentTaskToDelayedList+0x84>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d202      	bcs.n	80020a2 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <prvAddCurrentTaskToDelayedList+0x84>)
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	20000128 	.word	0x20000128
 80020b0:	20000078 	.word	0x20000078
 80020b4:	2000010c 	.word	0x2000010c
 80020b8:	20000108 	.word	0x20000108
 80020bc:	20000144 	.word	0x20000144

080020c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80020ca:	f000 fa41 	bl	8002550 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <xTimerCreateTimerTask+0x50>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80020d6:	490f      	ldr	r1, [pc, #60]	@ (8002114 <xTimerCreateTimerTask+0x54>)
 80020d8:	480f      	ldr	r0, [pc, #60]	@ (8002118 <xTimerCreateTimerTask+0x58>)
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <xTimerCreateTimerTask+0x5c>)
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2303      	movs	r3, #3
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	f7ff f824 	bl	8001132 <xTaskCreate>
 80020ea:	0003      	movs	r3, r0
 80020ec:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <xTimerCreateTimerTask+0x44>
 80020f4:	231a      	movs	r3, #26
 80020f6:	33ff      	adds	r3, #255	@ 0xff
 80020f8:	001a      	movs	r2, r3
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <xTimerCreateTimerTask+0x60>)
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f002 fe30 	bl	8004d64 <vAssertCalled>
        return xReturn;
 8002104:	687b      	ldr	r3, [r7, #4]
    }
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	20000180 	.word	0x20000180
 8002114:	08005988 	.word	0x08005988
 8002118:	080021cd 	.word	0x080021cd
 800211c:	20000184 	.word	0x20000184
 8002120:	08005990 	.word	0x08005990

08002124 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002130:	e009      	b.n	8002146 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	0010      	movs	r0, r2
 8002144:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	18d1      	adds	r1, r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f8da 	bl	800230c <prvInsertTimerInActiveList>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d1ea      	bne.n	8002132 <prvReloadTimer+0xe>
        }
    }
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <prvProcessExpiredTimer+0x60>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3304      	adds	r3, #4
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe f8ac 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2228      	movs	r2, #40	@ 0x28
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	001a      	movs	r2, r3
 800218e:	2304      	movs	r3, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d006      	beq.n	80021a2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff ffc2 	bl	8002124 <prvReloadTimer>
 80021a0:	e008      	b.n	80021b4 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2228      	movs	r2, #40	@ 0x28
 80021a6:	5c9b      	ldrb	r3, [r3, r2]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4393      	bics	r3, r2
 80021ac:	b2d9      	uxtb	r1, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2228      	movs	r2, #40	@ 0x28
 80021b2:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	0010      	movs	r0, r2
 80021bc:	4798      	blx	r3
    }
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	20000178 	.word	0x20000178

080021cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021d4:	2308      	movs	r3, #8
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f855 	bl	8002288 <prvGetNextExpireTime>
 80021de:	0003      	movs	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f805 	bl	80021f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80021ee:	f000 f8cf 	bl	8002390 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	e7ee      	b.n	80021d4 <prvTimerTask+0x8>
	...

080021f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002202:	f7ff f99b 	bl	800153c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002206:	2308      	movs	r3, #8
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f85e 	bl	80022cc <prvSampleTimeNow>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12b      	bne.n	8002272 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <prvProcessTimerOrBlockTask+0x42>
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d808      	bhi.n	800223a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002228:	f7ff f994 	bl	8001554 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff ff98 	bl	8002168 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002238:	e01d      	b.n	8002276 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <prvProcessTimerOrBlockTask+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <prvProcessTimerOrBlockTask+0x56>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <prvProcessTimerOrBlockTask+0x58>
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <prvProcessTimerOrBlockTask+0x8c>)
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	0019      	movs	r1, r3
 8002260:	f7fe ff34 	bl	80010cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002264:	f7ff f976 	bl	8001554 <xTaskResumeAll>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d104      	bne.n	8002276 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 800226c:	f000 fa38 	bl	80026e0 <vPortYield>
    }
 8002270:	e001      	b.n	8002276 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002272:	f7ff f96f 	bl	8001554 <xTaskResumeAll>
    }
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	2000017c 	.word	0x2000017c
 8002284:	20000180 	.word	0x20000180

08002288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <prvGetNextExpireTime+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <prvGetNextExpireTime+0x16>
 800229a:	2201      	movs	r2, #1
 800229c:	e000      	b.n	80022a0 <prvGetNextExpireTime+0x18>
 800229e:	2200      	movs	r2, #0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <prvGetNextExpireTime+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e001      	b.n	80022bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80022bc:	68fb      	ldr	r3, [r7, #12]
    }
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	20000178 	.word	0x20000178

080022cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80022d4:	f7ff fa34 	bl	8001740 <xTaskGetTickCount>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <prvSampleTimeNow+0x3c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d205      	bcs.n	80022f2 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80022e6:	f000 f90b 	bl	8002500 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e002      	b.n	80022f8 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <prvSampleTimeNow+0x3c>)
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80022fe:	68fb      	ldr	r3, [r7, #12]
    }
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000188 	.word	0x20000188

0800230c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d812      	bhi.n	8002358 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	429a      	cmp	r2, r3
 800233e:	d302      	bcc.n	8002346 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e01b      	b.n	800237e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <prvInsertTimerInActiveList+0x7c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3304      	adds	r3, #4
 800234e:	0019      	movs	r1, r3
 8002350:	0010      	movs	r0, r2
 8002352:	f7fd ff8e 	bl	8000272 <vListInsert>
 8002356:	e012      	b.n	800237e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d206      	bcs.n	800236e <prvInsertTimerInActiveList+0x62>
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002368:	2301      	movs	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e007      	b.n	800237e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <prvInsertTimerInActiveList+0x80>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3304      	adds	r3, #4
 8002376:	0019      	movs	r1, r3
 8002378:	0010      	movs	r0, r2
 800237a:	f7fd ff7a 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800237e:	697b      	ldr	r3, [r7, #20]
    }
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000017c 	.word	0x2000017c
 800238c:	20000178 	.word	0x20000178

08002390 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002396:	e09b      	b.n	80024d0 <prvProcessReceivedCommands+0x140>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da00      	bge.n	80023a2 <prvProcessReceivedCommands+0x12>
 80023a0:	e096      	b.n	80024d0 <prvProcessReceivedCommands+0x140>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3304      	adds	r3, #4
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fd ff92 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023ba:	003b      	movs	r3, r7
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff85 	bl	80022cc <prvSampleTimeNow>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b09      	cmp	r3, #9
 80023cc:	d900      	bls.n	80023d0 <prvProcessReceivedCommands+0x40>
 80023ce:	e07c      	b.n	80024ca <prvProcessReceivedCommands+0x13a>
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <prvProcessReceivedCommands+0x160>)
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2228      	movs	r2, #40	@ 0x28
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2228      	movs	r2, #40	@ 0x28
 80023ea:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	18d1      	adds	r1, r2, r3
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff ff85 	bl	800230c <prvInsertTimerInActiveList>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d063      	beq.n	80024ce <prvProcessReceivedCommands+0x13e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2228      	movs	r2, #40	@ 0x28
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	001a      	movs	r2, r3
 800240e:	2304      	movs	r3, #4
 8002410:	4013      	ands	r3, r2
 8002412:	d00a      	beq.n	800242a <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	18d1      	adds	r1, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff fe7e 	bl	8002124 <prvReloadTimer>
 8002428:	e008      	b.n	800243c <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2228      	movs	r2, #40	@ 0x28
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	2201      	movs	r2, #1
 8002432:	4393      	bics	r3, r2
 8002434:	b2d9      	uxtb	r1, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2228      	movs	r2, #40	@ 0x28
 800243a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	0010      	movs	r0, r2
 8002444:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002446:	e042      	b.n	80024ce <prvProcessReceivedCommands+0x13e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2228      	movs	r2, #40	@ 0x28
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	2201      	movs	r2, #1
 8002450:	4393      	bics	r3, r2
 8002452:	b2d9      	uxtb	r1, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2228      	movs	r2, #40	@ 0x28
 8002458:	5499      	strb	r1, [r3, r2]
                        break;
 800245a:	e039      	b.n	80024d0 <prvProcessReceivedCommands+0x140>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2228      	movs	r2, #40	@ 0x28
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	2201      	movs	r2, #1
 8002464:	4313      	orrs	r3, r2
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2228      	movs	r2, #40	@ 0x28
 800246c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <prvProcessReceivedCommands+0xfa>
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <prvProcessReceivedCommands+0x164>)
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <prvProcessReceivedCommands+0x168>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f002 fc6d 	bl	8004d64 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff38 	bl	800230c <prvInsertTimerInActiveList>
                        break;
 800249c:	e018      	b.n	80024d0 <prvProcessReceivedCommands+0x140>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2228      	movs	r2, #40	@ 0x28
 80024a2:	5c9b      	ldrb	r3, [r3, r2]
 80024a4:	001a      	movs	r2, r3
 80024a6:	2302      	movs	r3, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d104      	bne.n	80024b6 <prvProcessReceivedCommands+0x126>
                            {
                                vPortFree( pxTimer );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 fa2e 	bl	8002910 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80024b4:	e00c      	b.n	80024d0 <prvProcessReceivedCommands+0x140>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2228      	movs	r2, #40	@ 0x28
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	2201      	movs	r2, #1
 80024be:	4393      	bics	r3, r2
 80024c0:	b2d9      	uxtb	r1, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2228      	movs	r2, #40	@ 0x28
 80024c6:	5499      	strb	r1, [r3, r2]
                        break;
 80024c8:	e002      	b.n	80024d0 <prvProcessReceivedCommands+0x140>

                    default:
                        /* Don't expect to get here. */
                        break;
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	e000      	b.n	80024d0 <prvProcessReceivedCommands+0x140>
                        break;
 80024ce:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <prvProcessReceivedCommands+0x16c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1d39      	adds	r1, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe fb0b 	bl	8000af4 <xQueueReceive>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d000      	beq.n	80024e4 <prvProcessReceivedCommands+0x154>
 80024e2:	e759      	b.n	8002398 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b006      	add	sp, #24
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	08005d34 	.word	0x08005d34
 80024f4:	0000035e 	.word	0x0000035e
 80024f8:	08005990 	.word	0x08005990
 80024fc:	20000180 	.word	0x20000180

08002500 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002506:	e00b      	b.n	8002520 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002508:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <prvSwitchTimerLists+0x48>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002512:	2301      	movs	r3, #1
 8002514:	425a      	negs	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff fe24 	bl	8002168 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <prvSwitchTimerLists+0x48>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ee      	bne.n	8002508 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800252a:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <prvSwitchTimerLists+0x48>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <prvSwitchTimerLists+0x4c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <prvSwitchTimerLists+0x48>)
 8002536:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <prvSwitchTimerLists+0x4c>)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]
    }
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	20000178 	.word	0x20000178
 800254c:	2000017c 	.word	0x2000017c

08002550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002554:	f000 f8d4 	bl	8002700 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <prvCheckForValidListAndQueue+0x5c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d120      	bne.n	80025a2 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <prvCheckForValidListAndQueue+0x60>)
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fe5c 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <prvCheckForValidListAndQueue+0x64>)
 800256a:	0018      	movs	r0, r3
 800256c:	f7fd fe58 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <prvCheckForValidListAndQueue+0x68>)
 8002572:	4a0f      	ldr	r2, [pc, #60]	@ (80025b0 <prvCheckForValidListAndQueue+0x60>)
 8002574:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <prvCheckForValidListAndQueue+0x6c>)
 8002578:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <prvCheckForValidListAndQueue+0x64>)
 800257a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800257c:	2200      	movs	r2, #0
 800257e:	210c      	movs	r1, #12
 8002580:	200a      	movs	r0, #10
 8002582:	f7fd ff6b 	bl	800045c <xQueueGenericCreate>
 8002586:	0002      	movs	r2, r0
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <prvCheckForValidListAndQueue+0x5c>)
 800258a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800258c:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <prvCheckForValidListAndQueue+0x5c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <prvCheckForValidListAndQueue+0x5c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a09      	ldr	r2, [pc, #36]	@ (80025c0 <prvCheckForValidListAndQueue+0x70>)
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fd43 	bl	8001028 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025a2:	f000 f8bf 	bl	8002724 <vPortExitCritical>
    }
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000180 	.word	0x20000180
 80025b0:	20000150 	.word	0x20000150
 80025b4:	20000164 	.word	0x20000164
 80025b8:	20000178 	.word	0x20000178
 80025bc:	2000017c 	.word	0x2000017c
 80025c0:	080059a8 	.word	0x080059a8

080025c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3b04      	subs	r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	0452      	lsls	r2, r2, #17
 80025dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b04      	subs	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3b04      	subs	r3, #4
 80025ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80025f0:	4a08      	ldr	r2, [pc, #32]	@ (8002614 <pxPortInitialiseStack+0x50>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3b14      	subs	r3, #20
 80025fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b20      	subs	r3, #32
 8002606:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	08002619 	.word	0x08002619

08002618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <prvTaskExitError+0x30>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	d004      	beq.n	8002634 <prvTaskExitError+0x1c>
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <prvTaskExitError+0x34>)
 800262c:	21b2      	movs	r1, #178	@ 0xb2
 800262e:	0018      	movs	r0, r3
 8002630:	f002 fb98 	bl	8004d64 <vAssertCalled>
    portDISABLE_INTERRUPTS();
 8002634:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0fc      	beq.n	8002638 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000004 	.word	0x20000004
 800264c:	080059b0 	.word	0x080059b0

08002650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	0000      	movs	r0, r0
 800265c:	0000      	movs	r0, r0
	...

08002660 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <pxCurrentTCBConst2>)
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	3020      	adds	r0, #32
 8002668:	f380 8809 	msr	PSP, r0
 800266c:	2002      	movs	r0, #2
 800266e:	f380 8814 	msr	CONTROL, r0
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002678:	46ae      	mov	lr, r5
 800267a:	bc08      	pop	{r3}
 800267c:	bc04      	pop	{r2}
 800267e:	b662      	cpsie	i
 8002680:	4718      	bx	r3
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46c0      	nop			@ (mov r8, r8)

08002690 <pxCurrentTCBConst2>:
 8002690:	20000078 	.word	0x20000078
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	46c0      	nop			@ (mov r8, r8)

08002698 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <xPortStartScheduler+0x40>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <xPortStartScheduler+0x40>)
 80026a2:	21ff      	movs	r1, #255	@ 0xff
 80026a4:	0409      	lsls	r1, r1, #16
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <xPortStartScheduler+0x40>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <xPortStartScheduler+0x40>)
 80026b0:	21ff      	movs	r1, #255	@ 0xff
 80026b2:	0609      	lsls	r1, r1, #24
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80026b8:	f000 f8a0 	bl	80027fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <xPortStartScheduler+0x44>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80026c2:	f7ff ffcd 	bl	8002660 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80026c6:	f7ff f96f 	bl	80019a8 <vTaskSwitchContext>
    prvTaskExitError();
 80026ca:	f7ff ffa5 	bl	8002618 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	e000ed20 	.word	0xe000ed20
 80026dc:	20000004 	.word	0x20000004

080026e0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <vPortYield+0x1c>)
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	0552      	lsls	r2, r2, #21
 80026ea:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80026ec:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80026f0:	f3bf 8f6f 	isb	sy
}
 80026f4:	46c0      	nop			@ (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002704:	b672      	cpsid	i
    uxCriticalNesting++;
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <vPortEnterCritical+0x20>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <vPortEnterCritical+0x20>)
 800270e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002710:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002714:	f3bf 8f6f 	isb	sy
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	20000004 	.word	0x20000004

08002724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <vPortExitCritical+0x38>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <vPortExitCritical+0x1c>
 8002730:	2326      	movs	r3, #38	@ 0x26
 8002732:	33ff      	adds	r3, #255	@ 0xff
 8002734:	001a      	movs	r2, r3
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <vPortExitCritical+0x3c>)
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f002 fb12 	bl	8004d64 <vAssertCalled>
    uxCriticalNesting--;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <vPortExitCritical+0x38>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <vPortExitCritical+0x38>)
 8002748:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800274a:	4b04      	ldr	r3, [pc, #16]	@ (800275c <vPortExitCritical+0x38>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <vPortExitCritical+0x30>
    {
        portENABLE_INTERRUPTS();
 8002752:	b662      	cpsie	i
    }
}
 8002754:	46c0      	nop			@ (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	20000004 	.word	0x20000004
 8002760:	080059b0 	.word	0x080059b0

08002764 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002764:	f3ef 8010 	mrs	r0, PRIMASK
 8002768:	b672      	cpsid	i
 800276a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	0018      	movs	r0, r3

08002770 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002770:	f380 8810 	msr	PRIMASK, r0
 8002774:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002776:	46c0      	nop			@ (mov r8, r8)
	...

08002780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002780:	f3ef 8009 	mrs	r0, PSP
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <pxCurrentTCBConst>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	3820      	subs	r0, #32
 800278a:	6010      	str	r0, [r2, #0]
 800278c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800278e:	4644      	mov	r4, r8
 8002790:	464d      	mov	r5, r9
 8002792:	4656      	mov	r6, sl
 8002794:	465f      	mov	r7, fp
 8002796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002798:	b508      	push	{r3, lr}
 800279a:	b672      	cpsid	i
 800279c:	f7ff f904 	bl	80019a8 <vTaskSwitchContext>
 80027a0:	b662      	cpsie	i
 80027a2:	bc0c      	pop	{r2, r3}
 80027a4:	6811      	ldr	r1, [r2, #0]
 80027a6:	6808      	ldr	r0, [r1, #0]
 80027a8:	3010      	adds	r0, #16
 80027aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80027ac:	46a0      	mov	r8, r4
 80027ae:	46a9      	mov	r9, r5
 80027b0:	46b2      	mov	sl, r6
 80027b2:	46bb      	mov	fp, r7
 80027b4:	f380 8809 	msr	PSP, r0
 80027b8:	3820      	subs	r0, #32
 80027ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80027bc:	4718      	bx	r3
 80027be:	46c0      	nop			@ (mov r8, r8)

080027c0 <pxCurrentTCBConst>:
 80027c0:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	46c0      	nop			@ (mov r8, r8)

080027c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80027ce:	f7ff ffc9 	bl	8002764 <ulSetInterruptMaskFromISR>
 80027d2:	0003      	movs	r3, r0
 80027d4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80027d6:	f7fe ffcb 	bl	8001770 <xTaskIncrementTick>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d003      	beq.n	80027e6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <SysTick_Handler+0x30>)
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	0552      	lsls	r2, r2, #21
 80027e4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ffc1 	bl	8002770 <vClearInterruptMaskFromISR>
}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	e000ed04 	.word	0xe000ed04

080027fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <vPortSetupTimerInterrupt+0x34>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002806:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <vPortSetupTimerInterrupt+0x38>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <vPortSetupTimerInterrupt+0x3c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2164      	movs	r1, #100	@ 0x64
 8002812:	0018      	movs	r0, r3
 8002814:	f7fd fc78 	bl	8000108 <__udivsi3>
 8002818:	0003      	movs	r3, r0
 800281a:	001a      	movs	r2, r3
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <vPortSetupTimerInterrupt+0x40>)
 800281e:	3a01      	subs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002822:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <vPortSetupTimerInterrupt+0x34>)
 8002824:	2207      	movs	r2, #7
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	e000e010 	.word	0xe000e010
 8002834:	e000e018 	.word	0xe000e018
 8002838:	20000008 	.word	0x20000008
 800283c:	e000e014 	.word	0xe000e014

08002840 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2207      	movs	r2, #7
 8002850:	4013      	ands	r3, r2
 8002852:	d00e      	beq.n	8002872 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2207      	movs	r2, #7
 8002858:	4393      	bics	r3, r2
 800285a:	3308      	adds	r3, #8
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d205      	bcs.n	800286e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2207      	movs	r2, #7
 8002866:	4393      	bics	r3, r2
 8002868:	3308      	adds	r3, #8
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	e001      	b.n	8002872 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002872:	f7fe fe63 	bl	800153c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <pvPortMalloc+0xb8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800287e:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <pvPortMalloc+0xbc>)
 8002880:	2207      	movs	r2, #7
 8002882:	4393      	bics	r3, r2
 8002884:	001a      	movs	r2, r3
 8002886:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <pvPortMalloc+0xb8>)
 8002888:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01a      	beq.n	80028c6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <pvPortMalloc+0xc0>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002898:	4a1a      	ldr	r2, [pc, #104]	@ (8002904 <pvPortMalloc+0xc4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d813      	bhi.n	80028c6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800289e:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <pvPortMalloc+0xc0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	18d2      	adds	r2, r2, r3
 80028a6:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <pvPortMalloc+0xc0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90b      	bls.n	80028c6 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <pvPortMalloc+0xb8>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <pvPortMalloc+0xc0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	18d3      	adds	r3, r2, r3
 80028b8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <pvPortMalloc+0xc0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	18d2      	adds	r2, r2, r3
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <pvPortMalloc+0xc0>)
 80028c4:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <pvPortMalloc+0xc8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <pvPortMalloc+0xa8>
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <pvPortMalloc+0xcc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <pvPortMalloc+0xa8>
 80028da:	f001 fb87 	bl	8003fec <xTraceKernelPortGetSystemHeapHandle>
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0019      	movs	r1, r3
 80028e4:	f001 fa9f 	bl	8003e26 <xTraceHeapAlloc>
    }
    ( void ) xTaskResumeAll();
 80028e8:	f7fe fe34 	bl	8001554 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	20001d90 	.word	0x20001d90
 80028fc:	20000193 	.word	0x20000193
 8002900:	20001d8c 	.word	0x20001d8c
 8002904:	00001bf7 	.word	0x00001bf7
 8002908:	20003000 	.word	0x20003000
 800290c:	20002ff8 	.word	0x20002ff8

08002910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <vPortFree+0x18>
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <vPortFree+0x20>)
 8002920:	218a      	movs	r1, #138	@ 0x8a
 8002922:	0018      	movs	r0, r3
 8002924:	f002 fa1e 	bl	8004d64 <vAssertCalled>
}
 8002928:	46c0      	nop			@ (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}
 8002930:	080059d8 	.word	0x080059d8

08002934 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <xPortGetFreeHeapSize+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a03      	ldr	r2, [pc, #12]	@ (800294c <xPortGetFreeHeapSize+0x18>)
 800293e:	1ad3      	subs	r3, r2, r3
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	20001d8c 	.word	0x20001d8c
 800294c:	00001bf8 	.word	0x00001bf8

08002950 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002956:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <_DoInit+0x9c>)
 8002958:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	22a8      	movs	r2, #168	@ 0xa8
 800295e:	2100      	movs	r1, #0
 8002960:	0018      	movs	r0, r3
 8002962:	f002 ffb5 	bl	80058d0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2203      	movs	r2, #3
 800296a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2203      	movs	r2, #3
 8002970:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <_DoInit+0xa0>)
 8002976:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <_DoInit+0xa4>)
 800297c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2280      	movs	r2, #128	@ 0x80
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4a15      	ldr	r2, [pc, #84]	@ (80029f0 <_DoInit+0xa0>)
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <_DoInit+0xa8>)
 80029a2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	e00c      	b.n	80029dc <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	220f      	movs	r2, #15
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	4a0c      	ldr	r2, [pc, #48]	@ (80029fc <_DoInit+0xac>)
 80029ca:	5cd1      	ldrb	r1, [r2, r3]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	d9ef      	bls.n	80029c2 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20001d94 	.word	0x20001d94
 80029f0:	08005a00 	.word	0x08005a00
 80029f4:	20001e3c 	.word	0x20001e3c
 80029f8:	2000223c 	.word	0x2000223c
 80029fc:	08005d5c 	.word	0x08005d5c

08002a00 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d905      	bls.n	8002a30 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	e007      	b.n	8002a40 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69b9      	ldr	r1, [r7, #24]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	1acb      	subs	r3, r1, r3
 8002a3a:	18d3      	adds	r3, r2, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d900      	bls.n	8002a50 <_WriteBlocking+0x50>
 8002a4e:	0013      	movs	r3, r2
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d900      	bls.n	8002a5c <_WriteBlocking+0x5c>
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	18d3      	adds	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 ff5a 	bl	8005928 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	18d3      	adds	r3, r2, r3
 8002a7a:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	18d3      	adds	r3, r2, r3
 8002a82:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d101      	bne.n	8002aa2 <_WriteBlocking+0xa2>
      WrOff = 0u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1b3      	bne.n	8002a16 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b00a      	add	sp, #40	@ 0x28
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d910      	bls.n	8002afe <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	18d3      	adds	r3, r2, r3
 8002ae4:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f002 ff1b 	bl	8005928 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	18d2      	adds	r2, r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002afc:	e01e      	b.n	8002b3c <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f002 ff08 	bl	8005928 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	18d1      	adds	r1, r2, r3
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 fef9 	bl	8005928 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b008      	add	sp, #32
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d808      	bhi.n	8002b72 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e004      	b.n	8002b7c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002b7c:	697b      	ldr	r3, [r7, #20]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b006      	add	sp, #24
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	@ 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002b94:	4b40      	ldr	r3, [pc, #256]	@ (8002c98 <SEGGER_RTT_ReadNoLock+0x110>)
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b53      	cmp	r3, #83	@ 0x53
 8002ba0:	d001      	beq.n	8002ba6 <SEGGER_RTT_ReadNoLock+0x1e>
 8002ba2:	f7ff fed5 	bl	8002950 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	0013      	movs	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	3360      	adds	r3, #96	@ 0x60
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <SEGGER_RTT_ReadNoLock+0x110>)
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d92c      	bls.n	8002c30 <SEGGER_RTT_ReadNoLock+0xa8>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d900      	bls.n	8002bea <SEGGER_RTT_ReadNoLock+0x62>
 8002be8:	0013      	movs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	18d3      	adds	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f002 fe93 	bl	8005928 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	18d3      	adds	r3, r2, r3
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	18d3      	adds	r3, r2, r3
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d101      	bne.n	8002c30 <SEGGER_RTT_ReadNoLock+0xa8>
      RdOff = 0u;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d900      	bls.n	8002c42 <SEGGER_RTT_ReadNoLock+0xba>
 8002c40:	0013      	movs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <SEGGER_RTT_ReadNoLock+0xf8>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6939      	ldr	r1, [r7, #16]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f002 fe64 	bl	8005928 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	18d3      	adds	r3, r2, r3
 8002c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <SEGGER_RTT_ReadNoLock+0x104>
    pRing->RdOff = RdOff;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c8a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b00c      	add	sp, #48	@ 0x30
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	20001d94 	.word	0x20001d94

08002c9c <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	2101      	movs	r1, #1
 8002cae:	f381 8810 	msr	PRIMASK, r1
 8002cb2:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff ff64 	bl	8002b88 <SEGGER_RTT_ReadNoLock>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f383 8810 	msr	PRIMASK, r3
  //
  return NumBytesRead;
 8002cca:	693b      	ldr	r3, [r7, #16]
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	0013      	movs	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	189b      	adds	r3, r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <SEGGER_RTT_WriteNoLock+0xac>)
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d02e      	beq.n	8002d5c <SEGGER_RTT_WriteNoLock+0x88>
 8002cfe:	d836      	bhi.n	8002d6e <SEGGER_RTT_WriteNoLock+0x9a>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <SEGGER_RTT_WriteNoLock+0x36>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d016      	beq.n	8002d36 <SEGGER_RTT_WriteNoLock+0x62>
 8002d08:	e031      	b.n	8002d6e <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff ff19 	bl	8002b44 <_GetAvailWriteSpace>
 8002d12:	0003      	movs	r3, r0
 8002d14:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d202      	bcs.n	8002d24 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002d22:	e027      	b.n	8002d74 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fec2 	bl	8002ab8 <_WriteNoCheck>
    break;
 8002d34:	e01e      	b.n	8002d74 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff ff03 	bl	8002b44 <_GetAvailWriteSpace>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d900      	bls.n	8002d4c <SEGGER_RTT_WriteNoLock+0x78>
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	69b9      	ldr	r1, [r7, #24]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff feaf 	bl	8002ab8 <_WriteNoCheck>
    break;
 8002d5a:	e00b      	b.n	8002d74 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff fe4c 	bl	8002a00 <_WriteBlocking>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	61fb      	str	r3, [r7, #28]
    break;
 8002d6c:	e002      	b.n	8002d74 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    break;
 8002d72:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8002d74:	69fb      	ldr	r3, [r7, #28]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b008      	add	sp, #32
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	20001d94 	.word	0x20001d94

08002d84 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <SEGGER_RTT_Write+0x4c>)
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b53      	cmp	r3, #83	@ 0x53
 8002d9c:	d001      	beq.n	8002da2 <SEGGER_RTT_Write+0x1e>
 8002d9e:	f7ff fdd7 	bl	8002950 <_DoInit>
  SEGGER_RTT_LOCK();
 8002da2:	f3ef 8310 	mrs	r3, PRIMASK
 8002da6:	2101      	movs	r1, #1
 8002da8:	f381 8810 	msr	PRIMASK, r1
 8002dac:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff ff8d 	bl	8002cd4 <SEGGER_RTT_WriteNoLock>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b008      	add	sp, #32
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	20001d94 	.word	0x20001d94

08002dd4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b53      	cmp	r3, #83	@ 0x53
 8002dee:	d001      	beq.n	8002df4 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8002df0:	f7ff fdae 	bl	8002950 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002df4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8002df6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d829      	bhi.n	8002e52 <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	2101      	movs	r1, #1
 8002e04:	f381 8810 	msr	PRIMASK, r1
 8002e08:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	0013      	movs	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00e      	beq.n	8002e40 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e44:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e002      	b.n	8002e58 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	425b      	negs	r3, r3
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b00a      	add	sp, #40	@ 0x28
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	20001d94 	.word	0x20001d94

08002e68 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b53      	cmp	r3, #83	@ 0x53
 8002e82:	d001      	beq.n	8002e88 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002e84:	f7ff fd64 	bl	8002950 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002e8a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d829      	bhi.n	8002ee6 <SEGGER_RTT_ConfigDownBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8002e92:	f3ef 8310 	mrs	r3, PRIMASK
 8002e96:	2101      	movs	r1, #1
 8002e98:	f381 8810 	msr	PRIMASK, r1
 8002e9c:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	0013      	movs	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	3360      	adds	r3, #96	@ 0x60
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00e      	beq.n	8002ed4 <SEGGER_RTT_ConfigDownBuffer+0x6c>
      pDown->sName        = sName;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed8:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee4:	e002      	b.n	8002eec <SEGGER_RTT_ConfigDownBuffer+0x84>
  } else {
    r = -1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	425b      	negs	r3, r3
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b00a      	add	sp, #40	@ 0x28
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	20001d94 	.word	0x20001d94

08002efc <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e003      	b.n	8002f16 <xTraceStreamPortInitialize+0x1a>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <xTraceStreamPortInitialize+0x24>)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
#else
	return TRC_SUCCESS;
 8002f14:	2300      	movs	r3, #0
#endif
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	2000224c 	.word	0x2000224c

08002f24 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <xTraceStreamPortOnEnable+0x54>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0018      	movs	r0, r3
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4911      	ldr	r1, [pc, #68]	@ (8002f7c <xTraceStreamPortOnEnable+0x58>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	9200      	str	r2, [sp, #0]
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7ff ff48 	bl	8002dd4 <SEGGER_RTT_ConfigUpBuffer>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	da01      	bge.n	8002f4c <xTraceStreamPortOnEnable+0x28>
	{
		return TRC_FAIL;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e010      	b.n	8002f6e <xTraceStreamPortOnEnable+0x4a>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <xTraceStreamPortOnEnable+0x54>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	189a      	adds	r2, r3, r2
 8002f56:	490a      	ldr	r1, [pc, #40]	@ (8002f80 <xTraceStreamPortOnEnable+0x5c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff ff82 	bl	8002e68 <SEGGER_RTT_ConfigDownBuffer>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	da01      	bge.n	8002f6c <xTraceStreamPortOnEnable+0x48>
	{
		return TRC_FAIL;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <xTraceStreamPortOnEnable+0x4a>
	}

	return TRC_SUCCESS;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	2000224c 	.word	0x2000224c
 8002f7c:	08005a0c 	.word	0x08005a0c
 8002f80:	08005a14 	.word	0x08005a14

08002f84 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <xTraceCounterInitialize+0x30>)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
	
	pxCounterData->xCallbackFunction = 0;
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <xTraceCounterInitialize+0x30>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <xTraceCounterInitialize+0x34>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	03d2      	lsls	r2, r2, #15
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <xTraceCounterInitialize+0x34>)
 8002fa6:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	20002250 	.word	0x20002250
 8002fb8:	20003000 	.word	0x20003000

08002fbc <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <xTraceDiagnosticsInitialize+0x44>)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e008      	b.n	8002fe2 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <xTraceDiagnosticsInitialize+0x44>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	2100      	movs	r1, #0
 8002fda:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d9f3      	bls.n	8002fd0 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <xTraceDiagnosticsInitialize+0x48>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <xTraceDiagnosticsInitialize+0x48>)
 8002ff2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	20002254 	.word	0x20002254
 8003004:	20003000 	.word	0x20003000

08003008 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	0002      	movs	r2, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8003016:	4b09      	ldr	r3, [pc, #36]	@ (800303c <xTraceDiagnosticsAdd+0x34>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1dfa      	adds	r2, r7, #7
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	58d0      	ldr	r0, [r2, r3]
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <xTraceDiagnosticsAdd+0x34>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	1dfa      	adds	r2, r7, #7
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	1841      	adds	r1, r0, r1
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	50d1      	str	r1, [r2, r3]

	return TRC_SUCCESS;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20002254 	.word	0x20002254

08003040 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	0002      	movs	r2, r0
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	701a      	strb	r2, [r3, #0]
	return xTraceDiagnosticsAdd(xType, 1);
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff ffd8 	bl	8003008 <xTraceDiagnosticsAdd>
 8003058:	0003      	movs	r3, r0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	0002      	movs	r2, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <xTraceDiagnosticsSetIfHigher+0x38>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1dfa      	adds	r2, r7, #7
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	58d3      	ldr	r3, [r2, r3]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	dd06      	ble.n	8003092 <xTraceDiagnosticsSetIfHigher+0x2e>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <xTraceDiagnosticsSetIfHigher+0x38>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1dfa      	adds	r2, r7, #7
 800308a:	7812      	ldrb	r2, [r2, #0]
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	50d1      	str	r1, [r2, r3]
	}

	return TRC_SUCCESS;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20002254 	.word	0x20002254

080030a0 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 80030a4:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <xTraceDiagnosticsCheckStatus+0x7c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	4013      	ands	r3, r2
 80030ac:	d101      	bne.n	80030b2 <xTraceDiagnosticsCheckStatus+0x12>
	{
		return TRC_FAIL;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e030      	b.n	8003114 <xTraceDiagnosticsCheckStatus+0x74>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 80030b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dd06      	ble.n	80030ca <xTraceDiagnosticsCheckStatus+0x2a>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 80030bc:	2008      	movs	r0, #8
 80030be:	f000 f9ef 	bl	80034a0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b0e      	cmp	r3, #14
 80030d2:	dd06      	ble.n	80030e2 <xTraceDiagnosticsCheckStatus+0x42>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 80030d4:	2009      	movs	r0, #9
 80030d6:	f000 f9e3 	bl	80034a0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dd06      	ble.n	80030fa <xTraceDiagnosticsCheckStatus+0x5a>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 80030ec:	200a      	movs	r0, #10
 80030ee:	f000 f9d7 	bl	80034a0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	dd06      	ble.n	8003112 <xTraceDiagnosticsCheckStatus+0x72>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8003104:	200e      	movs	r0, #14
 8003106:	f000 f9cb 	bl	80034a0 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <xTraceDiagnosticsCheckStatus+0x80>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8003112:	2300      	movs	r3, #0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	20003000 	.word	0x20003000
 8003120:	20002254 	.word	0x20002254

08003124 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <xTraceEntryIndexTableInitialize+0x1c>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
	
	return prvEntryIndexInitialize();
 8003132:	f000 f941 	bl	80033b8 <prvEntryIndexInitialize>
 8003136:	0003      	movs	r3, r0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000225c 	.word	0x2000225c

08003144 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 800314c:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 8003152:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 800315a:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2210      	movs	r2, #16
 8003160:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 8003162:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2203      	movs	r2, #3
 8003168:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e030      	b.n	80031d2 <xTraceEntryTableInitialize+0x8e>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	0013      	movs	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	189b      	adds	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	18cb      	adds	r3, r1, r3
 8003180:	330c      	adds	r3, #12
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	e010      	b.n	80031ae <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 800318c:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	0013      	movs	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	189b      	adds	r3, r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	189b      	adds	r3, r3, r2
 800319c:	3302      	adds	r3, #2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	18cb      	adds	r3, r1, r3
 80031a2:	3308      	adds	r3, #8
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d9eb      	bls.n	800318c <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <xTraceEntryTableInitialize+0xac>)
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	2020      	movs	r0, #32
 80031bc:	0013      	movs	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	18cb      	adds	r3, r1, r3
 80031c6:	181b      	adds	r3, r3, r0
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d9cb      	bls.n	8003170 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <xTraceEntryTableInitialize+0xb0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	431a      	orrs	r2, r3
 80031e0:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <xTraceEntryTableInitialize+0xb0>)
 80031e2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	20002258 	.word	0x20002258
 80031f4:	20003000 	.word	0x20003000

080031f8 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8003200:	4b2c      	ldr	r3, [pc, #176]	@ (80032b4 <xTraceEntryCreate+0xbc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d101      	bne.n	800320e <xTraceEntryCreate+0x16>
	{
		return TRC_FAIL;
 800320a:	2301      	movs	r3, #1
 800320c:	e04d      	b.n	80032aa <xTraceEntryCreate+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	617b      	str	r3, [r7, #20]
  return(result);
 8003214:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	2301      	movs	r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			@ (mov r8, r8)

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 8003224:	230b      	movs	r3, #11
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f8e5 	bl	80033f8 <prvEntryIndexTake>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d00a      	beq.n	8003248 <xTraceEntryCreate+0x50>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8003232:	2001      	movs	r0, #1
 8003234:	f7ff ff04 	bl	8003040 <xTraceDiagnosticsIncrease>
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			@ (mov r8, r8)

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8003244:	2301      	movs	r3, #1
 8003246:	e030      	b.n	80032aa <xTraceEntryCreate+0xb2>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 8003248:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <xTraceEntryCreate+0xc0>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	230b      	movs	r3, #11
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	0019      	movs	r1, r3
 8003254:	000b      	movs	r3, r1
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	185b      	adds	r3, r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3308      	adds	r3, #8
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	3304      	adds	r3, #4
 8003262:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e009      	b.n	8003284 <xTraceEntryCreate+0x8c>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	18d3      	adds	r3, r2, r3
 8003278:	3304      	adds	r3, #4
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	2b02      	cmp	r3, #2
 8003288:	d9f2      	bls.n	8003270 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2200      	movs	r2, #0
 8003294:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b00a      	add	sp, #40	@ 0x28
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	20003000 	.word	0x20003000
 80032b8:	20002258 	.word	0x20002258

080032bc <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e017      	b.n	80032fc <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 80032cc:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <xTraceEntryFind+0x50>)
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	0013      	movs	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	3308      	adds	r3, #8
 80032dc:	18cb      	adds	r3, r1, r3
 80032de:	3304      	adds	r3, #4
 80032e0:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d104      	bne.n	80032f6 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e006      	b.n	8003304 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	d9e4      	bls.n	80032cc <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 8003302:	2301      	movs	r3, #1
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b004      	add	sp, #16
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20002258 	.word	0x20002258

08003310 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003322:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <xTraceEntrySetSymbol+0x50>)
 8003324:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0019      	movs	r1, r3
 800332e:	2000      	movs	r0, #0
 8003330:	f7ff fe98 	bl	8003064 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b0d      	cmp	r3, #13
 8003338:	d902      	bls.n	8003340 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800333a:	230e      	movs	r3, #14
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	e002      	b.n	8003346 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3314      	adds	r3, #20
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	0018      	movs	r0, r3
 8003350:	f002 faea 	bl	8005928 <memcpy>

	return TRC_SUCCESS;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	08005a1c 	.word	0x08005a1c

08003364 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <xTraceEntryGetCount+0x20>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2210      	movs	r2, #16
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800337a:	2300      	movs	r3, #0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000225c 	.word	0x2000225c

08003388 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 8003392:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <xTraceEntryGetAtIndex+0x2c>)
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	0013      	movs	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	189b      	adds	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	3308      	adds	r3, #8
 80033a2:	18cb      	adds	r3, r1, r3
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20002258 	.word	0x20002258

080033b8 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	e00a      	b.n	80033da <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <prvEntryIndexInitialize+0x3c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	b2d9      	uxtb	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	1c0a      	adds	r2, r1, #0
 80033d2:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d9f1      	bls.n	80033c4 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <prvEntryIndexInitialize+0x3c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2210      	movs	r2, #16
 80033e6:	611a      	str	r2, [r3, #16]

	return TRC_SUCCESS;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	2000225c 	.word	0x2000225c

080033f8 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <prvEntryIndexTake+0x60>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 800340a:	2301      	movs	r3, #1
 800340c:	e01f      	b.n	800344e <prvEntryIndexTake+0x56>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <prvEntryIndexTake+0x60>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	200f      	movs	r0, #15
 8003414:	183b      	adds	r3, r7, r0
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	701a      	strb	r2, [r3, #0]
	pxIndexTable->uiFreeIndexCount--;
 800341a:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <prvEntryIndexTake+0x60>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	3a01      	subs	r2, #1
 8003422:	611a      	str	r2, [r3, #16]

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <prvEntryIndexTake+0x60>)
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <prvEntryIndexTake+0x60>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <prvEntryIndexTake+0x60>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	5c8a      	ldrb	r2, [r1, r2]
 8003434:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <prvEntryIndexTake+0x60>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <prvEntryIndexTake+0x60>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	21ff      	movs	r1, #255	@ 0xff
 8003442:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	183a      	adds	r2, r7, r0
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 800344c:	2300      	movs	r3, #0
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	2000225c 	.word	0x2000225c

0800345c <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <xTraceErrorInitialize+0x3c>)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <xTraceErrorInitialize+0x3c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <xTraceErrorInitialize+0x3c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <xTraceErrorInitialize+0x3c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <xTraceErrorInitialize+0x40>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2220      	movs	r2, #32
 8003488:	431a      	orrs	r2, r3
 800348a:	4b04      	ldr	r3, [pc, #16]	@ (800349c <xTraceErrorInitialize+0x40>)
 800348c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20002260 	.word	0x20002260
 800349c:	20003000 	.word	0x20003000

080034a0 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <xTraceWarning+0x54>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2220      	movs	r2, #32
 80034ae:	4013      	ands	r3, r2
 80034b0:	d101      	bne.n	80034b6 <xTraceWarning+0x16>
	{
		/* If not initialized */
		return TRC_FAIL;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e019      	b.n	80034ea <xTraceWarning+0x4a>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <xTraceWarning+0x58>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	40da      	lsrs	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	2201      	movs	r2, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d10e      	bne.n	80034e8 <xTraceWarning+0x48>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <xTraceWarning+0x58>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	2201      	movs	r2, #1
 80034d6:	409a      	lsls	r2, r3
 80034d8:	4b07      	ldr	r3, [pc, #28]	@ (80034f8 <xTraceWarning+0x58>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f840 	bl	8003568 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	20003000 	.word	0x20003000
 80034f8:	20002260 	.word	0x20002260

080034fc <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <xTraceError+0x64>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2220      	movs	r2, #32
 800350a:	4013      	ands	r3, r2
 800350c:	d101      	bne.n	8003512 <xTraceError+0x16>
	{
		return TRC_FAIL;
 800350e:	2301      	movs	r3, #1
 8003510:	e021      	b.n	8003556 <xTraceError+0x5a>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8003512:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <xTraceError+0x68>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11b      	bne.n	8003554 <xTraceError+0x58>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <xTraceError+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3b01      	subs	r3, #1
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <xTraceError+0x68>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8003532:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <xTraceError+0x68>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0018      	movs	r0, r3
 800353e:	f000 f813 	bl	8003568 <prvTraceErrorPrint>
 8003542:	0003      	movs	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d103      	bne.n	8003550 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8003548:	f001 f8c2 	bl	80046d0 <xTraceDisable>
			
			return TRC_FAIL;
 800354c:	2301      	movs	r3, #1
 800354e:	e002      	b.n	8003556 <xTraceError+0x5a>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
		(void)xTraceDisable();
 8003550:	f001 f8be 	bl	80046d0 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	20003000 	.word	0x20003000
 8003564:	20002260 	.word	0x20002260

08003568 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8003570:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <prvTraceErrorPrint+0x64>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <prvTraceErrorPrint+0x2e>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 800357a:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <prvTraceErrorPrint+0x64>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	001a      	movs	r2, r3
 8003582:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <prvTraceErrorPrint+0x68>)
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f001 fa60 	bl	8004a4c <xTraceStringRegister>
 800358c:	0003      	movs	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <prvTraceErrorPrint+0x2e>
		{
			return TRC_FAIL;
 8003592:	2301      	movs	r3, #1
 8003594:	e016      	b.n	80035c4 <prvTraceErrorPrint+0x5c>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8003596:	2314      	movs	r3, #20
 8003598:	18fa      	adds	r2, r7, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0011      	movs	r1, r2
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f818 	bl	80035d4 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d009      	beq.n	80035be <prvTraceErrorPrint+0x56>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <prvTraceErrorPrint+0x5a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b02      	subs	r3, #2
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d804      	bhi.n	80035c2 <prvTraceErrorPrint+0x5a>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
		break;
 80035b8:	46c0      	nop			@ (mov r8, r8)
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e002      	b.n	80035c4 <prvTraceErrorPrint+0x5c>
			return TRC_FAIL;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <prvTraceErrorPrint+0x5c>
		return TRC_FAIL;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b006      	add	sp, #24
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20002260 	.word	0x20002260
 80035d0:	08005a20 	.word	0x08005a20

080035d4 <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b0e      	cmp	r3, #14
 80035e2:	d83f      	bhi.n	8003664 <prvTraceErrorGetDescription+0x90>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	4b23      	ldr	r3, [pc, #140]	@ (8003678 <prvTraceErrorGetDescription+0xa4>)
 80035ea:	18d3      	adds	r3, r2, r3
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	469f      	mov	pc, r3
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e03c      	b.n	800366e <prvTraceErrorGetDescription+0x9a>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	@ (800367c <prvTraceErrorGetDescription+0xa8>)
 80035f8:	601a      	str	r2, [r3, #0]
		break;
 80035fa:	e037      	b.n	800366c <prvTraceErrorGetDescription+0x98>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4a20      	ldr	r2, [pc, #128]	@ (8003680 <prvTraceErrorGetDescription+0xac>)
 8003600:	601a      	str	r2, [r3, #0]
		break;
 8003602:	e033      	b.n	800366c <prvTraceErrorGetDescription+0x98>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <prvTraceErrorGetDescription+0xb0>)
 8003608:	601a      	str	r2, [r3, #0]
		break;
 800360a:	e02f      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <prvTraceErrorGetDescription+0xb4>)
 8003610:	601a      	str	r2, [r3, #0]
		break;
 8003612:	e02b      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <prvTraceErrorGetDescription+0xb8>)
 8003618:	601a      	str	r2, [r3, #0]
		break;
 800361a:	e027      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4a1c      	ldr	r2, [pc, #112]	@ (8003690 <prvTraceErrorGetDescription+0xbc>)
 8003620:	601a      	str	r2, [r3, #0]
		break;
 8003622:	e023      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <prvTraceErrorGetDescription+0xc0>)
 8003628:	601a      	str	r2, [r3, #0]
		break;
 800362a:	e01f      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	@ (800368c <prvTraceErrorGetDescription+0xb8>)
 8003630:	601a      	str	r2, [r3, #0]
		break;
 8003632:	e01b      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <prvTraceErrorGetDescription+0xc4>)
 8003638:	601a      	str	r2, [r3, #0]
		break;
 800363a:	e017      	b.n	800366c <prvTraceErrorGetDescription+0x98>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <prvTraceErrorGetDescription+0xc8>)
 8003640:	601a      	str	r2, [r3, #0]
		break;
 8003642:	e013      	b.n	800366c <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <prvTraceErrorGetDescription+0xcc>)
 8003648:	601a      	str	r2, [r3, #0]
		break;
 800364a:	e00f      	b.n	800366c <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <prvTraceErrorGetDescription+0xd0>)
 8003650:	601a      	str	r2, [r3, #0]
		break;
 8003652:	e00b      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <prvTraceErrorGetDescription+0xd4>)
 8003658:	601a      	str	r2, [r3, #0]
		break;
 800365a:	e007      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <prvTraceErrorGetDescription+0xd8>)
 8003660:	601a      	str	r2, [r3, #0]
		break;
 8003662:	e003      	b.n	800366c <prvTraceErrorGetDescription+0x98>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <prvTraceErrorGetDescription+0xdc>)
 8003668:	601a      	str	r2, [r3, #0]
		break;
 800366a:	46c0      	nop			@ (mov r8, r8)
	}

	return TRC_SUCCESS;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b002      	add	sp, #8
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	08005d70 	.word	0x08005d70
 800367c:	08005a28 	.word	0x08005a28
 8003680:	08005a48 	.word	0x08005a48
 8003684:	08005a74 	.word	0x08005a74
 8003688:	08005a88 	.word	0x08005a88
 800368c:	08005ab4 	.word	0x08005ab4
 8003690:	08005ae0 	.word	0x08005ae0
 8003694:	08005afc 	.word	0x08005afc
 8003698:	08005b1c 	.word	0x08005b1c
 800369c:	08005b30 	.word	0x08005b30
 80036a0:	08005b48 	.word	0x08005b48
 80036a4:	08005b5c 	.word	0x08005b5c
 80036a8:	08005b78 	.word	0x08005b78
 80036ac:	08005b90 	.word	0x08005b90
 80036b0:	08005ba0 	.word	0x08005ba0

080036b4 <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 80036bc:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <xTraceEventInitialize+0x44>)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e008      	b.n	80036da <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <xTraceEventInitialize+0x44>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	00d2      	lsls	r2, r2, #3
 80036d0:	2100      	movs	r1, #0
 80036d2:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f3      	beq.n	80036c8 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <xTraceEventInitialize+0x48>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2240      	movs	r2, #64	@ 0x40
 80036e6:	431a      	orrs	r2, r3
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <xTraceEventInitialize+0x48>)
 80036ea:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20002264 	.word	0x20002264
 80036fc:	20003000 	.word	0x20003000

08003700 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8003712:	4b30      	ldr	r3, [pc, #192]	@ (80037d4 <xTraceEventCreate1+0xd4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	d004      	beq.n	8003726 <xTraceEventCreate1+0x26>
 800371c:	4b2e      	ldr	r3, [pc, #184]	@ (80037d8 <xTraceEventCreate1+0xd8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xTraceEventCreate1+0x2a>
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <xTraceEventCreate1+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372a:	f3ef 8310 	mrs	r3, PRIMASK
 800372e:	617b      	str	r3, [r7, #20]
  return(result);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <xTraceEventCreate1+0xdc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	3201      	adds	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <xTraceEventCreate1+0xe0>)
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <xTraceEventCreate1+0xe4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	230c      	movs	r3, #12
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	0192      	lsls	r2, r2, #6
 800375c:	188a      	adds	r2, r1, r2
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	0149      	lsls	r1, r1, #5
 800376a:	430a      	orrs	r2, r1
 800376c:	b292      	uxth	r2, r2
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <xTraceEventCreate1+0xdc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	b292      	uxth	r2, r2
 800377a:	805a      	strh	r2, [r3, #2]
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <xTraceEventCreate1+0xe8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	0a19      	lsrs	r1, r3, #8
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <xTraceEventCreate1+0xec>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	061a      	lsls	r2, r3, #24
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	188a      	adds	r2, r1, r2
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	4b16      	ldr	r3, [pc, #88]	@ (80037ec <xTraceEventCreate1+0xec>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <xTraceEventCreate1+0xec>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6992      	ldr	r2, [r2, #24]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <xTraceEventCreate1+0xec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	220c      	movs	r2, #12
 80037b2:	0019      	movs	r1, r3
 80037b4:	2001      	movs	r0, #1
 80037b6:	f7ff fae5 	bl	8002d84 <SEGGER_RTT_Write>
 80037ba:	0003      	movs	r3, r0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f383 8810 	msr	PRIMASK, r3
}
 80037c8:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b008      	add	sp, #32
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20003000 	.word	0x20003000
 80037d8:	20002ff8 	.word	0x20002ff8
 80037dc:	20002264 	.word	0x20002264
 80037e0:	20002274 	.word	0x20002274
 80037e4:	2000226c 	.word	0x2000226c
 80037e8:	e000e018 	.word	0xe000e018
 80037ec:	20003008 	.word	0x20003008

080037f0 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	@ 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8003804:	4b31      	ldr	r3, [pc, #196]	@ (80038cc <xTraceEventCreate2+0xdc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d004      	beq.n	8003818 <xTraceEventCreate2+0x28>
 800380e:	4b30      	ldr	r3, [pc, #192]	@ (80038d0 <xTraceEventCreate2+0xe0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <xTraceEventCreate2+0x2c>
 8003818:	2301      	movs	r3, #1
 800381a:	e053      	b.n	80038c4 <xTraceEventCreate2+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381c:	f3ef 8310 	mrs	r3, PRIMASK
 8003820:	61fb      	str	r3, [r7, #28]
  return(result);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
 8003826:	2301      	movs	r3, #1
 8003828:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <xTraceEventCreate2+0xe4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	3201      	adds	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4b26      	ldr	r3, [pc, #152]	@ (80038d8 <xTraceEventCreate2+0xe8>)
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <xTraceEventCreate2+0xec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	2314      	movs	r3, #20
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	0192      	lsls	r2, r2, #6
 800384e:	188a      	adds	r2, r1, r2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	b29a      	uxth	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	0189      	lsls	r1, r1, #6
 800385c:	430a      	orrs	r2, r1
 800385e:	b292      	uxth	r2, r2
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <xTraceEventCreate2+0xe4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	b292      	uxth	r2, r2
 800386c:	805a      	strh	r2, [r3, #2]
 800386e:	4b1c      	ldr	r3, [pc, #112]	@ (80038e0 <xTraceEventCreate2+0xf0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	0a19      	lsrs	r1, r3, #8
 8003876:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <xTraceEventCreate2+0xf4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	061a      	lsls	r2, r3, #24
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	188a      	adds	r2, r1, r2
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <xTraceEventCreate2+0xf4>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <xTraceEventCreate2+0xf4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6992      	ldr	r2, [r2, #24]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <xTraceEventCreate2+0xf4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2210      	movs	r2, #16
 80038aa:	0019      	movs	r1, r3
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7ff fa69 	bl	8002d84 <SEGGER_RTT_Write>
 80038b2:	0003      	movs	r3, r0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b00a      	add	sp, #40	@ 0x28
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20003000 	.word	0x20003000
 80038d0:	20002ff8 	.word	0x20002ff8
 80038d4:	20002264 	.word	0x20002264
 80038d8:	20002274 	.word	0x20002274
 80038dc:	2000226c 	.word	0x2000226c
 80038e0:	e000e018 	.word	0xe000e018
 80038e4:	20003008 	.word	0x20003008

080038e8 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 80038fe:	4b33      	ldr	r3, [pc, #204]	@ (80039cc <xTraceEventCreate3+0xe4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d004      	beq.n	8003912 <xTraceEventCreate3+0x2a>
 8003908:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <xTraceEventCreate3+0xe8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <xTraceEventCreate3+0x2e>
 8003912:	2301      	movs	r3, #1
 8003914:	e056      	b.n	80039c4 <xTraceEventCreate3+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003916:	f3ef 8310 	mrs	r3, PRIMASK
 800391a:	61fb      	str	r3, [r7, #28]
  return(result);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	2301      	movs	r3, #1
 8003922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <xTraceEventCreate3+0xec>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	3201      	adds	r2, #1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <xTraceEventCreate3+0xf0>)
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	4b28      	ldr	r3, [pc, #160]	@ (80039dc <xTraceEventCreate3+0xf4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	2314      	movs	r3, #20
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	0192      	lsls	r2, r2, #6
 8003948:	188a      	adds	r2, r1, r2
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	b29a      	uxth	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	21c0      	movs	r1, #192	@ 0xc0
 8003954:	0189      	lsls	r1, r1, #6
 8003956:	430a      	orrs	r2, r1
 8003958:	b292      	uxth	r2, r2
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <xTraceEventCreate3+0xec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	b292      	uxth	r2, r2
 8003966:	805a      	strh	r2, [r3, #2]
 8003968:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <xTraceEventCreate3+0xf8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	0a19      	lsrs	r1, r3, #8
 8003970:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <xTraceEventCreate3+0xfc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	061a      	lsls	r2, r3, #24
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	188a      	adds	r2, r1, r2
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	4b19      	ldr	r3, [pc, #100]	@ (80039e4 <xTraceEventCreate3+0xfc>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b18      	ldr	r3, [pc, #96]	@ (80039e4 <xTraceEventCreate3+0xfc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6992      	ldr	r2, [r2, #24]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <xTraceEventCreate3+0xfc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6852      	ldr	r2, [r2, #4]
 8003992:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2214      	movs	r2, #20
 80039aa:	0019      	movs	r1, r3
 80039ac:	2001      	movs	r0, #1
 80039ae:	f7ff f9e9 	bl	8002d84 <SEGGER_RTT_Write>
 80039b2:	0003      	movs	r3, r0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f383 8810 	msr	PRIMASK, r3
}
 80039c0:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b00a      	add	sp, #40	@ 0x28
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20003000 	.word	0x20003000
 80039d0:	20002ff8 	.word	0x20002ff8
 80039d4:	20002264 	.word	0x20002264
 80039d8:	20002274 	.word	0x20002274
 80039dc:	2000226c 	.word	0x2000226c
 80039e0:	e000e018 	.word	0xe000e018
 80039e4:	20003008 	.word	0x20003008

080039e8 <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 80039fe:	4b35      	ldr	r3, [pc, #212]	@ (8003ad4 <xTraceEventCreate4+0xec>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d004      	beq.n	8003a12 <xTraceEventCreate4+0x2a>
 8003a08:	4b33      	ldr	r3, [pc, #204]	@ (8003ad8 <xTraceEventCreate4+0xf0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <xTraceEventCreate4+0x2e>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e059      	b.n	8003aca <xTraceEventCreate4+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a16:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <xTraceEventCreate4+0xf4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	3201      	adds	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <xTraceEventCreate4+0xf8>)
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <xTraceEventCreate4+0xfc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	2314      	movs	r3, #20
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	0192      	lsls	r2, r2, #6
 8003a48:	188a      	adds	r2, r1, r2
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2180      	movs	r1, #128	@ 0x80
 8003a54:	01c9      	lsls	r1, r1, #7
 8003a56:	430a      	orrs	r2, r1
 8003a58:	b292      	uxth	r2, r2
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <xTraceEventCreate4+0xf4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	b292      	uxth	r2, r2
 8003a66:	805a      	strh	r2, [r3, #2]
 8003a68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae8 <xTraceEventCreate4+0x100>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	0a19      	lsrs	r1, r3, #8
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <xTraceEventCreate4+0x104>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	061a      	lsls	r2, r3, #24
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	188a      	adds	r2, r1, r2
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <xTraceEventCreate4+0x104>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <xTraceEventCreate4+0x104>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6992      	ldr	r2, [r2, #24]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <xTraceEventCreate4+0x104>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6852      	ldr	r2, [r2, #4]
 8003a92:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aaa:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2218      	movs	r2, #24
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7ff f966 	bl	8002d84 <SEGGER_RTT_Write>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b00a      	add	sp, #40	@ 0x28
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	20003000 	.word	0x20003000
 8003ad8:	20002ff8 	.word	0x20002ff8
 8003adc:	20002264 	.word	0x20002264
 8003ae0:	20002274 	.word	0x20002274
 8003ae4:	2000226c 	.word	0x2000226c
 8003ae8:	e000e018 	.word	0xe000e018
 8003aec:	20003008 	.word	0x20003008

08003af0 <xTraceEventCreateRawBlocking>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateRawBlocking(const void* pxSource, uint32_t ulSize)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	int32_t iBytesCommitted = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
	void* pxBuffer = (void*)0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	ulSize = TRC_ALIGN_CEIL(ulSize, sizeof(TraceUnsignedBaseType_t));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	3303      	adds	r3, #3
 8003b06:	2203      	movs	r2, #3
 8003b08:	4393      	bics	r3, r2
 8003b0a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	617b      	str	r3, [r7, #20]
  return(result);
 8003b12:	697b      	ldr	r3, [r7, #20]

	TRACE_ENTER_CRITICAL_SECTION();
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	2301      	movs	r3, #1
 8003b18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			@ (mov r8, r8)

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <xTraceEventCreateRawBlocking+0x8c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	3201      	adds	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
	while (xTraceStreamPortAllocate(ulSize, (void**)&pxBuffer) == TRC_FAIL) {}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <xTraceEventCreateRawBlocking+0x90>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <xTraceEventCreateRawBlocking+0x94>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	019b      	lsls	r3, r3, #6
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	60bb      	str	r3, [r7, #8]

	memcpy(pxBuffer, pxSource, ulSize);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f001 feee 	bl	8005928 <memcpy>
	while (xTraceStreamPortCommit(pxBuffer, ulSize, &iBytesCommitted) == TRC_FAIL) {}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff f915 	bl	8002d84 <SEGGER_RTT_Write>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d0f4      	beq.n	8003b4e <xTraceEventCreateRawBlocking+0x5e>
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
	(void)iBytesCommitted;

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	20002264 	.word	0x20002264
 8003b80:	20002274 	.word	0x20002274
 8003b84:	2000226c 	.word	0x2000226c

08003b88 <xTraceEventCreateDataOffline0>:

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	@ 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3303      	adds	r3, #3
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2b40      	cmp	r3, #64	@ 0x40
 8003bac:	d901      	bls.n	8003bb2 <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 8003bae:	2338      	movs	r3, #56	@ 0x38
 8003bb0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	4b29      	ldr	r3, [pc, #164]	@ (8003c70 <xTraceEventCreateDataOffline0+0xe8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	3201      	adds	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <xTraceEventCreateDataOffline0+0xec>)
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <xTraceEventCreateDataOffline0+0xf0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	2314      	movs	r3, #20
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	0192      	lsls	r2, r2, #6
 8003be4:	188a      	adds	r2, r1, r2
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	b21a      	sxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	031b      	lsls	r3, r3, #12
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b21a      	sxth	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <xTraceEventCreateDataOffline0+0xe8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	805a      	strh	r2, [r3, #2]
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <xTraceEventCreateDataOffline0+0xf4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	0a19      	lsrs	r1, r3, #8
 8003c14:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <xTraceEventCreateDataOffline0+0xf8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	061a      	lsls	r2, r3, #24
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	188a      	adds	r2, r1, r2
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <xTraceEventCreateDataOffline0+0xf8>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <xTraceEventCreateDataOffline0+0xf8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6992      	ldr	r2, [r2, #24]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <xTraceEventCreateDataOffline0+0xf8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6852      	ldr	r2, [r2, #4]
 8003c36:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f001 fe71 	bl	8005928 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	001a      	movs	r2, r3
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7ff f898 	bl	8002d84 <SEGGER_RTT_Write>
 8003c54:	0003      	movs	r3, r0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b00a      	add	sp, #40	@ 0x28
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	20002264 	.word	0x20002264
 8003c74:	20002274 	.word	0x20002274
 8003c78:	2000226c 	.word	0x2000226c
 8003c7c:	e000e018 	.word	0xe000e018
 8003c80:	20003008 	.word	0x20003008

08003c84 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	@ 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	3303      	adds	r3, #3
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d901      	bls.n	8003cb0 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 8003cac:	2334      	movs	r3, #52	@ 0x34
 8003cae:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <xTraceEventCreateData1+0x108>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <xTraceEventCreateData1+0x40>
 8003cba:	4b35      	ldr	r3, [pc, #212]	@ (8003d90 <xTraceEventCreateData1+0x10c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <xTraceEventCreateData1+0x44>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e05d      	b.n	8003d84 <xTraceEventCreateData1+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	4b2d      	ldr	r3, [pc, #180]	@ (8003d94 <xTraceEventCreateData1+0x110>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	3201      	adds	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <xTraceEventCreateData1+0x114>)
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	4b2b      	ldr	r3, [pc, #172]	@ (8003d9c <xTraceEventCreateData1+0x118>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	2314      	movs	r3, #20
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	0192      	lsls	r2, r2, #6
 8003cfa:	188a      	adds	r2, r1, r2
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	3304      	adds	r3, #4
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	b292      	uxth	r2, r2
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <xTraceEventCreateData1+0x110>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	b292      	uxth	r2, r2
 8003d22:	805a      	strh	r2, [r3, #2]
 8003d24:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <xTraceEventCreateData1+0x11c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	0a19      	lsrs	r1, r3, #8
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <xTraceEventCreateData1+0x120>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	061a      	lsls	r2, r3, #24
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	188a      	adds	r2, r1, r2
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <xTraceEventCreateData1+0x120>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <xTraceEventCreateData1+0x120>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6992      	ldr	r2, [r2, #24]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <xTraceEventCreateData1+0x120>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6852      	ldr	r2, [r2, #4]
 8003d4e:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f001 fde2 	bl	8005928 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff f809 	bl	8002d84 <SEGGER_RTT_Write>
 8003d72:	0003      	movs	r3, r0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b00a      	add	sp, #40	@ 0x28
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20003000 	.word	0x20003000
 8003d90:	20002ff8 	.word	0x20002ff8
 8003d94:	20002264 	.word	0x20002264
 8003d98:	20002274 	.word	0x20002274
 8003d9c:	2000226c 	.word	0x2000226c
 8003da0:	e000e018 	.word	0xe000e018
 8003da4:	20003008 	.word	0x20003008

08003da8 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 8003db0:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <xTraceExtensionInitialize+0x30>)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 8003db6:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <xTraceExtensionInitialize+0x30>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	22fd      	movs	r2, #253	@ 0xfd
 8003dbc:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <xTraceExtensionInitialize+0x34>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2280      	movs	r2, #128	@ 0x80
 8003dc4:	0052      	lsls	r2, r2, #1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <xTraceExtensionInitialize+0x34>)
 8003dca:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	20002268 	.word	0x20002268
 8003ddc:	20003000 	.word	0x20003000

08003de0 <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	@ 0x30
 8003de4:	af04      	add	r7, sp, #16
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 8003dee:	2114      	movs	r1, #20
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	601a      	str	r2, [r3, #0]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	609a      	str	r2, [r3, #8]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	2100      	movs	r1, #0
 8003e16:	20f2      	movs	r0, #242	@ 0xf2
 8003e18:	f000 f8f2 	bl	8004000 <xTraceObjectRegisterInternal>
 8003e1c:	0003      	movs	r3, r0
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b008      	add	sp, #32
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e024      	b.n	8003e86 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d904      	bls.n	8003e68 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <xTraceHeapAlloc+0x52>
 8003e74:	2338      	movs	r3, #56	@ 0x38
 8003e76:	e000      	b.n	8003e7a <xTraceHeapAlloc+0x54>
 8003e78:	23e9      	movs	r3, #233	@ 0xe9
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7ff fcb6 	bl	80037f0 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b006      	add	sp, #24
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8003e98:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <xTraceISRInitialize+0x74>)
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e020      	b.n	8003ee6 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8003ea4:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <xTraceISRInitialize+0x74>)
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	0013      	movs	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	18cb      	adds	r3, r1, r3
 8003eb4:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e007      	b.n	8003ecc <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	0092      	lsls	r2, r2, #2
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	50d1      	str	r1, [r2, r3]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	d9f4      	bls.n	8003ebc <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4252      	negs	r2, r2
 8003ed8:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0db      	beq.n	8003ea4 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <xTraceISRInitialize+0x78>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2280      	movs	r2, #128	@ 0x80
 8003ef2:	0152      	lsls	r2, r2, #5
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <xTraceISRInitialize+0x78>)
 8003ef8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b006      	add	sp, #24
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	2000226c 	.word	0x2000226c
 8003f08:	20003000 	.word	0x20003000

08003f0c <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00b      	b.n	8003f36 <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <xTraceKernelPortInitialize+0x34>)
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <xTraceKernelPortInitialize+0x34>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <xTraceKernelPortInitialize+0x34>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	20002270 	.word	0x20002270

08003f44 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8003f4a:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <xTraceKernelPortEnable+0x64>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xTraceKernelPortEnable+0x26>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <xTraceKernelPortEnable+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	001a      	movs	r2, r3
 8003f5a:	23e0      	movs	r3, #224	@ 0xe0
 8003f5c:	015b      	lsls	r3, r3, #5
 8003f5e:	4813      	ldr	r0, [pc, #76]	@ (8003fac <xTraceKernelPortEnable+0x68>)
 8003f60:	9200      	str	r2, [sp, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	f7ff ff3b 	bl	8003de0 <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <xTraceKernelPortEnable+0x64>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d115      	bne.n	8003fa0 <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <xTraceKernelPortEnable+0x64>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	490d      	ldr	r1, [pc, #52]	@ (8003fb0 <xTraceKernelPortEnable+0x6c>)
 8003f7c:	480d      	ldr	r0, [pc, #52]	@ (8003fb4 <xTraceKernelPortEnable+0x70>)
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	2301      	movs	r3, #1
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	f7fd f8d3 	bl	8001132 <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <xTraceKernelPortEnable+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8003f96:	2006      	movs	r0, #6
 8003f98:	f7ff fab0 	bl	80034fc <xTraceError>

			return TRC_FAIL;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20002270 	.word	0x20002270
 8003fac:	08005bbc 	.word	0x08005bbc
 8003fb0:	08005bc8 	.word	0x08005bc8
 8003fb4:	08003fb9 	.word	0x08003fb9

08003fb8 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8003fc0:	f000 fb8e 	bl	80046e0 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8003fc4:	2032      	movs	r0, #50	@ 0x32
 8003fc6:	f7fd fa33 	bl	8001430 <vTaskDelay>
		xTraceTzCtrl();
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	e7f8      	b.n	8003fc0 <TzCtrl+0x8>

08003fce <vTraceSetSemaphoreName>:
{
	xTraceObjectSetNameWithoutHandle(pvQueue, szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
	xTraceObjectSetNameWithoutHandle(pvSemaphore, szName);
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 f917 	bl	8004212 <xTraceObjectSetNameWithoutHandle>
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8003ff0:	4b02      	ldr	r3, [pc, #8]	@ (8003ffc <xTraceKernelPortGetSystemHeapHandle+0x10>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20002270 	.word	0x20002270

08004000 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b091      	sub	sp, #68	@ 0x44
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
 8004018:	2301      	movs	r3, #1
 800401a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			@ (mov r8, r8)

	if (pvObject != (void*)0)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d019      	beq.n	800405e <xTraceObjectRegisterInternal+0x5e>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 800402a:	2318      	movs	r3, #24
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff f8e2 	bl	80031f8 <xTraceEntryCreate>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d104      	bne.n	8004042 <xTraceObjectRegisterInternal+0x42>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <xTraceObjectRegisterInternal+0x44>
 8004042:	2301      	movs	r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <xTraceObjectRegisterInternal+0x58>
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004054:	2301      	movs	r3, #1
 8004056:	e089      	b.n	800416c <xTraceObjectRegisterInternal+0x16c>
		}
		
		pvAddress = pvObject;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e012      	b.n	8004084 <xTraceObjectRegisterInternal+0x84>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 800405e:	2318      	movs	r3, #24
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff f8c8 	bl	80031f8 <xTraceEntryCreate>
 8004068:	0003      	movs	r3, r0
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <xTraceObjectRegisterInternal+0x7e>
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800407a:	2301      	movs	r3, #1
 800407c:	e076      	b.n	800416c <xTraceObjectRegisterInternal+0x16c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
 8004088:	e00d      	b.n	80040a6 <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	18cb      	adds	r3, r1, r3
 800409c:	3304      	adds	r3, #4
 800409e:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < uxStateCount; i++)
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	3301      	adds	r3, #1
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3ed      	bcc.n	800408a <xTraceObjectRegisterInternal+0x8a>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	6919      	ldr	r1, [r3, #16]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <xTraceObjectRegisterInternal+0xe6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <xTraceObjectRegisterInternal+0xe6>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	0011      	movs	r1, r2
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 f847 	bl	8004174 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d02b      	beq.n	8004144 <xTraceObjectRegisterInternal+0x144>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d839      	bhi.n	8004166 <xTraceObjectRegisterInternal+0x166>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d01a      	beq.n	800412e <xTraceObjectRegisterInternal+0x12e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d833      	bhi.n	8004166 <xTraceObjectRegisterInternal+0x166>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <xTraceObjectRegisterInternal+0x10c>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d008      	beq.n	800411c <xTraceObjectRegisterInternal+0x11c>
 800410a:	e02c      	b.n	8004166 <xTraceObjectRegisterInternal+0x166>
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	001a      	movs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0011      	movs	r1, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff faf3 	bl	8003700 <xTraceEventCreate1>
			break;
 800411a:	e026      	b.n	800416a <xTraceObjectRegisterInternal+0x16a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	0019      	movs	r1, r3
 8004120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff fb62 	bl	80037f0 <xTraceEventCreate2>
			break;
 800412c:	e01d      	b.n	800416a <xTraceObjectRegisterInternal+0x16a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	0019      	movs	r1, r3
 8004132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004138:	3304      	adds	r3, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fbd3 	bl	80038e8 <xTraceEventCreate3>
			break;
 8004142:	e012      	b.n	800416a <xTraceObjectRegisterInternal+0x16a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	001c      	movs	r4, r3
 8004148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414e:	3304      	adds	r3, #4
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004154:	3308      	adds	r3, #8
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	000b      	movs	r3, r1
 800415e:	0021      	movs	r1, r4
 8004160:	f7ff fc42 	bl	80039e8 <xTraceEventCreate4>
			break;
 8004164:	e001      	b.n	800416a <xTraceObjectRegisterInternal+0x16a>
		default:
			return TRC_FAIL;
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xTraceObjectRegisterInternal+0x16c>
			break;
	}

	return TRC_SUCCESS;
 800416a:	2300      	movs	r3, #0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b00f      	add	sp, #60	@ 0x3c
 8004172:	bd90      	pop	{r4, r7, pc}

08004174 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <xTraceObjectSetName+0x68>)
 800418a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e002      	b.n	800419e <xTraceObjectSetName+0x2a>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3301      	adds	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <xTraceObjectSetName+0x3c>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80041ae:	d9f3      	bls.n	8004198 <xTraceObjectSetName+0x24>

	uiLength = i;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0019      	movs	r1, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3301      	adds	r3, #1
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	2003      	movs	r0, #3
 80041c0:	f7ff fd60 	bl	8003c84 <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff f8a0 	bl	8003310 <xTraceEntrySetSymbol>
 80041d0:	0003      	movs	r3, r0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b006      	add	sp, #24
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	08005bd0 	.word	0x08005bd0

080041e0 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af04      	add	r7, sp, #16
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	2314      	movs	r3, #20
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	003b      	movs	r3, r7
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2301      	movs	r3, #1
 8004204:	f7ff fefc 	bl	8004000 <xTraceObjectRegisterInternal>
 8004208:	0003      	movs	r3, r0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b006      	add	sp, #24
 8004210:	bd80      	pop	{r7, pc}

08004212 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8004212:	b590      	push	{r4, r7, lr}
 8004214:	b08b      	sub	sp, #44	@ 0x2c
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421c:	f3ef 8310 	mrs	r3, PRIMASK
 8004220:	61bb      	str	r3, [r7, #24]
  return(result);
 8004222:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			@ (mov r8, r8)

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8004232:	240c      	movs	r4, #12
 8004234:	193a      	adds	r2, r7, r4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0011      	movs	r1, r2
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff f83e 	bl	80032bc <xTraceEntryFind>
 8004240:	0003      	movs	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d115      	bne.n	8004272 <xTraceObjectSetNameWithoutHandle+0x60>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8004246:	193b      	adds	r3, r7, r4
 8004248:	0018      	movs	r0, r3
 800424a:	f7fe ffd5 	bl	80031f8 <xTraceEntryCreate>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d104      	bne.n	800425c <xTraceObjectSetNameWithoutHandle+0x4a>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <xTraceObjectSetNameWithoutHandle+0x4c>
 800425c:	2301      	movs	r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <xTraceObjectSetNameWithoutHandle+0x60>
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800426e:	2301      	movs	r3, #1
 8004270:	e00e      	b.n	8004290 <xTraceObjectSetNameWithoutHandle+0x7e>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff ff7b 	bl	8004174 <xTraceObjectSetName>
 800427e:	0003      	movs	r3, r0
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 800428e:	6a3b      	ldr	r3, [r7, #32]
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b00b      	add	sp, #44	@ 0x2c
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <xTraceStaticBufferInitialize+0x28>)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	601a      	str	r2, [r3, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 80042a6:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <xTraceStaticBufferInitialize+0x2c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2280      	movs	r2, #128	@ 0x80
 80042ac:	02d2      	lsls	r2, r2, #11
 80042ae:	431a      	orrs	r2, r3
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <xTraceStaticBufferInitialize+0x2c>)
 80042b2:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b002      	add	sp, #8
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	20002274 	.word	0x20002274
 80042c4:	20003000 	.word	0x20003000

080042c8 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 80042ce:	4b74      	ldr	r3, [pc, #464]	@ (80044a0 <xTraceInitialize+0x1d8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e0de      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	TRC_PORT_SPECIFIC_INIT();
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80042dc:	4a72      	ldr	r2, [pc, #456]	@ (80044a8 <xTraceInitialize+0x1e0>)
 80042de:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 80042e0:	4b70      	ldr	r3, [pc, #448]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 80042e8:	4b6e      	ldr	r3, [pc, #440]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	e009      	b.n	800430a <xTraceInitialize+0x42>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 80042f6:	4b6b      	ldr	r3, [pc, #428]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	3202      	adds	r2, #2
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	2100      	movs	r1, #0
 8004302:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f2      	beq.n	80042f6 <xTraceInitialize+0x2e>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 8004310:	4b64      	ldr	r3, [pc, #400]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	0018      	movs	r0, r3
 8004318:	f7fe ff04 	bl	8003124 <xTraceEntryIndexTableInitialize>
 800431c:	0003      	movs	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <xTraceInitialize+0x5e>
	{
		return TRC_FAIL;
 8004322:	2301      	movs	r3, #1
 8004324:	e0b8      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 8004326:	4b5f      	ldr	r3, [pc, #380]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	332c      	adds	r3, #44	@ 0x2c
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f8cd 	bl	80044cc <xTraceHeaderInitialize>
 8004332:	0003      	movs	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <xTraceInitialize+0x74>
	{
		return TRC_FAIL;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ad      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 800433c:	4b59      	ldr	r3, [pc, #356]	@ (80044a4 <xTraceInitialize+0x1dc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	334c      	adds	r3, #76	@ 0x4c
 8004342:	0018      	movs	r0, r3
 8004344:	f7fe fefe 	bl	8003144 <xTraceEntryTableInitialize>
 8004348:	0003      	movs	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <xTraceInitialize+0x8a>
	{
		return TRC_FAIL;
 800434e:	2301      	movs	r3, #1
 8004350:	e0a2      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 8004352:	4b54      	ldr	r3, [pc, #336]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	22a6      	movs	r2, #166	@ 0xa6
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	4694      	mov	ip, r2
 800435c:	4463      	add	r3, ip
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fc20 	bl	8004ba4 <xTraceTimestampInitialize>
 8004364:	0003      	movs	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 800436a:	2301      	movs	r3, #1
 800436c:	e094      	b.n	8004498 <xTraceInitialize+0x1d0>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 800436e:	4b4d      	ldr	r3, [pc, #308]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4e      	ldr	r2, [pc, #312]	@ (80044ac <xTraceInitialize+0x1e4>)
 8004374:	4694      	mov	ip, r2
 8004376:	4463      	add	r3, ip
 8004378:	0018      	movs	r0, r3
 800437a:	f7fe fe03 	bl	8002f84 <xTraceCounterInitialize>
 800437e:	0003      	movs	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <xTraceInitialize+0xc0>
	{
		return TRC_FAIL;
 8004384:	2301      	movs	r3, #1
 8004386:	e087      	b.n	8004498 <xTraceInitialize+0x1d0>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 8004388:	4b46      	ldr	r3, [pc, #280]	@ (80044a4 <xTraceInitialize+0x1dc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	22ad      	movs	r2, #173	@ 0xad
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	4694      	mov	ip, r2
 8004392:	4463      	add	r3, ip
 8004394:	0018      	movs	r0, r3
 8004396:	f7fe fdb1 	bl	8002efc <xTraceStreamPortInitialize>
 800439a:	0003      	movs	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <xTraceInitialize+0xdc>
	{
		return TRC_FAIL;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e079      	b.n	8004498 <xTraceInitialize+0x1d0>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 80043a4:	4b3f      	ldr	r3, [pc, #252]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a41      	ldr	r2, [pc, #260]	@ (80044b0 <xTraceInitialize+0x1e8>)
 80043aa:	4694      	mov	ip, r2
 80043ac:	4463      	add	r3, ip
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7fe fe04 	bl	8002fbc <xTraceDiagnosticsInitialize>
 80043b4:	0003      	movs	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <xTraceInitialize+0xf6>
	{
		return TRC_FAIL;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06c      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3c      	ldr	r2, [pc, #240]	@ (80044b4 <xTraceInitialize+0x1ec>)
 80043c4:	4694      	mov	ip, r2
 80043c6:	4463      	add	r3, ip
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fced 	bl	8003da8 <xTraceExtensionInitialize>
 80043ce:	0003      	movs	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <xTraceInitialize+0x110>
	{
		return TRC_FAIL;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e05f      	b.n	8004498 <xTraceInitialize+0x1d0>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 80043d8:	4b32      	ldr	r3, [pc, #200]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	@ (80044b8 <xTraceInitialize+0x1f0>)
 80043de:	4694      	mov	ip, r2
 80043e0:	4463      	add	r3, ip
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7ff ff58 	bl	8004298 <xTraceStaticBufferInitialize>
 80043e8:	0003      	movs	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <xTraceInitialize+0x12a>
	{
		return TRC_FAIL;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e052      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 80043f2:	4b2c      	ldr	r3, [pc, #176]	@ (80044a4 <xTraceInitialize+0x1dc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a31      	ldr	r2, [pc, #196]	@ (80044bc <xTraceInitialize+0x1f4>)
 80043f8:	4694      	mov	ip, r2
 80043fa:	4463      	add	r3, ip
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff f959 	bl	80036b4 <xTraceEventInitialize>
 8004402:	0003      	movs	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <xTraceInitialize+0x144>
	{
		return TRC_FAIL;
 8004408:	2301      	movs	r3, #1
 800440a:	e045      	b.n	8004498 <xTraceInitialize+0x1d0>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 800440c:	2300      	movs	r3, #0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <xTraceInitialize+0x14e>
	{
		return TRC_FAIL;
 8004412:	2301      	movs	r3, #1
 8004414:	e040      	b.n	8004498 <xTraceInitialize+0x1d0>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8004416:	4b23      	ldr	r3, [pc, #140]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	22d2      	movs	r2, #210	@ 0xd2
 800441c:	0112      	lsls	r2, r2, #4
 800441e:	4694      	mov	ip, r2
 8004420:	4463      	add	r3, ip
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff f81a 	bl	800345c <xTraceErrorInitialize>
 8004428:	0003      	movs	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <xTraceInitialize+0x16a>
	{
		return TRC_FAIL;
 800442e:	2301      	movs	r3, #1
 8004430:	e032      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 8004432:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a22      	ldr	r2, [pc, #136]	@ (80044c0 <xTraceInitialize+0x1f8>)
 8004438:	4694      	mov	ip, r2
 800443a:	4463      	add	r3, ip
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff fd27 	bl	8003e90 <xTraceISRInitialize>
 8004442:	0003      	movs	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <xTraceInitialize+0x184>
	{
		return TRC_FAIL;
 8004448:	2301      	movs	r3, #1
 800444a:	e025      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 800444c:	4b15      	ldr	r3, [pc, #84]	@ (80044a4 <xTraceInitialize+0x1dc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	@ (80044c4 <xTraceInitialize+0x1fc>)
 8004452:	4694      	mov	ip, r2
 8004454:	4463      	add	r3, ip
 8004456:	0018      	movs	r0, r3
 8004458:	f000 fb30 	bl	8004abc <xTraceTaskInitialize>
 800445c:	0003      	movs	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <xTraceInitialize+0x19e>
	{
		return TRC_FAIL;
 8004462:	2301      	movs	r3, #1
 8004464:	e018      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 8004466:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <xTraceInitialize+0x200>)
 800446c:	4694      	mov	ip, r2
 800446e:	4463      	add	r3, ip
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff fd4b 	bl	8003f0c <xTraceKernelPortInitialize>
 8004476:	0003      	movs	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <xTraceInitialize+0x1b8>
	{
		return TRC_FAIL;
 800447c:	2301      	movs	r3, #1
 800447e:	e00b      	b.n	8004498 <xTraceInitialize+0x1d0>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <xTraceInitialize+0x1dc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	4252      	negs	r2, r2
 8004488:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <xTraceInitialize+0x1d8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	431a      	orrs	r2, r3
 8004492:	4b03      	ldr	r3, [pc, #12]	@ (80044a0 <xTraceInitialize+0x1d8>)
 8004494:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004496:	2300      	movs	r3, #0
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20003000 	.word	0x20003000
 80044a4:	20002ff8 	.word	0x20002ff8
 80044a8:	20002278 	.word	0x20002278
 80044ac:	00000d7c 	.word	0x00000d7c
 80044b0:	00000d64 	.word	0x00000d64
 80044b4:	00000d78 	.word	0x00000d78
 80044b8:	00000ad4 	.word	0x00000ad4
 80044bc:	00000d14 	.word	0x00000d14
 80044c0:	00000d2c 	.word	0x00000d2c
 80044c4:	00000d5c 	.word	0x00000d5c
 80044c8:	00000d54 	.word	0x00000d54

080044cc <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80044d4:	4b41      	ldr	r3, [pc, #260]	@ (80045dc <xTraceHeaderInitialize+0x110>)
 80044d6:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 80044de:	2301      	movs	r3, #1
 80044e0:	e078      	b.n	80045d4 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 80044e2:	2382      	movs	r3, #130	@ 0x82
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 faa2 	bl	8004a30 <prvVerifySizeAlignment>
 80044ec:	0003      	movs	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <xTraceHeaderInitialize+0x2a>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06e      	b.n	80045d4 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 80044f6:	2008      	movs	r0, #8
 80044f8:	f000 fa9a 	bl	8004a30 <prvVerifySizeAlignment>
 80044fc:	0003      	movs	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <xTraceHeaderInitialize+0x3a>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8004502:	2301      	movs	r3, #1
 8004504:	e066      	b.n	80045d4 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 8004506:	2008      	movs	r0, #8
 8004508:	f000 fa92 	bl	8004a30 <prvVerifySizeAlignment>
 800450c:	0003      	movs	r3, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <xTraceHeaderInitialize+0x4a>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8004512:	2301      	movs	r3, #1
 8004514:	e05e      	b.n	80045d4 <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8004516:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 800451c:	4b30      	ldr	r3, [pc, #192]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a30      	ldr	r2, [pc, #192]	@ (80045e4 <xTraceHeaderInitialize+0x118>)
 8004522:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 8004524:	4b2e      	ldr	r3, [pc, #184]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	220e      	movs	r2, #14
 800452a:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 800452c:	4b2c      	ldr	r3, [pc, #176]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <xTraceHeaderInitialize+0x11c>)
 8004532:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e013      	b.n	8004562 <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	18d1      	adds	r1, r2, r3
 8004540:	4b27      	ldr	r3, [pc, #156]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	7809      	ldrb	r1, [r1, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	18d3      	adds	r3, r2, r3
 800454a:	3318      	adds	r3, #24
 800454c:	1c0a      	adds	r2, r1, #0
 800454e:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b07      	cmp	r3, #7
 8004566:	d9e8      	bls.n	800453a <xTraceHeaderInitialize+0x6e>
 8004568:	e000      	b.n	800456c <xTraceHeaderInitialize+0xa0>
		{
			break;
 800456a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 800456c:	4b1c      	ldr	r3, [pc, #112]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2200      	movs	r2, #0
 8004572:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 8004574:	4b1a      	ldr	r3, [pc, #104]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2202      	movs	r2, #2
 800457a:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 800457c:	4b18      	ldr	r3, [pc, #96]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 8004584:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2201      	movs	r2, #1
 800458a:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	21c0      	movs	r1, #192	@ 0xc0
 8004598:	0089      	lsls	r1, r1, #2
 800459a:	430a      	orrs	r2, r1
 800459c:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 80045ae:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6892      	ldr	r2, [r2, #8]
 80045b8:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 80045ba:	f000 f8e1 	bl	8004780 <prvIs64bit>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d007      	beq.n	80045d2 <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 80045c2:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <xTraceHeaderInitialize+0x114>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2108      	movs	r1, #8
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	08005bd4 	.word	0x08005bd4
 80045e0:	20002ffc 	.word	0x20002ffc
 80045e4:	50534600 	.word	0x50534600
 80045e8:	00001aa1 	.word	0x00001aa1

080045ec <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 80045f4:	2310      	movs	r3, #16
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	0018      	movs	r0, r3
 80045fa:	2308      	movs	r3, #8
 80045fc:	001a      	movs	r2, r3
 80045fe:	2100      	movs	r1, #0
 8004600:	f001 f966 	bl	80058d0 <memset>
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 8004604:	f7ff fe60 	bl	80042c8 <xTraceInitialize>
 8004608:	0003      	movs	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <xTraceEnable+0x26>
	{
		return TRC_FAIL;
 800460e:	2301      	movs	r3, #1
 8004610:	e056      	b.n	80046c0 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0018      	movs	r0, r3
 8004616:	f7fe fc85 	bl	8002f24 <xTraceStreamPortOnEnable>
 800461a:	0003      	movs	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 8004620:	2301      	movs	r3, #1
 8004622:	e04d      	b.n	80046c0 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 8004624:	f7ff fc8e 	bl	8003f44 <xTraceKernelPortEnable>
 8004628:	0003      	movs	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <xTraceEnable+0x46>
	{
		return TRC_FAIL;
 800462e:	2301      	movs	r3, #1
 8004630:	e046      	b.n	80046c0 <xTraceEnable+0xd4>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d12e      	bne.n	8004696 <xTraceEnable+0xaa>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 800463c:	4b22      	ldr	r3, [pc, #136]	@ (80046c8 <xTraceEnable+0xdc>)
 800463e:	2284      	movs	r2, #132	@ 0x84
 8004640:	589a      	ldr	r2, [r3, r2]
 8004642:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <xTraceEnable+0xdc>)
 8004644:	2188      	movs	r1, #136	@ 0x88
 8004646:	585b      	ldr	r3, [r3, r1]
 8004648:	429a      	cmp	r2, r3
 800464a:	d00a      	beq.n	8004662 <xTraceEnable+0x76>
 800464c:	2310      	movs	r3, #16
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2208      	movs	r2, #8
 8004652:	0019      	movs	r1, r3
 8004654:	2001      	movs	r0, #1
 8004656:	f7fe fb21 	bl	8002c9c <SEGGER_RTT_Read>
 800465a:	0003      	movs	r3, r0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <xTraceEnable+0x78>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <xTraceEnable+0x82>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8004668:	200b      	movs	r0, #11
 800466a:	f7fe ff19 	bl	80034a0 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d10a      	bne.n	800468a <xTraceEnable+0x9e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 8004674:	2410      	movs	r4, #16
 8004676:	193b      	adds	r3, r7, r4
 8004678:	0018      	movs	r0, r3
 800467a:	f000 f983 	bl	8004984 <prvIsValidCommand>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d003      	beq.n	800468a <xTraceEnable+0x9e>
				{
					prvProcessCommand(&xCommand);
 8004682:	193b      	adds	r3, r7, r4
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f9bc 	bl	8004a02 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <xTraceEnable+0xe0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0d1      	beq.n	8004638 <xTraceEnable+0x4c>
 8004694:	e013      	b.n	80046be <xTraceEnable+0xd2>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10b      	bne.n	80046b4 <xTraceEnable+0xc8>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 800469c:	2110      	movs	r1, #16
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
		xCommand.param1 = 1u;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2201      	movs	r2, #1
 80046a8:	705a      	strb	r2, [r3, #1]
		prvProcessCommand(&xCommand);
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 f9a8 	bl	8004a02 <prvProcessCommand>
 80046b2:	e004      	b.n	80046be <xTraceEnable+0xd2>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <xTraceEnable+0xd2>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xTraceEnable+0xd4>
	}

	return TRC_SUCCESS;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b007      	add	sp, #28
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	20001d94 	.word	0x20001d94
 80046cc:	20002ff8 	.word	0x20002ff8

080046d0 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 80046d4:	f000 f8ae 	bl	8004834 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 80046e6:	2308      	movs	r3, #8
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	0018      	movs	r0, r3
 80046ec:	2308      	movs	r3, #8
 80046ee:	001a      	movs	r2, r3
 80046f0:	2100      	movs	r1, #0
 80046f2:	f001 f8ed 	bl	80058d0 <memset>
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 80046fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <xTraceTzCtrl+0x94>)
 80046fc:	2284      	movs	r2, #132	@ 0x84
 80046fe:	589a      	ldr	r2, [r3, r2]
 8004700:	4b1c      	ldr	r3, [pc, #112]	@ (8004774 <xTraceTzCtrl+0x94>)
 8004702:	2188      	movs	r1, #136	@ 0x88
 8004704:	585b      	ldr	r3, [r3, r1]
 8004706:	429a      	cmp	r2, r3
 8004708:	d00a      	beq.n	8004720 <xTraceTzCtrl+0x40>
 800470a:	2308      	movs	r3, #8
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2208      	movs	r2, #8
 8004710:	0019      	movs	r1, r3
 8004712:	2001      	movs	r0, #1
 8004714:	f7fe fac2 	bl	8002c9c <SEGGER_RTT_Read>
 8004718:	0003      	movs	r3, r0
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <xTraceTzCtrl+0x42>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <xTraceTzCtrl+0x4e>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 8004726:	f7ff ffd3 	bl	80046d0 <xTraceDisable>

			return TRC_FAIL;
 800472a:	2301      	movs	r3, #1
 800472c:	e01d      	b.n	800476a <xTraceTzCtrl+0x8a>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10a      	bne.n	800474a <xTraceTzCtrl+0x6a>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 8004734:	2408      	movs	r4, #8
 8004736:	193b      	adds	r3, r7, r4
 8004738:	0018      	movs	r0, r3
 800473a:	f000 f923 	bl	8004984 <prvIsValidCommand>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d003      	beq.n	800474a <xTraceTzCtrl+0x6a>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 8004742:	193b      	adds	r3, r7, r4
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f95c 	bl	8004a02 <prvProcessCommand>
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	dcd2      	bgt.n	80046f6 <xTraceTzCtrl+0x16>

	if (xTraceIsRecorderEnabled())
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <xTraceTzCtrl+0x98>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	4013      	ands	r3, r2
 8004758:	d006      	beq.n	8004768 <xTraceTzCtrl+0x88>
 800475a:	4b08      	ldr	r3, [pc, #32]	@ (800477c <xTraceTzCtrl+0x9c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <xTraceTzCtrl+0x88>
	{
		(void)xTraceDiagnosticsCheckStatus();
 8004764:	f7fe fc9c 	bl	80030a0 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
	}

	return TRC_SUCCESS;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b005      	add	sp, #20
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	20001d94 	.word	0x20001d94
 8004778:	20003000 	.word	0x20003000
 800477c:	20002ff8 	.word	0x20002ff8

08004780 <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 8004796:	2300      	movs	r3, #0
 8004798:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 800479a:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <prvSetRecorderEnabled+0x98>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d03a      	beq.n	800481a <prvSetRecorderEnabled+0x8e>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 80047a4:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <prvSetRecorderEnabled+0x9c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 80047b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <prvSetRecorderEnabled+0x9c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	@ (800482c <prvSetRecorderEnabled+0xa0>)
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 80047bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <prvSetRecorderEnabled+0x9c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <prvSetRecorderEnabled+0x4a>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 80047ca:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <prvSetRecorderEnabled+0xa4>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <prvSetRecorderEnabled+0x9c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3201      	adds	r2, #1
 80047d4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	60bb      	str	r3, [r7, #8]
  return(result);
 80047dc:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	2301      	movs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			@ (mov r8, r8)
	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 80047ec:	f000 f846 	bl	800487c <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 80047f0:	f000 f852 	bl	8004898 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 80047f4:	f000 f862 	bl	80048bc <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 80047f8:	f000 f89a 	bl	8004930 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <prvSetRecorderEnabled+0x98>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	3201      	adds	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 8004806:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <prvSetRecorderEnabled+0x98>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	e000      	b.n	800481c <prvSetRecorderEnabled+0x90>
		return;
 800481a:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();
}
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	20002ff8 	.word	0x20002ff8
 8004828:	20003008 	.word	0x20003008
 800482c:	20000008 	.word	0x20000008
 8004830:	e000e014 	.word	0xe000e014

08004834 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 800483a:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <prvSetRecorderDisabled+0x44>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d014      	beq.n	800486e <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	603b      	str	r3, [r7, #0]
  return(result);
 800484a:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	2301      	movs	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			@ (mov r8, r8)
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800485a:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <prvSetRecorderDisabled+0x44>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	e000      	b.n	8004870 <prvSetRecorderDisabled+0x3c>
		return;
 800486e:	46c0      	nop			@ (mov r8, r8)

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8004870:	46bd      	mov	sp, r7
 8004872:	b004      	add	sp, #16
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	20002ff8 	.word	0x20002ff8

0800487c <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t));
 8004880:	4b04      	ldr	r3, [pc, #16]	@ (8004894 <prvTraceStoreHeader+0x18>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2120      	movs	r1, #32
 8004886:	0018      	movs	r0, r3
 8004888:	f7ff f932 	bl	8003af0 <xTraceEventCreateRawBlocking>
}
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	20002ffc 	.word	0x20002ffc

08004898 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer,sizeof(TraceTimestampData_t));
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <prvTraceStoreTimestampInfo+0x20>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	22a6      	movs	r2, #166	@ 0xa6
 80048a2:	0092      	lsls	r2, r2, #2
 80048a4:	4694      	mov	ip, r2
 80048a6:	4463      	add	r3, ip
 80048a8:	211c      	movs	r1, #28
 80048aa:	0018      	movs	r0, r3
 80048ac:	f7ff f920 	bl	8003af0 <xTraceEventCreateRawBlocking>
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	20002ff8 	.word	0x20002ff8

080048bc <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	TraceUnsignedBaseType_t xHeaderData[3];
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 80048c6:	2314      	movs	r3, #20
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7fe fd4a 	bl	8003364 <xTraceEntryGetCount>

	xHeaderData[0] = (TraceUnsignedBaseType_t)uiEntryCount;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	2108      	movs	r1, #8
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	601a      	str	r2, [r3, #0]
	xHeaderData[1] = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2210      	movs	r2, #16
 80048dc:	605a      	str	r2, [r3, #4]
	xHeaderData[2] = TRC_ENTRY_TABLE_STATE_COUNT;
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	2203      	movs	r2, #3
 80048e2:	609a      	str	r2, [r3, #8]

	xTraceEventCreateRawBlocking(xHeaderData, sizeof(xHeaderData));
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	210c      	movs	r1, #12
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7ff f901 	bl	8003af0 <xTraceEventCreateRawBlocking>

	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e014      	b.n	800491e <prvTraceStoreEntryTable+0x62>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 80048f4:	2318      	movs	r3, #24
 80048f6:	18fa      	adds	r2, r7, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	0011      	movs	r1, r2
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7fe fd43 	bl	8003388 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	607b      	str	r3, [r7, #4]

		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <prvTraceStoreEntryTable+0x5c>
		{
			xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t *) xEntryHandle, sizeof(TraceEntry_t));
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2124      	movs	r1, #36	@ 0x24
 8004912:	0018      	movs	r0, r3
 8004914:	f7ff f8ec 	bl	8003af0 <xTraceEventCreateRawBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d9e7      	bls.n	80048f4 <prvTraceStoreEntryTable+0x38>
		}
	}

}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b008      	add	sp, #32
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e011      	b.n	8004964 <prvTraceStoreStartEvent+0x34>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8004940:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <prvTraceStoreStartEvent+0x50>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	58d3      	ldr	r3, [r2, r3]
 800494a:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	001a      	movs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	2110      	movs	r1, #16
 8004956:	185b      	adds	r3, r3, r1
 8004958:	19db      	adds	r3, r3, r7
 800495a:	3b0c      	subs	r3, #12
 800495c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3301      	adds	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0ea      	beq.n	8004940 <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	2204      	movs	r2, #4
 800496e:	0019      	movs	r1, r3
 8004970:	2001      	movs	r0, #1
 8004972:	f7ff f909 	bl	8003b88 <xTraceEventCreateDataOffline0>
}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	20003004 	.word	0x20003004

08004984 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	b2da      	uxtb	r2, r3
												cmd->param3 +
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	b2da      	uxtb	r2, r3
												cmd->param4 +
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	b2da      	uxtb	r2, r3
												cmd->param5);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	001a      	movs	r2, r3
 80049ba:	210e      	movs	r1, #14
 80049bc:	187b      	adds	r3, r7, r1
 80049be:	43d2      	mvns	r2, r2
 80049c0:	801a      	strh	r2, [r3, #0]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	79da      	ldrb	r2, [r3, #7]
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <prvIsValidCommand+0x54>
	{
		return 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e010      	b.n	80049fa <prvIsValidCommand+0x76>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	799a      	ldrb	r2, [r3, #6]
 80049dc:	230e      	movs	r3, #14
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <prvIsValidCommand+0x68>
	{
		return 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e006      	b.n	80049fa <prvIsValidCommand+0x76>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d901      	bls.n	80049f8 <prvIsValidCommand+0x74>
	{
		return 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <prvIsValidCommand+0x76>
	}

	return 1;
 80049f8:	2301      	movs	r3, #1
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d109      	bne.n	8004a26 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8004a1a:	f7ff feb7 	bl	800478c <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8004a1e:	e003      	b.n	8004a28 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8004a20:	f7ff ff08 	bl	8004834 <prvSetRecorderDisabled>
		  	break;
 8004a24:	e000      	b.n	8004a28 <prvProcessCommand+0x26>
		default:
		  	break;
 8004a26:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
static traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	4193      	sbcs	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7fe fbca 	bl	80031f8 <xTraceEntryCreate>
 8004a64:	0003      	movs	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e022      	b.n	8004ab4 <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e002      	b.n	8004a7a <xTraceStringRegister+0x2e>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	18d3      	adds	r3, r2, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <xTraceStringRegister+0x40>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	ddf3      	ble.n	8004a74 <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fe fc3a 	bl	8003310 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	2003      	movs	r0, #3
 8004aae:	f7ff f8e9 	bl	8003c84 <xTraceEventCreateData1>
 8004ab2:	0003      	movs	r3, r0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b006      	add	sp, #24
 8004aba:	bd80      	pop	{r7, pc}

08004abc <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <xTraceTaskInitialize+0x44>)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e008      	b.n	8004ae2 <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <xTraceTaskInitialize+0x44>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	2102      	movs	r1, #2
 8004ada:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	ddf3      	ble.n	8004ad0 <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <xTraceTaskInitialize+0x48>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2280      	movs	r2, #128	@ 0x80
 8004aee:	0352      	lsls	r2, r2, #13
 8004af0:	431a      	orrs	r2, r3
 8004af2:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <xTraceTaskInitialize+0x48>)
 8004af4:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20003004 	.word	0x20003004
 8004b04:	20003000 	.word	0x20003000

08004b08 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8004b16:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <xTraceTaskSwitch+0x90>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <xTraceTaskSwitch+0x1c>
	{
		return xResult;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	e035      	b.n	8004b90 <xTraceTaskSwitch+0x88>
	}

	if (!xTraceIsRecorderEnabled())
 8004b24:	4b1c      	ldr	r3, [pc, #112]	@ (8004b98 <xTraceTaskSwitch+0x90>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <xTraceTaskSwitch+0x30>
 8004b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <xTraceTaskSwitch+0x94>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <xTraceTaskSwitch+0x3c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8004b38:	4b19      	ldr	r3, [pc, #100]	@ (8004ba0 <xTraceTaskSwitch+0x98>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]

		return xResult;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	e025      	b.n	8004b90 <xTraceTaskSwitch+0x88>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8004b44:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <xTraceTaskSwitch+0x94>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b52:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	2301      	movs	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8004b62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <xTraceTaskSwitch+0x98>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	0019      	movs	r1, r3
 8004b70:	2037      	movs	r0, #55	@ 0x37
 8004b72:	f7fe fe3d 	bl	80037f0 <xTraceEventCreate2>
 8004b76:	0003      	movs	r3, r0
 8004b78:	61fb      	str	r3, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8004b7a:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <xTraceTaskSwitch+0x94>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f383 8810 	msr	PRIMASK, r3
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b008      	add	sp, #32
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20003000 	.word	0x20003000
 8004b9c:	20002ff8 	.word	0x20002ff8
 8004ba0:	20003004 	.word	0x20003004

08004ba4 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8004bac:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8004bba:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2264      	movs	r2, #100	@ 0x64
 8004bc8:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8004bca:	4b0f      	ldr	r3, [pc, #60]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2204      	movs	r2, #4
 8004be0:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4b07      	ldr	r3, [pc, #28]	@ (8004c08 <xTraceTimestampInitialize+0x64>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3a01      	subs	r2, #1
 8004bee:	615a      	str	r2, [r3, #20]
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8004bf0:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <xTraceTimestampInitialize+0x68>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2280      	movs	r2, #128	@ 0x80
 8004bf6:	0392      	lsls	r2, r2, #14
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <xTraceTimestampInitialize+0x68>)
 8004bfc:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20003008 	.word	0x20003008
 8004c0c:	20003000 	.word	0x20003000

08004c10 <main>:
// Kernel objects
xSemaphoreHandle xSem;

// Main function
int main()
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8004c16:	f000 f8c3 	bl	8004da0 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8004c1a:	f000 fc6d 	bl	80054f8 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8004c1e:	f000 fcb7 	bl	8005590 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8004c22:	f000 fd03 	bl	800562c <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8004c26:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <main+0xc4>)
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 fb2d 	bl	8005288 <my_printf>


	// Start Trace Recording
	xTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f7ff fcdc 	bl	80045ec <xTraceEnable>

	// Create Semaphore
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8004c34:	4b28      	ldr	r3, [pc, #160]	@ (8004cd8 <main+0xc8>)
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 fb26 	bl	8005288 <my_printf>
    xSem = xSemaphoreCreateBinary();
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	2100      	movs	r1, #0
 8004c40:	2001      	movs	r0, #1
 8004c42:	f7fb fc0b 	bl	800045c <xQueueGenericCreate>
 8004c46:	0002      	movs	r2, r0
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <main+0xcc>)
 8004c4a:	601a      	str	r2, [r3, #0]
    vTraceSetSemaphoreName(xSem, "xSem");
 8004c4c:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <main+0xcc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a23      	ldr	r2, [pc, #140]	@ (8004ce0 <main+0xd0>)
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff f9ba 	bl	8003fce <vTraceSetSemaphoreName>
    // xSem2 = xSemaphoreCreateBinary();
    // vTraceSetSemaphoreName(xSem2, "xSem2");

    // Initialize NVIC
    BSP_NVIC_Init();
 8004c5a:	f000 fd4b 	bl	80056f4 <BSP_NVIC_Init>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8004c5e:	f7fd fe69 	bl	8002934 <xPortGetFreeHeapSize>
 8004c62:	0003      	movs	r3, r0
 8004c64:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce4 <main+0xd4>)
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 fb0b 	bl	8005288 <my_printf>

	// Create Tasks
	my_printf("Creating Tasks...");
 8004c72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <main+0xd8>)
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 fb07 	bl	8005288 <my_printf>
    xTaskCreate(vTask1, "Task_1", 128, NULL, 1, &vTask1_handle);
 8004c7a:	491c      	ldr	r1, [pc, #112]	@ (8004cec <main+0xdc>)
 8004c7c:	481c      	ldr	r0, [pc, #112]	@ (8004cf0 <main+0xe0>)
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <main+0xe4>)
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	2301      	movs	r3, #1
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	2280      	movs	r2, #128	@ 0x80
 8004c8a:	f7fc fa52 	bl	8001132 <xTaskCreate>
    xTaskCreate(vTask2, "Task_2", 128, NULL, 1, &vTask2_handle);
 8004c8e:	491a      	ldr	r1, [pc, #104]	@ (8004cf8 <main+0xe8>)
 8004c90:	481a      	ldr	r0, [pc, #104]	@ (8004cfc <main+0xec>)
 8004c92:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <main+0xf0>)
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	2301      	movs	r3, #1
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2280      	movs	r2, #128	@ 0x80
 8004c9e:	f7fc fa48 	bl	8001132 <xTaskCreate>
    //vTaskPubInit();
    writeTaskInit();
 8004ca2:	f000 fb4d 	bl	8005340 <writeTaskInit>
	my_printf("OK\r\n");
 8004ca6:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <main+0xf4>)
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 faed 	bl	8005288 <my_printf>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8004cae:	f7fd fe41 	bl	8002934 <xPortGetFreeHeapSize>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <main+0xd4>)
 8004cba:	0011      	movs	r1, r2
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fae3 	bl	8005288 <my_printf>

	// Start the Scheduler
	my_printf("Now Starting Scheduler...\r\n");
 8004cc2:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <main+0xf8>)
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 fadf 	bl	8005288 <my_printf>
	vTaskStartScheduler();
 8004cca:	f7fc fbe3 	bl	8001494 <vTaskStartScheduler>
	while(1)
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	e7fd      	b.n	8004cce <main+0xbe>
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	08005be0 	.word	0x08005be0
 8004cd8:	08005bf4 	.word	0x08005bf4
 8004cdc:	20003014 	.word	0x20003014
 8004ce0:	08005c1c 	.word	0x08005c1c
 8004ce4:	08005c24 	.word	0x08005c24
 8004ce8:	08005c44 	.word	0x08005c44
 8004cec:	08005c58 	.word	0x08005c58
 8004cf0:	08004d0d 	.word	0x08004d0d
 8004cf4:	2000300c 	.word	0x2000300c
 8004cf8:	08005c60 	.word	0x08005c60
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	20003010 	.word	0x20003010
 8004d04:	08005c68 	.word	0x08005c68
 8004d08:	08005c70 	.word	0x08005c70

08004d0c <vTask1>:
 */

/*
 * Task_1
 */
void vTask1(void *pvParameters) {
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	command_message_t msgTask1;

    while (1) {
    	// vTask1_Pub();

    	my_sprintf((char *) msgTask1, "Arthour ! Pas changer assiette pour fromage !");
 8004d14:	4a07      	ldr	r2, [pc, #28]	@ (8004d34 <vTask1+0x28>)
 8004d16:	2408      	movs	r4, #8
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 fac8 	bl	80052b2 <my_sprintf>
    	sendMessage(&msgTask1);
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 fb33 	bl	8005390 <sendMessage>
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8004d2a:	200a      	movs	r0, #10
 8004d2c:	f7fc fb80 	bl	8001430 <vTaskDelay>
    	my_sprintf((char *) msgTask1, "Arthour ! Pas changer assiette pour fromage !");
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	e7ef      	b.n	8004d14 <vTask1+0x8>
 8004d34:	08005c8c 	.word	0x08005c8c

08004d38 <vTask2>:
}

/*
 * Task_2
 */
void vTask2(void *pvParameters) {
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	command_message_t msgTask2;

    while(1){
    	// vTask2_Pub();

    	my_sprintf((char *) msgTask2, "Arthour ! Couhillere !");
 8004d40:	4a07      	ldr	r2, [pc, #28]	@ (8004d60 <vTask2+0x28>)
 8004d42:	2408      	movs	r4, #8
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	0011      	movs	r1, r2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 fab2 	bl	80052b2 <my_sprintf>
    	sendMessage(&msgTask2);
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fb1d 	bl	8005390 <sendMessage>
    	vTaskDelay(100 / portTICK_PERIOD_MS);
 8004d56:	200a      	movs	r0, #10
 8004d58:	f7fc fb6a 	bl	8001430 <vTaskDelay>
    	my_sprintf((char *) msgTask2, "Arthour ! Couhillere !");
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	e7ef      	b.n	8004d40 <vTask2+0x8>
 8004d60:	08005cbc 	.word	0x08005cbc

08004d64 <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 8004d6e:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 8004d70:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <vAssertCalled+0x30>)
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 fa88 	bl	8005288 <my_printf>
	my_printf("File %s\r\n", file);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <vAssertCalled+0x34>)
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fa82 	bl	8005288 <my_printf>
	my_printf("Line %d\r\n", line);
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <vAssertCalled+0x38>)
 8004d88:	0011      	movs	r1, r2
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fa7c 	bl	8005288 <my_printf>

	while(1);
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	e7fd      	b.n	8004d90 <vAssertCalled+0x2c>
 8004d94:	08005cd4 	.word	0x08005cd4
 8004d98:	08005ce8 	.word	0x08005ce8
 8004d9c:	08005cf4 	.word	0x08005cf4

08004da0 <SystemClock_Config>:
{
	while(1);
}

static void SystemClock_Config()
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8004daa:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <SystemClock_Config+0x11c>)
 8004dac:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8004dae:	4b44      	ldr	r3, [pc, #272]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b43      	ldr	r3, [pc, #268]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004db4:	2180      	movs	r1, #128	@ 0x80
 8004db6:	02c9      	lsls	r1, r1, #11
 8004db8:	430a      	orrs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8004dbc:	4b40      	ldr	r3, [pc, #256]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dc2:	2180      	movs	r1, #128	@ 0x80
 8004dc4:	0249      	lsls	r1, r1, #9
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004dca:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	@ 0x80
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]
		timeout--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <SystemClock_Config+0x48>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8004de8:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b34      	ldr	r3, [pc, #208]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dee:	4935      	ldr	r1, [pc, #212]	@ (8004ec4 <SystemClock_Config+0x124>)
 8004df0:	400a      	ands	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8004df4:	4b32      	ldr	r3, [pc, #200]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b31      	ldr	r3, [pc, #196]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	0249      	lsls	r1, r1, #9
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e0e:	492e      	ldr	r1, [pc, #184]	@ (8004ec8 <SystemClock_Config+0x128>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e1a:	2180      	movs	r1, #128	@ 0x80
 8004e1c:	0349      	lsls	r1, r1, #13
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b26      	ldr	r3, [pc, #152]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	0449      	lsls	r1, r1, #17
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004e30:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	049b      	lsls	r3, r3, #18
 8004e38:	4013      	ands	r3, r2
 8004e3a:	607b      	str	r3, [r7, #4]
		timeout--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <SystemClock_Config+0xae>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e54:	21f0      	movs	r1, #240	@ 0xf0
 8004e56:	438a      	bics	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004e5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004e62:	4b17      	ldr	r3, [pc, #92]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e68:	4918      	ldr	r1, [pc, #96]	@ (8004ecc <SystemClock_Config+0x12c>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004e6e:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004e76:	4b16      	ldr	r3, [pc, #88]	@ (8004ed0 <SystemClock_Config+0x130>)
 8004e78:	2211      	movs	r2, #17
 8004e7a:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e82:	2103      	movs	r1, #3
 8004e84:	438a      	bics	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004e88:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e8e:	2102      	movs	r1, #2
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <SystemClock_Config+0x120>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	220c      	movs	r2, #12
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	603b      	str	r3, [r7, #0]
		timeout--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d002      	beq.n	8004eb0 <SystemClock_Config+0x110>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f1      	bne.n	8004e94 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8004eb0:	f000 fc88 	bl	80057c4 <SystemCoreClockUpdate>
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	000f4240 	.word	0x000f4240
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	fffe7fff 	.word	0xfffe7fff
 8004ec8:	ffc3ffff 	.word	0xffc3ffff
 8004ecc:	fffff8ff 	.word	0xfffff8ff
 8004ed0:	40022000 	.word	0x40022000

08004ed4 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	if (str) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <printchar+0x26>
		**str = c;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
		++(*str);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8004ef8:	e00a      	b.n	8004f10 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <printchar+0x44>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2240      	movs	r2, #64	@ 0x40
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d1f9      	bne.n	8004efc <printchar+0x28>
		USART2->TDR = c;
 8004f08:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <printchar+0x44>)
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8004f10:	46c0      	nop			@ (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40004400 	.word	0x40004400

08004f1c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1e:	46c6      	mov	lr, r8
 8004f20:	b500      	push	{lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8004f2e:	2400      	movs	r4, #0
 8004f30:	2320      	movs	r3, #32
 8004f32:	4698      	mov	r8, r3

	if (width > 0) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dd16      	ble.n	8004f68 <prints+0x4c>
		register int len = 0;
 8004f3a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8004f3c:	68be      	ldr	r6, [r7, #8]
 8004f3e:	e001      	b.n	8004f44 <prints+0x28>
 8004f40:	3501      	adds	r5, #1
 8004f42:	3601      	adds	r6, #1
 8004f44:	7833      	ldrb	r3, [r6, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1fa      	bne.n	8004f40 <prints+0x24>
		if (len >= width) width = 0;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429d      	cmp	r5, r3
 8004f4e:	db02      	blt.n	8004f56 <prints+0x3a>
 8004f50:	2300      	movs	r3, #0
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e002      	b.n	8004f5c <prints+0x40>
		else width -= len;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1b5b      	subs	r3, r3, r5
 8004f5a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d001      	beq.n	8004f68 <prints+0x4c>
 8004f64:	2330      	movs	r3, #48	@ 0x30
 8004f66:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d119      	bne.n	8004fa4 <prints+0x88>
		for ( ; width > 0; --width) {
 8004f70:	e008      	b.n	8004f84 <prints+0x68>
			printchar (out, padchar);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4641      	mov	r1, r8
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff ffac 	bl	8004ed4 <printchar>
			++pc;
 8004f7c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	dcf3      	bgt.n	8004f72 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8004f8a:	e00b      	b.n	8004fa4 <prints+0x88>
		printchar (out, *string);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff ff9c 	bl	8004ed4 <printchar>
		++pc;
 8004f9c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1ef      	bne.n	8004f8c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8004fac:	e008      	b.n	8004fc0 <prints+0xa4>
		printchar (out, padchar);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff ff8e 	bl	8004ed4 <printchar>
		++pc;
 8004fb8:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dcf3      	bgt.n	8004fae <prints+0x92>
	}

	return pc;
 8004fc6:	0023      	movs	r3, r4
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b004      	add	sp, #16
 8004fce:	bc80      	pop	{r7}
 8004fd0:	46b8      	mov	r8, r7
 8004fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fd4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	46ce      	mov	lr, r9
 8004fd8:	4647      	mov	r7, r8
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b089      	sub	sp, #36	@ 0x24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4699      	mov	r9, r3
 8004fec:	2600      	movs	r6, #0
	register unsigned int u = i;
 8004fee:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10e      	bne.n	8005014 <printi+0x40>
		print_buf[0] = '0';
 8004ff6:	2114      	movs	r1, #20
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	2230      	movs	r2, #48	@ 0x30
 8004ffc:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8005004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005008:	1879      	adds	r1, r7, r1
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff86 	bl	8004f1c <prints>
 8005010:	0003      	movs	r3, r0
 8005012:	e04e      	b.n	80050b2 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <printi+0x5c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b0a      	cmp	r3, #10
 800501e:	d107      	bne.n	8005030 <printi+0x5c>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	da04      	bge.n	8005030 <printi+0x5c>
		neg = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	4699      	mov	r9, r3
		u = -i;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	425b      	negs	r3, r3
 800502e:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8005030:	2314      	movs	r3, #20
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	340b      	adds	r4, #11
	*s = '\0';
 8005036:	2300      	movs	r3, #0
 8005038:	7023      	strb	r3, [r4, #0]

	while (u) {
 800503a:	e019      	b.n	8005070 <printi+0x9c>
		t = u % b;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0019      	movs	r1, r3
 8005040:	0028      	movs	r0, r5
 8005042:	f7fb f8e7 	bl	8000214 <__aeabi_uidivmod>
 8005046:	000b      	movs	r3, r1
 8005048:	4698      	mov	r8, r3
		if( t >= 10 )
 800504a:	4643      	mov	r3, r8
 800504c:	2b09      	cmp	r3, #9
 800504e:	dd02      	ble.n	8005056 <printi+0x82>
			t += letbase - '0' - 10;
 8005050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005052:	3b3a      	subs	r3, #58	@ 0x3a
 8005054:	4498      	add	r8, r3
		*--s = t + '0';
 8005056:	4643      	mov	r3, r8
 8005058:	b2db      	uxtb	r3, r3
 800505a:	3c01      	subs	r4, #1
 800505c:	3330      	adds	r3, #48	@ 0x30
 800505e:	b2db      	uxtb	r3, r3
 8005060:	7023      	strb	r3, [r4, #0]
		u /= b;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0019      	movs	r1, r3
 8005066:	0028      	movs	r0, r5
 8005068:	f7fb f84e 	bl	8000108 <__udivsi3>
 800506c:	0003      	movs	r3, r0
 800506e:	001d      	movs	r5, r3
	while (u) {
 8005070:	2d00      	cmp	r5, #0
 8005072:	d1e3      	bne.n	800503c <printi+0x68>
	}

	if (neg) {
 8005074:	464b      	mov	r3, r9
 8005076:	2b00      	cmp	r3, #0
 8005078:	d013      	beq.n	80050a2 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800507a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <printi+0xc8>
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	2202      	movs	r2, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d009      	beq.n	800509c <printi+0xc8>
			printchar (out, '-');
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	212d      	movs	r1, #45	@ 0x2d
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff ff21 	bl	8004ed4 <printchar>
			++pc;
 8005092:	3601      	adds	r6, #1
			--width;
 8005094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005096:	3b01      	subs	r3, #1
 8005098:	643b      	str	r3, [r7, #64]	@ 0x40
 800509a:	e002      	b.n	80050a2 <printi+0xce>
		}
		else {
			*--s = '-';
 800509c:	3c01      	subs	r4, #1
 800509e:	232d      	movs	r3, #45	@ 0x2d
 80050a0:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80050a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	0021      	movs	r1, r4
 80050aa:	f7ff ff37 	bl	8004f1c <prints>
 80050ae:	0003      	movs	r3, r0
 80050b0:	18f3      	adds	r3, r6, r3
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b009      	add	sp, #36	@ 0x24
 80050b8:	bcc0      	pop	{r6, r7}
 80050ba:	46b9      	mov	r9, r7
 80050bc:	46b0      	mov	r8, r6
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050c0 <print>:

static int print(char **out, const char *format, va_list args )
{
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	b08b      	sub	sp, #44	@ 0x2c
 80050c4:	af04      	add	r7, sp, #16
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80050cc:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80050ce:	e0c6      	b.n	800525e <print+0x19e>
		if (*format == '%') {
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b25      	cmp	r3, #37	@ 0x25
 80050d6:	d000      	beq.n	80050da <print+0x1a>
 80050d8:	e0b2      	b.n	8005240 <print+0x180>
			++format;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3301      	adds	r3, #1
 80050de:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80050e0:	2600      	movs	r6, #0
 80050e2:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d100      	bne.n	80050ee <print+0x2e>
 80050ec:	e0bd      	b.n	800526a <print+0x1aa>
			if (*format == '%') goto out;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b25      	cmp	r3, #37	@ 0x25
 80050f4:	d100      	bne.n	80050f8 <print+0x38>
 80050f6:	e0a5      	b.n	8005244 <print+0x184>
			if (*format == '-') {
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80050fe:	d10a      	bne.n	8005116 <print+0x56>
				++format;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3301      	adds	r3, #1
 8005104:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8005106:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8005108:	e005      	b.n	8005116 <print+0x56>
				++format;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8005110:	2302      	movs	r3, #2
 8005112:	4333      	orrs	r3, r6
 8005114:	001e      	movs	r6, r3
			while (*format == '0') {
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b30      	cmp	r3, #48	@ 0x30
 800511c:	d0f5      	beq.n	800510a <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800511e:	e00b      	b.n	8005138 <print+0x78>
				width *= 10;
 8005120:	002b      	movs	r3, r5
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	195b      	adds	r3, r3, r5
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	001d      	movs	r5, r3
				width += *format - '0';
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3b30      	subs	r3, #48	@ 0x30
 8005130:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3301      	adds	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b2f      	cmp	r3, #47	@ 0x2f
 800513e:	d903      	bls.n	8005148 <print+0x88>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b39      	cmp	r3, #57	@ 0x39
 8005146:	d9eb      	bls.n	8005120 <print+0x60>
			}
			if( *format == 's' ) {
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b73      	cmp	r3, #115	@ 0x73
 800514e:	d10f      	bne.n	8005170 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800515a:	d000      	beq.n	800515e <print+0x9e>
 800515c:	e000      	b.n	8005160 <print+0xa0>
 800515e:	4949      	ldr	r1, [pc, #292]	@ (8005284 <print+0x1c4>)
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	0033      	movs	r3, r6
 8005164:	002a      	movs	r2, r5
 8005166:	f7ff fed9 	bl	8004f1c <prints>
 800516a:	0003      	movs	r3, r0
 800516c:	18e4      	adds	r4, r4, r3
				continue;
 800516e:	e073      	b.n	8005258 <print+0x198>
			}
			if( *format == 'd' ) {
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b64      	cmp	r3, #100	@ 0x64
 8005176:	d10f      	bne.n	8005198 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	2361      	movs	r3, #97	@ 0x61
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	9601      	str	r6, [sp, #4]
 8005188:	9500      	str	r5, [sp, #0]
 800518a:	2301      	movs	r3, #1
 800518c:	220a      	movs	r2, #10
 800518e:	f7ff ff21 	bl	8004fd4 <printi>
 8005192:	0003      	movs	r3, r0
 8005194:	18e4      	adds	r4, r4, r3
				continue;
 8005196:	e05f      	b.n	8005258 <print+0x198>
			}
			if( *format == 'x' ) {
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b78      	cmp	r3, #120	@ 0x78
 800519e:	d10f      	bne.n	80051c0 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	2361      	movs	r3, #97	@ 0x61
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	9601      	str	r6, [sp, #4]
 80051b0:	9500      	str	r5, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	2210      	movs	r2, #16
 80051b6:	f7ff ff0d 	bl	8004fd4 <printi>
 80051ba:	0003      	movs	r3, r0
 80051bc:	18e4      	adds	r4, r4, r3
				continue;
 80051be:	e04b      	b.n	8005258 <print+0x198>
			}
			if( *format == 'X' ) {
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b58      	cmp	r3, #88	@ 0x58
 80051c6:	d10f      	bne.n	80051e8 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	2341      	movs	r3, #65	@ 0x41
 80051d4:	9302      	str	r3, [sp, #8]
 80051d6:	9601      	str	r6, [sp, #4]
 80051d8:	9500      	str	r5, [sp, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	2210      	movs	r2, #16
 80051de:	f7ff fef9 	bl	8004fd4 <printi>
 80051e2:	0003      	movs	r3, r0
 80051e4:	18e4      	adds	r4, r4, r3
				continue;
 80051e6:	e037      	b.n	8005258 <print+0x198>
			}
			if( *format == 'u' ) {
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b75      	cmp	r3, #117	@ 0x75
 80051ee:	d10f      	bne.n	8005210 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	2361      	movs	r3, #97	@ 0x61
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	9601      	str	r6, [sp, #4]
 8005200:	9500      	str	r5, [sp, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	220a      	movs	r2, #10
 8005206:	f7ff fee5 	bl	8004fd4 <printi>
 800520a:	0003      	movs	r3, r0
 800520c:	18e4      	adds	r4, r4, r3
				continue;
 800520e:	e023      	b.n	8005258 <print+0x198>
			}
			if( *format == 'c' ) {
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b63      	cmp	r3, #99	@ 0x63
 8005216:	d11f      	bne.n	8005258 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	2114      	movs	r1, #20
 8005224:	187b      	adds	r3, r7, r1
 8005226:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8005228:	187b      	adds	r3, r7, r1
 800522a:	2200      	movs	r2, #0
 800522c:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 800522e:	1879      	adds	r1, r7, r1
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	0033      	movs	r3, r6
 8005234:	002a      	movs	r2, r5
 8005236:	f7ff fe71 	bl	8004f1c <prints>
 800523a:	0003      	movs	r3, r0
 800523c:	18e4      	adds	r4, r4, r3
				continue;
 800523e:	e00b      	b.n	8005258 <print+0x198>
			}
		}
		else {
		out:
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	e000      	b.n	8005246 <print+0x186>
			if (*format == '%') goto out;
 8005244:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	001a      	movs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	0011      	movs	r1, r2
 8005250:	0018      	movs	r0, r3
 8005252:	f7ff fe3f 	bl	8004ed4 <printchar>
			++pc;
 8005256:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	3301      	adds	r3, #1
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d000      	beq.n	8005268 <print+0x1a8>
 8005266:	e733      	b.n	80050d0 <print+0x10>
 8005268:	e000      	b.n	800526c <print+0x1ac>
			if (*format == '\0') break;
 800526a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <print+0x1ba>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800527a:	0023      	movs	r3, r4
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b007      	add	sp, #28
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	08005d00 	.word	0x08005d00

08005288 <my_printf>:

int my_printf(const char *format, ...)
{
 8005288:	b40f      	push	{r0, r1, r2, r3}
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8005290:	2314      	movs	r3, #20
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	0019      	movs	r1, r3
 800529c:	2000      	movs	r0, #0
 800529e:	f7ff ff0f 	bl	80050c0 <print>
 80052a2:	0003      	movs	r3, r0
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bc80      	pop	{r7}
 80052ac:	bc08      	pop	{r3}
 80052ae:	b004      	add	sp, #16
 80052b0:	4718      	bx	r3

080052b2 <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 80052b2:	b40e      	push	{r1, r2, r3}
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
        va_list args;
        va_start( args, format );
 80052bc:	2320      	movs	r3, #32
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7ff fef9 	bl	80050c0 <print>
 80052ce:	0003      	movs	r3, r0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b005      	add	sp, #20
 80052d6:	bc80      	pop	{r7}
 80052d8:	bc08      	pop	{r3}
 80052da:	b003      	add	sp, #12
 80052dc:	4718      	bx	r3

080052de <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	af00      	add	r7, sp, #0
}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	e7fd      	b.n	80052ec <HardFault_Handler+0x4>

080052f0 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */

extern xSemaphoreHandle xSem/*, xSem2*/;

void EXTI4_15_IRQHandler() {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]

    if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0) {
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <EXTI4_15_IRQHandler+0x44>)
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	2380      	movs	r3, #128	@ 0x80
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	4013      	ands	r3, r2
 8005304:	d011      	beq.n	800532a <EXTI4_15_IRQHandler+0x3a>
        EXTI->PR = EXTI_PR_PR13;
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <EXTI4_15_IRQHandler+0x44>)
 8005308:	2280      	movs	r2, #128	@ 0x80
 800530a:	0192      	lsls	r2, r2, #6
 800530c:	615a      	str	r2, [r3, #20]
        xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 800530e:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <EXTI4_15_IRQHandler+0x48>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	1d3a      	adds	r2, r7, #4
 8005314:	0011      	movs	r1, r2
 8005316:	0018      	movs	r0, r3
 8005318:	f7fb fb0a 	bl	8000930 <xQueueGiveFromISR>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <EXTI4_15_IRQHandler+0x3a>
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <EXTI4_15_IRQHandler+0x4c>)
 8005324:	2280      	movs	r2, #128	@ 0x80
 8005326:	0552      	lsls	r2, r2, #21
 8005328:	601a      	str	r2, [r3, #0]
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
    }
     *
     */

}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	b002      	add	sp, #8
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	40010400 	.word	0x40010400
 8005338:	20003014 	.word	0x20003014
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <writeTaskInit>:
static void vTaskWrite(void *pvParameters);

static xTaskHandle vTaskWrite_handle;
static xQueueHandle xWriteQueue;

void writeTaskInit(void *pvParameters){
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
    // Create the subscription queue
    xWriteQueue = xQueueCreate(WRITE_QUEUE_LENGTH, sizeof(command_message_t));
 8005348:	2200      	movs	r2, #0
 800534a:	2117      	movs	r1, #23
 800534c:	2005      	movs	r0, #5
 800534e:	f7fb f885 	bl	800045c <xQueueGenericCreate>
 8005352:	0002      	movs	r2, r0
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <writeTaskInit+0x3c>)
 8005356:	601a      	str	r2, [r3, #0]

    xTaskCreate(vTaskWrite, "vTask_Write", 128, NULL, 1, &vTaskWrite_handle);
 8005358:	4909      	ldr	r1, [pc, #36]	@ (8005380 <writeTaskInit+0x40>)
 800535a:	480a      	ldr	r0, [pc, #40]	@ (8005384 <writeTaskInit+0x44>)
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <writeTaskInit+0x48>)
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	2301      	movs	r3, #1
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	2280      	movs	r2, #128	@ 0x80
 8005368:	f7fb fee3 	bl	8001132 <xTaskCreate>

    my_printf("WRITE TASK DEFINED\r\n");
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <writeTaskInit+0x4c>)
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff ff8a 	bl	8005288 <my_printf>
}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000301c 	.word	0x2000301c
 8005380:	08005d08 	.word	0x08005d08
 8005384:	080053b5 	.word	0x080053b5
 8005388:	20003018 	.word	0x20003018
 800538c:	08005d14 	.word	0x08005d14

08005390 <sendMessage>:

BaseType_t sendMessage(command_message_t *message){
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	return xQueueSendToBack(xWriteQueue, &message, 0);
 8005398:	4b05      	ldr	r3, [pc, #20]	@ (80053b0 <sendMessage+0x20>)
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	1d39      	adds	r1, r7, #4
 800539e:	2300      	movs	r3, #0
 80053a0:	2200      	movs	r2, #0
 80053a2:	f7fb f93b 	bl	800061c <xQueueGenericSend>
 80053a6:	0003      	movs	r3, r0
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2000301c 	.word	0x2000301c

080053b4 <vTaskWrite>:

void vTaskWrite(void *pvParameters){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	command_message_t *msgQueue;
	while(1){
		xQueueReceive((xWriteQueue), &msgQueue, portMAX_DELAY);
 80053bc:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <vTaskWrite+0x2c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2201      	movs	r2, #1
 80053c2:	4252      	negs	r2, r2
 80053c4:	210c      	movs	r1, #12
 80053c6:	1879      	adds	r1, r7, r1
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7fb fb93 	bl	8000af4 <xQueueReceive>

		my_printf("%s\r\n", msgQueue);
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <vTaskWrite+0x30>)
 80053d2:	0011      	movs	r1, r2
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7ff ff57 	bl	8005288 <my_printf>
		xQueueReceive((xWriteQueue), &msgQueue, portMAX_DELAY);
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	e7ee      	b.n	80053bc <vTaskWrite+0x8>
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	2000301c 	.word	0x2000301c
 80053e4:	08005d2c 	.word	0x08005d2c

080053e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	0002      	movs	r2, r0
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053f4:	1dfb      	adds	r3, r7, #7
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053fa:	d809      	bhi.n	8005410 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fc:	1dfb      	adds	r3, r7, #7
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	001a      	movs	r2, r3
 8005402:	231f      	movs	r3, #31
 8005404:	401a      	ands	r2, r3
 8005406:	4b04      	ldr	r3, [pc, #16]	@ (8005418 <__NVIC_EnableIRQ+0x30>)
 8005408:	2101      	movs	r1, #1
 800540a:	4091      	lsls	r1, r2
 800540c:	000a      	movs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
  }
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	0002      	movs	r2, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005430:	d828      	bhi.n	8005484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005432:	4a2f      	ldr	r2, [pc, #188]	@ (80054f0 <__NVIC_SetPriority+0xd4>)
 8005434:	1dfb      	adds	r3, r7, #7
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b25b      	sxtb	r3, r3
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	33c0      	adds	r3, #192	@ 0xc0
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	589b      	ldr	r3, [r3, r2]
 8005442:	1dfa      	adds	r2, r7, #7
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	0011      	movs	r1, r2
 8005448:	2203      	movs	r2, #3
 800544a:	400a      	ands	r2, r1
 800544c:	00d2      	lsls	r2, r2, #3
 800544e:	21ff      	movs	r1, #255	@ 0xff
 8005450:	4091      	lsls	r1, r2
 8005452:	000a      	movs	r2, r1
 8005454:	43d2      	mvns	r2, r2
 8005456:	401a      	ands	r2, r3
 8005458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	019b      	lsls	r3, r3, #6
 800545e:	22ff      	movs	r2, #255	@ 0xff
 8005460:	401a      	ands	r2, r3
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	0018      	movs	r0, r3
 8005468:	2303      	movs	r3, #3
 800546a:	4003      	ands	r3, r0
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005470:	481f      	ldr	r0, [pc, #124]	@ (80054f0 <__NVIC_SetPriority+0xd4>)
 8005472:	1dfb      	adds	r3, r7, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b25b      	sxtb	r3, r3
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	430a      	orrs	r2, r1
 800547c:	33c0      	adds	r3, #192	@ 0xc0
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005482:	e031      	b.n	80054e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005484:	4a1b      	ldr	r2, [pc, #108]	@ (80054f4 <__NVIC_SetPriority+0xd8>)
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	0019      	movs	r1, r3
 800548c:	230f      	movs	r3, #15
 800548e:	400b      	ands	r3, r1
 8005490:	3b08      	subs	r3, #8
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	3306      	adds	r3, #6
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	3304      	adds	r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1dfa      	adds	r2, r7, #7
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	0011      	movs	r1, r2
 80054a4:	2203      	movs	r2, #3
 80054a6:	400a      	ands	r2, r1
 80054a8:	00d2      	lsls	r2, r2, #3
 80054aa:	21ff      	movs	r1, #255	@ 0xff
 80054ac:	4091      	lsls	r1, r2
 80054ae:	000a      	movs	r2, r1
 80054b0:	43d2      	mvns	r2, r2
 80054b2:	401a      	ands	r2, r3
 80054b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	22ff      	movs	r2, #255	@ 0xff
 80054bc:	401a      	ands	r2, r3
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	0018      	movs	r0, r3
 80054c4:	2303      	movs	r3, #3
 80054c6:	4003      	ands	r3, r0
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054cc:	4809      	ldr	r0, [pc, #36]	@ (80054f4 <__NVIC_SetPriority+0xd8>)
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	001c      	movs	r4, r3
 80054d4:	230f      	movs	r3, #15
 80054d6:	4023      	ands	r3, r4
 80054d8:	3b08      	subs	r3, #8
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	430a      	orrs	r2, r1
 80054de:	3306      	adds	r3, #6
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18c3      	adds	r3, r0, r3
 80054e4:	3304      	adds	r3, #4
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b003      	add	sp, #12
 80054ee:	bd90      	pop	{r4, r7, pc}
 80054f0:	e000e100 	.word	0xe000e100
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80054fc:	4b22      	ldr	r3, [pc, #136]	@ (8005588 <BSP_LED_Init+0x90>)
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	4b21      	ldr	r3, [pc, #132]	@ (8005588 <BSP_LED_Init+0x90>)
 8005502:	2180      	movs	r1, #128	@ 0x80
 8005504:	0289      	lsls	r1, r1, #10
 8005506:	430a      	orrs	r2, r1
 8005508:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800550a:	2390      	movs	r3, #144	@ 0x90
 800550c:	05db      	lsls	r3, r3, #23
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	2390      	movs	r3, #144	@ 0x90
 8005512:	05db      	lsls	r3, r3, #23
 8005514:	491d      	ldr	r1, [pc, #116]	@ (800558c <BSP_LED_Init+0x94>)
 8005516:	400a      	ands	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 800551a:	2390      	movs	r3, #144	@ 0x90
 800551c:	05db      	lsls	r3, r3, #23
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	2390      	movs	r3, #144	@ 0x90
 8005522:	05db      	lsls	r3, r3, #23
 8005524:	2180      	movs	r1, #128	@ 0x80
 8005526:	00c9      	lsls	r1, r1, #3
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 800552c:	2390      	movs	r3, #144	@ 0x90
 800552e:	05db      	lsls	r3, r3, #23
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	2390      	movs	r3, #144	@ 0x90
 8005534:	05db      	lsls	r3, r3, #23
 8005536:	2120      	movs	r1, #32
 8005538:	438a      	bics	r2, r1
 800553a:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 800553c:	2390      	movs	r3, #144	@ 0x90
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	2390      	movs	r3, #144	@ 0x90
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	4911      	ldr	r1, [pc, #68]	@ (800558c <BSP_LED_Init+0x94>)
 8005548:	400a      	ands	r2, r1
 800554a:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 800554c:	2390      	movs	r3, #144	@ 0x90
 800554e:	05db      	lsls	r3, r3, #23
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	2390      	movs	r3, #144	@ 0x90
 8005554:	05db      	lsls	r3, r3, #23
 8005556:	21c0      	movs	r1, #192	@ 0xc0
 8005558:	0109      	lsls	r1, r1, #4
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800555e:	2390      	movs	r3, #144	@ 0x90
 8005560:	05db      	lsls	r3, r3, #23
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	2390      	movs	r3, #144	@ 0x90
 8005566:	05db      	lsls	r3, r3, #23
 8005568:	4908      	ldr	r1, [pc, #32]	@ (800558c <BSP_LED_Init+0x94>)
 800556a:	400a      	ands	r2, r1
 800556c:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800556e:	2390      	movs	r3, #144	@ 0x90
 8005570:	05db      	lsls	r3, r3, #23
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	2390      	movs	r3, #144	@ 0x90
 8005576:	05db      	lsls	r3, r3, #23
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	0389      	lsls	r1, r1, #14
 800557c:	430a      	orrs	r2, r1
 800557e:	619a      	str	r2, [r3, #24]
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	40021000 	.word	0x40021000
 800558c:	fffff3ff 	.word	0xfffff3ff

08005590 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8005594:	4b1f      	ldr	r3, [pc, #124]	@ (8005614 <BSP_PB_Init+0x84>)
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <BSP_PB_Init+0x84>)
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	0309      	lsls	r1, r1, #12
 800559e:	430a      	orrs	r2, r1
 80055a0:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <BSP_PB_Init+0x88>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <BSP_PB_Init+0x88>)
 80055a8:	491c      	ldr	r1, [pc, #112]	@ (800561c <BSP_PB_Init+0x8c>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80055ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005618 <BSP_PB_Init+0x88>)
 80055b0:	4b19      	ldr	r3, [pc, #100]	@ (8005618 <BSP_PB_Init+0x88>)
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80055b6:	4b18      	ldr	r3, [pc, #96]	@ (8005618 <BSP_PB_Init+0x88>)
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	4b17      	ldr	r3, [pc, #92]	@ (8005618 <BSP_PB_Init+0x88>)
 80055bc:	4917      	ldr	r1, [pc, #92]	@ (800561c <BSP_PB_Init+0x8c>)
 80055be:	400a      	ands	r2, r1
 80055c0:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <BSP_PB_Init+0x84>)
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	4b13      	ldr	r3, [pc, #76]	@ (8005614 <BSP_PB_Init+0x84>)
 80055c8:	2101      	movs	r1, #1
 80055ca:	430a      	orrs	r2, r1
 80055cc:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 80055ce:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <BSP_PB_Init+0x90>)
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <BSP_PB_Init+0x90>)
 80055d4:	21f0      	movs	r1, #240	@ 0xf0
 80055d6:	438a      	bics	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 80055da:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <BSP_PB_Init+0x90>)
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <BSP_PB_Init+0x90>)
 80055e0:	2120      	movs	r1, #32
 80055e2:	430a      	orrs	r2, r1
 80055e4:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <BSP_PB_Init+0x94>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <BSP_PB_Init+0x94>)
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	0189      	lsls	r1, r1, #6
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <BSP_PB_Init+0x94>)
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <BSP_PB_Init+0x94>)
 80055fa:	490b      	ldr	r1, [pc, #44]	@ (8005628 <BSP_PB_Init+0x98>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8005600:	4b08      	ldr	r3, [pc, #32]	@ (8005624 <BSP_PB_Init+0x94>)
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <BSP_PB_Init+0x94>)
 8005606:	2180      	movs	r1, #128	@ 0x80
 8005608:	0189      	lsls	r1, r1, #6
 800560a:	430a      	orrs	r2, r1
 800560c:	60da      	str	r2, [r3, #12]
}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	48000800 	.word	0x48000800
 800561c:	f3ffffff 	.word	0xf3ffffff
 8005620:	40010000 	.word	0x40010000
 8005624:	40010400 	.word	0x40010400
 8005628:	ffffdfff 	.word	0xffffdfff

0800562c <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8005630:	4b2a      	ldr	r3, [pc, #168]	@ (80056dc <BSP_Console_Init+0xb0>)
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	4b29      	ldr	r3, [pc, #164]	@ (80056dc <BSP_Console_Init+0xb0>)
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	0289      	lsls	r1, r1, #10
 800563a:	430a      	orrs	r2, r1
 800563c:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 800563e:	2390      	movs	r3, #144	@ 0x90
 8005640:	05db      	lsls	r3, r3, #23
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2390      	movs	r3, #144	@ 0x90
 8005646:	05db      	lsls	r3, r3, #23
 8005648:	21f0      	movs	r1, #240	@ 0xf0
 800564a:	438a      	bics	r2, r1
 800564c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 800564e:	2390      	movs	r3, #144	@ 0x90
 8005650:	05db      	lsls	r3, r3, #23
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2390      	movs	r3, #144	@ 0x90
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	21a0      	movs	r1, #160	@ 0xa0
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 800565e:	2390      	movs	r3, #144	@ 0x90
 8005660:	05db      	lsls	r3, r3, #23
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	2390      	movs	r3, #144	@ 0x90
 8005666:	05db      	lsls	r3, r3, #23
 8005668:	491d      	ldr	r1, [pc, #116]	@ (80056e0 <BSP_Console_Init+0xb4>)
 800566a:	400a      	ands	r2, r1
 800566c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800566e:	2390      	movs	r3, #144	@ 0x90
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	2390      	movs	r3, #144	@ 0x90
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	2188      	movs	r1, #136	@ 0x88
 800567a:	0149      	lsls	r1, r1, #5
 800567c:	430a      	orrs	r2, r1
 800567e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8005680:	4b16      	ldr	r3, [pc, #88]	@ (80056dc <BSP_Console_Init+0xb0>)
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <BSP_Console_Init+0xb0>)
 8005686:	2180      	movs	r1, #128	@ 0x80
 8005688:	0289      	lsls	r1, r1, #10
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800568e:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <BSP_Console_Init+0xb8>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8005694:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <BSP_Console_Init+0xb8>)
 8005696:	2200      	movs	r2, #0
 8005698:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <BSP_Console_Init+0xb8>)
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <BSP_Console_Init+0xb0>)
 80056a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a4:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <BSP_Console_Init+0xb0>)
 80056a6:	4910      	ldr	r1, [pc, #64]	@ (80056e8 <BSP_Console_Init+0xbc>)
 80056a8:	400a      	ands	r2, r1
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
	// USART2->BRR = 833;

	// Baud Rate = 9600
	// With OVER8=0 and Fck=48MHz, USARTDIV = 48E6/9600 = 5000
	// BRR = 5000
	USART2->CR1 &= ~USART_CR1_OVER8;
 80056ac:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056b2:	490e      	ldr	r1, [pc, #56]	@ (80056ec <BSP_Console_Init+0xc0>)
 80056b4:	400a      	ands	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
	USART2->BRR = 5000;
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056ba:	4a0d      	ldr	r2, [pc, #52]	@ (80056f0 <BSP_Console_Init+0xc4>)
 80056bc:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80056be:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056c4:	210c      	movs	r1, #12
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <BSP_Console_Init+0xb8>)
 80056d0:	2101      	movs	r1, #1
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	ffff00ff 	.word	0xffff00ff
 80056e4:	40004400 	.word	0x40004400
 80056e8:	fffcffff 	.word	0xfffcffff
 80056ec:	ffff7fff 	.word	0xffff7fff
 80056f0:	00001388 	.word	0x00001388

080056f4 <BSP_NVIC_Init>:
/*
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */
void BSP_NVIC_Init()
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
    // Configura linha 13 (botao 1)
    SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13_Msk; // Configura a porta do EXTI13
 80056f8:	4b18      	ldr	r3, [pc, #96]	@ (800575c <BSP_NVIC_Init+0x68>)
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	4b17      	ldr	r3, [pc, #92]	@ (800575c <BSP_NVIC_Init+0x68>)
 80056fe:	21f0      	movs	r1, #240	@ 0xf0
 8005700:	438a      	bics	r2, r1
 8005702:	615a      	str	r2, [r3, #20]
    EXTI->IMR |= EXTI_IMR_MR13;                     // Habilita a interrupcao para a linha 13
 8005704:	4b16      	ldr	r3, [pc, #88]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b15      	ldr	r3, [pc, #84]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	0189      	lsls	r1, r1, #6
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
    EXTI->RTSR |= EXTI_RTSR_TR13;                   // Habilita trigger na borda de subida
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	4b12      	ldr	r3, [pc, #72]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 8005718:	2180      	movs	r1, #128	@ 0x80
 800571a:	0189      	lsls	r1, r1, #6
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]

    // Configura linha 14 (botao 2)
    SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI14_Msk; // Configura a porta do EXTI14
 8005720:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <BSP_NVIC_Init+0x68>)
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	4b0d      	ldr	r3, [pc, #52]	@ (800575c <BSP_NVIC_Init+0x68>)
 8005726:	490f      	ldr	r1, [pc, #60]	@ (8005764 <BSP_NVIC_Init+0x70>)
 8005728:	400a      	ands	r2, r1
 800572a:	615a      	str	r2, [r3, #20]
    EXTI->IMR |= EXTI_IMR_MR14;                     // Habilita a interrupcao para a linha 14
 800572c:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 8005732:	2180      	movs	r1, #128	@ 0x80
 8005734:	01c9      	lsls	r1, r1, #7
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
    EXTI->RTSR |= EXTI_RTSR_TR14;                   // Habilita trigger na borda de subida
 800573a:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <BSP_NVIC_Init+0x6c>)
 8005740:	2180      	movs	r1, #128	@ 0x80
 8005742:	01c9      	lsls	r1, r1, #7
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]


	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn,
 8005748:	2106      	movs	r1, #6
 800574a:	2007      	movs	r0, #7
 800574c:	f7ff fe66 	bl	800541c <__NVIC_SetPriority>
			configMAX_API_CALL_INTERRUPT_PRIORITY + 1);

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005750:	2007      	movs	r0, #7
 8005752:	f7ff fe49 	bl	80053e8 <__NVIC_EnableIRQ>
}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40010000 	.word	0x40010000
 8005760:	40010400 	.word	0x40010400
 8005764:	fffff0ff 	.word	0xfffff0ff

08005768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005768:	480d      	ldr	r0, [pc, #52]	@ (80057a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800576a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800576c:	f000 f825 	bl	80057ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005770:	480c      	ldr	r0, [pc, #48]	@ (80057a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005772:	490d      	ldr	r1, [pc, #52]	@ (80057a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005774:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <LoopForever+0xe>)
  movs r3, #0
 8005776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005778:	e002      	b.n	8005780 <LoopCopyDataInit>

0800577a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800577a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800577c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800577e:	3304      	adds	r3, #4

08005780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005784:	d3f9      	bcc.n	800577a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005786:	4a0a      	ldr	r2, [pc, #40]	@ (80057b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005788:	4c0a      	ldr	r4, [pc, #40]	@ (80057b4 <LoopForever+0x16>)
  movs r3, #0
 800578a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800578c:	e001      	b.n	8005792 <LoopFillZerobss>

0800578e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800578e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005790:	3204      	adds	r2, #4

08005792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005794:	d3fb      	bcc.n	800578e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005796:	f000 f8a3 	bl	80058e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800579a:	f7ff fa39 	bl	8004c10 <main>

0800579e <LoopForever>:

LoopForever:
    b LoopForever
 800579e:	e7fe      	b.n	800579e <LoopForever>
  ldr   r0, =_estack
 80057a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80057a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80057ac:	08005dc4 	.word	0x08005dc4
  ldr r2, =_sbss
 80057b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80057b4:	20003020 	.word	0x20003020

080057b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057b8:	e7fe      	b.n	80057b8 <ADC1_COMP_IRQHandler>

080057ba <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	2300      	movs	r3, #0
 80057d8:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80057da:	4b38      	ldr	r3, [pc, #224]	@ (80058bc <SystemCoreClockUpdate+0xf8>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	220c      	movs	r2, #12
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d011      	beq.n	800580e <SystemCoreClockUpdate+0x4a>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d84f      	bhi.n	8005890 <SystemCoreClockUpdate+0xcc>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <SystemCoreClockUpdate+0x3a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d004      	beq.n	8005806 <SystemCoreClockUpdate+0x42>
 80057fc:	e048      	b.n	8005890 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80057fe:	4b30      	ldr	r3, [pc, #192]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 8005800:	4a30      	ldr	r2, [pc, #192]	@ (80058c4 <SystemCoreClockUpdate+0x100>)
 8005802:	601a      	str	r2, [r3, #0]
      break;
 8005804:	e048      	b.n	8005898 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8005806:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 8005808:	4a2e      	ldr	r2, [pc, #184]	@ (80058c4 <SystemCoreClockUpdate+0x100>)
 800580a:	601a      	str	r2, [r3, #0]
      break;
 800580c:	e044      	b.n	8005898 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800580e:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <SystemCoreClockUpdate+0xf8>)
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	23f0      	movs	r3, #240	@ 0xf0
 8005814:	039b      	lsls	r3, r3, #14
 8005816:	4013      	ands	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800581a:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <SystemCoreClockUpdate+0xf8>)
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	23c0      	movs	r3, #192	@ 0xc0
 8005820:	025b      	lsls	r3, r3, #9
 8005822:	4013      	ands	r3, r2
 8005824:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	0c9b      	lsrs	r3, r3, #18
 800582a:	3302      	adds	r3, #2
 800582c:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <SystemCoreClockUpdate+0xf8>)
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	220f      	movs	r2, #15
 8005834:	4013      	ands	r3, r2
 8005836:	3301      	adds	r3, #1
 8005838:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	025b      	lsls	r3, r3, #9
 8005840:	429a      	cmp	r2, r3
 8005842:	d10a      	bne.n	800585a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	481f      	ldr	r0, [pc, #124]	@ (80058c4 <SystemCoreClockUpdate+0x100>)
 8005848:	f7fa fc5e 	bl	8000108 <__udivsi3>
 800584c:	0003      	movs	r3, r0
 800584e:	001a      	movs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	435a      	muls	r2, r3
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 8005856:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8005858:	e01e      	b.n	8005898 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	23c0      	movs	r3, #192	@ 0xc0
 800585e:	025b      	lsls	r3, r3, #9
 8005860:	429a      	cmp	r2, r3
 8005862:	d10a      	bne.n	800587a <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	4818      	ldr	r0, [pc, #96]	@ (80058c8 <SystemCoreClockUpdate+0x104>)
 8005868:	f7fa fc4e 	bl	8000108 <__udivsi3>
 800586c:	0003      	movs	r3, r0
 800586e:	001a      	movs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	435a      	muls	r2, r3
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 8005876:	601a      	str	r2, [r3, #0]
      break;
 8005878:	e00e      	b.n	8005898 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	4811      	ldr	r0, [pc, #68]	@ (80058c4 <SystemCoreClockUpdate+0x100>)
 800587e:	f7fa fc43 	bl	8000108 <__udivsi3>
 8005882:	0003      	movs	r3, r0
 8005884:	001a      	movs	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	435a      	muls	r2, r3
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 800588c:	601a      	str	r2, [r3, #0]
      break;
 800588e:	e003      	b.n	8005898 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 8005892:	4a0c      	ldr	r2, [pc, #48]	@ (80058c4 <SystemCoreClockUpdate+0x100>)
 8005894:	601a      	str	r2, [r3, #0]
      break;
 8005896:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005898:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <SystemCoreClockUpdate+0xf8>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	220f      	movs	r2, #15
 80058a0:	4013      	ands	r3, r2
 80058a2:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <SystemCoreClockUpdate+0x108>)
 80058a4:	5cd3      	ldrb	r3, [r2, r3]
 80058a6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	40da      	lsrs	r2, r3
 80058b0:	4b03      	ldr	r3, [pc, #12]	@ (80058c0 <SystemCoreClockUpdate+0xfc>)
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	46c0      	nop			@ (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b004      	add	sp, #16
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	20000008 	.word	0x20000008
 80058c4:	007a1200 	.word	0x007a1200
 80058c8:	02dc6c00 	.word	0x02dc6c00
 80058cc:	08005dac 	.word	0x08005dac

080058d0 <memset>:
 80058d0:	0003      	movs	r3, r0
 80058d2:	1882      	adds	r2, r0, r2
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	7019      	strb	r1, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <__libc_init_array>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	2600      	movs	r6, #0
 80058e4:	4c0c      	ldr	r4, [pc, #48]	@ (8005918 <__libc_init_array+0x38>)
 80058e6:	4d0d      	ldr	r5, [pc, #52]	@ (800591c <__libc_init_array+0x3c>)
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	42a6      	cmp	r6, r4
 80058ee:	d109      	bne.n	8005904 <__libc_init_array+0x24>
 80058f0:	2600      	movs	r6, #0
 80058f2:	f000 f823 	bl	800593c <_init>
 80058f6:	4c0a      	ldr	r4, [pc, #40]	@ (8005920 <__libc_init_array+0x40>)
 80058f8:	4d0a      	ldr	r5, [pc, #40]	@ (8005924 <__libc_init_array+0x44>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	42a6      	cmp	r6, r4
 8005900:	d105      	bne.n	800590e <__libc_init_array+0x2e>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	00b3      	lsls	r3, r6, #2
 8005906:	58eb      	ldr	r3, [r5, r3]
 8005908:	4798      	blx	r3
 800590a:	3601      	adds	r6, #1
 800590c:	e7ee      	b.n	80058ec <__libc_init_array+0xc>
 800590e:	00b3      	lsls	r3, r6, #2
 8005910:	58eb      	ldr	r3, [r5, r3]
 8005912:	4798      	blx	r3
 8005914:	3601      	adds	r6, #1
 8005916:	e7f2      	b.n	80058fe <__libc_init_array+0x1e>
 8005918:	08005dbc 	.word	0x08005dbc
 800591c:	08005dbc 	.word	0x08005dbc
 8005920:	08005dc0 	.word	0x08005dc0
 8005924:	08005dbc 	.word	0x08005dbc

08005928 <memcpy>:
 8005928:	2300      	movs	r3, #0
 800592a:	b510      	push	{r4, lr}
 800592c:	429a      	cmp	r2, r3
 800592e:	d100      	bne.n	8005932 <memcpy+0xa>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	5ccc      	ldrb	r4, [r1, r3]
 8005934:	54c4      	strb	r4, [r0, r3]
 8005936:	3301      	adds	r3, #1
 8005938:	e7f8      	b.n	800592c <memcpy+0x4>
	...

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
