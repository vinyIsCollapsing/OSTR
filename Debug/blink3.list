
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08007024  08007024  00008024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08007778  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000307c  2000000c  08007784  0000900c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003088  08007784  00009088  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e854  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003585  00000000  00000000  00017888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  0001ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000995  00000000  00000000  0001bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000070de  00000000  00000000  0001c495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001aa3b  00000000  00000000  00023573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007958e  00000000  00000000  0003dfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000b753c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a04  00000000  00000000  000b7580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  000b9f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800700c 	.word	0x0800700c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800700c 	.word	0x0800700c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800033a:	2301      	movs	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d106      	bne.n	8000356 <xQueueGenericReset+0x26>
 8000348:	2397      	movs	r3, #151	@ 0x97
 800034a:	005a      	lsls	r2, r3, #1
 800034c:	4b42      	ldr	r3, [pc, #264]	@ (8000458 <xQueueGenericReset+0x128>)
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f006 f8d1 	bl	80064f8 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <xQueueGenericReset+0x2e>
 800035c:	e06a      	b.n	8000434 <xQueueGenericReset+0x104>
        ( pxQueue->uxLength >= 1U ) &&
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000362:	2b00      	cmp	r3, #0
 8000364:	d066      	beq.n	8000434 <xQueueGenericReset+0x104>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800036e:	2400      	movs	r4, #0
 8000370:	0c15      	lsrs	r5, r2, #16
 8000372:	0c19      	lsrs	r1, r3, #16
 8000374:	b2a8      	uxth	r0, r5
 8000376:	2800      	cmp	r0, #0
 8000378:	d104      	bne.n	8000384 <xQueueGenericReset+0x54>
 800037a:	b288      	uxth	r0, r1
 800037c:	2800      	cmp	r0, #0
 800037e:	d013      	beq.n	80003a8 <xQueueGenericReset+0x78>
 8000380:	1c10      	adds	r0, r2, #0
 8000382:	e004      	b.n	800038e <xQueueGenericReset+0x5e>
 8000384:	b289      	uxth	r1, r1
 8000386:	2900      	cmp	r1, #0
 8000388:	d10d      	bne.n	80003a6 <xQueueGenericReset+0x76>
 800038a:	1c29      	adds	r1, r5, #0
 800038c:	1c18      	adds	r0, r3, #0
 800038e:	b292      	uxth	r2, r2
 8000390:	b29b      	uxth	r3, r3
 8000392:	435a      	muls	r2, r3
 8000394:	b283      	uxth	r3, r0
 8000396:	b289      	uxth	r1, r1
 8000398:	434b      	muls	r3, r1
 800039a:	0c12      	lsrs	r2, r2, #16
 800039c:	189b      	adds	r3, r3, r2
 800039e:	141b      	asrs	r3, r3, #16
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d000      	beq.n	80003a8 <xQueueGenericReset+0x78>
 80003a6:	2401      	movs	r4, #1
 80003a8:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003aa:	d143      	bne.n	8000434 <xQueueGenericReset+0x104>
    {
        taskENTER_CRITICAL();
 80003ac:	f002 fc90 	bl	8002cd0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	434b      	muls	r3, r1
 80003be:	18d2      	adds	r2, r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	2200      	movs	r2, #0
 80003c8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003da:	1e59      	subs	r1, r3, #1
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	434b      	muls	r3, r1
 80003e2:	18d2      	adds	r2, r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2244      	movs	r2, #68	@ 0x44
 80003ec:	21ff      	movs	r1, #255	@ 0xff
 80003ee:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2245      	movs	r2, #69	@ 0x45
 80003f4:	21ff      	movs	r1, #255	@ 0xff
 80003f6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10d      	bne.n	800041a <xQueueGenericReset+0xea>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d013      	beq.n	800042e <xQueueGenericReset+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	3310      	adds	r3, #16
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fce6 	bl	8001ddc <xTaskRemoveFromEventList>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d00c      	beq.n	800042e <xQueueGenericReset+0xfe>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000414:	f002 fc4c 	bl	8002cb0 <vPortYield>
 8000418:	e009      	b.n	800042e <xQueueGenericReset+0xfe>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3310      	adds	r3, #16
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	3324      	adds	r3, #36	@ 0x24
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef9 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800042e:	f002 fc61 	bl	8002cf4 <vPortExitCritical>
 8000432:	e001      	b.n	8000438 <xQueueGenericReset+0x108>
    }
    else
    {
        xReturn = pdFAIL;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d107      	bne.n	800044e <xQueueGenericReset+0x11e>
 800043e:	2364      	movs	r3, #100	@ 0x64
 8000440:	33ff      	adds	r3, #255	@ 0xff
 8000442:	001a      	movs	r2, r3
 8000444:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <xQueueGenericReset+0x128>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f006 f855 	bl	80064f8 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}
 8000458:	08007024 	.word	0x08007024

0800045c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af02      	add	r7, sp, #8
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d100      	bne.n	8000476 <xQueueGenericCreate+0x1a>
 8000474:	e06d      	b.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000476:	2000      	movs	r0, #0
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0c19      	lsrs	r1, r3, #16
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c1e      	adds	r6, r3, #0
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	0c1b      	lsrs	r3, r3, #16
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	1c15      	adds	r5, r2, #0
 8000488:	b28a      	uxth	r2, r1
 800048a:	2a00      	cmp	r2, #0
 800048c:	d105      	bne.n	800049a <xQueueGenericCreate+0x3e>
 800048e:	b29a      	uxth	r2, r3
 8000490:	2a00      	cmp	r2, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericCreate+0x60>
 8000494:	1c19      	adds	r1, r3, #0
 8000496:	1c34      	adds	r4, r6, #0
 8000498:	e003      	b.n	80004a2 <xQueueGenericCreate+0x46>
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10c      	bne.n	80004ba <xQueueGenericCreate+0x5e>
 80004a0:	1c2c      	adds	r4, r5, #0
 80004a2:	b2b3      	uxth	r3, r6
 80004a4:	b2aa      	uxth	r2, r5
 80004a6:	435a      	muls	r2, r3
 80004a8:	b2a3      	uxth	r3, r4
 80004aa:	b289      	uxth	r1, r1
 80004ac:	434b      	muls	r3, r1
 80004ae:	0c12      	lsrs	r2, r2, #16
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	141b      	asrs	r3, r3, #16
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d000      	beq.n	80004bc <xQueueGenericCreate+0x60>
 80004ba:	2001      	movs	r0, #1
 80004bc:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004be:	d148      	bne.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004c6:	3351      	adds	r3, #81	@ 0x51
 80004c8:	d843      	bhi.n	8000552 <xQueueGenericCreate+0xf6>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4353      	muls	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004d2:	69bb      	ldr	r3, [r7, #24]
 80004d4:	3350      	adds	r3, #80	@ 0x50
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fc9a 	bl	8002e10 <pvPortMalloc>
 80004dc:	0003      	movs	r3, r0
 80004de:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00f      	beq.n	8000506 <xQueueGenericCreate+0xaa>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3350      	adds	r3, #80	@ 0x50
 80004ee:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	781c      	ldrb	r4, [r3, #0]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	0023      	movs	r3, r4
 8000500:	f000 f83a 	bl	8000578 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000504:	e030      	b.n	8000568 <xQueueGenericCreate+0x10c>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d01b      	beq.n	8000546 <xQueueGenericCreate+0xea>
 800050e:	dc2b      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000510:	2b03      	cmp	r3, #3
 8000512:	d00c      	beq.n	800052e <xQueueGenericCreate+0xd2>
 8000514:	dc28      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <xQueueGenericCreate+0xc4>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d00d      	beq.n	800053a <xQueueGenericCreate+0xde>
            if( pxNewQueue != NULL )
 800051e:	e023      	b.n	8000568 <xQueueGenericCreate+0x10c>
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	2041      	movs	r0, #65	@ 0x41
 8000528:	f003 fc66 	bl	8003df8 <xTraceEventCreate2>
 800052c:	e010      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2042      	movs	r0, #66	@ 0x42
 8000534:	f003 fc60 	bl	8003df8 <xTraceEventCreate2>
 8000538:	e00a      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2043      	movs	r0, #67	@ 0x43
 8000540:	f003 fc5a 	bl	8003df8 <xTraceEventCreate2>
 8000544:	e004      	b.n	8000550 <xQueueGenericCreate+0xf4>
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2047      	movs	r0, #71	@ 0x47
 800054c:	f003 fc54 	bl	8003df8 <xTraceEventCreate2>
            if( pxNewQueue != NULL )
 8000550:	e00a      	b.n	8000568 <xQueueGenericCreate+0x10c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d108      	bne.n	800056a <xQueueGenericCreate+0x10e>
 8000558:	23f2      	movs	r3, #242	@ 0xf2
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <xQueueGenericCreate+0x118>)
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f005 ffc9 	bl	80064f8 <vAssertCalled>
 8000566:	e000      	b.n	800056a <xQueueGenericCreate+0x10e>
            if( pxNewQueue != NULL )
 8000568:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800056a:	69fb      	ldr	r3, [r7, #28]
    }
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	08007024 	.word	0x08007024

08000578 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	001a      	movs	r2, r3
 8000586:	1cfb      	adds	r3, r7, #3
 8000588:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d103      	bne.n	8000598 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e002      	b.n	800059e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff febe 	bl	8000330 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	214c      	movs	r1, #76	@ 0x4c
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	224c      	movs	r2, #76	@ 0x4c
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d01d      	beq.n	8000604 <prvInitialiseNewQueue+0x8c>
 80005c8:	dc22      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d00c      	beq.n	80005e8 <prvInitialiseNewQueue+0x70>
 80005ce:	dc1f      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <prvInitialiseNewQueue+0x62>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00e      	beq.n	80005f6 <prvInitialiseNewQueue+0x7e>
}
 80005d8:	e01a      	b.n	8000610 <prvInitialiseNewQueue+0x98>
    traceQUEUE_CREATE( pxNewQueue );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005de:	69b9      	ldr	r1, [r7, #24]
 80005e0:	2011      	movs	r0, #17
 80005e2:	f004 fc1d 	bl	8004e20 <xTraceObjectRegisterWithoutHandle>
 80005e6:	e013      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005ea:	69b9      	ldr	r1, [r7, #24]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2012      	movs	r0, #18
 80005f0:	f004 fc16 	bl	8004e20 <xTraceObjectRegisterWithoutHandle>
 80005f4:	e00c      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2013      	movs	r0, #19
 80005fe:	f004 fc0f 	bl	8004e20 <xTraceObjectRegisterWithoutHandle>
 8000602:	e005      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 8000606:	69b9      	ldr	r1, [r7, #24]
 8000608:	2300      	movs	r3, #0
 800060a:	2017      	movs	r0, #23
 800060c:	f004 fc08 	bl	8004e20 <xTraceObjectRegisterWithoutHandle>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08007038 	.word	0x08007038

0800061c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d106      	bne.n	8000646 <xQueueGenericSend+0x2a>
 8000638:	23d3      	movs	r3, #211	@ 0xd3
 800063a:	009a      	lsls	r2, r3, #2
 800063c:	4bb3      	ldr	r3, [pc, #716]	@ (800090c <xQueueGenericSend+0x2f0>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f005 ff59 	bl	80064f8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <xQueueGenericSend+0x38>
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <xQueueGenericSend+0x3c>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <xQueueGenericSend+0x3e>
 8000658:	2300      	movs	r3, #0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <xQueueGenericSend+0x4e>
 800065e:	4aac      	ldr	r2, [pc, #688]	@ (8000910 <xQueueGenericSend+0x2f4>)
 8000660:	4baa      	ldr	r3, [pc, #680]	@ (800090c <xQueueGenericSend+0x2f0>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f005 ff47 	bl	80064f8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d103      	bne.n	8000678 <xQueueGenericSend+0x5c>
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000674:	2b01      	cmp	r3, #1
 8000676:	d101      	bne.n	800067c <xQueueGenericSend+0x60>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <xQueueGenericSend+0x62>
 800067c:	2300      	movs	r3, #0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d105      	bne.n	800068e <xQueueGenericSend+0x72>
 8000682:	4aa4      	ldr	r2, [pc, #656]	@ (8000914 <xQueueGenericSend+0x2f8>)
 8000684:	4ba1      	ldr	r3, [pc, #644]	@ (800090c <xQueueGenericSend+0x2f0>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f005 ff35 	bl	80064f8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800068e:	f001 fd93 	bl	80021b8 <xTaskGetSchedulerState>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d102      	bne.n	800069c <xQueueGenericSend+0x80>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <xQueueGenericSend+0x84>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <xQueueGenericSend+0x86>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <xQueueGenericSend+0x96>
 80006a6:	4a9c      	ldr	r2, [pc, #624]	@ (8000918 <xQueueGenericSend+0x2fc>)
 80006a8:	4b98      	ldr	r3, [pc, #608]	@ (800090c <xQueueGenericSend+0x2f0>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f005 ff23 	bl	80064f8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006b2:	f002 fb0d 	bl	8002cd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006be:	429a      	cmp	r2, r3
 80006c0:	d302      	bcc.n	80006c8 <xQueueGenericSend+0xac>
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d14f      	bne.n	8000768 <xQueueGenericSend+0x14c>
            {
                traceQUEUE_SEND( pxQueue );
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	224c      	movs	r2, #76	@ 0x4c
 80006cc:	5c9b      	ldrb	r3, [r3, r2]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d026      	beq.n	8000720 <xQueueGenericSend+0x104>
 80006d2:	dc2a      	bgt.n	800072a <xQueueGenericSend+0x10e>
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	dc28      	bgt.n	800072a <xQueueGenericSend+0x10e>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	da12      	bge.n	8000702 <xQueueGenericSend+0xe6>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <xQueueGenericSend+0xca>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d017      	beq.n	8000714 <xQueueGenericSend+0xf8>
 80006e4:	e021      	b.n	800072a <xQueueGenericSend+0x10e>
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <xQueueGenericSend+0xd4>
 80006ec:	2050      	movs	r0, #80	@ 0x50
 80006ee:	e000      	b.n	80006f2 <xQueueGenericSend+0xd6>
 80006f0:	20c0      	movs	r0, #192	@ 0xc0
 80006f2:	6a39      	ldr	r1, [r7, #32]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f8:	3301      	adds	r3, #1
 80006fa:	001a      	movs	r2, r3
 80006fc:	f003 fb7c 	bl	8003df8 <xTraceEventCreate2>
 8000700:	e013      	b.n	800072a <xQueueGenericSend+0x10e>
 8000702:	6a39      	ldr	r1, [r7, #32]
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000708:	3301      	adds	r3, #1
 800070a:	001a      	movs	r2, r3
 800070c:	2051      	movs	r0, #81	@ 0x51
 800070e:	f003 fb73 	bl	8003df8 <xTraceEventCreate2>
 8000712:	e00a      	b.n	800072a <xQueueGenericSend+0x10e>
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	0019      	movs	r1, r3
 8000718:	2052      	movs	r0, #82	@ 0x52
 800071a:	f003 faf5 	bl	8003d08 <xTraceEventCreate1>
 800071e:	e004      	b.n	800072a <xQueueGenericSend+0x10e>
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	0019      	movs	r1, r3
 8000724:	20c5      	movs	r0, #197	@ 0xc5
 8000726:	f003 faef 	bl	8003d08 <xTraceEventCreate1>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fc2b 	bl	8000f8c <prvCopyDataToQueue>
 8000736:	0003      	movs	r3, r0
 8000738:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	2b00      	cmp	r3, #0
 8000740:	d009      	beq.n	8000756 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	3324      	adds	r3, #36	@ 0x24
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fb48 	bl	8001ddc <xTaskRemoveFromEventList>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d007      	beq.n	8000760 <xQueueGenericSend+0x144>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000750:	f002 faae 	bl	8002cb0 <vPortYield>
 8000754:	e004      	b.n	8000760 <xQueueGenericSend+0x144>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <xQueueGenericSend+0x144>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800075c:	f002 faa8 	bl	8002cb0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000760:	f002 fac8 	bl	8002cf4 <vPortExitCritical>
                return pdPASS;
 8000764:	2301      	movs	r3, #1
 8000766:	e0df      	b.n	8000928 <xQueueGenericSend+0x30c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d12c      	bne.n	80007c8 <xQueueGenericSend+0x1ac>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800076e:	f002 fac1 	bl	8002cf4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	224c      	movs	r2, #76	@ 0x4c
 8000776:	5c9b      	ldrb	r3, [r3, r2]
 8000778:	2b04      	cmp	r3, #4
 800077a:	d01e      	beq.n	80007ba <xQueueGenericSend+0x19e>
 800077c:	dc22      	bgt.n	80007c4 <xQueueGenericSend+0x1a8>
 800077e:	2b03      	cmp	r3, #3
 8000780:	dc20      	bgt.n	80007c4 <xQueueGenericSend+0x1a8>
 8000782:	2b02      	cmp	r3, #2
 8000784:	da11      	bge.n	80007aa <xQueueGenericSend+0x18e>
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <xQueueGenericSend+0x174>
 800078a:	2b01      	cmp	r3, #1
 800078c:	d015      	beq.n	80007ba <xQueueGenericSend+0x19e>
 800078e:	e019      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <xQueueGenericSend+0x17e>
 8000796:	2053      	movs	r0, #83	@ 0x53
 8000798:	e000      	b.n	800079c <xQueueGenericSend+0x180>
 800079a:	20c1      	movs	r0, #193	@ 0xc1
 800079c:	6a39      	ldr	r1, [r7, #32]
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007a2:	001a      	movs	r2, r3
 80007a4:	f003 fb28 	bl	8003df8 <xTraceEventCreate2>
 80007a8:	e00c      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 80007aa:	6a39      	ldr	r1, [r7, #32]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b0:	001a      	movs	r2, r3
 80007b2:	2054      	movs	r0, #84	@ 0x54
 80007b4:	f003 fb20 	bl	8003df8 <xTraceEventCreate2>
 80007b8:	e004      	b.n	80007c4 <xQueueGenericSend+0x1a8>
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	0019      	movs	r1, r3
 80007be:	2055      	movs	r0, #85	@ 0x55
 80007c0:	f003 faa2 	bl	8003d08 <xTraceEventCreate1>
                    return errQUEUE_FULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e0af      	b.n	8000928 <xQueueGenericSend+0x30c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d106      	bne.n	80007dc <xQueueGenericSend+0x1c0>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007ce:	2314      	movs	r3, #20
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fbda 	bl	8001f8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007d8:	2301      	movs	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007dc:	f002 fa8a 	bl	8002cf4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007e0:	f000 fff8 	bl	80017d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007e4:	f002 fa74 	bl	8002cd0 <vPortEnterCritical>
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	2244      	movs	r2, #68	@ 0x44
 80007ec:	5c9b      	ldrb	r3, [r3, r2]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	d103      	bne.n	80007fc <xQueueGenericSend+0x1e0>
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	2244      	movs	r2, #68	@ 0x44
 80007f8:	2100      	movs	r1, #0
 80007fa:	5499      	strb	r1, [r3, r2]
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	2245      	movs	r2, #69	@ 0x45
 8000800:	5c9b      	ldrb	r3, [r3, r2]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	d103      	bne.n	8000810 <xQueueGenericSend+0x1f4>
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	2245      	movs	r2, #69	@ 0x45
 800080c:	2100      	movs	r1, #0
 800080e:	5499      	strb	r1, [r3, r2]
 8000810:	f002 fa70 	bl	8002cf4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	2314      	movs	r3, #20
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fbc9 	bl	8001fb4 <xTaskCheckForTimeOut>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d148      	bne.n	80008b8 <xQueueGenericSend+0x29c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fcb4 	bl	8001196 <prvIsQueueFull>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d03b      	beq.n	80008aa <xQueueGenericSend+0x28e>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	224c      	movs	r2, #76	@ 0x4c
 8000836:	5c9b      	ldrb	r3, [r3, r2]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d01e      	beq.n	800087a <xQueueGenericSend+0x25e>
 800083c:	dc22      	bgt.n	8000884 <xQueueGenericSend+0x268>
 800083e:	2b03      	cmp	r3, #3
 8000840:	dc20      	bgt.n	8000884 <xQueueGenericSend+0x268>
 8000842:	2b02      	cmp	r3, #2
 8000844:	da11      	bge.n	800086a <xQueueGenericSend+0x24e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <xQueueGenericSend+0x234>
 800084a:	2b01      	cmp	r3, #1
 800084c:	d015      	beq.n	800087a <xQueueGenericSend+0x25e>
 800084e:	e019      	b.n	8000884 <xQueueGenericSend+0x268>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <xQueueGenericSend+0x23e>
 8000856:	2056      	movs	r0, #86	@ 0x56
 8000858:	e000      	b.n	800085c <xQueueGenericSend+0x240>
 800085a:	20c2      	movs	r0, #194	@ 0xc2
 800085c:	6a39      	ldr	r1, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000862:	001a      	movs	r2, r3
 8000864:	f003 fac8 	bl	8003df8 <xTraceEventCreate2>
 8000868:	e00c      	b.n	8000884 <xQueueGenericSend+0x268>
 800086a:	6a39      	ldr	r1, [r7, #32]
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000870:	001a      	movs	r2, r3
 8000872:	2057      	movs	r0, #87	@ 0x57
 8000874:	f003 fac0 	bl	8003df8 <xTraceEventCreate2>
 8000878:	e004      	b.n	8000884 <xQueueGenericSend+0x268>
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	0019      	movs	r1, r3
 800087e:	2058      	movs	r0, #88	@ 0x58
 8000880:	f003 fa42 	bl	8003d08 <xTraceEventCreate1>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	3310      	adds	r3, #16
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fa2f 	bl	8001cf0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fc0a 	bl	80010ae <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800089a:	f000 ffa7 	bl	80017ec <xTaskResumeAll>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d000      	beq.n	80008a4 <xQueueGenericSend+0x288>
 80008a2:	e706      	b.n	80006b2 <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 80008a4:	f002 fa04 	bl	8002cb0 <vPortYield>
 80008a8:	e703      	b.n	80006b2 <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fbfe 	bl	80010ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008b2:	f000 ff9b 	bl	80017ec <xTaskResumeAll>
 80008b6:	e6fc      	b.n	80006b2 <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fbf7 	bl	80010ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008c0:	f000 ff94 	bl	80017ec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	5c9b      	ldrb	r3, [r3, r2]
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d026      	beq.n	800091c <xQueueGenericSend+0x300>
 80008ce:	dc2a      	bgt.n	8000926 <xQueueGenericSend+0x30a>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	dc28      	bgt.n	8000926 <xQueueGenericSend+0x30a>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	da11      	bge.n	80008fc <xQueueGenericSend+0x2e0>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <xQueueGenericSend+0x2c6>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d01d      	beq.n	800091c <xQueueGenericSend+0x300>
 80008e0:	e021      	b.n	8000926 <xQueueGenericSend+0x30a>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <xQueueGenericSend+0x2d0>
 80008e8:	2053      	movs	r0, #83	@ 0x53
 80008ea:	e000      	b.n	80008ee <xQueueGenericSend+0x2d2>
 80008ec:	20c1      	movs	r0, #193	@ 0xc1
 80008ee:	6a39      	ldr	r1, [r7, #32]
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008f4:	001a      	movs	r2, r3
 80008f6:	f003 fa7f 	bl	8003df8 <xTraceEventCreate2>
 80008fa:	e014      	b.n	8000926 <xQueueGenericSend+0x30a>
 80008fc:	6a39      	ldr	r1, [r7, #32]
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000902:	001a      	movs	r2, r3
 8000904:	2054      	movs	r0, #84	@ 0x54
 8000906:	f003 fa77 	bl	8003df8 <xTraceEventCreate2>
 800090a:	e00c      	b.n	8000926 <xQueueGenericSend+0x30a>
 800090c:	08007024 	.word	0x08007024
 8000910:	0000034d 	.word	0x0000034d
 8000914:	0000034e 	.word	0x0000034e
 8000918:	00000351 	.word	0x00000351
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	0019      	movs	r1, r3
 8000920:	2055      	movs	r0, #85	@ 0x55
 8000922:	f003 f9f1 	bl	8003d08 <xTraceEventCreate1>
            return errQUEUE_FULL;
 8000926:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b00a      	add	sp, #40	@ 0x28
 800092e:	bd80      	pop	{r7, pc}

08000930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d105      	bne.n	8000956 <xQueueReceive+0x26>
 800094a:	4ab3      	ldr	r2, [pc, #716]	@ (8000c18 <xQueueReceive+0x2e8>)
 800094c:	4bb3      	ldr	r3, [pc, #716]	@ (8000c1c <xQueueReceive+0x2ec>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f005 fdd1 	bl	80064f8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d103      	bne.n	8000964 <xQueueReceive+0x34>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <xQueueReceive+0x38>
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <xQueueReceive+0x3a>
 8000968:	2300      	movs	r3, #0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d105      	bne.n	800097a <xQueueReceive+0x4a>
 800096e:	4aac      	ldr	r2, [pc, #688]	@ (8000c20 <xQueueReceive+0x2f0>)
 8000970:	4baa      	ldr	r3, [pc, #680]	@ (8000c1c <xQueueReceive+0x2ec>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f005 fdbf 	bl	80064f8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800097a:	f001 fc1d 	bl	80021b8 <xTaskGetSchedulerState>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d102      	bne.n	8000988 <xQueueReceive+0x58>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <xQueueReceive+0x5c>
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <xQueueReceive+0x5e>
 800098c:	2300      	movs	r3, #0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d105      	bne.n	800099e <xQueueReceive+0x6e>
 8000992:	4aa4      	ldr	r2, [pc, #656]	@ (8000c24 <xQueueReceive+0x2f4>)
 8000994:	4ba1      	ldr	r3, [pc, #644]	@ (8000c1c <xQueueReceive+0x2ec>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f005 fdad 	bl	80064f8 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800099e:	f002 f997 	bl	8002cd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009a6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d048      	beq.n	8000a40 <xQueueReceive+0x110>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fb54 	bl	8001062 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	224c      	movs	r2, #76	@ 0x4c
 80009be:	5c9b      	ldrb	r3, [r3, r2]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d022      	beq.n	8000a0a <xQueueReceive+0xda>
 80009c4:	dc27      	bgt.n	8000a16 <xQueueReceive+0xe6>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	dc25      	bgt.n	8000a16 <xQueueReceive+0xe6>
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	da0d      	bge.n	80009ea <xQueueReceive+0xba>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <xQueueReceive+0xa8>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d012      	beq.n	80009fc <xQueueReceive+0xcc>
 80009d6:	e01e      	b.n	8000a16 <xQueueReceive+0xe6>
 80009d8:	6a39      	ldr	r1, [r7, #32]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2060      	movs	r0, #96	@ 0x60
 80009e4:	f003 fa84 	bl	8003ef0 <xTraceEventCreate3>
 80009e8:	e015      	b.n	8000a16 <xQueueReceive+0xe6>
 80009ea:	6a39      	ldr	r1, [r7, #32]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f2:	3b01      	subs	r3, #1
 80009f4:	2061      	movs	r0, #97	@ 0x61
 80009f6:	f003 fa7b 	bl	8003ef0 <xTraceEventCreate3>
 80009fa:	e00c      	b.n	8000a16 <xQueueReceive+0xe6>
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	0019      	movs	r1, r3
 8000a02:	2062      	movs	r0, #98	@ 0x62
 8000a04:	f003 f9f8 	bl	8003df8 <xTraceEventCreate2>
 8000a08:	e005      	b.n	8000a16 <xQueueReceive+0xe6>
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	0019      	movs	r1, r3
 8000a10:	20c7      	movs	r0, #199	@ 0xc7
 8000a12:	f003 f9f1 	bl	8003df8 <xTraceEventCreate2>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d008      	beq.n	8000a38 <xQueueReceive+0x108>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3310      	adds	r3, #16
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f9d6 	bl	8001ddc <xTaskRemoveFromEventList>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <xQueueReceive+0x108>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a34:	f002 f93c 	bl	8002cb0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a38:	f002 f95c 	bl	8002cf4 <vPortExitCritical>
                return pdPASS;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e0e7      	b.n	8000c10 <xQueueReceive+0x2e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d12f      	bne.n	8000aa6 <xQueueReceive+0x176>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a46:	f002 f955 	bl	8002cf4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	224c      	movs	r2, #76	@ 0x4c
 8000a4e:	5c9b      	ldrb	r3, [r3, r2]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d020      	beq.n	8000a96 <xQueueReceive+0x166>
 8000a54:	dc25      	bgt.n	8000aa2 <xQueueReceive+0x172>
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	dc23      	bgt.n	8000aa2 <xQueueReceive+0x172>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	da0c      	bge.n	8000a78 <xQueueReceive+0x148>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <xQueueReceive+0x138>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d010      	beq.n	8000a88 <xQueueReceive+0x158>
 8000a66:	e01c      	b.n	8000aa2 <xQueueReceive+0x172>
 8000a68:	6a39      	ldr	r1, [r7, #32]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a70:	2063      	movs	r0, #99	@ 0x63
 8000a72:	f003 fa3d 	bl	8003ef0 <xTraceEventCreate3>
 8000a76:	e014      	b.n	8000aa2 <xQueueReceive+0x172>
 8000a78:	6a39      	ldr	r1, [r7, #32]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a80:	2064      	movs	r0, #100	@ 0x64
 8000a82:	f003 fa35 	bl	8003ef0 <xTraceEventCreate3>
 8000a86:	e00c      	b.n	8000aa2 <xQueueReceive+0x172>
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	2065      	movs	r0, #101	@ 0x65
 8000a90:	f003 f9b2 	bl	8003df8 <xTraceEventCreate2>
 8000a94:	e005      	b.n	8000aa2 <xQueueReceive+0x172>
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	20c8      	movs	r0, #200	@ 0xc8
 8000a9e:	f003 f9ab 	bl	8003df8 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e0b4      	b.n	8000c10 <xQueueReceive+0x2e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <xQueueReceive+0x18a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000aac:	2314      	movs	r3, #20
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fa6b 	bl	8001f8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000aba:	f002 f91b 	bl	8002cf4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000abe:	f000 fe89 	bl	80017d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ac2:	f002 f905 	bl	8002cd0 <vPortEnterCritical>
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	2244      	movs	r2, #68	@ 0x44
 8000aca:	5c9b      	ldrb	r3, [r3, r2]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	d103      	bne.n	8000ada <xQueueReceive+0x1aa>
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	2244      	movs	r2, #68	@ 0x44
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	5499      	strb	r1, [r3, r2]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	2245      	movs	r2, #69	@ 0x45
 8000ade:	5c9b      	ldrb	r3, [r3, r2]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	d103      	bne.n	8000aee <xQueueReceive+0x1be>
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	2245      	movs	r2, #69	@ 0x45
 8000aea:	2100      	movs	r1, #0
 8000aec:	5499      	strb	r1, [r3, r2]
 8000aee:	f002 f901 	bl	8002cf4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000af2:	1d3a      	adds	r2, r7, #4
 8000af4:	2314      	movs	r3, #20
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fa5a 	bl	8001fb4 <xTaskCheckForTimeOut>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d14b      	bne.n	8000b9c <xQueueReceive+0x26c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fb2f 	bl	800116a <prvIsQueueEmpty>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d03e      	beq.n	8000b8e <xQueueReceive+0x25e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	224c      	movs	r2, #76	@ 0x4c
 8000b14:	5c9b      	ldrb	r3, [r3, r2]
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d020      	beq.n	8000b5c <xQueueReceive+0x22c>
 8000b1a:	dc25      	bgt.n	8000b68 <xQueueReceive+0x238>
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	dc23      	bgt.n	8000b68 <xQueueReceive+0x238>
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	da0c      	bge.n	8000b3e <xQueueReceive+0x20e>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <xQueueReceive+0x1fe>
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d010      	beq.n	8000b4e <xQueueReceive+0x21e>
 8000b2c:	e01c      	b.n	8000b68 <xQueueReceive+0x238>
 8000b2e:	6a39      	ldr	r1, [r7, #32]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b36:	2066      	movs	r0, #102	@ 0x66
 8000b38:	f003 f9da 	bl	8003ef0 <xTraceEventCreate3>
 8000b3c:	e014      	b.n	8000b68 <xQueueReceive+0x238>
 8000b3e:	6a39      	ldr	r1, [r7, #32]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b46:	2067      	movs	r0, #103	@ 0x67
 8000b48:	f003 f9d2 	bl	8003ef0 <xTraceEventCreate3>
 8000b4c:	e00c      	b.n	8000b68 <xQueueReceive+0x238>
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	0019      	movs	r1, r3
 8000b54:	2068      	movs	r0, #104	@ 0x68
 8000b56:	f003 f94f 	bl	8003df8 <xTraceEventCreate2>
 8000b5a:	e005      	b.n	8000b68 <xQueueReceive+0x238>
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	0019      	movs	r1, r3
 8000b62:	20f6      	movs	r0, #246	@ 0xf6
 8000b64:	f003 f948 	bl	8003df8 <xTraceEventCreate2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	3324      	adds	r3, #36	@ 0x24
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f8bd 	bl	8001cf0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fa98 	bl	80010ae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b7e:	f000 fe35 	bl	80017ec <xTaskResumeAll>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d000      	beq.n	8000b88 <xQueueReceive+0x258>
 8000b86:	e70a      	b.n	800099e <xQueueReceive+0x6e>
                {
                    portYIELD_WITHIN_API();
 8000b88:	f002 f892 	bl	8002cb0 <vPortYield>
 8000b8c:	e707      	b.n	800099e <xQueueReceive+0x6e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fa8c 	bl	80010ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b96:	f000 fe29 	bl	80017ec <xTaskResumeAll>
 8000b9a:	e700      	b.n	800099e <xQueueReceive+0x6e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fa85 	bl	80010ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ba4:	f000 fe22 	bl	80017ec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fadd 	bl	800116a <prvIsQueueEmpty>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d100      	bne.n	8000bb6 <xQueueReceive+0x286>
 8000bb4:	e6f3      	b.n	800099e <xQueueReceive+0x6e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
 8000bb8:	224c      	movs	r2, #76	@ 0x4c
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d020      	beq.n	8000c02 <xQueueReceive+0x2d2>
 8000bc0:	dc25      	bgt.n	8000c0e <xQueueReceive+0x2de>
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	dc23      	bgt.n	8000c0e <xQueueReceive+0x2de>
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	da0c      	bge.n	8000be4 <xQueueReceive+0x2b4>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <xQueueReceive+0x2a4>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d010      	beq.n	8000bf4 <xQueueReceive+0x2c4>
 8000bd2:	e01c      	b.n	8000c0e <xQueueReceive+0x2de>
 8000bd4:	6a39      	ldr	r1, [r7, #32]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bdc:	2063      	movs	r0, #99	@ 0x63
 8000bde:	f003 f987 	bl	8003ef0 <xTraceEventCreate3>
 8000be2:	e014      	b.n	8000c0e <xQueueReceive+0x2de>
 8000be4:	6a39      	ldr	r1, [r7, #32]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bec:	2064      	movs	r0, #100	@ 0x64
 8000bee:	f003 f97f 	bl	8003ef0 <xTraceEventCreate3>
 8000bf2:	e00c      	b.n	8000c0e <xQueueReceive+0x2de>
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	2065      	movs	r0, #101	@ 0x65
 8000bfc:	f003 f8fc 	bl	8003df8 <xTraceEventCreate2>
 8000c00:	e005      	b.n	8000c0e <xQueueReceive+0x2de>
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	0019      	movs	r1, r3
 8000c08:	20c8      	movs	r0, #200	@ 0xc8
 8000c0a:	f003 f8f5 	bl	8003df8 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000c0e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b00a      	add	sp, #40	@ 0x28
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	0000056b 	.word	0x0000056b
 8000c1c:	08007024 	.word	0x08007024
 8000c20:	0000056f 	.word	0x0000056f
 8000c24:	00000574 	.word	0x00000574

08000c28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d105      	bne.n	8000c50 <xQueueSemaphoreTake+0x28>
 8000c44:	4abc      	ldr	r2, [pc, #752]	@ (8000f38 <xQueueSemaphoreTake+0x310>)
 8000c46:	4bbd      	ldr	r3, [pc, #756]	@ (8000f3c <xQueueSemaphoreTake+0x314>)
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f005 fc54 	bl	80064f8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <xQueueSemaphoreTake+0x3c>
 8000c58:	4ab9      	ldr	r2, [pc, #740]	@ (8000f40 <xQueueSemaphoreTake+0x318>)
 8000c5a:	4bb8      	ldr	r3, [pc, #736]	@ (8000f3c <xQueueSemaphoreTake+0x314>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f005 fc4a 	bl	80064f8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c64:	f001 faa8 	bl	80021b8 <xTaskGetSchedulerState>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d102      	bne.n	8000c72 <xQueueSemaphoreTake+0x4a>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <xQueueSemaphoreTake+0x4e>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <xQueueSemaphoreTake+0x50>
 8000c76:	2300      	movs	r3, #0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d105      	bne.n	8000c88 <xQueueSemaphoreTake+0x60>
 8000c7c:	4ab1      	ldr	r2, [pc, #708]	@ (8000f44 <xQueueSemaphoreTake+0x31c>)
 8000c7e:	4baf      	ldr	r3, [pc, #700]	@ (8000f3c <xQueueSemaphoreTake+0x314>)
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f005 fc38 	bl	80064f8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c88:	f002 f822 	bl	8002cd0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c90:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d04b      	beq.n	8000d30 <xQueueSemaphoreTake+0x108>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d022      	beq.n	8000ce8 <xQueueSemaphoreTake+0xc0>
 8000ca2:	dc27      	bgt.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	dc25      	bgt.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	da0d      	bge.n	8000cc8 <xQueueSemaphoreTake+0xa0>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <xQueueSemaphoreTake+0x8e>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d012      	beq.n	8000cda <xQueueSemaphoreTake+0xb2>
 8000cb4:	e01e      	b.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000cb6:	69f9      	ldr	r1, [r7, #28]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	2060      	movs	r0, #96	@ 0x60
 8000cc2:	f003 f915 	bl	8003ef0 <xTraceEventCreate3>
 8000cc6:	e015      	b.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000cc8:	69f9      	ldr	r1, [r7, #28]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	2061      	movs	r0, #97	@ 0x61
 8000cd4:	f003 f90c 	bl	8003ef0 <xTraceEventCreate3>
 8000cd8:	e00c      	b.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	0019      	movs	r1, r3
 8000ce0:	2062      	movs	r0, #98	@ 0x62
 8000ce2:	f003 f889 	bl	8003df8 <xTraceEventCreate2>
 8000ce6:	e005      	b.n	8000cf4 <xQueueSemaphoreTake+0xcc>
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	20c7      	movs	r0, #199	@ 0xc7
 8000cf0:	f003 f882 	bl	8003df8 <xTraceEventCreate2>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d104      	bne.n	8000d0e <xQueueSemaphoreTake+0xe6>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d04:	f001 fc5c 	bl	80025c0 <pvTaskIncrementMutexHeldCount>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d008      	beq.n	8000d28 <xQueueSemaphoreTake+0x100>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3310      	adds	r3, #16
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f85e 	bl	8001ddc <xTaskRemoveFromEventList>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <xQueueSemaphoreTake+0x100>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d24:	f001 ffc4 	bl	8002cb0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d28:	f001 ffe4 	bl	8002cf4 <vPortExitCritical>
                return pdPASS;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e112      	b.n	8000f56 <xQueueSemaphoreTake+0x32e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d12f      	bne.n	8000d96 <xQueueSemaphoreTake+0x16e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000d36:	f001 ffdd 	bl	8002cf4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	224c      	movs	r2, #76	@ 0x4c
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d020      	beq.n	8000d86 <xQueueSemaphoreTake+0x15e>
 8000d44:	dc25      	bgt.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	dc23      	bgt.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	da0c      	bge.n	8000d68 <xQueueSemaphoreTake+0x140>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <xQueueSemaphoreTake+0x130>
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d010      	beq.n	8000d78 <xQueueSemaphoreTake+0x150>
 8000d56:	e01c      	b.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d58:	69f9      	ldr	r1, [r7, #28]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d60:	2063      	movs	r0, #99	@ 0x63
 8000d62:	f003 f8c5 	bl	8003ef0 <xTraceEventCreate3>
 8000d66:	e014      	b.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d68:	69f9      	ldr	r1, [r7, #28]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d70:	2064      	movs	r0, #100	@ 0x64
 8000d72:	f003 f8bd 	bl	8003ef0 <xTraceEventCreate3>
 8000d76:	e00c      	b.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	2065      	movs	r0, #101	@ 0x65
 8000d80:	f003 f83a 	bl	8003df8 <xTraceEventCreate2>
 8000d84:	e005      	b.n	8000d92 <xQueueSemaphoreTake+0x16a>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	20c8      	movs	r0, #200	@ 0xc8
 8000d8e:	f003 f833 	bl	8003df8 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e0df      	b.n	8000f56 <xQueueSemaphoreTake+0x32e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <xQueueSemaphoreTake+0x182>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 f8f3 	bl	8001f8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000daa:	f001 ffa3 	bl	8002cf4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dae:	f000 fd11 	bl	80017d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000db2:	f001 ff8d 	bl	8002cd0 <vPortEnterCritical>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	2244      	movs	r2, #68	@ 0x44
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	d103      	bne.n	8000dca <xQueueSemaphoreTake+0x1a2>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	2244      	movs	r2, #68	@ 0x44
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5499      	strb	r1, [r3, r2]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	2245      	movs	r2, #69	@ 0x45
 8000dce:	5c9b      	ldrb	r3, [r3, r2]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	d103      	bne.n	8000dde <xQueueSemaphoreTake+0x1b6>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	2245      	movs	r2, #69	@ 0x45
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5499      	strb	r1, [r3, r2]
 8000dde:	f001 ff89 	bl	8002cf4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000de2:	003a      	movs	r2, r7
 8000de4:	230c      	movs	r3, #12
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 f8e2 	bl	8001fb4 <xTaskCheckForTimeOut>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d15a      	bne.n	8000eaa <xQueueSemaphoreTake+0x282>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f9b7 	bl	800116a <prvIsQueueEmpty>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d04d      	beq.n	8000e9c <xQueueSemaphoreTake+0x274>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	224c      	movs	r2, #76	@ 0x4c
 8000e04:	5c9b      	ldrb	r3, [r3, r2]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d020      	beq.n	8000e4c <xQueueSemaphoreTake+0x224>
 8000e0a:	dc25      	bgt.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	dc23      	bgt.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	da0c      	bge.n	8000e2e <xQueueSemaphoreTake+0x206>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <xQueueSemaphoreTake+0x1f6>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d010      	beq.n	8000e3e <xQueueSemaphoreTake+0x216>
 8000e1c:	e01c      	b.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e1e:	69f9      	ldr	r1, [r7, #28]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e26:	2066      	movs	r0, #102	@ 0x66
 8000e28:	f003 f862 	bl	8003ef0 <xTraceEventCreate3>
 8000e2c:	e014      	b.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e2e:	69f9      	ldr	r1, [r7, #28]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e36:	2067      	movs	r0, #103	@ 0x67
 8000e38:	f003 f85a 	bl	8003ef0 <xTraceEventCreate3>
 8000e3c:	e00c      	b.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	2068      	movs	r0, #104	@ 0x68
 8000e46:	f002 ffd7 	bl	8003df8 <xTraceEventCreate2>
 8000e4a:	e005      	b.n	8000e58 <xQueueSemaphoreTake+0x230>
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	0019      	movs	r1, r3
 8000e52:	20f6      	movs	r0, #246	@ 0xf6
 8000e54:	f002 ffd0 	bl	8003df8 <xTraceEventCreate2>

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10a      	bne.n	8000e76 <xQueueSemaphoreTake+0x24e>
                    {
                        taskENTER_CRITICAL();
 8000e60:	f001 ff36 	bl	8002cd0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f9c1 	bl	80021f0 <xTaskPriorityInherit>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                        taskEXIT_CRITICAL();
 8000e72:	f001 ff3f 	bl	8002cf4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3324      	adds	r3, #36	@ 0x24
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 ff36 	bl	8001cf0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f911 	bl	80010ae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e8c:	f000 fcae 	bl	80017ec <xTaskResumeAll>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d000      	beq.n	8000e96 <xQueueSemaphoreTake+0x26e>
 8000e94:	e6f8      	b.n	8000c88 <xQueueSemaphoreTake+0x60>
                {
                    portYIELD_WITHIN_API();
 8000e96:	f001 ff0b 	bl	8002cb0 <vPortYield>
 8000e9a:	e6f5      	b.n	8000c88 <xQueueSemaphoreTake+0x60>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f905 	bl	80010ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ea4:	f000 fca2 	bl	80017ec <xTaskResumeAll>
 8000ea8:	e6ee      	b.n	8000c88 <xQueueSemaphoreTake+0x60>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 f8fe 	bl	80010ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000eb2:	f000 fc9b 	bl	80017ec <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 f956 	bl	800116a <prvIsQueueEmpty>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d100      	bne.n	8000ec4 <xQueueSemaphoreTake+0x29c>
 8000ec2:	e6e1      	b.n	8000c88 <xQueueSemaphoreTake+0x60>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d010      	beq.n	8000eec <xQueueSemaphoreTake+0x2c4>
                    {
                        taskENTER_CRITICAL();
 8000eca:	f001 ff01 	bl	8002cd0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 f845 	bl	8000f60 <prvGetDisinheritPriorityAfterTimeout>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fabc 	bl	8002460 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000ee8:	f001 ff04 	bl	8002cf4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	224c      	movs	r2, #76	@ 0x4c
 8000ef0:	5c9b      	ldrb	r3, [r3, r2]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d028      	beq.n	8000f48 <xQueueSemaphoreTake+0x320>
 8000ef6:	dc2d      	bgt.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dc2b      	bgt.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	da0c      	bge.n	8000f1a <xQueueSemaphoreTake+0x2f2>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <xQueueSemaphoreTake+0x2e2>
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d010      	beq.n	8000f2a <xQueueSemaphoreTake+0x302>
 8000f08:	e024      	b.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000f0a:	69f9      	ldr	r1, [r7, #28]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f12:	2063      	movs	r0, #99	@ 0x63
 8000f14:	f002 ffec 	bl	8003ef0 <xTraceEventCreate3>
 8000f18:	e01c      	b.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000f1a:	69f9      	ldr	r1, [r7, #28]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f002 ffe4 	bl	8003ef0 <xTraceEventCreate3>
 8000f28:	e014      	b.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	0019      	movs	r1, r3
 8000f30:	2065      	movs	r0, #101	@ 0x65
 8000f32:	f002 ff61 	bl	8003df8 <xTraceEventCreate2>
 8000f36:	e00d      	b.n	8000f54 <xQueueSemaphoreTake+0x32c>
 8000f38:	000005fd 	.word	0x000005fd
 8000f3c:	08007024 	.word	0x08007024
 8000f40:	00000601 	.word	0x00000601
 8000f44:	00000606 	.word	0x00000606
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	20c8      	movs	r0, #200	@ 0xc8
 8000f50:	f002 ff52 	bl	8003df8 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000f54:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b00a      	add	sp, #40	@ 0x28
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)

08000f60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2205      	movs	r2, #5
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e001      	b.n	8000f82 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000f82:	68fb      	ldr	r3, [r7, #12]
    }
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b004      	add	sp, #16
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10e      	bne.n	8000fc8 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d14e      	bne.n	8001050 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 f9b6 	bl	8002328 <xTaskPriorityDisinherit>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	e043      	b.n	8001050 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d119      	bne.n	8001002 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6858      	ldr	r0, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	0019      	movs	r1, r3
 8000fda:	f006 f80d 	bl	8006ff8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d32b      	bcc.n	8001050 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	e026      	b.n	8001050 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68d8      	ldr	r0, [r3, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	0019      	movs	r1, r3
 800100e:	f005 fff3 	bl	8006ff8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	425b      	negs	r3, r3
 800101c:	18d2      	adds	r2, r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d207      	bcs.n	800103e <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	425b      	negs	r3, r3
 8001038:	18d2      	adds	r2, r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d105      	bne.n	8001050 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3b01      	subs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001058:	697b      	ldr	r3, [r7, #20]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b006      	add	sp, #24
 8001060:	bd80      	pop	{r7, pc}

08001062 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d018      	beq.n	80010a6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	18d2      	adds	r2, r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	429a      	cmp	r2, r3
 800108c:	d303      	bcc.n	8001096 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68d9      	ldr	r1, [r3, #12]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f005 ffa9 	bl	8006ff8 <memcpy>
    }
}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}

080010ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80010b6:	f001 fe0b 	bl	8002cd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80010ba:	230f      	movs	r3, #15
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	2145      	movs	r1, #69	@ 0x45
 80010c2:	5c52      	ldrb	r2, [r2, r1]
 80010c4:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010c6:	e013      	b.n	80010f0 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d016      	beq.n	80010fe <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3324      	adds	r3, #36	@ 0x24
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fe81 	bl	8001ddc <xTaskRemoveFromEventList>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80010de:	f000 ffc3 	bl	8002068 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80010e2:	210f      	movs	r1, #15
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dce5      	bgt.n	80010c8 <prvUnlockQueue+0x1a>
 80010fc:	e000      	b.n	8001100 <prvUnlockQueue+0x52>
                    break;
 80010fe:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2245      	movs	r2, #69	@ 0x45
 8001104:	21ff      	movs	r1, #255	@ 0xff
 8001106:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001108:	f001 fdf4 	bl	8002cf4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800110c:	f001 fde0 	bl	8002cd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001110:	230e      	movs	r3, #14
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	2144      	movs	r1, #68	@ 0x44
 8001118:	5c52      	ldrb	r2, [r2, r1]
 800111a:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800111c:	e013      	b.n	8001146 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d016      	beq.n	8001154 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3310      	adds	r3, #16
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fe56 	bl	8001ddc <xTaskRemoveFromEventList>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001134:	f000 ff98 	bl	8002068 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001138:	210e      	movs	r1, #14
 800113a:	187b      	adds	r3, r7, r1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	187b      	adds	r3, r7, r1
 8001144:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001146:	230e      	movs	r3, #14
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	dce5      	bgt.n	800111e <prvUnlockQueue+0x70>
 8001152:	e000      	b.n	8001156 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001154:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2244      	movs	r2, #68	@ 0x44
 800115a:	21ff      	movs	r1, #255	@ 0xff
 800115c:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800115e:	f001 fdc9 	bl	8002cf4 <vPortExitCritical>
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}

0800116a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001172:	f001 fdad 	bl	8002cd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800117e:	2301      	movs	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e001      	b.n	8001188 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001188:	f001 fdb4 	bl	8002cf4 <vPortExitCritical>

    return xReturn;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}

08001196 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800119e:	f001 fd97 	bl	8002cd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d102      	bne.n	80011b4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e001      	b.n	80011b8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80011b8:	f001 fd9c 	bl	8002cf4 <vPortExitCritical>

    return xReturn;
 80011bc:	68fb      	ldr	r3, [r7, #12]
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <vQueueAddToRegistry+0x20>
 80011dc:	4a20      	ldr	r2, [pc, #128]	@ (8001260 <vQueueAddToRegistry+0x98>)
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <vQueueAddToRegistry+0x9c>)
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f005 f988 	bl	80064f8 <vAssertCalled>

        if( pcQueueName != NULL )
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d025      	beq.n	800123a <vQueueAddToRegistry+0x72>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e01f      	b.n	8001234 <vQueueAddToRegistry+0x6c>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <vQueueAddToRegistry+0xa0>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	18d3      	adds	r3, r2, r3
 80011fc:	3304      	adds	r3, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d105      	bne.n	8001212 <vQueueAddToRegistry+0x4a>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <vQueueAddToRegistry+0xa0>)
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	60bb      	str	r3, [r7, #8]
                    break;
 8001210:	e013      	b.n	800123a <vQueueAddToRegistry+0x72>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10a      	bne.n	800122e <vQueueAddToRegistry+0x66>
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <vQueueAddToRegistry+0xa0>)
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	58d3      	ldr	r3, [r2, r3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <vQueueAddToRegistry+0x66>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	00da      	lsls	r2, r3, #3
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <vQueueAddToRegistry+0xa0>)
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b09      	cmp	r3, #9
 8001238:	d9dc      	bls.n	80011f4 <vQueueAddToRegistry+0x2c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0011      	movs	r1, r2
 8001252:	0018      	movs	r0, r3
 8001254:	f003 fdfd 	bl	8004e52 <xTraceObjectSetNameWithoutHandle>
        }
    }
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}
 8001260:	00000ad8 	.word	0x00000ad8
 8001264:	08007024 	.word	0x08007024
 8001268:	20000028 	.word	0x20000028

0800126c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800127c:	f001 fd28 	bl	8002cd0 <vPortEnterCritical>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2244      	movs	r2, #68	@ 0x44
 8001284:	5c9b      	ldrb	r3, [r3, r2]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	d103      	bne.n	8001294 <vQueueWaitForMessageRestricted+0x28>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2244      	movs	r2, #68	@ 0x44
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2245      	movs	r2, #69	@ 0x45
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	d103      	bne.n	80012a8 <vQueueWaitForMessageRestricted+0x3c>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2245      	movs	r2, #69	@ 0x45
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]
 80012a8:	f001 fd24 	bl	8002cf4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3324      	adds	r3, #36	@ 0x24
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fd3d 	bl	8001d3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fef2 	bl	80010ae <prvUnlockQueue>
    }
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b006      	add	sp, #24
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b08d      	sub	sp, #52	@ 0x34
 80012d6:	af04      	add	r7, sp, #16
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	1dbb      	adds	r3, r7, #6
 80012e0:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80012e2:	1dbb      	adds	r3, r7, #6
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fd91 	bl	8002e10 <pvPortMalloc>
 80012ee:	0003      	movs	r3, r0
 80012f0:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d016      	beq.n	8001326 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80012f8:	2060      	movs	r0, #96	@ 0x60
 80012fa:	f001 fd89 	bl	8002e10 <pvPortMalloc>
 80012fe:	0003      	movs	r3, r0
 8001300:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2260      	movs	r2, #96	@ 0x60
 800130c:	2100      	movs	r1, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f005 fe46 	bl	8006fa0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
 800131a:	e006      	b.n	800132a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	0018      	movs	r0, r3
 8001320:	f001 fdde 	bl	8002ee0 <vPortFree>
 8001324:	e001      	b.n	800132a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d016      	beq.n	800135e <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001330:	1dbb      	adds	r3, r7, #6
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	683c      	ldr	r4, [r7, #0]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	2300      	movs	r3, #0
 800133c:	9303      	str	r3, [sp, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	0023      	movs	r3, r4
 800134c:	f000 f810 	bl	8001370 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	0018      	movs	r0, r3
 8001354:	f000 f89a 	bl	800148c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	e002      	b.n	8001364 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800135e:	2301      	movs	r3, #1
 8001360:	425b      	negs	r3, r3
 8001362:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001364:	69bb      	ldr	r3, [r7, #24]
    }
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b009      	add	sp, #36	@ 0x24
 800136c:	bd90      	pop	{r4, r7, pc}
	...

08001370 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	001a      	movs	r2, r3
 8001388:	21a5      	movs	r1, #165	@ 0xa5
 800138a:	f005 fe09 	bl	8006fa0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800138e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4939      	ldr	r1, [pc, #228]	@ (800147c <prvInitialiseNewTask+0x10c>)
 8001396:	468c      	mov	ip, r1
 8001398:	4463      	add	r3, ip
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2207      	movs	r2, #7
 80013a4:	4393      	bics	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2207      	movs	r2, #7
 80013ac:	4013      	ands	r3, r2
 80013ae:	d005      	beq.n	80013bc <prvInitialiseNewTask+0x4c>
 80013b0:	4a33      	ldr	r2, [pc, #204]	@ (8001480 <prvInitialiseNewTask+0x110>)
 80013b2:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <prvInitialiseNewTask+0x114>)
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f005 f89e 	bl	80064f8 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e013      	b.n	80013f0 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	18d3      	adds	r3, r2, r3
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013d2:	2134      	movs	r1, #52	@ 0x34
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	185b      	adds	r3, r3, r1
 80013da:	1c02      	adds	r2, r0, #0
 80013dc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	d9e8      	bls.n	80013c8 <prvInitialiseNewTask+0x58>
 80013f6:	e000      	b.n	80013fa <prvInitialiseNewTask+0x8a>
            {
                break;
 80013f8:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fc:	2243      	movs	r2, #67	@ 0x43
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d905      	bls.n	8001414 <prvInitialiseNewTask+0xa4>
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <prvInitialiseNewTask+0x118>)
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <prvInitialiseNewTask+0x114>)
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f005 f872 	bl	80064f8 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d901      	bls.n	800141e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800142a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142c:	3304      	adds	r3, #4
 800142e:	0018      	movs	r0, r3
 8001430:	f7fe ff14 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001436:	3318      	adds	r3, #24
 8001438:	0018      	movs	r0, r3
 800143a:	f7fe ff0f 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800143e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001442:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2205      	movs	r2, #5
 8001448:	1ad2      	subs	r2, r2, r3
 800144a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	0018      	movs	r0, r3
 800145c:	f001 fb9a 	bl	8002b94 <pxPortInitialiseStack>
 8001460:	0002      	movs	r2, r0
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <prvInitialiseNewTask+0x102>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001470:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b006      	add	sp, #24
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	3fffffff 	.word	0x3fffffff
 8001480:	0000035d 	.word	0x0000035d
 8001484:	0800703c 	.word	0x0800703c
 8001488:	00000392 	.word	0x00000392

0800148c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001494:	f001 fc1c 	bl	8002cd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001498:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <prvAddNewTaskToReadyList+0x138>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4b49      	ldr	r3, [pc, #292]	@ (80015c4 <prvAddNewTaskToReadyList+0x138>)
 80014a0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80014a2:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <prvAddNewTaskToReadyList+0x13c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80014aa:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <prvAddNewTaskToReadyList+0x13c>)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014b0:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <prvAddNewTaskToReadyList+0x138>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d110      	bne.n	80014da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80014b8:	f000 fdf0 	bl	800209c <prvInitialiseTaskLists>
 80014bc:	e00d      	b.n	80014da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80014be:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <prvAddNewTaskToReadyList+0x140>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <prvAddNewTaskToReadyList+0x13c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d802      	bhi.n	80014da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80014d4:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <prvAddNewTaskToReadyList+0x13c>)
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <prvAddNewTaskToReadyList+0x144>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <prvAddNewTaskToReadyList+0x144>)
 80014e2:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <prvAddNewTaskToReadyList+0x144>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d011      	beq.n	8001516 <prvAddNewTaskToReadyList+0x8a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <prvAddNewTaskToReadyList+0x8a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3334      	adds	r3, #52	@ 0x34
 80014fc:	001a      	movs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2010      	movs	r0, #16
 8001506:	f003 fc8b 	bl	8004e20 <xTraceObjectRegisterWithoutHandle>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d103      	bne.n	8001516 <prvAddNewTaskToReadyList+0x8a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	0018      	movs	r0, r3
 8001512:	f003 fed9 	bl	80052c8 <xTraceStackMonitorAdd>

        prvAddTaskToReadyList( pxNewTCB );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0019      	movs	r1, r3
 800151a:	2030      	movs	r0, #48	@ 0x30
 800151c:	f002 fbf4 	bl	8003d08 <xTraceEventCreate1>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <prvAddNewTaskToReadyList+0x148>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d903      	bls.n	8001534 <prvAddNewTaskToReadyList+0xa8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <prvAddNewTaskToReadyList+0x148>)
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001538:	4927      	ldr	r1, [pc, #156]	@ (80015d8 <prvAddNewTaskToReadyList+0x14c>)
 800153a:	0013      	movs	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	189b      	adds	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	18cb      	adds	r3, r1, r3
 8001544:	3304      	adds	r3, #4
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	3204      	adds	r2, #4
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1d1a      	adds	r2, r3, #4
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800156e:	0013      	movs	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	189b      	adds	r3, r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <prvAddNewTaskToReadyList+0x14c>)
 8001578:	189a      	adds	r2, r3, r2
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001582:	4915      	ldr	r1, [pc, #84]	@ (80015d8 <prvAddNewTaskToReadyList+0x14c>)
 8001584:	0013      	movs	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	189b      	adds	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	585b      	ldr	r3, [r3, r1]
 800158e:	1c58      	adds	r0, r3, #1
 8001590:	4911      	ldr	r1, [pc, #68]	@ (80015d8 <prvAddNewTaskToReadyList+0x14c>)
 8001592:	0013      	movs	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	189b      	adds	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800159c:	f001 fbaa 	bl	8002cf4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <prvAddNewTaskToReadyList+0x140>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <prvAddNewTaskToReadyList+0x12e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <prvAddNewTaskToReadyList+0x13c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d201      	bcs.n	80015ba <prvAddNewTaskToReadyList+0x12e>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80015b6:	f001 fb7b 	bl	8002cb0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	20000124 	.word	0x20000124
 80015c8:	20000078 	.word	0x20000078
 80015cc:	20000130 	.word	0x20000130
 80015d0:	20000140 	.word	0x20000140
 80015d4:	2000012c 	.word	0x2000012c
 80015d8:	2000007c 	.word	0x2000007c

080015dc <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <xTaskDelayUntil+0x20>
 80015f0:	4a2f      	ldr	r2, [pc, #188]	@ (80016b0 <xTaskDelayUntil+0xd4>)
 80015f2:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <xTaskDelayUntil+0xd8>)
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f004 ff7e 	bl	80064f8 <vAssertCalled>
        configASSERT( ( xTimeIncrement > 0U ) );
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <xTaskDelayUntil+0x32>
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <xTaskDelayUntil+0xdc>)
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <xTaskDelayUntil+0xd8>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f004 ff75 	bl	80064f8 <vAssertCalled>
        configASSERT( uxSchedulerSuspended == 0 );
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <xTaskDelayUntil+0xe0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <xTaskDelayUntil+0x46>
 8001616:	4a2a      	ldr	r2, [pc, #168]	@ (80016c0 <xTaskDelayUntil+0xe4>)
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <xTaskDelayUntil+0xd8>)
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f004 ff6b 	bl	80064f8 <vAssertCalled>

        vTaskSuspendAll();
 8001622:	f000 f8d7 	bl	80017d4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <xTaskDelayUntil+0xe8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	18d3      	adds	r3, r2, r3
 8001634:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d20b      	bcs.n	8001658 <xTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	429a      	cmp	r2, r3
 8001648:	d211      	bcs.n	800166e <xTaskDelayUntil+0x92>
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90d      	bls.n	800166e <xTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e00a      	b.n	800166e <xTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	429a      	cmp	r2, r3
 8001660:	d303      	bcc.n	800166a <xTaskDelayUntil+0x8e>
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	429a      	cmp	r2, r3
 8001668:	d901      	bls.n	800166e <xTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <xTaskDelayUntil+0xb6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	0019      	movs	r1, r3
 800167e:	2079      	movs	r0, #121	@ 0x79
 8001680:	f002 fb42 	bl	8003d08 <xTraceEventCreate1>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	0018      	movs	r0, r3
 800168e:	f000 ffa9 	bl	80025e4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001692:	f000 f8ab 	bl	80017ec <xTaskResumeAll>
 8001696:	0003      	movs	r3, r0
 8001698:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <xTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80016a0:	f001 fb06 	bl	8002cb0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80016a4:	697b      	ldr	r3, [r7, #20]
    }
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b006      	add	sp, #24
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	000004c4 	.word	0x000004c4
 80016b4:	0800703c 	.word	0x0800703c
 80016b8:	000004c5 	.word	0x000004c5
 80016bc:	2000014c 	.word	0x2000014c
 80016c0:	000004c6 	.word	0x000004c6
 80016c4:	20000128 	.word	0x20000128

080016c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <vTaskDelay+0x46>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <vTaskDelay+0x58>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <vTaskDelay+0x26>
 80016e2:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <vTaskDelay+0x5c>)
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <vTaskDelay+0x60>)
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f004 ff05 	bl	80064f8 <vAssertCalled>
            vTaskSuspendAll();
 80016ee:	f000 f871 	bl	80017d4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0019      	movs	r1, r3
 80016f6:	207a      	movs	r0, #122	@ 0x7a
 80016f8:	f002 fb06 	bl	8003d08 <xTraceEventCreate1>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2100      	movs	r1, #0
 8001700:	0018      	movs	r0, r3
 8001702:	f000 ff6f 	bl	80025e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001706:	f000 f871 	bl	80017ec <xTaskResumeAll>
 800170a:	0003      	movs	r3, r0
 800170c:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <vTaskDelay+0x50>
        {
            portYIELD_WITHIN_API();
 8001714:	f001 facc 	bl	8002cb0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b004      	add	sp, #16
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000014c 	.word	0x2000014c
 8001724:	0000051c 	.word	0x0000051c
 8001728:	0800703c 	.word	0x0800703c

0800172c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001732:	491e      	ldr	r1, [pc, #120]	@ (80017ac <vTaskStartScheduler+0x80>)
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <vTaskStartScheduler+0x84>)
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <vTaskStartScheduler+0x88>)
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	2300      	movs	r3, #0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	f7ff fdc6 	bl	80012d2 <xTaskCreate>
 8001746:	0003      	movs	r3, r0
 8001748:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d103      	bne.n	8001758 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001750:	f000 ff8c 	bl	800266c <xTimerCreateTimerTask>
 8001754:	0003      	movs	r3, r0
 8001756:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d116      	bne.n	800178c <vTaskStartScheduler+0x60>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800175e:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <vTaskStartScheduler+0x8c>)
 8001762:	2201      	movs	r2, #1
 8001764:	4252      	negs	r2, r2
 8001766:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <vTaskStartScheduler+0x90>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <vTaskStartScheduler+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <vTaskStartScheduler+0x98>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <vTaskStartScheduler+0x98>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f004 fa9f 	bl	8005cc4 <xTraceTaskSwitch>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001786:	f001 fa6f 	bl	8002c68 <xPortStartScheduler>
 800178a:	e008      	b.n	800179e <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	d105      	bne.n	800179e <vTaskStartScheduler+0x72>
 8001792:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <vTaskStartScheduler+0x9c>)
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <vTaskStartScheduler+0xa0>)
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f004 fead 	bl	80064f8 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <vTaskStartScheduler+0xa4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	08007050 	.word	0x08007050
 80017b0:	0800207d 	.word	0x0800207d
 80017b4:	20000148 	.word	0x20000148
 80017b8:	20000144 	.word	0x20000144
 80017bc:	20000130 	.word	0x20000130
 80017c0:	20000128 	.word	0x20000128
 80017c4:	20000078 	.word	0x20000078
 80017c8:	00000812 	.word	0x00000812
 80017cc:	0800703c 	.word	0x0800703c
 80017d0:	20000000 	.word	0x20000000

080017d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <vTaskSuspendAll+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4b02      	ldr	r3, [pc, #8]	@ (80017e8 <vTaskSuspendAll+0x14>)
 80017e0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000014c 	.word	0x2000014c

080017ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80017fa:	4b6d      	ldr	r3, [pc, #436]	@ (80019b0 <xTaskResumeAll+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <xTaskResumeAll+0x22>
 8001802:	4a6c      	ldr	r2, [pc, #432]	@ (80019b4 <xTaskResumeAll+0x1c8>)
 8001804:	4b6c      	ldr	r3, [pc, #432]	@ (80019b8 <xTaskResumeAll+0x1cc>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f004 fe75 	bl	80064f8 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800180e:	f001 fa5f 	bl	8002cd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001812:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <xTaskResumeAll+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	4b65      	ldr	r3, [pc, #404]	@ (80019b0 <xTaskResumeAll+0x1c4>)
 800181a:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800181c:	4b64      	ldr	r3, [pc, #400]	@ (80019b0 <xTaskResumeAll+0x1c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d000      	beq.n	8001826 <xTaskResumeAll+0x3a>
 8001824:	e0bc      	b.n	80019a0 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001826:	4b65      	ldr	r3, [pc, #404]	@ (80019bc <xTaskResumeAll+0x1d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d100      	bne.n	8001830 <xTaskResumeAll+0x44>
 800182e:	e0b7      	b.n	80019a0 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001830:	e08e      	b.n	8001950 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001832:	4b63      	ldr	r3, [pc, #396]	@ (80019c0 <xTaskResumeAll+0x1d4>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	6a12      	ldr	r2, [r2, #32]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	69d2      	ldr	r2, [r2, #28]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3318      	adds	r3, #24
 800185c:	429a      	cmp	r2, r3
 800185e:	d103      	bne.n	8001868 <xTaskResumeAll+0x7c>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	68d2      	ldr	r2, [r2, #12]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	6892      	ldr	r2, [r2, #8]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3304      	adds	r3, #4
 800189a:	429a      	cmp	r2, r3
 800189c:	d103      	bne.n	80018a6 <xTaskResumeAll+0xba>
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	0019      	movs	r1, r3
 80018ba:	2030      	movs	r0, #48	@ 0x30
 80018bc:	f002 fa24 	bl	8003d08 <xTraceEventCreate1>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c4:	4b3f      	ldr	r3, [pc, #252]	@ (80019c4 <xTaskResumeAll+0x1d8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d903      	bls.n	80018d4 <xTaskResumeAll+0xe8>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d0:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <xTaskResumeAll+0x1d8>)
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d8:	493b      	ldr	r1, [pc, #236]	@ (80019c8 <xTaskResumeAll+0x1dc>)
 80018da:	0013      	movs	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	189b      	adds	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	18cb      	adds	r3, r1, r3
 80018e4:	3304      	adds	r3, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	3204      	adds	r2, #4
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	1d1a      	adds	r2, r3, #4
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800190e:	0013      	movs	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	189b      	adds	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4a2c      	ldr	r2, [pc, #176]	@ (80019c8 <xTaskResumeAll+0x1dc>)
 8001918:	189a      	adds	r2, r3, r2
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001922:	4929      	ldr	r1, [pc, #164]	@ (80019c8 <xTaskResumeAll+0x1dc>)
 8001924:	0013      	movs	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	189b      	adds	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	585b      	ldr	r3, [r3, r1]
 800192e:	1c58      	adds	r0, r3, #1
 8001930:	4925      	ldr	r1, [pc, #148]	@ (80019c8 <xTaskResumeAll+0x1dc>)
 8001932:	0013      	movs	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	189b      	adds	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <xTaskResumeAll+0x1e0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	429a      	cmp	r2, r3
 8001948:	d302      	bcc.n	8001950 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <xTaskResumeAll+0x1e4>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <xTaskResumeAll+0x1d4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d000      	beq.n	800195a <xTaskResumeAll+0x16e>
 8001958:	e76b      	b.n	8001832 <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001960:	f000 fc10 	bl	8002184 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <xTaskResumeAll+0x1e8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00f      	beq.n	8001990 <xTaskResumeAll+0x1a4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001970:	f000 f840 	bl	80019f4 <xTaskIncrementTick>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d002      	beq.n	800197e <xTaskResumeAll+0x192>
                            {
                                xYieldPending = pdTRUE;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <xTaskResumeAll+0x1e4>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f2      	bne.n	8001970 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <xTaskResumeAll+0x1e8>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <xTaskResumeAll+0x1e4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <xTaskResumeAll+0x1b4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800199c:	f001 f988 	bl	8002cb0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80019a0:	f001 f9a8 	bl	8002cf4 <vPortExitCritical>

    return xAlreadyYielded;
 80019a4:	693b      	ldr	r3, [r7, #16]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b006      	add	sp, #24
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	2000014c 	.word	0x2000014c
 80019b4:	00000885 	.word	0x00000885
 80019b8:	0800703c 	.word	0x0800703c
 80019bc:	20000124 	.word	0x20000124
 80019c0:	20000110 	.word	0x20000110
 80019c4:	2000012c 	.word	0x2000012c
 80019c8:	2000007c 	.word	0x2000007c
 80019cc:	20000078 	.word	0x20000078
 80019d0:	20000138 	.word	0x20000138
 80019d4:	20000134 	.word	0x20000134

080019d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <xTaskGetTickCount+0x18>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	20000128 	.word	0x20000128

080019f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80019fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf4 <xTaskIncrementTick+0x200>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d003      	beq.n	8001a0e <xTaskIncrementTick+0x1a>
 8001a06:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf8 <xTaskIncrementTick+0x204>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <xTaskIncrementTick+0x26>
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001bfc <xTaskIncrementTick+0x208>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b7b      	ldr	r3, [pc, #492]	@ (8001c00 <xTaskIncrementTick+0x20c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3201      	adds	r2, #1
 8001a18:	619a      	str	r2, [r3, #24]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a1a:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <xTaskIncrementTick+0x200>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d000      	beq.n	8001a24 <xTaskIncrementTick+0x30>
 8001a22:	e0dc      	b.n	8001bde <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <xTaskIncrementTick+0x208>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	@ (8001bfc <xTaskIncrementTick+0x208>)
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11b      	bne.n	8001a70 <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001a38:	4b72      	ldr	r3, [pc, #456]	@ (8001c04 <xTaskIncrementTick+0x210>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <xTaskIncrementTick+0x5a>
 8001a42:	4a71      	ldr	r2, [pc, #452]	@ (8001c08 <xTaskIncrementTick+0x214>)
 8001a44:	4b71      	ldr	r3, [pc, #452]	@ (8001c0c <xTaskIncrementTick+0x218>)
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f004 fd55 	bl	80064f8 <vAssertCalled>
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c04 <xTaskIncrementTick+0x210>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	4b6e      	ldr	r3, [pc, #440]	@ (8001c10 <xTaskIncrementTick+0x21c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b6a      	ldr	r3, [pc, #424]	@ (8001c04 <xTaskIncrementTick+0x210>)
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c10 <xTaskIncrementTick+0x21c>)
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <xTaskIncrementTick+0x220>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <xTaskIncrementTick+0x220>)
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f000 fb8a 	bl	8002184 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a70:	4b69      	ldr	r3, [pc, #420]	@ (8001c18 <xTaskIncrementTick+0x224>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d200      	bcs.n	8001a7c <xTaskIncrementTick+0x88>
 8001a7a:	e0a9      	b.n	8001bd0 <xTaskIncrementTick+0x1dc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a7c:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <xTaskIncrementTick+0x210>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a86:	4b64      	ldr	r3, [pc, #400]	@ (8001c18 <xTaskIncrementTick+0x224>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4252      	negs	r2, r2
 8001a8c:	601a      	str	r2, [r3, #0]
                    break;
 8001a8e:	e09f      	b.n	8001bd0 <xTaskIncrementTick+0x1dc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a90:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <xTaskIncrementTick+0x210>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d203      	bcs.n	8001ab0 <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <xTaskIncrementTick+0x224>)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001aae:	e08f      	b.n	8001bd0 <xTaskIncrementTick+0x1dc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68d2      	ldr	r2, [r2, #12]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	6892      	ldr	r2, [r2, #8]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d103      	bne.n	8001ade <xTaskIncrementTick+0xea>
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01e      	beq.n	8001b34 <xTaskIncrementTick+0x140>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	6a12      	ldr	r2, [r2, #32]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	69d2      	ldr	r2, [r2, #28]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3318      	adds	r3, #24
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d103      	bne.n	8001b24 <xTaskIncrementTick+0x130>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	0019      	movs	r1, r3
 8001b38:	2030      	movs	r0, #48	@ 0x30
 8001b3a:	f002 f8e5 	bl	8003d08 <xTraceEventCreate1>
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b42:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <xTaskIncrementTick+0x228>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d903      	bls.n	8001b52 <xTaskIncrementTick+0x15e>
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <xTaskIncrementTick+0x228>)
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b56:	4932      	ldr	r1, [pc, #200]	@ (8001c20 <xTaskIncrementTick+0x22c>)
 8001b58:	0013      	movs	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	18cb      	adds	r3, r1, r3
 8001b62:	3304      	adds	r3, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	189b      	adds	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4a22      	ldr	r2, [pc, #136]	@ (8001c20 <xTaskIncrementTick+0x22c>)
 8001b96:	189a      	adds	r2, r3, r2
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba0:	491f      	ldr	r1, [pc, #124]	@ (8001c20 <xTaskIncrementTick+0x22c>)
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	189b      	adds	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	585b      	ldr	r3, [r3, r1]
 8001bac:	1c58      	adds	r0, r3, #1
 8001bae:	491c      	ldr	r1, [pc, #112]	@ (8001c20 <xTaskIncrementTick+0x22c>)
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	189b      	adds	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <xTaskIncrementTick+0x230>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d800      	bhi.n	8001bca <xTaskIncrementTick+0x1d6>
 8001bc8:	e758      	b.n	8001a7c <xTaskIncrementTick+0x88>
                        {
                            xSwitchRequired = pdTRUE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bce:	e755      	b.n	8001a7c <xTaskIncrementTick+0x88>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <xTaskIncrementTick+0x234>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	e004      	b.n	8001be8 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <xTaskIncrementTick+0x204>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <xTaskIncrementTick+0x204>)
 8001be6:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001be8:	69fb      	ldr	r3, [r7, #28]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b008      	add	sp, #32
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	2000014c 	.word	0x2000014c
 8001bf8:	20000134 	.word	0x20000134
 8001bfc:	20000128 	.word	0x20000128
 8001c00:	20003068 	.word	0x20003068
 8001c04:	20000108 	.word	0x20000108
 8001c08:	00000ab7 	.word	0x00000ab7
 8001c0c:	0800703c 	.word	0x0800703c
 8001c10:	2000010c 	.word	0x2000010c
 8001c14:	2000013c 	.word	0x2000013c
 8001c18:	20000144 	.word	0x20000144
 8001c1c:	2000012c 	.word	0x2000012c
 8001c20:	2000007c 	.word	0x2000007c
 8001c24:	20000078 	.word	0x20000078
 8001c28:	20000138 	.word	0x20000138

08001c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <vTaskSwitchContext+0xa8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001c3a:	4b27      	ldr	r3, [pc, #156]	@ (8001cd8 <vTaskSwitchContext+0xac>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001c40:	e044      	b.n	8001ccc <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <vTaskSwitchContext+0xac>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c48:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <vTaskSwitchContext+0xb0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e00b      	b.n	8001c68 <vTaskSwitchContext+0x3c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <vTaskSwitchContext+0x36>
 8001c56:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <vTaskSwitchContext+0xb4>)
 8001c58:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <vTaskSwitchContext+0xb8>)
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f004 fc4b 	bl	80064f8 <vAssertCalled>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	491f      	ldr	r1, [pc, #124]	@ (8001ce8 <vTaskSwitchContext+0xbc>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	585b      	ldr	r3, [r3, r1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ea      	beq.n	8001c50 <vTaskSwitchContext+0x24>
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4a18      	ldr	r2, [pc, #96]	@ (8001ce8 <vTaskSwitchContext+0xbc>)
 8001c86:	189b      	adds	r3, r3, r2
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d104      	bne.n	8001caa <vTaskSwitchContext+0x7e>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <vTaskSwitchContext+0xc0>)
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <vTaskSwitchContext+0xb0>)
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <vTaskSwitchContext+0xc0>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <vTaskSwitchContext+0xc0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	f003 fffc 	bl	8005cc4 <xTraceTaskSwitch>
}
 8001ccc:	46c0      	nop			@ (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000014c 	.word	0x2000014c
 8001cd8:	20000138 	.word	0x20000138
 8001cdc:	2000012c 	.word	0x2000012c
 8001ce0:	00000bf6 	.word	0x00000bf6
 8001ce4:	0800703c 	.word	0x0800703c
 8001ce8:	2000007c 	.word	0x2000007c
 8001cec:	20000078 	.word	0x20000078

08001cf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <vTaskPlaceOnEventList+0x1c>
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <vTaskPlaceOnEventList+0x40>)
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <vTaskPlaceOnEventList+0x44>)
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f004 fbf6 	bl	80064f8 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <vTaskPlaceOnEventList+0x48>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3318      	adds	r3, #24
 8001d12:	001a      	movs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7fe faaa 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fc5e 	bl	80025e4 <prvAddCurrentTaskToDelayedList>
}
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	00000c0e 	.word	0x00000c0e
 8001d34:	0800703c 	.word	0x0800703c
 8001d38:	20000078 	.word	0x20000078

08001d3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <vTaskPlaceOnEventListRestricted+0x1e>
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <vTaskPlaceOnEventListRestricted+0x90>)
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <vTaskPlaceOnEventListRestricted+0x94>)
 8001d52:	0011      	movs	r1, r2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f004 fbcf 	bl	80064f8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	61da      	str	r2, [r3, #28]
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6892      	ldr	r2, [r2, #8]
 8001d70:	621a      	str	r2, [r3, #32]
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	3218      	adds	r2, #24
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3318      	adds	r3, #24
 8001d84:	001a      	movs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <vTaskPlaceOnEventListRestricted+0x6c>
        {
            xTicksToWait = portMAX_DELAY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <vTaskPlaceOnEventListRestricted+0x9c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	0019      	movs	r1, r3
 8001db2:	2079      	movs	r0, #121	@ 0x79
 8001db4:	f001 ffa8 	bl	8003d08 <xTraceEventCreate1>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fc10 	bl	80025e4 <prvAddCurrentTaskToDelayedList>
    }
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b006      	add	sp, #24
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00000c44 	.word	0x00000c44
 8001dd0:	0800703c 	.word	0x0800703c
 8001dd4:	20000078 	.word	0x20000078
 8001dd8:	20000128 	.word	0x20000128

08001ddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <xTaskRemoveFromEventList+0x22>
 8001df2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f6c <xTaskRemoveFromEventList+0x190>)
 8001df4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f70 <xTaskRemoveFromEventList+0x194>)
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f004 fb7d 	bl	80064f8 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	6a12      	ldr	r2, [r2, #32]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	69d2      	ldr	r2, [r2, #28]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	3318      	adds	r3, #24
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d103      	bne.n	8001e2c <xTaskRemoveFromEventList+0x50>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <xTaskRemoveFromEventList+0x198>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d162      	bne.n	8001f0a <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3304      	adds	r3, #4
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d103      	bne.n	8001e72 <xTaskRemoveFromEventList+0x96>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	0019      	movs	r1, r3
 8001e86:	2030      	movs	r0, #48	@ 0x30
 8001e88:	f001 ff3e 	bl	8003d08 <xTraceEventCreate1>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e90:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <xTaskRemoveFromEventList+0x19c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d903      	bls.n	8001ea0 <xTaskRemoveFromEventList+0xc4>
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <xTaskRemoveFromEventList+0x19c>)
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <xTaskRemoveFromEventList+0x1a0>)
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	18cb      	adds	r3, r1, r3
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	3204      	adds	r2, #4
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1d1a      	adds	r2, r3, #4
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eda:	0013      	movs	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	189b      	adds	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4a26      	ldr	r2, [pc, #152]	@ (8001f7c <xTaskRemoveFromEventList+0x1a0>)
 8001ee4:	189a      	adds	r2, r3, r2
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	615a      	str	r2, [r3, #20]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eee:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <xTaskRemoveFromEventList+0x1a0>)
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	585b      	ldr	r3, [r3, r1]
 8001efa:	1c58      	adds	r0, r3, #1
 8001efc:	491f      	ldr	r1, [pc, #124]	@ (8001f7c <xTaskRemoveFromEventList+0x1a0>)
 8001efe:	0013      	movs	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	5058      	str	r0, [r3, r1]
 8001f08:	e01b      	b.n	8001f42 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <xTaskRemoveFromEventList+0x1a4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	621a      	str	r2, [r3, #32]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	3218      	adds	r2, #24
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <xTaskRemoveFromEventList+0x1a4>)
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <xTaskRemoveFromEventList+0x1a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <xTaskRemoveFromEventList+0x1a4>)
 8001f40:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <xTaskRemoveFromEventList+0x1a8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d905      	bls.n	8001f5c <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <xTaskRemoveFromEventList+0x1ac>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e001      	b.n	8001f60 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001f60:	69fb      	ldr	r3, [r7, #28]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b008      	add	sp, #32
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	00000c74 	.word	0x00000c74
 8001f70:	0800703c 	.word	0x0800703c
 8001f74:	2000014c 	.word	0x2000014c
 8001f78:	2000012c 	.word	0x2000012c
 8001f7c:	2000007c 	.word	0x2000007c
 8001f80:	20000110 	.word	0x20000110
 8001f84:	20000078 	.word	0x20000078
 8001f88:	20000138 	.word	0x20000138

08001f8c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <vTaskInternalSetTimeOutState+0x20>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <vTaskInternalSetTimeOutState+0x24>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	605a      	str	r2, [r3, #4]
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000013c 	.word	0x2000013c
 8001fb0:	20000128 	.word	0x20000128

08001fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <xTaskCheckForTimeOut+0x1c>
 8001fc4:	4a24      	ldr	r2, [pc, #144]	@ (8002058 <xTaskCheckForTimeOut+0xa4>)
 8001fc6:	4b25      	ldr	r3, [pc, #148]	@ (800205c <xTaskCheckForTimeOut+0xa8>)
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f004 fa94 	bl	80064f8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <xTaskCheckForTimeOut+0x30>
 8001fd6:	23cf      	movs	r3, #207	@ 0xcf
 8001fd8:	011a      	lsls	r2, r3, #4
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <xTaskCheckForTimeOut+0xa8>)
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f004 fa8a 	bl	80064f8 <vAssertCalled>

    taskENTER_CRITICAL();
 8001fe4:	f000 fe74 	bl	8002cd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <xTaskCheckForTimeOut+0xac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <xTaskCheckForTimeOut+0xb0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d00a      	beq.n	800201a <xTaskCheckForTimeOut+0x66>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d305      	bcc.n	800201a <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800200e:	2301      	movs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e016      	b.n	8002048 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d20c      	bcs.n	800203e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff ffaa 	bl	8001f8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e004      	b.n	8002048 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002048:	f000 fe54 	bl	8002cf4 <vPortExitCritical>

    return xReturn;
 800204c:	697b      	ldr	r3, [r7, #20]
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b006      	add	sp, #24
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	00000cef 	.word	0x00000cef
 800205c:	0800703c 	.word	0x0800703c
 8002060:	20000128 	.word	0x20000128
 8002064:	2000013c 	.word	0x2000013c

08002068 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800206c:	4b02      	ldr	r3, [pc, #8]	@ (8002078 <vTaskMissedYield+0x10>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000138 	.word	0x20000138

0800207c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002084:	f000 f842 	bl	800210c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <prvIdleTask+0x1c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d9f9      	bls.n	8002084 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002090:	f000 fe0e 	bl	8002cb0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002094:	e7f6      	b.n	8002084 <prvIdleTask+0x8>
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	2000007c 	.word	0x2000007c

0800209c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e00c      	b.n	80020c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	0013      	movs	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4a10      	ldr	r2, [pc, #64]	@ (80020f4 <prvInitialiseTaskLists+0x58>)
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe f8b2 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3301      	adds	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d9ef      	bls.n	80020a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <prvInitialiseTaskLists+0x5c>)
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe f8a8 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <prvInitialiseTaskLists+0x60>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe f8a4 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <prvInitialiseTaskLists+0x64>)
 80020da:	0018      	movs	r0, r3
 80020dc:	f7fe f8a0 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <prvInitialiseTaskLists+0x68>)
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <prvInitialiseTaskLists+0x5c>)
 80020e4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <prvInitialiseTaskLists+0x6c>)
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <prvInitialiseTaskLists+0x60>)
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000007c 	.word	0x2000007c
 80020f8:	200000e0 	.word	0x200000e0
 80020fc:	200000f4 	.word	0x200000f4
 8002100:	20000110 	.word	0x20000110
 8002104:	20000108 	.word	0x20000108
 8002108:	2000010c 	.word	0x2000010c

0800210c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002122:	e005      	b.n	8002130 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
            ulCount++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2ba5      	cmp	r3, #165	@ 0xa5
 8002136:	d0f5      	beq.n	8002124 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	b29b      	uxth	r3, r3
    }
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b004      	add	sp, #16
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <uxTaskGetStackHighWaterMark+0x14>
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <uxTaskGetStackHighWaterMark+0x34>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e000      	b.n	8002162 <uxTaskGetStackHighWaterMark+0x16>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff ffd2 	bl	8002116 <prvTaskCheckFreeStackSpace>
 8002172:	0003      	movs	r3, r0
 8002174:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8002176:	68fb      	ldr	r3, [r7, #12]
    }
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b006      	add	sp, #24
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000078 	.word	0x20000078

08002184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <prvResetNextTaskUnblockTime+0x2c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <prvResetNextTaskUnblockTime+0x30>)
 8002194:	2201      	movs	r2, #1
 8002196:	4252      	negs	r2, r2
 8002198:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800219a:	e005      	b.n	80021a8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <prvResetNextTaskUnblockTime+0x2c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <prvResetNextTaskUnblockTime+0x30>)
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	20000108 	.word	0x20000108
 80021b4:	20000144 	.word	0x20000144

080021b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <xTaskGetSchedulerState+0x30>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80021c6:	2301      	movs	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e008      	b.n	80021de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <xTaskGetSchedulerState+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80021d4:	2302      	movs	r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	e001      	b.n	80021de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80021de:	687b      	ldr	r3, [r7, #4]
    }
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000130 	.word	0x20000130
 80021ec:	2000014c 	.word	0x2000014c

080021f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <xTaskPriorityInherit+0x18>
 8002206:	e084      	b.n	8002312 <xTaskPriorityInherit+0x122>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220c:	4b43      	ldr	r3, [pc, #268]	@ (800231c <xTaskPriorityInherit+0x12c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	429a      	cmp	r2, r3
 8002214:	d274      	bcs.n	8002300 <xTaskPriorityInherit+0x110>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db06      	blt.n	800222c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800221e:	4b3f      	ldr	r3, [pc, #252]	@ (800231c <xTaskPriorityInherit+0x12c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	2205      	movs	r2, #5
 8002226:	1ad2      	subs	r2, r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002234:	0013      	movs	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	189b      	adds	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <xTaskPriorityInherit+0x130>)
 800223e:	189b      	adds	r3, r3, r2
 8002240:	4299      	cmp	r1, r3
 8002242:	d14d      	bne.n	80022e0 <xTaskPriorityInherit+0xf0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3304      	adds	r3, #4
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe f848 	bl	80002de <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800224e:	4b33      	ldr	r3, [pc, #204]	@ (800231c <xTaskPriorityInherit+0x12c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	0019      	movs	r1, r3
 800225c:	2030      	movs	r0, #48	@ 0x30
 800225e:	f001 fd53 	bl	8003d08 <xTraceEventCreate1>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002266:	4b2f      	ldr	r3, [pc, #188]	@ (8002324 <xTaskPriorityInherit+0x134>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d903      	bls.n	8002276 <xTaskPriorityInherit+0x86>
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <xTaskPriorityInherit+0x134>)
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800227a:	4929      	ldr	r1, [pc, #164]	@ (8002320 <xTaskPriorityInherit+0x130>)
 800227c:	0013      	movs	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	189b      	adds	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	18cb      	adds	r3, r1, r3
 8002286:	3304      	adds	r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	3204      	adds	r2, #4
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1d1a      	adds	r2, r3, #4
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	0013      	movs	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <xTaskPriorityInherit+0x130>)
 80022ba:	189a      	adds	r2, r3, r2
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c4:	4916      	ldr	r1, [pc, #88]	@ (8002320 <xTaskPriorityInherit+0x130>)
 80022c6:	0013      	movs	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	585b      	ldr	r3, [r3, r1]
 80022d0:	1c58      	adds	r0, r3, #1
 80022d2:	4913      	ldr	r1, [pc, #76]	@ (8002320 <xTaskPriorityInherit+0x130>)
 80022d4:	0013      	movs	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	5058      	str	r0, [r3, r1]
 80022de:	e004      	b.n	80022ea <xTaskPriorityInherit+0xfa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <xTaskPriorityInherit+0x12c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <xTaskPriorityInherit+0x12c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	001a      	movs	r2, r3
 80022f4:	2005      	movs	r0, #5
 80022f6:	f001 fd7f 	bl	8003df8 <xTraceEventCreate2>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80022fa:	2301      	movs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e008      	b.n	8002312 <xTaskPriorityInherit+0x122>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <xTaskPriorityInherit+0x12c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	429a      	cmp	r2, r3
 800230c:	d201      	bcs.n	8002312 <xTaskPriorityInherit+0x122>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002312:	697b      	ldr	r3, [r7, #20]
    }
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b006      	add	sp, #24
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000078 	.word	0x20000078
 8002320:	2000007c 	.word	0x2000007c
 8002324:	2000012c 	.word	0x2000012c

08002328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <xTaskPriorityDisinherit+0x18>
 800233e:	e07e      	b.n	800243e <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002340:	4b41      	ldr	r3, [pc, #260]	@ (8002448 <xTaskPriorityDisinherit+0x120>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d005      	beq.n	8002356 <xTaskPriorityDisinherit+0x2e>
 800234a:	4a40      	ldr	r2, [pc, #256]	@ (800244c <xTaskPriorityDisinherit+0x124>)
 800234c:	4b40      	ldr	r3, [pc, #256]	@ (8002450 <xTaskPriorityDisinherit+0x128>)
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f004 f8d1 	bl	80064f8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <xTaskPriorityDisinherit+0x42>
 800235e:	4a3d      	ldr	r2, [pc, #244]	@ (8002454 <xTaskPriorityDisinherit+0x12c>)
 8002360:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <xTaskPriorityDisinherit+0x128>)
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f004 f8c7 	bl	80064f8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237c:	429a      	cmp	r2, r3
 800237e:	d05e      	beq.n	800243e <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002384:	2b00      	cmp	r3, #0
 8002386:	d15a      	bne.n	800243e <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3304      	adds	r3, #4
 800238c:	0018      	movs	r0, r3
 800238e:	f7fd ffa6 	bl	80002de <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002392:	6939      	ldr	r1, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	001a      	movs	r2, r3
 800239a:	2006      	movs	r0, #6
 800239c:	f001 fd2c 	bl	8003df8 <xTraceEventCreate2>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	2205      	movs	r2, #5
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	0019      	movs	r1, r3
 80023b8:	2030      	movs	r0, #48	@ 0x30
 80023ba:	f001 fca5 	bl	8003d08 <xTraceEventCreate1>
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c2:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <xTaskPriorityDisinherit+0x130>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d903      	bls.n	80023d2 <xTaskPriorityDisinherit+0xaa>
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ce:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <xTaskPriorityDisinherit+0x130>)
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d6:	4921      	ldr	r1, [pc, #132]	@ (800245c <xTaskPriorityDisinherit+0x134>)
 80023d8:	0013      	movs	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	18cb      	adds	r3, r1, r3
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	3204      	adds	r2, #4
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240c:	0013      	movs	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	189b      	adds	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4a11      	ldr	r2, [pc, #68]	@ (800245c <xTaskPriorityDisinherit+0x134>)
 8002416:	189a      	adds	r2, r3, r2
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002420:	490e      	ldr	r1, [pc, #56]	@ (800245c <xTaskPriorityDisinherit+0x134>)
 8002422:	0013      	movs	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	189b      	adds	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	585b      	ldr	r3, [r3, r1]
 800242c:	1c58      	adds	r0, r3, #1
 800242e:	490b      	ldr	r1, [pc, #44]	@ (800245c <xTaskPriorityDisinherit+0x134>)
 8002430:	0013      	movs	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	189b      	adds	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800243a:	2301      	movs	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800243e:	697b      	ldr	r3, [r7, #20]
    }
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b006      	add	sp, #24
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000078 	.word	0x20000078
 800244c:	00001048 	.word	0x00001048
 8002450:	0800703c 	.word	0x0800703c
 8002454:	00001049 	.word	0x00001049
 8002458:	2000012c 	.word	0x2000012c
 800245c:	2000007c 	.word	0x2000007c

08002460 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d100      	bne.n	800247a <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8002478:	e092      	b.n	80025a0 <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <vTaskPriorityDisinheritAfterTimeout+0x2e>
 8002482:	4a49      	ldr	r2, [pc, #292]	@ (80025a8 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8002484:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f004 f835 	bl	80064f8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d902      	bls.n	800249e <vTaskPriorityDisinheritAfterTimeout+0x3e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e002      	b.n	80024a4 <vTaskPriorityDisinheritAfterTimeout+0x44>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d100      	bne.n	80024b0 <vTaskPriorityDisinheritAfterTimeout+0x50>
 80024ae:	e077      	b.n	80025a0 <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d172      	bne.n	80025a0 <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80024ba:	4b3d      	ldr	r3, [pc, #244]	@ (80025b0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d105      	bne.n	80024d0 <vTaskPriorityDisinheritAfterTimeout+0x70>
 80024c4:	4a3b      	ldr	r2, [pc, #236]	@ (80025b4 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80024c8:	0011      	movs	r1, r2
 80024ca:	0018      	movs	r0, r3
 80024cc:	f004 f814 	bl	80064f8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	0019      	movs	r1, r3
 80024d6:	2006      	movs	r0, #6
 80024d8:	f001 fc8e 	bl	8003df8 <xTraceEventCreate2>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db04      	blt.n	80024fa <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2205      	movs	r2, #5
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6959      	ldr	r1, [r3, #20]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	0013      	movs	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	189b      	adds	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800250a:	189b      	adds	r3, r3, r2
 800250c:	4299      	cmp	r1, r3
 800250e:	d147      	bne.n	80025a0 <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	3304      	adds	r3, #4
 8002514:	0018      	movs	r0, r3
 8002516:	f7fd fee2 	bl	80002de <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	0019      	movs	r1, r3
 800251e:	2030      	movs	r0, #48	@ 0x30
 8002520:	f001 fbf2 	bl	8003d08 <xTraceEventCreate1>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d903      	bls.n	8002538 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002534:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253c:	491e      	ldr	r1, [pc, #120]	@ (80025b8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800253e:	0013      	movs	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	189b      	adds	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	18cb      	adds	r3, r1, r3
 8002548:	3304      	adds	r3, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	3204      	adds	r2, #4
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002572:	0013      	movs	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	189b      	adds	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4a0f      	ldr	r2, [pc, #60]	@ (80025b8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800257c:	189a      	adds	r2, r3, r2
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	490c      	ldr	r1, [pc, #48]	@ (80025b8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002588:	0013      	movs	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	189b      	adds	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	585b      	ldr	r3, [r3, r1]
 8002592:	1c58      	adds	r0, r3, #1
 8002594:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002596:	0013      	movs	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	189b      	adds	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b008      	add	sp, #32
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00001098 	.word	0x00001098
 80025ac:	0800703c 	.word	0x0800703c
 80025b0:	20000078 	.word	0x20000078
 80025b4:	000010b3 	.word	0x000010b3
 80025b8:	2000007c 	.word	0x2000007c
 80025bc:	2000012c 	.word	0x2000012c

080025c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025d2:	3201      	adds	r2, #1
 80025d4:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80025d6:	4b02      	ldr	r3, [pc, #8]	@ (80025e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80025d8:	681b      	ldr	r3, [r3, #0]
    }
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000078 	.word	0x20000078

080025e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <prvAddCurrentTaskToDelayedList+0x74>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <prvAddCurrentTaskToDelayedList+0x78>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7fd fe6f 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	18d3      	adds	r3, r2, r3
 8002606:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <prvAddCurrentTaskToDelayedList+0x78>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d209      	bcs.n	800262c <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <prvAddCurrentTaskToDelayedList+0x7c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <prvAddCurrentTaskToDelayedList+0x78>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3304      	adds	r3, #4
 8002622:	0019      	movs	r1, r3
 8002624:	0010      	movs	r0, r2
 8002626:	f7fd fe24 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800262a:	e010      	b.n	800264e <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800262c:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <prvAddCurrentTaskToDelayedList+0x80>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <prvAddCurrentTaskToDelayedList+0x78>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3304      	adds	r3, #4
 8002636:	0019      	movs	r1, r3
 8002638:	0010      	movs	r0, r2
 800263a:	f7fd fe1a 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <prvAddCurrentTaskToDelayedList+0x84>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	429a      	cmp	r2, r3
 8002646:	d202      	bcs.n	800264e <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <prvAddCurrentTaskToDelayedList+0x84>)
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b004      	add	sp, #16
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	20000128 	.word	0x20000128
 800265c:	20000078 	.word	0x20000078
 8002660:	2000010c 	.word	0x2000010c
 8002664:	20000108 	.word	0x20000108
 8002668:	20000144 	.word	0x20000144

0800266c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002676:	f000 fa53 	bl	8002b20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <xTimerCreateTimerTask+0x50>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002682:	490f      	ldr	r1, [pc, #60]	@ (80026c0 <xTimerCreateTimerTask+0x54>)
 8002684:	480f      	ldr	r0, [pc, #60]	@ (80026c4 <xTimerCreateTimerTask+0x58>)
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <xTimerCreateTimerTask+0x5c>)
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2303      	movs	r3, #3
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2280      	movs	r2, #128	@ 0x80
 8002692:	f7fe fe1e 	bl	80012d2 <xTaskCreate>
 8002696:	0003      	movs	r3, r0
 8002698:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <xTimerCreateTimerTask+0x44>
 80026a0:	231a      	movs	r3, #26
 80026a2:	33ff      	adds	r3, #255	@ 0xff
 80026a4:	001a      	movs	r2, r3
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <xTimerCreateTimerTask+0x60>)
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f003 ff24 	bl	80064f8 <vAssertCalled>
        return xReturn;
 80026b0:	687b      	ldr	r3, [r7, #4]
    }
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	20000180 	.word	0x20000180
 80026c0:	08007058 	.word	0x08007058
 80026c4:	08002791 	.word	0x08002791
 80026c8:	20000184 	.word	0x20000184
 80026cc:	08007060 	.word	0x08007060

080026d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026dc:	e010      	b.n	8002700 <prvReloadTimer+0x30>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 80026e8:	68f9      	ldr	r1, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	001a      	movs	r2, r3
 80026f0:	20d2      	movs	r0, #210	@ 0xd2
 80026f2:	f001 fb81 	bl	8003df8 <xTraceEventCreate2>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	0010      	movs	r0, r2
 80026fe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	18d1      	adds	r1, r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f8df 	bl	80028d0 <prvInsertTimerInActiveList>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d1e3      	bne.n	80026de <prvReloadTimer+0xe>
        }
    }
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}

08002720 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <prvProcessExpiredTimer+0x6c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3304      	adds	r3, #4
 8002738:	0018      	movs	r0, r3
 800273a:	f7fd fdd0 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2228      	movs	r2, #40	@ 0x28
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	001a      	movs	r2, r3
 8002746:	2304      	movs	r3, #4
 8002748:	4013      	ands	r3, r2
 800274a:	d006      	beq.n	800275a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff ffbc 	bl	80026d0 <prvReloadTimer>
 8002758:	e008      	b.n	800276c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2228      	movs	r2, #40	@ 0x28
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	2201      	movs	r2, #1
 8002762:	4393      	bics	r3, r2
 8002764:	b2d9      	uxtb	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2228      	movs	r2, #40	@ 0x28
 800276a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	001a      	movs	r2, r3
 8002774:	20d2      	movs	r0, #210	@ 0xd2
 8002776:	f001 fb3f 	bl	8003df8 <xTraceEventCreate2>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	0010      	movs	r0, r2
 8002782:	4798      	blx	r3
    }
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000178 	.word	0x20000178

08002790 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002798:	2308      	movs	r3, #8
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f855 	bl	800284c <prvGetNextExpireTime>
 80027a2:	0003      	movs	r3, r0
 80027a4:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 f805 	bl	80027bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80027b2:	f000 f8cf 	bl	8002954 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	e7ee      	b.n	8002798 <prvTimerTask+0x8>
	...

080027bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80027c6:	f7ff f805 	bl	80017d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027ca:	2308      	movs	r3, #8
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f85e 	bl	8002890 <prvSampleTimeNow>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12b      	bne.n	8002836 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <prvProcessTimerOrBlockTask+0x42>
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d808      	bhi.n	80027fe <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80027ec:	f7fe fffe 	bl	80017ec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ff92 	bl	8002720 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027fc:	e01d      	b.n	800283a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <prvProcessTimerOrBlockTask+0x88>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <prvProcessTimerOrBlockTask+0x56>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <prvProcessTimerOrBlockTask+0x58>
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <prvProcessTimerOrBlockTask+0x8c>)
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	0019      	movs	r1, r3
 8002824:	f7fe fd22 	bl	800126c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002828:	f7fe ffe0 	bl	80017ec <xTaskResumeAll>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d104      	bne.n	800283a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002830:	f000 fa3e 	bl	8002cb0 <vPortYield>
    }
 8002834:	e001      	b.n	800283a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002836:	f7fe ffd9 	bl	80017ec <xTaskResumeAll>
    }
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	2000017c 	.word	0x2000017c
 8002848:	20000180 	.word	0x20000180

0800284c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <prvGetNextExpireTime+0x40>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <prvGetNextExpireTime+0x16>
 800285e:	2201      	movs	r2, #1
 8002860:	e000      	b.n	8002864 <prvGetNextExpireTime+0x18>
 8002862:	2200      	movs	r2, #0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <prvGetNextExpireTime+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e001      	b.n	8002880 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002880:	68fb      	ldr	r3, [r7, #12]
    }
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	20000178 	.word	0x20000178

08002890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002898:	f7ff f89e 	bl	80019d8 <xTaskGetTickCount>
 800289c:	0003      	movs	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <prvSampleTimeNow+0x3c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d205      	bcs.n	80028b6 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80028aa:	f000 f911 	bl	8002ad0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e002      	b.n	80028bc <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <prvSampleTimeNow+0x3c>)
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80028c2:	68fb      	ldr	r3, [r7, #12]
    }
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000188 	.word	0x20000188

080028d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d812      	bhi.n	800291c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	1ad2      	subs	r2, r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002904:	2301      	movs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e01b      	b.n	8002942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <prvInsertTimerInActiveList+0x7c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3304      	adds	r3, #4
 8002912:	0019      	movs	r1, r3
 8002914:	0010      	movs	r0, r2
 8002916:	f7fd fcac 	bl	8000272 <vListInsert>
 800291a:	e012      	b.n	8002942 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d206      	bcs.n	8002932 <prvInsertTimerInActiveList+0x62>
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e007      	b.n	8002942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <prvInsertTimerInActiveList+0x80>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	0019      	movs	r1, r3
 800293c:	0010      	movs	r0, r2
 800293e:	f7fd fc98 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002942:	697b      	ldr	r3, [r7, #20]
    }
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b006      	add	sp, #24
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000017c 	.word	0x2000017c
 8002950:	20000178 	.word	0x20000178

08002954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800295a:	e0a2      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da00      	bge.n	8002966 <prvProcessReceivedCommands+0x12>
 8002964:	e09d      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3304      	adds	r3, #4
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd fcb0 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800297e:	003b      	movs	r3, r7
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff ff85 	bl	8002890 <prvSampleTimeNow>
 8002986:	0003      	movs	r3, r0
 8002988:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b09      	cmp	r3, #9
 8002990:	d900      	bls.n	8002994 <prvProcessReceivedCommands+0x40>
 8002992:	e083      	b.n	8002a9c <prvProcessReceivedCommands+0x148>
 8002994:	009a      	lsls	r2, r3, #2
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <prvProcessReceivedCommands+0x16c>)
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2228      	movs	r2, #40	@ 0x28
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b2d9      	uxtb	r1, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2228      	movs	r2, #40	@ 0x28
 80029ae:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	18d1      	adds	r1, r2, r3
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f7ff ff85 	bl	80028d0 <prvInsertTimerInActiveList>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d06a      	beq.n	8002aa0 <prvProcessReceivedCommands+0x14c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2228      	movs	r2, #40	@ 0x28
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	001a      	movs	r2, r3
 80029d2:	2304      	movs	r3, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00a      	beq.n	80029ee <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	18d1      	adds	r1, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fe72 	bl	80026d0 <prvReloadTimer>
 80029ec:	e008      	b.n	8002a00 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2228      	movs	r2, #40	@ 0x28
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	2201      	movs	r2, #1
 80029f6:	4393      	bics	r3, r2
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2228      	movs	r2, #40	@ 0x28
 80029fe:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	001a      	movs	r2, r3
 8002a08:	20d2      	movs	r0, #210	@ 0xd2
 8002a0a:	f001 f9f5 	bl	8003df8 <xTraceEventCreate2>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	0010      	movs	r0, r2
 8002a16:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002a18:	e042      	b.n	8002aa0 <prvProcessReceivedCommands+0x14c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2228      	movs	r2, #40	@ 0x28
 8002a1e:	5c9b      	ldrb	r3, [r3, r2]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4393      	bics	r3, r2
 8002a24:	b2d9      	uxtb	r1, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2228      	movs	r2, #40	@ 0x28
 8002a2a:	5499      	strb	r1, [r3, r2]
                        break;
 8002a2c:	e039      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2228      	movs	r2, #40	@ 0x28
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2228      	movs	r2, #40	@ 0x28
 8002a3e:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <prvProcessReceivedCommands+0x108>
 8002a50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac4 <prvProcessReceivedCommands+0x170>)
 8002a52:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <prvProcessReceivedCommands+0x174>)
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f003 fd4e 	bl	80064f8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	18d1      	adds	r1, r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ff31 	bl	80028d0 <prvInsertTimerInActiveList>
                        break;
 8002a6e:	e018      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2228      	movs	r2, #40	@ 0x28
 8002a74:	5c9b      	ldrb	r3, [r3, r2]
 8002a76:	001a      	movs	r2, r3
 8002a78:	2302      	movs	r3, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d104      	bne.n	8002a88 <prvProcessReceivedCommands+0x134>
                            {
                                vPortFree( pxTimer );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fa2d 	bl	8002ee0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a86:	e00c      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2228      	movs	r2, #40	@ 0x28
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	b2d9      	uxtb	r1, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2228      	movs	r2, #40	@ 0x28
 8002a98:	5499      	strb	r1, [r3, r2]
                        break;
 8002a9a:	e002      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	e000      	b.n	8002aa2 <prvProcessReceivedCommands+0x14e>
                        break;
 8002aa0:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <prvProcessReceivedCommands+0x178>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1d39      	adds	r1, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7fd ff40 	bl	8000930 <xQueueReceive>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d000      	beq.n	8002ab6 <prvProcessReceivedCommands+0x162>
 8002ab4:	e752      	b.n	800295c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b006      	add	sp, #24
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	080076d0 	.word	0x080076d0
 8002ac4:	0000035e 	.word	0x0000035e
 8002ac8:	08007060 	.word	0x08007060
 8002acc:	20000180 	.word	0x20000180

08002ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ad6:	e00b      	b.n	8002af0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b18 <prvSwitchTimerLists+0x48>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	425a      	negs	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	0011      	movs	r1, r2
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff fe18 	bl	8002720 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <prvSwitchTimerLists+0x48>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ee      	bne.n	8002ad8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <prvSwitchTimerLists+0x48>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <prvSwitchTimerLists+0x4c>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <prvSwitchTimerLists+0x48>)
 8002b06:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <prvSwitchTimerLists+0x4c>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
    }
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	20000178 	.word	0x20000178
 8002b1c:	2000017c 	.word	0x2000017c

08002b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b24:	f000 f8d4 	bl	8002cd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <prvCheckForValidListAndQueue+0x5c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d120      	bne.n	8002b72 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <prvCheckForValidListAndQueue+0x60>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7fd fb74 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <prvCheckForValidListAndQueue+0x64>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fb70 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <prvCheckForValidListAndQueue+0x68>)
 8002b42:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <prvCheckForValidListAndQueue+0x60>)
 8002b44:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <prvCheckForValidListAndQueue+0x6c>)
 8002b48:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <prvCheckForValidListAndQueue+0x64>)
 8002b4a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	210c      	movs	r1, #12
 8002b50:	200a      	movs	r0, #10
 8002b52:	f7fd fc83 	bl	800045c <xQueueGenericCreate>
 8002b56:	0002      	movs	r2, r0
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <prvCheckForValidListAndQueue+0x5c>)
 8002b5a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b5c:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <prvCheckForValidListAndQueue+0x5c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <prvCheckForValidListAndQueue+0x5c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <prvCheckForValidListAndQueue+0x70>)
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fe fb2b 	bl	80011c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b72:	f000 f8bf 	bl	8002cf4 <vPortExitCritical>
    }
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000180 	.word	0x20000180
 8002b80:	20000150 	.word	0x20000150
 8002b84:	20000164 	.word	0x20000164
 8002b88:	20000178 	.word	0x20000178
 8002b8c:	2000017c 	.word	0x2000017c
 8002b90:	08007078 	.word	0x08007078

08002b94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	0452      	lsls	r2, r2, #17
 8002bac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b04      	subs	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b04      	subs	r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002bc0:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <pxPortInitialiseStack+0x50>)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b14      	subs	r3, #20
 8002bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b20      	subs	r3, #32
 8002bd6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	08002be9 	.word	0x08002be9

08002be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <prvTaskExitError+0x30>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	d004      	beq.n	8002c04 <prvTaskExitError+0x1c>
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <prvTaskExitError+0x34>)
 8002bfc:	21b2      	movs	r1, #178	@ 0xb2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f003 fc7a 	bl	80064f8 <vAssertCalled>
    portDISABLE_INTERRUPTS();
 8002c04:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0fc      	beq.n	8002c08 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	08007080 	.word	0x08007080

08002c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	0000      	movs	r0, r0
 8002c2c:	0000      	movs	r0, r0
	...

08002c30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002c30:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <pxCurrentTCBConst2>)
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	3020      	adds	r0, #32
 8002c38:	f380 8809 	msr	PSP, r0
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f380 8814 	msr	CONTROL, r0
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002c48:	46ae      	mov	lr, r5
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	bc04      	pop	{r2}
 8002c4e:	b662      	cpsie	i
 8002c50:	4718      	bx	r3
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46c0      	nop			@ (mov r8, r8)

08002c60 <pxCurrentTCBConst2>:
 8002c60:	20000078 	.word	0x20000078
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46c0      	nop			@ (mov r8, r8)

08002c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <xPortStartScheduler+0x40>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <xPortStartScheduler+0x40>)
 8002c72:	21ff      	movs	r1, #255	@ 0xff
 8002c74:	0409      	lsls	r1, r1, #16
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <xPortStartScheduler+0x40>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <xPortStartScheduler+0x40>)
 8002c80:	21ff      	movs	r1, #255	@ 0xff
 8002c82:	0609      	lsls	r1, r1, #24
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c88:	f000 f8a0 	bl	8002dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c8c:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <xPortStartScheduler+0x44>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002c92:	f7ff ffcd 	bl	8002c30 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c96:	f7fe ffc9 	bl	8001c2c <vTaskSwitchContext>
    prvTaskExitError();
 8002c9a:	f7ff ffa5 	bl	8002be8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	e000ed20 	.word	0xe000ed20
 8002cac:	20000004 	.word	0x20000004

08002cb0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <vPortYield+0x1c>)
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0552      	lsls	r2, r2, #21
 8002cba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002cbc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002cc0:	f3bf 8f6f 	isb	sy
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002cd4:	b672      	cpsid	i
    uxCriticalNesting++;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <vPortEnterCritical+0x20>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <vPortEnterCritical+0x20>)
 8002cde:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002ce0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002ce4:	f3bf 8f6f 	isb	sy
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <vPortExitCritical+0x38>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <vPortExitCritical+0x1c>
 8002d00:	2326      	movs	r3, #38	@ 0x26
 8002d02:	33ff      	adds	r3, #255	@ 0xff
 8002d04:	001a      	movs	r2, r3
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <vPortExitCritical+0x3c>)
 8002d08:	0011      	movs	r1, r2
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f003 fbf4 	bl	80064f8 <vAssertCalled>
    uxCriticalNesting--;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <vPortExitCritical+0x38>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <vPortExitCritical+0x38>)
 8002d18:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002d1a:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <vPortExitCritical+0x38>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d100      	bne.n	8002d24 <vPortExitCritical+0x30>
    {
        portENABLE_INTERRUPTS();
 8002d22:	b662      	cpsie	i
    }
}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	08007080 	.word	0x08007080

08002d34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002d34:	f3ef 8010 	mrs	r0, PRIMASK
 8002d38:	b672      	cpsid	i
 8002d3a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	0018      	movs	r0, r3

08002d40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002d40:	f380 8810 	msr	PRIMASK, r0
 8002d44:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002d46:	46c0      	nop			@ (mov r8, r8)
	...

08002d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d50:	f3ef 8009 	mrs	r0, PSP
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <pxCurrentTCBConst>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	3820      	subs	r0, #32
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002d5e:	4644      	mov	r4, r8
 8002d60:	464d      	mov	r5, r9
 8002d62:	4656      	mov	r6, sl
 8002d64:	465f      	mov	r7, fp
 8002d66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002d68:	b508      	push	{r3, lr}
 8002d6a:	b672      	cpsid	i
 8002d6c:	f7fe ff5e 	bl	8001c2c <vTaskSwitchContext>
 8002d70:	b662      	cpsie	i
 8002d72:	bc0c      	pop	{r2, r3}
 8002d74:	6811      	ldr	r1, [r2, #0]
 8002d76:	6808      	ldr	r0, [r1, #0]
 8002d78:	3010      	adds	r0, #16
 8002d7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002d7c:	46a0      	mov	r8, r4
 8002d7e:	46a9      	mov	r9, r5
 8002d80:	46b2      	mov	sl, r6
 8002d82:	46bb      	mov	fp, r7
 8002d84:	f380 8809 	msr	PSP, r0
 8002d88:	3820      	subs	r0, #32
 8002d8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002d8c:	4718      	bx	r3
 8002d8e:	46c0      	nop			@ (mov r8, r8)

08002d90 <pxCurrentTCBConst>:
 8002d90:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46c0      	nop			@ (mov r8, r8)

08002d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d9e:	f7ff ffc9 	bl	8002d34 <ulSetInterruptMaskFromISR>
 8002da2:	0003      	movs	r3, r0
 8002da4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002da6:	f7fe fe25 	bl	80019f4 <xTaskIncrementTick>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d003      	beq.n	8002db6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <SysTick_Handler+0x30>)
 8002db0:	2280      	movs	r2, #128	@ 0x80
 8002db2:	0552      	lsls	r2, r2, #21
 8002db4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff ffc1 	bl	8002d40 <vClearInterruptMaskFromISR>
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <vPortSetupTimerInterrupt+0x38>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <vPortSetupTimerInterrupt+0x3c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2164      	movs	r1, #100	@ 0x64
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd f990 	bl	8000108 <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	001a      	movs	r2, r3
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <vPortSetupTimerInterrupt+0x40>)
 8002dee:	3a01      	subs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002df2:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	e000e010 	.word	0xe000e010
 8002e04:	e000e018 	.word	0xe000e018
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	e000e014 	.word	0xe000e014

08002e10 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2207      	movs	r2, #7
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2207      	movs	r2, #7
 8002e28:	4393      	bics	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d205      	bcs.n	8002e3e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2207      	movs	r2, #7
 8002e36:	4393      	bics	r3, r2
 8002e38:	3308      	adds	r3, #8
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	e001      	b.n	8002e42 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002e42:	f7fe fcc7 	bl	80017d4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002e46:	4b20      	ldr	r3, [pc, #128]	@ (8002ec8 <pvPortMalloc+0xb8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <pvPortMalloc+0xbc>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	4393      	bics	r3, r2
 8002e54:	001a      	movs	r2, r3
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <pvPortMalloc+0xb8>)
 8002e58:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002e68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <pvPortMalloc+0xc4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d813      	bhi.n	8002e96 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002e6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	18d2      	adds	r2, r2, r3
 8002e76:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d90b      	bls.n	8002e96 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <pvPortMalloc+0xb8>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	18d2      	adds	r2, r2, r3
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <pvPortMalloc+0xc0>)
 8002e94:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <pvPortMalloc+0xc8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <pvPortMalloc+0xa8>
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <pvPortMalloc+0xcc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <pvPortMalloc+0xa8>
 8002eaa:	f001 febf 	bl	8004c2c <xTraceKernelPortGetSystemHeapHandle>
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f001 fdc5 	bl	8004a42 <xTraceHeapAlloc>
    }
    ( void ) xTaskResumeAll();
 8002eb8:	f7fe fc98 	bl	80017ec <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	20001d90 	.word	0x20001d90
 8002ecc:	20000193 	.word	0x20000193
 8002ed0:	20001d8c 	.word	0x20001d8c
 8002ed4:	00001bf7 	.word	0x00001bf7
 8002ed8:	20003060 	.word	0x20003060
 8002edc:	20003058 	.word	0x20003058

08002ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <vPortFree+0x18>
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <vPortFree+0x20>)
 8002ef0:	218a      	movs	r1, #138	@ 0x8a
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f003 fb00 	bl	80064f8 <vAssertCalled>
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	080070a8 	.word	0x080070a8

08002f04 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <xPortGetFreeHeapSize+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a03      	ldr	r2, [pc, #12]	@ (8002f1c <xPortGetFreeHeapSize+0x18>)
 8002f0e:	1ad3      	subs	r3, r2, r3
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	20001d8c 	.word	0x20001d8c
 8002f1c:	00001bf8 	.word	0x00001bf8

08002f20 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002f26:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <_DoInit+0x9c>)
 8002f28:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	22a8      	movs	r2, #168	@ 0xa8
 8002f2e:	2100      	movs	r1, #0
 8002f30:	0018      	movs	r0, r3
 8002f32:	f004 f835 	bl	8006fa0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <_DoInit+0xa0>)
 8002f46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <_DoInit+0xa4>)
 8002f4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	00d2      	lsls	r2, r2, #3
 8002f54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	@ (8002fc0 <_DoInit+0xa0>)
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	4a15      	ldr	r2, [pc, #84]	@ (8002fc8 <_DoInit+0xa8>)
 8002f72:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2210      	movs	r2, #16
 8002f78:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	e00c      	b.n	8002fac <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	220f      	movs	r2, #15
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <_DoInit+0xac>)
 8002f9a:	5cd1      	ldrb	r1, [r2, r3]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	18d3      	adds	r3, r2, r3
 8002fa2:	1c0a      	adds	r2, r1, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	d9ef      	bls.n	8002f92 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20001d94 	.word	0x20001d94
 8002fc0:	080070d0 	.word	0x080070d0
 8002fc4:	20001e3c 	.word	0x20001e3c
 8002fc8:	2000223c 	.word	0x2000223c
 8002fcc:	080076f8 	.word	0x080076f8

08002fd0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d905      	bls.n	8003000 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffe:	e007      	b.n	8003010 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	1acb      	subs	r3, r1, r3
 800300a:	18d3      	adds	r3, r2, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	4293      	cmp	r3, r2
 800301c:	d900      	bls.n	8003020 <_WriteBlocking+0x50>
 800301e:	0013      	movs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4293      	cmp	r3, r2
 8003028:	d900      	bls.n	800302c <_WriteBlocking+0x5c>
 800302a:	0013      	movs	r3, r2
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	0018      	movs	r0, r3
 8003040:	f003 ffda 	bl	8006ff8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	18d3      	adds	r3, r2, r3
 8003052:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	429a      	cmp	r2, r3
 800306c:	d101      	bne.n	8003072 <_WriteBlocking+0xa2>
      WrOff = 0u;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1b3      	bne.n	8002fe6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800307e:	6a3b      	ldr	r3, [r7, #32]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b00a      	add	sp, #40	@ 0x28
 8003086:	bd80      	pop	{r7, pc}

08003088 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d910      	bls.n	80030ce <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	18d3      	adds	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	0018      	movs	r0, r3
 80030be:	f003 ff9b 	bl	8006ff8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	18d2      	adds	r2, r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80030cc:	e01e      	b.n	800310c <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f003 ff88 	bl	8006ff8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	18d1      	adds	r1, r2, r3
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	0018      	movs	r0, r3
 8003102:	f003 ff79 	bl	8006ff8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	60da      	str	r2, [r3, #12]
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b008      	add	sp, #32
 8003112:	bd80      	pop	{r7, pc}

08003114 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d808      	bhi.n	8003142 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad2      	subs	r2, r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e004      	b.n	800314c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b006      	add	sp, #24
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	@ 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003164:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <SEGGER_RTT_ReadNoLock+0x110>)
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b53      	cmp	r3, #83	@ 0x53
 8003170:	d001      	beq.n	8003176 <SEGGER_RTT_ReadNoLock+0x1e>
 8003172:	f7ff fed5 	bl	8002f20 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	0013      	movs	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	189b      	adds	r3, r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	3360      	adds	r3, #96	@ 0x60
 8003182:	001a      	movs	r2, r3
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <SEGGER_RTT_ReadNoLock+0x110>)
 8003186:	18d3      	adds	r3, r2, r3
 8003188:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800319e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d92c      	bls.n	8003200 <SEGGER_RTT_ReadNoLock+0xa8>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d900      	bls.n	80031ba <SEGGER_RTT_ReadNoLock+0x62>
 80031b8:	0013      	movs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	0018      	movs	r0, r3
 80031ce:	f003 ff13 	bl	8006ff8 <memcpy>
    NumBytesRead += NumBytesRem;
 80031d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	18d3      	adds	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d101      	bne.n	8003200 <SEGGER_RTT_ReadNoLock+0xa8>
      RdOff = 0u;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4293      	cmp	r3, r2
 800320e:	d900      	bls.n	8003212 <SEGGER_RTT_ReadNoLock+0xba>
 8003210:	0013      	movs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <SEGGER_RTT_ReadNoLock+0xf8>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	0018      	movs	r0, r3
 800322c:	f003 fee4 	bl	8006ff8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	18d3      	adds	r3, r2, r3
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	18d3      	adds	r3, r2, r3
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <SEGGER_RTT_ReadNoLock+0x104>
    pRing->RdOff = RdOff;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800325a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b00c      	add	sp, #48	@ 0x30
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	20001d94 	.word	0x20001d94

0800326c <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 8003278:	f3ef 8310 	mrs	r3, PRIMASK
 800327c:	2101      	movs	r1, #1
 800327e:	f381 8810 	msr	PRIMASK, r1
 8003282:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff ff64 	bl	8003158 <SEGGER_RTT_ReadNoLock>
 8003290:	0003      	movs	r3, r0
 8003292:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f383 8810 	msr	PRIMASK, r3
  //
  return NumBytesRead;
 800329a:	693b      	ldr	r3, [r7, #16]
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b006      	add	sp, #24
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	0013      	movs	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4a23      	ldr	r2, [pc, #140]	@ (8003350 <SEGGER_RTT_WriteNoLock+0xac>)
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d02e      	beq.n	800332c <SEGGER_RTT_WriteNoLock+0x88>
 80032ce:	d836      	bhi.n	800333e <SEGGER_RTT_WriteNoLock+0x9a>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <SEGGER_RTT_WriteNoLock+0x36>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d016      	beq.n	8003306 <SEGGER_RTT_WriteNoLock+0x62>
 80032d8:	e031      	b.n	800333e <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff ff19 	bl	8003114 <_GetAvailWriteSpace>
 80032e2:	0003      	movs	r3, r0
 80032e4:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d202      	bcs.n	80032f4 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80032f2:	e027      	b.n	8003344 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fec2 	bl	8003088 <_WriteNoCheck>
    break;
 8003304:	e01e      	b.n	8003344 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ff03 	bl	8003114 <_GetAvailWriteSpace>
 800330e:	0003      	movs	r3, r0
 8003310:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4293      	cmp	r3, r2
 8003318:	d900      	bls.n	800331c <SEGGER_RTT_WriteNoLock+0x78>
 800331a:	0013      	movs	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff feaf 	bl	8003088 <_WriteNoCheck>
    break;
 800332a:	e00b      	b.n	8003344 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff fe4c 	bl	8002fd0 <_WriteBlocking>
 8003338:	0003      	movs	r3, r0
 800333a:	61fb      	str	r3, [r7, #28]
    break;
 800333c:	e002      	b.n	8003344 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    break;
 8003342:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8003344:	69fb      	ldr	r3, [r7, #28]
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b008      	add	sp, #32
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	20001d94 	.word	0x20001d94

08003354 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <SEGGER_RTT_Write+0x4c>)
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b53      	cmp	r3, #83	@ 0x53
 800336c:	d001      	beq.n	8003372 <SEGGER_RTT_Write+0x1e>
 800336e:	f7ff fdd7 	bl	8002f20 <_DoInit>
  SEGGER_RTT_LOCK();
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	2101      	movs	r1, #1
 8003378:	f381 8810 	msr	PRIMASK, r1
 800337c:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff ff8d 	bl	80032a4 <SEGGER_RTT_WriteNoLock>
 800338a:	0003      	movs	r3, r0
 800338c:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b008      	add	sp, #32
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	20001d94 	.word	0x20001d94

080033a4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b53      	cmp	r3, #83	@ 0x53
 80033be:	d001      	beq.n	80033c4 <SEGGER_RTT_ConfigUpBuffer+0x20>
 80033c0:	f7ff fdae 	bl	8002f20 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80033c6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d829      	bhi.n	8003422 <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 80033ce:	f3ef 8310 	mrs	r3, PRIMASK
 80033d2:	2101      	movs	r1, #1
 80033d4:	f381 8810 	msr	PRIMASK, r1
 80033d8:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	0013      	movs	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	18d3      	adds	r3, r2, r3
 80033ea:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003414:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	e002      	b.n	8003428 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 8003422:	2301      	movs	r3, #1
 8003424:	425b      	negs	r3, r3
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800342a:	0018      	movs	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	b00a      	add	sp, #40	@ 0x28
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	20001d94 	.word	0x20001d94

08003438 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b53      	cmp	r3, #83	@ 0x53
 8003452:	d001      	beq.n	8003458 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003454:	f7ff fd64 	bl	8002f20 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800345a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d829      	bhi.n	80034b6 <SEGGER_RTT_ConfigDownBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	2101      	movs	r1, #1
 8003468:	f381 8810 	msr	PRIMASK, r1
 800346c:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	0013      	movs	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	189b      	adds	r3, r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3360      	adds	r3, #96	@ 0x60
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <SEGGER_RTT_ConfigDownBuffer+0x6c>
      pDown->sName        = sName;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a8:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b4:	e002      	b.n	80034bc <SEGGER_RTT_ConfigDownBuffer+0x84>
  } else {
    r = -1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	425b      	negs	r3, r3
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b00a      	add	sp, #40	@ 0x28
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	20001d94 	.word	0x20001d94

080034cc <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 80034da:	2301      	movs	r3, #1
 80034dc:	e003      	b.n	80034e6 <xTraceStreamPortInitialize+0x1a>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 80034de:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <xTraceStreamPortInitialize+0x24>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	601a      	str	r2, [r3, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
#else
	return TRC_SUCCESS;
 80034e4:	2300      	movs	r3, #0
#endif
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	2000224c 	.word	0x2000224c

080034f4 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <xTraceStreamPortOnEnable+0x54>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0018      	movs	r0, r3
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	4911      	ldr	r1, [pc, #68]	@ (800354c <xTraceStreamPortOnEnable+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	9200      	str	r2, [sp, #0]
 800350c:	0002      	movs	r2, r0
 800350e:	2001      	movs	r0, #1
 8003510:	f7ff ff48 	bl	80033a4 <SEGGER_RTT_ConfigUpBuffer>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	da01      	bge.n	800351c <xTraceStreamPortOnEnable+0x28>
	{
		return TRC_FAIL;
 8003518:	2301      	movs	r3, #1
 800351a:	e010      	b.n	800353e <xTraceStreamPortOnEnable+0x4a>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <xTraceStreamPortOnEnable+0x54>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2280      	movs	r2, #128	@ 0x80
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	189a      	adds	r2, r3, r2
 8003526:	490a      	ldr	r1, [pc, #40]	@ (8003550 <xTraceStreamPortOnEnable+0x5c>)
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2320      	movs	r3, #32
 800352e:	2001      	movs	r0, #1
 8003530:	f7ff ff82 	bl	8003438 <SEGGER_RTT_ConfigDownBuffer>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	da01      	bge.n	800353c <xTraceStreamPortOnEnable+0x48>
	{
		return TRC_FAIL;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <xTraceStreamPortOnEnable+0x4a>
	}

	return TRC_SUCCESS;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b002      	add	sp, #8
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	2000224c 	.word	0x2000224c
 800354c:	080070dc 	.word	0x080070dc
 8003550:	080070e4 	.word	0x080070e4

08003554 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 800355c:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <xTraceCounterInitialize+0x30>)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
	
	pxCounterData->xCallbackFunction = 0;
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <xTraceCounterInitialize+0x30>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 800356a:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <xTraceCounterInitialize+0x34>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2280      	movs	r2, #128	@ 0x80
 8003570:	03d2      	lsls	r2, r2, #15
 8003572:	431a      	orrs	r2, r3
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <xTraceCounterInitialize+0x34>)
 8003576:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	20002250 	.word	0x20002250
 8003588:	20003060 	.word	0x20003060

0800358c <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8003594:	4b0e      	ldr	r3, [pc, #56]	@ (80035d0 <xTraceDiagnosticsInitialize+0x44>)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e008      	b.n	80035b2 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <xTraceDiagnosticsInitialize+0x44>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	2100      	movs	r1, #0
 80035aa:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d9f3      	bls.n	80035a0 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <xTraceDiagnosticsInitialize+0x48>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	431a      	orrs	r2, r3
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <xTraceDiagnosticsInitialize+0x48>)
 80035c2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	20002254 	.word	0x20002254
 80035d4:	20003060 	.word	0x20003060

080035d8 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	0002      	movs	r2, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <xTraceDiagnosticsAdd+0x34>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1dfa      	adds	r2, r7, #7
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	58d0      	ldr	r0, [r2, r3]
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <xTraceDiagnosticsAdd+0x34>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1dfa      	adds	r2, r7, #7
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	1841      	adds	r1, r0, r1
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	50d1      	str	r1, [r2, r3]

	return TRC_SUCCESS;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20002254 	.word	0x20002254

08003610 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	0002      	movs	r2, r0
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	701a      	strb	r2, [r3, #0]
	return xTraceDiagnosticsAdd(xType, 1);
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff ffd8 	bl	80035d8 <xTraceDiagnosticsAdd>
 8003628:	0003      	movs	r3, r0
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	0002      	movs	r2, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <xTraceDiagnosticsSetIfHigher+0x38>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1dfa      	adds	r2, r7, #7
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	58d3      	ldr	r3, [r2, r3]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	dd06      	ble.n	8003662 <xTraceDiagnosticsSetIfHigher+0x2e>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <xTraceDiagnosticsSetIfHigher+0x38>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1dfa      	adds	r2, r7, #7
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	50d1      	str	r1, [r2, r3]
	}

	return TRC_SUCCESS;
 8003662:	2300      	movs	r3, #0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20002254 	.word	0x20002254

08003670 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <xTraceDiagnosticsCheckStatus+0x7c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2208      	movs	r2, #8
 800367a:	4013      	ands	r3, r2
 800367c:	d101      	bne.n	8003682 <xTraceDiagnosticsCheckStatus+0x12>
	{
		return TRC_FAIL;
 800367e:	2301      	movs	r3, #1
 8003680:	e030      	b.n	80036e4 <xTraceDiagnosticsCheckStatus+0x74>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	dd06      	ble.n	800369a <xTraceDiagnosticsCheckStatus+0x2a>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 800368c:	2008      	movs	r0, #8
 800368e:	f000 f9ef 	bl	8003a70 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8003692:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b0e      	cmp	r3, #14
 80036a2:	dd06      	ble.n	80036b2 <xTraceDiagnosticsCheckStatus+0x42>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 80036a4:	2009      	movs	r0, #9
 80036a6:	f000 f9e3 	bl	8003a70 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 80036aa:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 80036b2:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	dd06      	ble.n	80036ca <xTraceDiagnosticsCheckStatus+0x5a>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 80036bc:	200a      	movs	r0, #10
 80036be:	f000 f9d7 	bl	8003a70 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 80036ca:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	dd06      	ble.n	80036e2 <xTraceDiagnosticsCheckStatus+0x72>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 80036d4:	200e      	movs	r0, #14
 80036d6:	f000 f9cb 	bl	8003a70 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 80036da:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <xTraceDiagnosticsCheckStatus+0x80>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	20003060 	.word	0x20003060
 80036f0:	20002254 	.word	0x20002254

080036f4 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <xTraceEntryIndexTableInitialize+0x1c>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	601a      	str	r2, [r3, #0]
	
	return prvEntryIndexInitialize();
 8003702:	f000 f941 	bl	8003988 <prvEntryIndexInitialize>
 8003706:	0003      	movs	r3, r0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000225c 	.word	0x2000225c

08003714 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 8003722:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2210      	movs	r2, #16
 8003730:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2203      	movs	r2, #3
 8003738:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e030      	b.n	80037a2 <xTraceEntryTableInitialize+0x8e>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 8003740:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	0013      	movs	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	189b      	adds	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	18cb      	adds	r3, r1, r3
 8003750:	330c      	adds	r3, #12
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	e010      	b.n	800377e <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 800375c:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	0013      	movs	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	189b      	adds	r3, r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	189b      	adds	r3, r3, r2
 800376c:	3302      	adds	r3, #2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	18cb      	adds	r3, r1, r3
 8003772:	3308      	adds	r3, #8
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	3301      	adds	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d9eb      	bls.n	800375c <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <xTraceEntryTableInitialize+0xac>)
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	2020      	movs	r0, #32
 800378c:	0013      	movs	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	189b      	adds	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	18cb      	adds	r3, r1, r3
 8003796:	181b      	adds	r3, r3, r0
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3301      	adds	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d9cb      	bls.n	8003740 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <xTraceEntryTableInitialize+0xb0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <xTraceEntryTableInitialize+0xb0>)
 80037b2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	20002258 	.word	0x20002258
 80037c4:	20003060 	.word	0x20003060

080037c8 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 80037d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003884 <xTraceEntryCreate+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2210      	movs	r2, #16
 80037d6:	4013      	ands	r3, r2
 80037d8:	d101      	bne.n	80037de <xTraceEntryCreate+0x16>
	{
		return TRC_FAIL;
 80037da:	2301      	movs	r3, #1
 80037dc:	e04d      	b.n	800387a <xTraceEntryCreate+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	617b      	str	r3, [r7, #20]
  return(result);
 80037e4:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	2301      	movs	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			@ (mov r8, r8)

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 80037f4:	230b      	movs	r3, #11
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f8e5 	bl	80039c8 <prvEntryIndexTake>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d00a      	beq.n	8003818 <xTraceEntryCreate+0x50>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8003802:	2001      	movs	r0, #1
 8003804:	f7ff ff04 	bl	8003610 <xTraceDiagnosticsIncrease>
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			@ (mov r8, r8)

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8003814:	2301      	movs	r3, #1
 8003816:	e030      	b.n	800387a <xTraceEntryCreate+0xb2>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <xTraceEntryCreate+0xc0>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	230b      	movs	r3, #11
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	0019      	movs	r1, r3
 8003824:	000b      	movs	r3, r1
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	185b      	adds	r3, r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	3308      	adds	r3, #8
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	3304      	adds	r3, #4
 8003832:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
 800383e:	e009      	b.n	8003854 <xTraceEntryCreate+0x8c>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	3304      	adds	r3, #4
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	2b02      	cmp	r3, #2
 8003858:	d9f2      	bls.n	8003840 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2200      	movs	r2, #0
 8003864:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8003878:	2300      	movs	r3, #0
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b00a      	add	sp, #40	@ 0x28
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	20003060 	.word	0x20003060
 8003888:	20002258 	.word	0x20002258

0800388c <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e017      	b.n	80038cc <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <xTraceEntryFind+0x50>)
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	0013      	movs	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	3308      	adds	r3, #8
 80038ac:	18cb      	adds	r3, r1, r3
 80038ae:	3304      	adds	r3, #4
 80038b0:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d104      	bne.n	80038c6 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e006      	b.n	80038d4 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d9e4      	bls.n	800389c <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20002258 	.word	0x20002258

080038e0 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <xTraceEntrySetSymbol+0x50>)
 80038f4:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0019      	movs	r1, r3
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff fe98 	bl	8003634 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b0d      	cmp	r3, #13
 8003908:	d902      	bls.n	8003910 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800390a:	230e      	movs	r3, #14
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	e002      	b.n	8003916 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3301      	adds	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3314      	adds	r3, #20
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	0018      	movs	r0, r3
 8003920:	f003 fb6a 	bl	8006ff8 <memcpy>

	return TRC_SUCCESS;
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	080070ec 	.word	0x080070ec

08003934 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 800393c:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <xTraceEntryGetCount+0x20>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2210      	movs	r2, #16
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}
 8003954:	2000225c 	.word	0x2000225c

08003958 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 8003962:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <xTraceEntryGetAtIndex+0x2c>)
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	0013      	movs	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	189b      	adds	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	3308      	adds	r3, #8
 8003972:	18cb      	adds	r3, r1, r3
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20002258 	.word	0x20002258

08003988 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	e00a      	b.n	80039aa <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <prvEntryIndexInitialize+0x3c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	b2d9      	uxtb	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	1c0a      	adds	r2, r1, #0
 80039a2:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b0f      	cmp	r3, #15
 80039ae:	d9f1      	bls.n	8003994 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <prvEntryIndexInitialize+0x3c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2210      	movs	r2, #16
 80039b6:	611a      	str	r2, [r3, #16]

	return TRC_SUCCESS;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	2000225c 	.word	0x2000225c

080039c8 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 80039d0:	4b15      	ldr	r3, [pc, #84]	@ (8003a28 <prvEntryIndexTake+0x60>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 80039da:	2301      	movs	r3, #1
 80039dc:	e01f      	b.n	8003a1e <prvEntryIndexTake+0x56>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <prvEntryIndexTake+0x60>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	200f      	movs	r0, #15
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
	pxIndexTable->uiFreeIndexCount--;
 80039ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <prvEntryIndexTake+0x60>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	3a01      	subs	r2, #1
 80039f2:	611a      	str	r2, [r3, #16]

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <prvEntryIndexTake+0x60>)
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <prvEntryIndexTake+0x60>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <prvEntryIndexTake+0x60>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	5c8a      	ldrb	r2, [r1, r2]
 8003a04:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8003a06:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <prvEntryIndexTake+0x60>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <prvEntryIndexTake+0x60>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	21ff      	movs	r1, #255	@ 0xff
 8003a12:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	183a      	adds	r2, r7, r0
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	2000225c 	.word	0x2000225c

08003a2c <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 8003a34:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <xTraceErrorInitialize+0x3c>)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <xTraceErrorInitialize+0x3c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <xTraceErrorInitialize+0x3c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 8003a4a:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <xTraceErrorInitialize+0x3c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <xTraceErrorInitialize+0x40>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2220      	movs	r2, #32
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <xTraceErrorInitialize+0x40>)
 8003a5c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20002260 	.word	0x20002260
 8003a6c:	20003060 	.word	0x20003060

08003a70 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003a78:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <xTraceWarning+0x54>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d101      	bne.n	8003a86 <xTraceWarning+0x16>
	{
		/* If not initialized */
		return TRC_FAIL;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e019      	b.n	8003aba <xTraceWarning+0x4a>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <xTraceWarning+0x58>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	40da      	lsrs	r2, r3
 8003a92:	0013      	movs	r3, r2
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <xTraceWarning+0x48>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <xTraceWarning+0x58>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <xTraceWarning+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f84a 	bl	8003b4c <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	20003060 	.word	0x20003060
 8003ac8:	20002260 	.word	0x20002260

08003acc <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <xTraceError+0x74>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	4013      	ands	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <xTraceError+0x16>
	{
		return TRC_FAIL;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e029      	b.n	8003b36 <xTraceError+0x6a>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <xTraceError+0x78>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d123      	bne.n	8003b34 <xTraceError+0x68>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <xTraceError+0x78>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	2201      	movs	r2, #1
 8003af8:	409a      	lsls	r2, r3
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <xTraceError+0x78>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <xTraceError+0x78>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f81d 	bl	8003b4c <prvTraceErrorPrint>
 8003b12:	0003      	movs	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d103      	bne.n	8003b20 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8003b18:	f001 feb6 	bl	8005888 <xTraceDisable>
			
			return TRC_FAIL;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00a      	b.n	8003b36 <xTraceError+0x6a>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8003b20:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <xTraceError+0x78>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	4a08      	ldr	r2, [pc, #32]	@ (8003b48 <xTraceError+0x7c>)
 8003b28:	0011      	movs	r1, r2
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f001 f9f4 	bl	8004f18 <xTracePrint>
		(void)xTraceDisable();
 8003b30:	f001 feaa 	bl	8005888 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	20003060 	.word	0x20003060
 8003b44:	20002260 	.word	0x20002260
 8003b48:	080070f0 	.word	0x080070f0

08003b4c <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8003b54:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd0 <prvTraceErrorPrint+0x84>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <prvTraceErrorPrint+0x2e>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <prvTraceErrorPrint+0x84>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	001a      	movs	r2, r3
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <prvTraceErrorPrint+0x88>)
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f002 f84c 	bl	8005c08 <xTraceStringRegister>
 8003b70:	0003      	movs	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <prvTraceErrorPrint+0x2e>
		{
			return TRC_FAIL;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e026      	b.n	8003bc8 <prvTraceErrorPrint+0x7c>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8003b7a:	2314      	movs	r3, #20
 8003b7c:	18fa      	adds	r2, r7, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0011      	movs	r1, r2
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f82a 	bl	8003bdc <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d011      	beq.n	8003bb2 <prvTraceErrorPrint+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <prvTraceErrorPrint+0x6a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b02      	subs	r3, #2
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d80c      	bhi.n	8003bb6 <prvTraceErrorPrint+0x6a>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <prvTraceErrorPrint+0x84>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f001 f9b6 	bl	8004f18 <xTracePrint>
		break;
 8003bac:	46c0      	nop			@ (mov r8, r8)
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e00a      	b.n	8003bc8 <prvTraceErrorPrint+0x7c>
			return TRC_FAIL;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e008      	b.n	8003bc8 <prvTraceErrorPrint+0x7c>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <prvTraceErrorPrint+0x84>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4906      	ldr	r1, [pc, #24]	@ (8003bd8 <prvTraceErrorPrint+0x8c>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f001 f9df 	bl	8004f84 <xTracePrintF>
		return TRC_FAIL;
 8003bc6:	2301      	movs	r3, #1
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b006      	add	sp, #24
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20002260 	.word	0x20002260
 8003bd4:	08007118 	.word	0x08007118
 8003bd8:	08007120 	.word	0x08007120

08003bdc <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b0e      	cmp	r3, #14
 8003bea:	d83f      	bhi.n	8003c6c <prvTraceErrorGetDescription+0x90>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <prvTraceErrorGetDescription+0xa4>)
 8003bf2:	18d3      	adds	r3, r2, r3
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	469f      	mov	pc, r3
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e03c      	b.n	8003c76 <prvTraceErrorGetDescription+0x9a>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	@ (8003c84 <prvTraceErrorGetDescription+0xa8>)
 8003c00:	601a      	str	r2, [r3, #0]
		break;
 8003c02:	e037      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <prvTraceErrorGetDescription+0xac>)
 8003c08:	601a      	str	r2, [r3, #0]
		break;
 8003c0a:	e033      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <prvTraceErrorGetDescription+0xb0>)
 8003c10:	601a      	str	r2, [r3, #0]
		break;
 8003c12:	e02f      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <prvTraceErrorGetDescription+0xb4>)
 8003c18:	601a      	str	r2, [r3, #0]
		break;
 8003c1a:	e02b      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <prvTraceErrorGetDescription+0xb8>)
 8003c20:	601a      	str	r2, [r3, #0]
		break;
 8003c22:	e027      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <prvTraceErrorGetDescription+0xbc>)
 8003c28:	601a      	str	r2, [r3, #0]
		break;
 8003c2a:	e023      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <prvTraceErrorGetDescription+0xc0>)
 8003c30:	601a      	str	r2, [r3, #0]
		break;
 8003c32:	e01f      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <prvTraceErrorGetDescription+0xb8>)
 8003c38:	601a      	str	r2, [r3, #0]
		break;
 8003c3a:	e01b      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <prvTraceErrorGetDescription+0xc4>)
 8003c40:	601a      	str	r2, [r3, #0]
		break;
 8003c42:	e017      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <prvTraceErrorGetDescription+0xc8>)
 8003c48:	601a      	str	r2, [r3, #0]
		break;
 8003c4a:	e013      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <prvTraceErrorGetDescription+0xcc>)
 8003c50:	601a      	str	r2, [r3, #0]
		break;
 8003c52:	e00f      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <prvTraceErrorGetDescription+0xd0>)
 8003c58:	601a      	str	r2, [r3, #0]
		break;
 8003c5a:	e00b      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <prvTraceErrorGetDescription+0xd4>)
 8003c60:	601a      	str	r2, [r3, #0]
		break;
 8003c62:	e007      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a13      	ldr	r2, [pc, #76]	@ (8003cb4 <prvTraceErrorGetDescription+0xd8>)
 8003c68:	601a      	str	r2, [r3, #0]
		break;
 8003c6a:	e003      	b.n	8003c74 <prvTraceErrorGetDescription+0x98>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <prvTraceErrorGetDescription+0xdc>)
 8003c70:	601a      	str	r2, [r3, #0]
		break;
 8003c72:	46c0      	nop			@ (mov r8, r8)
	}

	return TRC_SUCCESS;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b002      	add	sp, #8
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	0800770c 	.word	0x0800770c
 8003c84:	0800713c 	.word	0x0800713c
 8003c88:	0800715c 	.word	0x0800715c
 8003c8c:	08007188 	.word	0x08007188
 8003c90:	0800719c 	.word	0x0800719c
 8003c94:	080071c8 	.word	0x080071c8
 8003c98:	080071f4 	.word	0x080071f4
 8003c9c:	08007210 	.word	0x08007210
 8003ca0:	08007230 	.word	0x08007230
 8003ca4:	08007244 	.word	0x08007244
 8003ca8:	0800725c 	.word	0x0800725c
 8003cac:	08007270 	.word	0x08007270
 8003cb0:	0800728c 	.word	0x0800728c
 8003cb4:	080072a4 	.word	0x080072a4
 8003cb8:	08007120 	.word	0x08007120

08003cbc <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <xTraceEventInitialize+0x44>)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e008      	b.n	8003ce2 <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <xTraceEventInitialize+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	00d2      	lsls	r2, r2, #3
 8003cd8:	2100      	movs	r1, #0
 8003cda:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f3      	beq.n	8003cd0 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <xTraceEventInitialize+0x48>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2240      	movs	r2, #64	@ 0x40
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <xTraceEventInitialize+0x48>)
 8003cf2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	20002264 	.word	0x20002264
 8003d04:	20003060 	.word	0x20003060

08003d08 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8003d1a:	4b30      	ldr	r3, [pc, #192]	@ (8003ddc <xTraceEventCreate1+0xd4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	d004      	beq.n	8003d2e <xTraceEventCreate1+0x26>
 8003d24:	4b2e      	ldr	r3, [pc, #184]	@ (8003de0 <xTraceEventCreate1+0xd8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <xTraceEventCreate1+0x2a>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e050      	b.n	8003dd4 <xTraceEventCreate1+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	617b      	str	r3, [r7, #20]
  return(result);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <xTraceEventCreate1+0xdc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	3201      	adds	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <xTraceEventCreate1+0xe0>)
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <xTraceEventCreate1+0xe4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	230c      	movs	r3, #12
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	0192      	lsls	r2, r2, #6
 8003d64:	188a      	adds	r2, r1, r2
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	0149      	lsls	r1, r1, #5
 8003d72:	430a      	orrs	r2, r1
 8003d74:	b292      	uxth	r2, r2
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <xTraceEventCreate1+0xdc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	b292      	uxth	r2, r2
 8003d82:	805a      	strh	r2, [r3, #2]
 8003d84:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <xTraceEventCreate1+0xe8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	0a19      	lsrs	r1, r3, #8
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <xTraceEventCreate1+0xec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	061a      	lsls	r2, r3, #24
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	188a      	adds	r2, r1, r2
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	4b16      	ldr	r3, [pc, #88]	@ (8003df4 <xTraceEventCreate1+0xec>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <xTraceEventCreate1+0xec>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6992      	ldr	r2, [r2, #24]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4b12      	ldr	r3, [pc, #72]	@ (8003df4 <xTraceEventCreate1+0xec>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6852      	ldr	r2, [r2, #4]
 8003dae:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	220c      	movs	r2, #12
 8003dba:	0019      	movs	r1, r3
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7ff fac9 	bl	8003354 <SEGGER_RTT_Write>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b008      	add	sp, #32
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20003060 	.word	0x20003060
 8003de0:	20003058 	.word	0x20003058
 8003de4:	20002264 	.word	0x20002264
 8003de8:	20002280 	.word	0x20002280
 8003dec:	2000226c 	.word	0x2000226c
 8003df0:	e000e018 	.word	0xe000e018
 8003df4:	20003068 	.word	0x20003068

08003df8 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	@ 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8003e0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ed4 <xTraceEventCreate2+0xdc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	4013      	ands	r3, r2
 8003e14:	d004      	beq.n	8003e20 <xTraceEventCreate2+0x28>
 8003e16:	4b30      	ldr	r3, [pc, #192]	@ (8003ed8 <xTraceEventCreate2+0xe0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xTraceEventCreate2+0x2c>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e053      	b.n	8003ecc <xTraceEventCreate2+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e24:	f3ef 8310 	mrs	r3, PRIMASK
 8003e28:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2e:	2301      	movs	r3, #1
 8003e30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <xTraceEventCreate2+0xe4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	3201      	adds	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	4b26      	ldr	r3, [pc, #152]	@ (8003ee0 <xTraceEventCreate2+0xe8>)
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <xTraceEventCreate2+0xec>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	2314      	movs	r3, #20
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	0192      	lsls	r2, r2, #6
 8003e56:	188a      	adds	r2, r1, r2
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2180      	movs	r1, #128	@ 0x80
 8003e62:	0189      	lsls	r1, r1, #6
 8003e64:	430a      	orrs	r2, r1
 8003e66:	b292      	uxth	r2, r2
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <xTraceEventCreate2+0xe4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	b292      	uxth	r2, r2
 8003e74:	805a      	strh	r2, [r3, #2]
 8003e76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee8 <xTraceEventCreate2+0xf0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	0a19      	lsrs	r1, r3, #8
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <xTraceEventCreate2+0xf4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	061a      	lsls	r2, r3, #24
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	188a      	adds	r2, r1, r2
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	4b17      	ldr	r3, [pc, #92]	@ (8003eec <xTraceEventCreate2+0xf4>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <xTraceEventCreate2+0xf4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6992      	ldr	r2, [r2, #24]
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4b14      	ldr	r3, [pc, #80]	@ (8003eec <xTraceEventCreate2+0xf4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6852      	ldr	r2, [r2, #4]
 8003ea0:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7ff fa4d 	bl	8003354 <SEGGER_RTT_Write>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b00a      	add	sp, #40	@ 0x28
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20003060 	.word	0x20003060
 8003ed8:	20003058 	.word	0x20003058
 8003edc:	20002264 	.word	0x20002264
 8003ee0:	20002280 	.word	0x20002280
 8003ee4:	2000226c 	.word	0x2000226c
 8003ee8:	e000e018 	.word	0xe000e018
 8003eec:	20003068 	.word	0x20003068

08003ef0 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8003f06:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <xTraceEventCreate3+0xe4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <xTraceEventCreate3+0x2a>
 8003f10:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <xTraceEventCreate3+0xe8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <xTraceEventCreate3+0x2e>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e056      	b.n	8003fcc <xTraceEventCreate3+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f28:	2301      	movs	r3, #1
 8003f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	4b29      	ldr	r3, [pc, #164]	@ (8003fdc <xTraceEventCreate3+0xec>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	3201      	adds	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <xTraceEventCreate3+0xf0>)
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <xTraceEventCreate3+0xf4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	2314      	movs	r3, #20
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	0192      	lsls	r2, r2, #6
 8003f50:	188a      	adds	r2, r1, r2
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	21c0      	movs	r1, #192	@ 0xc0
 8003f5c:	0189      	lsls	r1, r1, #6
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	b292      	uxth	r2, r2
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <xTraceEventCreate3+0xec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	805a      	strh	r2, [r3, #2]
 8003f70:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <xTraceEventCreate3+0xf8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	0a19      	lsrs	r1, r3, #8
 8003f78:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <xTraceEventCreate3+0xfc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	061a      	lsls	r2, r3, #24
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	188a      	adds	r2, r1, r2
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <xTraceEventCreate3+0xfc>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <xTraceEventCreate3+0xfc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6992      	ldr	r2, [r2, #24]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <xTraceEventCreate3+0xfc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2214      	movs	r2, #20
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7ff f9cd 	bl	8003354 <SEGGER_RTT_Write>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b00a      	add	sp, #40	@ 0x28
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20003060 	.word	0x20003060
 8003fd8:	20003058 	.word	0x20003058
 8003fdc:	20002264 	.word	0x20002264
 8003fe0:	20002280 	.word	0x20002280
 8003fe4:	2000226c 	.word	0x2000226c
 8003fe8:	e000e018 	.word	0xe000e018
 8003fec:	20003068 	.word	0x20003068

08003ff0 <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	@ 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 8004006:	4b35      	ldr	r3, [pc, #212]	@ (80040dc <xTraceEventCreate4+0xec>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d004      	beq.n	800401a <xTraceEventCreate4+0x2a>
 8004010:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <xTraceEventCreate4+0xf0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <xTraceEventCreate4+0x2e>
 800401a:	2301      	movs	r3, #1
 800401c:	e059      	b.n	80040d2 <xTraceEventCreate4+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	61fb      	str	r3, [r7, #28]
  return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
 8004028:	2301      	movs	r3, #1
 800402a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <xTraceEventCreate4+0xf4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	3201      	adds	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	4b2a      	ldr	r3, [pc, #168]	@ (80040e8 <xTraceEventCreate4+0xf8>)
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	4b2a      	ldr	r3, [pc, #168]	@ (80040ec <xTraceEventCreate4+0xfc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	2314      	movs	r3, #20
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	0192      	lsls	r2, r2, #6
 8004050:	188a      	adds	r2, r1, r2
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	b29a      	uxth	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2180      	movs	r1, #128	@ 0x80
 800405c:	01c9      	lsls	r1, r1, #7
 800405e:	430a      	orrs	r2, r1
 8004060:	b292      	uxth	r2, r2
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <xTraceEventCreate4+0xf4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	b292      	uxth	r2, r2
 800406e:	805a      	strh	r2, [r3, #2]
 8004070:	4b1f      	ldr	r3, [pc, #124]	@ (80040f0 <xTraceEventCreate4+0x100>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	0a19      	lsrs	r1, r3, #8
 8004078:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <xTraceEventCreate4+0x104>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	061a      	lsls	r2, r3, #24
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	188a      	adds	r2, r1, r2
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <xTraceEventCreate4+0x104>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <xTraceEventCreate4+0x104>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6992      	ldr	r2, [r2, #24]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <xTraceEventCreate4+0x104>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6852      	ldr	r2, [r2, #4]
 800409a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2218      	movs	r2, #24
 80040b8:	0019      	movs	r1, r3
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7ff f94a 	bl	8003354 <SEGGER_RTT_Write>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b00a      	add	sp, #40	@ 0x28
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	20003060 	.word	0x20003060
 80040e0:	20003058 	.word	0x20003058
 80040e4:	20002264 	.word	0x20002264
 80040e8:	20002280 	.word	0x20002280
 80040ec:	2000226c 	.word	0x2000226c
 80040f0:	e000e018 	.word	0xe000e018
 80040f4:	20003068 	.word	0x20003068

080040f8 <xTraceEventCreateRawBlocking>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateRawBlocking(const void* pxSource, uint32_t ulSize)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
	int32_t iBytesCommitted = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
	void* pxBuffer = (void*)0;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	ulSize = TRC_ALIGN_CEIL(ulSize, sizeof(TraceUnsignedBaseType_t));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	3303      	adds	r3, #3
 800410e:	2203      	movs	r2, #3
 8004110:	4393      	bics	r3, r2
 8004112:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004114:	f3ef 8310 	mrs	r3, PRIMASK
 8004118:	617b      	str	r3, [r7, #20]
  return(result);
 800411a:	697b      	ldr	r3, [r7, #20]

	TRACE_ENTER_CRITICAL_SECTION();
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	2301      	movs	r3, #1
 8004120:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			@ (mov r8, r8)

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 800412a:	4b16      	ldr	r3, [pc, #88]	@ (8004184 <xTraceEventCreateRawBlocking+0x8c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	3201      	adds	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
	while (xTraceStreamPortAllocate(ulSize, (void**)&pxBuffer) == TRC_FAIL) {}
 8004134:	46c0      	nop			@ (mov r8, r8)
 8004136:	4b14      	ldr	r3, [pc, #80]	@ (8004188 <xTraceEventCreateRawBlocking+0x90>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <xTraceEventCreateRawBlocking+0x94>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	3301      	adds	r3, #1
 8004142:	019b      	lsls	r3, r3, #6
 8004144:	18d3      	adds	r3, r2, r3
 8004146:	60bb      	str	r3, [r7, #8]

	memcpy(pxBuffer, pxSource, ulSize);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	0018      	movs	r0, r3
 8004150:	f002 ff52 	bl	8006ff8 <memcpy>
	while (xTraceStreamPortCommit(pxBuffer, ulSize, &iBytesCommitted) == TRC_FAIL) {}
 8004154:	46c0      	nop			@ (mov r8, r8)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	0019      	movs	r1, r3
 800415c:	2001      	movs	r0, #1
 800415e:	f7ff f8f9 	bl	8003354 <SEGGER_RTT_Write>
 8004162:	0003      	movs	r3, r0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	2300      	movs	r3, #0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d0f4      	beq.n	8004156 <xTraceEventCreateRawBlocking+0x5e>
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			@ (mov r8, r8)
	(void)iBytesCommitted;

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8004178:	2300      	movs	r3, #0
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b008      	add	sp, #32
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	20002264 	.word	0x20002264
 8004188:	20002280 	.word	0x20002280
 800418c:	2000226c 	.word	0x2000226c

08004190 <xTraceEventCreateDataOffline0>:

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3303      	adds	r3, #3
 80041a8:	2203      	movs	r2, #3
 80041aa:	4393      	bics	r3, r2
 80041ac:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3308      	adds	r3, #8
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d901      	bls.n	80041ba <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 80041b6:	2338      	movs	r3, #56	@ 0x38
 80041b8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	61fb      	str	r3, [r7, #28]
  return(result);
 80041c0:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	2301      	movs	r3, #1
 80041c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <xTraceEventCreateDataOffline0+0xe8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	3201      	adds	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	4b28      	ldr	r3, [pc, #160]	@ (800427c <xTraceEventCreateDataOffline0+0xec>)
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <xTraceEventCreateDataOffline0+0xf0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	2314      	movs	r3, #20
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	0192      	lsls	r2, r2, #6
 80041ec:	188a      	adds	r2, r1, r2
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	031b      	lsls	r3, r3, #12
 80041fc:	b21b      	sxth	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b21a      	sxth	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	b292      	uxth	r2, r2
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <xTraceEventCreateDataOffline0+0xe8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	b292      	uxth	r2, r2
 8004212:	805a      	strh	r2, [r3, #2]
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <xTraceEventCreateDataOffline0+0xf4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	0a19      	lsrs	r1, r3, #8
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <xTraceEventCreateDataOffline0+0xf8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	061a      	lsls	r2, r3, #24
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	188a      	adds	r2, r1, r2
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <xTraceEventCreateDataOffline0+0xf8>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b16      	ldr	r3, [pc, #88]	@ (8004288 <xTraceEventCreateDataOffline0+0xf8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6992      	ldr	r2, [r2, #24]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <xTraceEventCreateDataOffline0+0xf8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6852      	ldr	r2, [r2, #4]
 800423e:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3308      	adds	r3, #8
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	0018      	movs	r0, r3
 800424a:	f002 fed5 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3308      	adds	r3, #8
 8004254:	001a      	movs	r2, r3
 8004256:	2001      	movs	r0, #1
 8004258:	f7ff f87c 	bl	8003354 <SEGGER_RTT_Write>
 800425c:	0003      	movs	r3, r0
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800426c:	2300      	movs	r3, #0
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b00a      	add	sp, #40	@ 0x28
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	20002264 	.word	0x20002264
 800427c:	20002280 	.word	0x20002280
 8004280:	2000226c 	.word	0x2000226c
 8004284:	e000e018 	.word	0xe000e018
 8004288:	20003068 	.word	0x20003068

0800428c <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	@ 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3303      	adds	r3, #3
 80042a6:	2203      	movs	r2, #3
 80042a8:	4393      	bics	r3, r2
 80042aa:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	2b40      	cmp	r3, #64	@ 0x40
 80042b2:	d901      	bls.n	80042b8 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 80042b4:	2334      	movs	r3, #52	@ 0x34
 80042b6:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 80042b8:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <xTraceEventCreateData1+0x108>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2201      	movs	r2, #1
 80042be:	4013      	ands	r3, r2
 80042c0:	d004      	beq.n	80042cc <xTraceEventCreateData1+0x40>
 80042c2:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <xTraceEventCreateData1+0x10c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <xTraceEventCreateData1+0x44>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e05d      	b.n	800438c <xTraceEventCreateData1+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	2301      	movs	r3, #1
 80042dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	4b2d      	ldr	r3, [pc, #180]	@ (800439c <xTraceEventCreateData1+0x110>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	3201      	adds	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <xTraceEventCreateData1+0x114>)
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <xTraceEventCreateData1+0x118>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	2314      	movs	r3, #20
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	0192      	lsls	r2, r2, #6
 8004302:	188a      	adds	r2, r1, r2
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	b21a      	sxth	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	3304      	adds	r3, #4
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	b29b      	uxth	r3, r3
 8004312:	031b      	lsls	r3, r3, #12
 8004314:	b21b      	sxth	r3, r3
 8004316:	4313      	orrs	r3, r2
 8004318:	b21a      	sxth	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	b292      	uxth	r2, r2
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <xTraceEventCreateData1+0x110>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	b292      	uxth	r2, r2
 800432a:	805a      	strh	r2, [r3, #2]
 800432c:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <xTraceEventCreateData1+0x11c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	0a19      	lsrs	r1, r3, #8
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <xTraceEventCreateData1+0x120>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	061a      	lsls	r2, r3, #24
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	188a      	adds	r2, r1, r2
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <xTraceEventCreateData1+0x120>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <xTraceEventCreateData1+0x120>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6992      	ldr	r2, [r2, #24]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4b16      	ldr	r3, [pc, #88]	@ (80043ac <xTraceEventCreateData1+0x120>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6852      	ldr	r2, [r2, #4]
 8004356:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	330c      	adds	r3, #12
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f002 fe46 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	001a      	movs	r2, r3
 8004374:	2001      	movs	r0, #1
 8004376:	f7fe ffed 	bl	8003354 <SEGGER_RTT_Write>
 800437a:	0003      	movs	r3, r0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800438a:	2300      	movs	r3, #0
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b00a      	add	sp, #40	@ 0x28
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20003060 	.word	0x20003060
 8004398:	20003058 	.word	0x20003058
 800439c:	20002264 	.word	0x20002264
 80043a0:	20002280 	.word	0x20002280
 80043a4:	2000226c 	.word	0x2000226c
 80043a8:	e000e018 	.word	0xe000e018
 80043ac:	20003068 	.word	0x20003068

080043b0 <xTraceEventCreateData2>:
	TraceUnsignedBaseType_t uxParam1,
	TraceUnsignedBaseType_t uxParam2,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	@ 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
	TraceEvent2_t* pxEventData = (void*)0;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	3303      	adds	r3, #3
 80043ca:	2203      	movs	r2, #3
 80043cc:	4393      	bics	r3, r2
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	3310      	adds	r3, #16
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d901      	bls.n	80043dc <xTraceEventCreateData2+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 80043d8:	2330      	movs	r3, #48	@ 0x30
 80043da:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 80043dc:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <xTraceEventCreateData2+0x110>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	4013      	ands	r3, r2
 80043e4:	d004      	beq.n	80043f0 <xTraceEventCreateData2+0x40>
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <xTraceEventCreateData2+0x114>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <xTraceEventCreateData2+0x44>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e060      	b.n	80044b6 <xTraceEventCreateData2+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f4:	f3ef 8310 	mrs	r3, PRIMASK
 80043f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fe:	2301      	movs	r3, #1
 8004400:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <xTraceEventCreateData2+0x118>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	3201      	adds	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <xTraceEventCreateData2+0x11c>)
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <xTraceEventCreateData2+0x120>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	2314      	movs	r3, #20
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	0192      	lsls	r2, r2, #6
 8004426:	188a      	adds	r2, r1, r2
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	b21a      	sxth	r2, r3
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	3308      	adds	r3, #8
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	b29b      	uxth	r3, r3
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	b21b      	sxth	r3, r3
 800443a:	4313      	orrs	r3, r2
 800443c:	b21a      	sxth	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	b292      	uxth	r2, r2
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <xTraceEventCreateData2+0x118>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	b292      	uxth	r2, r2
 800444e:	805a      	strh	r2, [r3, #2]
 8004450:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <xTraceEventCreateData2+0x124>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	0a19      	lsrs	r1, r3, #8
 8004458:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <xTraceEventCreateData2+0x128>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	061a      	lsls	r2, r3, #24
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	188a      	adds	r2, r1, r2
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <xTraceEventCreateData2+0x128>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <xTraceEventCreateData2+0x128>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6992      	ldr	r2, [r2, #24]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <xTraceEventCreateData2+0x128>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6852      	ldr	r2, [r2, #4]
 800447a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2_DATA(uxParam1, uxParam2, puxData, uxSize);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3310      	adds	r3, #16
 800448c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448e:	6839      	ldr	r1, [r7, #0]
 8004490:	0018      	movs	r0, r3
 8004492:	f002 fdb1 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent2_t) + uxSize);
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	3310      	adds	r3, #16
 800449c:	001a      	movs	r2, r3
 800449e:	2001      	movs	r0, #1
 80044a0:	f7fe ff58 	bl	8003354 <SEGGER_RTT_Write>
 80044a4:	0003      	movs	r3, r0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b00a      	add	sp, #40	@ 0x28
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	20003060 	.word	0x20003060
 80044c4:	20003058 	.word	0x20003058
 80044c8:	20002264 	.word	0x20002264
 80044cc:	20002280 	.word	0x20002280
 80044d0:	2000226c 	.word	0x2000226c
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20003068 	.word	0x20003068

080044dc <xTraceEventCreateData3>:
	TraceUnsignedBaseType_t uxParam2,
	TraceUnsignedBaseType_t uxParam3,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	@ 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80044f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f4:	3303      	adds	r3, #3
 80044f6:	2203      	movs	r2, #3
 80044f8:	4393      	bics	r3, r2
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80044fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fe:	3314      	adds	r3, #20
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d901      	bls.n	8004508 <xTraceEventCreateData3+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 8004504:	232c      	movs	r3, #44	@ 0x2c
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <xTraceEventCreateData3+0x114>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d004      	beq.n	800451c <xTraceEventCreateData3+0x40>
 8004512:	4b38      	ldr	r3, [pc, #224]	@ (80045f4 <xTraceEventCreateData3+0x118>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <xTraceEventCreateData3+0x44>
 800451c:	2301      	movs	r3, #1
 800451e:	e063      	b.n	80045e8 <xTraceEventCreateData3+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	61fb      	str	r3, [r7, #28]
  return(result);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
 800452a:	2301      	movs	r3, #1
 800452c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	4b30      	ldr	r3, [pc, #192]	@ (80045f8 <xTraceEventCreateData3+0x11c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	3201      	adds	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	4b2e      	ldr	r3, [pc, #184]	@ (80045fc <xTraceEventCreateData3+0x120>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	4b2e      	ldr	r3, [pc, #184]	@ (8004600 <xTraceEventCreateData3+0x124>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	2314      	movs	r3, #20
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	0192      	lsls	r2, r2, #6
 8004552:	188a      	adds	r2, r1, r2
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	b21a      	sxth	r2, r3
 800455a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455c:	330c      	adds	r3, #12
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	b29b      	uxth	r3, r3
 8004562:	031b      	lsls	r3, r3, #12
 8004564:	b21b      	sxth	r3, r3
 8004566:	4313      	orrs	r3, r2
 8004568:	b21a      	sxth	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	b292      	uxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <xTraceEventCreateData3+0x11c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	b292      	uxth	r2, r2
 800457a:	805a      	strh	r2, [r3, #2]
 800457c:	4b21      	ldr	r3, [pc, #132]	@ (8004604 <xTraceEventCreateData3+0x128>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	0a19      	lsrs	r1, r3, #8
 8004584:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <xTraceEventCreateData3+0x12c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	061a      	lsls	r2, r3, #24
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	188a      	adds	r2, r1, r2
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <xTraceEventCreateData3+0x12c>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b1c      	ldr	r3, [pc, #112]	@ (8004608 <xTraceEventCreateData3+0x12c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6992      	ldr	r2, [r2, #24]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <xTraceEventCreateData3+0x12c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6852      	ldr	r2, [r2, #4]
 80045a6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3_DATA(uxParam1, uxParam2, uxParam3, puxData, uxSize);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	611a      	str	r2, [r3, #16]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3314      	adds	r3, #20
 80045be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045c2:	0018      	movs	r0, r3
 80045c4:	f002 fd18 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent3_t) + uxSize);
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	3314      	adds	r3, #20
 80045ce:	001a      	movs	r2, r3
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fe febf 	bl	8003354 <SEGGER_RTT_Write>
 80045d6:	0003      	movs	r3, r0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b00a      	add	sp, #40	@ 0x28
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20003060 	.word	0x20003060
 80045f4:	20003058 	.word	0x20003058
 80045f8:	20002264 	.word	0x20002264
 80045fc:	20002280 	.word	0x20002280
 8004600:	2000226c 	.word	0x2000226c
 8004604:	e000e018 	.word	0xe000e018
 8004608:	20003068 	.word	0x20003068

0800460c <xTraceEventCreateData4>:
	TraceUnsignedBaseType_t uxParam3,
	TraceUnsignedBaseType_t uxParam4,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	3303      	adds	r3, #3
 8004626:	2203      	movs	r2, #3
 8004628:	4393      	bics	r3, r2
 800462a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	3318      	adds	r3, #24
 8004630:	2b40      	cmp	r3, #64	@ 0x40
 8004632:	d901      	bls.n	8004638 <xTraceEventCreateData4+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 8004634:	2328      	movs	r3, #40	@ 0x28
 8004636:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 8004638:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <xTraceEventCreateData4+0x11c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	d004      	beq.n	800464c <xTraceEventCreateData4+0x40>
 8004642:	4b3a      	ldr	r3, [pc, #232]	@ (800472c <xTraceEventCreateData4+0x120>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <xTraceEventCreateData4+0x44>
 800464c:	2301      	movs	r3, #1
 800464e:	e066      	b.n	800471e <xTraceEventCreateData4+0x112>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004650:	f3ef 8310 	mrs	r3, PRIMASK
 8004654:	61fb      	str	r3, [r7, #28]
  return(result);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
 800465a:	2301      	movs	r3, #1
 800465c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)
 8004666:	4b32      	ldr	r3, [pc, #200]	@ (8004730 <xTraceEventCreateData4+0x124>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	3201      	adds	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <xTraceEventCreateData4+0x128>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	4b30      	ldr	r3, [pc, #192]	@ (8004738 <xTraceEventCreateData4+0x12c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	2314      	movs	r3, #20
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	0192      	lsls	r2, r2, #6
 8004682:	188a      	adds	r2, r1, r2
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	b21a      	sxth	r2, r3
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	3310      	adds	r3, #16
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	b29b      	uxth	r3, r3
 8004692:	031b      	lsls	r3, r3, #12
 8004694:	b21b      	sxth	r3, r3
 8004696:	4313      	orrs	r3, r2
 8004698:	b21a      	sxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <xTraceEventCreateData4+0x124>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	b292      	uxth	r2, r2
 80046aa:	805a      	strh	r2, [r3, #2]
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <xTraceEventCreateData4+0x130>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	0a19      	lsrs	r1, r3, #8
 80046b4:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <xTraceEventCreateData4+0x134>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	061a      	lsls	r2, r3, #24
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	188a      	adds	r2, r1, r2
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <xTraceEventCreateData4+0x134>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <xTraceEventCreateData4+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6992      	ldr	r2, [r2, #24]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <xTraceEventCreateData4+0x134>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6852      	ldr	r2, [r2, #4]
 80046d6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	611a      	str	r2, [r3, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ee:	615a      	str	r2, [r3, #20]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3318      	adds	r3, #24
 80046f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80046f8:	0018      	movs	r0, r3
 80046fa:	f002 fc7d 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent4_t) + uxSize);
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	3318      	adds	r3, #24
 8004704:	001a      	movs	r2, r3
 8004706:	2001      	movs	r0, #1
 8004708:	f7fe fe24 	bl	8003354 <SEGGER_RTT_Write>
 800470c:	0003      	movs	r3, r0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b00a      	add	sp, #40	@ 0x28
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	20003060 	.word	0x20003060
 800472c:	20003058 	.word	0x20003058
 8004730:	20002264 	.word	0x20002264
 8004734:	20002280 	.word	0x20002280
 8004738:	2000226c 	.word	0x2000226c
 800473c:	e000e018 	.word	0xe000e018
 8004740:	20003068 	.word	0x20003068

08004744 <xTraceEventCreateData5>:
	TraceUnsignedBaseType_t uxParam4,
	TraceUnsignedBaseType_t uxParam5,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	@ 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
	TraceEvent5_t* pxEventData = (void*)0;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800475a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475c:	3303      	adds	r3, #3
 800475e:	2203      	movs	r2, #3
 8004760:	4393      	bics	r3, r2
 8004762:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8004764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004766:	331c      	adds	r3, #28
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	d901      	bls.n	8004770 <xTraceEventCreateData5+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 800476c:	2324      	movs	r3, #36	@ 0x24
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 8004770:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <xTraceEventCreateData5+0x120>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	d004      	beq.n	8004784 <xTraceEventCreateData5+0x40>
 800477a:	4b3b      	ldr	r3, [pc, #236]	@ (8004868 <xTraceEventCreateData5+0x124>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <xTraceEventCreateData5+0x44>
 8004784:	2301      	movs	r3, #1
 8004786:	e069      	b.n	800485c <xTraceEventCreateData5+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004788:	f3ef 8310 	mrs	r3, PRIMASK
 800478c:	61fb      	str	r3, [r7, #28]
  return(result);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	2301      	movs	r3, #1
 8004794:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			@ (mov r8, r8)
 800479e:	4b33      	ldr	r3, [pc, #204]	@ (800486c <xTraceEventCreateData5+0x128>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	3201      	adds	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	4b31      	ldr	r3, [pc, #196]	@ (8004870 <xTraceEventCreateData5+0x12c>)
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	4b31      	ldr	r3, [pc, #196]	@ (8004874 <xTraceEventCreateData5+0x130>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	2314      	movs	r3, #20
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	0192      	lsls	r2, r2, #6
 80047ba:	188a      	adds	r2, r1, r2
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	b21a      	sxth	r2, r3
 80047c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c4:	3314      	adds	r3, #20
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	031b      	lsls	r3, r3, #12
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b21a      	sxth	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	b292      	uxth	r2, r2
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	4b24      	ldr	r3, [pc, #144]	@ (800486c <xTraceEventCreateData5+0x128>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	b292      	uxth	r2, r2
 80047e2:	805a      	strh	r2, [r3, #2]
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <xTraceEventCreateData5+0x134>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	0a19      	lsrs	r1, r3, #8
 80047ec:	4b23      	ldr	r3, [pc, #140]	@ (800487c <xTraceEventCreateData5+0x138>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	061a      	lsls	r2, r3, #24
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	188a      	adds	r2, r1, r2
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	4b20      	ldr	r3, [pc, #128]	@ (800487c <xTraceEventCreateData5+0x138>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b1f      	ldr	r3, [pc, #124]	@ (800487c <xTraceEventCreateData5+0x138>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6992      	ldr	r2, [r2, #24]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4b1c      	ldr	r3, [pc, #112]	@ (800487c <xTraceEventCreateData5+0x138>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	611a      	str	r2, [r3, #16]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	615a      	str	r2, [r3, #20]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800482c:	619a      	str	r2, [r3, #24]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	331c      	adds	r3, #28
 8004832:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004834:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004836:	0018      	movs	r0, r3
 8004838:	f002 fbde 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent5_t) + uxSize);
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004840:	331c      	adds	r3, #28
 8004842:	001a      	movs	r2, r3
 8004844:	2001      	movs	r0, #1
 8004846:	f7fe fd85 	bl	8003354 <SEGGER_RTT_Write>
 800484a:	0003      	movs	r3, r0
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b00a      	add	sp, #40	@ 0x28
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20003060 	.word	0x20003060
 8004868:	20003058 	.word	0x20003058
 800486c:	20002264 	.word	0x20002264
 8004870:	20002280 	.word	0x20002280
 8004874:	2000226c 	.word	0x2000226c
 8004878:	e000e018 	.word	0xe000e018
 800487c:	20003068 	.word	0x20003068

08004880 <xTraceEventCreateData6>:
	TraceUnsignedBaseType_t uxParam5,
	TraceUnsignedBaseType_t uxParam6,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	@ 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
	TraceEvent6_t* pxEventData = (void*)0;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8004896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004898:	3303      	adds	r3, #3
 800489a:	2203      	movs	r2, #3
 800489c:	4393      	bics	r3, r2
 800489e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80048a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a2:	3320      	adds	r3, #32
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	d901      	bls.n	80048ac <xTraceEventCreateData6+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 80048a8:	2320      	movs	r3, #32
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 80048ac:	4b3e      	ldr	r3, [pc, #248]	@ (80049a8 <xTraceEventCreateData6+0x128>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d004      	beq.n	80048c0 <xTraceEventCreateData6+0x40>
 80048b6:	4b3d      	ldr	r3, [pc, #244]	@ (80049ac <xTraceEventCreateData6+0x12c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <xTraceEventCreateData6+0x44>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06c      	b.n	800499e <xTraceEventCreateData6+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	2301      	movs	r3, #1
 80048d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	4b35      	ldr	r3, [pc, #212]	@ (80049b0 <xTraceEventCreateData6+0x130>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	3201      	adds	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	4b33      	ldr	r3, [pc, #204]	@ (80049b4 <xTraceEventCreateData6+0x134>)
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <xTraceEventCreateData6+0x138>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	2314      	movs	r3, #20
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	0192      	lsls	r2, r2, #6
 80048f6:	188a      	adds	r2, r1, r2
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	b21a      	sxth	r2, r3
 80048fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004900:	3318      	adds	r3, #24
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	b29b      	uxth	r3, r3
 8004906:	031b      	lsls	r3, r3, #12
 8004908:	b21b      	sxth	r3, r3
 800490a:	4313      	orrs	r3, r2
 800490c:	b21a      	sxth	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	b292      	uxth	r2, r2
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	4b26      	ldr	r3, [pc, #152]	@ (80049b0 <xTraceEventCreateData6+0x130>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	b292      	uxth	r2, r2
 800491e:	805a      	strh	r2, [r3, #2]
 8004920:	4b26      	ldr	r3, [pc, #152]	@ (80049bc <xTraceEventCreateData6+0x13c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	0a19      	lsrs	r1, r3, #8
 8004928:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <xTraceEventCreateData6+0x140>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	061a      	lsls	r2, r3, #24
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	188a      	adds	r2, r1, r2
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	4b22      	ldr	r3, [pc, #136]	@ (80049c0 <xTraceEventCreateData6+0x140>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b21      	ldr	r3, [pc, #132]	@ (80049c0 <xTraceEventCreateData6+0x140>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6992      	ldr	r2, [r2, #24]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4b1e      	ldr	r3, [pc, #120]	@ (80049c0 <xTraceEventCreateData6+0x140>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6852      	ldr	r2, [r2, #4]
 800494a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	611a      	str	r2, [r3, #16]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004962:	615a      	str	r2, [r3, #20]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004968:	619a      	str	r2, [r3, #24]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800496e:	61da      	str	r2, [r3, #28]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3320      	adds	r3, #32
 8004974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004976:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004978:	0018      	movs	r0, r3
 800497a:	f002 fb3d 	bl	8006ff8 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent6_t) + uxSize);
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004982:	3320      	adds	r3, #32
 8004984:	001a      	movs	r2, r3
 8004986:	2001      	movs	r0, #1
 8004988:	f7fe fce4 	bl	8003354 <SEGGER_RTT_Write>
 800498c:	0003      	movs	r3, r0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f383 8810 	msr	PRIMASK, r3
}
 800499a:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800499c:	2300      	movs	r3, #0
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b00a      	add	sp, #40	@ 0x28
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	20003060 	.word	0x20003060
 80049ac:	20003058 	.word	0x20003058
 80049b0:	20002264 	.word	0x20002264
 80049b4:	20002280 	.word	0x20002280
 80049b8:	2000226c 	.word	0x2000226c
 80049bc:	e000e018 	.word	0xe000e018
 80049c0:	20003068 	.word	0x20003068

080049c4 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 80049cc:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <xTraceExtensionInitialize+0x30>)
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 80049d2:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <xTraceExtensionInitialize+0x30>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	22fd      	movs	r2, #253	@ 0xfd
 80049d8:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 80049da:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <xTraceExtensionInitialize+0x34>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2280      	movs	r2, #128	@ 0x80
 80049e0:	0052      	lsls	r2, r2, #1
 80049e2:	431a      	orrs	r2, r3
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <xTraceExtensionInitialize+0x34>)
 80049e6:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	20002268 	.word	0x20002268
 80049f8:	20003060 	.word	0x20003060

080049fc <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	@ 0x30
 8004a00:	af04      	add	r7, sp, #16
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 8004a0a:	2114      	movs	r1, #20
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	601a      	str	r2, [r3, #0]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	609a      	str	r2, [r3, #8]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	9302      	str	r3, [sp, #8]
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	187b      	adds	r3, r7, r1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2303      	movs	r3, #3
 8004a30:	2100      	movs	r1, #0
 8004a32:	20f2      	movs	r0, #242	@ 0xf2
 8004a34:	f000 f904 	bl	8004c40 <xTraceObjectRegisterInternal>
 8004a38:	0003      	movs	r3, r0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b008      	add	sp, #32
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e024      	b.n	8004aa2 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d015      	beq.n	8004a8a <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	18d3      	adds	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d904      	bls.n	8004a84 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <xTraceHeapAlloc+0x52>
 8004a90:	2338      	movs	r3, #56	@ 0x38
 8004a92:	e000      	b.n	8004a96 <xTraceHeapAlloc+0x54>
 8004a94:	23e9      	movs	r3, #233	@ 0xe9
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff f9ac 	bl	8003df8 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b20 <xTraceISRInitialize+0x74>)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e020      	b.n	8004b02 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <xTraceISRInitialize+0x74>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	18cb      	adds	r3, r1, r3
 8004ad0:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e007      	b.n	8004ae8 <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	0092      	lsls	r2, r2, #2
 8004ade:	2100      	movs	r1, #0
 8004ae0:	50d1      	str	r1, [r2, r3]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b07      	cmp	r3, #7
 8004aec:	d9f4      	bls.n	8004ad8 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	4252      	negs	r2, r2
 8004af4:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0db      	beq.n	8004ac0 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8004b08:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <xTraceISRInitialize+0x78>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2280      	movs	r2, #128	@ 0x80
 8004b0e:	0152      	lsls	r2, r2, #5
 8004b10:	431a      	orrs	r2, r3
 8004b12:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <xTraceISRInitialize+0x78>)
 8004b14:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b006      	add	sp, #24
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000226c 	.word	0x2000226c
 8004b24:	20003060 	.word	0x20003060

08004b28 <xTraceKernelPortGetUnusedStack>:
#endif

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

traceResult xTraceKernelPortGetUnusedStack(void* pvTask, TraceUnsignedBaseType_t* puxUnusedStack)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	*puxUnusedStack = uxTaskGetStackHighWaterMark(pvTask);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7fd fb09 	bl	800214c <uxTaskGetStackHighWaterMark>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b002      	add	sp, #8
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00b      	b.n	8004b76 <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8004b5e:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <xTraceKernelPortInitialize+0x34>)
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <xTraceKernelPortInitialize+0x34>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <xTraceKernelPortInitialize+0x34>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	20002270 	.word	0x20002270

08004b84 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8004b8a:	4b17      	ldr	r3, [pc, #92]	@ (8004be8 <xTraceKernelPortEnable+0x64>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xTraceKernelPortEnable+0x26>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <xTraceKernelPortEnable+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	001a      	movs	r2, r3
 8004b9a:	23e0      	movs	r3, #224	@ 0xe0
 8004b9c:	015b      	lsls	r3, r3, #5
 8004b9e:	4813      	ldr	r0, [pc, #76]	@ (8004bec <xTraceKernelPortEnable+0x68>)
 8004ba0:	9200      	str	r2, [sp, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	f7ff ff29 	bl	80049fc <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8004baa:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <xTraceKernelPortEnable+0x64>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d115      	bne.n	8004be0 <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <xTraceKernelPortEnable+0x64>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	490d      	ldr	r1, [pc, #52]	@ (8004bf0 <xTraceKernelPortEnable+0x6c>)
 8004bbc:	480d      	ldr	r0, [pc, #52]	@ (8004bf4 <xTraceKernelPortEnable+0x70>)
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2280      	movs	r2, #128	@ 0x80
 8004bc8:	f7fc fb83 	bl	80012d2 <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <xTraceKernelPortEnable+0x64>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8004bd6:	2006      	movs	r0, #6
 8004bd8:	f7fe ff78 	bl	8003acc <xTraceError>

			return TRC_FAIL;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20002270 	.word	0x20002270
 8004bec:	080072b4 	.word	0x080072b4
 8004bf0:	080072c0 	.word	0x080072c0
 8004bf4:	08004bf9 	.word	0x08004bf9

08004bf8 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8004c00:	f000 fe4a 	bl	8005898 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8004c04:	2032      	movs	r0, #50	@ 0x32
 8004c06:	f7fc fd5f 	bl	80016c8 <vTaskDelay>
		xTraceTzCtrl();
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	e7f8      	b.n	8004c00 <TzCtrl+0x8>

08004c0e <vTraceSetSemaphoreName>:
{
	xTraceObjectSetNameWithoutHandle(pvQueue, szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
	xTraceObjectSetNameWithoutHandle(pvSemaphore, szName);
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f917 	bl	8004e52 <xTraceObjectSetNameWithoutHandle>
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8004c30:	4b02      	ldr	r3, [pc, #8]	@ (8004c3c <xTraceKernelPortGetSystemHeapHandle+0x10>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20002270 	.word	0x20002270

08004c40 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b091      	sub	sp, #68	@ 0x44
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8004c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c58:	2301      	movs	r3, #1
 8004c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			@ (mov r8, r8)

	if (pvObject != (void*)0)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d019      	beq.n	8004c9e <xTraceObjectRegisterInternal+0x5e>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8004c6a:	2318      	movs	r3, #24
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7fe fdaa 	bl	80037c8 <xTraceEntryCreate>
 8004c74:	1e03      	subs	r3, r0, #0
 8004c76:	d104      	bne.n	8004c82 <xTraceObjectRegisterInternal+0x42>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <xTraceObjectRegisterInternal+0x44>
 8004c82:	2301      	movs	r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <xTraceObjectRegisterInternal+0x58>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	f383 8810 	msr	PRIMASK, r3
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e089      	b.n	8004dac <xTraceObjectRegisterInternal+0x16c>
		}
		
		pvAddress = pvObject;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e012      	b.n	8004cc4 <xTraceObjectRegisterInternal+0x84>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8004c9e:	2318      	movs	r3, #24
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7fe fd90 	bl	80037c8 <xTraceEntryCreate>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <xTraceObjectRegisterInternal+0x7e>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e076      	b.n	8004dac <xTraceObjectRegisterInternal+0x16c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc8:	e00d      	b.n	8004ce6 <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cd0:	18d3      	adds	r3, r2, r3
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	18cb      	adds	r3, r1, r3
 8004cdc:	3304      	adds	r3, #4
 8004cde:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < uxStateCount; i++)
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3ed      	bcc.n	8004cca <xTraceObjectRegisterInternal+0x8a>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6919      	ldr	r1, [r3, #16]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <xTraceObjectRegisterInternal+0xe6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <xTraceObjectRegisterInternal+0xe6>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	0011      	movs	r1, r2
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f847 	bl	8004db4 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d02b      	beq.n	8004d84 <xTraceObjectRegisterInternal+0x144>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d839      	bhi.n	8004da6 <xTraceObjectRegisterInternal+0x166>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d01a      	beq.n	8004d6e <xTraceObjectRegisterInternal+0x12e>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d833      	bhi.n	8004da6 <xTraceObjectRegisterInternal+0x166>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <xTraceObjectRegisterInternal+0x10c>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d008      	beq.n	8004d5c <xTraceObjectRegisterInternal+0x11c>
 8004d4a:	e02c      	b.n	8004da6 <xTraceObjectRegisterInternal+0x166>
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	001a      	movs	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	0011      	movs	r1, r2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe ffd7 	bl	8003d08 <xTraceEventCreate1>
			break;
 8004d5a:	e026      	b.n	8004daa <xTraceObjectRegisterInternal+0x16a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7ff f846 	bl	8003df8 <xTraceEventCreate2>
			break;
 8004d6c:	e01d      	b.n	8004daa <xTraceObjectRegisterInternal+0x16a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	0019      	movs	r1, r3
 8004d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d78:	3304      	adds	r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff f8b7 	bl	8003ef0 <xTraceEventCreate3>
			break;
 8004d82:	e012      	b.n	8004daa <xTraceObjectRegisterInternal+0x16a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	001c      	movs	r4, r3
 8004d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d8e:	3304      	adds	r3, #4
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d94:	3308      	adds	r3, #8
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	000b      	movs	r3, r1
 8004d9e:	0021      	movs	r1, r4
 8004da0:	f7ff f926 	bl	8003ff0 <xTraceEventCreate4>
			break;
 8004da4:	e001      	b.n	8004daa <xTraceObjectRegisterInternal+0x16a>
		default:
			return TRC_FAIL;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xTraceObjectRegisterInternal+0x16c>
			break;
	}

	return TRC_SUCCESS;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b00f      	add	sp, #60	@ 0x3c
 8004db2:	bd90      	pop	{r4, r7, pc}

08004db4 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004dc8:	4b14      	ldr	r3, [pc, #80]	@ (8004e1c <xTraceObjectSetName+0x68>)
 8004dca:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e002      	b.n	8004dde <xTraceObjectSetName+0x2a>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <xTraceObjectSetName+0x3c>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dee:	d9f3      	bls.n	8004dd8 <xTraceObjectSetName+0x24>

	uiLength = i;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	0019      	movs	r1, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	2003      	movs	r0, #3
 8004e00:	f7ff fa44 	bl	800428c <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fe fd68 	bl	80038e0 <xTraceEntrySetSymbol>
 8004e10:	0003      	movs	r3, r0
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	080072c8 	.word	0x080072c8

08004e20 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	@ 0x28
 8004e24:	af04      	add	r7, sp, #16
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	2314      	movs	r3, #20
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	9302      	str	r3, [sp, #8]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	003b      	movs	r3, r7
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2301      	movs	r3, #1
 8004e44:	f7ff fefc 	bl	8004c40 <xTraceObjectRegisterInternal>
 8004e48:	0003      	movs	r3, r0
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b006      	add	sp, #24
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8004e52:	b590      	push	{r4, r7, lr}
 8004e54:	b08b      	sub	sp, #44	@ 0x2c
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e62:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f383 8810 	msr	PRIMASK, r3
}
 8004e70:	46c0      	nop			@ (mov r8, r8)

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8004e72:	240c      	movs	r4, #12
 8004e74:	193a      	adds	r2, r7, r4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0011      	movs	r1, r2
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fe fd06 	bl	800388c <xTraceEntryFind>
 8004e80:	0003      	movs	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d115      	bne.n	8004eb2 <xTraceObjectSetNameWithoutHandle+0x60>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fe fc9d 	bl	80037c8 <xTraceEntryCreate>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d104      	bne.n	8004e9c <xTraceObjectSetNameWithoutHandle+0x4a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <xTraceObjectSetNameWithoutHandle+0x4c>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <xTraceObjectSetNameWithoutHandle+0x60>
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00e      	b.n	8004ed0 <xTraceObjectSetNameWithoutHandle+0x7e>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7ff ff7b 	bl	8004db4 <xTraceObjectSetName>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b00b      	add	sp, #44	@ 0x2c
 8004ed6:	bd90      	pop	{r4, r7, pc}

08004ed8 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <xTracePrintInitialize+0x38>)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]

	pxPrintData->defaultChannel = 0;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <xTracePrintInitialize+0x38>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <xTracePrintInitialize+0x38>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8004ef6:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <xTracePrintInitialize+0x3c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2280      	movs	r2, #128	@ 0x80
 8004efc:	0212      	lsls	r2, r2, #8
 8004efe:	431a      	orrs	r2, r3
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <xTracePrintInitialize+0x3c>)
 8004f02:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20002274 	.word	0x20002274
 8004f14:	20003060 	.word	0x20003060

08004f18 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004f22:	4b16      	ldr	r3, [pc, #88]	@ (8004f7c <xTracePrint+0x64>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e01f      	b.n	8004f72 <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <xTracePrint+0x68>)
 8004f3a:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e002      	b.n	8004f48 <xTracePrint+0x30>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	18d3      	adds	r3, r2, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <xTracePrint+0x42>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f58:	d9f3      	bls.n	8004f42 <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f000 f884 	bl	8005078 <prvTraceVPrintF>
 8004f70:	0003      	movs	r3, r0
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	20003060 	.word	0x20003060
 8004f80:	080072cc 	.word	0x080072cc

08004f84 <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 8004f84:	b40e      	push	{r1, r2, r3}
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <xTracePrintF+0x44>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	4013      	ands	r3, r2
 8004f98:	d101      	bne.n	8004f9e <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e00c      	b.n	8004fb8 <xTracePrintF+0x34>
	}

	va_start(xVariableList, szFormat);
 8004f9e:	2320      	movs	r3, #32
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fa      	adds	r2, r7, r3
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 f80d 	bl	8004fcc <xTraceVPrintF>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	60fb      	str	r3, [r7, #12]
	va_end(xVariableList);

	return xResult;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b005      	add	sp, #20
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	bc08      	pop	{r3}
 8004fc2:	b003      	add	sp, #12
 8004fc4:	4718      	bx	r3
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20003060 	.word	0x20003060

08004fcc <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b08b      	sub	sp, #44	@ 0x2c
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004fdc:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <xTraceVPrintF+0xa4>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	2380      	movs	r3, #128	@ 0x80
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d101      	bne.n	8004fec <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e03c      	b.n	8005066 <xTraceVPrintF+0x9a>
	}

	if (szFormat == (void*)0)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <xTraceVPrintF+0xa8>)
 8004ff4:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	e01e      	b.n	800503a <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	18d3      	adds	r3, r2, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b25      	cmp	r3, #37	@ 0x25
 8005006:	d115      	bne.n	8005034 <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	18d3      	adds	r3, r2, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b25      	cmp	r3, #37	@ 0x25
 8005022:	d002      	beq.n	800502a <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	3301      	adds	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3301      	adds	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	e000      	b.n	8005034 <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 8005032:	46c0      	nop			@ (mov r8, r8)
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	18d3      	adds	r3, r2, r3
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <xTraceVPrintF+0x80>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b7f      	cmp	r3, #127	@ 0x7f
 800504a:	d9d7      	bls.n	8004ffc <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3301      	adds	r3, #1
 8005050:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 8005052:	69bc      	ldr	r4, [r7, #24]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	0023      	movs	r3, r4
 8005060:	f000 f80a 	bl	8005078 <prvTraceVPrintF>
 8005064:	0003      	movs	r3, r0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b009      	add	sp, #36	@ 0x24
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	20003060 	.word	0x20003060
 8005074:	080072cc 	.word	0x080072cc

08005078 <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b093      	sub	sp, #76	@ 0x4c
 800507c:	af06      	add	r7, sp, #24
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3391      	adds	r3, #145	@ 0x91
 800508a:	62bb      	str	r3, [r7, #40]	@ 0x28
	TraceUnsignedBaseType_t uxParam2;
	TraceUnsignedBaseType_t uxParam3;
	TraceUnsignedBaseType_t uxParam4;
	TraceUnsignedBaseType_t uxParam5;

	if (xChannel == 0)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d115      	bne.n	80050be <prvTraceVPrintF+0x46>
	{
		if (pxPrintData->defaultChannel == 0)
 8005092:	4b75      	ldr	r3, [pc, #468]	@ (8005268 <prvTraceVPrintF+0x1f0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10c      	bne.n	80050b6 <prvTraceVPrintF+0x3e>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 800509c:	4b72      	ldr	r3, [pc, #456]	@ (8005268 <prvTraceVPrintF+0x1f0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	001a      	movs	r2, r3
 80050a2:	4b72      	ldr	r3, [pc, #456]	@ (800526c <prvTraceVPrintF+0x1f4>)
 80050a4:	0011      	movs	r1, r2
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 fdae 	bl	8005c08 <xTraceStringRegister>
 80050ac:	0003      	movs	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <prvTraceVPrintF+0x3e>
			{
				return TRC_FAIL;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0d3      	b.n	800525e <prvTraceVPrintF+0x1e6>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80050b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005268 <prvTraceVPrintF+0x1f0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
	}

	switch (uiArgs)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d900      	bls.n	80050c6 <prvTraceVPrintF+0x4e>
 80050c4:	e0c7      	b.n	8005256 <prvTraceVPrintF+0x1de>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	009a      	lsls	r2, r3, #2
 80050ca:	4b69      	ldr	r3, [pc, #420]	@ (8005270 <prvTraceVPrintF+0x1f8>)
 80050cc:	18d3      	adds	r3, r2, r3
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	469f      	mov	pc, r3
	{
		case 0:
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050da:	f7ff f8d7 	bl	800428c <xTraceEventCreateData1>
 80050de:	0003      	movs	r3, r0
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 80050e2:	e0bb      	b.n	800525c <prvTraceVPrintF+0x1e4>
		case 1:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80050e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
			xResult = xTraceEventCreateData2(
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	68bc      	ldr	r4, [r7, #8]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	0023      	movs	r3, r4
 8005100:	f7ff f956 	bl	80043b0 <xTraceEventCreateData2>
 8005104:	0003      	movs	r3, r0
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
				(TraceUnsignedBaseType_t)xChannel,
				uxParam1,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8005108:	e0a8      	b.n	800525c <prvTraceVPrintF+0x1e4>
		case 2:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800510a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1d19      	adds	r1, r3, #4
 8005110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005112:	6011      	str	r1, [r2, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1d19      	adds	r1, r3, #4
 800511e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	623b      	str	r3, [r7, #32]
			xResult = xTraceEventCreateData3(
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6a3c      	ldr	r4, [r7, #32]
 800512a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	0023      	movs	r3, r4
 8005138:	f7ff f9d0 	bl	80044dc <xTraceEventCreateData3>
 800513c:	0003      	movs	r3, r0
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam1,
				uxParam2,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8005140:	e08c      	b.n	800525c <prvTraceVPrintF+0x1e4>
		case 3:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	1d19      	adds	r1, r3, #4
 8005148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800514a:	6011      	str	r1, [r2, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800515e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	1d19      	adds	r1, r3, #4
 8005164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005166:	6011      	str	r1, [r2, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	61fb      	str	r3, [r7, #28]
			xResult = xTraceEventCreateData4(
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	6a3c      	ldr	r4, [r7, #32]
 8005170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	0023      	movs	r3, r4
 8005182:	f7ff fa43 	bl	800460c <xTraceEventCreateData4>
 8005186:	0003      	movs	r3, r0
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam2,
				uxParam3,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800518a:	e067      	b.n	800525c <prvTraceVPrintF+0x1e4>
		case 4:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800518c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005194:	6011      	str	r1, [r2, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800519a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1d19      	adds	r1, r3, #4
 80051a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a2:	6011      	str	r1, [r2, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80051a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1d19      	adds	r1, r3, #4
 80051ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80051b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1d19      	adds	r1, r3, #4
 80051bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051be:	6011      	str	r1, [r2, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]
			xResult = xTraceEventCreateData5(
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	6a3c      	ldr	r4, [r7, #32]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	9303      	str	r3, [sp, #12]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	0023      	movs	r3, r4
 80051de:	f7ff fab1 	bl	8004744 <xTraceEventCreateData5>
 80051e2:	0003      	movs	r3, r0
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam3,
				uxParam4,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 80051e6:	e039      	b.n	800525c <prvTraceVPrintF+0x1e4>
		case 5:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80051e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1d19      	adds	r1, r3, #4
 80051ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 80051f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1d19      	adds	r1, r3, #4
 80051fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051fe:	6011      	str	r1, [r2, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800520c:	6011      	str	r1, [r2, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1d19      	adds	r1, r3, #4
 8005218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800521a:	6011      	str	r1, [r2, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8005220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	617b      	str	r3, [r7, #20]
			xResult = xTraceEventCreateData6(
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6a3c      	ldr	r4, [r7, #32]
 8005232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	9303      	str	r3, [sp, #12]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	0023      	movs	r3, r4
 800524c:	f7ff fb18 	bl	8004880 <xTraceEventCreateData6>
 8005250:	0003      	movs	r3, r0
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam4,
				uxParam5,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8005254:	e002      	b.n	800525c <prvTraceVPrintF+0x1e4>
		default:
			xResult = TRC_FAIL;
 8005256:	2301      	movs	r3, #1
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 800525a:	46c0      	nop			@ (mov r8, r8)
	}

	return xResult;
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b00d      	add	sp, #52	@ 0x34
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	20002274 	.word	0x20002274
 800526c:	080072e0 	.word	0x080072e0
 8005270:	08007748 	.word	0x08007748

08005274 <xTraceStackMonitorInitialize>:
#endif

static TraceStackMonitorData_t* pxStackMonitor TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStackMonitorInitialize(TraceStackMonitorData_t *pxBuffer)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxStackMonitor = pxBuffer;
 800527c:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <xTraceStackMonitorInitialize+0x4c>)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]

	pxStackMonitor->uxEntryCount = 0;
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <xTraceStackMonitorInitialize+0x4c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	651a      	str	r2, [r3, #80]	@ 0x50

	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e008      	b.n	80052a2 <xTraceStackMonitorInitialize+0x2e>
	{
		pxStackMonitor->xEntries[i].pvTask = 0;
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <xTraceStackMonitorInitialize+0x4c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	00d2      	lsls	r2, r2, #3
 8005298:	2100      	movs	r1, #0
 800529a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	d9f3      	bls.n	8005290 <xTraceStackMonitorInitialize+0x1c>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR);
 80052a8:	4b06      	ldr	r3, [pc, #24]	@ (80052c4 <xTraceStackMonitorInitialize+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2280      	movs	r2, #128	@ 0x80
 80052ae:	0252      	lsls	r2, r2, #9
 80052b0:	431a      	orrs	r2, r3
 80052b2:	4b04      	ldr	r3, [pc, #16]	@ (80052c4 <xTraceStackMonitorInitialize+0x50>)
 80052b4:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b004      	add	sp, #16
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20002278 	.word	0x20002278
 80052c4:	20003060 	.word	0x20003060

080052c8 <xTraceStackMonitorAdd>:

traceResult xTraceStackMonitorAdd(void *pvTask)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	TraceUnsignedBaseType_t uxLowMark = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60bb      	str	r3, [r7, #8]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR));

	if (pvTask == 0)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <xTraceStackMonitorAdd+0x16>
	{
		/* We don't add null addresses */
		return TRC_FAIL;
 80052da:	2301      	movs	r3, #1
 80052dc:	e041      	b.n	8005362 <xTraceStackMonitorAdd+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	617b      	str	r3, [r7, #20]
  return(result);
 80052e4:	697b      	ldr	r3, [r7, #20]
	}
	
	TRACE_ENTER_CRITICAL_SECTION();
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	2301      	movs	r3, #1
 80052ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			@ (mov r8, r8)

	if (pxStackMonitor->uxEntryCount >= (TRC_CFG_STACK_MONITOR_MAX_TASKS))
 80052f4:	4b1d      	ldr	r3, [pc, #116]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d90a      	bls.n	8005314 <xTraceStackMonitorAdd+0x4c>
	{
		xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS);
 80052fe:	2003      	movs	r0, #3
 8005300:	f7fe f986 	bl	8003610 <xTraceDiagnosticsIncrease>
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			@ (mov r8, r8)
		
		TRACE_EXIT_CRITICAL_SECTION();
		
		return TRC_FAIL;
 8005310:	2301      	movs	r3, #1
 8005312:	e026      	b.n	8005362 <xTraceStackMonitorAdd+0x9a>
	}

	if (xTraceKernelPortGetUnusedStack(pvTask, &uxLowMark) == TRC_SUCCESS)
 8005314:	2308      	movs	r3, #8
 8005316:	18fa      	adds	r2, r7, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fc03 	bl	8004b28 <xTraceKernelPortGetUnusedStack>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d116      	bne.n	8005354 <xTraceStackMonitorAdd+0x8c>
	{
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].pvTask = pvTask;
 8005326:	4b11      	ldr	r3, [pc, #68]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b10      	ldr	r3, [pc, #64]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	5099      	str	r1, [r3, r2]
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].uxPreviousLowWaterMark = uxLowMark;
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	18cb      	adds	r3, r1, r3
 8005346:	3304      	adds	r3, #4
 8005348:	601a      	str	r2, [r3, #0]

		pxStackMonitor->uxEntryCount++;
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <xTraceStackMonitorAdd+0xa4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005350:	3201      	adds	r2, #1
 8005352:	651a      	str	r2, [r3, #80]	@ 0x50
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f383 8810 	msr	PRIMASK, r3
}
 800535e:	46c0      	nop			@ (mov r8, r8)
	}
	
	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8005360:	2300      	movs	r3, #0
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b008      	add	sp, #32
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	20002278 	.word	0x20002278

08005370 <xTraceStackMonitorReport>:

	return TRC_SUCCESS;
}

traceResult xTraceStackMonitorReport(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxLowWaterMark = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	603b      	str	r3, [r7, #0]
#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_ENTER_CRITICAL_SECTION();
#endif

	/* Never report more than there are entries */
	uxToReport = TRC_CFG_STACK_MONITOR_MAX_REPORTS <= pxStackMonitor->uxEntryCount ? TRC_CFG_STACK_MONITOR_MAX_REPORTS : pxStackMonitor->uxEntryCount;
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <xTraceStackMonitorReport+0xa8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	4193      	sbcs	r3, r2
 8005384:	b2db      	uxtb	r3, r3
 8005386:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < uxToReport; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e03b      	b.n	8005406 <xTraceStackMonitorReport+0x96>
	{
		/* If uiCurrentIndex is too large, reset it */
		uiCurrentIndex = uiCurrentIndex < pxStackMonitor->uxEntryCount ? uiCurrentIndex : 0;
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <xTraceStackMonitorReport+0xa8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005394:	4b21      	ldr	r3, [pc, #132]	@ (800541c <xTraceStackMonitorReport+0xac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d902      	bls.n	80053a2 <xTraceStackMonitorReport+0x32>
 800539c:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <xTraceStackMonitorReport+0xac>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	e000      	b.n	80053a4 <xTraceStackMonitorReport+0x34>
 80053a2:	2200      	movs	r2, #0
 80053a4:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053a6:	601a      	str	r2, [r3, #0]
		
		pxStackMonitorEntry = &pxStackMonitor->xEntries[uiCurrentIndex];
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <xTraceStackMonitorReport+0xa8>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	607b      	str	r3, [r7, #4]

		if (xTraceKernelPortGetUnusedStack(pxStackMonitorEntry->pvTask, &uxLowWaterMark) != TRC_SUCCESS)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	003a      	movs	r2, r7
 80053bc:	0011      	movs	r1, r2
 80053be:	0018      	movs	r0, r3
 80053c0:	f7ff fbb2 	bl	8004b28 <xTraceKernelPortGetUnusedStack>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d005      	beq.n	80053d4 <xTraceStackMonitorReport+0x64>
		{
			uiCurrentIndex++;
 80053c8:	4b14      	ldr	r3, [pc, #80]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	4b13      	ldr	r3, [pc, #76]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053d0:	601a      	str	r2, [r3, #0]
			continue;
 80053d2:	e015      	b.n	8005400 <xTraceStackMonitorReport+0x90>
		}

		if (uxLowWaterMark < pxStackMonitorEntry->uxPreviousLowWaterMark)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d902      	bls.n	80053e4 <xTraceStackMonitorReport+0x74>
		{
			pxStackMonitorEntry->uxPreviousLowWaterMark = uxLowWaterMark;
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]
		}

		xTraceEventCreate2(PSF_EVENT_UNUSED_STACK, (TraceUnsignedBaseType_t)pxStackMonitorEntry->pvTask, pxStackMonitorEntry->uxPreviousLowWaterMark);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	001a      	movs	r2, r3
 80053f0:	20eb      	movs	r0, #235	@ 0xeb
 80053f2:	f7fe fd01 	bl	8003df8 <xTraceEventCreate2>

		uiCurrentIndex++;
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	4b07      	ldr	r3, [pc, #28]	@ (800541c <xTraceStackMonitorReport+0xac>)
 80053fe:	601a      	str	r2, [r3, #0]
	for (i = 0; i < uxToReport; i++)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d3bf      	bcc.n	800538e <xTraceStackMonitorReport+0x1e>

#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_EXIT_CRITICAL_SECTION();
#endif

	return TRC_SUCCESS;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b004      	add	sp, #16
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20002278 	.word	0x20002278
 800541c:	2000227c 	.word	0x2000227c

08005420 <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <xTraceStaticBufferInitialize+0x28>)
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <xTraceStaticBufferInitialize+0x2c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2280      	movs	r2, #128	@ 0x80
 8005434:	02d2      	lsls	r2, r2, #11
 8005436:	431a      	orrs	r2, r3
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <xTraceStaticBufferInitialize+0x2c>)
 800543a:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 800543c:	2300      	movs	r3, #0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	20002280 	.word	0x20002280
 800544c:	20003060 	.word	0x20003060

08005450 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 8005456:	4b80      	ldr	r3, [pc, #512]	@ (8005658 <xTraceInitialize+0x208>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 800545e:	2300      	movs	r3, #0
 8005460:	e0f5      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	TRC_PORT_SPECIFIC_INIT();
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 8005462:	4b7e      	ldr	r3, [pc, #504]	@ (800565c <xTraceInitialize+0x20c>)
 8005464:	4a7e      	ldr	r2, [pc, #504]	@ (8005660 <xTraceInitialize+0x210>)
 8005466:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 8005468:	4b7c      	ldr	r3, [pc, #496]	@ (800565c <xTraceInitialize+0x20c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8005470:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <xTraceInitialize+0x20c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	e009      	b.n	8005492 <xTraceInitialize+0x42>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 800547e:	4b77      	ldr	r3, [pc, #476]	@ (800565c <xTraceInitialize+0x20c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	3202      	adds	r2, #2
 8005486:	0092      	lsls	r2, r2, #2
 8005488:	2100      	movs	r1, #0
 800548a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3301      	adds	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f2      	beq.n	800547e <xTraceInitialize+0x2e>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 8005498:	4b70      	ldr	r3, [pc, #448]	@ (800565c <xTraceInitialize+0x20c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3314      	adds	r3, #20
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fe f928 	bl	80036f4 <xTraceEntryIndexTableInitialize>
 80054a4:	0003      	movs	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <xTraceInitialize+0x5e>
	{
		return TRC_FAIL;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0cf      	b.n	800564e <xTraceInitialize+0x1fe>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 80054ae:	4b6b      	ldr	r3, [pc, #428]	@ (800565c <xTraceInitialize+0x20c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	332c      	adds	r3, #44	@ 0x2c
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 f8e5 	bl	8005684 <xTraceHeaderInitialize>
 80054ba:	0003      	movs	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <xTraceInitialize+0x74>
	{
		return TRC_FAIL;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0c4      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 80054c4:	4b65      	ldr	r3, [pc, #404]	@ (800565c <xTraceInitialize+0x20c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	334c      	adds	r3, #76	@ 0x4c
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7fe f922 	bl	8003714 <xTraceEntryTableInitialize>
 80054d0:	0003      	movs	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xTraceInitialize+0x8a>
	{
		return TRC_FAIL;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0b9      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 80054da:	4b60      	ldr	r3, [pc, #384]	@ (800565c <xTraceInitialize+0x20c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	22a6      	movs	r2, #166	@ 0xa6
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4694      	mov	ip, r2
 80054e4:	4463      	add	r3, ip
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 fc3a 	bl	8005d60 <xTraceTimestampInitialize>
 80054ec:	0003      	movs	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e0ab      	b.n	800564e <xTraceInitialize+0x1fe>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 80054f6:	4b59      	ldr	r3, [pc, #356]	@ (800565c <xTraceInitialize+0x20c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	22dd      	movs	r2, #221	@ 0xdd
 80054fc:	0112      	lsls	r2, r2, #4
 80054fe:	4694      	mov	ip, r2
 8005500:	4463      	add	r3, ip
 8005502:	0018      	movs	r0, r3
 8005504:	f7fe f826 	bl	8003554 <xTraceCounterInitialize>
 8005508:	0003      	movs	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <xTraceInitialize+0xc2>
	{
		return TRC_FAIL;
 800550e:	2301      	movs	r3, #1
 8005510:	e09d      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStackMonitorInitialize(&pxTraceRecorderData->xStackMonitorBuffer) == TRC_FAIL)
 8005512:	4b52      	ldr	r3, [pc, #328]	@ (800565c <xTraceInitialize+0x20c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a53      	ldr	r2, [pc, #332]	@ (8005664 <xTraceInitialize+0x214>)
 8005518:	4694      	mov	ip, r2
 800551a:	4463      	add	r3, ip
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff fea9 	bl	8005274 <xTraceStackMonitorInitialize>
 8005522:	0003      	movs	r3, r0
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <xTraceInitialize+0xdc>
	{
		return TRC_FAIL;
 8005528:	2301      	movs	r3, #1
 800552a:	e090      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 800552c:	4b4b      	ldr	r3, [pc, #300]	@ (800565c <xTraceInitialize+0x20c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	22ad      	movs	r2, #173	@ 0xad
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	4694      	mov	ip, r2
 8005536:	4463      	add	r3, ip
 8005538:	0018      	movs	r0, r3
 800553a:	f7fd ffc7 	bl	80034cc <xTraceStreamPortInitialize>
 800553e:	0003      	movs	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <xTraceInitialize+0xf8>
	{
		return TRC_FAIL;
 8005544:	2301      	movs	r3, #1
 8005546:	e082      	b.n	800564e <xTraceInitialize+0x1fe>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 8005548:	4b44      	ldr	r3, [pc, #272]	@ (800565c <xTraceInitialize+0x20c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a46      	ldr	r2, [pc, #280]	@ (8005668 <xTraceInitialize+0x218>)
 800554e:	4694      	mov	ip, r2
 8005550:	4463      	add	r3, ip
 8005552:	0018      	movs	r0, r3
 8005554:	f7fe f81a 	bl	800358c <xTraceDiagnosticsInitialize>
 8005558:	0003      	movs	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <xTraceInitialize+0x112>
	{
		return TRC_FAIL;
 800555e:	2301      	movs	r3, #1
 8005560:	e075      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 8005562:	4b3e      	ldr	r3, [pc, #248]	@ (800565c <xTraceInitialize+0x20c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a41      	ldr	r2, [pc, #260]	@ (800566c <xTraceInitialize+0x21c>)
 8005568:	4694      	mov	ip, r2
 800556a:	4463      	add	r3, ip
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fa29 	bl	80049c4 <xTraceExtensionInitialize>
 8005572:	0003      	movs	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <xTraceInitialize+0x12c>
	{
		return TRC_FAIL;
 8005578:	2301      	movs	r3, #1
 800557a:	e068      	b.n	800564e <xTraceInitialize+0x1fe>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 800557c:	4b37      	ldr	r3, [pc, #220]	@ (800565c <xTraceInitialize+0x20c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3b      	ldr	r2, [pc, #236]	@ (8005670 <xTraceInitialize+0x220>)
 8005582:	4694      	mov	ip, r2
 8005584:	4463      	add	r3, ip
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff ff4a 	bl	8005420 <xTraceStaticBufferInitialize>
 800558c:	0003      	movs	r3, r0
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <xTraceInitialize+0x146>
	{
		return TRC_FAIL;
 8005592:	2301      	movs	r3, #1
 8005594:	e05b      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8005596:	4b31      	ldr	r3, [pc, #196]	@ (800565c <xTraceInitialize+0x20c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a36      	ldr	r2, [pc, #216]	@ (8005674 <xTraceInitialize+0x224>)
 800559c:	4694      	mov	ip, r2
 800559e:	4463      	add	r3, ip
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fb8b 	bl	8003cbc <xTraceEventInitialize>
 80055a6:	0003      	movs	r3, r0
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <xTraceInitialize+0x160>
	{
		return TRC_FAIL;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04e      	b.n	800564e <xTraceInitialize+0x1fe>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <xTraceInitialize+0x20c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a30      	ldr	r2, [pc, #192]	@ (8005678 <xTraceInitialize+0x228>)
 80055b6:	4694      	mov	ip, r2
 80055b8:	4463      	add	r3, ip
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7ff fc8c 	bl	8004ed8 <xTracePrintInitialize>
 80055c0:	0003      	movs	r3, r0
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <xTraceInitialize+0x17a>
	{
		return TRC_FAIL;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e041      	b.n	800564e <xTraceInitialize+0x1fe>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <xTraceInitialize+0x20c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a2b      	ldr	r2, [pc, #172]	@ (800567c <xTraceInitialize+0x22c>)
 80055d0:	4694      	mov	ip, r2
 80055d2:	4463      	add	r3, ip
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7fe fa29 	bl	8003a2c <xTraceErrorInitialize>
 80055da:	0003      	movs	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <xTraceInitialize+0x194>
	{
		return TRC_FAIL;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e034      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <xTraceInitialize+0x20c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	22d3      	movs	r2, #211	@ 0xd3
 80055ea:	0112      	lsls	r2, r2, #4
 80055ec:	4694      	mov	ip, r2
 80055ee:	4463      	add	r3, ip
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fa5b 	bl	8004aac <xTraceISRInitialize>
 80055f6:	0003      	movs	r3, r0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <xTraceInitialize+0x1b0>
	{
		return TRC_FAIL;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e026      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 8005600:	4b16      	ldr	r3, [pc, #88]	@ (800565c <xTraceInitialize+0x20c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	22d6      	movs	r2, #214	@ 0xd6
 8005606:	0112      	lsls	r2, r2, #4
 8005608:	4694      	mov	ip, r2
 800560a:	4463      	add	r3, ip
 800560c:	0018      	movs	r0, r3
 800560e:	f000 fb33 	bl	8005c78 <xTraceTaskInitialize>
 8005612:	0003      	movs	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <xTraceInitialize+0x1cc>
	{
		return TRC_FAIL;
 8005618:	2301      	movs	r3, #1
 800561a:	e018      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 800561c:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <xTraceInitialize+0x20c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <xTraceInitialize+0x230>)
 8005622:	4694      	mov	ip, r2
 8005624:	4463      	add	r3, ip
 8005626:	0018      	movs	r0, r3
 8005628:	f7ff fa90 	bl	8004b4c <xTraceKernelPortInitialize>
 800562c:	0003      	movs	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <xTraceInitialize+0x1e6>
	{
		return TRC_FAIL;
 8005632:	2301      	movs	r3, #1
 8005634:	e00b      	b.n	800564e <xTraceInitialize+0x1fe>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 8005636:	4b09      	ldr	r3, [pc, #36]	@ (800565c <xTraceInitialize+0x20c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	4252      	negs	r2, r2
 800563e:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8005640:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <xTraceInitialize+0x208>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2201      	movs	r2, #1
 8005646:	431a      	orrs	r2, r3
 8005648:	4b03      	ldr	r3, [pc, #12]	@ (8005658 <xTraceInitialize+0x208>)
 800564a:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b002      	add	sp, #8
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	20003060 	.word	0x20003060
 800565c:	20003058 	.word	0x20003058
 8005660:	20002284 	.word	0x20002284
 8005664:	00000d64 	.word	0x00000d64
 8005668:	00000db8 	.word	0x00000db8
 800566c:	00000dcc 	.word	0x00000dcc
 8005670:	00000ad4 	.word	0x00000ad4
 8005674:	00000d14 	.word	0x00000d14
 8005678:	00000d1c 	.word	0x00000d1c
 800567c:	00000d24 	.word	0x00000d24
 8005680:	00000d58 	.word	0x00000d58

08005684 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800568c:	4b41      	ldr	r3, [pc, #260]	@ (8005794 <xTraceHeaderInitialize+0x110>)
 800568e:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 8005696:	2301      	movs	r3, #1
 8005698:	e078      	b.n	800578c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 800569a:	2382      	movs	r3, #130	@ 0x82
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 faa4 	bl	8005bec <prvVerifySizeAlignment>
 80056a4:	0003      	movs	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <xTraceHeaderInitialize+0x2a>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e06e      	b.n	800578c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 80056ae:	2008      	movs	r0, #8
 80056b0:	f000 fa9c 	bl	8005bec <prvVerifySizeAlignment>
 80056b4:	0003      	movs	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <xTraceHeaderInitialize+0x3a>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e066      	b.n	800578c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 80056be:	2008      	movs	r0, #8
 80056c0:	f000 fa94 	bl	8005bec <prvVerifySizeAlignment>
 80056c4:	0003      	movs	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xTraceHeaderInitialize+0x4a>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e05e      	b.n	800578c <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 80056ce:	4b32      	ldr	r3, [pc, #200]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 80056d4:	4b30      	ldr	r3, [pc, #192]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	@ (800579c <xTraceHeaderInitialize+0x118>)
 80056da:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 80056dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	220e      	movs	r2, #14
 80056e2:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 80056e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2d      	ldr	r2, [pc, #180]	@ (80057a0 <xTraceHeaderInitialize+0x11c>)
 80056ea:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e013      	b.n	800571a <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	18d1      	adds	r1, r2, r3
 80056f8:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	7809      	ldrb	r1, [r1, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	3318      	adds	r3, #24
 8005704:	1c0a      	adds	r2, r1, #0
 8005706:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	18d3      	adds	r3, r2, r3
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d006      	beq.n	8005722 <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b07      	cmp	r3, #7
 800571e:	d9e8      	bls.n	80056f2 <xTraceHeaderInitialize+0x6e>
 8005720:	e000      	b.n	8005724 <xTraceHeaderInitialize+0xa0>
		{
			break;
 8005722:	46c0      	nop			@ (mov r8, r8)
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 8005724:	4b1c      	ldr	r3, [pc, #112]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2200      	movs	r2, #0
 800572a:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 800572c:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2202      	movs	r2, #2
 8005732:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 8005734:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2201      	movs	r2, #1
 800573a:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 800573c:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 8005744:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	21c0      	movs	r1, #192	@ 0xc0
 8005750:	0089      	lsls	r1, r1, #2
 8005752:	430a      	orrs	r2, r1
 8005754:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 800575e:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 8005766:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6892      	ldr	r2, [r2, #8]
 8005770:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 8005772:	f000 f8e3 	bl	800593c <prvIs64bit>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d007      	beq.n	800578a <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 800577a:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <xTraceHeaderInitialize+0x114>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2108      	movs	r1, #8
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 800578a:	2300      	movs	r3, #0
}
 800578c:	0018      	movs	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	b004      	add	sp, #16
 8005792:	bd80      	pop	{r7, pc}
 8005794:	080072e8 	.word	0x080072e8
 8005798:	2000305c 	.word	0x2000305c
 800579c:	50534600 	.word	0x50534600
 80057a0:	00001aa1 	.word	0x00001aa1

080057a4 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 80057ac:	2310      	movs	r3, #16
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	0018      	movs	r0, r3
 80057b2:	2308      	movs	r3, #8
 80057b4:	001a      	movs	r2, r3
 80057b6:	2100      	movs	r1, #0
 80057b8:	f001 fbf2 	bl	8006fa0 <memset>
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 80057bc:	f7ff fe48 	bl	8005450 <xTraceInitialize>
 80057c0:	0003      	movs	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <xTraceEnable+0x26>
	{
		return TRC_FAIL;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e056      	b.n	8005878 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7fd fe91 	bl	80034f4 <xTraceStreamPortOnEnable>
 80057d2:	0003      	movs	r3, r0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 80057d8:	2301      	movs	r3, #1
 80057da:	e04d      	b.n	8005878 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 80057dc:	f7ff f9d2 	bl	8004b84 <xTraceKernelPortEnable>
 80057e0:	0003      	movs	r3, r0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <xTraceEnable+0x46>
	{
		return TRC_FAIL;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e046      	b.n	8005878 <xTraceEnable+0xd4>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d12e      	bne.n	800584e <xTraceEnable+0xaa>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <xTraceEnable+0xdc>)
 80057f6:	2284      	movs	r2, #132	@ 0x84
 80057f8:	589a      	ldr	r2, [r3, r2]
 80057fa:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <xTraceEnable+0xdc>)
 80057fc:	2188      	movs	r1, #136	@ 0x88
 80057fe:	585b      	ldr	r3, [r3, r1]
 8005800:	429a      	cmp	r2, r3
 8005802:	d00a      	beq.n	800581a <xTraceEnable+0x76>
 8005804:	2310      	movs	r3, #16
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2208      	movs	r2, #8
 800580a:	0019      	movs	r1, r3
 800580c:	2001      	movs	r0, #1
 800580e:	f7fd fd2d 	bl	800326c <SEGGER_RTT_Read>
 8005812:	0003      	movs	r3, r0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <xTraceEnable+0x78>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <xTraceEnable+0x82>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8005820:	200b      	movs	r0, #11
 8005822:	f7fe f925 	bl	8003a70 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d10a      	bne.n	8005842 <xTraceEnable+0x9e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 800582c:	2410      	movs	r4, #16
 800582e:	193b      	adds	r3, r7, r4
 8005830:	0018      	movs	r0, r3
 8005832:	f000 f985 	bl	8005b40 <prvIsValidCommand>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d003      	beq.n	8005842 <xTraceEnable+0x9e>
				{
					prvProcessCommand(&xCommand);
 800583a:	193b      	adds	r3, r7, r4
 800583c:	0018      	movs	r0, r3
 800583e:	f000 f9be 	bl	8005bbe <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 8005842:	4b10      	ldr	r3, [pc, #64]	@ (8005884 <xTraceEnable+0xe0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0d1      	beq.n	80057f0 <xTraceEnable+0x4c>
 800584c:	e013      	b.n	8005876 <xTraceEnable+0xd2>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10b      	bne.n	800586c <xTraceEnable+0xc8>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 8005854:	2110      	movs	r1, #16
 8005856:	187b      	adds	r3, r7, r1
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
		xCommand.param1 = 1u;
 800585c:	187b      	adds	r3, r7, r1
 800585e:	2201      	movs	r2, #1
 8005860:	705a      	strb	r2, [r3, #1]
		prvProcessCommand(&xCommand);
 8005862:	187b      	adds	r3, r7, r1
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f9aa 	bl	8005bbe <prvProcessCommand>
 800586a:	e004      	b.n	8005876 <xTraceEnable+0xd2>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <xTraceEnable+0xd2>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xTraceEnable+0xd4>
	}

	return TRC_SUCCESS;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b007      	add	sp, #28
 800587e:	bd90      	pop	{r4, r7, pc}
 8005880:	20001d94 	.word	0x20001d94
 8005884:	20003058 	.word	0x20003058

08005888 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 800588c:	f000 f8b0 	bl	80059f0 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 8005890:	2300      	movs	r3, #0
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 800589e:	2308      	movs	r3, #8
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	0018      	movs	r0, r3
 80058a4:	2308      	movs	r3, #8
 80058a6:	001a      	movs	r2, r3
 80058a8:	2100      	movs	r1, #0
 80058aa:	f001 fb79 	bl	8006fa0 <memset>
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 80058b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005930 <xTraceTzCtrl+0x98>)
 80058b4:	2284      	movs	r2, #132	@ 0x84
 80058b6:	589a      	ldr	r2, [r3, r2]
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <xTraceTzCtrl+0x98>)
 80058ba:	2188      	movs	r1, #136	@ 0x88
 80058bc:	585b      	ldr	r3, [r3, r1]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d00a      	beq.n	80058d8 <xTraceTzCtrl+0x40>
 80058c2:	2308      	movs	r3, #8
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2208      	movs	r2, #8
 80058c8:	0019      	movs	r1, r3
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fd fcce 	bl	800326c <SEGGER_RTT_Read>
 80058d0:	0003      	movs	r3, r0
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <xTraceTzCtrl+0x42>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <xTraceTzCtrl+0x4e>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 80058de:	f7ff ffd3 	bl	8005888 <xTraceDisable>

			return TRC_FAIL;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e01f      	b.n	8005926 <xTraceTzCtrl+0x8e>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d10a      	bne.n	8005902 <xTraceTzCtrl+0x6a>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 80058ec:	2408      	movs	r4, #8
 80058ee:	193b      	adds	r3, r7, r4
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f925 	bl	8005b40 <prvIsValidCommand>
 80058f6:	1e03      	subs	r3, r0, #0
 80058f8:	d003      	beq.n	8005902 <xTraceTzCtrl+0x6a>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 f95e 	bl	8005bbe <prvProcessCommand>
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dcd2      	bgt.n	80058ae <xTraceTzCtrl+0x16>

	if (xTraceIsRecorderEnabled())
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <xTraceTzCtrl+0x9c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2201      	movs	r2, #1
 800590e:	4013      	ands	r3, r2
 8005910:	d008      	beq.n	8005924 <xTraceTzCtrl+0x8c>
 8005912:	4b09      	ldr	r3, [pc, #36]	@ (8005938 <xTraceTzCtrl+0xa0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <xTraceTzCtrl+0x8c>
	{
		(void)xTraceDiagnosticsCheckStatus();
 800591c:	f7fd fea8 	bl	8003670 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
 8005920:	f7ff fd26 	bl	8005370 <xTraceStackMonitorReport>
	}

	return TRC_SUCCESS;
 8005924:	2300      	movs	r3, #0
}
 8005926:	0018      	movs	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	b005      	add	sp, #20
 800592c:	bd90      	pop	{r4, r7, pc}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	20001d94 	.word	0x20001d94
 8005934:	20003060 	.word	0x20003060
 8005938:	20003058 	.word	0x20003058

0800593c <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 8005940:	2300      	movs	r3, #0
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 8005952:	2300      	movs	r3, #0
 8005954:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 8005956:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <prvSetRecorderEnabled+0x98>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d03a      	beq.n	80059d6 <prvSetRecorderEnabled+0x8e>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 8005960:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <prvSetRecorderEnabled+0x9c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 800596e:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <prvSetRecorderEnabled+0x9c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <prvSetRecorderEnabled+0xa0>)
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <prvSetRecorderEnabled+0x9c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d105      	bne.n	8005992 <prvSetRecorderEnabled+0x4a>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 8005986:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <prvSetRecorderEnabled+0xa4>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b16      	ldr	r3, [pc, #88]	@ (80059e4 <prvSetRecorderEnabled+0x9c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3201      	adds	r2, #1
 8005990:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	60bb      	str	r3, [r7, #8]
  return(result);
 8005998:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 80059a8:	f000 f846 	bl	8005a38 <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 80059ac:	f000 f852 	bl	8005a54 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 80059b0:	f000 f862 	bl	8005a78 <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 80059b4:	f000 f89a 	bl	8005aec <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 80059b8:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <prvSetRecorderEnabled+0x98>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	3201      	adds	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <prvSetRecorderEnabled+0x98>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f383 8810 	msr	PRIMASK, r3
}
 80059d4:	e000      	b.n	80059d8 <prvSetRecorderEnabled+0x90>
		return;
 80059d6:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();
}
 80059d8:	46bd      	mov	sp, r7
 80059da:	b006      	add	sp, #24
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	20003058 	.word	0x20003058
 80059e4:	20003068 	.word	0x20003068
 80059e8:	20000008 	.word	0x20000008
 80059ec:	e000e014 	.word	0xe000e014

080059f0 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 80059f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a34 <prvSetRecorderDisabled+0x44>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d014      	beq.n	8005a2a <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	603b      	str	r3, [r7, #0]
  return(result);
 8005a06:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			@ (mov r8, r8)
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <prvSetRecorderDisabled+0x44>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f383 8810 	msr	PRIMASK, r3
}
 8005a28:	e000      	b.n	8005a2c <prvSetRecorderDisabled+0x3c>
		return;
 8005a2a:	46c0      	nop			@ (mov r8, r8)

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	20003058 	.word	0x20003058

08005a38 <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t));
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <prvTraceStoreHeader+0x18>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2120      	movs	r1, #32
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fe fb58 	bl	80040f8 <xTraceEventCreateRawBlocking>
}
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	2000305c 	.word	0x2000305c

08005a54 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer,sizeof(TraceTimestampData_t));
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <prvTraceStoreTimestampInfo+0x20>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	22a6      	movs	r2, #166	@ 0xa6
 8005a5e:	0092      	lsls	r2, r2, #2
 8005a60:	4694      	mov	ip, r2
 8005a62:	4463      	add	r3, ip
 8005a64:	211c      	movs	r1, #28
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7fe fb46 	bl	80040f8 <xTraceEventCreateRawBlocking>
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	20003058 	.word	0x20003058

08005a78 <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	TraceUnsignedBaseType_t xHeaderData[3];
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 8005a82:	2314      	movs	r3, #20
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7fd ff54 	bl	8003934 <xTraceEntryGetCount>

	xHeaderData[0] = (TraceUnsignedBaseType_t)uiEntryCount;
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	2108      	movs	r1, #8
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	601a      	str	r2, [r3, #0]
	xHeaderData[1] = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	2210      	movs	r2, #16
 8005a98:	605a      	str	r2, [r3, #4]
	xHeaderData[2] = TRC_ENTRY_TABLE_STATE_COUNT;
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	609a      	str	r2, [r3, #8]

	xTraceEventCreateRawBlocking(xHeaderData, sizeof(xHeaderData));
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	210c      	movs	r1, #12
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f7fe fb27 	bl	80040f8 <xTraceEventCreateRawBlocking>

	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e014      	b.n	8005ada <prvTraceStoreEntryTable+0x62>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 8005ab0:	2318      	movs	r3, #24
 8005ab2:	18fa      	adds	r2, r7, r3
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fd ff4d 	bl	8003958 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	607b      	str	r3, [r7, #4]

		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <prvTraceStoreEntryTable+0x5c>
		{
			xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t *) xEntryHandle, sizeof(TraceEntry_t));
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2124      	movs	r1, #36	@ 0x24
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7fe fb12 	bl	80040f8 <xTraceEventCreateRawBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b0f      	cmp	r3, #15
 8005ade:	d9e7      	bls.n	8005ab0 <prvTraceStoreEntryTable+0x38>
		}
	}

}
 8005ae0:	46c0      	nop			@ (mov r8, r8)
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b008      	add	sp, #32
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e011      	b.n	8005b20 <prvTraceStoreStartEvent+0x34>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8005afc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <prvTraceStoreStartEvent+0x50>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	58d3      	ldr	r3, [r2, r3]
 8005b06:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	001a      	movs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	2110      	movs	r1, #16
 8005b12:	185b      	adds	r3, r3, r1
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	3b0c      	subs	r3, #12
 8005b18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ea      	beq.n	8005afc <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	2204      	movs	r2, #4
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f7fe fb2f 	bl	8004190 <xTraceEventCreateDataOffline0>
}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	20003064 	.word	0x20003064

08005b40 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 8005b58:	18d3      	adds	r3, r2, r3
 8005b5a:	b2da      	uxtb	r2, r3
												cmd->param3 +
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8005b60:	18d3      	adds	r3, r2, r3
 8005b62:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	b2da      	uxtb	r2, r3
												cmd->param5);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	001a      	movs	r2, r3
 8005b76:	210e      	movs	r1, #14
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	43d2      	mvns	r2, r2
 8005b7c:	801a      	strh	r2, [r3, #0]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	79da      	ldrb	r2, [r3, #7]
 8005b82:	187b      	adds	r3, r7, r1
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <prvIsValidCommand+0x54>
	{
		return 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e010      	b.n	8005bb6 <prvIsValidCommand+0x76>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	799a      	ldrb	r2, [r3, #6]
 8005b98:	230e      	movs	r3, #14
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d001      	beq.n	8005ba8 <prvIsValidCommand+0x68>
	{
		return 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e006      	b.n	8005bb6 <prvIsValidCommand+0x76>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d901      	bls.n	8005bb4 <prvIsValidCommand+0x74>
	{
		return 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <prvIsValidCommand+0x76>
	}

	return 1;
 8005bb4:	2301      	movs	r3, #1
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b004      	add	sp, #16
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d109      	bne.n	8005be2 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8005bd6:	f7ff feb7 	bl	8005948 <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8005bda:	e003      	b.n	8005be4 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8005bdc:	f7ff ff08 	bl	80059f0 <prvSetRecorderDisabled>
		  	break;
 8005be0:	e000      	b.n	8005be4 <prvProcessCommand+0x26>
		default:
		  	break;
 8005be2:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
static traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	4193      	sbcs	r3, r2
 8005bfe:	b2db      	uxtb	r3, r3
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8005c16:	230c      	movs	r3, #12
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7fd fdd4 	bl	80037c8 <xTraceEntryCreate>
 8005c20:	0003      	movs	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e022      	b.n	8005c70 <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e002      	b.n	8005c36 <xTraceStringRegister+0x2e>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	3301      	adds	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	18d3      	adds	r3, r2, r3
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <xTraceStringRegister+0x40>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	ddf3      	ble.n	8005c30 <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f7fd fe44 	bl	80038e0 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	0019      	movs	r1, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3301      	adds	r3, #1
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	2003      	movs	r0, #3
 8005c6a:	f7fe fb0f 	bl	800428c <xTraceEventCreateData1>
 8005c6e:	0003      	movs	r3, r0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b006      	add	sp, #24
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8005c80:	4b0e      	ldr	r3, [pc, #56]	@ (8005cbc <xTraceTaskInitialize+0x44>)
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e008      	b.n	8005c9e <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <xTraceTaskInitialize+0x44>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	0092      	lsls	r2, r2, #2
 8005c94:	2102      	movs	r1, #2
 8005c96:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	ddf3      	ble.n	8005c8c <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8005ca4:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <xTraceTaskInitialize+0x48>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2280      	movs	r2, #128	@ 0x80
 8005caa:	0352      	lsls	r2, r2, #13
 8005cac:	431a      	orrs	r2, r3
 8005cae:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <xTraceTaskInitialize+0x48>)
 8005cb0:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b004      	add	sp, #16
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20003064 	.word	0x20003064
 8005cc0:	20003060 	.word	0x20003060

08005cc4 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8005cd2:	4b20      	ldr	r3, [pc, #128]	@ (8005d54 <xTraceTaskSwitch+0x90>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d101      	bne.n	8005ce0 <xTraceTaskSwitch+0x1c>
	{
		return xResult;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	e035      	b.n	8005d4c <xTraceTaskSwitch+0x88>
	}

	if (!xTraceIsRecorderEnabled())
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <xTraceTaskSwitch+0x90>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <xTraceTaskSwitch+0x30>
 8005cea:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <xTraceTaskSwitch+0x94>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <xTraceTaskSwitch+0x3c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8005cf4:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <xTraceTaskSwitch+0x98>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	601a      	str	r2, [r3, #0]

		return xResult;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	e025      	b.n	8005d4c <xTraceTaskSwitch+0x88>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <xTraceTaskSwitch+0x94>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d0e:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	2301      	movs	r3, #1
 8005d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f383 8810 	msr	PRIMASK, r3
}
 8005d1c:	46c0      	nop			@ (mov r8, r8)
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d5c <xTraceTaskSwitch+0x98>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	2037      	movs	r0, #55	@ 0x37
 8005d2e:	f7fe f863 	bl	8003df8 <xTraceEventCreate2>
 8005d32:	0003      	movs	r3, r0
 8005d34:	61fb      	str	r3, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8005d36:	4b08      	ldr	r3, [pc, #32]	@ (8005d58 <xTraceTaskSwitch+0x94>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	609a      	str	r2, [r3, #8]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b008      	add	sp, #32
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20003060 	.word	0x20003060
 8005d58:	20003058 	.word	0x20003058
 8005d5c:	20003064 	.word	0x20003064

08005d60 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8005d68:	4b16      	ldr	r3, [pc, #88]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8005d6e:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8005d76:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8005d7e:	4b11      	ldr	r3, [pc, #68]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2264      	movs	r2, #100	@ 0x64
 8005d84:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8005d86:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <xTraceTimestampInitialize+0x64>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3a01      	subs	r2, #1
 8005daa:	615a      	str	r2, [r3, #20]
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <xTraceTimestampInitialize+0x68>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2280      	movs	r2, #128	@ 0x80
 8005db2:	0392      	lsls	r2, r2, #14
 8005db4:	431a      	orrs	r2, r3
 8005db6:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <xTraceTimestampInitialize+0x68>)
 8005db8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20003068 	.word	0x20003068
 8005dc8:	20003060 	.word	0x20003060

08005dcc <main>:
static void updateSubs(subscribe_message_t *subs, subscribe_message_t *new_sub);
static void print_subscription_table(subscribe_message_t *subs);

// Main function
int main()
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8005dd2:	f000 fbaf 	bl	8006534 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8005dd6:	f000 febf 	bl	8006b58 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8005dda:	f000 ff29 	bl	8006c30 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8005dde:	f000 ff75 	bl	8006ccc <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8005de2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ecc <main+0x100>)
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 fe19 	bl	8006a1c <my_printf>
	// Adjust Systick prescaler before Tracing starts
	// Not doing this produces wrong time scale in Tracealyzer
	// SysTick_Config(SystemCoreClock/1000);

	// Start Trace Recording
	xTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 8005dea:	2001      	movs	r0, #1
 8005dec:	f7ff fcda 	bl	80057a4 <xTraceEnable>

	// Create Semaphore
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8005df0:	4b37      	ldr	r3, [pc, #220]	@ (8005ed0 <main+0x104>)
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 fe12 	bl	8006a1c <my_printf>
    // Create semaphore
    xSem1 = xSemaphoreCreateBinary();
 8005df8:	2203      	movs	r2, #3
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	f7fa fb2d 	bl	800045c <xQueueGenericCreate>
 8005e02:	0002      	movs	r2, r0
 8005e04:	4b33      	ldr	r3, [pc, #204]	@ (8005ed4 <main+0x108>)
 8005e06:	601a      	str	r2, [r3, #0]
    xSem2 = xSemaphoreCreateBinary();
 8005e08:	2203      	movs	r2, #3
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f7fa fb25 	bl	800045c <xQueueGenericCreate>
 8005e12:	0002      	movs	r2, r0
 8005e14:	4b30      	ldr	r3, [pc, #192]	@ (8005ed8 <main+0x10c>)
 8005e16:	601a      	str	r2, [r3, #0]
    vTraceSetSemaphoreName(xSem1, "xSem1");
 8005e18:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed4 <main+0x108>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005edc <main+0x110>)
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7fe fef4 	bl	8004c0e <vTraceSetSemaphoreName>
    vTraceSetSemaphoreName(xSem2, "xSem2");
 8005e26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed8 <main+0x10c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee0 <main+0x114>)
 8005e2c:	0011      	movs	r1, r2
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7fe feed 	bl	8004c0e <vTraceSetSemaphoreName>

    // Initialize NVIC
    BSP_NVIC_Init();
 8005e34:	f000 ffae 	bl	8006d94 <BSP_NVIC_Init>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8005e38:	f7fd f864 	bl	8002f04 <xPortGetFreeHeapSize>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <main+0x118>)
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fde8 	bl	8006a1c <my_printf>

	// Create the subscription queue
	xSubscribeQueue = xQueueCreate(10, sizeof(subscribe_message_t)); // Holding 10 messages
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2103      	movs	r1, #3
 8005e50:	200a      	movs	r0, #10
 8005e52:	f7fa fb03 	bl	800045c <xQueueGenericCreate>
 8005e56:	0002      	movs	r2, r0
 8005e58:	4b23      	ldr	r3, [pc, #140]	@ (8005ee8 <main+0x11c>)
 8005e5a:	601a      	str	r2, [r3, #0]


	// Create Tasks
	my_printf("Creating Tasks...");
 8005e5c:	4b23      	ldr	r3, [pc, #140]	@ (8005eec <main+0x120>)
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 fddc 	bl	8006a1c <my_printf>
	xTaskCreate(vTask1,	"Task_1", 128, NULL, 1, &vTask1_handle);
 8005e64:	4922      	ldr	r1, [pc, #136]	@ (8005ef0 <main+0x124>)
 8005e66:	4823      	ldr	r0, [pc, #140]	@ (8005ef4 <main+0x128>)
 8005e68:	4b23      	ldr	r3, [pc, #140]	@ (8005ef8 <main+0x12c>)
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2300      	movs	r3, #0
 8005e72:	2280      	movs	r2, #128	@ 0x80
 8005e74:	f7fb fa2d 	bl	80012d2 <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2", 128, NULL, 2, &vTask2_handle);
 8005e78:	4920      	ldr	r1, [pc, #128]	@ (8005efc <main+0x130>)
 8005e7a:	4821      	ldr	r0, [pc, #132]	@ (8005f00 <main+0x134>)
 8005e7c:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <main+0x138>)
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	2302      	movs	r3, #2
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	2280      	movs	r2, #128	@ 0x80
 8005e88:	f7fb fa23 	bl	80012d2 <xTaskCreate>
	xTaskCreate(vTask_Pub, "vTask_Pub", 128, NULL, 1, &vTaskPub_handle);
 8005e8c:	491e      	ldr	r1, [pc, #120]	@ (8005f08 <main+0x13c>)
 8005e8e:	481f      	ldr	r0, [pc, #124]	@ (8005f0c <main+0x140>)
 8005e90:	4b1f      	ldr	r3, [pc, #124]	@ (8005f10 <main+0x144>)
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	2301      	movs	r3, #1
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2280      	movs	r2, #128	@ 0x80
 8005e9c:	f7fb fa19 	bl	80012d2 <xTaskCreate>
	my_printf("OK\r\n");
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f14 <main+0x148>)
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 fdba 	bl	8006a1c <my_printf>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8005ea8:	f7fd f82c 	bl	8002f04 <xPortGetFreeHeapSize>
 8005eac:	0003      	movs	r3, r0
 8005eae:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <main+0x118>)
 8005eb4:	0011      	movs	r1, r2
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 fdb0 	bl	8006a1c <my_printf>

	// Start the Scheduler
	my_printf("Now Starting Scheduler...\r\n");
 8005ebc:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <main+0x14c>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f000 fdac 	bl	8006a1c <my_printf>
	vTaskStartScheduler();
 8005ec4:	f7fb fc32 	bl	800172c <vTaskStartScheduler>
	while(1)
 8005ec8:	46c0      	nop			@ (mov r8, r8)
 8005eca:	e7fd      	b.n	8005ec8 <main+0xfc>
 8005ecc:	080072f4 	.word	0x080072f4
 8005ed0:	08007308 	.word	0x08007308
 8005ed4:	20003078 	.word	0x20003078
 8005ed8:	2000307c 	.word	0x2000307c
 8005edc:	08007330 	.word	0x08007330
 8005ee0:	08007338 	.word	0x08007338
 8005ee4:	08007340 	.word	0x08007340
 8005ee8:	20003080 	.word	0x20003080
 8005eec:	08007360 	.word	0x08007360
 8005ef0:	08007374 	.word	0x08007374
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	2000306c 	.word	0x2000306c
 8005efc:	0800737c 	.word	0x0800737c
 8005f00:	08006045 	.word	0x08006045
 8005f04:	20003070 	.word	0x20003070
 8005f08:	08007384 	.word	0x08007384
 8005f0c:	08006185 	.word	0x08006185
 8005f10:	20003074 	.word	0x20003074
 8005f14:	08007390 	.word	0x08007390
 8005f18:	08007398 	.word	0x08007398

08005f1c <vTask1>:
 */

/*
 * Task_1
 */
void vTask1(void *pvParameters) {
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
    typedef enum { SENSOR_INACTIVE, SENSOR_ACTIVE } sensor_state_t;
    sensor_state_t state = SENSOR_INACTIVE;
 8005f24:	230f      	movs	r3, #15
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]

    subscribe_message_t msg;

    msg.sem_id = 1;
 8005f2c:	210c      	movs	r1, #12
 8005f2e:	187b      	adds	r3, r7, r1
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
    msg.sensor_id = 1;
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	2201      	movs	r2, #1
 8005f38:	705a      	strb	r2, [r3, #1]
    msg.sensor_state = 1;
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	709a      	strb	r2, [r3, #2]

    while (1) {
        switch (state) {
 8005f40:	230f      	movs	r3, #15
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <vTask1+0x34>
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d02d      	beq.n	8005faa <vTask1+0x8e>
 8005f4e:	e063      	b.n	8006018 <vTask1+0xfc>
            case SENSOR_INACTIVE:
                xQueueSendToBack(xSubscribeQueue, &msg, 0);
 8005f50:	4b36      	ldr	r3, [pc, #216]	@ (800602c <vTask1+0x110>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	240c      	movs	r4, #12
 8005f56:	1939      	adds	r1, r7, r4
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f7fa fb5e 	bl	800061c <xQueueGenericSend>
                my_printf("Task_1: Subscribed to Sensor 1, waiting for state=1.\r\n");
 8005f60:	4b33      	ldr	r3, [pc, #204]	@ (8006030 <vTask1+0x114>)
 8005f62:	0018      	movs	r0, r3
 8005f64:	f000 fd5a 	bl	8006a1c <my_printf>

                if (xSemaphoreTake(xSem1, portMAX_DELAY) == pdTRUE) {
 8005f68:	4b32      	ldr	r3, [pc, #200]	@ (8006034 <vTask1+0x118>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4252      	negs	r2, r2
 8005f70:	0011      	movs	r1, r2
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7fa fe58 	bl	8000c28 <xQueueSemaphoreTake>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d151      	bne.n	8006022 <vTask1+0x106>
                    my_printf("Task_1: Semaphore taken, Sensor 1 active.\r\n");
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8006038 <vTask1+0x11c>)
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 fd4b 	bl	8006a1c <my_printf>

                    // Realiza um flash curto
                    BSP_LED_On();
 8005f86:	f000 fe33 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(100);
 8005f8a:	2064      	movs	r0, #100	@ 0x64
 8005f8c:	f000 ff3c 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 8005f90:	f000 fe37 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(250);
 8005f94:	20fa      	movs	r0, #250	@ 0xfa
 8005f96:	f000 ff37 	bl	8006e08 <BSP_DELAY_ms>

                    // Atualiza o estado e a assinatura
                    state = SENSOR_ACTIVE;
 8005f9a:	230f      	movs	r3, #15
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
                    msg.sensor_state = 0; // Próximo estado esperado
 8005fa2:	193b      	adds	r3, r7, r4
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	709a      	strb	r2, [r3, #2]
                }
                break;
 8005fa8:	e03b      	b.n	8006022 <vTask1+0x106>

            case SENSOR_ACTIVE:
                // Envia a assinatura para o estado inativo
                xQueueSendToBack(xSubscribeQueue, &msg, 0);
 8005faa:	4b20      	ldr	r3, [pc, #128]	@ (800602c <vTask1+0x110>)
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	240c      	movs	r4, #12
 8005fb0:	1939      	adds	r1, r7, r4
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f7fa fb31 	bl	800061c <xQueueGenericSend>
                my_printf("Task_1: Subscribed to Sensor 1, waiting for state=0.\r\n");
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <vTask1+0x120>)
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 fd2d 	bl	8006a1c <my_printf>

                // Aguarda o semáforo
                if (xSemaphoreTake(xSem1, portMAX_DELAY) == pdTRUE) {
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006034 <vTask1+0x118>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4252      	negs	r2, r2
 8005fca:	0011      	movs	r1, r2
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fa fe2b 	bl	8000c28 <xQueueSemaphoreTake>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d126      	bne.n	8006026 <vTask1+0x10a>
                    my_printf("Task_1: Semaphore taken, Sensor 1 inactive.\r\n");
 8005fd8:	4b19      	ldr	r3, [pc, #100]	@ (8006040 <vTask1+0x124>)
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 fd1e 	bl	8006a1c <my_printf>

                    // Realiza dois flashes curtos
                    BSP_LED_On();
 8005fe0:	f000 fe06 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(100);
 8005fe4:	2064      	movs	r0, #100	@ 0x64
 8005fe6:	f000 ff0f 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 8005fea:	f000 fe0a 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(250);
 8005fee:	20fa      	movs	r0, #250	@ 0xfa
 8005ff0:	f000 ff0a 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_On();
 8005ff4:	f000 fdfc 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(100);
 8005ff8:	2064      	movs	r0, #100	@ 0x64
 8005ffa:	f000 ff05 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 8005ffe:	f000 fe00 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(250);
 8006002:	20fa      	movs	r0, #250	@ 0xfa
 8006004:	f000 ff00 	bl	8006e08 <BSP_DELAY_ms>

                    // Atualiza o estado e a assinatura
                    state = SENSOR_INACTIVE;
 8006008:	230f      	movs	r3, #15
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
                    msg.sensor_state = 1; // Próximo estado esperado
 8006010:	193b      	adds	r3, r7, r4
 8006012:	2201      	movs	r2, #1
 8006014:	709a      	strb	r2, [r3, #2]
                }
                break;
 8006016:	e006      	b.n	8006026 <vTask1+0x10a>

            default:
                state = SENSOR_INACTIVE;
 8006018:	230f      	movs	r3, #15
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
                break;
 8006020:	e002      	b.n	8006028 <vTask1+0x10c>
                break;
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	e78c      	b.n	8005f40 <vTask1+0x24>
                break;
 8006026:	46c0      	nop			@ (mov r8, r8)
        switch (state) {
 8006028:	e78a      	b.n	8005f40 <vTask1+0x24>
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	20003080 	.word	0x20003080
 8006030:	080073b4 	.word	0x080073b4
 8006034:	20003078 	.word	0x20003078
 8006038:	080073ec 	.word	0x080073ec
 800603c:	08007418 	.word	0x08007418
 8006040:	08007450 	.word	0x08007450

08006044 <vTask2>:
}

/*
 * Task_2
 */
void vTask2(void *pvParameters) {
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    typedef enum { SENSOR_INACTIVE, SENSOR_ACTIVE } sensor_state_t;
    sensor_state_t state = SENSOR_INACTIVE;
 800604c:	230f      	movs	r3, #15
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]

    subscribe_message_t msg;

    msg.sem_id = 2;
 8006054:	210c      	movs	r1, #12
 8006056:	187b      	adds	r3, r7, r1
 8006058:	2202      	movs	r2, #2
 800605a:	701a      	strb	r2, [r3, #0]
    msg.sensor_id = 2;
 800605c:	187b      	adds	r3, r7, r1
 800605e:	2202      	movs	r2, #2
 8006060:	705a      	strb	r2, [r3, #1]
    msg.sensor_state = 1;
 8006062:	187b      	adds	r3, r7, r1
 8006064:	2201      	movs	r2, #1
 8006066:	709a      	strb	r2, [r3, #2]

    while (1) {
        switch (state) {
 8006068:	230f      	movs	r3, #15
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <vTask2+0x34>
 8006072:	2b01      	cmp	r3, #1
 8006074:	d031      	beq.n	80060da <vTask2+0x96>
 8006076:	e06f      	b.n	8006158 <vTask2+0x114>
            case SENSOR_INACTIVE:
                // Envia a assinatura para o estado ativo
                my_printf("Task_2: Subscribed to Sensor 2, waiting for state=1.\r\n");
 8006078:	4b3c      	ldr	r3, [pc, #240]	@ (800616c <vTask2+0x128>)
 800607a:	0018      	movs	r0, r3
 800607c:	f000 fcce 	bl	8006a1c <my_printf>
                xQueueSendToBack(xSubscribeQueue, &msg, 0);
 8006080:	4b3b      	ldr	r3, [pc, #236]	@ (8006170 <vTask2+0x12c>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	240c      	movs	r4, #12
 8006086:	1939      	adds	r1, r7, r4
 8006088:	2300      	movs	r3, #0
 800608a:	2200      	movs	r2, #0
 800608c:	f7fa fac6 	bl	800061c <xQueueGenericSend>

                // Aguarda o semáforo para o estado ativo
                if (xSemaphoreTake(xSem2, portMAX_DELAY) == pdTRUE) {
 8006090:	4b38      	ldr	r3, [pc, #224]	@ (8006174 <vTask2+0x130>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	4252      	negs	r2, r2
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f7fa fdc4 	bl	8000c28 <xQueueSemaphoreTake>
 80060a0:	0003      	movs	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d15d      	bne.n	8006162 <vTask2+0x11e>
                    my_printf("Task_2: Semaphore taken, Sensor 2 active.\r\n");
 80060a6:	4b34      	ldr	r3, [pc, #208]	@ (8006178 <vTask2+0x134>)
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fcb7 	bl	8006a1c <my_printf>

                    // Realiza um flash longo
                    BSP_LED_On();
 80060ae:	f000 fd9f 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(500);
 80060b2:	23fa      	movs	r3, #250	@ 0xfa
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 fea6 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 80060bc:	f000 fda1 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(500);
 80060c0:	23fa      	movs	r3, #250	@ 0xfa
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 fe9f 	bl	8006e08 <BSP_DELAY_ms>

                    // Atualiza o estado e a assinatura para o próximo ciclo
                    state = SENSOR_ACTIVE;
 80060ca:	230f      	movs	r3, #15
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
                    msg.sensor_state = 0; // Próximo estado esperado
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	2200      	movs	r2, #0
 80060d6:	709a      	strb	r2, [r3, #2]
                }
                break;
 80060d8:	e043      	b.n	8006162 <vTask2+0x11e>

            case SENSOR_ACTIVE:
                // Envia a assinatura para o estado inativo
                my_printf("Task_2: Subscribed to Sensor 2, waiting for state=0.\r\n");
 80060da:	4b28      	ldr	r3, [pc, #160]	@ (800617c <vTask2+0x138>)
 80060dc:	0018      	movs	r0, r3
 80060de:	f000 fc9d 	bl	8006a1c <my_printf>
                xQueueSendToBack(xSubscribeQueue, &msg, 0);
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <vTask2+0x12c>)
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	240c      	movs	r4, #12
 80060e8:	1939      	adds	r1, r7, r4
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	f7fa fa95 	bl	800061c <xQueueGenericSend>

                // Aguarda o semáforo para o estado inativo
                if (xSemaphoreTake(xSem2, portMAX_DELAY) == pdTRUE) {
 80060f2:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <vTask2+0x130>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4252      	negs	r2, r2
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fa fd93 	bl	8000c28 <xQueueSemaphoreTake>
 8006102:	0003      	movs	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d12e      	bne.n	8006166 <vTask2+0x122>
                    my_printf("Task_2: Semaphore taken, Sensor 2 inactive.\r\n");
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <vTask2+0x13c>)
 800610a:	0018      	movs	r0, r3
 800610c:	f000 fc86 	bl	8006a1c <my_printf>

                    // Realiza dois flashes longos
                    BSP_LED_On();
 8006110:	f000 fd6e 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(500);
 8006114:	23fa      	movs	r3, #250	@ 0xfa
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	0018      	movs	r0, r3
 800611a:	f000 fe75 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 800611e:	f000 fd70 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(500);
 8006122:	23fa      	movs	r3, #250	@ 0xfa
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	0018      	movs	r0, r3
 8006128:	f000 fe6e 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_On();
 800612c:	f000 fd60 	bl	8006bf0 <BSP_LED_On>
                    BSP_DELAY_ms(500);
 8006130:	23fa      	movs	r3, #250	@ 0xfa
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	0018      	movs	r0, r3
 8006136:	f000 fe67 	bl	8006e08 <BSP_DELAY_ms>
                    BSP_LED_Off();
 800613a:	f000 fd62 	bl	8006c02 <BSP_LED_Off>
                    BSP_DELAY_ms(500);
 800613e:	23fa      	movs	r3, #250	@ 0xfa
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	0018      	movs	r0, r3
 8006144:	f000 fe60 	bl	8006e08 <BSP_DELAY_ms>

                    // Atualiza o estado e a assinatura para o próximo ciclo
                    state = SENSOR_INACTIVE;
 8006148:	230f      	movs	r3, #15
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
                    msg.sensor_state = 1; // Próximo estado esperado
 8006150:	193b      	adds	r3, r7, r4
 8006152:	2201      	movs	r2, #1
 8006154:	709a      	strb	r2, [r3, #2]
                }
                break;
 8006156:	e006      	b.n	8006166 <vTask2+0x122>

            default:
                state = SENSOR_INACTIVE;
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
                break;
 8006160:	e002      	b.n	8006168 <vTask2+0x124>
                break;
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	e780      	b.n	8006068 <vTask2+0x24>
                break;
 8006166:	46c0      	nop			@ (mov r8, r8)
        switch (state) {
 8006168:	e77e      	b.n	8006068 <vTask2+0x24>
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	08007480 	.word	0x08007480
 8006170:	20003080 	.word	0x20003080
 8006174:	2000307c 	.word	0x2000307c
 8006178:	080074b8 	.word	0x080074b8
 800617c:	080074e4 	.word	0x080074e4
 8006180:	0800751c 	.word	0x0800751c

08006184 <vTask_Pub>:
}

/*
 * Task_Pub
 */
void vTask_Pub(void *pvParameters) {
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b08b      	sub	sp, #44	@ 0x2c
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 200 / portTICK_PERIOD_MS;
 800618c:	2314      	movs	r3, #20
 800618e:	623b      	str	r3, [r7, #32]

    xLastWakeTime = xTaskGetTickCount();
 8006190:	f7fb fc22 	bl	80019d8 <xTaskGetTickCount>
 8006194:	0003      	movs	r3, r0
 8006196:	61bb      	str	r3, [r7, #24]

    subscribe_message_t subscription_table[MAX_SUBSCRIBERS] = {0};
 8006198:	230c      	movs	r3, #12
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	0018      	movs	r0, r3
 800619e:	230c      	movs	r3, #12
 80061a0:	001a      	movs	r2, r3
 80061a2:	2100      	movs	r1, #0
 80061a4:	f000 fefc 	bl	8006fa0 <memset>
    subscribe_message_t msg;
    char rx_byte;

    while (1) {
        // Process subscription queue
        if (xQueueReceive(xSubscribeQueue, &msg, 0)) {
 80061a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006398 <vTask_Pub+0x214>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2408      	movs	r4, #8
 80061ae:	1939      	adds	r1, r7, r4
 80061b0:	2200      	movs	r2, #0
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fa fbbc 	bl	8000930 <xQueueReceive>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d013      	beq.n	80061e4 <vTask_Pub+0x60>
            BSP_LED_Toggle(); // Toggle LED when a subscription is received
 80061bc:	f000 fd2b 	bl	8006c16 <BSP_LED_Toggle>
            my_printf("Subscribing : SemID=%d SensID=%d State=%d\r\n", msg.sem_id, msg.sensor_id, msg.sensor_state);
 80061c0:	193b      	adds	r3, r7, r4
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	0019      	movs	r1, r3
 80061c6:	193b      	adds	r3, r7, r4
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	001a      	movs	r2, r3
 80061cc:	193b      	adds	r3, r7, r4
 80061ce:	789b      	ldrb	r3, [r3, #2]
 80061d0:	4872      	ldr	r0, [pc, #456]	@ (800639c <vTask_Pub+0x218>)
 80061d2:	f000 fc23 	bl	8006a1c <my_printf>
            updateSubs(subscription_table, &msg);
 80061d6:	193a      	adds	r2, r7, r4
 80061d8:	230c      	movs	r3, #12
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	0011      	movs	r1, r2
 80061de:	0018      	movs	r0, r3
 80061e0:	f000 f8f0 	bl	80063c4 <updateSubs>
        }

        // Print the subscription table for debugging
        print_subscription_table(subscription_table);
 80061e4:	230c      	movs	r3, #12
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f953 	bl	8006494 <print_subscription_table>

        // Poll UART RX register for sensor state updates
        if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE) {
 80061ee:	4b6c      	ldr	r3, [pc, #432]	@ (80063a0 <vTask_Pub+0x21c>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	2220      	movs	r2, #32
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d13a      	bne.n	8006270 <vTask_Pub+0xec>
            rx_byte = USART2->RDR;
 80061fa:	4b69      	ldr	r3, [pc, #420]	@ (80063a0 <vTask_Pub+0x21c>)
 80061fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80061fe:	b29a      	uxth	r2, r3
 8006200:	241f      	movs	r4, #31
 8006202:	193b      	adds	r3, r7, r4
 8006204:	701a      	strb	r2, [r3, #0]
            my_printf("You've hit the '%c' key\r\n", rx_byte);
 8006206:	193b      	adds	r3, r7, r4
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	4b66      	ldr	r3, [pc, #408]	@ (80063a4 <vTask_Pub+0x220>)
 800620c:	0011      	movs	r1, r2
 800620e:	0018      	movs	r0, r3
 8006210:	f000 fc04 	bl	8006a1c <my_printf>

            // Update sensor states based on key input
            switch (rx_byte) {
 8006214:	193b      	adds	r3, r7, r4
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b64      	cmp	r3, #100	@ 0x64
 800621a:	d01a      	beq.n	8006252 <vTask_Pub+0xce>
 800621c:	dc1f      	bgt.n	800625e <vTask_Pub+0xda>
 800621e:	2b63      	cmp	r3, #99	@ 0x63
 8006220:	d011      	beq.n	8006246 <vTask_Pub+0xc2>
 8006222:	dc1c      	bgt.n	800625e <vTask_Pub+0xda>
 8006224:	2b61      	cmp	r3, #97	@ 0x61
 8006226:	d002      	beq.n	800622e <vTask_Pub+0xaa>
 8006228:	2b62      	cmp	r3, #98	@ 0x62
 800622a:	d006      	beq.n	800623a <vTask_Pub+0xb6>
 800622c:	e017      	b.n	800625e <vTask_Pub+0xda>
                case 'a': sensor_states[0] = 0; BSP_LED_Toggle(); break; // Toggle LED on input
 800622e:	4b5e      	ldr	r3, [pc, #376]	@ (80063a8 <vTask_Pub+0x224>)
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	f000 fcef 	bl	8006c16 <BSP_LED_Toggle>
 8006238:	e01a      	b.n	8006270 <vTask_Pub+0xec>
                case 'b': sensor_states[0] = 1; BSP_LED_Toggle(); break;
 800623a:	4b5b      	ldr	r3, [pc, #364]	@ (80063a8 <vTask_Pub+0x224>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	f000 fce9 	bl	8006c16 <BSP_LED_Toggle>
 8006244:	e014      	b.n	8006270 <vTask_Pub+0xec>
                case 'c': sensor_states[1] = 0; BSP_LED_Toggle(); break;
 8006246:	4b58      	ldr	r3, [pc, #352]	@ (80063a8 <vTask_Pub+0x224>)
 8006248:	2200      	movs	r2, #0
 800624a:	705a      	strb	r2, [r3, #1]
 800624c:	f000 fce3 	bl	8006c16 <BSP_LED_Toggle>
 8006250:	e00e      	b.n	8006270 <vTask_Pub+0xec>
                case 'd': sensor_states[1] = 1; BSP_LED_Toggle(); break;
 8006252:	4b55      	ldr	r3, [pc, #340]	@ (80063a8 <vTask_Pub+0x224>)
 8006254:	2201      	movs	r2, #1
 8006256:	705a      	strb	r2, [r3, #1]
 8006258:	f000 fcdd 	bl	8006c16 <BSP_LED_Toggle>
 800625c:	e008      	b.n	8006270 <vTask_Pub+0xec>
                default: my_printf("Unknown command: '%c'\r\n", rx_byte); break;
 800625e:	231f      	movs	r3, #31
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	4b51      	ldr	r3, [pc, #324]	@ (80063ac <vTask_Pub+0x228>)
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f000 fbd7 	bl	8006a1c <my_printf>
 800626e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        // Display the current sensor states
        my_printf("Sensors state = [ %d %d ]\r\n", sensor_states[0], sensor_states[1]);
 8006270:	4b4d      	ldr	r3, [pc, #308]	@ (80063a8 <vTask_Pub+0x224>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	0019      	movs	r1, r3
 8006276:	4b4c      	ldr	r3, [pc, #304]	@ (80063a8 <vTask_Pub+0x224>)
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	001a      	movs	r2, r3
 800627c:	4b4c      	ldr	r3, [pc, #304]	@ (80063b0 <vTask_Pub+0x22c>)
 800627e:	0018      	movs	r0, r3
 8006280:	f000 fbcc 	bl	8006a1c <my_printf>

        // Check the subscription table and fulfill requests
        for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 8006284:	2300      	movs	r3, #0
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
 8006288:	e07a      	b.n	8006380 <vTask_Pub+0x1fc>
            if (subscription_table[i].sem_id != 0) {
 800628a:	240c      	movs	r4, #12
 800628c:	1939      	adds	r1, r7, r4
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	0013      	movs	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	189b      	adds	r3, r3, r2
 8006296:	5c5b      	ldrb	r3, [r3, r1]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d06e      	beq.n	800637a <vTask_Pub+0x1f6>
                uint8_t sensor_id = subscription_table[i].sensor_id;
 800629c:	251e      	movs	r5, #30
 800629e:	1979      	adds	r1, r7, r5
 80062a0:	1938      	adds	r0, r7, r4
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	0013      	movs	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	18c3      	adds	r3, r0, r3
 80062ac:	3301      	adds	r3, #1
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	700b      	strb	r3, [r1, #0]
                uint8_t expected_state = subscription_table[i].sensor_state;
 80062b2:	261d      	movs	r6, #29
 80062b4:	19b9      	adds	r1, r7, r6
 80062b6:	1938      	adds	r0, r7, r4
 80062b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ba:	0013      	movs	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	18c3      	adds	r3, r0, r3
 80062c2:	3302      	adds	r3, #2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	700b      	strb	r3, [r1, #0]

                if (sensor_states[sensor_id - 1] == expected_state) {
 80062c8:	197b      	adds	r3, r7, r5
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	4a36      	ldr	r2, [pc, #216]	@ (80063a8 <vTask_Pub+0x224>)
 80062d0:	5cd3      	ldrb	r3, [r2, r3]
 80062d2:	19ba      	adds	r2, r7, r6
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d14f      	bne.n	800637a <vTask_Pub+0x1f6>
                    my_printf("Publishing: SemID=%d, SensID=%d, State=%d\r\n",
                              subscription_table[i].sem_id, sensor_id, expected_state);
 80062da:	1939      	adds	r1, r7, r4
 80062dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062de:	0013      	movs	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	5c5b      	ldrb	r3, [r3, r1]
                    my_printf("Publishing: SemID=%d, SensID=%d, State=%d\r\n",
 80062e6:	0019      	movs	r1, r3
 80062e8:	197b      	adds	r3, r7, r5
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	19bb      	adds	r3, r7, r6
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	4830      	ldr	r0, [pc, #192]	@ (80063b4 <vTask_Pub+0x230>)
 80062f2:	f000 fb93 	bl	8006a1c <my_printf>

                    if (subscription_table[i].sem_id == 1) {
 80062f6:	1939      	adds	r1, r7, r4
 80062f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fa:	0013      	movs	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	5c5b      	ldrb	r3, [r3, r1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <vTask_Pub+0x192>
                        xSemaphoreGive(xSem1);
 8006306:	4b2c      	ldr	r3, [pc, #176]	@ (80063b8 <vTask_Pub+0x234>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	f7fa f984 	bl	800061c <xQueueGenericSend>
 8006314:	e00f      	b.n	8006336 <vTask_Pub+0x1b2>
                    } else if (subscription_table[i].sem_id == 2) {
 8006316:	230c      	movs	r3, #12
 8006318:	18f9      	adds	r1, r7, r3
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	0013      	movs	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	189b      	adds	r3, r3, r2
 8006322:	5c5b      	ldrb	r3, [r3, r1]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d106      	bne.n	8006336 <vTask_Pub+0x1b2>
                        xSemaphoreGive(xSem2);
 8006328:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <vTask_Pub+0x238>)
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	f7fa f973 	bl	800061c <xQueueGenericSend>
                    }

                    BSP_LED_Toggle(); // Toggle LED when fulfilling a subscription
 8006336:	f000 fc6e 	bl	8006c16 <BSP_LED_Toggle>

                    my_printf("Deleting subscription in slot [%d]\r\n", i);
 800633a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633c:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <vTask_Pub+0x23c>)
 800633e:	0011      	movs	r1, r2
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fb6b 	bl	8006a1c <my_printf>
                    subscription_table[i].sem_id = 0;
 8006346:	200c      	movs	r0, #12
 8006348:	1839      	adds	r1, r7, r0
 800634a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634c:	0013      	movs	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	189b      	adds	r3, r3, r2
 8006352:	2200      	movs	r2, #0
 8006354:	545a      	strb	r2, [r3, r1]
                    subscription_table[i].sensor_id = 0;
 8006356:	1839      	adds	r1, r7, r0
 8006358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635a:	0013      	movs	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	189b      	adds	r3, r3, r2
 8006360:	18cb      	adds	r3, r1, r3
 8006362:	3301      	adds	r3, #1
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
                    subscription_table[i].sensor_state = 0;
 8006368:	1839      	adds	r1, r7, r0
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	0013      	movs	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	189b      	adds	r3, r3, r2
 8006372:	18cb      	adds	r3, r1, r3
 8006374:	3302      	adds	r3, #2
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	3301      	adds	r3, #1
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	2b03      	cmp	r3, #3
 8006384:	dd81      	ble.n	800628a <vTask_Pub+0x106>
                }
            }
        }

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	2318      	movs	r3, #24
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f7fb f924 	bl	80015dc <xTaskDelayUntil>
        if (xQueueReceive(xSubscribeQueue, &msg, 0)) {
 8006394:	e708      	b.n	80061a8 <vTask_Pub+0x24>
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	20003080 	.word	0x20003080
 800639c:	0800754c 	.word	0x0800754c
 80063a0:	40004400 	.word	0x40004400
 80063a4:	08007578 	.word	0x08007578
 80063a8:	20003084 	.word	0x20003084
 80063ac:	08007594 	.word	0x08007594
 80063b0:	080075ac 	.word	0x080075ac
 80063b4:	080075c8 	.word	0x080075c8
 80063b8:	20003078 	.word	0x20003078
 80063bc:	2000307c 	.word	0x2000307c
 80063c0:	080075f4 	.word	0x080075f4

080063c4 <updateSubs>:
}

/*
 * Update the subscription table
 */
static void updateSubs(subscribe_message_t *subs, subscribe_message_t *new_sub) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
    int i;

    // Check for duplicates
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e028      	b.n	8006426 <updateSubs+0x62>
        if (subs[i].sem_id == new_sub->sem_id &&
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	0013      	movs	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d11a      	bne.n	8006420 <updateSubs+0x5c>
            subs[i].sensor_id == new_sub->sensor_id &&
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	0013      	movs	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	18d3      	adds	r3, r2, r3
 80063f6:	785a      	ldrb	r2, [r3, #1]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	785b      	ldrb	r3, [r3, #1]
        if (subs[i].sem_id == new_sub->sem_id &&
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10f      	bne.n	8006420 <updateSubs+0x5c>
            subs[i].sensor_state == new_sub->sensor_state) {
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	0013      	movs	r3, r2
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	189b      	adds	r3, r3, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	18d3      	adds	r3, r2, r3
 800640c:	789a      	ldrb	r2, [r3, #2]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	789b      	ldrb	r3, [r3, #2]
            subs[i].sensor_id == new_sub->sensor_id &&
 8006412:	429a      	cmp	r2, r3
 8006414:	d104      	bne.n	8006420 <updateSubs+0x5c>
            my_printf("Subscription already exists\r\n");
 8006416:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <updateSubs+0xc4>)
 8006418:	0018      	movs	r0, r3
 800641a:	f000 faff 	bl	8006a1c <my_printf>
            return;
 800641e:	e02f      	b.n	8006480 <updateSubs+0xbc>
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b03      	cmp	r3, #3
 800642a:	ddd3      	ble.n	80063d4 <updateSubs+0x10>
        }
    }

    // Add the new subscription to the first available slot
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e01f      	b.n	8006472 <updateSubs+0xae>
        if (subs[i].sem_id == 0) {
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	0013      	movs	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	189b      	adds	r3, r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	18d3      	adds	r3, r2, r3
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d113      	bne.n	800646c <updateSubs+0xa8>
            subs[i] = *new_sub;
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	0013      	movs	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	189b      	adds	r3, r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	18d2      	adds	r2, r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	0010      	movs	r0, r2
 8006454:	0019      	movs	r1, r3
 8006456:	2303      	movs	r3, #3
 8006458:	001a      	movs	r2, r3
 800645a:	f000 fdcd 	bl	8006ff8 <memcpy>
            my_printf("Adding subscription in slot [%d]\r\n", i);
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <updateSubs+0xc8>)
 8006462:	0011      	movs	r1, r2
 8006464:	0018      	movs	r0, r3
 8006466:	f000 fad9 	bl	8006a1c <my_printf>
            return;
 800646a:	e009      	b.n	8006480 <updateSubs+0xbc>
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b03      	cmp	r3, #3
 8006476:	dddc      	ble.n	8006432 <updateSubs+0x6e>
        }
    }

    // If the table is full
    my_printf("No available slots for new subscription\r\n");
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <updateSubs+0xcc>)
 800647a:	0018      	movs	r0, r3
 800647c:	f000 face 	bl	8006a1c <my_printf>
}
 8006480:	46bd      	mov	sp, r7
 8006482:	b004      	add	sp, #16
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	0800761c 	.word	0x0800761c
 800648c:	0800763c 	.word	0x0800763c
 8006490:	08007660 	.word	0x08007660

08006494 <print_subscription_table>:


/*
 * Display the subscription table
 */
static void print_subscription_table(subscribe_message_t *subs) {
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e020      	b.n	80064e4 <print_subscription_table+0x50>
        my_printf("[%d] %d %d %d\r\n", i, subs[i].sem_id, subs[i].sensor_id, subs[i].sensor_state);
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	0013      	movs	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	189b      	adds	r3, r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	18d3      	adds	r3, r2, r3
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	001c      	movs	r4, r3
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	0013      	movs	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	189b      	adds	r3, r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	001d      	movs	r5, r3
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	0013      	movs	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	18d3      	adds	r3, r2, r3
 80064ce:	789b      	ldrb	r3, [r3, #2]
 80064d0:	68f9      	ldr	r1, [r7, #12]
 80064d2:	4808      	ldr	r0, [pc, #32]	@ (80064f4 <print_subscription_table+0x60>)
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	002b      	movs	r3, r5
 80064d8:	0022      	movs	r2, r4
 80064da:	f000 fa9f 	bl	8006a1c <my_printf>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	dddb      	ble.n	80064a2 <print_subscription_table+0xe>
    }
}
 80064ea:	46c0      	nop			@ (mov r8, r8)
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bdb0      	pop	{r4, r5, r7, pc}
 80064f4:	0800768c 	.word	0x0800768c

080064f8 <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 8006502:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 8006504:	4b08      	ldr	r3, [pc, #32]	@ (8006528 <vAssertCalled+0x30>)
 8006506:	0018      	movs	r0, r3
 8006508:	f000 fa88 	bl	8006a1c <my_printf>
	my_printf("File %s\r\n", file);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <vAssertCalled+0x34>)
 8006510:	0011      	movs	r1, r2
 8006512:	0018      	movs	r0, r3
 8006514:	f000 fa82 	bl	8006a1c <my_printf>
	my_printf("Line %d\r\n", line);
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <vAssertCalled+0x38>)
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f000 fa7c 	bl	8006a1c <my_printf>

	while(1);
 8006524:	46c0      	nop			@ (mov r8, r8)
 8006526:	e7fd      	b.n	8006524 <vAssertCalled+0x2c>
 8006528:	0800769c 	.word	0x0800769c
 800652c:	080076b0 	.word	0x080076b0
 8006530:	080076bc 	.word	0x080076bc

08006534 <SystemClock_Config>:
{
	while(1);
}

static void SystemClock_Config()
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 800653e:	4b44      	ldr	r3, [pc, #272]	@ (8006650 <SystemClock_Config+0x11c>)
 8006540:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8006542:	4b44      	ldr	r3, [pc, #272]	@ (8006654 <SystemClock_Config+0x120>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b43      	ldr	r3, [pc, #268]	@ (8006654 <SystemClock_Config+0x120>)
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	02c9      	lsls	r1, r1, #11
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8006550:	4b40      	ldr	r3, [pc, #256]	@ (8006654 <SystemClock_Config+0x120>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b3f      	ldr	r3, [pc, #252]	@ (8006654 <SystemClock_Config+0x120>)
 8006556:	2180      	movs	r1, #128	@ 0x80
 8006558:	0249      	lsls	r1, r1, #9
 800655a:	430a      	orrs	r2, r1
 800655c:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 800655e:	4b3d      	ldr	r3, [pc, #244]	@ (8006654 <SystemClock_Config+0x120>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	2380      	movs	r3, #128	@ 0x80
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	4013      	ands	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]
		timeout--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b01      	subs	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <SystemClock_Config+0x48>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 800657c:	4b35      	ldr	r3, [pc, #212]	@ (8006654 <SystemClock_Config+0x120>)
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b34      	ldr	r3, [pc, #208]	@ (8006654 <SystemClock_Config+0x120>)
 8006582:	4935      	ldr	r1, [pc, #212]	@ (8006658 <SystemClock_Config+0x124>)
 8006584:	400a      	ands	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8006588:	4b32      	ldr	r3, [pc, #200]	@ (8006654 <SystemClock_Config+0x120>)
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <SystemClock_Config+0x120>)
 800658e:	2180      	movs	r1, #128	@ 0x80
 8006590:	0249      	lsls	r1, r1, #9
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8006596:	4b2f      	ldr	r3, [pc, #188]	@ (8006654 <SystemClock_Config+0x120>)
 8006598:	2200      	movs	r2, #0
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 800659c:	4b2d      	ldr	r3, [pc, #180]	@ (8006654 <SystemClock_Config+0x120>)
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006654 <SystemClock_Config+0x120>)
 80065a2:	492e      	ldr	r1, [pc, #184]	@ (800665c <SystemClock_Config+0x128>)
 80065a4:	400a      	ands	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80065a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006654 <SystemClock_Config+0x120>)
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <SystemClock_Config+0x120>)
 80065ae:	2180      	movs	r1, #128	@ 0x80
 80065b0:	0349      	lsls	r1, r1, #13
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 80065b6:	4b27      	ldr	r3, [pc, #156]	@ (8006654 <SystemClock_Config+0x120>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b26      	ldr	r3, [pc, #152]	@ (8006654 <SystemClock_Config+0x120>)
 80065bc:	2180      	movs	r1, #128	@ 0x80
 80065be:	0449      	lsls	r1, r1, #17
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80065c4:	4b23      	ldr	r3, [pc, #140]	@ (8006654 <SystemClock_Config+0x120>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	049b      	lsls	r3, r3, #18
 80065cc:	4013      	ands	r3, r2
 80065ce:	607b      	str	r3, [r7, #4]
		timeout--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <SystemClock_Config+0xae>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 80065e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <SystemClock_Config+0x120>)
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006654 <SystemClock_Config+0x120>)
 80065e8:	21f0      	movs	r1, #240	@ 0xf0
 80065ea:	438a      	bics	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80065ee:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <SystemClock_Config+0x120>)
 80065f0:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <SystemClock_Config+0x120>)
 80065f2:	6852      	ldr	r2, [r2, #4]
 80065f4:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 80065f6:	4b17      	ldr	r3, [pc, #92]	@ (8006654 <SystemClock_Config+0x120>)
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4b16      	ldr	r3, [pc, #88]	@ (8006654 <SystemClock_Config+0x120>)
 80065fc:	4918      	ldr	r1, [pc, #96]	@ (8006660 <SystemClock_Config+0x12c>)
 80065fe:	400a      	ands	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8006602:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <SystemClock_Config+0x120>)
 8006604:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <SystemClock_Config+0x120>)
 8006606:	6852      	ldr	r2, [r2, #4]
 8006608:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800660a:	4b16      	ldr	r3, [pc, #88]	@ (8006664 <SystemClock_Config+0x130>)
 800660c:	2211      	movs	r2, #17
 800660e:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <SystemClock_Config+0x120>)
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <SystemClock_Config+0x120>)
 8006616:	2103      	movs	r1, #3
 8006618:	438a      	bics	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800661c:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <SystemClock_Config+0x120>)
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <SystemClock_Config+0x120>)
 8006622:	2102      	movs	r1, #2
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8006628:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <SystemClock_Config+0x120>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	220c      	movs	r2, #12
 800662e:	4013      	ands	r3, r2
 8006630:	603b      	str	r3, [r7, #0]
		timeout--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b01      	subs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b08      	cmp	r3, #8
 800663c:	d002      	beq.n	8006644 <SystemClock_Config+0x110>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f1      	bne.n	8006628 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8006644:	f000 fc26 	bl	8006e94 <SystemCoreClockUpdate>
}
 8006648:	46c0      	nop			@ (mov r8, r8)
 800664a:	46bd      	mov	sp, r7
 800664c:	b004      	add	sp, #16
 800664e:	bd80      	pop	{r7, pc}
 8006650:	000f4240 	.word	0x000f4240
 8006654:	40021000 	.word	0x40021000
 8006658:	fffe7fff 	.word	0xfffe7fff
 800665c:	ffc3ffff 	.word	0xffc3ffff
 8006660:	fffff8ff 	.word	0xfffff8ff
 8006664:	40022000 	.word	0x40022000

08006668 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	if (str) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <printchar+0x26>
		**str = c;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
		++(*str);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 800668c:	e00a      	b.n	80066a4 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <printchar+0x44>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	4013      	ands	r3, r2
 8006698:	2b40      	cmp	r3, #64	@ 0x40
 800669a:	d1f9      	bne.n	8006690 <printchar+0x28>
		USART2->TDR = c;
 800669c:	4b03      	ldr	r3, [pc, #12]	@ (80066ac <printchar+0x44>)
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	b292      	uxth	r2, r2
 80066a2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80066a4:	46c0      	nop			@ (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40004400 	.word	0x40004400

080066b0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80066b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b2:	46c6      	mov	lr, r8
 80066b4:	b500      	push	{lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80066c2:	2400      	movs	r4, #0
 80066c4:	2320      	movs	r3, #32
 80066c6:	4698      	mov	r8, r3

	if (width > 0) {
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dd16      	ble.n	80066fc <prints+0x4c>
		register int len = 0;
 80066ce:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80066d0:	68be      	ldr	r6, [r7, #8]
 80066d2:	e001      	b.n	80066d8 <prints+0x28>
 80066d4:	3501      	adds	r5, #1
 80066d6:	3601      	adds	r6, #1
 80066d8:	7833      	ldrb	r3, [r6, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1fa      	bne.n	80066d4 <prints+0x24>
		if (len >= width) width = 0;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	429d      	cmp	r5, r3
 80066e2:	db02      	blt.n	80066ea <prints+0x3a>
 80066e4:	2300      	movs	r3, #0
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e002      	b.n	80066f0 <prints+0x40>
		else width -= len;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	1b5b      	subs	r3, r3, r5
 80066ee:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2202      	movs	r2, #2
 80066f4:	4013      	ands	r3, r2
 80066f6:	d001      	beq.n	80066fc <prints+0x4c>
 80066f8:	2330      	movs	r3, #48	@ 0x30
 80066fa:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	4013      	ands	r3, r2
 8006702:	d119      	bne.n	8006738 <prints+0x88>
		for ( ; width > 0; --width) {
 8006704:	e008      	b.n	8006718 <prints+0x68>
			printchar (out, padchar);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4641      	mov	r1, r8
 800670a:	0018      	movs	r0, r3
 800670c:	f7ff ffac 	bl	8006668 <printchar>
			++pc;
 8006710:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3b01      	subs	r3, #1
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dcf3      	bgt.n	8006706 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 800671e:	e00b      	b.n	8006738 <prints+0x88>
		printchar (out, *string);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	001a      	movs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	0011      	movs	r1, r2
 800672a:	0018      	movs	r0, r3
 800672c:	f7ff ff9c 	bl	8006668 <printchar>
		++pc;
 8006730:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3301      	adds	r3, #1
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1ef      	bne.n	8006720 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8006740:	e008      	b.n	8006754 <prints+0xa4>
		printchar (out, padchar);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4641      	mov	r1, r8
 8006746:	0018      	movs	r0, r3
 8006748:	f7ff ff8e 	bl	8006668 <printchar>
		++pc;
 800674c:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3b01      	subs	r3, #1
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	dcf3      	bgt.n	8006742 <prints+0x92>
	}

	return pc;
 800675a:	0023      	movs	r3, r4
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bc80      	pop	{r7}
 8006764:	46b8      	mov	r8, r7
 8006766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006768 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	46ce      	mov	lr, r9
 800676c:	4647      	mov	r7, r8
 800676e:	b580      	push	{r7, lr}
 8006770:	b089      	sub	sp, #36	@ 0x24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	4699      	mov	r9, r3
 8006780:	2600      	movs	r6, #0
	register unsigned int u = i;
 8006782:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <printi+0x40>
		print_buf[0] = '0';
 800678a:	2114      	movs	r1, #20
 800678c:	187b      	adds	r3, r7, r1
 800678e:	2230      	movs	r2, #48	@ 0x30
 8006790:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8006792:	187b      	adds	r3, r7, r1
 8006794:	2200      	movs	r2, #0
 8006796:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800679c:	1879      	adds	r1, r7, r1
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff ff86 	bl	80066b0 <prints>
 80067a4:	0003      	movs	r3, r0
 80067a6:	e04e      	b.n	8006846 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <printi+0x5c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b0a      	cmp	r3, #10
 80067b2:	d107      	bne.n	80067c4 <printi+0x5c>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da04      	bge.n	80067c4 <printi+0x5c>
		neg = 1;
 80067ba:	2301      	movs	r3, #1
 80067bc:	4699      	mov	r9, r3
		u = -i;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	425b      	negs	r3, r3
 80067c2:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80067c4:	2314      	movs	r3, #20
 80067c6:	18fc      	adds	r4, r7, r3
 80067c8:	340b      	adds	r4, #11
	*s = '\0';
 80067ca:	2300      	movs	r3, #0
 80067cc:	7023      	strb	r3, [r4, #0]

	while (u) {
 80067ce:	e019      	b.n	8006804 <printi+0x9c>
		t = u % b;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0019      	movs	r1, r3
 80067d4:	0028      	movs	r0, r5
 80067d6:	f7f9 fd1d 	bl	8000214 <__aeabi_uidivmod>
 80067da:	000b      	movs	r3, r1
 80067dc:	4698      	mov	r8, r3
		if( t >= 10 )
 80067de:	4643      	mov	r3, r8
 80067e0:	2b09      	cmp	r3, #9
 80067e2:	dd02      	ble.n	80067ea <printi+0x82>
			t += letbase - '0' - 10;
 80067e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e6:	3b3a      	subs	r3, #58	@ 0x3a
 80067e8:	4498      	add	r8, r3
		*--s = t + '0';
 80067ea:	4643      	mov	r3, r8
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	3c01      	subs	r4, #1
 80067f0:	3330      	adds	r3, #48	@ 0x30
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	7023      	strb	r3, [r4, #0]
		u /= b;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0019      	movs	r1, r3
 80067fa:	0028      	movs	r0, r5
 80067fc:	f7f9 fc84 	bl	8000108 <__udivsi3>
 8006800:	0003      	movs	r3, r0
 8006802:	001d      	movs	r5, r3
	while (u) {
 8006804:	2d00      	cmp	r5, #0
 8006806:	d1e3      	bne.n	80067d0 <printi+0x68>
	}

	if (neg) {
 8006808:	464b      	mov	r3, r9
 800680a:	2b00      	cmp	r3, #0
 800680c:	d013      	beq.n	8006836 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800680e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <printi+0xc8>
 8006814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006816:	2202      	movs	r2, #2
 8006818:	4013      	ands	r3, r2
 800681a:	d009      	beq.n	8006830 <printi+0xc8>
			printchar (out, '-');
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	212d      	movs	r1, #45	@ 0x2d
 8006820:	0018      	movs	r0, r3
 8006822:	f7ff ff21 	bl	8006668 <printchar>
			++pc;
 8006826:	3601      	adds	r6, #1
			--width;
 8006828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800682a:	3b01      	subs	r3, #1
 800682c:	643b      	str	r3, [r7, #64]	@ 0x40
 800682e:	e002      	b.n	8006836 <printi+0xce>
		}
		else {
			*--s = '-';
 8006830:	3c01      	subs	r4, #1
 8006832:	232d      	movs	r3, #45	@ 0x2d
 8006834:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8006836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	0021      	movs	r1, r4
 800683e:	f7ff ff37 	bl	80066b0 <prints>
 8006842:	0003      	movs	r3, r0
 8006844:	18f3      	adds	r3, r6, r3
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b009      	add	sp, #36	@ 0x24
 800684c:	bcc0      	pop	{r6, r7}
 800684e:	46b9      	mov	r9, r7
 8006850:	46b0      	mov	r8, r6
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006854 <print>:

static int print(char **out, const char *format, va_list args )
{
 8006854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006856:	b08b      	sub	sp, #44	@ 0x2c
 8006858:	af04      	add	r7, sp, #16
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8006860:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8006862:	e0c6      	b.n	80069f2 <print+0x19e>
		if (*format == '%') {
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b25      	cmp	r3, #37	@ 0x25
 800686a:	d000      	beq.n	800686e <print+0x1a>
 800686c:	e0b2      	b.n	80069d4 <print+0x180>
			++format;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3301      	adds	r3, #1
 8006872:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8006874:	2600      	movs	r6, #0
 8006876:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d100      	bne.n	8006882 <print+0x2e>
 8006880:	e0bd      	b.n	80069fe <print+0x1aa>
			if (*format == '%') goto out;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b25      	cmp	r3, #37	@ 0x25
 8006888:	d100      	bne.n	800688c <print+0x38>
 800688a:	e0a5      	b.n	80069d8 <print+0x184>
			if (*format == '-') {
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b2d      	cmp	r3, #45	@ 0x2d
 8006892:	d10a      	bne.n	80068aa <print+0x56>
				++format;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3301      	adds	r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800689a:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 800689c:	e005      	b.n	80068aa <print+0x56>
				++format;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80068a4:	2302      	movs	r3, #2
 80068a6:	4333      	orrs	r3, r6
 80068a8:	001e      	movs	r6, r3
			while (*format == '0') {
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b30      	cmp	r3, #48	@ 0x30
 80068b0:	d0f5      	beq.n	800689e <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80068b2:	e00b      	b.n	80068cc <print+0x78>
				width *= 10;
 80068b4:	002b      	movs	r3, r5
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	195b      	adds	r3, r3, r5
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	001d      	movs	r5, r3
				width += *format - '0';
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	3b30      	subs	r3, #48	@ 0x30
 80068c4:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80068d2:	d903      	bls.n	80068dc <print+0x88>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b39      	cmp	r3, #57	@ 0x39
 80068da:	d9eb      	bls.n	80068b4 <print+0x60>
			}
			if( *format == 's' ) {
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b73      	cmp	r3, #115	@ 0x73
 80068e2:	d10f      	bne.n	8006904 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 80068ee:	d000      	beq.n	80068f2 <print+0x9e>
 80068f0:	e000      	b.n	80068f4 <print+0xa0>
 80068f2:	4949      	ldr	r1, [pc, #292]	@ (8006a18 <print+0x1c4>)
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	0033      	movs	r3, r6
 80068f8:	002a      	movs	r2, r5
 80068fa:	f7ff fed9 	bl	80066b0 <prints>
 80068fe:	0003      	movs	r3, r0
 8006900:	18e4      	adds	r4, r4, r3
				continue;
 8006902:	e073      	b.n	80069ec <print+0x198>
			}
			if( *format == 'd' ) {
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b64      	cmp	r3, #100	@ 0x64
 800690a:	d10f      	bne.n	800692c <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1d1a      	adds	r2, r3, #4
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	2361      	movs	r3, #97	@ 0x61
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	9601      	str	r6, [sp, #4]
 800691c:	9500      	str	r5, [sp, #0]
 800691e:	2301      	movs	r3, #1
 8006920:	220a      	movs	r2, #10
 8006922:	f7ff ff21 	bl	8006768 <printi>
 8006926:	0003      	movs	r3, r0
 8006928:	18e4      	adds	r4, r4, r3
				continue;
 800692a:	e05f      	b.n	80069ec <print+0x198>
			}
			if( *format == 'x' ) {
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b78      	cmp	r3, #120	@ 0x78
 8006932:	d10f      	bne.n	8006954 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	2361      	movs	r3, #97	@ 0x61
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	9601      	str	r6, [sp, #4]
 8006944:	9500      	str	r5, [sp, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	2210      	movs	r2, #16
 800694a:	f7ff ff0d 	bl	8006768 <printi>
 800694e:	0003      	movs	r3, r0
 8006950:	18e4      	adds	r4, r4, r3
				continue;
 8006952:	e04b      	b.n	80069ec <print+0x198>
			}
			if( *format == 'X' ) {
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b58      	cmp	r3, #88	@ 0x58
 800695a:	d10f      	bne.n	800697c <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	2341      	movs	r3, #65	@ 0x41
 8006968:	9302      	str	r3, [sp, #8]
 800696a:	9601      	str	r6, [sp, #4]
 800696c:	9500      	str	r5, [sp, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	2210      	movs	r2, #16
 8006972:	f7ff fef9 	bl	8006768 <printi>
 8006976:	0003      	movs	r3, r0
 8006978:	18e4      	adds	r4, r4, r3
				continue;
 800697a:	e037      	b.n	80069ec <print+0x198>
			}
			if( *format == 'u' ) {
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b75      	cmp	r3, #117	@ 0x75
 8006982:	d10f      	bne.n	80069a4 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1d1a      	adds	r2, r3, #4
 8006988:	607a      	str	r2, [r7, #4]
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	2361      	movs	r3, #97	@ 0x61
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	9601      	str	r6, [sp, #4]
 8006994:	9500      	str	r5, [sp, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	220a      	movs	r2, #10
 800699a:	f7ff fee5 	bl	8006768 <printi>
 800699e:	0003      	movs	r3, r0
 80069a0:	18e4      	adds	r4, r4, r3
				continue;
 80069a2:	e023      	b.n	80069ec <print+0x198>
			}
			if( *format == 'c' ) {
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b63      	cmp	r3, #99	@ 0x63
 80069aa:	d11f      	bne.n	80069ec <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	2114      	movs	r1, #20
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80069bc:	187b      	adds	r3, r7, r1
 80069be:	2200      	movs	r2, #0
 80069c0:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80069c2:	1879      	adds	r1, r7, r1
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	0033      	movs	r3, r6
 80069c8:	002a      	movs	r2, r5
 80069ca:	f7ff fe71 	bl	80066b0 <prints>
 80069ce:	0003      	movs	r3, r0
 80069d0:	18e4      	adds	r4, r4, r3
				continue;
 80069d2:	e00b      	b.n	80069ec <print+0x198>
			}
		}
		else {
		out:
 80069d4:	46c0      	nop			@ (mov r8, r8)
 80069d6:	e000      	b.n	80069da <print+0x186>
			if (*format == '%') goto out;
 80069d8:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	001a      	movs	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	0011      	movs	r1, r2
 80069e4:	0018      	movs	r0, r3
 80069e6:	f7ff fe3f 	bl	8006668 <printchar>
			++pc;
 80069ea:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d000      	beq.n	80069fc <print+0x1a8>
 80069fa:	e733      	b.n	8006864 <print+0x10>
 80069fc:	e000      	b.n	8006a00 <print+0x1ac>
			if (*format == '\0') break;
 80069fe:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <print+0x1ba>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8006a0e:	0023      	movs	r3, r4
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b007      	add	sp, #28
 8006a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a18:	080076c8 	.word	0x080076c8

08006a1c <my_printf>:

int my_printf(const char *format, ...)
{
 8006a1c:	b40f      	push	{r0, r1, r2, r3}
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8006a24:	2314      	movs	r3, #20
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	0019      	movs	r1, r3
 8006a30:	2000      	movs	r0, #0
 8006a32:	f7ff ff0f 	bl	8006854 <print>
 8006a36:	0003      	movs	r3, r0
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b002      	add	sp, #8
 8006a3e:	bc80      	pop	{r7}
 8006a40:	bc08      	pop	{r3}
 8006a42:	b004      	add	sp, #16
 8006a44:	4718      	bx	r3
	...

08006a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	0002      	movs	r2, r0
 8006a50:	1dfb      	adds	r3, r7, #7
 8006a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a5a:	d809      	bhi.n	8006a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a5c:	1dfb      	adds	r3, r7, #7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	001a      	movs	r2, r3
 8006a62:	231f      	movs	r3, #31
 8006a64:	401a      	ands	r2, r3
 8006a66:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <__NVIC_EnableIRQ+0x30>)
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4091      	lsls	r1, r2
 8006a6c:	000a      	movs	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
  }
}
 8006a70:	46c0      	nop			@ (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b002      	add	sp, #8
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	e000e100 	.word	0xe000e100

08006a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	0002      	movs	r2, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	1dfb      	adds	r3, r7, #7
 8006a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a8a:	1dfb      	adds	r3, r7, #7
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a90:	d828      	bhi.n	8006ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a92:	4a2f      	ldr	r2, [pc, #188]	@ (8006b50 <__NVIC_SetPriority+0xd4>)
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b25b      	sxtb	r3, r3
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	33c0      	adds	r3, #192	@ 0xc0
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	589b      	ldr	r3, [r3, r2]
 8006aa2:	1dfa      	adds	r2, r7, #7
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	0011      	movs	r1, r2
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	400a      	ands	r2, r1
 8006aac:	00d2      	lsls	r2, r2, #3
 8006aae:	21ff      	movs	r1, #255	@ 0xff
 8006ab0:	4091      	lsls	r1, r2
 8006ab2:	000a      	movs	r2, r1
 8006ab4:	43d2      	mvns	r2, r2
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	22ff      	movs	r2, #255	@ 0xff
 8006ac0:	401a      	ands	r2, r3
 8006ac2:	1dfb      	adds	r3, r7, #7
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	2303      	movs	r3, #3
 8006aca:	4003      	ands	r3, r0
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ad0:	481f      	ldr	r0, [pc, #124]	@ (8006b50 <__NVIC_SetPriority+0xd4>)
 8006ad2:	1dfb      	adds	r3, r7, #7
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b25b      	sxtb	r3, r3
 8006ad8:	089b      	lsrs	r3, r3, #2
 8006ada:	430a      	orrs	r2, r1
 8006adc:	33c0      	adds	r3, #192	@ 0xc0
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006ae2:	e031      	b.n	8006b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <__NVIC_SetPriority+0xd8>)
 8006ae6:	1dfb      	adds	r3, r7, #7
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	0019      	movs	r1, r3
 8006aec:	230f      	movs	r3, #15
 8006aee:	400b      	ands	r3, r1
 8006af0:	3b08      	subs	r3, #8
 8006af2:	089b      	lsrs	r3, r3, #2
 8006af4:	3306      	adds	r3, #6
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	18d3      	adds	r3, r2, r3
 8006afa:	3304      	adds	r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1dfa      	adds	r2, r7, #7
 8006b00:	7812      	ldrb	r2, [r2, #0]
 8006b02:	0011      	movs	r1, r2
 8006b04:	2203      	movs	r2, #3
 8006b06:	400a      	ands	r2, r1
 8006b08:	00d2      	lsls	r2, r2, #3
 8006b0a:	21ff      	movs	r1, #255	@ 0xff
 8006b0c:	4091      	lsls	r1, r2
 8006b0e:	000a      	movs	r2, r1
 8006b10:	43d2      	mvns	r2, r2
 8006b12:	401a      	ands	r2, r3
 8006b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	22ff      	movs	r2, #255	@ 0xff
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	1dfb      	adds	r3, r7, #7
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	0018      	movs	r0, r3
 8006b24:	2303      	movs	r3, #3
 8006b26:	4003      	ands	r3, r0
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b2c:	4809      	ldr	r0, [pc, #36]	@ (8006b54 <__NVIC_SetPriority+0xd8>)
 8006b2e:	1dfb      	adds	r3, r7, #7
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	001c      	movs	r4, r3
 8006b34:	230f      	movs	r3, #15
 8006b36:	4023      	ands	r3, r4
 8006b38:	3b08      	subs	r3, #8
 8006b3a:	089b      	lsrs	r3, r3, #2
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	3306      	adds	r3, #6
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	18c3      	adds	r3, r0, r3
 8006b44:	3304      	adds	r3, #4
 8006b46:	601a      	str	r2, [r3, #0]
}
 8006b48:	46c0      	nop			@ (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b003      	add	sp, #12
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	e000e100 	.word	0xe000e100
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006b5c:	4b22      	ldr	r3, [pc, #136]	@ (8006be8 <BSP_LED_Init+0x90>)
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	4b21      	ldr	r3, [pc, #132]	@ (8006be8 <BSP_LED_Init+0x90>)
 8006b62:	2180      	movs	r1, #128	@ 0x80
 8006b64:	0289      	lsls	r1, r1, #10
 8006b66:	430a      	orrs	r2, r1
 8006b68:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8006b6a:	2390      	movs	r3, #144	@ 0x90
 8006b6c:	05db      	lsls	r3, r3, #23
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	2390      	movs	r3, #144	@ 0x90
 8006b72:	05db      	lsls	r3, r3, #23
 8006b74:	491d      	ldr	r1, [pc, #116]	@ (8006bec <BSP_LED_Init+0x94>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8006b7a:	2390      	movs	r3, #144	@ 0x90
 8006b7c:	05db      	lsls	r3, r3, #23
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	2390      	movs	r3, #144	@ 0x90
 8006b82:	05db      	lsls	r3, r3, #23
 8006b84:	2180      	movs	r1, #128	@ 0x80
 8006b86:	00c9      	lsls	r1, r1, #3
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8006b8c:	2390      	movs	r3, #144	@ 0x90
 8006b8e:	05db      	lsls	r3, r3, #23
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	2390      	movs	r3, #144	@ 0x90
 8006b94:	05db      	lsls	r3, r3, #23
 8006b96:	2120      	movs	r1, #32
 8006b98:	438a      	bics	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8006b9c:	2390      	movs	r3, #144	@ 0x90
 8006b9e:	05db      	lsls	r3, r3, #23
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	2390      	movs	r3, #144	@ 0x90
 8006ba4:	05db      	lsls	r3, r3, #23
 8006ba6:	4911      	ldr	r1, [pc, #68]	@ (8006bec <BSP_LED_Init+0x94>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8006bac:	2390      	movs	r3, #144	@ 0x90
 8006bae:	05db      	lsls	r3, r3, #23
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	2390      	movs	r3, #144	@ 0x90
 8006bb4:	05db      	lsls	r3, r3, #23
 8006bb6:	21c0      	movs	r1, #192	@ 0xc0
 8006bb8:	0109      	lsls	r1, r1, #4
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8006bbe:	2390      	movs	r3, #144	@ 0x90
 8006bc0:	05db      	lsls	r3, r3, #23
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	2390      	movs	r3, #144	@ 0x90
 8006bc6:	05db      	lsls	r3, r3, #23
 8006bc8:	4908      	ldr	r1, [pc, #32]	@ (8006bec <BSP_LED_Init+0x94>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8006bce:	2390      	movs	r3, #144	@ 0x90
 8006bd0:	05db      	lsls	r3, r3, #23
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	2390      	movs	r3, #144	@ 0x90
 8006bd6:	05db      	lsls	r3, r3, #23
 8006bd8:	2180      	movs	r1, #128	@ 0x80
 8006bda:	0389      	lsls	r1, r1, #14
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	619a      	str	r2, [r3, #24]
}
 8006be0:	46c0      	nop			@ (mov r8, r8)
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	46c0      	nop			@ (mov r8, r8)
 8006be8:	40021000 	.word	0x40021000
 8006bec:	fffff3ff 	.word	0xfffff3ff

08006bf0 <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PA5
 */

void BSP_LED_On()
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS_5;
 8006bf4:	2390      	movs	r3, #144	@ 0x90
 8006bf6:	05db      	lsls	r3, r3, #23
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	619a      	str	r2, [r3, #24]
}
 8006bfc:	46c0      	nop			@ (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PA5
 */

void BSP_LED_Off()
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR_5;
 8006c06:	2390      	movs	r3, #144	@ 0x90
 8006c08:	05db      	lsls	r3, r3, #23
 8006c0a:	2280      	movs	r2, #128	@ 0x80
 8006c0c:	0392      	lsls	r2, r2, #14
 8006c0e:	619a      	str	r2, [r3, #24]
}
 8006c10:	46c0      	nop			@ (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8006c1a:	2390      	movs	r3, #144	@ 0x90
 8006c1c:	05db      	lsls	r3, r3, #23
 8006c1e:	695a      	ldr	r2, [r3, #20]
 8006c20:	2390      	movs	r3, #144	@ 0x90
 8006c22:	05db      	lsls	r3, r3, #23
 8006c24:	2120      	movs	r1, #32
 8006c26:	404a      	eors	r2, r1
 8006c28:	615a      	str	r2, [r3, #20]
}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8006c34:	4b1f      	ldr	r3, [pc, #124]	@ (8006cb4 <BSP_PB_Init+0x84>)
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb4 <BSP_PB_Init+0x84>)
 8006c3a:	2180      	movs	r1, #128	@ 0x80
 8006c3c:	0309      	lsls	r1, r1, #12
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8006c42:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c48:	491c      	ldr	r1, [pc, #112]	@ (8006cbc <BSP_PB_Init+0x8c>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c50:	4b19      	ldr	r3, [pc, #100]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8006c56:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <BSP_PB_Init+0x88>)
 8006c5c:	4917      	ldr	r1, [pc, #92]	@ (8006cbc <BSP_PB_Init+0x8c>)
 8006c5e:	400a      	ands	r2, r1
 8006c60:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <BSP_PB_Init+0x84>)
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	4b13      	ldr	r3, [pc, #76]	@ (8006cb4 <BSP_PB_Init+0x84>)
 8006c68:	2101      	movs	r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 8006c6e:	4b14      	ldr	r3, [pc, #80]	@ (8006cc0 <BSP_PB_Init+0x90>)
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	4b13      	ldr	r3, [pc, #76]	@ (8006cc0 <BSP_PB_Init+0x90>)
 8006c74:	21f0      	movs	r1, #240	@ 0xf0
 8006c76:	438a      	bics	r2, r1
 8006c78:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <BSP_PB_Init+0x90>)
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <BSP_PB_Init+0x90>)
 8006c80:	2120      	movs	r1, #32
 8006c82:	430a      	orrs	r2, r1
 8006c84:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006c8c:	2180      	movs	r1, #128	@ 0x80
 8006c8e:	0189      	lsls	r1, r1, #6
 8006c90:	430a      	orrs	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 8006c94:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006c9a:	490b      	ldr	r1, [pc, #44]	@ (8006cc8 <BSP_PB_Init+0x98>)
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8006ca0:	4b08      	ldr	r3, [pc, #32]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <BSP_PB_Init+0x94>)
 8006ca6:	2180      	movs	r1, #128	@ 0x80
 8006ca8:	0189      	lsls	r1, r1, #6
 8006caa:	430a      	orrs	r2, r1
 8006cac:	60da      	str	r2, [r3, #12]
}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	48000800 	.word	0x48000800
 8006cbc:	f3ffffff 	.word	0xf3ffffff
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	ffffdfff 	.word	0xffffdfff

08006ccc <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006cd6:	2180      	movs	r1, #128	@ 0x80
 8006cd8:	0289      	lsls	r1, r1, #10
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006cde:	2390      	movs	r3, #144	@ 0x90
 8006ce0:	05db      	lsls	r3, r3, #23
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	2390      	movs	r3, #144	@ 0x90
 8006ce6:	05db      	lsls	r3, r3, #23
 8006ce8:	21f0      	movs	r1, #240	@ 0xf0
 8006cea:	438a      	bics	r2, r1
 8006cec:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006cee:	2390      	movs	r3, #144	@ 0x90
 8006cf0:	05db      	lsls	r3, r3, #23
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	2390      	movs	r3, #144	@ 0x90
 8006cf6:	05db      	lsls	r3, r3, #23
 8006cf8:	21a0      	movs	r1, #160	@ 0xa0
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006cfe:	2390      	movs	r3, #144	@ 0x90
 8006d00:	05db      	lsls	r3, r3, #23
 8006d02:	6a1a      	ldr	r2, [r3, #32]
 8006d04:	2390      	movs	r3, #144	@ 0x90
 8006d06:	05db      	lsls	r3, r3, #23
 8006d08:	491e      	ldr	r1, [pc, #120]	@ (8006d84 <BSP_Console_Init+0xb8>)
 8006d0a:	400a      	ands	r2, r1
 8006d0c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006d0e:	2390      	movs	r3, #144	@ 0x90
 8006d10:	05db      	lsls	r3, r3, #23
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	2390      	movs	r3, #144	@ 0x90
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	2188      	movs	r1, #136	@ 0x88
 8006d1a:	0149      	lsls	r1, r1, #5
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006d20:	4b17      	ldr	r3, [pc, #92]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	4b16      	ldr	r3, [pc, #88]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006d26:	2180      	movs	r1, #128	@ 0x80
 8006d28:	0289      	lsls	r1, r1, #10
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006d34:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8006d3a:	4b13      	ldr	r3, [pc, #76]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8006d40:	4b0f      	ldr	r3, [pc, #60]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d44:	4b0e      	ldr	r3, [pc, #56]	@ (8006d80 <BSP_Console_Init+0xb4>)
 8006d46:	4911      	ldr	r1, [pc, #68]	@ (8006d8c <BSP_Console_Init+0xc0>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)

	USART2->CR1 |= USART_CR1_OVER8;
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d52:	2180      	movs	r1, #128	@ 0x80
 8006d54:	0209      	lsls	r1, r1, #8
 8006d56:	430a      	orrs	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d90 <BSP_Console_Init+0xc4>)
 8006d5e:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8006d60:	4b09      	ldr	r3, [pc, #36]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d66:	210c      	movs	r1, #12
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b05      	ldr	r3, [pc, #20]	@ (8006d88 <BSP_Console_Init+0xbc>)
 8006d72:	2101      	movs	r1, #1
 8006d74:	430a      	orrs	r2, r1
 8006d76:	601a      	str	r2, [r3, #0]
}
 8006d78:	46c0      	nop			@ (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	46c0      	nop			@ (mov r8, r8)
 8006d80:	40021000 	.word	0x40021000
 8006d84:	ffff00ff 	.word	0xffff00ff
 8006d88:	40004400 	.word	0x40004400
 8006d8c:	fffcffff 	.word	0xfffcffff
 8006d90:	00000341 	.word	0x00000341

08006d94 <BSP_NVIC_Init>:
/*
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */
void BSP_NVIC_Init()
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
    // Configura linha 13 (botao 1)
    SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13_Msk; // Configura a porta do EXTI13
 8006d98:	4b18      	ldr	r3, [pc, #96]	@ (8006dfc <BSP_NVIC_Init+0x68>)
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <BSP_NVIC_Init+0x68>)
 8006d9e:	21f0      	movs	r1, #240	@ 0xf0
 8006da0:	438a      	bics	r2, r1
 8006da2:	615a      	str	r2, [r3, #20]
    EXTI->IMR |= EXTI_IMR_MR13;                     // Habilita a interrupcao para a linha 13
 8006da4:	4b16      	ldr	r3, [pc, #88]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	0189      	lsls	r1, r1, #6
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]
    EXTI->RTSR |= EXTI_RTSR_TR13;                   // Habilita trigger na borda de subida
 8006db2:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006db8:	2180      	movs	r1, #128	@ 0x80
 8006dba:	0189      	lsls	r1, r1, #6
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]

    // Configura linha 14 (botao 2)
    SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI14_Msk; // Configura a porta do EXTI14
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <BSP_NVIC_Init+0x68>)
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <BSP_NVIC_Init+0x68>)
 8006dc6:	490f      	ldr	r1, [pc, #60]	@ (8006e04 <BSP_NVIC_Init+0x70>)
 8006dc8:	400a      	ands	r2, r1
 8006dca:	615a      	str	r2, [r3, #20]
    EXTI->IMR |= EXTI_IMR_MR14;                     // Habilita a interrupcao para a linha 14
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	01c9      	lsls	r1, r1, #7
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
    EXTI->RTSR |= EXTI_RTSR_TR14;                   // Habilita trigger na borda de subida
 8006dda:	4b09      	ldr	r3, [pc, #36]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	4b08      	ldr	r3, [pc, #32]	@ (8006e00 <BSP_NVIC_Init+0x6c>)
 8006de0:	2180      	movs	r1, #128	@ 0x80
 8006de2:	01c9      	lsls	r1, r1, #7
 8006de4:	430a      	orrs	r2, r1
 8006de6:	609a      	str	r2, [r3, #8]


	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn,
 8006de8:	2106      	movs	r1, #6
 8006dea:	2007      	movs	r0, #7
 8006dec:	f7ff fe46 	bl	8006a7c <__NVIC_SetPriority>
			configMAX_API_CALL_INTERRUPT_PRIORITY + 1);

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006df0:	2007      	movs	r0, #7
 8006df2:	f7ff fe29 	bl	8006a48 <__NVIC_EnableIRQ>
}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400
 8006e04:	fffff0ff 	.word	0xfffff0ff

08006e08 <BSP_DELAY_ms>:

/*
 *  Basic delay functions
 */
void BSP_DELAY_ms(uint32_t delay)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*2500); i++);		// Tuned for ms at 48MHz
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <BSP_DELAY_ms+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a05      	ldr	r2, [pc, #20]	@ (8006e34 <BSP_DELAY_ms+0x2c>)
 8006e20:	4353      	muls	r3, r2
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3f6      	bcc.n	8006e16 <BSP_DELAY_ms+0xe>
}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b004      	add	sp, #16
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	46c0      	nop			@ (mov r8, r8)
 8006e34:	000009c4 	.word	0x000009c4

08006e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e38:	480d      	ldr	r0, [pc, #52]	@ (8006e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e3c:	f000 f825 	bl	8006e8a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e40:	480c      	ldr	r0, [pc, #48]	@ (8006e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e42:	490d      	ldr	r1, [pc, #52]	@ (8006e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e44:	4a0d      	ldr	r2, [pc, #52]	@ (8006e7c <LoopForever+0xe>)
  movs r3, #0
 8006e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e48:	e002      	b.n	8006e50 <LoopCopyDataInit>

08006e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e4e:	3304      	adds	r3, #4

08006e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e54:	d3f9      	bcc.n	8006e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e56:	4a0a      	ldr	r2, [pc, #40]	@ (8006e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e58:	4c0a      	ldr	r4, [pc, #40]	@ (8006e84 <LoopForever+0x16>)
  movs r3, #0
 8006e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e5c:	e001      	b.n	8006e62 <LoopFillZerobss>

08006e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e60:	3204      	adds	r2, #4

08006e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e64:	d3fb      	bcc.n	8006e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006e66:	f000 f8a3 	bl	8006fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e6a:	f7fe ffaf 	bl	8005dcc <main>

08006e6e <LoopForever>:

LoopForever:
    b LoopForever
 8006e6e:	e7fe      	b.n	8006e6e <LoopForever>
  ldr   r0, =_estack
 8006e70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006e7c:	08007778 	.word	0x08007778
  ldr r2, =_sbss
 8006e80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006e84:	20003088 	.word	0x20003088

08006e88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e88:	e7fe      	b.n	8006e88 <ADC1_COMP_IRQHandler>

08006e8a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006eaa:	4b38      	ldr	r3, [pc, #224]	@ (8006f8c <SystemCoreClockUpdate+0xf8>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	220c      	movs	r2, #12
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d011      	beq.n	8006ede <SystemCoreClockUpdate+0x4a>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d84f      	bhi.n	8006f60 <SystemCoreClockUpdate+0xcc>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <SystemCoreClockUpdate+0x3a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d004      	beq.n	8006ed6 <SystemCoreClockUpdate+0x42>
 8006ecc:	e048      	b.n	8006f60 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006ece:	4b30      	ldr	r3, [pc, #192]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006ed0:	4a30      	ldr	r2, [pc, #192]	@ (8006f94 <SystemCoreClockUpdate+0x100>)
 8006ed2:	601a      	str	r2, [r3, #0]
      break;
 8006ed4:	e048      	b.n	8006f68 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8006f94 <SystemCoreClockUpdate+0x100>)
 8006eda:	601a      	str	r2, [r3, #0]
      break;
 8006edc:	e044      	b.n	8006f68 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006ede:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <SystemCoreClockUpdate+0xf8>)
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	23f0      	movs	r3, #240	@ 0xf0
 8006ee4:	039b      	lsls	r3, r3, #14
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006eea:	4b28      	ldr	r3, [pc, #160]	@ (8006f8c <SystemCoreClockUpdate+0xf8>)
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	23c0      	movs	r3, #192	@ 0xc0
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	0c9b      	lsrs	r3, r3, #18
 8006efa:	3302      	adds	r3, #2
 8006efc:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8006efe:	4b23      	ldr	r3, [pc, #140]	@ (8006f8c <SystemCoreClockUpdate+0xf8>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	220f      	movs	r2, #15
 8006f04:	4013      	ands	r3, r2
 8006f06:	3301      	adds	r3, #1
 8006f08:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	2380      	movs	r3, #128	@ 0x80
 8006f0e:	025b      	lsls	r3, r3, #9
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d10a      	bne.n	8006f2a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	481f      	ldr	r0, [pc, #124]	@ (8006f94 <SystemCoreClockUpdate+0x100>)
 8006f18:	f7f9 f8f6 	bl	8000108 <__udivsi3>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	001a      	movs	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	435a      	muls	r2, r3
 8006f24:	4b1a      	ldr	r3, [pc, #104]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f26:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8006f28:	e01e      	b.n	8006f68 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	23c0      	movs	r3, #192	@ 0xc0
 8006f2e:	025b      	lsls	r3, r3, #9
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d10a      	bne.n	8006f4a <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	4818      	ldr	r0, [pc, #96]	@ (8006f98 <SystemCoreClockUpdate+0x104>)
 8006f38:	f7f9 f8e6 	bl	8000108 <__udivsi3>
 8006f3c:	0003      	movs	r3, r0
 8006f3e:	001a      	movs	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	435a      	muls	r2, r3
 8006f44:	4b12      	ldr	r3, [pc, #72]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f46:	601a      	str	r2, [r3, #0]
      break;
 8006f48:	e00e      	b.n	8006f68 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	4811      	ldr	r0, [pc, #68]	@ (8006f94 <SystemCoreClockUpdate+0x100>)
 8006f4e:	f7f9 f8db 	bl	8000108 <__udivsi3>
 8006f52:	0003      	movs	r3, r0
 8006f54:	001a      	movs	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	435a      	muls	r2, r3
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f5c:	601a      	str	r2, [r3, #0]
      break;
 8006f5e:	e003      	b.n	8006f68 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006f60:	4b0b      	ldr	r3, [pc, #44]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f62:	4a0c      	ldr	r2, [pc, #48]	@ (8006f94 <SystemCoreClockUpdate+0x100>)
 8006f64:	601a      	str	r2, [r3, #0]
      break;
 8006f66:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006f68:	4b08      	ldr	r3, [pc, #32]	@ (8006f8c <SystemCoreClockUpdate+0xf8>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	220f      	movs	r2, #15
 8006f70:	4013      	ands	r3, r2
 8006f72:	4a0a      	ldr	r2, [pc, #40]	@ (8006f9c <SystemCoreClockUpdate+0x108>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006f78:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	40da      	lsrs	r2, r3
 8006f80:	4b03      	ldr	r3, [pc, #12]	@ (8006f90 <SystemCoreClockUpdate+0xfc>)
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	46c0      	nop			@ (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b004      	add	sp, #16
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	20000008 	.word	0x20000008
 8006f94:	007a1200 	.word	0x007a1200
 8006f98:	02dc6c00 	.word	0x02dc6c00
 8006f9c:	08007760 	.word	0x08007760

08006fa0 <memset>:
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	1882      	adds	r2, r0, r2
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d100      	bne.n	8006faa <memset+0xa>
 8006fa8:	4770      	bx	lr
 8006faa:	7019      	strb	r1, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	e7f9      	b.n	8006fa4 <memset+0x4>

08006fb0 <__libc_init_array>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe8 <__libc_init_array+0x38>)
 8006fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006fec <__libc_init_array+0x3c>)
 8006fb8:	1b64      	subs	r4, r4, r5
 8006fba:	10a4      	asrs	r4, r4, #2
 8006fbc:	42a6      	cmp	r6, r4
 8006fbe:	d109      	bne.n	8006fd4 <__libc_init_array+0x24>
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	f000 f823 	bl	800700c <_init>
 8006fc6:	4c0a      	ldr	r4, [pc, #40]	@ (8006ff0 <__libc_init_array+0x40>)
 8006fc8:	4d0a      	ldr	r5, [pc, #40]	@ (8006ff4 <__libc_init_array+0x44>)
 8006fca:	1b64      	subs	r4, r4, r5
 8006fcc:	10a4      	asrs	r4, r4, #2
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	d105      	bne.n	8006fde <__libc_init_array+0x2e>
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	00b3      	lsls	r3, r6, #2
 8006fd6:	58eb      	ldr	r3, [r5, r3]
 8006fd8:	4798      	blx	r3
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7ee      	b.n	8006fbc <__libc_init_array+0xc>
 8006fde:	00b3      	lsls	r3, r6, #2
 8006fe0:	58eb      	ldr	r3, [r5, r3]
 8006fe2:	4798      	blx	r3
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	e7f2      	b.n	8006fce <__libc_init_array+0x1e>
 8006fe8:	08007770 	.word	0x08007770
 8006fec:	08007770 	.word	0x08007770
 8006ff0:	08007774 	.word	0x08007774
 8006ff4:	08007770 	.word	0x08007770

08006ff8 <memcpy>:
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d100      	bne.n	8007002 <memcpy+0xa>
 8007000:	bd10      	pop	{r4, pc}
 8007002:	5ccc      	ldrb	r4, [r1, r3]
 8007004:	54c4      	strb	r4, [r0, r3]
 8007006:	3301      	adds	r3, #1
 8007008:	e7f8      	b.n	8006ffc <memcpy+0x4>
	...

0800700c <_init>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr

08007018 <_fini>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr
