
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08007a54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e10  20000018  08007a6c  00009018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002e28  08007a6c  00009e28  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
  9 .debug_info   000091d4  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d77  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009c0  00000000  00000000  00013f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000761  00000000  00000000  00014950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002cd9  00000000  00000000  000150b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c4a8  00000000  00000000  00017d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075cf8  00000000  00000000  00024232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00099f2a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000237c  00000000  00000000  00099f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  0009c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800725c 	.word	0x0800725c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	0800725c 	.word	0x0800725c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fc23 	bl	8000a74 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fbad 	bl	8000994 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 f80a 	bl	800025c <__aeabi_dsub>
 8000248:	f000 fba4 	bl	8000994 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dsub>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464e      	mov	r6, r9
 8000260:	4645      	mov	r5, r8
 8000262:	46de      	mov	lr, fp
 8000264:	4657      	mov	r7, sl
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b085      	sub	sp, #20
 800026a:	9000      	str	r0, [sp, #0]
 800026c:	9101      	str	r1, [sp, #4]
 800026e:	030c      	lsls	r4, r1, #12
 8000270:	004f      	lsls	r7, r1, #1
 8000272:	0fce      	lsrs	r6, r1, #31
 8000274:	0a61      	lsrs	r1, r4, #9
 8000276:	9c00      	ldr	r4, [sp, #0]
 8000278:	46b0      	mov	r8, r6
 800027a:	0f64      	lsrs	r4, r4, #29
 800027c:	430c      	orrs	r4, r1
 800027e:	9900      	ldr	r1, [sp, #0]
 8000280:	0d7f      	lsrs	r7, r7, #21
 8000282:	00c8      	lsls	r0, r1, #3
 8000284:	0011      	movs	r1, r2
 8000286:	001a      	movs	r2, r3
 8000288:	031b      	lsls	r3, r3, #12
 800028a:	469c      	mov	ip, r3
 800028c:	9100      	str	r1, [sp, #0]
 800028e:	9201      	str	r2, [sp, #4]
 8000290:	0051      	lsls	r1, r2, #1
 8000292:	0d4b      	lsrs	r3, r1, #21
 8000294:	4699      	mov	r9, r3
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	9d00      	ldr	r5, [sp, #0]
 800029a:	0fd9      	lsrs	r1, r3, #31
 800029c:	4663      	mov	r3, ip
 800029e:	0f6a      	lsrs	r2, r5, #29
 80002a0:	0a5b      	lsrs	r3, r3, #9
 80002a2:	4313      	orrs	r3, r2
 80002a4:	00ea      	lsls	r2, r5, #3
 80002a6:	4694      	mov	ip, r2
 80002a8:	4693      	mov	fp, r2
 80002aa:	4ac1      	ldr	r2, [pc, #772]	@ (80005b0 <__aeabi_dsub+0x354>)
 80002ac:	9003      	str	r0, [sp, #12]
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	4591      	cmp	r9, r2
 80002b2:	d100      	bne.n	80002b6 <__aeabi_dsub+0x5a>
 80002b4:	e0cd      	b.n	8000452 <__aeabi_dsub+0x1f6>
 80002b6:	2501      	movs	r5, #1
 80002b8:	4069      	eors	r1, r5
 80002ba:	464d      	mov	r5, r9
 80002bc:	1b7d      	subs	r5, r7, r5
 80002be:	46aa      	mov	sl, r5
 80002c0:	428e      	cmp	r6, r1
 80002c2:	d100      	bne.n	80002c6 <__aeabi_dsub+0x6a>
 80002c4:	e080      	b.n	80003c8 <__aeabi_dsub+0x16c>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	dc00      	bgt.n	80002cc <__aeabi_dsub+0x70>
 80002ca:	e335      	b.n	8000938 <__aeabi_dsub+0x6dc>
 80002cc:	4649      	mov	r1, r9
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d100      	bne.n	80002d4 <__aeabi_dsub+0x78>
 80002d2:	e0df      	b.n	8000494 <__aeabi_dsub+0x238>
 80002d4:	4297      	cmp	r7, r2
 80002d6:	d100      	bne.n	80002da <__aeabi_dsub+0x7e>
 80002d8:	e194      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80002da:	4652      	mov	r2, sl
 80002dc:	2501      	movs	r5, #1
 80002de:	2a38      	cmp	r2, #56	@ 0x38
 80002e0:	dc19      	bgt.n	8000316 <__aeabi_dsub+0xba>
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	9b02      	ldr	r3, [sp, #8]
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	4313      	orrs	r3, r2
 80002ea:	9302      	str	r3, [sp, #8]
 80002ec:	4652      	mov	r2, sl
 80002ee:	2a1f      	cmp	r2, #31
 80002f0:	dd00      	ble.n	80002f4 <__aeabi_dsub+0x98>
 80002f2:	e1e3      	b.n	80006bc <__aeabi_dsub+0x460>
 80002f4:	4653      	mov	r3, sl
 80002f6:	2220      	movs	r2, #32
 80002f8:	4661      	mov	r1, ip
 80002fa:	9d02      	ldr	r5, [sp, #8]
 80002fc:	1ad2      	subs	r2, r2, r3
 80002fe:	4095      	lsls	r5, r2
 8000300:	40d9      	lsrs	r1, r3
 8000302:	430d      	orrs	r5, r1
 8000304:	4661      	mov	r1, ip
 8000306:	4091      	lsls	r1, r2
 8000308:	000a      	movs	r2, r1
 800030a:	1e51      	subs	r1, r2, #1
 800030c:	418a      	sbcs	r2, r1
 800030e:	4315      	orrs	r5, r2
 8000310:	9a02      	ldr	r2, [sp, #8]
 8000312:	40da      	lsrs	r2, r3
 8000314:	1aa4      	subs	r4, r4, r2
 8000316:	1b45      	subs	r5, r0, r5
 8000318:	42a8      	cmp	r0, r5
 800031a:	4180      	sbcs	r0, r0
 800031c:	4240      	negs	r0, r0
 800031e:	1a24      	subs	r4, r4, r0
 8000320:	0223      	lsls	r3, r4, #8
 8000322:	d400      	bmi.n	8000326 <__aeabi_dsub+0xca>
 8000324:	e13d      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000326:	0264      	lsls	r4, r4, #9
 8000328:	0a64      	lsrs	r4, r4, #9
 800032a:	2c00      	cmp	r4, #0
 800032c:	d100      	bne.n	8000330 <__aeabi_dsub+0xd4>
 800032e:	e147      	b.n	80005c0 <__aeabi_dsub+0x364>
 8000330:	0020      	movs	r0, r4
 8000332:	f000 fba9 	bl	8000a88 <__clzsi2>
 8000336:	0003      	movs	r3, r0
 8000338:	3b08      	subs	r3, #8
 800033a:	2120      	movs	r1, #32
 800033c:	0028      	movs	r0, r5
 800033e:	1aca      	subs	r2, r1, r3
 8000340:	40d0      	lsrs	r0, r2
 8000342:	409c      	lsls	r4, r3
 8000344:	0002      	movs	r2, r0
 8000346:	409d      	lsls	r5, r3
 8000348:	4322      	orrs	r2, r4
 800034a:	429f      	cmp	r7, r3
 800034c:	dd00      	ble.n	8000350 <__aeabi_dsub+0xf4>
 800034e:	e177      	b.n	8000640 <__aeabi_dsub+0x3e4>
 8000350:	1bd8      	subs	r0, r3, r7
 8000352:	3001      	adds	r0, #1
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	002c      	movs	r4, r5
 8000358:	408d      	lsls	r5, r1
 800035a:	40c4      	lsrs	r4, r0
 800035c:	1e6b      	subs	r3, r5, #1
 800035e:	419d      	sbcs	r5, r3
 8000360:	0013      	movs	r3, r2
 8000362:	40c2      	lsrs	r2, r0
 8000364:	408b      	lsls	r3, r1
 8000366:	4325      	orrs	r5, r4
 8000368:	2700      	movs	r7, #0
 800036a:	0014      	movs	r4, r2
 800036c:	431d      	orrs	r5, r3
 800036e:	076b      	lsls	r3, r5, #29
 8000370:	d009      	beq.n	8000386 <__aeabi_dsub+0x12a>
 8000372:	230f      	movs	r3, #15
 8000374:	402b      	ands	r3, r5
 8000376:	2b04      	cmp	r3, #4
 8000378:	d005      	beq.n	8000386 <__aeabi_dsub+0x12a>
 800037a:	1d2b      	adds	r3, r5, #4
 800037c:	42ab      	cmp	r3, r5
 800037e:	41ad      	sbcs	r5, r5
 8000380:	426d      	negs	r5, r5
 8000382:	1964      	adds	r4, r4, r5
 8000384:	001d      	movs	r5, r3
 8000386:	0223      	lsls	r3, r4, #8
 8000388:	d400      	bmi.n	800038c <__aeabi_dsub+0x130>
 800038a:	e140      	b.n	800060e <__aeabi_dsub+0x3b2>
 800038c:	4a88      	ldr	r2, [pc, #544]	@ (80005b0 <__aeabi_dsub+0x354>)
 800038e:	3701      	adds	r7, #1
 8000390:	4297      	cmp	r7, r2
 8000392:	d100      	bne.n	8000396 <__aeabi_dsub+0x13a>
 8000394:	e101      	b.n	800059a <__aeabi_dsub+0x33e>
 8000396:	2601      	movs	r6, #1
 8000398:	4643      	mov	r3, r8
 800039a:	4986      	ldr	r1, [pc, #536]	@ (80005b4 <__aeabi_dsub+0x358>)
 800039c:	08ed      	lsrs	r5, r5, #3
 800039e:	4021      	ands	r1, r4
 80003a0:	074a      	lsls	r2, r1, #29
 80003a2:	432a      	orrs	r2, r5
 80003a4:	057c      	lsls	r4, r7, #21
 80003a6:	024d      	lsls	r5, r1, #9
 80003a8:	0b2d      	lsrs	r5, r5, #12
 80003aa:	0d64      	lsrs	r4, r4, #21
 80003ac:	401e      	ands	r6, r3
 80003ae:	0524      	lsls	r4, r4, #20
 80003b0:	432c      	orrs	r4, r5
 80003b2:	07f6      	lsls	r6, r6, #31
 80003b4:	4334      	orrs	r4, r6
 80003b6:	0010      	movs	r0, r2
 80003b8:	0021      	movs	r1, r4
 80003ba:	b005      	add	sp, #20
 80003bc:	bcf0      	pop	{r4, r5, r6, r7}
 80003be:	46bb      	mov	fp, r7
 80003c0:	46b2      	mov	sl, r6
 80003c2:	46a9      	mov	r9, r5
 80003c4:	46a0      	mov	r8, r4
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	dc00      	bgt.n	80003ce <__aeabi_dsub+0x172>
 80003cc:	e2d0      	b.n	8000970 <__aeabi_dsub+0x714>
 80003ce:	4649      	mov	r1, r9
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d000      	beq.n	80003d6 <__aeabi_dsub+0x17a>
 80003d4:	e0d4      	b.n	8000580 <__aeabi_dsub+0x324>
 80003d6:	4661      	mov	r1, ip
 80003d8:	9b02      	ldr	r3, [sp, #8]
 80003da:	4319      	orrs	r1, r3
 80003dc:	d100      	bne.n	80003e0 <__aeabi_dsub+0x184>
 80003de:	e12b      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80003e0:	1e69      	subs	r1, r5, #1
 80003e2:	2d01      	cmp	r5, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dsub+0x18c>
 80003e6:	e1d9      	b.n	800079c <__aeabi_dsub+0x540>
 80003e8:	4295      	cmp	r5, r2
 80003ea:	d100      	bne.n	80003ee <__aeabi_dsub+0x192>
 80003ec:	e10a      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80003ee:	2501      	movs	r5, #1
 80003f0:	2938      	cmp	r1, #56	@ 0x38
 80003f2:	dc17      	bgt.n	8000424 <__aeabi_dsub+0x1c8>
 80003f4:	468a      	mov	sl, r1
 80003f6:	4653      	mov	r3, sl
 80003f8:	2b1f      	cmp	r3, #31
 80003fa:	dd00      	ble.n	80003fe <__aeabi_dsub+0x1a2>
 80003fc:	e1e7      	b.n	80007ce <__aeabi_dsub+0x572>
 80003fe:	2220      	movs	r2, #32
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	9b02      	ldr	r3, [sp, #8]
 8000404:	4661      	mov	r1, ip
 8000406:	4093      	lsls	r3, r2
 8000408:	001d      	movs	r5, r3
 800040a:	4653      	mov	r3, sl
 800040c:	40d9      	lsrs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	4093      	lsls	r3, r2
 8000412:	001a      	movs	r2, r3
 8000414:	430d      	orrs	r5, r1
 8000416:	1e51      	subs	r1, r2, #1
 8000418:	418a      	sbcs	r2, r1
 800041a:	4653      	mov	r3, sl
 800041c:	4315      	orrs	r5, r2
 800041e:	9a02      	ldr	r2, [sp, #8]
 8000420:	40da      	lsrs	r2, r3
 8000422:	18a4      	adds	r4, r4, r2
 8000424:	182d      	adds	r5, r5, r0
 8000426:	4285      	cmp	r5, r0
 8000428:	4180      	sbcs	r0, r0
 800042a:	4240      	negs	r0, r0
 800042c:	1824      	adds	r4, r4, r0
 800042e:	0223      	lsls	r3, r4, #8
 8000430:	d400      	bmi.n	8000434 <__aeabi_dsub+0x1d8>
 8000432:	e0b6      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000434:	4b5e      	ldr	r3, [pc, #376]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000436:	3701      	adds	r7, #1
 8000438:	429f      	cmp	r7, r3
 800043a:	d100      	bne.n	800043e <__aeabi_dsub+0x1e2>
 800043c:	e0ad      	b.n	800059a <__aeabi_dsub+0x33e>
 800043e:	2101      	movs	r1, #1
 8000440:	4b5c      	ldr	r3, [pc, #368]	@ (80005b4 <__aeabi_dsub+0x358>)
 8000442:	086a      	lsrs	r2, r5, #1
 8000444:	401c      	ands	r4, r3
 8000446:	4029      	ands	r1, r5
 8000448:	430a      	orrs	r2, r1
 800044a:	07e5      	lsls	r5, r4, #31
 800044c:	4315      	orrs	r5, r2
 800044e:	0864      	lsrs	r4, r4, #1
 8000450:	e78d      	b.n	800036e <__aeabi_dsub+0x112>
 8000452:	4a59      	ldr	r2, [pc, #356]	@ (80005b8 <__aeabi_dsub+0x35c>)
 8000454:	9b02      	ldr	r3, [sp, #8]
 8000456:	4692      	mov	sl, r2
 8000458:	4662      	mov	r2, ip
 800045a:	44ba      	add	sl, r7
 800045c:	431a      	orrs	r2, r3
 800045e:	d02c      	beq.n	80004ba <__aeabi_dsub+0x25e>
 8000460:	428e      	cmp	r6, r1
 8000462:	d02e      	beq.n	80004c2 <__aeabi_dsub+0x266>
 8000464:	4652      	mov	r2, sl
 8000466:	2a00      	cmp	r2, #0
 8000468:	d060      	beq.n	800052c <__aeabi_dsub+0x2d0>
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_dsub+0x214>
 800046e:	e0db      	b.n	8000628 <__aeabi_dsub+0x3cc>
 8000470:	4663      	mov	r3, ip
 8000472:	000e      	movs	r6, r1
 8000474:	9c02      	ldr	r4, [sp, #8]
 8000476:	08d8      	lsrs	r0, r3, #3
 8000478:	0762      	lsls	r2, r4, #29
 800047a:	4302      	orrs	r2, r0
 800047c:	08e4      	lsrs	r4, r4, #3
 800047e:	0013      	movs	r3, r2
 8000480:	4323      	orrs	r3, r4
 8000482:	d100      	bne.n	8000486 <__aeabi_dsub+0x22a>
 8000484:	e254      	b.n	8000930 <__aeabi_dsub+0x6d4>
 8000486:	2580      	movs	r5, #128	@ 0x80
 8000488:	032d      	lsls	r5, r5, #12
 800048a:	4325      	orrs	r5, r4
 800048c:	032d      	lsls	r5, r5, #12
 800048e:	4c48      	ldr	r4, [pc, #288]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000490:	0b2d      	lsrs	r5, r5, #12
 8000492:	e78c      	b.n	80003ae <__aeabi_dsub+0x152>
 8000494:	4661      	mov	r1, ip
 8000496:	9b02      	ldr	r3, [sp, #8]
 8000498:	4319      	orrs	r1, r3
 800049a:	d100      	bne.n	800049e <__aeabi_dsub+0x242>
 800049c:	e0cc      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800049e:	0029      	movs	r1, r5
 80004a0:	3901      	subs	r1, #1
 80004a2:	2d01      	cmp	r5, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x24c>
 80004a6:	e188      	b.n	80007ba <__aeabi_dsub+0x55e>
 80004a8:	4295      	cmp	r5, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dsub+0x252>
 80004ac:	e0aa      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80004ae:	2501      	movs	r5, #1
 80004b0:	2938      	cmp	r1, #56	@ 0x38
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dsub+0x25a>
 80004b4:	e72f      	b.n	8000316 <__aeabi_dsub+0xba>
 80004b6:	468a      	mov	sl, r1
 80004b8:	e718      	b.n	80002ec <__aeabi_dsub+0x90>
 80004ba:	2201      	movs	r2, #1
 80004bc:	4051      	eors	r1, r2
 80004be:	428e      	cmp	r6, r1
 80004c0:	d1d0      	bne.n	8000464 <__aeabi_dsub+0x208>
 80004c2:	4653      	mov	r3, sl
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_dsub+0x26e>
 80004c8:	e0be      	b.n	8000648 <__aeabi_dsub+0x3ec>
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_dsub+0x274>
 80004ce:	e138      	b.n	8000742 <__aeabi_dsub+0x4e6>
 80004d0:	46ca      	mov	sl, r9
 80004d2:	0022      	movs	r2, r4
 80004d4:	4302      	orrs	r2, r0
 80004d6:	d100      	bne.n	80004da <__aeabi_dsub+0x27e>
 80004d8:	e1e2      	b.n	80008a0 <__aeabi_dsub+0x644>
 80004da:	4653      	mov	r3, sl
 80004dc:	1e59      	subs	r1, r3, #1
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dsub+0x288>
 80004e2:	e20d      	b.n	8000900 <__aeabi_dsub+0x6a4>
 80004e4:	4a32      	ldr	r2, [pc, #200]	@ (80005b0 <__aeabi_dsub+0x354>)
 80004e6:	4592      	cmp	sl, r2
 80004e8:	d100      	bne.n	80004ec <__aeabi_dsub+0x290>
 80004ea:	e1d2      	b.n	8000892 <__aeabi_dsub+0x636>
 80004ec:	2701      	movs	r7, #1
 80004ee:	2938      	cmp	r1, #56	@ 0x38
 80004f0:	dc13      	bgt.n	800051a <__aeabi_dsub+0x2be>
 80004f2:	291f      	cmp	r1, #31
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dsub+0x29c>
 80004f6:	e1ee      	b.n	80008d6 <__aeabi_dsub+0x67a>
 80004f8:	2220      	movs	r2, #32
 80004fa:	9b02      	ldr	r3, [sp, #8]
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	0025      	movs	r5, r4
 8000500:	0007      	movs	r7, r0
 8000502:	469a      	mov	sl, r3
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4090      	lsls	r0, r2
 8000508:	4095      	lsls	r5, r2
 800050a:	40cf      	lsrs	r7, r1
 800050c:	44a2      	add	sl, r4
 800050e:	1e42      	subs	r2, r0, #1
 8000510:	4190      	sbcs	r0, r2
 8000512:	4653      	mov	r3, sl
 8000514:	432f      	orrs	r7, r5
 8000516:	4307      	orrs	r7, r0
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	003d      	movs	r5, r7
 800051c:	4465      	add	r5, ip
 800051e:	4565      	cmp	r5, ip
 8000520:	4192      	sbcs	r2, r2
 8000522:	9b02      	ldr	r3, [sp, #8]
 8000524:	4252      	negs	r2, r2
 8000526:	464f      	mov	r7, r9
 8000528:	18d4      	adds	r4, r2, r3
 800052a:	e780      	b.n	800042e <__aeabi_dsub+0x1d2>
 800052c:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <__aeabi_dsub+0x360>)
 800052e:	1c7d      	adds	r5, r7, #1
 8000530:	4215      	tst	r5, r2
 8000532:	d000      	beq.n	8000536 <__aeabi_dsub+0x2da>
 8000534:	e0aa      	b.n	800068c <__aeabi_dsub+0x430>
 8000536:	4662      	mov	r2, ip
 8000538:	0025      	movs	r5, r4
 800053a:	9b02      	ldr	r3, [sp, #8]
 800053c:	4305      	orrs	r5, r0
 800053e:	431a      	orrs	r2, r3
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_dsub+0x2ea>
 8000544:	e0f5      	b.n	8000732 <__aeabi_dsub+0x4d6>
 8000546:	2d00      	cmp	r5, #0
 8000548:	d100      	bne.n	800054c <__aeabi_dsub+0x2f0>
 800054a:	e16b      	b.n	8000824 <__aeabi_dsub+0x5c8>
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dsub+0x2f6>
 8000550:	e152      	b.n	80007f8 <__aeabi_dsub+0x59c>
 8000552:	4663      	mov	r3, ip
 8000554:	1ac5      	subs	r5, r0, r3
 8000556:	9b02      	ldr	r3, [sp, #8]
 8000558:	1ae2      	subs	r2, r4, r3
 800055a:	42a8      	cmp	r0, r5
 800055c:	419b      	sbcs	r3, r3
 800055e:	425b      	negs	r3, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	021a      	lsls	r2, r3, #8
 8000564:	d400      	bmi.n	8000568 <__aeabi_dsub+0x30c>
 8000566:	e1d5      	b.n	8000914 <__aeabi_dsub+0x6b8>
 8000568:	4663      	mov	r3, ip
 800056a:	1a1d      	subs	r5, r3, r0
 800056c:	45ac      	cmp	ip, r5
 800056e:	4192      	sbcs	r2, r2
 8000570:	2601      	movs	r6, #1
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	4252      	negs	r2, r2
 8000576:	1b1c      	subs	r4, r3, r4
 8000578:	4688      	mov	r8, r1
 800057a:	1aa4      	subs	r4, r4, r2
 800057c:	400e      	ands	r6, r1
 800057e:	e6f6      	b.n	800036e <__aeabi_dsub+0x112>
 8000580:	4297      	cmp	r7, r2
 8000582:	d03f      	beq.n	8000604 <__aeabi_dsub+0x3a8>
 8000584:	4652      	mov	r2, sl
 8000586:	2501      	movs	r5, #1
 8000588:	2a38      	cmp	r2, #56	@ 0x38
 800058a:	dd00      	ble.n	800058e <__aeabi_dsub+0x332>
 800058c:	e74a      	b.n	8000424 <__aeabi_dsub+0x1c8>
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	9b02      	ldr	r3, [sp, #8]
 8000592:	0412      	lsls	r2, r2, #16
 8000594:	4313      	orrs	r3, r2
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	e72d      	b.n	80003f6 <__aeabi_dsub+0x19a>
 800059a:	003c      	movs	r4, r7
 800059c:	2500      	movs	r5, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	e705      	b.n	80003ae <__aeabi_dsub+0x152>
 80005a2:	2307      	movs	r3, #7
 80005a4:	402b      	ands	r3, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dsub+0x350>
 80005aa:	e6e2      	b.n	8000372 <__aeabi_dsub+0x116>
 80005ac:	e06b      	b.n	8000686 <__aeabi_dsub+0x42a>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	000007ff 	.word	0x000007ff
 80005b4:	ff7fffff 	.word	0xff7fffff
 80005b8:	fffff801 	.word	0xfffff801
 80005bc:	000007fe 	.word	0x000007fe
 80005c0:	0028      	movs	r0, r5
 80005c2:	f000 fa61 	bl	8000a88 <__clzsi2>
 80005c6:	0003      	movs	r3, r0
 80005c8:	3318      	adds	r3, #24
 80005ca:	2b1f      	cmp	r3, #31
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_dsub+0x374>
 80005ce:	e6b4      	b.n	800033a <__aeabi_dsub+0xde>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3808      	subs	r0, #8
 80005d4:	4082      	lsls	r2, r0
 80005d6:	429f      	cmp	r7, r3
 80005d8:	dd00      	ble.n	80005dc <__aeabi_dsub+0x380>
 80005da:	e0b9      	b.n	8000750 <__aeabi_dsub+0x4f4>
 80005dc:	1bdb      	subs	r3, r3, r7
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	281f      	cmp	r0, #31
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dsub+0x38a>
 80005e4:	e1a0      	b.n	8000928 <__aeabi_dsub+0x6cc>
 80005e6:	0015      	movs	r5, r2
 80005e8:	3b1f      	subs	r3, #31
 80005ea:	40dd      	lsrs	r5, r3
 80005ec:	2820      	cmp	r0, #32
 80005ee:	d005      	beq.n	80005fc <__aeabi_dsub+0x3a0>
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	1a1b      	subs	r3, r3, r0
 80005f4:	409a      	lsls	r2, r3
 80005f6:	1e53      	subs	r3, r2, #1
 80005f8:	419a      	sbcs	r2, r3
 80005fa:	4315      	orrs	r5, r2
 80005fc:	2307      	movs	r3, #7
 80005fe:	2700      	movs	r7, #0
 8000600:	402b      	ands	r3, r5
 8000602:	e7d0      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000604:	08c0      	lsrs	r0, r0, #3
 8000606:	0762      	lsls	r2, r4, #29
 8000608:	4302      	orrs	r2, r0
 800060a:	08e4      	lsrs	r4, r4, #3
 800060c:	e737      	b.n	800047e <__aeabi_dsub+0x222>
 800060e:	08ea      	lsrs	r2, r5, #3
 8000610:	0763      	lsls	r3, r4, #29
 8000612:	431a      	orrs	r2, r3
 8000614:	4bd3      	ldr	r3, [pc, #844]	@ (8000964 <__aeabi_dsub+0x708>)
 8000616:	08e4      	lsrs	r4, r4, #3
 8000618:	429f      	cmp	r7, r3
 800061a:	d100      	bne.n	800061e <__aeabi_dsub+0x3c2>
 800061c:	e72f      	b.n	800047e <__aeabi_dsub+0x222>
 800061e:	0324      	lsls	r4, r4, #12
 8000620:	0b25      	lsrs	r5, r4, #12
 8000622:	057c      	lsls	r4, r7, #21
 8000624:	0d64      	lsrs	r4, r4, #21
 8000626:	e6c2      	b.n	80003ae <__aeabi_dsub+0x152>
 8000628:	46ca      	mov	sl, r9
 800062a:	0022      	movs	r2, r4
 800062c:	4302      	orrs	r2, r0
 800062e:	d158      	bne.n	80006e2 <__aeabi_dsub+0x486>
 8000630:	4663      	mov	r3, ip
 8000632:	000e      	movs	r6, r1
 8000634:	9c02      	ldr	r4, [sp, #8]
 8000636:	9303      	str	r3, [sp, #12]
 8000638:	9b03      	ldr	r3, [sp, #12]
 800063a:	4657      	mov	r7, sl
 800063c:	08da      	lsrs	r2, r3, #3
 800063e:	e7e7      	b.n	8000610 <__aeabi_dsub+0x3b4>
 8000640:	4cc9      	ldr	r4, [pc, #804]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000642:	1aff      	subs	r7, r7, r3
 8000644:	4014      	ands	r4, r2
 8000646:	e692      	b.n	800036e <__aeabi_dsub+0x112>
 8000648:	4dc8      	ldr	r5, [pc, #800]	@ (800096c <__aeabi_dsub+0x710>)
 800064a:	1c7a      	adds	r2, r7, #1
 800064c:	422a      	tst	r2, r5
 800064e:	d000      	beq.n	8000652 <__aeabi_dsub+0x3f6>
 8000650:	e084      	b.n	800075c <__aeabi_dsub+0x500>
 8000652:	0022      	movs	r2, r4
 8000654:	4302      	orrs	r2, r0
 8000656:	2f00      	cmp	r7, #0
 8000658:	d000      	beq.n	800065c <__aeabi_dsub+0x400>
 800065a:	e0ef      	b.n	800083c <__aeabi_dsub+0x5e0>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_dsub+0x406>
 8000660:	e0e5      	b.n	800082e <__aeabi_dsub+0x5d2>
 8000662:	4662      	mov	r2, ip
 8000664:	9902      	ldr	r1, [sp, #8]
 8000666:	430a      	orrs	r2, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dsub+0x410>
 800066a:	e0c5      	b.n	80007f8 <__aeabi_dsub+0x59c>
 800066c:	4663      	mov	r3, ip
 800066e:	18c5      	adds	r5, r0, r3
 8000670:	468c      	mov	ip, r1
 8000672:	4285      	cmp	r5, r0
 8000674:	4180      	sbcs	r0, r0
 8000676:	4464      	add	r4, ip
 8000678:	4240      	negs	r0, r0
 800067a:	1824      	adds	r4, r4, r0
 800067c:	0223      	lsls	r3, r4, #8
 800067e:	d502      	bpl.n	8000686 <__aeabi_dsub+0x42a>
 8000680:	4bb9      	ldr	r3, [pc, #740]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000682:	3701      	adds	r7, #1
 8000684:	401c      	ands	r4, r3
 8000686:	46ba      	mov	sl, r7
 8000688:	9503      	str	r5, [sp, #12]
 800068a:	e7d5      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800068c:	4662      	mov	r2, ip
 800068e:	1a85      	subs	r5, r0, r2
 8000690:	42a8      	cmp	r0, r5
 8000692:	4192      	sbcs	r2, r2
 8000694:	4252      	negs	r2, r2
 8000696:	4691      	mov	r9, r2
 8000698:	9b02      	ldr	r3, [sp, #8]
 800069a:	1ae3      	subs	r3, r4, r3
 800069c:	001a      	movs	r2, r3
 800069e:	464b      	mov	r3, r9
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	0013      	movs	r3, r2
 80006a4:	4691      	mov	r9, r2
 80006a6:	021a      	lsls	r2, r3, #8
 80006a8:	d46c      	bmi.n	8000784 <__aeabi_dsub+0x528>
 80006aa:	464a      	mov	r2, r9
 80006ac:	464c      	mov	r4, r9
 80006ae:	432a      	orrs	r2, r5
 80006b0:	d000      	beq.n	80006b4 <__aeabi_dsub+0x458>
 80006b2:	e63a      	b.n	800032a <__aeabi_dsub+0xce>
 80006b4:	2600      	movs	r6, #0
 80006b6:	2400      	movs	r4, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	e678      	b.n	80003ae <__aeabi_dsub+0x152>
 80006bc:	9902      	ldr	r1, [sp, #8]
 80006be:	4653      	mov	r3, sl
 80006c0:	000d      	movs	r5, r1
 80006c2:	3a20      	subs	r2, #32
 80006c4:	40d5      	lsrs	r5, r2
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	d006      	beq.n	80006d8 <__aeabi_dsub+0x47c>
 80006ca:	2240      	movs	r2, #64	@ 0x40
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4662      	mov	r2, ip
 80006d4:	431a      	orrs	r2, r3
 80006d6:	4693      	mov	fp, r2
 80006d8:	465b      	mov	r3, fp
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	431d      	orrs	r5, r3
 80006e0:	e619      	b.n	8000316 <__aeabi_dsub+0xba>
 80006e2:	4653      	mov	r3, sl
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dsub+0x490>
 80006ea:	e0c6      	b.n	800087a <__aeabi_dsub+0x61e>
 80006ec:	4e9d      	ldr	r6, [pc, #628]	@ (8000964 <__aeabi_dsub+0x708>)
 80006ee:	45b2      	cmp	sl, r6
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dsub+0x498>
 80006f2:	e6bd      	b.n	8000470 <__aeabi_dsub+0x214>
 80006f4:	4688      	mov	r8, r1
 80006f6:	000e      	movs	r6, r1
 80006f8:	2501      	movs	r5, #1
 80006fa:	2a38      	cmp	r2, #56	@ 0x38
 80006fc:	dc10      	bgt.n	8000720 <__aeabi_dsub+0x4c4>
 80006fe:	2a1f      	cmp	r2, #31
 8000700:	dc7f      	bgt.n	8000802 <__aeabi_dsub+0x5a6>
 8000702:	2120      	movs	r1, #32
 8000704:	0025      	movs	r5, r4
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	0007      	movs	r7, r0
 800070a:	4088      	lsls	r0, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d7      	lsrs	r7, r2
 8000710:	40d4      	lsrs	r4, r2
 8000712:	1e41      	subs	r1, r0, #1
 8000714:	4188      	sbcs	r0, r1
 8000716:	9b02      	ldr	r3, [sp, #8]
 8000718:	433d      	orrs	r5, r7
 800071a:	1b1b      	subs	r3, r3, r4
 800071c:	4305      	orrs	r5, r0
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	4662      	mov	r2, ip
 8000722:	1b55      	subs	r5, r2, r5
 8000724:	45ac      	cmp	ip, r5
 8000726:	4192      	sbcs	r2, r2
 8000728:	9b02      	ldr	r3, [sp, #8]
 800072a:	4252      	negs	r2, r2
 800072c:	464f      	mov	r7, r9
 800072e:	1a9c      	subs	r4, r3, r2
 8000730:	e5f6      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_dsub+0x4dc>
 8000736:	e0b7      	b.n	80008a8 <__aeabi_dsub+0x64c>
 8000738:	2a00      	cmp	r2, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dsub+0x4e2>
 800073c:	e0f0      	b.n	8000920 <__aeabi_dsub+0x6c4>
 800073e:	2601      	movs	r6, #1
 8000740:	400e      	ands	r6, r1
 8000742:	4663      	mov	r3, ip
 8000744:	9802      	ldr	r0, [sp, #8]
 8000746:	08d9      	lsrs	r1, r3, #3
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	430a      	orrs	r2, r1
 800074c:	08c4      	lsrs	r4, r0, #3
 800074e:	e696      	b.n	800047e <__aeabi_dsub+0x222>
 8000750:	4c85      	ldr	r4, [pc, #532]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000752:	1aff      	subs	r7, r7, r3
 8000754:	4014      	ands	r4, r2
 8000756:	0762      	lsls	r2, r4, #29
 8000758:	08e4      	lsrs	r4, r4, #3
 800075a:	e760      	b.n	800061e <__aeabi_dsub+0x3c2>
 800075c:	4981      	ldr	r1, [pc, #516]	@ (8000964 <__aeabi_dsub+0x708>)
 800075e:	428a      	cmp	r2, r1
 8000760:	d100      	bne.n	8000764 <__aeabi_dsub+0x508>
 8000762:	e0c9      	b.n	80008f8 <__aeabi_dsub+0x69c>
 8000764:	4663      	mov	r3, ip
 8000766:	18c1      	adds	r1, r0, r3
 8000768:	4281      	cmp	r1, r0
 800076a:	4180      	sbcs	r0, r0
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	4240      	negs	r0, r0
 8000770:	18e3      	adds	r3, r4, r3
 8000772:	181b      	adds	r3, r3, r0
 8000774:	07dd      	lsls	r5, r3, #31
 8000776:	085c      	lsrs	r4, r3, #1
 8000778:	2307      	movs	r3, #7
 800077a:	0849      	lsrs	r1, r1, #1
 800077c:	430d      	orrs	r5, r1
 800077e:	0017      	movs	r7, r2
 8000780:	402b      	ands	r3, r5
 8000782:	e710      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000784:	4663      	mov	r3, ip
 8000786:	1a1d      	subs	r5, r3, r0
 8000788:	45ac      	cmp	ip, r5
 800078a:	4192      	sbcs	r2, r2
 800078c:	2601      	movs	r6, #1
 800078e:	9b02      	ldr	r3, [sp, #8]
 8000790:	4252      	negs	r2, r2
 8000792:	1b1c      	subs	r4, r3, r4
 8000794:	4688      	mov	r8, r1
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	400e      	ands	r6, r1
 800079a:	e5c6      	b.n	800032a <__aeabi_dsub+0xce>
 800079c:	4663      	mov	r3, ip
 800079e:	18c5      	adds	r5, r0, r3
 80007a0:	9b02      	ldr	r3, [sp, #8]
 80007a2:	4285      	cmp	r5, r0
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	469c      	mov	ip, r3
 80007a8:	4240      	negs	r0, r0
 80007aa:	4464      	add	r4, ip
 80007ac:	1824      	adds	r4, r4, r0
 80007ae:	2701      	movs	r7, #1
 80007b0:	0223      	lsls	r3, r4, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dsub+0x55a>
 80007b4:	e6f5      	b.n	80005a2 <__aeabi_dsub+0x346>
 80007b6:	2702      	movs	r7, #2
 80007b8:	e641      	b.n	800043e <__aeabi_dsub+0x1e2>
 80007ba:	4663      	mov	r3, ip
 80007bc:	1ac5      	subs	r5, r0, r3
 80007be:	42a8      	cmp	r0, r5
 80007c0:	4180      	sbcs	r0, r0
 80007c2:	9b02      	ldr	r3, [sp, #8]
 80007c4:	4240      	negs	r0, r0
 80007c6:	1ae4      	subs	r4, r4, r3
 80007c8:	2701      	movs	r7, #1
 80007ca:	1a24      	subs	r4, r4, r0
 80007cc:	e5a8      	b.n	8000320 <__aeabi_dsub+0xc4>
 80007ce:	9d02      	ldr	r5, [sp, #8]
 80007d0:	4652      	mov	r2, sl
 80007d2:	002b      	movs	r3, r5
 80007d4:	3a20      	subs	r2, #32
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	0019      	movs	r1, r3
 80007da:	4653      	mov	r3, sl
 80007dc:	2b20      	cmp	r3, #32
 80007de:	d006      	beq.n	80007ee <__aeabi_dsub+0x592>
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	002b      	movs	r3, r5
 80007e6:	4093      	lsls	r3, r2
 80007e8:	4662      	mov	r2, ip
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4693      	mov	fp, r2
 80007ee:	465d      	mov	r5, fp
 80007f0:	1e6b      	subs	r3, r5, #1
 80007f2:	419d      	sbcs	r5, r3
 80007f4:	430d      	orrs	r5, r1
 80007f6:	e615      	b.n	8000424 <__aeabi_dsub+0x1c8>
 80007f8:	0762      	lsls	r2, r4, #29
 80007fa:	08c0      	lsrs	r0, r0, #3
 80007fc:	4302      	orrs	r2, r0
 80007fe:	08e4      	lsrs	r4, r4, #3
 8000800:	e70d      	b.n	800061e <__aeabi_dsub+0x3c2>
 8000802:	0011      	movs	r1, r2
 8000804:	0027      	movs	r7, r4
 8000806:	3920      	subs	r1, #32
 8000808:	40cf      	lsrs	r7, r1
 800080a:	2a20      	cmp	r2, #32
 800080c:	d005      	beq.n	800081a <__aeabi_dsub+0x5be>
 800080e:	2140      	movs	r1, #64	@ 0x40
 8000810:	1a8a      	subs	r2, r1, r2
 8000812:	4094      	lsls	r4, r2
 8000814:	0025      	movs	r5, r4
 8000816:	4305      	orrs	r5, r0
 8000818:	9503      	str	r5, [sp, #12]
 800081a:	9d03      	ldr	r5, [sp, #12]
 800081c:	1e6a      	subs	r2, r5, #1
 800081e:	4195      	sbcs	r5, r2
 8000820:	433d      	orrs	r5, r7
 8000822:	e77d      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dsub+0x5ce>
 8000828:	e744      	b.n	80006b4 <__aeabi_dsub+0x458>
 800082a:	2601      	movs	r6, #1
 800082c:	400e      	ands	r6, r1
 800082e:	4663      	mov	r3, ip
 8000830:	08d9      	lsrs	r1, r3, #3
 8000832:	9b02      	ldr	r3, [sp, #8]
 8000834:	075a      	lsls	r2, r3, #29
 8000836:	430a      	orrs	r2, r1
 8000838:	08dc      	lsrs	r4, r3, #3
 800083a:	e6f0      	b.n	800061e <__aeabi_dsub+0x3c2>
 800083c:	2a00      	cmp	r2, #0
 800083e:	d028      	beq.n	8000892 <__aeabi_dsub+0x636>
 8000840:	4662      	mov	r2, ip
 8000842:	9f02      	ldr	r7, [sp, #8]
 8000844:	08c0      	lsrs	r0, r0, #3
 8000846:	433a      	orrs	r2, r7
 8000848:	d100      	bne.n	800084c <__aeabi_dsub+0x5f0>
 800084a:	e6dc      	b.n	8000606 <__aeabi_dsub+0x3aa>
 800084c:	0762      	lsls	r2, r4, #29
 800084e:	4310      	orrs	r0, r2
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	08e4      	lsrs	r4, r4, #3
 8000854:	0312      	lsls	r2, r2, #12
 8000856:	4214      	tst	r4, r2
 8000858:	d009      	beq.n	800086e <__aeabi_dsub+0x612>
 800085a:	08fd      	lsrs	r5, r7, #3
 800085c:	4215      	tst	r5, r2
 800085e:	d106      	bne.n	800086e <__aeabi_dsub+0x612>
 8000860:	4663      	mov	r3, ip
 8000862:	2601      	movs	r6, #1
 8000864:	002c      	movs	r4, r5
 8000866:	08d8      	lsrs	r0, r3, #3
 8000868:	077b      	lsls	r3, r7, #29
 800086a:	4318      	orrs	r0, r3
 800086c:	400e      	ands	r6, r1
 800086e:	0f42      	lsrs	r2, r0, #29
 8000870:	00c0      	lsls	r0, r0, #3
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	0752      	lsls	r2, r2, #29
 8000876:	4302      	orrs	r2, r0
 8000878:	e601      	b.n	800047e <__aeabi_dsub+0x222>
 800087a:	4663      	mov	r3, ip
 800087c:	1a1d      	subs	r5, r3, r0
 800087e:	45ac      	cmp	ip, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	9b02      	ldr	r3, [sp, #8]
 8000884:	4252      	negs	r2, r2
 8000886:	1b1c      	subs	r4, r3, r4
 8000888:	000e      	movs	r6, r1
 800088a:	4688      	mov	r8, r1
 800088c:	2701      	movs	r7, #1
 800088e:	1aa4      	subs	r4, r4, r2
 8000890:	e546      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000892:	4663      	mov	r3, ip
 8000894:	08d9      	lsrs	r1, r3, #3
 8000896:	9b02      	ldr	r3, [sp, #8]
 8000898:	075a      	lsls	r2, r3, #29
 800089a:	430a      	orrs	r2, r1
 800089c:	08dc      	lsrs	r4, r3, #3
 800089e:	e5ee      	b.n	800047e <__aeabi_dsub+0x222>
 80008a0:	4663      	mov	r3, ip
 80008a2:	9c02      	ldr	r4, [sp, #8]
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	e6c7      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x654>
 80008ae:	e6aa      	b.n	8000606 <__aeabi_dsub+0x3aa>
 80008b0:	0762      	lsls	r2, r4, #29
 80008b2:	4310      	orrs	r0, r2
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	08e4      	lsrs	r4, r4, #3
 80008b8:	0312      	lsls	r2, r2, #12
 80008ba:	4214      	tst	r4, r2
 80008bc:	d0d7      	beq.n	800086e <__aeabi_dsub+0x612>
 80008be:	9f02      	ldr	r7, [sp, #8]
 80008c0:	08fd      	lsrs	r5, r7, #3
 80008c2:	4215      	tst	r5, r2
 80008c4:	d1d3      	bne.n	800086e <__aeabi_dsub+0x612>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2601      	movs	r6, #1
 80008ca:	08d8      	lsrs	r0, r3, #3
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	002c      	movs	r4, r5
 80008d0:	4318      	orrs	r0, r3
 80008d2:	400e      	ands	r6, r1
 80008d4:	e7cb      	b.n	800086e <__aeabi_dsub+0x612>
 80008d6:	000a      	movs	r2, r1
 80008d8:	0027      	movs	r7, r4
 80008da:	3a20      	subs	r2, #32
 80008dc:	40d7      	lsrs	r7, r2
 80008de:	2920      	cmp	r1, #32
 80008e0:	d005      	beq.n	80008ee <__aeabi_dsub+0x692>
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	1a52      	subs	r2, r2, r1
 80008e6:	4094      	lsls	r4, r2
 80008e8:	0025      	movs	r5, r4
 80008ea:	4305      	orrs	r5, r0
 80008ec:	9503      	str	r5, [sp, #12]
 80008ee:	9d03      	ldr	r5, [sp, #12]
 80008f0:	1e6a      	subs	r2, r5, #1
 80008f2:	4195      	sbcs	r5, r2
 80008f4:	432f      	orrs	r7, r5
 80008f6:	e610      	b.n	800051a <__aeabi_dsub+0x2be>
 80008f8:	0014      	movs	r4, r2
 80008fa:	2500      	movs	r5, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	e556      	b.n	80003ae <__aeabi_dsub+0x152>
 8000900:	9b02      	ldr	r3, [sp, #8]
 8000902:	4460      	add	r0, ip
 8000904:	4699      	mov	r9, r3
 8000906:	4560      	cmp	r0, ip
 8000908:	4192      	sbcs	r2, r2
 800090a:	444c      	add	r4, r9
 800090c:	4252      	negs	r2, r2
 800090e:	0005      	movs	r5, r0
 8000910:	18a4      	adds	r4, r4, r2
 8000912:	e74c      	b.n	80007ae <__aeabi_dsub+0x552>
 8000914:	001a      	movs	r2, r3
 8000916:	001c      	movs	r4, r3
 8000918:	432a      	orrs	r2, r5
 800091a:	d000      	beq.n	800091e <__aeabi_dsub+0x6c2>
 800091c:	e6b3      	b.n	8000686 <__aeabi_dsub+0x42a>
 800091e:	e6c9      	b.n	80006b4 <__aeabi_dsub+0x458>
 8000920:	2480      	movs	r4, #128	@ 0x80
 8000922:	2600      	movs	r6, #0
 8000924:	0324      	lsls	r4, r4, #12
 8000926:	e5ae      	b.n	8000486 <__aeabi_dsub+0x22a>
 8000928:	2120      	movs	r1, #32
 800092a:	2500      	movs	r5, #0
 800092c:	1a09      	subs	r1, r1, r0
 800092e:	e517      	b.n	8000360 <__aeabi_dsub+0x104>
 8000930:	2200      	movs	r2, #0
 8000932:	2500      	movs	r5, #0
 8000934:	4c0b      	ldr	r4, [pc, #44]	@ (8000964 <__aeabi_dsub+0x708>)
 8000936:	e53a      	b.n	80003ae <__aeabi_dsub+0x152>
 8000938:	2d00      	cmp	r5, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dsub+0x6e2>
 800093c:	e5f6      	b.n	800052c <__aeabi_dsub+0x2d0>
 800093e:	464b      	mov	r3, r9
 8000940:	1bda      	subs	r2, r3, r7
 8000942:	4692      	mov	sl, r2
 8000944:	2f00      	cmp	r7, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dsub+0x6ee>
 8000948:	e66f      	b.n	800062a <__aeabi_dsub+0x3ce>
 800094a:	2a38      	cmp	r2, #56	@ 0x38
 800094c:	dc05      	bgt.n	800095a <__aeabi_dsub+0x6fe>
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	0436      	lsls	r6, r6, #16
 8000952:	4334      	orrs	r4, r6
 8000954:	4688      	mov	r8, r1
 8000956:	000e      	movs	r6, r1
 8000958:	e6d1      	b.n	80006fe <__aeabi_dsub+0x4a2>
 800095a:	4688      	mov	r8, r1
 800095c:	000e      	movs	r6, r1
 800095e:	2501      	movs	r5, #1
 8000960:	e6de      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	000007ff 	.word	0x000007ff
 8000968:	ff7fffff 	.word	0xff7fffff
 800096c:	000007fe 	.word	0x000007fe
 8000970:	2d00      	cmp	r5, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_dsub+0x71a>
 8000974:	e668      	b.n	8000648 <__aeabi_dsub+0x3ec>
 8000976:	464b      	mov	r3, r9
 8000978:	1bd9      	subs	r1, r3, r7
 800097a:	2f00      	cmp	r7, #0
 800097c:	d101      	bne.n	8000982 <__aeabi_dsub+0x726>
 800097e:	468a      	mov	sl, r1
 8000980:	e5a7      	b.n	80004d2 <__aeabi_dsub+0x276>
 8000982:	2701      	movs	r7, #1
 8000984:	2938      	cmp	r1, #56	@ 0x38
 8000986:	dd00      	ble.n	800098a <__aeabi_dsub+0x72e>
 8000988:	e5c7      	b.n	800051a <__aeabi_dsub+0x2be>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0412      	lsls	r2, r2, #16
 800098e:	4314      	orrs	r4, r2
 8000990:	e5af      	b.n	80004f2 <__aeabi_dsub+0x296>
 8000992:	46c0      	nop			@ (mov r8, r8)

08000994 <__aeabi_d2iz>:
 8000994:	000b      	movs	r3, r1
 8000996:	0002      	movs	r2, r0
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d16      	ldr	r5, [pc, #88]	@ (80009f4 <__aeabi_d2iz+0x60>)
 800099c:	030c      	lsls	r4, r1, #12
 800099e:	b082      	sub	sp, #8
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	2000      	movs	r0, #0
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	0b24      	lsrs	r4, r4, #12
 80009aa:	0d49      	lsrs	r1, r1, #21
 80009ac:	0fde      	lsrs	r6, r3, #31
 80009ae:	42a9      	cmp	r1, r5
 80009b0:	dd04      	ble.n	80009bc <__aeabi_d2iz+0x28>
 80009b2:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <__aeabi_d2iz+0x64>)
 80009b4:	4281      	cmp	r1, r0
 80009b6:	dd03      	ble.n	80009c0 <__aeabi_d2iz+0x2c>
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <__aeabi_d2iz+0x68>)
 80009ba:	18f0      	adds	r0, r6, r3
 80009bc:	b002      	add	sp, #8
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	2080      	movs	r0, #128	@ 0x80
 80009c2:	0340      	lsls	r0, r0, #13
 80009c4:	4320      	orrs	r0, r4
 80009c6:	4c0e      	ldr	r4, [pc, #56]	@ (8000a00 <__aeabi_d2iz+0x6c>)
 80009c8:	1a64      	subs	r4, r4, r1
 80009ca:	2c1f      	cmp	r4, #31
 80009cc:	dd08      	ble.n	80009e0 <__aeabi_d2iz+0x4c>
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <__aeabi_d2iz+0x70>)
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	40d8      	lsrs	r0, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4258      	negs	r0, r3
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d1ef      	bne.n	80009bc <__aeabi_d2iz+0x28>
 80009dc:	0018      	movs	r0, r3
 80009de:	e7ed      	b.n	80009bc <__aeabi_d2iz+0x28>
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <__aeabi_d2iz+0x74>)
 80009e2:	9a00      	ldr	r2, [sp, #0]
 80009e4:	469c      	mov	ip, r3
 80009e6:	0003      	movs	r3, r0
 80009e8:	4461      	add	r1, ip
 80009ea:	408b      	lsls	r3, r1
 80009ec:	40e2      	lsrs	r2, r4
 80009ee:	4313      	orrs	r3, r2
 80009f0:	e7f1      	b.n	80009d6 <__aeabi_d2iz+0x42>
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	000003fe 	.word	0x000003fe
 80009f8:	0000041d 	.word	0x0000041d
 80009fc:	7fffffff 	.word	0x7fffffff
 8000a00:	00000433 	.word	0x00000433
 8000a04:	00000413 	.word	0x00000413
 8000a08:	fffffbed 	.word	0xfffffbed

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	0010      	movs	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	0019      	movs	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	46c0      	nop			@ (mov r8, r8)

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a1e:	f000 f909 	bl	8000c34 <__ledf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d401      	bmi.n	8000a2a <__aeabi_cdcmpeq+0xe>
 8000a26:	2100      	movs	r1, #0
 8000a28:	42c8      	cmn	r0, r1
 8000a2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	f000 f849 	bl	8000ac4 <__eqdf2>
 8000a32:	4240      	negs	r0, r0
 8000a34:	3001      	adds	r0, #1
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <__aeabi_dcmplt>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	f000 f8fb 	bl	8000c34 <__ledf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	db01      	blt.n	8000a46 <__aeabi_dcmplt+0xe>
 8000a42:	2000      	movs	r0, #0
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	2001      	movs	r0, #1
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)

08000a4c <__aeabi_dcmple>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	f000 f8f1 	bl	8000c34 <__ledf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	dd01      	ble.n	8000a5a <__aeabi_dcmple+0xe>
 8000a56:	2000      	movs	r0, #0
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)

08000a60 <__aeabi_dcmpgt>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	f000 f873 	bl	8000b4c <__gedf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	dc01      	bgt.n	8000a6e <__aeabi_dcmpgt+0xe>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	2001      	movs	r0, #1
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)

08000a74 <__aeabi_dcmpge>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	f000 f869 	bl	8000b4c <__gedf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	da01      	bge.n	8000a82 <__aeabi_dcmpge+0xe>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	2001      	movs	r0, #1
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)

08000a88 <__clzsi2>:
 8000a88:	211c      	movs	r1, #28
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d301      	bcc.n	8000a96 <__clzsi2+0xe>
 8000a92:	0c00      	lsrs	r0, r0, #16
 8000a94:	3910      	subs	r1, #16
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	4298      	cmp	r0, r3
 8000a9a:	d301      	bcc.n	8000aa0 <__clzsi2+0x18>
 8000a9c:	0a00      	lsrs	r0, r0, #8
 8000a9e:	3908      	subs	r1, #8
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d301      	bcc.n	8000aaa <__clzsi2+0x22>
 8000aa6:	0900      	lsrs	r0, r0, #4
 8000aa8:	3904      	subs	r1, #4
 8000aaa:	a202      	add	r2, pc, #8	@ (adr r2, 8000ab4 <__clzsi2+0x2c>)
 8000aac:	5c10      	ldrb	r0, [r2, r0]
 8000aae:	1840      	adds	r0, r0, r1
 8000ab0:	4770      	bx	lr
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	02020304 	.word	0x02020304
 8000ab8:	01010101 	.word	0x01010101
	...

08000ac4 <__eqdf2>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	46de      	mov	lr, fp
 8000aca:	464e      	mov	r6, r9
 8000acc:	4645      	mov	r5, r8
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	000d      	movs	r5, r1
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	0fe8      	lsrs	r0, r5, #31
 8000ad6:	4683      	mov	fp, r0
 8000ad8:	0309      	lsls	r1, r1, #12
 8000ada:	0fd8      	lsrs	r0, r3, #31
 8000adc:	0b09      	lsrs	r1, r1, #12
 8000ade:	4682      	mov	sl, r0
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <__eqdf2+0x84>)
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	031f      	lsls	r7, r3, #12
 8000ae6:	0069      	lsls	r1, r5, #1
 8000ae8:	005e      	lsls	r6, r3, #1
 8000aea:	0d49      	lsrs	r1, r1, #21
 8000aec:	0b3f      	lsrs	r7, r7, #12
 8000aee:	0d76      	lsrs	r6, r6, #21
 8000af0:	4281      	cmp	r1, r0
 8000af2:	d018      	beq.n	8000b26 <__eqdf2+0x62>
 8000af4:	4286      	cmp	r6, r0
 8000af6:	d00f      	beq.n	8000b18 <__eqdf2+0x54>
 8000af8:	2001      	movs	r0, #1
 8000afa:	42b1      	cmp	r1, r6
 8000afc:	d10d      	bne.n	8000b1a <__eqdf2+0x56>
 8000afe:	45bc      	cmp	ip, r7
 8000b00:	d10b      	bne.n	8000b1a <__eqdf2+0x56>
 8000b02:	4294      	cmp	r4, r2
 8000b04:	d109      	bne.n	8000b1a <__eqdf2+0x56>
 8000b06:	45d3      	cmp	fp, sl
 8000b08:	d01c      	beq.n	8000b44 <__eqdf2+0x80>
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d105      	bne.n	8000b1a <__eqdf2+0x56>
 8000b0e:	4660      	mov	r0, ip
 8000b10:	4320      	orrs	r0, r4
 8000b12:	1e43      	subs	r3, r0, #1
 8000b14:	4198      	sbcs	r0, r3
 8000b16:	e000      	b.n	8000b1a <__eqdf2+0x56>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b1c:	46bb      	mov	fp, r7
 8000b1e:	46b2      	mov	sl, r6
 8000b20:	46a9      	mov	r9, r5
 8000b22:	46a0      	mov	r8, r4
 8000b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b26:	2001      	movs	r0, #1
 8000b28:	428e      	cmp	r6, r1
 8000b2a:	d1f6      	bne.n	8000b1a <__eqdf2+0x56>
 8000b2c:	4661      	mov	r1, ip
 8000b2e:	4339      	orrs	r1, r7
 8000b30:	000f      	movs	r7, r1
 8000b32:	4317      	orrs	r7, r2
 8000b34:	4327      	orrs	r7, r4
 8000b36:	d1f0      	bne.n	8000b1a <__eqdf2+0x56>
 8000b38:	465b      	mov	r3, fp
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	1a98      	subs	r0, r3, r2
 8000b3e:	1e43      	subs	r3, r0, #1
 8000b40:	4198      	sbcs	r0, r3
 8000b42:	e7ea      	b.n	8000b1a <__eqdf2+0x56>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e7e8      	b.n	8000b1a <__eqdf2+0x56>
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__gedf2>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	4657      	mov	r7, sl
 8000b50:	464e      	mov	r6, r9
 8000b52:	4645      	mov	r5, r8
 8000b54:	46de      	mov	lr, fp
 8000b56:	b5e0      	push	{r5, r6, r7, lr}
 8000b58:	000d      	movs	r5, r1
 8000b5a:	030f      	lsls	r7, r1, #12
 8000b5c:	0b39      	lsrs	r1, r7, #12
 8000b5e:	b083      	sub	sp, #12
 8000b60:	0004      	movs	r4, r0
 8000b62:	4680      	mov	r8, r0
 8000b64:	9101      	str	r1, [sp, #4]
 8000b66:	0058      	lsls	r0, r3, #1
 8000b68:	0fe9      	lsrs	r1, r5, #31
 8000b6a:	4f31      	ldr	r7, [pc, #196]	@ (8000c30 <__gedf2+0xe4>)
 8000b6c:	0d40      	lsrs	r0, r0, #21
 8000b6e:	468c      	mov	ip, r1
 8000b70:	006e      	lsls	r6, r5, #1
 8000b72:	0319      	lsls	r1, r3, #12
 8000b74:	4682      	mov	sl, r0
 8000b76:	4691      	mov	r9, r2
 8000b78:	0d76      	lsrs	r6, r6, #21
 8000b7a:	0b09      	lsrs	r1, r1, #12
 8000b7c:	0fd8      	lsrs	r0, r3, #31
 8000b7e:	42be      	cmp	r6, r7
 8000b80:	d01f      	beq.n	8000bc2 <__gedf2+0x76>
 8000b82:	45ba      	cmp	sl, r7
 8000b84:	d00f      	beq.n	8000ba6 <__gedf2+0x5a>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d12f      	bne.n	8000bea <__gedf2+0x9e>
 8000b8a:	4655      	mov	r5, sl
 8000b8c:	9e01      	ldr	r6, [sp, #4]
 8000b8e:	4334      	orrs	r4, r6
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d127      	bne.n	8000be4 <__gedf2+0x98>
 8000b94:	430a      	orrs	r2, r1
 8000b96:	d03a      	beq.n	8000c0e <__gedf2+0xc2>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d145      	bne.n	8000c28 <__gedf2+0xdc>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d11a      	bne.n	8000bd6 <__gedf2+0x8a>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e017      	b.n	8000bd6 <__gedf2+0x8a>
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	d13b      	bne.n	8000c22 <__gedf2+0xd6>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d102      	bne.n	8000bb4 <__gedf2+0x68>
 8000bae:	9f01      	ldr	r7, [sp, #4]
 8000bb0:	4327      	orrs	r7, r4
 8000bb2:	d0f3      	beq.n	8000b9c <__gedf2+0x50>
 8000bb4:	4584      	cmp	ip, r0
 8000bb6:	d109      	bne.n	8000bcc <__gedf2+0x80>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <__gedf2+0x54>
 8000bbe:	4660      	mov	r0, ip
 8000bc0:	e009      	b.n	8000bd6 <__gedf2+0x8a>
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	4327      	orrs	r7, r4
 8000bc6:	d12c      	bne.n	8000c22 <__gedf2+0xd6>
 8000bc8:	45b2      	cmp	sl, r6
 8000bca:	d024      	beq.n	8000c16 <__gedf2+0xca>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	2002      	movs	r0, #2
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4018      	ands	r0, r3
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bda:	46bb      	mov	fp, r7
 8000bdc:	46b2      	mov	sl, r6
 8000bde:	46a9      	mov	r9, r5
 8000be0:	46a0      	mov	r8, r4
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d0d9      	beq.n	8000b9c <__gedf2+0x50>
 8000be8:	e7e4      	b.n	8000bb4 <__gedf2+0x68>
 8000bea:	4654      	mov	r4, sl
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d0ed      	beq.n	8000bcc <__gedf2+0x80>
 8000bf0:	4584      	cmp	ip, r0
 8000bf2:	d1eb      	bne.n	8000bcc <__gedf2+0x80>
 8000bf4:	4556      	cmp	r6, sl
 8000bf6:	dce9      	bgt.n	8000bcc <__gedf2+0x80>
 8000bf8:	dbde      	blt.n	8000bb8 <__gedf2+0x6c>
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d8e5      	bhi.n	8000bcc <__gedf2+0x80>
 8000c00:	d1da      	bne.n	8000bb8 <__gedf2+0x6c>
 8000c02:	45c8      	cmp	r8, r9
 8000c04:	d8e2      	bhi.n	8000bcc <__gedf2+0x80>
 8000c06:	2000      	movs	r0, #0
 8000c08:	45c8      	cmp	r8, r9
 8000c0a:	d2e4      	bcs.n	8000bd6 <__gedf2+0x8a>
 8000c0c:	e7d4      	b.n	8000bb8 <__gedf2+0x6c>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d0e0      	beq.n	8000bd6 <__gedf2+0x8a>
 8000c14:	e7da      	b.n	8000bcc <__gedf2+0x80>
 8000c16:	4311      	orrs	r1, r2
 8000c18:	d103      	bne.n	8000c22 <__gedf2+0xd6>
 8000c1a:	4584      	cmp	ip, r0
 8000c1c:	d1d6      	bne.n	8000bcc <__gedf2+0x80>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e7d9      	b.n	8000bd6 <__gedf2+0x8a>
 8000c22:	2002      	movs	r0, #2
 8000c24:	4240      	negs	r0, r0
 8000c26:	e7d6      	b.n	8000bd6 <__gedf2+0x8a>
 8000c28:	4584      	cmp	ip, r0
 8000c2a:	d0e6      	beq.n	8000bfa <__gedf2+0xae>
 8000c2c:	e7ce      	b.n	8000bcc <__gedf2+0x80>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	000007ff 	.word	0x000007ff

08000c34 <__ledf2>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	4657      	mov	r7, sl
 8000c38:	464e      	mov	r6, r9
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	000d      	movs	r5, r1
 8000c42:	030f      	lsls	r7, r1, #12
 8000c44:	0004      	movs	r4, r0
 8000c46:	4680      	mov	r8, r0
 8000c48:	0fe8      	lsrs	r0, r5, #31
 8000c4a:	0b39      	lsrs	r1, r7, #12
 8000c4c:	4684      	mov	ip, r0
 8000c4e:	b083      	sub	sp, #12
 8000c50:	0058      	lsls	r0, r3, #1
 8000c52:	4f30      	ldr	r7, [pc, #192]	@ (8000d14 <__ledf2+0xe0>)
 8000c54:	0d40      	lsrs	r0, r0, #21
 8000c56:	9101      	str	r1, [sp, #4]
 8000c58:	031e      	lsls	r6, r3, #12
 8000c5a:	0069      	lsls	r1, r5, #1
 8000c5c:	4682      	mov	sl, r0
 8000c5e:	4691      	mov	r9, r2
 8000c60:	0d49      	lsrs	r1, r1, #21
 8000c62:	0b36      	lsrs	r6, r6, #12
 8000c64:	0fd8      	lsrs	r0, r3, #31
 8000c66:	42b9      	cmp	r1, r7
 8000c68:	d020      	beq.n	8000cac <__ledf2+0x78>
 8000c6a:	45ba      	cmp	sl, r7
 8000c6c:	d00f      	beq.n	8000c8e <__ledf2+0x5a>
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d12b      	bne.n	8000cca <__ledf2+0x96>
 8000c72:	9901      	ldr	r1, [sp, #4]
 8000c74:	430c      	orrs	r4, r1
 8000c76:	4651      	mov	r1, sl
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d137      	bne.n	8000cec <__ledf2+0xb8>
 8000c7c:	4332      	orrs	r2, r6
 8000c7e:	d038      	beq.n	8000cf2 <__ledf2+0xbe>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d144      	bne.n	8000d0e <__ledf2+0xda>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d119      	bne.n	8000cbc <__ledf2+0x88>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	e016      	b.n	8000cbc <__ledf2+0x88>
 8000c8e:	4316      	orrs	r6, r2
 8000c90:	d113      	bne.n	8000cba <__ledf2+0x86>
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d102      	bne.n	8000c9c <__ledf2+0x68>
 8000c96:	9f01      	ldr	r7, [sp, #4]
 8000c98:	4327      	orrs	r7, r4
 8000c9a:	d0f3      	beq.n	8000c84 <__ledf2+0x50>
 8000c9c:	4584      	cmp	ip, r0
 8000c9e:	d020      	beq.n	8000ce2 <__ledf2+0xae>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4018      	ands	r0, r3
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e007      	b.n	8000cbc <__ledf2+0x88>
 8000cac:	9f01      	ldr	r7, [sp, #4]
 8000cae:	4327      	orrs	r7, r4
 8000cb0:	d103      	bne.n	8000cba <__ledf2+0x86>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d1f4      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cb6:	4316      	orrs	r6, r2
 8000cb8:	d01f      	beq.n	8000cfa <__ledf2+0xc6>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	4654      	mov	r4, sl
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d0e7      	beq.n	8000ca0 <__ledf2+0x6c>
 8000cd0:	4584      	cmp	ip, r0
 8000cd2:	d1e5      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cd4:	4551      	cmp	r1, sl
 8000cd6:	dce3      	bgt.n	8000ca0 <__ledf2+0x6c>
 8000cd8:	db03      	blt.n	8000ce2 <__ledf2+0xae>
 8000cda:	9b01      	ldr	r3, [sp, #4]
 8000cdc:	42b3      	cmp	r3, r6
 8000cde:	d8df      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000ce0:	d00f      	beq.n	8000d02 <__ledf2+0xce>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0cf      	beq.n	8000c88 <__ledf2+0x54>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e7e7      	b.n	8000cbc <__ledf2+0x88>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d0c9      	beq.n	8000c84 <__ledf2+0x50>
 8000cf0:	e7d4      	b.n	8000c9c <__ledf2+0x68>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d0e1      	beq.n	8000cbc <__ledf2+0x88>
 8000cf8:	e7d2      	b.n	8000ca0 <__ledf2+0x6c>
 8000cfa:	4584      	cmp	ip, r0
 8000cfc:	d1d0      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e7dc      	b.n	8000cbc <__ledf2+0x88>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d8cc      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000d06:	2000      	movs	r0, #0
 8000d08:	45c8      	cmp	r8, r9
 8000d0a:	d2d7      	bcs.n	8000cbc <__ledf2+0x88>
 8000d0c:	e7e9      	b.n	8000ce2 <__ledf2+0xae>
 8000d0e:	4584      	cmp	ip, r0
 8000d10:	d0e3      	beq.n	8000cda <__ledf2+0xa6>
 8000d12:	e7c5      	b.n	8000ca0 <__ledf2+0x6c>
 8000d14:	000007ff 	.word	0x000007ff

08000d18 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000d1e:	201c      	movs	r0, #28
 8000d20:	f003 f9a6 	bl	8004070 <pvPortMalloc>
 8000d24:	0003      	movs	r3, r0
 8000d26:	607b      	str	r3, [r7, #4]

        if( pxEventBits != NULL )
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d053      	beq.n	8000dd6 <xEventGroupCreate+0xbe>
        {
            pxEventBits->uxEventBits = 0;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3304      	adds	r3, #4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 f889 	bl	8000e50 <vListInitialise>
                 * later deleted. */
                pxEventBits->ucStaticallyAllocated = pdFALSE;
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            traceEVENT_GROUP_CREATE( pxEventBits );
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f004 ff50 	bl	8005be4 <prvTraceGetObjectHandle>
 8000d44:	0003      	movs	r3, r0
 8000d46:	001a      	movs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f003 fb2c 	bl	80043aa <prvTraceSetEventGroupNumberLow16>
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <xEventGroupCreate+0xf0>)
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0011      	movs	r1, r2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 fb3f 	bl	80043de <prvTraceSetEventGroupNumberHigh16>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0018      	movs	r0, r3
 8000d64:	f003 fb04 	bl	8004370 <prvTraceGetEventGroupNumberLow16>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	2006      	movs	r0, #6
 8000d70:	f005 f826 	bl	8005dc0 <prvMarkObjectAsUsed>
 8000d74:	f003 fb4e 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 fa10 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8000d80:	0003      	movs	r3, r0
 8000d82:	001a      	movs	r2, r3
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <xEventGroupCreate+0xf4>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d016      	beq.n	8000dbe <xEventGroupCreate+0xa6>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f003 fafa 	bl	800438c <prvTraceGetEventGroupNumberHigh16>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <xEventGroupCreate+0xf4>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	4013      	ands	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00a      	beq.n	8000dbe <xEventGroupCreate+0xa6>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f003 fae0 	bl	8004370 <prvTraceGetEventGroupNumberLow16>
 8000db0:	0003      	movs	r3, r0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	001a      	movs	r2, r3
 8000db6:	2106      	movs	r1, #6
 8000db8:	20c2      	movs	r0, #194	@ 0xc2
 8000dba:	f004 fb3b 	bl	8005434 <prvTraceStoreKernelCall>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f003 fad5 	bl	8004370 <prvTraceGetEventGroupNumberLow16>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	0019      	movs	r1, r3
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f004 fe1c 	bl	8005a0c <prvTraceSetObjectState>
 8000dd4:	e012      	b.n	8000dfc <xEventGroupCreate+0xe4>
        }
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
 8000dd6:	f003 fb1d 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f003 f9df 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8000de2:	0003      	movs	r3, r0
 8000de4:	001a      	movs	r2, r3
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <xEventGroupCreate+0xf4>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4013      	ands	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <xEventGroupCreate+0xe4>
 8000df2:	2200      	movs	r2, #0
 8000df4:	2106      	movs	r1, #6
 8000df6:	20c3      	movs	r0, #195	@ 0xc3
 8000df8:	f004 fb1c 	bl	8005434 <prvTraceStoreKernelCall>
        }

        return pxEventBits;
 8000dfc:	687b      	ldr	r3, [r7, #4]
    }
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	200019ca 	.word	0x200019ca
 8000e0c:	200019c8 	.word	0x200019c8

08000e10 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60bb      	str	r3, [r7, #8]

        if( xEventGroup == NULL )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <uxEventGroupGetNumber+0x18>
        {
            xReturn = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e002      	b.n	8000e2e <uxEventGroupGetNumber+0x1e>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    }
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b004      	add	sp, #16
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	619a      	str	r2, [r3, #24]
    }
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4252      	negs	r2, r2
 8000e68:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	001a      	movs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3308      	adds	r3, #8
 8000e78:	001a      	movs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	d103      	bne.n	8000ec0 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e00c      	b.n	8000eda <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e002      	b.n	8000ece <vListInsert+0x2c>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d2f6      	bcs.n	8000ec8 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b004      	add	sp, #16
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6892      	ldr	r2, [r2, #8]
 8000f24:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6852      	ldr	r2, [r2, #4]
 8000f2e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d103      	bne.n	8000f42 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000f5e:	b5b0      	push	{r4, r5, r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <xQueueGenericReset+0x1e>
 8000f76:	b672      	cpsid	i
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	e7fd      	b.n	8000f78 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <xQueueGenericReset+0x26>
 8000f82:	e06a      	b.n	800105a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d066      	beq.n	800105a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f94:	2400      	movs	r4, #0
 8000f96:	0c15      	lsrs	r5, r2, #16
 8000f98:	0c19      	lsrs	r1, r3, #16
 8000f9a:	b2a8      	uxth	r0, r5
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d104      	bne.n	8000faa <xQueueGenericReset+0x4c>
 8000fa0:	b288      	uxth	r0, r1
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	d013      	beq.n	8000fce <xQueueGenericReset+0x70>
 8000fa6:	1c10      	adds	r0, r2, #0
 8000fa8:	e004      	b.n	8000fb4 <xQueueGenericReset+0x56>
 8000faa:	b289      	uxth	r1, r1
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d10d      	bne.n	8000fcc <xQueueGenericReset+0x6e>
 8000fb0:	1c29      	adds	r1, r5, #0
 8000fb2:	1c18      	adds	r0, r3, #0
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	435a      	muls	r2, r3
 8000fba:	b283      	uxth	r3, r0
 8000fbc:	b289      	uxth	r1, r1
 8000fbe:	434b      	muls	r3, r1
 8000fc0:	0c12      	lsrs	r2, r2, #16
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	141b      	asrs	r3, r3, #16
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d000      	beq.n	8000fce <xQueueGenericReset+0x70>
 8000fcc:	2401      	movs	r4, #1
 8000fce:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8000fd0:	d143      	bne.n	800105a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8000fd2:	f002 ffb5 	bl	8003f40 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	434b      	muls	r3, r1
 8000fe4:	18d2      	adds	r2, r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001000:	1e59      	subs	r1, r3, #1
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	434b      	muls	r3, r1
 8001008:	18d2      	adds	r2, r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2244      	movs	r2, #68	@ 0x44
 8001012:	21ff      	movs	r1, #255	@ 0xff
 8001014:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2245      	movs	r2, #69	@ 0x45
 800101a:	21ff      	movs	r1, #255	@ 0xff
 800101c:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10d      	bne.n	8001040 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3310      	adds	r3, #16
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fef7 	bl	8002e24 <xTaskRemoveFromEventList>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d00c      	beq.n	8001054 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800103a:	f002 ff71 	bl	8003f20 <vPortYield>
 800103e:	e009      	b.n	8001054 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3310      	adds	r3, #16
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff03 	bl	8000e50 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3324      	adds	r3, #36	@ 0x24
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fefe 	bl	8000e50 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001054:	f002 ff86 	bl	8003f64 <vPortExitCritical>
 8001058:	e001      	b.n	800105e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <xQueueGenericReset+0x10c>
 8001064:	b672      	cpsid	i
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	e7fd      	b.n	8001066 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bdb0      	pop	{r4, r5, r7, pc}

08001074 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af02      	add	r7, sp, #8
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800108c:	2000      	movs	r0, #0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	0c19      	lsrs	r1, r3, #16
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1c1e      	adds	r6, r3, #0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	1c15      	adds	r5, r2, #0
 800109e:	b28a      	uxth	r2, r1
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d105      	bne.n	80010b0 <xQueueGenericCreate+0x3c>
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d013      	beq.n	80010d2 <xQueueGenericCreate+0x5e>
 80010aa:	1c19      	adds	r1, r3, #0
 80010ac:	1c34      	adds	r4, r6, #0
 80010ae:	e003      	b.n	80010b8 <xQueueGenericCreate+0x44>
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <xQueueGenericCreate+0x5c>
 80010b6:	1c2c      	adds	r4, r5, #0
 80010b8:	b2b3      	uxth	r3, r6
 80010ba:	b2aa      	uxth	r2, r5
 80010bc:	435a      	muls	r2, r3
 80010be:	b2a3      	uxth	r3, r4
 80010c0:	b289      	uxth	r1, r1
 80010c2:	434b      	muls	r3, r1
 80010c4:	0c12      	lsrs	r2, r2, #16
 80010c6:	189b      	adds	r3, r3, r2
 80010c8:	141b      	asrs	r3, r3, #16
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <xQueueGenericCreate+0x5e>
 80010d0:	2001      	movs	r0, #1
 80010d2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80010d4:	d140      	bne.n	8001158 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80010dc:	3351      	adds	r3, #81	@ 0x51
 80010de:	d83b      	bhi.n	8001158 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4353      	muls	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	3350      	adds	r3, #80	@ 0x50
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 ffbf 	bl	8004070 <pvPortMalloc>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3350      	adds	r3, #80	@ 0x50
 8001104:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781c      	ldrb	r4, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	0023      	movs	r3, r4
 8001116:	f000 f82f 	bl	8001178 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800111a:	e023      	b.n	8001164 <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 800111c:	f003 f97a 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001120:	0003      	movs	r3, r0
 8001122:	0018      	movs	r0, r3
 8001124:	f003 f83c 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001128:	0003      	movs	r3, r0
 800112a:	001a      	movs	r2, r3
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <xQueueGenericCreate+0xfc>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4013      	ands	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d015      	beq.n	8001164 <xQueueGenericCreate+0xf0>
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <xQueueGenericCreate+0x100>)
 800113e:	5cd3      	ldrb	r3, [r2, r3]
 8001140:	3340      	adds	r3, #64	@ 0x40
 8001142:	b2db      	uxtb	r3, r3
 8001144:	0018      	movs	r0, r3
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <xQueueGenericCreate+0x100>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	2200      	movs	r2, #0
 8001150:	0019      	movs	r1, r3
 8001152:	f004 f96f 	bl	8005434 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8001156:	e005      	b.n	8001164 <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <xQueueGenericCreate+0xf2>
 800115e:	b672      	cpsid	i
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	e7fd      	b.n	8001160 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 8001164:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001166:	69fb      	ldr	r3, [r7, #28]
    }
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b009      	add	sp, #36	@ 0x24
 800116e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001170:	200019c8 	.word	0x200019c8
 8001174:	20000008 	.word	0x20000008

08001178 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	001a      	movs	r2, r3
 8001186:	1cfb      	adds	r3, r7, #3
 8001188:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e002      	b.n	800119e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2101      	movs	r1, #1
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff fed5 	bl	8000f5e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	1cfa      	adds	r2, r7, #3
 80011b8:	214c      	movs	r1, #76	@ 0x4c
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f002 ffd2 	bl	800416a <prvTraceGetQueueType>
 80011c6:	0003      	movs	r3, r0
 80011c8:	001a      	movs	r2, r3
 80011ca:	4b3a      	ldr	r3, [pc, #232]	@ (80012b4 <prvInitialiseNewQueue+0x13c>)
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f004 fd08 	bl	8005be4 <prvTraceGetObjectHandle>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f003 f840 	bl	8004262 <prvTraceSetQueueNumberLow16>
 80011e2:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <prvInitialiseNewQueue+0x140>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	0011      	movs	r1, r2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 f853 	bl	8004296 <prvTraceSetQueueNumberHigh16>
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 ffb9 	bl	800416a <prvTraceGetQueueType>
 80011f8:	0003      	movs	r3, r0
 80011fa:	001a      	movs	r2, r3
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <prvInitialiseNewQueue+0x13c>)
 80011fe:	5c9c      	ldrb	r4, [r3, r2]
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	0018      	movs	r0, r3
 8001204:	f003 f810 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001208:	0003      	movs	r3, r0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	0019      	movs	r1, r3
 800120e:	0020      	movs	r0, r4
 8001210:	f004 fdd6 	bl	8005dc0 <prvMarkObjectAsUsed>
 8001214:	f003 f8fe 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001218:	0003      	movs	r3, r0
 800121a:	0018      	movs	r0, r3
 800121c:	f002 ffc0 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001220:	0003      	movs	r3, r0
 8001222:	001a      	movs	r2, r3
 8001224:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <prvInitialiseNewQueue+0x144>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	4013      	ands	r3, r2
 800122a:	b29b      	uxth	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d029      	beq.n	8001284 <prvInitialiseNewQueue+0x10c>
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	0018      	movs	r0, r3
 8001234:	f003 f806 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001238:	0003      	movs	r3, r0
 800123a:	001a      	movs	r2, r3
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <prvInitialiseNewQueue+0x144>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	4013      	ands	r3, r2
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01d      	beq.n	8001284 <prvInitialiseNewQueue+0x10c>
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	0018      	movs	r0, r3
 800124c:	f002 ff8d 	bl	800416a <prvTraceGetQueueType>
 8001250:	0003      	movs	r3, r0
 8001252:	001a      	movs	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <prvInitialiseNewQueue+0x13c>)
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	3318      	adds	r3, #24
 800125a:	b2db      	uxtb	r3, r3
 800125c:	001d      	movs	r5, r3
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	0018      	movs	r0, r3
 8001262:	f002 ff82 	bl	800416a <prvTraceGetQueueType>
 8001266:	0003      	movs	r3, r0
 8001268:	001a      	movs	r2, r3
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <prvInitialiseNewQueue+0x13c>)
 800126c:	5c9c      	ldrb	r4, [r3, r2]
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	0018      	movs	r0, r3
 8001272:	f002 ffd9 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001276:	0003      	movs	r3, r0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	001a      	movs	r2, r3
 800127c:	0021      	movs	r1, r4
 800127e:	0028      	movs	r0, r5
 8001280:	f004 f8d8 	bl	8005434 <prvTraceStoreKernelCall>
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	0018      	movs	r0, r3
 8001288:	f002 ff6f 	bl	800416a <prvTraceGetQueueType>
 800128c:	0003      	movs	r3, r0
 800128e:	001a      	movs	r2, r3
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <prvInitialiseNewQueue+0x13c>)
 8001292:	5c9c      	ldrb	r4, [r3, r2]
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	0018      	movs	r0, r3
 8001298:	f002 ffc6 	bl	8004228 <prvTraceGetQueueNumberLow16>
 800129c:	0003      	movs	r3, r0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	0019      	movs	r1, r3
 80012a4:	0020      	movs	r0, r4
 80012a6:	f004 fbb1 	bl	8005a0c <prvTraceSetObjectState>
}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	20000008 	.word	0x20000008
 80012b8:	200019ca 	.word	0x200019ca
 80012bc:	200019c8 	.word	0x200019c8

080012c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <xQueueGenericSend+0x22>
 80012dc:	b672      	cpsid	i
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	e7fd      	b.n	80012de <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <xQueueGenericSend+0x30>
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <xQueueGenericSend+0x34>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <xQueueGenericSend+0x36>
 80012f4:	2300      	movs	r3, #0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <xQueueGenericSend+0x40>
 80012fa:	b672      	cpsid	i
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	e7fd      	b.n	80012fc <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d103      	bne.n	800130e <xQueueGenericSend+0x4e>
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <xQueueGenericSend+0x52>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <xQueueGenericSend+0x54>
 8001312:	2300      	movs	r3, #0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <xQueueGenericSend+0x5e>
 8001318:	b672      	cpsid	i
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	e7fd      	b.n	800131a <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800131e:	f001 ff6b 	bl	80031f8 <xTaskGetSchedulerState>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d102      	bne.n	800132c <xQueueGenericSend+0x6c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <xQueueGenericSend+0x70>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <xQueueGenericSend+0x72>
 8001330:	2300      	movs	r3, #0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <xQueueGenericSend+0x7c>
 8001336:	b672      	cpsid	i
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	e7fd      	b.n	8001338 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800133c:	f002 fe00 	bl	8003f40 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001348:	429a      	cmp	r2, r3
 800134a:	d303      	bcc.n	8001354 <xQueueGenericSend+0x94>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d000      	beq.n	8001354 <xQueueGenericSend+0x94>
 8001352:	e07f      	b.n	8001454 <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 8001354:	f003 f85e 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001358:	0003      	movs	r3, r0
 800135a:	0018      	movs	r0, r3
 800135c:	f002 ff20 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001360:	0003      	movs	r3, r0
 8001362:	001a      	movs	r2, r3
 8001364:	4bc7      	ldr	r3, [pc, #796]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4013      	ands	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d02e      	beq.n	80013ce <xQueueGenericSend+0x10e>
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	0018      	movs	r0, r3
 8001374:	f002 ff66 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001378:	0003      	movs	r3, r0
 800137a:	001a      	movs	r2, r3
 800137c:	4bc1      	ldr	r3, [pc, #772]	@ (8001684 <xQueueGenericSend+0x3c4>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4013      	ands	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d022      	beq.n	80013ce <xQueueGenericSend+0x10e>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10b      	bne.n	80013a6 <xQueueGenericSend+0xe6>
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	0018      	movs	r0, r3
 8001392:	f002 feea 	bl	800416a <prvTraceGetQueueType>
 8001396:	0003      	movs	r3, r0
 8001398:	001a      	movs	r2, r3
 800139a:	4bbb      	ldr	r3, [pc, #748]	@ (8001688 <xQueueGenericSend+0x3c8>)
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	3320      	adds	r3, #32
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	001d      	movs	r5, r3
 80013a4:	e000      	b.n	80013a8 <xQueueGenericSend+0xe8>
 80013a6:	2525      	movs	r5, #37	@ 0x25
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fedd 	bl	800416a <prvTraceGetQueueType>
 80013b0:	0003      	movs	r3, r0
 80013b2:	001a      	movs	r2, r3
 80013b4:	4bb4      	ldr	r3, [pc, #720]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80013b6:	5c9c      	ldrb	r4, [r3, r2]
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f002 ff34 	bl	8004228 <prvTraceGetQueueNumberLow16>
 80013c0:	0003      	movs	r3, r0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	001a      	movs	r2, r3
 80013c6:	0021      	movs	r1, r4
 80013c8:	0028      	movs	r0, r5
 80013ca:	f004 f833 	bl	8005434 <prvTraceStoreKernelCall>
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f002 feca 	bl	800416a <prvTraceGetQueueType>
 80013d6:	0003      	movs	r3, r0
 80013d8:	001a      	movs	r2, r3
 80013da:	4bab      	ldr	r3, [pc, #684]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80013dc:	5c9c      	ldrb	r4, [r3, r2]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f002 ff21 	bl	8004228 <prvTraceGetQueueNumberLow16>
 80013e6:	0003      	movs	r3, r0
 80013e8:	b2dd      	uxtb	r5, r3
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f002 febc 	bl	800416a <prvTraceGetQueueType>
 80013f2:	0003      	movs	r3, r0
 80013f4:	001a      	movs	r2, r3
 80013f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d005      	beq.n	800140a <xQueueGenericSend+0x14a>
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3301      	adds	r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	e000      	b.n	800140c <xQueueGenericSend+0x14c>
 800140a:	2300      	movs	r3, #0
 800140c:	001a      	movs	r2, r3
 800140e:	0029      	movs	r1, r5
 8001410:	0020      	movs	r0, r4
 8001412:	f004 fafb 	bl	8005a0c <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 fd52 	bl	8001ec6 <prvCopyDataToQueue>
 8001422:	0003      	movs	r3, r0
 8001424:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	3324      	adds	r3, #36	@ 0x24
 8001432:	0018      	movs	r0, r3
 8001434:	f001 fcf6 	bl	8002e24 <xTaskRemoveFromEventList>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d007      	beq.n	800144c <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800143c:	f002 fd70 	bl	8003f20 <vPortYield>
 8001440:	e004      	b.n	800144c <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001448:	f002 fd6a 	bl	8003f20 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800144c:	f002 fd8a 	bl	8003f64 <vPortExitCritical>
                return pdPASS;
 8001450:	2301      	movs	r3, #1
 8001452:	e113      	b.n	800167c <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d140      	bne.n	80014dc <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800145a:	f002 fd83 	bl	8003f64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800145e:	f002 ffd9 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001462:	0003      	movs	r3, r0
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fe9b 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800146a:	0003      	movs	r3, r0
 800146c:	001a      	movs	r2, r3
 800146e:	4b85      	ldr	r3, [pc, #532]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	4013      	ands	r3, r2
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d02e      	beq.n	80014d8 <xQueueGenericSend+0x218>
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	0018      	movs	r0, r3
 800147e:	f002 fee1 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001482:	0003      	movs	r3, r0
 8001484:	001a      	movs	r2, r3
 8001486:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	4013      	ands	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d022      	beq.n	80014d8 <xQueueGenericSend+0x218>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <xQueueGenericSend+0x1f0>
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	0018      	movs	r0, r3
 800149c:	f002 fe65 	bl	800416a <prvTraceGetQueueType>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	4b78      	ldr	r3, [pc, #480]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80014a6:	5c9b      	ldrb	r3, [r3, r2]
 80014a8:	3348      	adds	r3, #72	@ 0x48
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	001d      	movs	r5, r3
 80014ae:	e000      	b.n	80014b2 <xQueueGenericSend+0x1f2>
 80014b0:	254d      	movs	r5, #77	@ 0x4d
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f002 fe58 	bl	800416a <prvTraceGetQueueType>
 80014ba:	0003      	movs	r3, r0
 80014bc:	001a      	movs	r2, r3
 80014be:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80014c0:	5c9c      	ldrb	r4, [r3, r2]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f002 feaf 	bl	8004228 <prvTraceGetQueueNumberLow16>
 80014ca:	0003      	movs	r3, r0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	001a      	movs	r2, r3
 80014d0:	0021      	movs	r1, r4
 80014d2:	0028      	movs	r0, r5
 80014d4:	f003 ffae 	bl	8005434 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	e0cf      	b.n	800167c <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80014e2:	2314      	movs	r3, #20
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	0018      	movs	r0, r3
 80014e8:	f001 fd7e 	bl	8002fe8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80014f0:	f002 fd38 	bl	8003f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80014f4:	f001 f936 	bl	8002764 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80014f8:	f002 fd22 	bl	8003f40 <vPortEnterCritical>
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	2244      	movs	r2, #68	@ 0x44
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	d103      	bne.n	8001510 <xQueueGenericSend+0x250>
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2244      	movs	r2, #68	@ 0x44
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	2245      	movs	r2, #69	@ 0x45
 8001514:	5c9b      	ldrb	r3, [r3, r2]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	d103      	bne.n	8001524 <xQueueGenericSend+0x264>
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	2245      	movs	r2, #69	@ 0x45
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]
 8001524:	f002 fd1e 	bl	8003f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	2314      	movs	r3, #20
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	0011      	movs	r1, r2
 8001530:	0018      	movs	r0, r3
 8001532:	f001 fd6d 	bl	8003010 <xTaskCheckForTimeOut>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d15c      	bne.n	80015f4 <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	0018      	movs	r0, r3
 800153e:	f000 fdc7 	bl	80020d0 <prvIsQueueFull>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d04f      	beq.n	80015e6 <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8001546:	f002 ff65 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 800154a:	0003      	movs	r3, r0
 800154c:	0018      	movs	r0, r3
 800154e:	f002 fe27 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001552:	0003      	movs	r3, r0
 8001554:	001a      	movs	r2, r3
 8001556:	4b4b      	ldr	r3, [pc, #300]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4013      	ands	r3, r2
 800155c:	b29b      	uxth	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d02e      	beq.n	80015c0 <xQueueGenericSend+0x300>
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	0018      	movs	r0, r3
 8001566:	f002 fe6d 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 800156a:	0003      	movs	r3, r0
 800156c:	001a      	movs	r2, r3
 800156e:	4b45      	ldr	r3, [pc, #276]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4013      	ands	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d022      	beq.n	80015c0 <xQueueGenericSend+0x300>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <xQueueGenericSend+0x2d8>
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	0018      	movs	r0, r3
 8001584:	f002 fdf1 	bl	800416a <prvTraceGetQueueType>
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	4b3e      	ldr	r3, [pc, #248]	@ (8001688 <xQueueGenericSend+0x3c8>)
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	3370      	adds	r3, #112	@ 0x70
 8001592:	b2db      	uxtb	r3, r3
 8001594:	001d      	movs	r5, r3
 8001596:	e000      	b.n	800159a <xQueueGenericSend+0x2da>
 8001598:	2575      	movs	r5, #117	@ 0x75
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	0018      	movs	r0, r3
 800159e:	f002 fde4 	bl	800416a <prvTraceGetQueueType>
 80015a2:	0003      	movs	r3, r0
 80015a4:	001a      	movs	r2, r3
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <xQueueGenericSend+0x3c8>)
 80015a8:	5c9c      	ldrb	r4, [r3, r2]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f002 fe3b 	bl	8004228 <prvTraceGetQueueNumberLow16>
 80015b2:	0003      	movs	r3, r0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	001a      	movs	r2, r3
 80015b8:	0021      	movs	r1, r4
 80015ba:	0028      	movs	r0, r5
 80015bc:	f003 ff3a 	bl	8005434 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	3310      	adds	r3, #16
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 fb8f 	bl	8002cec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 fd09 	bl	8001fe8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80015d6:	f001 f8d1 	bl	800277c <xTaskResumeAll>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d000      	beq.n	80015e0 <xQueueGenericSend+0x320>
 80015de:	e6ad      	b.n	800133c <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 80015e0:	f002 fc9e 	bl	8003f20 <vPortYield>
 80015e4:	e6aa      	b.n	800133c <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 fcfd 	bl	8001fe8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015ee:	f001 f8c5 	bl	800277c <xTaskResumeAll>
 80015f2:	e6a3      	b.n	800133c <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fcf6 	bl	8001fe8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015fc:	f001 f8be 	bl	800277c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001600:	f002 ff08 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001604:	0003      	movs	r3, r0
 8001606:	0018      	movs	r0, r3
 8001608:	f002 fdca 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800160c:	0003      	movs	r3, r0
 800160e:	001a      	movs	r2, r3
 8001610:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <xQueueGenericSend+0x3c4>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4013      	ands	r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02e      	beq.n	800167a <xQueueGenericSend+0x3ba>
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	0018      	movs	r0, r3
 8001620:	f002 fe10 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001624:	0003      	movs	r3, r0
 8001626:	001a      	movs	r2, r3
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <xQueueGenericSend+0x3c4>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4013      	ands	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d022      	beq.n	800167a <xQueueGenericSend+0x3ba>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10b      	bne.n	8001652 <xQueueGenericSend+0x392>
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	0018      	movs	r0, r3
 800163e:	f002 fd94 	bl	800416a <prvTraceGetQueueType>
 8001642:	0003      	movs	r3, r0
 8001644:	001a      	movs	r2, r3
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <xQueueGenericSend+0x3c8>)
 8001648:	5c9b      	ldrb	r3, [r3, r2]
 800164a:	3348      	adds	r3, #72	@ 0x48
 800164c:	b2db      	uxtb	r3, r3
 800164e:	001d      	movs	r5, r3
 8001650:	e000      	b.n	8001654 <xQueueGenericSend+0x394>
 8001652:	254d      	movs	r5, #77	@ 0x4d
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	0018      	movs	r0, r3
 8001658:	f002 fd87 	bl	800416a <prvTraceGetQueueType>
 800165c:	0003      	movs	r3, r0
 800165e:	001a      	movs	r2, r3
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <xQueueGenericSend+0x3c8>)
 8001662:	5c9c      	ldrb	r4, [r3, r2]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	0018      	movs	r0, r3
 8001668:	f002 fdde 	bl	8004228 <prvTraceGetQueueNumberLow16>
 800166c:	0003      	movs	r3, r0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	001a      	movs	r2, r3
 8001672:	0021      	movs	r1, r4
 8001674:	0028      	movs	r0, r5
 8001676:	f003 fedd 	bl	8005434 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 800167a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b00a      	add	sp, #40	@ 0x28
 8001682:	bdb0      	pop	{r4, r5, r7, pc}
 8001684:	200019c8 	.word	0x200019c8
 8001688:	20000008 	.word	0x20000008

0800168c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <xQueueGenericSendFromISR+0x1e>
 80016a4:	b672      	cpsid	i
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	e7fd      	b.n	80016a6 <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <xQueueGenericSendFromISR+0x2c>
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <xQueueGenericSendFromISR+0x30>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <xQueueGenericSendFromISR+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <xQueueGenericSendFromISR+0x3c>
 80016c2:	b672      	cpsid	i
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	e7fd      	b.n	80016c4 <xQueueGenericSendFromISR+0x38>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d103      	bne.n	80016d6 <xQueueGenericSendFromISR+0x4a>
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <xQueueGenericSendFromISR+0x4e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <xQueueGenericSendFromISR+0x50>
 80016da:	2300      	movs	r3, #0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <xQueueGenericSendFromISR+0x5a>
 80016e0:	b672      	cpsid	i
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	e7fd      	b.n	80016e2 <xQueueGenericSendFromISR+0x56>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80016e6:	f002 fc55 	bl	8003f94 <ulSetInterruptMaskFromISR>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d303      	bcc.n	8001702 <xQueueGenericSendFromISR+0x76>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d000      	beq.n	8001702 <xQueueGenericSendFromISR+0x76>
 8001700:	e08b      	b.n	800181a <xQueueGenericSendFromISR+0x18e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001702:	231b      	movs	r3, #27
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	6a3a      	ldr	r2, [r7, #32]
 8001708:	2145      	movs	r1, #69	@ 0x45
 800170a:	5c52      	ldrb	r2, [r2, r1]
 800170c:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001712:	617b      	str	r3, [r7, #20]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	0018      	movs	r0, r3
 8001718:	f002 fd94 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 800171c:	0003      	movs	r3, r0
 800171e:	001a      	movs	r2, r3
 8001720:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <xQueueGenericSendFromISR+0x204>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4013      	ands	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d022      	beq.n	8001772 <xQueueGenericSendFromISR+0xe6>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10b      	bne.n	800174a <xQueueGenericSendFromISR+0xbe>
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	0018      	movs	r0, r3
 8001736:	f002 fd18 	bl	800416a <prvTraceGetQueueType>
 800173a:	0003      	movs	r3, r0
 800173c:	001a      	movs	r2, r3
 800173e:	4b55      	ldr	r3, [pc, #340]	@ (8001894 <xQueueGenericSendFromISR+0x208>)
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	3330      	adds	r3, #48	@ 0x30
 8001744:	b2db      	uxtb	r3, r3
 8001746:	001d      	movs	r5, r3
 8001748:	e000      	b.n	800174c <xQueueGenericSendFromISR+0xc0>
 800174a:	2535      	movs	r5, #53	@ 0x35
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	0018      	movs	r0, r3
 8001750:	f002 fd0b 	bl	800416a <prvTraceGetQueueType>
 8001754:	0003      	movs	r3, r0
 8001756:	001a      	movs	r2, r3
 8001758:	4b4e      	ldr	r3, [pc, #312]	@ (8001894 <xQueueGenericSendFromISR+0x208>)
 800175a:	5c9c      	ldrb	r4, [r3, r2]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	0018      	movs	r0, r3
 8001760:	f002 fd62 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001764:	0003      	movs	r3, r0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	001a      	movs	r2, r3
 800176a:	0021      	movs	r1, r4
 800176c:	0028      	movs	r0, r5
 800176e:	f003 fe61 	bl	8005434 <prvTraceStoreKernelCall>
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	0018      	movs	r0, r3
 8001776:	f002 fcf8 	bl	800416a <prvTraceGetQueueType>
 800177a:	0003      	movs	r3, r0
 800177c:	001a      	movs	r2, r3
 800177e:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <xQueueGenericSendFromISR+0x208>)
 8001780:	5c9c      	ldrb	r4, [r3, r2]
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	0018      	movs	r0, r3
 8001786:	f002 fd4f 	bl	8004228 <prvTraceGetQueueNumberLow16>
 800178a:	0003      	movs	r3, r0
 800178c:	b2d9      	uxtb	r1, r3
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3301      	adds	r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	001a      	movs	r2, r3
 800179a:	0020      	movs	r0, r4
 800179c:	f004 f936 	bl	8005a0c <prvTraceSetObjectState>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fb8d 	bl	8001ec6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80017ac:	231b      	movs	r3, #27
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	d111      	bne.n	80017dc <xQueueGenericSendFromISR+0x150>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d029      	beq.n	8001814 <xQueueGenericSendFromISR+0x188>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	3324      	adds	r3, #36	@ 0x24
 80017c4:	0018      	movs	r0, r3
 80017c6:	f001 fb2d 	bl	8002e24 <xTaskRemoveFromEventList>
 80017ca:	1e03      	subs	r3, r0, #0
 80017cc:	d022      	beq.n	8001814 <xQueueGenericSendFromISR+0x188>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01f      	beq.n	8001814 <xQueueGenericSendFromISR+0x188>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e01b      	b.n	8001814 <xQueueGenericSendFromISR+0x188>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80017dc:	f001 f8dc 	bl	8002998 <uxTaskGetNumberOfTasks>
 80017e0:	0003      	movs	r3, r0
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	211b      	movs	r1, #27
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d910      	bls.n	8001814 <xQueueGenericSendFromISR+0x188>
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017fa:	d102      	bne.n	8001802 <xQueueGenericSendFromISR+0x176>
 80017fc:	b672      	cpsid	i
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	e7fd      	b.n	80017fe <xQueueGenericSendFromISR+0x172>
 8001802:	231b      	movs	r3, #27
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	b259      	sxtb	r1, r3
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	2245      	movs	r2, #69	@ 0x45
 8001812:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8001814:	2301      	movs	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 8001818:	e030      	b.n	800187c <xQueueGenericSendFromISR+0x1f0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	0018      	movs	r0, r3
 800181e:	f002 fd11 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001822:	0003      	movs	r3, r0
 8001824:	001a      	movs	r2, r3
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <xQueueGenericSendFromISR+0x204>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4013      	ands	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d022      	beq.n	8001878 <xQueueGenericSendFromISR+0x1ec>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10b      	bne.n	8001850 <xQueueGenericSendFromISR+0x1c4>
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	0018      	movs	r0, r3
 800183c:	f002 fc95 	bl	800416a <prvTraceGetQueueType>
 8001840:	0003      	movs	r3, r0
 8001842:	001a      	movs	r2, r3
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <xQueueGenericSendFromISR+0x208>)
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	3358      	adds	r3, #88	@ 0x58
 800184a:	b2db      	uxtb	r3, r3
 800184c:	001d      	movs	r5, r3
 800184e:	e000      	b.n	8001852 <xQueueGenericSendFromISR+0x1c6>
 8001850:	255d      	movs	r5, #93	@ 0x5d
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	0018      	movs	r0, r3
 8001856:	f002 fc88 	bl	800416a <prvTraceGetQueueType>
 800185a:	0003      	movs	r3, r0
 800185c:	001a      	movs	r2, r3
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <xQueueGenericSendFromISR+0x208>)
 8001860:	5c9c      	ldrb	r4, [r3, r2]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	0018      	movs	r0, r3
 8001866:	f002 fcdf 	bl	8004228 <prvTraceGetQueueNumberLow16>
 800186a:	0003      	movs	r3, r0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	001a      	movs	r2, r3
 8001870:	0021      	movs	r1, r4
 8001872:	0028      	movs	r0, r5
 8001874:	f003 fdde 	bl	8005434 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	0018      	movs	r0, r3
 8001880:	f002 fb8e 	bl	8003fa0 <vClearInterruptMaskFromISR>

    return xReturn;
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b00a      	add	sp, #40	@ 0x28
 800188c:	bdb0      	pop	{r4, r5, r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	200019c8 	.word	0x200019c8
 8001894:	20000008 	.word	0x20000008

08001898 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 f805 	bl	80018b8 <MyWrapper_xQueueGiveFromISR>
 80018ae:	0003      	movs	r3, r0
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <MyWrapper_xQueueGiveFromISR+0x1c>
 80018ce:	b672      	cpsid	i
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	e7fd      	b.n	80018d0 <MyWrapper_xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <MyWrapper_xQueueGiveFromISR+0x2a>
 80018dc:	b672      	cpsid	i
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	e7fd      	b.n	80018de <MyWrapper_xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <MyWrapper_xQueueGiveFromISR+0x3a>
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <MyWrapper_xQueueGiveFromISR+0x3e>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <MyWrapper_xQueueGiveFromISR+0x40>
 80018f6:	2300      	movs	r3, #0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <MyWrapper_xQueueGiveFromISR+0x4a>
 80018fc:	b672      	cpsid	i
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	e7fd      	b.n	80018fe <MyWrapper_xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001902:	f002 fb47 	bl	8003f94 <ulSetInterruptMaskFromISR>
 8001906:	0003      	movs	r3, r0
 8001908:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190e:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	429a      	cmp	r2, r3
 8001918:	d300      	bcc.n	800191c <MyWrapper_xQueueGiveFromISR+0x64>
 800191a:	e086      	b.n	8001a2a <MyWrapper_xQueueGiveFromISR+0x172>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800191c:	2317      	movs	r3, #23
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	2145      	movs	r1, #69	@ 0x45
 8001924:	5c52      	ldrb	r2, [r2, r1]
 8001926:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	0018      	movs	r0, r3
 800192c:	f002 fc8a 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	4013      	ands	r3, r2
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d022      	beq.n	8001986 <MyWrapper_xQueueGiveFromISR+0xce>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10b      	bne.n	800195e <MyWrapper_xQueueGiveFromISR+0xa6>
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	0018      	movs	r0, r3
 800194a:	f002 fc0e 	bl	800416a <prvTraceGetQueueType>
 800194e:	0003      	movs	r3, r0
 8001950:	001a      	movs	r2, r3
 8001952:	4b54      	ldr	r3, [pc, #336]	@ (8001aa4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001954:	5c9b      	ldrb	r3, [r3, r2]
 8001956:	3330      	adds	r3, #48	@ 0x30
 8001958:	b2db      	uxtb	r3, r3
 800195a:	001d      	movs	r5, r3
 800195c:	e000      	b.n	8001960 <MyWrapper_xQueueGiveFromISR+0xa8>
 800195e:	2535      	movs	r5, #53	@ 0x35
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	0018      	movs	r0, r3
 8001964:	f002 fc01 	bl	800416a <prvTraceGetQueueType>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 800196e:	5c9c      	ldrb	r4, [r3, r2]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	0018      	movs	r0, r3
 8001974:	f002 fc58 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001978:	0003      	movs	r3, r0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	001a      	movs	r2, r3
 800197e:	0021      	movs	r1, r4
 8001980:	0028      	movs	r0, r5
 8001982:	f003 fd57 	bl	8005434 <prvTraceStoreKernelCall>
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	0018      	movs	r0, r3
 800198a:	f002 fbee 	bl	800416a <prvTraceGetQueueType>
 800198e:	0003      	movs	r3, r0
 8001990:	001a      	movs	r2, r3
 8001992:	4b44      	ldr	r3, [pc, #272]	@ (8001aa4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001994:	5c9c      	ldrb	r4, [r3, r2]
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	0018      	movs	r0, r3
 800199a:	f002 fc45 	bl	8004228 <prvTraceGetQueueNumberLow16>
 800199e:	0003      	movs	r3, r0
 80019a0:	b2d9      	uxtb	r1, r3
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	001a      	movs	r2, r3
 80019ae:	0020      	movs	r0, r4
 80019b0:	f004 f82c 	bl	8005a0c <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80019bc:	2317      	movs	r3, #23
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	d111      	bne.n	80019ec <MyWrapper_xQueueGiveFromISR+0x134>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d029      	beq.n	8001a24 <MyWrapper_xQueueGiveFromISR+0x16c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	3324      	adds	r3, #36	@ 0x24
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 fa25 	bl	8002e24 <xTaskRemoveFromEventList>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d022      	beq.n	8001a24 <MyWrapper_xQueueGiveFromISR+0x16c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01f      	beq.n	8001a24 <MyWrapper_xQueueGiveFromISR+0x16c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e01b      	b.n	8001a24 <MyWrapper_xQueueGiveFromISR+0x16c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80019ec:	f000 ffd4 	bl	8002998 <uxTaskGetNumberOfTasks>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	2117      	movs	r1, #23
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <MyWrapper_xQueueGiveFromISR+0x16c>
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a0a:	d102      	bne.n	8001a12 <MyWrapper_xQueueGiveFromISR+0x15a>
 8001a0c:	b672      	cpsid	i
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	e7fd      	b.n	8001a0e <MyWrapper_xQueueGiveFromISR+0x156>
 8001a12:	2317      	movs	r3, #23
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	b259      	sxtb	r1, r3
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2245      	movs	r2, #69	@ 0x45
 8001a22:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a28:	e030      	b.n	8001a8c <MyWrapper_xQueueGiveFromISR+0x1d4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f002 fc09 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001a32:	0003      	movs	r3, r0
 8001a34:	001a      	movs	r2, r3
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d022      	beq.n	8001a88 <MyWrapper_xQueueGiveFromISR+0x1d0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10b      	bne.n	8001a60 <MyWrapper_xQueueGiveFromISR+0x1a8>
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f002 fb8d 	bl	800416a <prvTraceGetQueueType>
 8001a50:	0003      	movs	r3, r0
 8001a52:	001a      	movs	r2, r3
 8001a54:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001a56:	5c9b      	ldrb	r3, [r3, r2]
 8001a58:	3358      	adds	r3, #88	@ 0x58
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	001d      	movs	r5, r3
 8001a5e:	e000      	b.n	8001a62 <MyWrapper_xQueueGiveFromISR+0x1aa>
 8001a60:	255d      	movs	r5, #93	@ 0x5d
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 fb80 	bl	800416a <prvTraceGetQueueType>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8001a70:	5c9c      	ldrb	r4, [r3, r2]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f002 fbd7 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	001a      	movs	r2, r3
 8001a80:	0021      	movs	r1, r4
 8001a82:	0028      	movs	r0, r5
 8001a84:	f003 fcd6 	bl	8005434 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 fa86 	bl	8003fa0 <vClearInterruptMaskFromISR>

    return xReturn;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b00a      	add	sp, #40	@ 0x28
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	200019c8 	.word	0x200019c8
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <xQueueReceive+0x20>
 8001ac2:	b672      	cpsid	i
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	e7fd      	b.n	8001ac4 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <xQueueReceive+0x2e>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <xQueueReceive+0x32>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <xQueueReceive+0x34>
 8001ada:	2300      	movs	r3, #0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <xQueueReceive+0x3e>
 8001ae0:	b672      	cpsid	i
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	e7fd      	b.n	8001ae2 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ae6:	f001 fb87 	bl	80031f8 <xTaskGetSchedulerState>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d102      	bne.n	8001af4 <xQueueReceive+0x4c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <xQueueReceive+0x50>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <xQueueReceive+0x52>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <xQueueReceive+0x5c>
 8001afe:	b672      	cpsid	i
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	e7fd      	b.n	8001b00 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b04:	f002 fa1c 	bl	8003f40 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d100      	bne.n	8001b16 <xQueueReceive+0x6e>
 8001b14:	e07d      	b.n	8001c12 <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 fa3d 	bl	8001f9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001b22:	f002 fc77 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001b26:	0003      	movs	r3, r0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f002 fb39 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	001a      	movs	r2, r3
 8001b32:	4bd2      	ldr	r3, [pc, #840]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4013      	ands	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d029      	beq.n	8001b92 <xQueueReceive+0xea>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f002 fb7f 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001b46:	0003      	movs	r3, r0
 8001b48:	001a      	movs	r2, r3
 8001b4a:	4bcc      	ldr	r3, [pc, #816]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01d      	beq.n	8001b92 <xQueueReceive+0xea>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f002 fb06 	bl	800416a <prvTraceGetQueueType>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	001a      	movs	r2, r3
 8001b62:	4bc7      	ldr	r3, [pc, #796]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001b64:	5c9b      	ldrb	r3, [r3, r2]
 8001b66:	3328      	adds	r3, #40	@ 0x28
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	001d      	movs	r5, r3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f002 fafb 	bl	800416a <prvTraceGetQueueType>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	4bc1      	ldr	r3, [pc, #772]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001b7a:	5c9c      	ldrb	r4, [r3, r2]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f002 fb52 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001b84:	0003      	movs	r3, r0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	001a      	movs	r2, r3
 8001b8a:	0021      	movs	r1, r4
 8001b8c:	0028      	movs	r0, r5
 8001b8e:	f003 fc51 	bl	8005434 <prvTraceStoreKernelCall>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 fae8 	bl	800416a <prvTraceGetQueueType>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	4bb8      	ldr	r3, [pc, #736]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001ba0:	5c9c      	ldrb	r4, [r3, r2]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f002 fb3f 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001baa:	0003      	movs	r3, r0
 8001bac:	b2dd      	uxtb	r5, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f002 fada 	bl	800416a <prvTraceGetQueueType>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	001a      	movs	r2, r3
 8001bba:	4bb1      	ldr	r3, [pc, #708]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d108      	bne.n	8001bd4 <xQueueReceive+0x12c>
 8001bc2:	f002 fc27 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f002 fadb 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e004      	b.n	8001bde <xQueueReceive+0x136>
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	001a      	movs	r2, r3
 8001be0:	0029      	movs	r1, r5
 8001be2:	0020      	movs	r0, r4
 8001be4:	f003 ff12 	bl	8005a0c <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f001 f911 	bl	8002e24 <xTaskRemoveFromEventList>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001c06:	f002 f98b 	bl	8003f20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001c0a:	f002 f9ab 	bl	8003f64 <vPortExitCritical>
                return pdPASS;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e12f      	b.n	8001e72 <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d13b      	bne.n	8001c90 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001c18:	f002 f9a4 	bl	8003f64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001c1c:	f002 fbfa 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001c20:	0003      	movs	r3, r0
 8001c22:	0018      	movs	r0, r3
 8001c24:	f002 fabc 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	4b93      	ldr	r3, [pc, #588]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	4013      	ands	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d029      	beq.n	8001c8c <xQueueReceive+0x1e4>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f002 fb02 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001c40:	0003      	movs	r3, r0
 8001c42:	001a      	movs	r2, r3
 8001c44:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01d      	beq.n	8001c8c <xQueueReceive+0x1e4>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f002 fa89 	bl	800416a <prvTraceGetQueueType>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	4b88      	ldr	r3, [pc, #544]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	3350      	adds	r3, #80	@ 0x50
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	001d      	movs	r5, r3
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f002 fa7e 	bl	800416a <prvTraceGetQueueType>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	001a      	movs	r2, r3
 8001c72:	4b83      	ldr	r3, [pc, #524]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001c74:	5c9c      	ldrb	r4, [r3, r2]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f002 fad5 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	001a      	movs	r2, r3
 8001c84:	0021      	movs	r1, r4
 8001c86:	0028      	movs	r0, r5
 8001c88:	f003 fbd4 	bl	8005434 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e0f0      	b.n	8001e72 <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c96:	2314      	movs	r3, #20
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f001 f9a4 	bl	8002fe8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001ca4:	f002 f95e 	bl	8003f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ca8:	f000 fd5c 	bl	8002764 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001cac:	f002 f948 	bl	8003f40 <vPortEnterCritical>
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2244      	movs	r2, #68	@ 0x44
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	d103      	bne.n	8001cc4 <xQueueReceive+0x21c>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2244      	movs	r2, #68	@ 0x44
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2245      	movs	r2, #69	@ 0x45
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	d103      	bne.n	8001cd8 <xQueueReceive+0x230>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2245      	movs	r2, #69	@ 0x45
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]
 8001cd8:	f002 f944 	bl	8003f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cdc:	1d3a      	adds	r2, r7, #4
 8001cde:	2314      	movs	r3, #20
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 f993 	bl	8003010 <xTaskCheckForTimeOut>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d000      	beq.n	8001cf0 <xQueueReceive+0x248>
 8001cee:	e07a      	b.n	8001de6 <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f9d6 	bl	80020a4 <prvIsQueueEmpty>
 8001cf8:	1e03      	subs	r3, r0, #0
 8001cfa:	d06d      	beq.n	8001dd8 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001cfc:	f002 fb8a 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001d00:	0003      	movs	r3, r0
 8001d02:	0018      	movs	r0, r3
 8001d04:	f002 fa4c 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	4013      	ands	r3, r2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d029      	beq.n	8001d6c <xQueueReceive+0x2c4>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f002 fa92 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001d20:	0003      	movs	r3, r0
 8001d22:	001a      	movs	r2, r3
 8001d24:	4b55      	ldr	r3, [pc, #340]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01d      	beq.n	8001d6c <xQueueReceive+0x2c4>
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f002 fa19 	bl	800416a <prvTraceGetQueueType>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	3368      	adds	r3, #104	@ 0x68
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	001d      	movs	r5, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f002 fa0e 	bl	800416a <prvTraceGetQueueType>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	001a      	movs	r2, r3
 8001d52:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001d54:	5c9c      	ldrb	r4, [r3, r2]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f002 fa65 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	001a      	movs	r2, r3
 8001d64:	0021      	movs	r1, r4
 8001d66:	0028      	movs	r0, r5
 8001d68:	f003 fb64 	bl	8005434 <prvTraceStoreKernelCall>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f002 f9fb 	bl	800416a <prvTraceGetQueueType>
 8001d74:	0003      	movs	r3, r0
 8001d76:	001a      	movs	r2, r3
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d018      	beq.n	8001db2 <xQueueReceive+0x30a>
 8001d80:	f002 fb48 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001d84:	0003      	movs	r3, r0
 8001d86:	0018      	movs	r0, r3
 8001d88:	f002 fa0a 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	4b3a      	ldr	r3, [pc, #232]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4013      	ands	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <xQueueReceive+0x30a>
 8001d9c:	f002 fb3a 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001da0:	0003      	movs	r3, r0
 8001da2:	0018      	movs	r0, r3
 8001da4:	f002 f9ee 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8001da8:	0003      	movs	r3, r0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	0018      	movs	r0, r3
 8001dae:	f003 fe85 	bl	8005abc <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3324      	adds	r3, #36	@ 0x24
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 ff96 	bl	8002cec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 f910 	bl	8001fe8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001dc8:	f000 fcd8 	bl	800277c <xTaskResumeAll>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d000      	beq.n	8001dd2 <xQueueReceive+0x32a>
 8001dd0:	e698      	b.n	8001b04 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8001dd2:	f002 f8a5 	bl	8003f20 <vPortYield>
 8001dd6:	e695      	b.n	8001b04 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f904 	bl	8001fe8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001de0:	f000 fccc 	bl	800277c <xTaskResumeAll>
 8001de4:	e68e      	b.n	8001b04 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f8fd 	bl	8001fe8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001dee:	f000 fcc5 	bl	800277c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f955 	bl	80020a4 <prvIsQueueEmpty>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d100      	bne.n	8001e00 <xQueueReceive+0x358>
 8001dfe:	e681      	b.n	8001b04 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e00:	f002 fb08 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8001e04:	0003      	movs	r3, r0
 8001e06:	0018      	movs	r0, r3
 8001e08:	f002 f9ca 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	001a      	movs	r2, r3
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d029      	beq.n	8001e70 <xQueueReceive+0x3c8>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f002 fa10 	bl	8004244 <prvTraceGetQueueNumberHigh16>
 8001e24:	0003      	movs	r3, r0
 8001e26:	001a      	movs	r2, r3
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <xQueueReceive+0x3d4>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01d      	beq.n	8001e70 <xQueueReceive+0x3c8>
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f002 f997 	bl	800416a <prvTraceGetQueueType>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	001a      	movs	r2, r3
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001e42:	5c9b      	ldrb	r3, [r3, r2]
 8001e44:	3350      	adds	r3, #80	@ 0x50
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	001d      	movs	r5, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f002 f98c 	bl	800416a <prvTraceGetQueueType>
 8001e52:	0003      	movs	r3, r0
 8001e54:	001a      	movs	r2, r3
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <xQueueReceive+0x3d8>)
 8001e58:	5c9c      	ldrb	r4, [r3, r2]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f002 f9e3 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8001e62:	0003      	movs	r3, r0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	001a      	movs	r2, r3
 8001e68:	0021      	movs	r1, r4
 8001e6a:	0028      	movs	r0, r5
 8001e6c:	f003 fae2 	bl	8005434 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8001e70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b00a      	add	sp, #40	@ 0x28
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	200019c8 	.word	0x200019c8
 8001e80:	20000008 	.word	0x20000008

08001e84 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	224c      	movs	r2, #76	@ 0x4c
 8001ebc:	5c9b      	ldrb	r3, [r3, r2]
    }
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eda:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d14e      	bne.n	8001f8a <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f001 f99d 	bl	8003230 <xTaskPriorityDisinherit>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e043      	b.n	8001f8a <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d119      	bne.n	8001f3c <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6858      	ldr	r0, [r3, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	0019      	movs	r1, r3
 8001f14:	f005 f998 	bl	8007248 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	18d2      	adds	r2, r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d32b      	bcc.n	8001f8a <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	e026      	b.n	8001f8a <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68d8      	ldr	r0, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0019      	movs	r1, r3
 8001f48:	f005 f97e 	bl	8007248 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	425b      	negs	r3, r3
 8001f56:	18d2      	adds	r2, r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	425b      	negs	r3, r3
 8001f72:	18d2      	adds	r2, r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d105      	bne.n	8001f8a <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001f92:	697b      	ldr	r3, [r7, #20]
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b006      	add	sp, #24
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d018      	beq.n	8001fe0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	18d2      	adds	r2, r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d303      	bcc.n	8001fd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f005 f934 	bl	8007248 <memcpy>
    }
}
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001ff0:	f001 ffa6 	bl	8003f40 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	2145      	movs	r1, #69	@ 0x45
 8001ffc:	5c52      	ldrb	r2, [r2, r1]
 8001ffe:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002000:	e013      	b.n	800202a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3324      	adds	r3, #36	@ 0x24
 800200e:	0018      	movs	r0, r3
 8002010:	f000 ff08 	bl	8002e24 <xTaskRemoveFromEventList>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d001      	beq.n	800201c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002018:	f001 f848 	bl	80030ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800201c:	210f      	movs	r1, #15
 800201e:	187b      	adds	r3, r7, r1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	187b      	adds	r3, r7, r1
 8002028:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800202a:	230f      	movs	r3, #15
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b25b      	sxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	dce5      	bgt.n	8002002 <prvUnlockQueue+0x1a>
 8002036:	e000      	b.n	800203a <prvUnlockQueue+0x52>
                    break;
 8002038:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2245      	movs	r2, #69	@ 0x45
 800203e:	21ff      	movs	r1, #255	@ 0xff
 8002040:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002042:	f001 ff8f 	bl	8003f64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002046:	f001 ff7b 	bl	8003f40 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800204a:	230e      	movs	r3, #14
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	2144      	movs	r1, #68	@ 0x44
 8002052:	5c52      	ldrb	r2, [r2, r1]
 8002054:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002056:	e013      	b.n	8002080 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d016      	beq.n	800208e <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3310      	adds	r3, #16
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fedd 	bl	8002e24 <xTaskRemoveFromEventList>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800206e:	f001 f81d 	bl	80030ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002072:	210e      	movs	r1, #14
 8002074:	187b      	adds	r3, r7, r1
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	187b      	adds	r3, r7, r1
 800207e:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002080:	230e      	movs	r3, #14
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b25b      	sxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	dce5      	bgt.n	8002058 <prvUnlockQueue+0x70>
 800208c:	e000      	b.n	8002090 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800208e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2244      	movs	r2, #68	@ 0x44
 8002094:	21ff      	movs	r1, #255	@ 0xff
 8002096:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002098:	f001 ff64 	bl	8003f64 <vPortExitCritical>
}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020ac:	f001 ff48 	bl	8003f40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e001      	b.n	80020c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020c2:	f001 ff4f 	bl	8003f64 <vPortExitCritical>

    return xReturn;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020d8:	f001 ff32 	bl	8003f40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d102      	bne.n	80020ee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e001      	b.n	80020f2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020f2:	f001 ff37 	bl	8003f64 <vPortExitCritical>

    return xReturn;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}

08002100 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <vQueueAddToRegistry+0x1a>
 8002114:	b672      	cpsid	i
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	e7fd      	b.n	8002116 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d025      	beq.n	800216c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e01f      	b.n	8002166 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002126:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <vQueueAddToRegistry+0xac>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d105      	bne.n	8002144 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	00da      	lsls	r2, r3, #3
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <vQueueAddToRegistry+0xac>)
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	60bb      	str	r3, [r7, #8]
                    break;
 8002142:	e013      	b.n	800216c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <vQueueAddToRegistry+0x60>
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <vQueueAddToRegistry+0xac>)
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	00d2      	lsls	r2, r2, #3
 8002150:	58d3      	ldr	r3, [r2, r3]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	00da      	lsls	r2, r3, #3
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <vQueueAddToRegistry+0xac>)
 800215c:	18d3      	adds	r3, r2, r3
 800215e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d9dc      	bls.n	8002126 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d018      	beq.n	80021a4 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f001 fff2 	bl	800416a <prvTraceGetQueueType>
 8002186:	0003      	movs	r3, r0
 8002188:	001a      	movs	r2, r3
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <vQueueAddToRegistry+0xb0>)
 800218c:	5c9c      	ldrb	r4, [r3, r2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f002 f849 	bl	8004228 <prvTraceGetQueueNumberLow16>
 8002196:	0003      	movs	r3, r0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	0019      	movs	r1, r3
 800219e:	0020      	movs	r0, r4
 80021a0:	f003 fe56 	bl	8005e50 <prvTraceSetObjectName>
        }
    }
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b005      	add	sp, #20
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	20000034 	.word	0x20000034
 80021b0:	20000008 	.word	0x20000008

080021b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80021c4:	f001 febc 	bl	8003f40 <vPortEnterCritical>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2244      	movs	r2, #68	@ 0x44
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	d103      	bne.n	80021dc <vQueueWaitForMessageRestricted+0x28>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2244      	movs	r2, #68	@ 0x44
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2245      	movs	r2, #69	@ 0x45
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	d103      	bne.n	80021f0 <vQueueWaitForMessageRestricted+0x3c>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2245      	movs	r2, #69	@ 0x45
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]
 80021f0:	f001 feb8 	bl	8003f64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3324      	adds	r3, #36	@ 0x24
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fd91 	bl	8002d2c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff feeb 	bl	8001fe8 <prvUnlockQueue>
    }
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b006      	add	sp, #24
 8002218:	bd80      	pop	{r7, pc}

0800221a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800221a:	b590      	push	{r4, r7, lr}
 800221c:	b08d      	sub	sp, #52	@ 0x34
 800221e:	af04      	add	r7, sp, #16
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	0018      	movs	r0, r3
 8002232:	f001 ff1d 	bl	8004070 <pvPortMalloc>
 8002236:	0003      	movs	r3, r0
 8002238:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d016      	beq.n	800226e <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002240:	2060      	movs	r0, #96	@ 0x60
 8002242:	f001 ff15 	bl	8004070 <pvPortMalloc>
 8002246:	0003      	movs	r3, r0
 8002248:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2260      	movs	r2, #96	@ 0x60
 8002254:	2100      	movs	r1, #0
 8002256:	0018      	movs	r0, r3
 8002258:	f004 ffb8 	bl	80071cc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
 8002262:	e006      	b.n	8002272 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	0018      	movs	r0, r3
 8002268:	f001 ff64 	bl	8004134 <vPortFree>
 800226c:	e001      	b.n	8002272 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d016      	beq.n	80022a6 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881a      	ldrh	r2, [r3, #0]
 800227c:	683c      	ldr	r4, [r7, #0]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	2300      	movs	r3, #0
 8002284:	9303      	str	r3, [sp, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	0023      	movs	r3, r4
 8002294:	f000 f810 	bl	80022b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f88e 	bl	80023bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e002      	b.n	80022ac <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022a6:	2301      	movs	r3, #1
 80022a8:	425b      	negs	r3, r3
 80022aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022ac:	69bb      	ldr	r3, [r7, #24]
    }
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b009      	add	sp, #36	@ 0x24
 80022b4:	bd90      	pop	{r4, r7, pc}
	...

080022b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	001a      	movs	r2, r3
 80022d0:	21a5      	movs	r1, #165	@ 0xa5
 80022d2:	f004 ff7b 	bl	80071cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4936      	ldr	r1, [pc, #216]	@ (80023b8 <prvInitialiseNewTask+0x100>)
 80022de:	468c      	mov	ip, r1
 80022e0:	4463      	add	r3, ip
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2207      	movs	r2, #7
 80022ec:	4393      	bics	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2207      	movs	r2, #7
 80022f4:	4013      	ands	r3, r2
 80022f6:	d002      	beq.n	80022fe <prvInitialiseNewTask+0x46>
 80022f8:	b672      	cpsid	i
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	e7fd      	b.n	80022fa <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e013      	b.n	8002332 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	18d3      	adds	r3, r2, r3
 8002310:	7818      	ldrb	r0, [r3, #0]
 8002312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002314:	2134      	movs	r1, #52	@ 0x34
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	185b      	adds	r3, r3, r1
 800231c:	1c02      	adds	r2, r0, #0
 800231e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	18d3      	adds	r3, r2, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d9e8      	bls.n	800230a <prvInitialiseNewTask+0x52>
 8002338:	e000      	b.n	800233c <prvInitialiseNewTask+0x84>
            {
                break;
 800233a:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	2243      	movs	r2, #67	@ 0x43
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d902      	bls.n	8002350 <prvInitialiseNewTask+0x98>
 800234a:	b672      	cpsid	i
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	e7fd      	b.n	800234c <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d901      	bls.n	800235a <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002356:	2304      	movs	r3, #4
 8002358:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	3304      	adds	r3, #4
 800236a:	0018      	movs	r0, r3
 800236c:	f7fe fd8e 	bl	8000e8c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	3318      	adds	r3, #24
 8002374:	0018      	movs	r0, r3
 8002376:	f7fe fd89 	bl	8000e8c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800237e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2205      	movs	r2, #5
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	0018      	movs	r0, r3
 8002398:	f001 fd36 	bl	8003e08 <pxPortInitialiseStack>
 800239c:	0002      	movs	r2, r0
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b006      	add	sp, #24
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	3fffffff 	.word	0x3fffffff

080023bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023c4:	f001 fdbc 	bl	8003f40 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023c8:	4b7c      	ldr	r3, [pc, #496]	@ (80025bc <prvAddNewTaskToReadyList+0x200>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	4b7b      	ldr	r3, [pc, #492]	@ (80025bc <prvAddNewTaskToReadyList+0x200>)
 80023d0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80023d2:	4b7b      	ldr	r3, [pc, #492]	@ (80025c0 <prvAddNewTaskToReadyList+0x204>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023da:	4b79      	ldr	r3, [pc, #484]	@ (80025c0 <prvAddNewTaskToReadyList+0x204>)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023e0:	4b76      	ldr	r3, [pc, #472]	@ (80025bc <prvAddNewTaskToReadyList+0x200>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d110      	bne.n	800240a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023e8:	f000 fea0 	bl	800312c <prvInitialiseTaskLists>
 80023ec:	e00d      	b.n	800240a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023ee:	4b75      	ldr	r3, [pc, #468]	@ (80025c4 <prvAddNewTaskToReadyList+0x208>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023f6:	4b72      	ldr	r3, [pc, #456]	@ (80025c0 <prvAddNewTaskToReadyList+0x204>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d802      	bhi.n	800240a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002404:	4b6e      	ldr	r3, [pc, #440]	@ (80025c0 <prvAddNewTaskToReadyList+0x204>)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800240a:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <prvAddNewTaskToReadyList+0x20c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	4b6d      	ldr	r3, [pc, #436]	@ (80025c8 <prvAddNewTaskToReadyList+0x20c>)
 8002412:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002414:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <prvAddNewTaskToReadyList+0x20c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d065      	beq.n	80024ee <prvAddNewTaskToReadyList+0x132>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d04f      	beq.n	80024c8 <prvAddNewTaskToReadyList+0x10c>
 8002428:	2003      	movs	r0, #3
 800242a:	f003 fbdb 	bl	8005be4 <prvTraceGetObjectHandle>
 800242e:	0003      	movs	r3, r0
 8002430:	001a      	movs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0011      	movs	r1, r2
 8002436:	0018      	movs	r0, r3
 8002438:	f001 fec1 	bl	80041be <prvTraceSetTaskNumberLow16>
 800243c:	4b63      	ldr	r3, [pc, #396]	@ (80025cc <prvAddNewTaskToReadyList+0x210>)
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f001 fed4 	bl	80041f2 <prvTraceSetTaskNumberHigh16>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f001 fe99 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002452:	0003      	movs	r3, r0
 8002454:	b2d9      	uxtb	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3334      	adds	r3, #52	@ 0x34
 800245a:	001a      	movs	r2, r3
 800245c:	2003      	movs	r0, #3
 800245e:	f003 fcf7 	bl	8005e50 <prvTraceSetObjectName>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f001 fe8d 	bl	8004184 <prvTraceGetTaskNumberLow16>
 800246a:	0003      	movs	r3, r0
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	b2db      	uxtb	r3, r3
 8002474:	001a      	movs	r2, r3
 8002476:	2003      	movs	r0, #3
 8002478:	f003 fa6c 	bl	8005954 <prvTraceSetPriorityProperty>
 800247c:	f001 ffca 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002480:	0003      	movs	r3, r0
 8002482:	0018      	movs	r0, r3
 8002484:	f001 fe8c 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002488:	0003      	movs	r3, r0
 800248a:	001a      	movs	r2, r3
 800248c:	4b50      	ldr	r3, [pc, #320]	@ (80025d0 <prvAddNewTaskToReadyList+0x214>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	4013      	ands	r3, r2
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02a      	beq.n	80024ee <prvAddNewTaskToReadyList+0x132>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f001 fe80 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80024a0:	0003      	movs	r3, r0
 80024a2:	001a      	movs	r2, r3
 80024a4:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <prvAddNewTaskToReadyList+0x214>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01e      	beq.n	80024ee <prvAddNewTaskToReadyList+0x132>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f001 fe66 	bl	8004184 <prvTraceGetTaskNumberLow16>
 80024b8:	0003      	movs	r3, r0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	001a      	movs	r2, r3
 80024be:	2103      	movs	r1, #3
 80024c0:	201b      	movs	r0, #27
 80024c2:	f002 ffb7 	bl	8005434 <prvTraceStoreKernelCall>
 80024c6:	e012      	b.n	80024ee <prvAddNewTaskToReadyList+0x132>
 80024c8:	f001 ffa4 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 80024cc:	0003      	movs	r3, r0
 80024ce:	0018      	movs	r0, r3
 80024d0:	f001 fe66 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80024d4:	0003      	movs	r3, r0
 80024d6:	001a      	movs	r2, r3
 80024d8:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <prvAddNewTaskToReadyList+0x214>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	4013      	ands	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <prvAddNewTaskToReadyList+0x132>
 80024e4:	2200      	movs	r2, #0
 80024e6:	2103      	movs	r1, #3
 80024e8:	201b      	movs	r0, #27
 80024ea:	f002 ffa3 	bl	8005434 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 fe55 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80024f6:	0003      	movs	r3, r0
 80024f8:	001a      	movs	r2, r3
 80024fa:	4b35      	ldr	r3, [pc, #212]	@ (80025d0 <prvAddNewTaskToReadyList+0x214>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	4013      	ands	r3, r2
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <prvAddNewTaskToReadyList+0x15c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f001 fe3b 	bl	8004184 <prvTraceGetTaskNumberLow16>
 800250e:	0003      	movs	r3, r0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	0018      	movs	r0, r3
 8002514:	f002 fe80 	bl	8005218 <prvTraceStoreTaskReady>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251c:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <prvAddNewTaskToReadyList+0x218>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d903      	bls.n	800252c <prvAddNewTaskToReadyList+0x170>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002528:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <prvAddNewTaskToReadyList+0x218>)
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002530:	4929      	ldr	r1, [pc, #164]	@ (80025d8 <prvAddNewTaskToReadyList+0x21c>)
 8002532:	0013      	movs	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	189b      	adds	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	18cb      	adds	r3, r1, r3
 800253c:	3304      	adds	r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	3204      	adds	r2, #4
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002566:	0013      	movs	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	189b      	adds	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <prvAddNewTaskToReadyList+0x21c>)
 8002570:	189a      	adds	r2, r3, r2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	615a      	str	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257a:	4917      	ldr	r1, [pc, #92]	@ (80025d8 <prvAddNewTaskToReadyList+0x21c>)
 800257c:	0013      	movs	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	189b      	adds	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	585b      	ldr	r3, [r3, r1]
 8002586:	1c58      	adds	r0, r3, #1
 8002588:	4913      	ldr	r1, [pc, #76]	@ (80025d8 <prvAddNewTaskToReadyList+0x21c>)
 800258a:	0013      	movs	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	189b      	adds	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002594:	f001 fce6 	bl	8003f64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <prvAddNewTaskToReadyList+0x208>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <prvAddNewTaskToReadyList+0x204>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d201      	bcs.n	80025b2 <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025ae:	f001 fcb7 	bl	8003f20 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	20000130 	.word	0x20000130
 80025c0:	20000084 	.word	0x20000084
 80025c4:	2000013c 	.word	0x2000013c
 80025c8:	2000014c 	.word	0x2000014c
 80025cc:	200019ca 	.word	0x200019ca
 80025d0:	200019c8 	.word	0x200019c8
 80025d4:	20000138 	.word	0x20000138
 80025d8:	20000088 	.word	0x20000088

080025dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d046      	beq.n	800267c <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <vTaskDelay+0xb4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <vTaskDelay+0x20>
 80025f6:	b672      	cpsid	i
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	e7fd      	b.n	80025f8 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 80025fc:	f000 f8b2 	bl	8002764 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <vTaskDelay+0xb8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0018      	movs	r0, r3
 8002606:	f001 fdcb 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <vTaskDelay+0xbc>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	4013      	ands	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <vTaskDelay+0x5c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0019      	movs	r1, r3
 800261e:	2089      	movs	r0, #137	@ 0x89
 8002620:	f003 f80c 	bl	800563c <prvTraceStoreKernelCallWithNumericParamOnly>
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <vTaskDelay+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0018      	movs	r0, r3
 800262a:	f001 fdab 	bl	8004184 <prvTraceGetTaskNumberLow16>
 800262e:	0003      	movs	r3, r0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	0018      	movs	r0, r3
 8002634:	f003 fa42 	bl	8005abc <prvTraceSetTaskInstanceFinished>
 8002638:	f001 feec 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 800263c:	0003      	movs	r3, r0
 800263e:	0018      	movs	r0, r3
 8002640:	f001 fdae 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002644:	0003      	movs	r3, r0
 8002646:	001a      	movs	r2, r3
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <vTaskDelay+0xbc>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <vTaskDelay+0x8e>
 8002654:	f001 fede 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002658:	0003      	movs	r3, r0
 800265a:	0018      	movs	r0, r3
 800265c:	f001 fd92 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002660:	0003      	movs	r3, r0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	0018      	movs	r0, r3
 8002666:	f003 fa29 	bl	8005abc <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 feac 	bl	80033cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002674:	f000 f882 	bl	800277c <xTaskResumeAll>
 8002678:	0003      	movs	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 8002682:	f001 fc4d 	bl	8003f20 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	20000158 	.word	0x20000158
 8002694:	20000084 	.word	0x20000084
 8002698:	200019c8 	.word	0x200019c8

0800269c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80026a2:	4927      	ldr	r1, [pc, #156]	@ (8002740 <vTaskStartScheduler+0xa4>)
 80026a4:	4827      	ldr	r0, [pc, #156]	@ (8002744 <vTaskStartScheduler+0xa8>)
 80026a6:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <vTaskStartScheduler+0xac>)
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	f7ff fdb2 	bl	800221a <xTaskCreate>
 80026b6:	0003      	movs	r3, r0
 80026b8:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d103      	bne.n	80026c8 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80026c0:	f000 fec8 	bl	8003454 <xTimerCreateTimerTask>
 80026c4:	0003      	movs	r3, r0
 80026c6:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12c      	bne.n	8002728 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80026ce:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <vTaskStartScheduler+0xb0>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	4252      	negs	r2, r2
 80026d6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <vTaskStartScheduler+0xb4>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <vTaskStartScheduler+0xb8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002758 <vTaskStartScheduler+0xbc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f001 fe93 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 80026ee:	0003      	movs	r3, r0
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 fd55 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80026f6:	0003      	movs	r3, r0
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <vTaskStartScheduler+0xc0>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <vTaskStartScheduler+0x80>
 8002706:	f001 fe85 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 800270a:	0003      	movs	r3, r0
 800270c:	0018      	movs	r0, r3
 800270e:	f001 fd39 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002712:	0003      	movs	r3, r0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	0018      	movs	r0, r3
 8002718:	f002 fffa 	bl	8005710 <prvTraceStoreTaskswitch>
 800271c:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <vTaskStartScheduler+0xbc>)
 800271e:	2202      	movs	r2, #2
 8002720:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002722:	f001 fbd9 	bl	8003ed8 <xPortStartScheduler>
 8002726:	e005      	b.n	8002734 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	d102      	bne.n	8002734 <vTaskStartScheduler+0x98>
 800272e:	b672      	cpsid	i
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	e7fd      	b.n	8002730 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <vTaskStartScheduler+0xc4>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	46c0      	nop			@ (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08007274 	.word	0x08007274
 8002744:	0800310d 	.word	0x0800310d
 8002748:	20000154 	.word	0x20000154
 800274c:	20000150 	.word	0x20000150
 8002750:	2000013c 	.word	0x2000013c
 8002754:	20000134 	.word	0x20000134
 8002758:	200019b0 	.word	0x200019b0
 800275c:	200019c8 	.word	0x200019c8
 8002760:	20000000 	.word	0x20000000

08002764 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <vTaskSuspendAll+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	4b02      	ldr	r3, [pc, #8]	@ (8002778 <vTaskSuspendAll+0x14>)
 8002770:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000158 	.word	0x20000158

0800277c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800278a:	4b73      	ldr	r3, [pc, #460]	@ (8002958 <xTaskResumeAll+0x1dc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <xTaskResumeAll+0x1c>
 8002792:	b672      	cpsid	i
 8002794:	46c0      	nop			@ (mov r8, r8)
 8002796:	e7fd      	b.n	8002794 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002798:	f001 fbd2 	bl	8003f40 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800279c:	4b6e      	ldr	r3, [pc, #440]	@ (8002958 <xTaskResumeAll+0x1dc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002958 <xTaskResumeAll+0x1dc>)
 80027a4:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002958 <xTaskResumeAll+0x1dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d000      	beq.n	80027b0 <xTaskResumeAll+0x34>
 80027ae:	e0cc      	b.n	800294a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027b0:	4b6a      	ldr	r3, [pc, #424]	@ (800295c <xTaskResumeAll+0x1e0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d100      	bne.n	80027ba <xTaskResumeAll+0x3e>
 80027b8:	e0c7      	b.n	800294a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ba:	e09e      	b.n	80028fa <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027bc:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <xTaskResumeAll+0x1e4>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6a12      	ldr	r2, [r2, #32]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	69d2      	ldr	r2, [r2, #28]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3318      	adds	r3, #24
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d103      	bne.n	80027f2 <xTaskResumeAll+0x76>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a1a      	ldr	r2, [r3, #32]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	68d2      	ldr	r2, [r2, #12]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6892      	ldr	r2, [r2, #8]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3304      	adds	r3, #4
 8002824:	429a      	cmp	r2, r3
 8002826:	d103      	bne.n	8002830 <xTaskResumeAll+0xb4>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	0018      	movs	r0, r3
 8002844:	f001 fcac 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002848:	0003      	movs	r3, r0
 800284a:	001a      	movs	r2, r3
 800284c:	4b45      	ldr	r3, [pc, #276]	@ (8002964 <xTaskResumeAll+0x1e8>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <xTaskResumeAll+0xee>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	0018      	movs	r0, r3
 800285c:	f001 fc92 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002860:	0003      	movs	r3, r0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	0018      	movs	r0, r3
 8002866:	f002 fcd7 	bl	8005218 <prvTraceStoreTaskReady>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <xTaskResumeAll+0x1ec>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d903      	bls.n	800287e <xTaskResumeAll+0x102>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <xTaskResumeAll+0x1ec>)
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002882:	493a      	ldr	r1, [pc, #232]	@ (800296c <xTaskResumeAll+0x1f0>)
 8002884:	0013      	movs	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	189b      	adds	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	18cb      	adds	r3, r1, r3
 800288e:	3304      	adds	r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	3204      	adds	r2, #4
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	0013      	movs	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <xTaskResumeAll+0x1f0>)
 80028c2:	189a      	adds	r2, r3, r2
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	4927      	ldr	r1, [pc, #156]	@ (800296c <xTaskResumeAll+0x1f0>)
 80028ce:	0013      	movs	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	585b      	ldr	r3, [r3, r1]
 80028d8:	1c58      	adds	r0, r3, #1
 80028da:	4924      	ldr	r1, [pc, #144]	@ (800296c <xTaskResumeAll+0x1f0>)
 80028dc:	0013      	movs	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ea:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <xTaskResumeAll+0x1f4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <xTaskResumeAll+0x1f8>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <xTaskResumeAll+0x1e4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d000      	beq.n	8002904 <xTaskResumeAll+0x188>
 8002902:	e75b      	b.n	80027bc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800290a:	f000 fc4d 	bl	80031a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <xTaskResumeAll+0x1fc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800291a:	f000 f847 	bl	80029ac <xTaskIncrementTick>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d002      	beq.n	8002928 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <xTaskResumeAll+0x1f8>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b01      	subs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <xTaskResumeAll+0x1fc>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <xTaskResumeAll+0x1f8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002942:	2301      	movs	r3, #1
 8002944:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002946:	f001 faeb 	bl	8003f20 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800294a:	f001 fb0b 	bl	8003f64 <vPortExitCritical>

    return xAlreadyYielded;
 800294e:	693b      	ldr	r3, [r7, #16]
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000158 	.word	0x20000158
 800295c:	20000130 	.word	0x20000130
 8002960:	2000011c 	.word	0x2000011c
 8002964:	200019c8 	.word	0x200019c8
 8002968:	20000138 	.word	0x20000138
 800296c:	20000088 	.word	0x20000088
 8002970:	20000084 	.word	0x20000084
 8002974:	20000144 	.word	0x20000144
 8002978:	20000140 	.word	0x20000140

0800297c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <xTaskGetTickCount+0x18>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	20000134 	.word	0x20000134

08002998 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800299c:	4b02      	ldr	r3, [pc, #8]	@ (80029a8 <uxTaskGetNumberOfTasks+0x10>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	20000130 	.word	0x20000130

080029ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80029b6:	4b85      	ldr	r3, [pc, #532]	@ (8002bcc <xTaskIncrementTick+0x220>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d003      	beq.n	80029c6 <xTaskIncrementTick+0x1a>
 80029be:	4b84      	ldr	r3, [pc, #528]	@ (8002bd0 <xTaskIncrementTick+0x224>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <xTaskIncrementTick+0x2a>
 80029c6:	4b83      	ldr	r3, [pc, #524]	@ (8002bd4 <xTaskIncrementTick+0x228>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <xTaskIncrementTick+0x228>)
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	2000      	movs	r0, #0
 80029d2:	f003 fe53 	bl	800667c <prvTracePortGetTimeStamp>
 80029d6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bcc <xTaskIncrementTick+0x220>)
 80029d8:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029da:	4b7c      	ldr	r3, [pc, #496]	@ (8002bcc <xTaskIncrementTick+0x220>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d000      	beq.n	80029e4 <xTaskIncrementTick+0x38>
 80029e2:	e0e9      	b.n	8002bb8 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029e4:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd8 <xTaskIncrementTick+0x22c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029ec:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd8 <xTaskIncrementTick+0x22c>)
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d118      	bne.n	8002a2a <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 80029f8:	4b78      	ldr	r3, [pc, #480]	@ (8002bdc <xTaskIncrementTick+0x230>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <xTaskIncrementTick+0x5c>
 8002a02:	b672      	cpsid	i
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	e7fd      	b.n	8002a04 <xTaskIncrementTick+0x58>
 8002a08:	4b74      	ldr	r3, [pc, #464]	@ (8002bdc <xTaskIncrementTick+0x230>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	4b74      	ldr	r3, [pc, #464]	@ (8002be0 <xTaskIncrementTick+0x234>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b72      	ldr	r3, [pc, #456]	@ (8002bdc <xTaskIncrementTick+0x230>)
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4b72      	ldr	r3, [pc, #456]	@ (8002be0 <xTaskIncrementTick+0x234>)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b71      	ldr	r3, [pc, #452]	@ (8002be4 <xTaskIncrementTick+0x238>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <xTaskIncrementTick+0x238>)
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f000 fbbf 	bl	80031a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <xTaskIncrementTick+0x23c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d200      	bcs.n	8002a36 <xTaskIncrementTick+0x8a>
 8002a34:	e0b9      	b.n	8002baa <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a36:	4b69      	ldr	r3, [pc, #420]	@ (8002bdc <xTaskIncrementTick+0x230>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a40:	4b69      	ldr	r3, [pc, #420]	@ (8002be8 <xTaskIncrementTick+0x23c>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	4252      	negs	r2, r2
 8002a46:	601a      	str	r2, [r3, #0]
                    break;
 8002a48:	e0af      	b.n	8002baa <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a4a:	4b64      	ldr	r3, [pc, #400]	@ (8002bdc <xTaskIncrementTick+0x230>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d203      	bcs.n	8002a6a <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a62:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <xTaskIncrementTick+0x23c>)
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a68:	e09f      	b.n	8002baa <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	68d2      	ldr	r2, [r2, #12]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d103      	bne.n	8002a98 <xTaskIncrementTick+0xec>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01e      	beq.n	8002aee <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	6a12      	ldr	r2, [r2, #32]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	69d2      	ldr	r2, [r2, #28]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	3318      	adds	r3, #24
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <xTaskIncrementTick+0x132>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6a1a      	ldr	r2, [r3, #32]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f001 fb55 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002af6:	0003      	movs	r3, r0
 8002af8:	001a      	movs	r2, r3
 8002afa:	4b3c      	ldr	r3, [pc, #240]	@ (8002bec <xTaskIncrementTick+0x240>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <xTaskIncrementTick+0x16c>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f001 fb3b 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	0018      	movs	r0, r3
 8002b14:	f002 fb80 	bl	8005218 <prvTraceStoreTaskReady>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b1c:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <xTaskIncrementTick+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d903      	bls.n	8002b2c <xTaskIncrementTick+0x180>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <xTaskIncrementTick+0x244>)
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b30:	4930      	ldr	r1, [pc, #192]	@ (8002bf4 <xTaskIncrementTick+0x248>)
 8002b32:	0013      	movs	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	18cb      	adds	r3, r1, r3
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	3204      	adds	r2, #4
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b66:	0013      	movs	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4a21      	ldr	r2, [pc, #132]	@ (8002bf4 <xTaskIncrementTick+0x248>)
 8002b70:	189a      	adds	r2, r3, r2
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	615a      	str	r2, [r3, #20]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7a:	491e      	ldr	r1, [pc, #120]	@ (8002bf4 <xTaskIncrementTick+0x248>)
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	585b      	ldr	r3, [r3, r1]
 8002b86:	1c58      	adds	r0, r3, #1
 8002b88:	491a      	ldr	r1, [pc, #104]	@ (8002bf4 <xTaskIncrementTick+0x248>)
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <xTaskIncrementTick+0x24c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d800      	bhi.n	8002ba4 <xTaskIncrementTick+0x1f8>
 8002ba2:	e748      	b.n	8002a36 <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ba8:	e745      	b.n	8002a36 <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <xTaskIncrementTick+0x250>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e004      	b.n	8002bc2 <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <xTaskIncrementTick+0x224>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <xTaskIncrementTick+0x224>)
 8002bc0:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b008      	add	sp, #32
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000158 	.word	0x20000158
 8002bd0:	20000140 	.word	0x20000140
 8002bd4:	200019a4 	.word	0x200019a4
 8002bd8:	20000134 	.word	0x20000134
 8002bdc:	20000114 	.word	0x20000114
 8002be0:	20000118 	.word	0x20000118
 8002be4:	20000148 	.word	0x20000148
 8002be8:	20000150 	.word	0x20000150
 8002bec:	200019c8 	.word	0x200019c8
 8002bf0:	20000138 	.word	0x20000138
 8002bf4:	20000088 	.word	0x20000088
 8002bf8:	20000084 	.word	0x20000084
 8002bfc:	20000144 	.word	0x20000144

08002c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c06:	4b32      	ldr	r3, [pc, #200]	@ (8002cd0 <vTaskSwitchContext+0xd0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c0e:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <vTaskSwitchContext+0xd4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002c14:	e057      	b.n	8002cc6 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8002c16:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <vTaskSwitchContext+0xd4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <vTaskSwitchContext+0xd8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	e008      	b.n	8002c36 <vTaskSwitchContext+0x36>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <vTaskSwitchContext+0x30>
 8002c2a:	b672      	cpsid	i
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	e7fd      	b.n	8002c2c <vTaskSwitchContext+0x2c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	4929      	ldr	r1, [pc, #164]	@ (8002cdc <vTaskSwitchContext+0xdc>)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	585b      	ldr	r3, [r3, r1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ed      	beq.n	8002c24 <vTaskSwitchContext+0x24>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4a22      	ldr	r2, [pc, #136]	@ (8002cdc <vTaskSwitchContext+0xdc>)
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3308      	adds	r3, #8
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d104      	bne.n	8002c78 <vTaskSwitchContext+0x78>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <vTaskSwitchContext+0xe0>)
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <vTaskSwitchContext+0xd8>)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <vTaskSwitchContext+0xe4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f001 fbc1 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002c92:	0003      	movs	r3, r0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fa83 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <vTaskSwitchContext+0xe8>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <vTaskSwitchContext+0xc0>
 8002caa:	f001 fbb3 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fa67 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fd28 	bl	8005710 <prvTraceStoreTaskswitch>
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <vTaskSwitchContext+0xe4>)
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	20000158 	.word	0x20000158
 8002cd4:	20000144 	.word	0x20000144
 8002cd8:	20000138 	.word	0x20000138
 8002cdc:	20000088 	.word	0x20000088
 8002ce0:	20000084 	.word	0x20000084
 8002ce4:	200019b0 	.word	0x200019b0
 8002ce8:	200019c8 	.word	0x200019c8

08002cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <vTaskPlaceOnEventList+0x16>
 8002cfc:	b672      	cpsid	i
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	e7fd      	b.n	8002cfe <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <vTaskPlaceOnEventList+0x3c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3318      	adds	r3, #24
 8002d08:	001a      	movs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7fe f8c7 	bl	8000ea2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 fb57 	bl	80033cc <prvAddCurrentTaskToDelayedList>
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	20000084 	.word	0x20000084

08002d2c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <vTaskPlaceOnEventListRestricted+0x18>
 8002d3e:	b672      	cpsid	i
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	e7fd      	b.n	8002d40 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	4b33      	ldr	r3, [pc, #204]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	621a      	str	r2, [r3, #32]
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	3218      	adds	r2, #24
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	001a      	movs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	425b      	negs	r3, r3
 8002d90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002d92:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fa02 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	001a      	movs	r2, r3
 8002da0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e1c <vTaskPlaceOnEventListRestricted+0xf0>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <vTaskPlaceOnEventListRestricted+0xa4>
 8002dac:	4b1c      	ldr	r3, [pc, #112]	@ (8002e20 <vTaskPlaceOnEventListRestricted+0xf4>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	18d3      	adds	r3, r2, r3
 8002db4:	0019      	movs	r1, r3
 8002db6:	2088      	movs	r0, #136	@ 0x88
 8002db8:	f002 fc40 	bl	800563c <prvTraceStoreKernelCallWithNumericParamOnly>
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <vTaskPlaceOnEventListRestricted+0xec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f001 f9df 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f002 fe76 	bl	8005abc <prvTraceSetTaskInstanceFinished>
 8002dd0:	f001 fb20 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f001 f9e2 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	001a      	movs	r2, r3
 8002de0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <vTaskPlaceOnEventListRestricted+0xf0>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <vTaskPlaceOnEventListRestricted+0xd6>
 8002dec:	f001 fb12 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8002df0:	0003      	movs	r3, r0
 8002df2:	0018      	movs	r0, r3
 8002df4:	f001 f9c6 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f002 fe5d 	bl	8005abc <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fadf 	bl	80033cc <prvAddCurrentTaskToDelayedList>
    }
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b006      	add	sp, #24
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	20000084 	.word	0x20000084
 8002e1c:	200019c8 	.word	0x200019c8
 8002e20:	20000134 	.word	0x20000134

08002e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <xTaskRemoveFromEventList+0x1c>
 8002e3a:	b672      	cpsid	i
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	e7fd      	b.n	8002e3c <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	6a12      	ldr	r2, [r2, #32]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	69d2      	ldr	r2, [r2, #28]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3318      	adds	r3, #24
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d103      	bne.n	8002e6e <xTaskRemoveFromEventList+0x4a>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2200      	movs	r2, #0
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7e:	4b53      	ldr	r3, [pc, #332]	@ (8002fcc <xTaskRemoveFromEventList+0x1a8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d172      	bne.n	8002f6c <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	68d2      	ldr	r2, [r2, #12]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d103      	bne.n	8002eb4 <xTaskRemoveFromEventList+0x90>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f001 f96a 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	001a      	movs	r2, r3
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <xTaskRemoveFromEventList+0x1ac>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <xTaskRemoveFromEventList+0xca>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 f950 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f002 f995 	bl	8005218 <prvTraceStoreTaskReady>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <xTaskRemoveFromEventList+0x1b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d903      	bls.n	8002f02 <xTaskRemoveFromEventList+0xde>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <xTaskRemoveFromEventList+0x1b0>)
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f06:	4934      	ldr	r1, [pc, #208]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b4>)
 8002f08:	0013      	movs	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	18cb      	adds	r3, r1, r3
 8002f12:	3304      	adds	r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	3204      	adds	r2, #4
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4a24      	ldr	r2, [pc, #144]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b4>)
 8002f46:	189a      	adds	r2, r3, r2
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	615a      	str	r2, [r3, #20]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f50:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b4>)
 8002f52:	0013      	movs	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	585b      	ldr	r3, [r3, r1]
 8002f5c:	1c58      	adds	r0, r3, #1
 8002f5e:	491e      	ldr	r1, [pc, #120]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b4>)
 8002f60:	0013      	movs	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	5058      	str	r0, [r3, r1]
 8002f6a:	e01b      	b.n	8002fa4 <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <xTaskRemoveFromEventList+0x1b8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	61da      	str	r2, [r3, #28]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	621a      	str	r2, [r3, #32]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	3218      	adds	r2, #24
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	001a      	movs	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <xTaskRemoveFromEventList+0x1b8>)
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <xTaskRemoveFromEventList+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <xTaskRemoveFromEventList+0x1b8>)
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <xTaskRemoveFromEventList+0x1bc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d905      	bls.n	8002fbe <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <xTaskRemoveFromEventList+0x1c0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e001      	b.n	8002fc2 <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b008      	add	sp, #32
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000158 	.word	0x20000158
 8002fd0:	200019c8 	.word	0x200019c8
 8002fd4:	20000138 	.word	0x20000138
 8002fd8:	20000088 	.word	0x20000088
 8002fdc:	2000011c 	.word	0x2000011c
 8002fe0:	20000084 	.word	0x20000084
 8002fe4:	20000144 	.word	0x20000144

08002fe8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <vTaskInternalSetTimeOutState+0x20>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <vTaskInternalSetTimeOutState+0x24>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
}
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000148 	.word	0x20000148
 800300c:	20000134 	.word	0x20000134

08003010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <xTaskCheckForTimeOut+0x16>
 8003020:	b672      	cpsid	i
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	e7fd      	b.n	8003022 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <xTaskCheckForTimeOut+0x22>
 800302c:	b672      	cpsid	i
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	e7fd      	b.n	800302e <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8003032:	f000 ff85 	bl	8003f40 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <xTaskCheckForTimeOut+0x94>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <xTaskCheckForTimeOut+0x98>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d00a      	beq.n	8003068 <xTaskCheckForTimeOut+0x58>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d305      	bcc.n	8003068 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800305c:	2301      	movs	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e016      	b.n	8003096 <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	429a      	cmp	r2, r3
 8003070:	d20c      	bcs.n	800308c <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad2      	subs	r2, r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ffb1 	bl	8002fe8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e004      	b.n	8003096 <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003092:	2301      	movs	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003096:	f000 ff65 	bl	8003f64 <vPortExitCritical>

    return xReturn;
 800309a:	697b      	ldr	r3, [r7, #20]
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b006      	add	sp, #24
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000134 	.word	0x20000134
 80030a8:	20000148 	.word	0x20000148

080030ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <vTaskMissedYield+0x10>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000144 	.word	0x20000144

080030c0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e001      	b.n	80030de <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 80030de:	68fb      	ldr	r3, [r7, #12]
    }
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003114:	f000 f842 	bl	800319c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <prvIdleTask+0x1c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d9f9      	bls.n	8003114 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003120:	f000 fefe 	bl	8003f20 <vPortYield>
        prvCheckTasksWaitingTermination();
 8003124:	e7f6      	b.n	8003114 <prvIdleTask+0x8>
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	20000088 	.word	0x20000088

0800312c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	e00c      	b.n	8003152 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	0013      	movs	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	189b      	adds	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <prvInitialiseTaskLists+0x58>)
 8003144:	189b      	adds	r3, r3, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f7fd fe82 	bl	8000e50 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d9ef      	bls.n	8003138 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003158:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <prvInitialiseTaskLists+0x5c>)
 800315a:	0018      	movs	r0, r3
 800315c:	f7fd fe78 	bl	8000e50 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <prvInitialiseTaskLists+0x60>)
 8003162:	0018      	movs	r0, r3
 8003164:	f7fd fe74 	bl	8000e50 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <prvInitialiseTaskLists+0x64>)
 800316a:	0018      	movs	r0, r3
 800316c:	f7fd fe70 	bl	8000e50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <prvInitialiseTaskLists+0x68>)
 8003172:	4a05      	ldr	r2, [pc, #20]	@ (8003188 <prvInitialiseTaskLists+0x5c>)
 8003174:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <prvInitialiseTaskLists+0x6c>)
 8003178:	4a04      	ldr	r2, [pc, #16]	@ (800318c <prvInitialiseTaskLists+0x60>)
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000088 	.word	0x20000088
 8003188:	200000ec 	.word	0x200000ec
 800318c:	20000100 	.word	0x20000100
 8003190:	2000011c 	.word	0x2000011c
 8003194:	20000114 	.word	0x20000114
 8003198:	20000118 	.word	0x20000118

0800319c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <prvResetNextTaskUnblockTime+0x2c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031b6:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <prvResetNextTaskUnblockTime+0x30>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	4252      	negs	r2, r2
 80031bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031be:	e005      	b.n	80031cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <prvResetNextTaskUnblockTime+0x2c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <prvResetNextTaskUnblockTime+0x30>)
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	20000114 	.word	0x20000114
 80031d8:	20000150 	.word	0x20000150

080031dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <xTaskGetCurrentTaskHandle+0x18>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	607b      	str	r3, [r7, #4]

        return xReturn;
 80031e8:	687b      	ldr	r3, [r7, #4]
    }
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	20000084 	.word	0x20000084

080031f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80031fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <xTaskGetSchedulerState+0x30>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003206:	2301      	movs	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e008      	b.n	800321e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <xTaskGetSchedulerState+0x34>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003214:	2302      	movs	r3, #2
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e001      	b.n	800321e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800321e:	687b      	ldr	r3, [r7, #4]
    }
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}
 8003228:	2000013c 	.word	0x2000013c
 800322c:	20000158 	.word	0x20000158

08003230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d100      	bne.n	8003248 <xTaskPriorityDisinherit+0x18>
 8003246:	e0b3      	b.n	80033b0 <xTaskPriorityDisinherit+0x180>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003248:	4b5c      	ldr	r3, [pc, #368]	@ (80033bc <xTaskPriorityDisinherit+0x18c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d002      	beq.n	8003258 <xTaskPriorityDisinherit+0x28>
 8003252:	b672      	cpsid	i
 8003254:	46c0      	nop			@ (mov r8, r8)
 8003256:	e7fd      	b.n	8003254 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <xTaskPriorityDisinherit+0x36>
 8003260:	b672      	cpsid	i
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	e7fd      	b.n	8003262 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003278:	429a      	cmp	r2, r3
 800327a:	d100      	bne.n	800327e <xTaskPriorityDisinherit+0x4e>
 800327c:	e098      	b.n	80033b0 <xTaskPriorityDisinherit+0x180>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	2b00      	cmp	r3, #0
 8003284:	d000      	beq.n	8003288 <xTaskPriorityDisinherit+0x58>
 8003286:	e093      	b.n	80033b0 <xTaskPriorityDisinherit+0x180>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3304      	adds	r3, #4
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd fe3e 	bl	8000f0e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 ff83 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800329a:	0003      	movs	r3, r0
 800329c:	001a      	movs	r2, r3
 800329e:	4b48      	ldr	r3, [pc, #288]	@ (80033c0 <xTaskPriorityDisinherit+0x190>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <xTaskPriorityDisinherit+0xc2>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 ff69 	bl	8004184 <prvTraceGetTaskNumberLow16>
 80032b2:	0003      	movs	r3, r0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	001c      	movs	r4, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 ff62 	bl	8004184 <prvTraceGetTaskNumberLow16>
 80032c0:	0003      	movs	r3, r0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	0019      	movs	r1, r3
 80032c6:	2003      	movs	r0, #3
 80032c8:	f002 fb76 	bl	80059b8 <prvTraceGetPriorityProperty>
 80032cc:	0003      	movs	r3, r0
 80032ce:	0022      	movs	r2, r4
 80032d0:	2103      	movs	r1, #3
 80032d2:	208f      	movs	r0, #143	@ 0x8f
 80032d4:	f002 f914 	bl	8005500 <prvTraceStoreKernelCallWithParam>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 ff52 	bl	8004184 <prvTraceGetTaskNumberLow16>
 80032e0:	0003      	movs	r3, r0
 80032e2:	b2d9      	uxtb	r1, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	001a      	movs	r2, r3
 80032ec:	2003      	movs	r0, #3
 80032ee:	f002 fb31 	bl	8005954 <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	2205      	movs	r2, #5
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 ff49 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800330e:	0003      	movs	r3, r0
 8003310:	001a      	movs	r2, r3
 8003312:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <xTaskPriorityDisinherit+0x190>)
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <xTaskPriorityDisinherit+0x100>
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 ff2f 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8003326:	0003      	movs	r3, r0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	0018      	movs	r0, r3
 800332c:	f001 ff74 	bl	8005218 <prvTraceStoreTaskReady>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	4b23      	ldr	r3, [pc, #140]	@ (80033c4 <xTaskPriorityDisinherit+0x194>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d903      	bls.n	8003344 <xTaskPriorityDisinherit+0x114>
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <xTaskPriorityDisinherit+0x194>)
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003348:	491f      	ldr	r1, [pc, #124]	@ (80033c8 <xTaskPriorityDisinherit+0x198>)
 800334a:	0013      	movs	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	189b      	adds	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	18cb      	adds	r3, r1, r3
 8003354:	3304      	adds	r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	3204      	adds	r2, #4
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1d1a      	adds	r2, r3, #4
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337e:	0013      	movs	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	189b      	adds	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4a10      	ldr	r2, [pc, #64]	@ (80033c8 <xTaskPriorityDisinherit+0x198>)
 8003388:	189a      	adds	r2, r3, r2
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	615a      	str	r2, [r3, #20]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003392:	490d      	ldr	r1, [pc, #52]	@ (80033c8 <xTaskPriorityDisinherit+0x198>)
 8003394:	0013      	movs	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	189b      	adds	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	585b      	ldr	r3, [r3, r1]
 800339e:	1c58      	adds	r0, r3, #1
 80033a0:	4909      	ldr	r1, [pc, #36]	@ (80033c8 <xTaskPriorityDisinherit+0x198>)
 80033a2:	0013      	movs	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80033b0:	697b      	ldr	r3, [r7, #20]
    }
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b007      	add	sp, #28
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	20000084 	.word	0x20000084
 80033c0:	200019c8 	.word	0x200019c8
 80033c4:	20000138 	.word	0x20000138
 80033c8:	20000088 	.word	0x20000088

080033cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <prvAddCurrentTaskToDelayedList+0x74>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033dc:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <prvAddCurrentTaskToDelayedList+0x78>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fd93 	bl	8000f0e <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033f0:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <prvAddCurrentTaskToDelayedList+0x78>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d209      	bcs.n	8003414 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <prvAddCurrentTaskToDelayedList+0x78>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f7fd fd48 	bl	8000ea2 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003412:	e010      	b.n	8003436 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003414:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <prvAddCurrentTaskToDelayedList+0x80>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <prvAddCurrentTaskToDelayedList+0x78>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3304      	adds	r3, #4
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f7fd fd3e 	bl	8000ea2 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8003426:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <prvAddCurrentTaskToDelayedList+0x84>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d202      	bcs.n	8003436 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8003430:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <prvAddCurrentTaskToDelayedList+0x84>)
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	20000134 	.word	0x20000134
 8003444:	20000084 	.word	0x20000084
 8003448:	20000118 	.word	0x20000118
 800344c:	20000114 	.word	0x20000114
 8003450:	20000150 	.word	0x20000150

08003454 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800345e:	f000 fc83 	bl	8003d68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <xTimerCreateTimerTask+0x44>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800346a:	490c      	ldr	r1, [pc, #48]	@ (800349c <xTimerCreateTimerTask+0x48>)
 800346c:	480c      	ldr	r0, [pc, #48]	@ (80034a0 <xTimerCreateTimerTask+0x4c>)
 800346e:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <xTimerCreateTimerTask+0x50>)
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	2303      	movs	r3, #3
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	f7fe fece 	bl	800221a <xTaskCreate>
 800347e:	0003      	movs	r3, r0
 8003480:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <xTimerCreateTimerTask+0x3a>
 8003488:	b672      	cpsid	i
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	e7fd      	b.n	800348a <xTimerCreateTimerTask+0x36>
        return xReturn;
 800348e:	687b      	ldr	r3, [r7, #4]
    }
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000018c 	.word	0x2000018c
 800349c:	0800727c 	.word	0x0800727c
 80034a0:	080039a5 	.word	0x080039a5
 80034a4:	20000190 	.word	0x20000190

080034a8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	@ 0x24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80034b6:	202c      	movs	r0, #44	@ 0x2c
 80034b8:	f000 fdda 	bl	8004070 <pvPortMalloc>
 80034bc:	0003      	movs	r3, r0
 80034be:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00e      	beq.n	80034e4 <xTimerCreate+0x3c>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2228      	movs	r2, #40	@ 0x28
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80034ce:	683c      	ldr	r4, [r7, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	0023      	movs	r3, r4
 80034e0:	f000 f806 	bl	80034f0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80034e4:	697b      	ldr	r3, [r7, #20]
        }
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b007      	add	sp, #28
 80034ec:	bd90      	pop	{r4, r7, pc}
	...

080034f0 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <prvInitialiseNewTimer+0x1a>
 8003504:	b672      	cpsid	i
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	e7fd      	b.n	8003506 <prvInitialiseNewTimer+0x16>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800350a:	f000 fc2d 	bl	8003d68 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	0018      	movs	r0, r3
 800352c:	f7fd fcae 	bl	8000e8c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <prvInitialiseNewTimer+0x58>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2228      	movs	r2, #40	@ 0x28
 800353a:	5c9b      	ldrb	r3, [r3, r2]
 800353c:	2204      	movs	r2, #4
 800353e:	4313      	orrs	r3, r2
 8003540:	b2d9      	uxtb	r1, r3
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2228      	movs	r2, #40	@ 0x28
 8003546:	5499      	strb	r1, [r3, r2]
        }

        traceTIMER_CREATE( pxNewTimer );
 8003548:	2005      	movs	r0, #5
 800354a:	f002 fb4b 	bl	8005be4 <prvTraceGetObjectHandle>
 800354e:	0003      	movs	r3, r0
 8003550:	001a      	movs	r2, r3
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fed5 	bl	8004306 <prvTraceSetTimerNumberLow16>
 800355c:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <prvInitialiseNewTimer+0xf8>)
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fee8 	bl	800433a <prvTraceSetTimerNumberHigh16>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fead 	bl	80042cc <prvTraceGetTimerNumberLow16>
 8003572:	0003      	movs	r3, r0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	0019      	movs	r1, r3
 8003578:	2005      	movs	r0, #5
 800357a:	f002 fc21 	bl	8005dc0 <prvMarkObjectAsUsed>
 800357e:	f000 ff49 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003582:	0003      	movs	r3, r0
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fe0b 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <prvInitialiseNewTimer+0xfc>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <prvInitialiseNewTimer+0xd8>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fea3 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 80035a2:	0003      	movs	r3, r0
 80035a4:	001a      	movs	r2, r3
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <prvInitialiseNewTimer+0xfc>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <prvInitialiseNewTimer+0xd8>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fe89 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80035ba:	0003      	movs	r3, r0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	001a      	movs	r2, r3
 80035c0:	2105      	movs	r1, #5
 80035c2:	20b0      	movs	r0, #176	@ 0xb0
 80035c4:	f001 ff36 	bl	8005434 <prvTraceStoreKernelCall>
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fe7e 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80035d0:	0003      	movs	r3, r0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	0019      	movs	r1, r3
 80035d8:	2005      	movs	r0, #5
 80035da:	f002 fa17 	bl	8005a0c <prvTraceSetObjectState>
    }
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	200019ca 	.word	0x200019ca
 80035ec:	200019c8 	.word	0x200019c8

080035f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b089      	sub	sp, #36	@ 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <xTimerGenericCommand+0x1e>
 8003608:	b672      	cpsid	i
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	e7fd      	b.n	800360a <xTimerGenericCommand+0x1a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800360e:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <xTimerGenericCommand+0x244>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <xTimerGenericCommand+0x28>
 8003616:	e108      	b.n	800382a <xTimerGenericCommand+0x23a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003618:	2410      	movs	r4, #16
 800361a:	193b      	adds	r3, r7, r4
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	601a      	str	r2, [r3, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003620:	193b      	adds	r3, r7, r4
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	605a      	str	r2, [r3, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b05      	cmp	r3, #5
 8003630:	dc19      	bgt.n	8003666 <xTimerGenericCommand+0x76>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003632:	f7ff fde1 	bl	80031f8 <xTaskGetSchedulerState>
 8003636:	0003      	movs	r3, r0
 8003638:	2b02      	cmp	r3, #2
 800363a:	d109      	bne.n	8003650 <xTimerGenericCommand+0x60>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800363c:	4b7d      	ldr	r3, [pc, #500]	@ (8003834 <xTimerGenericCommand+0x244>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003642:	1939      	adds	r1, r7, r4
 8003644:	2300      	movs	r3, #0
 8003646:	f7fd fe3b 	bl	80012c0 <xQueueGenericSend>
 800364a:	0003      	movs	r3, r0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e014      	b.n	800367a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003650:	4b78      	ldr	r3, [pc, #480]	@ (8003834 <xTimerGenericCommand+0x244>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	2310      	movs	r3, #16
 8003656:	18f9      	adds	r1, r7, r3
 8003658:	2300      	movs	r3, #0
 800365a:	2200      	movs	r2, #0
 800365c:	f7fd fe30 	bl	80012c0 <xQueueGenericSend>
 8003660:	0003      	movs	r3, r0
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	e009      	b.n	800367a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003666:	4b73      	ldr	r3, [pc, #460]	@ (8003834 <xTimerGenericCommand+0x244>)
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	2310      	movs	r3, #16
 800366e:	18f9      	adds	r1, r7, r3
 8003670:	2300      	movs	r3, #0
 8003672:	f7fe f80b 	bl	800168c <xQueueGenericSendFromISR>
 8003676:	0003      	movs	r3, r0
 8003678:	61fb      	str	r3, [r7, #28]
            }

            traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	dc00      	bgt.n	8003682 <xTimerGenericCommand+0x92>
 8003680:	e0d3      	b.n	800382a <xTimerGenericCommand+0x23a>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d154      	bne.n	8003732 <xTimerGenericCommand+0x142>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d128      	bne.n	80036e0 <xTimerGenericCommand+0xf0>
 800368e:	f000 fec1 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003692:	0003      	movs	r3, r0
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fd83 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800369a:	0003      	movs	r3, r0
 800369c:	001a      	movs	r2, r3
 800369e:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <xTimerGenericCommand+0x248>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d100      	bne.n	80036ac <xTimerGenericCommand+0xbc>
 80036aa:	e0be      	b.n	800382a <xTimerGenericCommand+0x23a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fe1a 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 80036b4:	0003      	movs	r3, r0
 80036b6:	001a      	movs	r2, r3
 80036b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003838 <xTimerGenericCommand+0x248>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <xTimerGenericCommand+0xd6>
 80036c4:	e0b1      	b.n	800382a <xTimerGenericCommand+0x23a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fdff 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80036ce:	0003      	movs	r3, r0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	001a      	movs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2105      	movs	r1, #5
 80036d8:	20b4      	movs	r0, #180	@ 0xb4
 80036da:	f001 ff11 	bl	8005500 <prvTraceStoreKernelCallWithParam>
 80036de:	e0a4      	b.n	800382a <xTimerGenericCommand+0x23a>
 80036e0:	f000 fe98 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 80036e4:	0003      	movs	r3, r0
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fd5a 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80036ec:	0003      	movs	r3, r0
 80036ee:	001a      	movs	r2, r3
 80036f0:	4b51      	ldr	r3, [pc, #324]	@ (8003838 <xTimerGenericCommand+0x248>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d100      	bne.n	80036fe <xTimerGenericCommand+0x10e>
 80036fc:	e095      	b.n	800382a <xTimerGenericCommand+0x23a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 fdf1 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 8003706:	0003      	movs	r3, r0
 8003708:	001a      	movs	r2, r3
 800370a:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <xTimerGenericCommand+0x248>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d100      	bne.n	8003718 <xTimerGenericCommand+0x128>
 8003716:	e088      	b.n	800382a <xTimerGenericCommand+0x23a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fdd6 	bl	80042cc <prvTraceGetTimerNumberLow16>
 8003720:	0003      	movs	r3, r0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	001a      	movs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2105      	movs	r1, #5
 800372a:	20bd      	movs	r0, #189	@ 0xbd
 800372c:	f001 fee8 	bl	8005500 <prvTraceStoreKernelCallWithParam>
 8003730:	e07b      	b.n	800382a <xTimerGenericCommand+0x23a>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d148      	bne.n	80037ca <xTimerGenericCommand+0x1da>
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d145      	bne.n	80037ca <xTimerGenericCommand+0x1da>
 800373e:	f000 fe69 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003742:	0003      	movs	r3, r0
 8003744:	0018      	movs	r0, r3
 8003746:	f000 fd2b 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800374a:	0003      	movs	r3, r0
 800374c:	001a      	movs	r2, r3
 800374e:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <xTimerGenericCommand+0x248>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <xTimerGenericCommand+0x198>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fdc3 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 8003762:	0003      	movs	r3, r0
 8003764:	001a      	movs	r2, r3
 8003766:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <xTimerGenericCommand+0x248>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <xTimerGenericCommand+0x198>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	0018      	movs	r0, r3
 8003776:	f000 fda9 	bl	80042cc <prvTraceGetTimerNumberLow16>
 800377a:	0003      	movs	r3, r0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	001a      	movs	r2, r3
 8003780:	2105      	movs	r1, #5
 8003782:	20b5      	movs	r0, #181	@ 0xb5
 8003784:	f001 fe56 	bl	8005434 <prvTraceStoreKernelCall>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fd9e 	bl	80042cc <prvTraceGetTimerNumberLow16>
 8003790:	0003      	movs	r3, r0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2205      	movs	r2, #5
 8003796:	0019      	movs	r1, r3
 8003798:	200d      	movs	r0, #13
 800379a:	f002 f82d 	bl	80057f8 <prvTraceStoreObjectNameOnCloseEvent>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fd93 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80037a6:	0003      	movs	r3, r0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2205      	movs	r2, #5
 80037ac:	0019      	movs	r1, r3
 80037ae:	2015      	movs	r0, #21
 80037b0:	f002 f86c 	bl	800588c <prvTraceStoreObjectPropertiesOnCloseEvent>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fd88 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80037bc:	0003      	movs	r3, r0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	0019      	movs	r1, r3
 80037c2:	2005      	movs	r0, #5
 80037c4:	f002 fabe 	bl	8005d44 <prvTraceFreeObjectHandle>
 80037c8:	e02f      	b.n	800382a <xTimerGenericCommand+0x23a>
 80037ca:	f000 fe23 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 80037ce:	0003      	movs	r3, r0
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fce5 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 80037d6:	0003      	movs	r3, r0
 80037d8:	001a      	movs	r2, r3
 80037da:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <xTimerGenericCommand+0x248>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d021      	beq.n	800382a <xTimerGenericCommand+0x23a>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fd7d 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 80037ee:	0003      	movs	r3, r0
 80037f0:	001a      	movs	r2, r3
 80037f2:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <xTimerGenericCommand+0x248>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d015      	beq.n	800382a <xTimerGenericCommand+0x23a>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <xTimerGenericCommand+0x218>
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <xTimerGenericCommand+0x21a>
 8003808:	2309      	movs	r3, #9
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	189b      	adds	r3, r3, r2
 800380e:	33b0      	adds	r3, #176	@ 0xb0
 8003810:	001c      	movs	r4, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fd59 	bl	80042cc <prvTraceGetTimerNumberLow16>
 800381a:	0003      	movs	r3, r0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	001a      	movs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2105      	movs	r1, #5
 8003824:	0020      	movs	r0, r4
 8003826:	f001 fe6b 	bl	8005500 <prvTraceStoreKernelCallWithParam>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800382a:	69fb      	ldr	r3, [r7, #28]
    }
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b009      	add	sp, #36	@ 0x24
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	2000018c 	.word	0x2000018c
 8003838:	200019c8 	.word	0x200019c8

0800383c <xTimerGetExpiryTime>:
        return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    }
/*-----------------------------------------------------------*/

    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
    {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60fb      	str	r3, [r7, #12]
        TickType_t xReturn;

        configASSERT( xTimer );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <xTimerGetExpiryTime+0x18>
 800384e:	b672      	cpsid	i
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	e7fd      	b.n	8003850 <xTimerGetExpiryTime+0x14>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60bb      	str	r3, [r7, #8]
        return xReturn;
 800385a:	68bb      	ldr	r3, [r7, #8]
    }
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}

08003864 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003870:	e02e      	b.n	80038d0 <prvReloadTimer+0x6c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 800387c:	f000 fdca 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003880:	0003      	movs	r3, r0
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fc8c 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8003888:	0003      	movs	r3, r0
 800388a:	001a      	movs	r2, r3
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <prvReloadTimer+0x8c>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d016      	beq.n	80038c6 <prvReloadTimer+0x62>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fd24 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 80038a0:	0003      	movs	r3, r0
 80038a2:	001a      	movs	r2, r3
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <prvReloadTimer+0x8c>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <prvReloadTimer+0x62>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 fd0a 	bl	80042cc <prvTraceGetTimerNumberLow16>
 80038b8:	0003      	movs	r3, r0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	001a      	movs	r2, r3
 80038be:	2105      	movs	r1, #5
 80038c0:	20db      	movs	r0, #219	@ 0xdb
 80038c2:	f001 fdb7 	bl	8005434 <prvTraceStoreKernelCall>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	0010      	movs	r0, r2
 80038ce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	18d1      	adds	r1, r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f901 	bl	8003ae4 <prvInsertTimerInActiveList>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d1c5      	bne.n	8003872 <prvReloadTimer+0xe>
        }
    }
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200019c8 	.word	0x200019c8

080038f4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <prvProcessExpiredTimer+0xa8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3304      	adds	r3, #4
 800390c:	0018      	movs	r0, r3
 800390e:	f7fd fafe 	bl	8000f0e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2228      	movs	r2, #40	@ 0x28
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	001a      	movs	r2, r3
 800391a:	2304      	movs	r3, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d006      	beq.n	800392e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff ff9c 	bl	8003864 <prvReloadTimer>
 800392c:	e008      	b.n	8003940 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2228      	movs	r2, #40	@ 0x28
 8003932:	5c9b      	ldrb	r3, [r3, r2]
 8003934:	2201      	movs	r2, #1
 8003936:	4393      	bics	r3, r2
 8003938:	b2d9      	uxtb	r1, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2228      	movs	r2, #40	@ 0x28
 800393e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 8003940:	f000 fd68 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003944:	0003      	movs	r3, r0
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fc2a 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 800394c:	0003      	movs	r3, r0
 800394e:	001a      	movs	r2, r3
 8003950:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <prvProcessExpiredTimer+0xac>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	4013      	ands	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <prvProcessExpiredTimer+0x96>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 fcc2 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 8003964:	0003      	movs	r3, r0
 8003966:	001a      	movs	r2, r3
 8003968:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <prvProcessExpiredTimer+0xac>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <prvProcessExpiredTimer+0x96>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fca8 	bl	80042cc <prvTraceGetTimerNumberLow16>
 800397c:	0003      	movs	r3, r0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	001a      	movs	r2, r3
 8003982:	2105      	movs	r1, #5
 8003984:	20db      	movs	r0, #219	@ 0xdb
 8003986:	f001 fd55 	bl	8005434 <prvTraceStoreKernelCall>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	0010      	movs	r0, r2
 8003992:	4798      	blx	r3
    }
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000184 	.word	0x20000184
 80039a0:	200019c8 	.word	0x200019c8

080039a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ac:	2308      	movs	r3, #8
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f855 	bl	8003a60 <prvGetNextExpireTime>
 80039b6:	0003      	movs	r3, r0
 80039b8:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f805 	bl	80039d0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039c6:	f000 f8cf 	bl	8003b68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	e7ee      	b.n	80039ac <prvTimerTask+0x8>
	...

080039d0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039da:	f7fe fec3 	bl	8002764 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039de:	2308      	movs	r3, #8
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f85e 	bl	8003aa4 <prvSampleTimeNow>
 80039e8:	0003      	movs	r3, r0
 80039ea:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d12b      	bne.n	8003a4a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <prvProcessTimerOrBlockTask+0x42>
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d808      	bhi.n	8003a12 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8003a00:	f7fe febc 	bl	800277c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0011      	movs	r1, r2
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff ff72 	bl	80038f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a10:	e01d      	b.n	8003a4e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a18:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <prvProcessTimerOrBlockTask+0x88>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <prvProcessTimerOrBlockTask+0x56>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <prvProcessTimerOrBlockTask+0x58>
 8003a26:	2300      	movs	r3, #0
 8003a28:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <prvProcessTimerOrBlockTask+0x8c>)
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	0019      	movs	r1, r3
 8003a38:	f7fe fbbc 	bl	80021b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a3c:	f7fe fe9e 	bl	800277c <xTaskResumeAll>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d104      	bne.n	8003a4e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8003a44:	f000 fa6c 	bl	8003f20 <vPortYield>
    }
 8003a48:	e001      	b.n	8003a4e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8003a4a:	f7fe fe97 	bl	800277c <xTaskResumeAll>
    }
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	20000188 	.word	0x20000188
 8003a5c:	2000018c 	.word	0x2000018c

08003a60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <prvGetNextExpireTime+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <prvGetNextExpireTime+0x16>
 8003a72:	2201      	movs	r2, #1
 8003a74:	e000      	b.n	8003a78 <prvGetNextExpireTime+0x18>
 8003a76:	2200      	movs	r2, #0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <prvGetNextExpireTime+0x40>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e001      	b.n	8003a94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a94:	68fb      	ldr	r3, [r7, #12]
    }
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	20000184 	.word	0x20000184

08003aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003aac:	f7fe ff66 	bl	800297c <xTaskGetTickCount>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <prvSampleTimeNow+0x3c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d205      	bcs.n	8003aca <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003abe:	f000 f92b 	bl	8003d18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e002      	b.n	8003ad0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <prvSampleTimeNow+0x3c>)
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000194 	.word	0x20000194

08003ae4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d812      	bhi.n	8003b30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e01b      	b.n	8003b56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <prvInsertTimerInActiveList+0x7c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3304      	adds	r3, #4
 8003b26:	0019      	movs	r1, r3
 8003b28:	0010      	movs	r0, r2
 8003b2a:	f7fd f9ba 	bl	8000ea2 <vListInsert>
 8003b2e:	e012      	b.n	8003b56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d206      	bcs.n	8003b46 <prvInsertTimerInActiveList+0x62>
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e007      	b.n	8003b56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <prvInsertTimerInActiveList+0x80>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	0019      	movs	r1, r3
 8003b50:	0010      	movs	r0, r2
 8003b52:	f7fd f9a6 	bl	8000ea2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b56:	697b      	ldr	r3, [r7, #20]
    }
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b006      	add	sp, #24
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000188 	.word	0x20000188
 8003b64:	20000184 	.word	0x20000184

08003b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b6e:	e0be      	b.n	8003cee <prvProcessReceivedCommands+0x186>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da00      	bge.n	8003b7a <prvProcessReceivedCommands+0x12>
 8003b78:	e0b9      	b.n	8003cee <prvProcessReceivedCommands+0x186>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fd f9be 	bl	8000f0e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b92:	003b      	movs	r3, r7
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff ff85 	bl	8003aa4 <prvSampleTimeNow>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d900      	bls.n	8003ba8 <prvProcessReceivedCommands+0x40>
 8003ba6:	e09f      	b.n	8003ce8 <prvProcessReceivedCommands+0x180>
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	4b58      	ldr	r3, [pc, #352]	@ (8003d0c <prvProcessReceivedCommands+0x1a4>)
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2228      	movs	r2, #40	@ 0x28
 8003bb6:	5c9b      	ldrb	r3, [r3, r2]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b2d9      	uxtb	r1, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2228      	movs	r2, #40	@ 0x28
 8003bc2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	18d1      	adds	r1, r2, r3
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f7ff ff85 	bl	8003ae4 <prvInsertTimerInActiveList>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d100      	bne.n	8003be0 <prvProcessReceivedCommands+0x78>
 8003bde:	e085      	b.n	8003cec <prvProcessReceivedCommands+0x184>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2228      	movs	r2, #40	@ 0x28
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	001a      	movs	r2, r3
 8003be8:	2304      	movs	r3, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00a      	beq.n	8003c04 <prvProcessReceivedCommands+0x9c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	18d1      	adds	r1, r2, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7ff fe31 	bl	8003864 <prvReloadTimer>
 8003c02:	e008      	b.n	8003c16 <prvProcessReceivedCommands+0xae>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2228      	movs	r2, #40	@ 0x28
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	b2d9      	uxtb	r1, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 8003c16:	f000 fbfd 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 fabf 	bl	80041a0 <prvTraceGetTaskNumberHigh16>
 8003c22:	0003      	movs	r3, r0
 8003c24:	001a      	movs	r2, r3
 8003c26:	4b3a      	ldr	r3, [pc, #232]	@ (8003d10 <prvProcessReceivedCommands+0x1a8>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <prvProcessReceivedCommands+0xf8>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fb57 	bl	80042e8 <prvTraceGetTimerNumberHigh16>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	4b34      	ldr	r3, [pc, #208]	@ (8003d10 <prvProcessReceivedCommands+0x1a8>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	4013      	ands	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <prvProcessReceivedCommands+0xf8>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 fb3d 	bl	80042cc <prvTraceGetTimerNumberLow16>
 8003c52:	0003      	movs	r3, r0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	001a      	movs	r2, r3
 8003c58:	2105      	movs	r1, #5
 8003c5a:	20db      	movs	r0, #219	@ 0xdb
 8003c5c:	f001 fbea 	bl	8005434 <prvTraceStoreKernelCall>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	0010      	movs	r0, r2
 8003c68:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c6a:	e03f      	b.n	8003cec <prvProcessReceivedCommands+0x184>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2228      	movs	r2, #40	@ 0x28
 8003c70:	5c9b      	ldrb	r3, [r3, r2]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4393      	bics	r3, r2
 8003c76:	b2d9      	uxtb	r1, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2228      	movs	r2, #40	@ 0x28
 8003c7c:	5499      	strb	r1, [r3, r2]
                        break;
 8003c7e:	e036      	b.n	8003cee <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2228      	movs	r2, #40	@ 0x28
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	2201      	movs	r2, #1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b2d9      	uxtb	r1, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2228      	movs	r2, #40	@ 0x28
 8003c90:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <prvProcessReceivedCommands+0x140>
 8003ca2:	b672      	cpsid	i
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	e7fd      	b.n	8003ca4 <prvProcessReceivedCommands+0x13c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	18d1      	adds	r1, r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	6978      	ldr	r0, [r7, #20]
 8003cb6:	f7ff ff15 	bl	8003ae4 <prvInsertTimerInActiveList>
                        break;
 8003cba:	e018      	b.n	8003cee <prvProcessReceivedCommands+0x186>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2228      	movs	r2, #40	@ 0x28
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d104      	bne.n	8003cd4 <prvProcessReceivedCommands+0x16c>
                            {
                                vPortFree( pxTimer );
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 fa31 	bl	8004134 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cd2:	e00c      	b.n	8003cee <prvProcessReceivedCommands+0x186>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2228      	movs	r2, #40	@ 0x28
 8003cd8:	5c9b      	ldrb	r3, [r3, r2]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4393      	bics	r3, r2
 8003cde:	b2d9      	uxtb	r1, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2228      	movs	r2, #40	@ 0x28
 8003ce4:	5499      	strb	r1, [r3, r2]
                        break;
 8003ce6:	e002      	b.n	8003cee <prvProcessReceivedCommands+0x186>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	e000      	b.n	8003cee <prvProcessReceivedCommands+0x186>
                        break;
 8003cec:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <prvProcessReceivedCommands+0x1ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1d39      	adds	r1, r7, #4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fd fed6 	bl	8001aa8 <xQueueReceive>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d000      	beq.n	8003d02 <prvProcessReceivedCommands+0x19a>
 8003d00:	e736      	b.n	8003b70 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b006      	add	sp, #24
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	0800796c 	.word	0x0800796c
 8003d10:	200019c8 	.word	0x200019c8
 8003d14:	2000018c 	.word	0x2000018c

08003d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d1e:	e00b      	b.n	8003d38 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d20:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <prvSwitchTimerLists+0x48>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fdde 	bl	80038f4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <prvSwitchTimerLists+0x48>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ee      	bne.n	8003d20 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d42:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <prvSwitchTimerLists+0x48>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <prvSwitchTimerLists+0x4c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <prvSwitchTimerLists+0x48>)
 8003d4e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <prvSwitchTimerLists+0x4c>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
    }
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	20000184 	.word	0x20000184
 8003d64:	20000188 	.word	0x20000188

08003d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d6c:	f000 f8e8 	bl	8003f40 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <prvCheckForValidListAndQueue+0x5c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d120      	bne.n	8003dba <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <prvCheckForValidListAndQueue+0x60>)
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fd f868 	bl	8000e50 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d80:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <prvCheckForValidListAndQueue+0x64>)
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fd f864 	bl	8000e50 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <prvCheckForValidListAndQueue+0x68>)
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc8 <prvCheckForValidListAndQueue+0x60>)
 8003d8c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <prvCheckForValidListAndQueue+0x6c>)
 8003d90:	4a0e      	ldr	r2, [pc, #56]	@ (8003dcc <prvCheckForValidListAndQueue+0x64>)
 8003d92:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d94:	2200      	movs	r2, #0
 8003d96:	210c      	movs	r1, #12
 8003d98:	200a      	movs	r0, #10
 8003d9a:	f7fd f96b 	bl	8001074 <xQueueGenericCreate>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <prvCheckForValidListAndQueue+0x5c>)
 8003da2:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <prvCheckForValidListAndQueue+0x5c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <prvCheckForValidListAndQueue+0x5c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <prvCheckForValidListAndQueue+0x70>)
 8003db2:	0011      	movs	r1, r2
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fe f9a3 	bl	8002100 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003dba:	f000 f8d3 	bl	8003f64 <vPortExitCritical>
    }
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000018c 	.word	0x2000018c
 8003dc8:	2000015c 	.word	0x2000015c
 8003dcc:	20000170 	.word	0x20000170
 8003dd0:	20000184 	.word	0x20000184
 8003dd4:	20000188 	.word	0x20000188
 8003dd8:	08007284 	.word	0x08007284

08003ddc <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        }
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	625a      	str	r2, [r3, #36]	@ 0x24
        }
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b04      	subs	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2280      	movs	r2, #128	@ 0x80
 8003e1e:	0452      	lsls	r2, r2, #17
 8003e20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3b04      	subs	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b04      	subs	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003e34:	4a08      	ldr	r2, [pc, #32]	@ (8003e58 <pxPortInitialiseStack+0x50>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3b14      	subs	r3, #20
 8003e3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b20      	subs	r3, #32
 8003e4a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	08003e5d 	.word	0x08003e5d

08003e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <prvTaskExitError+0x2c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	d002      	beq.n	8003e74 <prvTaskExitError+0x18>
 8003e6e:	b672      	cpsid	i
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	e7fd      	b.n	8003e70 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8003e74:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0fc      	beq.n	8003e78 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000004 	.word	0x20000004

08003e8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003ea0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8003ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed0 <pxCurrentTCBConst2>)
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	3020      	adds	r0, #32
 8003ea8:	f380 8809 	msr	PSP, r0
 8003eac:	2002      	movs	r0, #2
 8003eae:	f380 8814 	msr	CONTROL, r0
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003eb8:	46ae      	mov	lr, r5
 8003eba:	bc08      	pop	{r3}
 8003ebc:	bc04      	pop	{r2}
 8003ebe:	b662      	cpsie	i
 8003ec0:	4718      	bx	r3
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46c0      	nop			@ (mov r8, r8)

08003ed0 <pxCurrentTCBConst2>:
 8003ed0:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46c0      	nop			@ (mov r8, r8)

08003ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <xPortStartScheduler+0x40>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <xPortStartScheduler+0x40>)
 8003ee2:	21ff      	movs	r1, #255	@ 0xff
 8003ee4:	0409      	lsls	r1, r1, #16
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <xPortStartScheduler+0x40>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <xPortStartScheduler+0x40>)
 8003ef0:	21ff      	movs	r1, #255	@ 0xff
 8003ef2:	0609      	lsls	r1, r1, #24
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ef8:	f000 f898 	bl	800402c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <xPortStartScheduler+0x44>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003f02:	f7ff ffcd 	bl	8003ea0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f06:	f7fe fe7b 	bl	8002c00 <vTaskSwitchContext>
    prvTaskExitError();
 8003f0a:	f7ff ffa7 	bl	8003e5c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	e000ed20 	.word	0xe000ed20
 8003f1c:	20000004 	.word	0x20000004

08003f20 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <vPortYield+0x1c>)
 8003f26:	2280      	movs	r2, #128	@ 0x80
 8003f28:	0552      	lsls	r2, r2, #21
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8003f2c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003f30:	f3bf 8f6f 	isb	sy
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003f44:	b672      	cpsid	i
    uxCriticalNesting++;
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <vPortEnterCritical+0x20>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <vPortEnterCritical+0x20>)
 8003f4e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003f50:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003f54:	f3bf 8f6f 	isb	sy
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	20000004 	.word	0x20000004

08003f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f68:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <vPortExitCritical+0x2c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <vPortExitCritical+0x12>
 8003f70:	b672      	cpsid	i
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	e7fd      	b.n	8003f72 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <vPortExitCritical+0x2c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <vPortExitCritical+0x2c>)
 8003f7e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8003f80:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <vPortExitCritical+0x2c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d100      	bne.n	8003f8a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003f88:	b662      	cpsie	i
    }
}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000004 	.word	0x20000004

08003f94 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8003f94:	f3ef 8010 	mrs	r0, PRIMASK
 8003f98:	b672      	cpsid	i
 8003f9a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	0018      	movs	r0, r3

08003fa0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8003fa0:	f380 8810 	msr	PRIMASK, r0
 8003fa4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
	...

08003fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fb0:	f3ef 8009 	mrs	r0, PSP
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <pxCurrentTCBConst>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	3820      	subs	r0, #32
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003fbe:	4644      	mov	r4, r8
 8003fc0:	464d      	mov	r5, r9
 8003fc2:	4656      	mov	r6, sl
 8003fc4:	465f      	mov	r7, fp
 8003fc6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003fc8:	b508      	push	{r3, lr}
 8003fca:	b672      	cpsid	i
 8003fcc:	f7fe fe18 	bl	8002c00 <vTaskSwitchContext>
 8003fd0:	b662      	cpsie	i
 8003fd2:	bc0c      	pop	{r2, r3}
 8003fd4:	6811      	ldr	r1, [r2, #0]
 8003fd6:	6808      	ldr	r0, [r1, #0]
 8003fd8:	3010      	adds	r0, #16
 8003fda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003fdc:	46a0      	mov	r8, r4
 8003fde:	46a9      	mov	r9, r5
 8003fe0:	46b2      	mov	sl, r6
 8003fe2:	46bb      	mov	fp, r7
 8003fe4:	f380 8809 	msr	PSP, r0
 8003fe8:	3820      	subs	r0, #32
 8003fea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003fec:	4718      	bx	r3
 8003fee:	46c0      	nop			@ (mov r8, r8)

08003ff0 <pxCurrentTCBConst>:
 8003ff0:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46c0      	nop			@ (mov r8, r8)

08003ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ffe:	f7ff ffc9 	bl	8003f94 <ulSetInterruptMaskFromISR>
 8004002:	0003      	movs	r3, r0
 8004004:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004006:	f7fe fcd1 	bl	80029ac <xTaskIncrementTick>
 800400a:	1e03      	subs	r3, r0, #0
 800400c:	d003      	beq.n	8004016 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <SysTick_Handler+0x30>)
 8004010:	2280      	movs	r2, #128	@ 0x80
 8004012:	0552      	lsls	r2, r2, #21
 8004014:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff ffc1 	bl	8003fa0 <vClearInterruptMaskFromISR>
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b002      	add	sp, #8
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <vPortSetupTimerInterrupt+0x34>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <vPortSetupTimerInterrupt+0x38>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <vPortSetupTimerInterrupt+0x3c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	22fa      	movs	r2, #250	@ 0xfa
 8004042:	0091      	lsls	r1, r2, #2
 8004044:	0018      	movs	r0, r3
 8004046:	f7fc f85f 	bl	8000108 <__udivsi3>
 800404a:	0003      	movs	r3, r0
 800404c:	001a      	movs	r2, r3
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <vPortSetupTimerInterrupt+0x40>)
 8004050:	3a01      	subs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004054:	4b02      	ldr	r3, [pc, #8]	@ (8004060 <vPortSetupTimerInterrupt+0x34>)
 8004056:	2207      	movs	r2, #7
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	e000e010 	.word	0xe000e010
 8004064:	e000e018 	.word	0xe000e018
 8004068:	20000014 	.word	0x20000014
 800406c:	e000e014 	.word	0xe000e014

08004070 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2207      	movs	r2, #7
 8004080:	4013      	ands	r3, r2
 8004082:	d00e      	beq.n	80040a2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2207      	movs	r2, #7
 8004088:	4393      	bics	r3, r2
 800408a:	3308      	adds	r3, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	d205      	bcs.n	800409e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2207      	movs	r2, #7
 8004096:	4393      	bics	r3, r2
 8004098:	3308      	adds	r3, #8
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e001      	b.n	80040a2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80040a2:	f7fe fb5f 	bl	8002764 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80040a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <pvPortMalloc+0xb4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <pvPortMalloc+0xb8>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	4393      	bics	r3, r2
 80040b4:	001a      	movs	r2, r3
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <pvPortMalloc+0xb4>)
 80040b8:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <pvPortMalloc+0xbc>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <pvPortMalloc+0xc0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d813      	bhi.n	80040f6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80040ce:	4b17      	ldr	r3, [pc, #92]	@ (800412c <pvPortMalloc+0xbc>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	18d2      	adds	r2, r2, r3
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <pvPortMalloc+0xbc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80040da:	429a      	cmp	r2, r3
 80040dc:	d90b      	bls.n	80040f6 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80040de:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <pvPortMalloc+0xb4>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <pvPortMalloc+0xbc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80040ea:	4b10      	ldr	r3, [pc, #64]	@ (800412c <pvPortMalloc+0xbc>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	18d2      	adds	r2, r2, r3
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <pvPortMalloc+0xbc>)
 80040f4:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <pvPortMalloc+0x9a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	0019      	movs	r1, r3
 8004102:	2094      	movs	r0, #148	@ 0x94
 8004104:	f001 f8f0 	bl	80052e8 <vTraceStoreMemMangEvent>
 8004108:	e005      	b.n	8004116 <pvPortMalloc+0xa6>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	0019      	movs	r1, r3
 8004110:	20e8      	movs	r0, #232	@ 0xe8
 8004112:	f001 f8e9 	bl	80052e8 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8004116:	f7fe fb31 	bl	800277c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000199c 	.word	0x2000199c
 8004128:	2000019f 	.word	0x2000019f
 800412c:	20001998 	.word	0x20001998
 8004130:	000017f7 	.word	0x000017f7

08004134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <vPortFree+0x14>
 8004142:	b672      	cpsid	i
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	e7fd      	b.n	8004144 <vPortFree+0x10>
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}

08004150 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fe92 	bl	8001e84 <uxQueueGetQueueNumber>
 8004160:	0003      	movs	r3, r0
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}

0800416a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7fd fe9b 	bl	8001eb0 <ucQueueGetQueueType>
 800417a:	0003      	movs	r3, r0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f7fe ff96 	bl	80030c0 <uxTaskGetTaskNumber>
 8004194:	0003      	movs	r3, r0
 8004196:	b29b      	uxth	r3, r3
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fe ff88 	bl	80030c0 <uxTaskGetTaskNumber>
 80041b0:	0003      	movs	r3, r0
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	b29b      	uxth	r3, r3
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b002      	add	sp, #8
 80041bc:	bd80      	pop	{r7, pc}

080041be <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	000a      	movs	r2, r1
 80041c8:	1cbb      	adds	r3, r7, #2
 80041ca:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fe ff76 	bl	80030c0 <uxTaskGetTaskNumber>
 80041d4:	0003      	movs	r3, r0
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	1cbb      	adds	r3, r7, #2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7fe ff7f 	bl	80030e8 <vTaskSetTaskNumber>
}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	000a      	movs	r2, r1
 80041fc:	1cbb      	adds	r3, r7, #2
 80041fe:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	0018      	movs	r0, r3
 8004204:	f7fe ff5c 	bl	80030c0 <uxTaskGetTaskNumber>
 8004208:	0003      	movs	r3, r0
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	0c1a      	lsrs	r2, r3, #16
 800420e:	1cbb      	adds	r3, r7, #2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0011      	movs	r1, r2
 800421a:	0018      	movs	r0, r3
 800421c:	f7fe ff64 	bl	80030e8 <vTaskSetTaskNumber>
}
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f7ff ff8c 	bl	8004150 <prvTraceGetQueueNumber>
 8004238:	0003      	movs	r3, r0
 800423a:	b29b      	uxth	r3, r3
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f7ff ff7e 	bl	8004150 <prvTraceGetQueueNumber>
 8004254:	0003      	movs	r3, r0
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b29b      	uxth	r3, r3
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b002      	add	sp, #8
 8004260:	bd80      	pop	{r7, pc}

08004262 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	000a      	movs	r2, r1
 800426c:	1cbb      	adds	r3, r7, #2
 800426e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f7ff ff6c 	bl	8004150 <prvTraceGetQueueNumber>
 8004278:	0003      	movs	r3, r0
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	041a      	lsls	r2, r3, #16
 800427e:	1cbb      	adds	r3, r7, #2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f7fd fe05 	bl	8001e98 <vQueueSetQueueNumber>
}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}

08004296 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	000a      	movs	r2, r1
 80042a0:	1cbb      	adds	r3, r7, #2
 80042a2:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff ff52 	bl	8004150 <prvTraceGetQueueNumber>
 80042ac:	0003      	movs	r3, r0
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	0c1a      	lsrs	r2, r3, #16
 80042b2:	1cbb      	adds	r3, r7, #2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fd fdea 	bl	8001e98 <vQueueSetQueueNumber>
}
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b002      	add	sp, #8
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvTraceGetTimerNumberLow16>:

#if (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetTimerNumberLow16(void* pvTimer)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fd80 	bl	8003ddc <uxTimerGetTimerNumber>
 80042dc:	0003      	movs	r3, r0
 80042de:	b29b      	uxth	r3, r3
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <prvTraceGetTimerNumberHigh16>:

uint16_t prvTraceGetTimerNumberHigh16(void* pvTimer)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff fd72 	bl	8003ddc <uxTimerGetTimerNumber>
 80042f8:	0003      	movs	r3, r0
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	b29b      	uxth	r3, r3
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b002      	add	sp, #8
 8004304:	bd80      	pop	{r7, pc}

08004306 <prvTraceSetTimerNumberLow16>:

void prvTraceSetTimerNumberLow16(void* pvTimer, uint16_t uiValue)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	000a      	movs	r2, r1
 8004310:	1cbb      	adds	r3, r7, #2
 8004312:	801a      	strh	r2, [r3, #0]
	vTimerSetTimerNumber((TimerHandle_t)pvTimer, TRACE_SET_LOW16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer), uiValue));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff fd60 	bl	8003ddc <uxTimerGetTimerNumber>
 800431c:	0003      	movs	r3, r0
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	041a      	lsls	r2, r3, #16
 8004322:	1cbb      	adds	r3, r7, #2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0011      	movs	r1, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff fd5f 	bl	8003df0 <vTimerSetTimerNumber>
}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b002      	add	sp, #8
 8004338:	bd80      	pop	{r7, pc}

0800433a <prvTraceSetTimerNumberHigh16>:

void prvTraceSetTimerNumberHigh16(void* pvTimer, uint16_t uiValue)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	000a      	movs	r2, r1
 8004344:	1cbb      	adds	r3, r7, #2
 8004346:	801a      	strh	r2, [r3, #0]
	vTimerSetTimerNumber((TimerHandle_t)pvTimer, TRACE_SET_HIGH16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer), uiValue));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f7ff fd46 	bl	8003ddc <uxTimerGetTimerNumber>
 8004350:	0003      	movs	r3, r0
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	0c1a      	lsrs	r2, r3, #16
 8004356:	1cbb      	adds	r3, r7, #2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0011      	movs	r1, r2
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff fd44 	bl	8003df0 <vTimerSetTimerNumber>
}
 8004368:	46c0      	nop			@ (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}

08004370 <prvTraceGetEventGroupNumberLow16>:
#endif

#if (TRC_CFG_INCLUDE_EVENT_GROUP_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetEventGroupNumberLow16(void* pvEventGroup)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f7fc fd48 	bl	8000e10 <uxEventGroupGetNumber>
 8004380:	0003      	movs	r3, r0
 8004382:	b29b      	uxth	r3, r3
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}

0800438c <prvTraceGetEventGroupNumberHigh16>:

uint16_t prvTraceGetEventGroupNumberHigh16(void* pvEventGroup)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fc fd3a 	bl	8000e10 <uxEventGroupGetNumber>
 800439c:	0003      	movs	r3, r0
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b29b      	uxth	r3, r3
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}

080043aa <prvTraceSetEventGroupNumberLow16>:

void prvTraceSetEventGroupNumberLow16(void* pvEventGroup, uint16_t uiValue)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	000a      	movs	r2, r1
 80043b4:	1cbb      	adds	r3, r7, #2
 80043b6:	801a      	strh	r2, [r3, #0]
	vEventGroupSetNumber((EventGroupHandle_t)pvEventGroup, TRACE_SET_LOW16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup), uiValue));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fc fd28 	bl	8000e10 <uxEventGroupGetNumber>
 80043c0:	0003      	movs	r3, r0
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	1cbb      	adds	r3, r7, #2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0011      	movs	r1, r2
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fc fd31 	bl	8000e38 <vEventGroupSetNumber>
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b002      	add	sp, #8
 80043dc:	bd80      	pop	{r7, pc}

080043de <prvTraceSetEventGroupNumberHigh16>:

void prvTraceSetEventGroupNumberHigh16(void* pvEventGroup, uint16_t uiValue)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	000a      	movs	r2, r1
 80043e8:	1cbb      	adds	r3, r7, #2
 80043ea:	801a      	strh	r2, [r3, #0]
	vEventGroupSetNumber((EventGroupHandle_t)pvEventGroup, TRACE_SET_HIGH16(uxEventGroupGetNumber((EventGroupHandle_t)pvEventGroup), uiValue));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7fc fd0e 	bl	8000e10 <uxEventGroupGetNumber>
 80043f4:	0003      	movs	r3, r0
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	0c1a      	lsrs	r2, r3, #16
 80043fa:	1cbb      	adds	r3, r7, #2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f7fc fd16 	bl	8000e38 <vEventGroupSetNumber>
}
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8004418:	f7fe fee0 	bl	80031dc <xTaskGetCurrentTaskHandle>
 800441c:	0003      	movs	r3, r0
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}

08004436 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004448:	4b62      	ldr	r3, [pc, #392]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2209      	movs	r2, #9
 800444e:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004450:	4b60      	ldr	r3, [pc, #384]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2250      	movs	r2, #80	@ 0x50
 8004456:	2102      	movs	r1, #2
 8004458:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800445a:	4b5e      	ldr	r3, [pc, #376]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2251      	movs	r2, #81	@ 0x51
 8004460:	2106      	movs	r1, #6
 8004462:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8004464:	4b5b      	ldr	r3, [pc, #364]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2252      	movs	r2, #82	@ 0x52
 800446a:	2102      	movs	r1, #2
 800446c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800446e:	4b59      	ldr	r3, [pc, #356]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2253      	movs	r2, #83	@ 0x53
 8004474:	2106      	movs	r1, #6
 8004476:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8004478:	4b56      	ldr	r3, [pc, #344]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2254      	movs	r2, #84	@ 0x54
 800447e:	2104      	movs	r1, #4
 8004480:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8004482:	4b54      	ldr	r3, [pc, #336]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2255      	movs	r2, #85	@ 0x55
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 800448c:	4b51      	ldr	r3, [pc, #324]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2256      	movs	r2, #86	@ 0x56
 8004492:	2102      	movs	r1, #2
 8004494:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8004496:	4b4f      	ldr	r3, [pc, #316]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2257      	movs	r2, #87	@ 0x57
 800449c:	2102      	movs	r1, #2
 800449e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80044a0:	4b4c      	ldr	r3, [pc, #304]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2258      	movs	r2, #88	@ 0x58
 80044a6:	2102      	movs	r1, #2
 80044a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80044aa:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	225c      	movs	r2, #92	@ 0x5c
 80044b0:	210f      	movs	r1, #15
 80044b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80044b4:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	225d      	movs	r2, #93	@ 0x5d
 80044ba:	210f      	movs	r1, #15
 80044bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80044be:	4b45      	ldr	r3, [pc, #276]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	225e      	movs	r2, #94	@ 0x5e
 80044c4:	210f      	movs	r1, #15
 80044c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80044c8:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	225f      	movs	r2, #95	@ 0x5f
 80044ce:	210f      	movs	r1, #15
 80044d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80044d2:	4b40      	ldr	r3, [pc, #256]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2260      	movs	r2, #96	@ 0x60
 80044d8:	210f      	movs	r1, #15
 80044da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80044dc:	4b3d      	ldr	r3, [pc, #244]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2261      	movs	r2, #97	@ 0x61
 80044e2:	210f      	movs	r1, #15
 80044e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80044e6:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2262      	movs	r2, #98	@ 0x62
 80044ec:	210f      	movs	r1, #15
 80044ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80044f0:	4b38      	ldr	r3, [pc, #224]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2263      	movs	r2, #99	@ 0x63
 80044f6:	210f      	movs	r1, #15
 80044f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80044fa:	4b36      	ldr	r3, [pc, #216]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2264      	movs	r2, #100	@ 0x64
 8004500:	210f      	movs	r1, #15
 8004502:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004504:	4b33      	ldr	r3, [pc, #204]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2268      	movs	r2, #104	@ 0x68
 800450a:	2110      	movs	r1, #16
 800450c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800450e:	4b31      	ldr	r3, [pc, #196]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2269      	movs	r2, #105	@ 0x69
 8004514:	2110      	movs	r1, #16
 8004516:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8004518:	4b2e      	ldr	r3, [pc, #184]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	226a      	movs	r2, #106	@ 0x6a
 800451e:	2110      	movs	r1, #16
 8004520:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8004522:	4b2c      	ldr	r3, [pc, #176]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	226b      	movs	r2, #107	@ 0x6b
 8004528:	2113      	movs	r1, #19
 800452a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800452c:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	226c      	movs	r2, #108	@ 0x6c
 8004532:	2111      	movs	r1, #17
 8004534:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8004536:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	226d      	movs	r2, #109	@ 0x6d
 800453c:	2110      	movs	r1, #16
 800453e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8004540:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	226e      	movs	r2, #110	@ 0x6e
 8004546:	2113      	movs	r1, #19
 8004548:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800454a:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	226f      	movs	r2, #111	@ 0x6f
 8004550:	2113      	movs	r1, #19
 8004552:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2270      	movs	r2, #112	@ 0x70
 800455a:	2113      	movs	r1, #19
 800455c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800455e:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2274      	movs	r2, #116	@ 0x74
 8004564:	2100      	movs	r1, #0
 8004566:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2276      	movs	r2, #118	@ 0x76
 800456e:	2120      	movs	r1, #32
 8004570:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8004572:	4b18      	ldr	r3, [pc, #96]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2278      	movs	r2, #120	@ 0x78
 8004578:	2180      	movs	r1, #128	@ 0x80
 800457a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800457c:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	227a      	movs	r2, #122	@ 0x7a
 8004582:	21a0      	movs	r1, #160	@ 0xa0
 8004584:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8004586:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	227c      	movs	r2, #124	@ 0x7c
 800458c:	2189      	movs	r1, #137	@ 0x89
 800458e:	0049      	lsls	r1, r1, #1
 8004590:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	227e      	movs	r2, #126	@ 0x7e
 8004598:	21ab      	movs	r1, #171	@ 0xab
 800459a:	0049      	lsls	r1, r1, #1
 800459c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 800459e:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2280      	movs	r2, #128	@ 0x80
 80045a4:	21b3      	movs	r1, #179	@ 0xb3
 80045a6:	0049      	lsls	r1, r1, #1
 80045a8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2282      	movs	r2, #130	@ 0x82
 80045b0:	21c6      	movs	r1, #198	@ 0xc6
 80045b2:	0049      	lsls	r1, r1, #1
 80045b4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2284      	movs	r2, #132	@ 0x84
 80045bc:	21d9      	movs	r1, #217	@ 0xd9
 80045be:	0049      	lsls	r1, r1, #1
 80045c0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80045c2:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	22ec      	movs	r2, #236	@ 0xec
 80045c8:	0052      	lsls	r2, r2, #1
 80045ca:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20002df8 	.word	0x20002df8

080045d8 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80045e2:	4b40      	ldr	r3, [pc, #256]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	825a      	strh	r2, [r3, #18]
 80045e8:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045ea:	8a5a      	ldrh	r2, [r3, #18]
 80045ec:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045ee:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 80045f0:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045f2:	2202      	movs	r2, #2
 80045f4:	829a      	strh	r2, [r3, #20]
 80045f6:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045f8:	8a9a      	ldrh	r2, [r3, #20]
 80045fa:	4b3a      	ldr	r3, [pc, #232]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80045fc:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 80045fe:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004600:	2208      	movs	r2, #8
 8004602:	82da      	strh	r2, [r3, #22]
 8004604:	4b37      	ldr	r3, [pc, #220]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004606:	8ada      	ldrh	r2, [r3, #22]
 8004608:	4b36      	ldr	r3, [pc, #216]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800460a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800460c:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800460e:	220a      	movs	r2, #10
 8004610:	831a      	strh	r2, [r3, #24]
 8004612:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004614:	8b1a      	ldrh	r2, [r3, #24]
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004618:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800461a:	4b32      	ldr	r3, [pc, #200]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800461c:	2210      	movs	r2, #16
 800461e:	835a      	strh	r2, [r3, #26]
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004622:	8b5a      	ldrh	r2, [r3, #26]
 8004624:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004626:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8004628:	4b2e      	ldr	r3, [pc, #184]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800462a:	2214      	movs	r2, #20
 800462c:	839a      	strh	r2, [r3, #28]
 800462e:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004630:	8b9a      	ldrh	r2, [r3, #28]
 8004632:	4b2c      	ldr	r3, [pc, #176]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004634:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8004636:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004638:	2215      	movs	r2, #21
 800463a:	83da      	strh	r2, [r3, #30]
 800463c:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800463e:	8bda      	ldrh	r2, [r3, #30]
 8004640:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004642:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8004644:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004646:	2217      	movs	r2, #23
 8004648:	841a      	strh	r2, [r3, #32]
 800464a:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800464c:	8c1a      	ldrh	r2, [r3, #32]
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004650:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004654:	2219      	movs	r2, #25
 8004656:	845a      	strh	r2, [r3, #34]	@ 0x22
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800465a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800465e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8004660:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004662:	2201      	movs	r2, #1
 8004664:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8004666:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004668:	2207      	movs	r2, #7
 800466a:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 800466c:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800466e:	2209      	movs	r2, #9
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8004672:	4b1c      	ldr	r3, [pc, #112]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004674:	220f      	movs	r2, #15
 8004676:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800467a:	2213      	movs	r2, #19
 800467c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 800467e:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004680:	2214      	movs	r2, #20
 8004682:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8004684:	4b17      	ldr	r3, [pc, #92]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004686:	2216      	movs	r2, #22
 8004688:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 800468a:	4b16      	ldr	r3, [pc, #88]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800468c:	2218      	movs	r2, #24
 800468e:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004690:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8004692:	221a      	movs	r2, #26
 8004694:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e00a      	b.n	80046b2 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 800469c:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3318      	adds	r3, #24
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	3306      	adds	r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3301      	adds	r3, #1
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d9f1      	bls.n	800469c <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	e009      	b.n	80046d2 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80046be:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80046c0:	2148      	movs	r1, #72	@ 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	185b      	adds	r3, r3, r1
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b1a      	cmp	r3, #26
 80046d6:	d9f2      	bls.n	80046be <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	200019cc 	.word	0x200019cc

080046e8 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	0002      	movs	r2, r0
 80046f0:	1dfb      	adds	r3, r7, #7
 80046f2:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d816      	bhi.n	800472a <pszTraceGetErrorNotEnoughHandles+0x42>
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8004700:	18d3      	adds	r3, r2, r3
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8004708:	e010      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <pszTraceGetErrorNotEnoughHandles+0x54>)
 800470c:	e00e      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800470e:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8004710:	e00c      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8004712:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8004714:	e00a      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8004716:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8004718:	e008      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 800471a:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <pszTraceGetErrorNotEnoughHandles+0x64>)
 800471c:	e006      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8004720:	e004      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8004722:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8004724:	e002      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8004726:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8004728:	e000      	b.n	800472c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800472a:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}
 8004734:	08007994 	.word	0x08007994
 8004738:	0800728c 	.word	0x0800728c
 800473c:	080072d4 	.word	0x080072d4
 8004740:	0800731c 	.word	0x0800731c
 8004744:	08007370 	.word	0x08007370
 8004748:	080073bc 	.word	0x080073bc
 800474c:	08007408 	.word	0x08007408
 8004750:	08007454 	.word	0x08007454
 8004754:	080074a8 	.word	0x080074a8
 8004758:	08007500 	.word	0x08007500
 800475c:	0800755c 	.word	0x0800755c

08004760 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8004768:	f000 fc1e 	bl	8004fa8 <xTraceInitialize>
 800476c:	0003      	movs	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8004772:	2301      	movs	r3, #1
 8004774:	e021      	b.n	80047ba <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10b      	bne.n	8004794 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 800477c:	f7ff fe5b 	bl	8004436 <xTraceKernelPortEnable>
 8004780:	0003      	movs	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 8004786:	2301      	movs	r3, #1
 8004788:	e017      	b.n	80047ba <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 800478a:	f000 f8a9 	bl	80048e0 <prvTraceInitTimestamps>

		prvTraceStart();
 800478e:	f000 f825 	bl	80047dc <prvTraceStart>
 8004792:	e011      	b.n	80047b8 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d105      	bne.n	80047a6 <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 800479a:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <xTraceEnable+0x64>)
 800479c:	0018      	movs	r0, r3
 800479e:	f001 fc13 	bl	8005fc8 <prvTraceError>

		return TRC_FAIL;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e009      	b.n	80047ba <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <xTraceEnable+0x68>)
 80047ae:	0018      	movs	r0, r3
 80047b0:	f001 fc0a 	bl	8005fc8 <prvTraceError>

		return TRC_FAIL;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	0800758c 	.word	0x0800758c
 80047c8:	080075cc 	.word	0x080075cc

080047cc <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	prvTraceStop();
 80047d0:	f000 f86e 	bl	80048b0 <prvTraceStop>

	return TRC_SUCCESS;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80047dc:	b5b0      	push	{r4, r5, r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80047e2:	2417      	movs	r4, #23
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 80047ea:	4b2d      	ldr	r3, [pc, #180]	@ (80048a0 <prvTraceStart+0xc4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d050      	beq.n	8004894 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80047f2:	4b2b      	ldr	r3, [pc, #172]	@ (80048a0 <prvTraceStart+0xc4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d04d      	beq.n	8004898 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 80047fc:	4b29      	ldr	r3, [pc, #164]	@ (80048a4 <prvTraceStart+0xc8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d14a      	bne.n	800489a <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004804:	f3ef 8310 	mrs	r3, PRIMASK
 8004808:	60bb      	str	r3, [r7, #8]
  return(result);
 800480a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	2301      	movs	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	4b23      	ldr	r3, [pc, #140]	@ (80048a8 <prvTraceStart+0xcc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <prvTraceStart+0xcc>)
 8004822:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8004824:	4b1e      	ldr	r3, [pc, #120]	@ (80048a0 <prvTraceStart+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 800482c:	f7ff fdf2 	bl	8004414 <prvTraceGetCurrentTaskHandle>
 8004830:	0003      	movs	r3, r0
 8004832:	0018      	movs	r0, r3
 8004834:	f7ff fca6 	bl	8004184 <prvTraceGetTaskNumberLow16>
 8004838:	0003      	movs	r3, r0
 800483a:	001a      	movs	r2, r3
 800483c:	0025      	movs	r5, r4
 800483e:	197b      	adds	r3, r7, r5
 8004840:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8004842:	197b      	adds	r3, r7, r5
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800484a:	197c      	adds	r4, r7, r5
 800484c:	2003      	movs	r0, #3
 800484e:	f001 f9c9 	bl	8005be4 <prvTraceGetObjectHandle>
 8004852:	0003      	movs	r3, r0
 8004854:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <prvTraceStart+0xd0>)
 8004858:	197b      	adds	r3, r7, r5
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	0019      	movs	r1, r3
 800485e:	2003      	movs	r0, #3
 8004860:	f001 faf6 	bl	8005e50 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8004864:	197b      	adds	r3, r7, r5
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	0019      	movs	r1, r3
 800486c:	2003      	movs	r0, #3
 800486e:	f001 f871 	bl	8005954 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8004872:	2317      	movs	r3, #23
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 ff49 	bl	8005710 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 800487e:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvTraceStart+0xcc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <prvTraceStart+0xcc>)
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f383 8810 	msr	PRIMASK, r3
}
 8004892:	e002      	b.n	800489a <prvTraceStart+0xbe>
		return;
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	e000      	b.n	800489a <prvTraceStart+0xbe>
		return; /* Already running */
 8004898:	46c0      	nop			@ (mov r8, r8)
	}
}
 800489a:	46bd      	mov	sp, r7
 800489c:	b006      	add	sp, #24
 800489e:	bdb0      	pop	{r4, r5, r7, pc}
 80048a0:	20002df8 	.word	0x20002df8
 80048a4:	20001a30 	.word	0x20001a30
 80048a8:	200019b4 	.word	0x200019b4
 80048ac:	0800760c 	.word	0x0800760c

080048b0 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80048b4:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <prvTraceStop+0x28>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80048bc:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <prvTraceStop+0x28>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <prvTraceStop+0x2c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80048cc:	4b03      	ldr	r3, [pc, #12]	@ (80048dc <prvTraceStop+0x2c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4798      	blx	r3
	}
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20002df8 	.word	0x20002df8
 80048dc:	200019c0 	.word	0x200019c0

080048e0 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80048e4:	4b03      	ldr	r3, [pc, #12]	@ (80048f4 <prvTraceInitTimestamps+0x14>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b03      	ldr	r3, [pc, #12]	@ (80048f8 <prvTraceInitTimestamps+0x18>)
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	e000e018 	.word	0xe000e018
 80048f8:	200019c4 	.word	0x200019c4

080048fc <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	0008      	movs	r0, r1
 8004906:	0011      	movs	r1, r2
 8004908:	1cfb      	adds	r3, r7, #3
 800490a:	1c02      	adds	r2, r0, #0
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	1cbb      	adds	r3, r7, #2
 8004910:	1c0a      	adds	r2, r1, #0
 8004912:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
 8004914:	1cfb      	adds	r3, r7, #3
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b23      	cmp	r3, #35	@ 0x23
 800491a:	d901      	bls.n	8004920 <writeInt8+0x24>
	{
		return 255;
 800491c:	23ff      	movs	r3, #255	@ 0xff
 800491e:	e010      	b.n	8004942 <writeInt8+0x46>
	}

	((uint8_t*)buffer)[i] = value;
 8004920:	1cfb      	adds	r3, r7, #3
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	18d3      	adds	r3, r2, r3
 8004928:	1cba      	adds	r2, r7, #2
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 800492e:	1cfb      	adds	r3, r7, #3
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b23      	cmp	r3, #35	@ 0x23
 8004934:	d901      	bls.n	800493a <writeInt8+0x3e>
	{
		return 255;
 8004936:	23ff      	movs	r3, #255	@ 0xff
 8004938:	e003      	b.n	8004942 <writeInt8+0x46>
	}

	return ((uint8_t) (i + 1));
 800493a:	1cfb      	adds	r3, r7, #3
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	b2db      	uxtb	r3, r3
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}

0800494a <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	0008      	movs	r0, r1
 8004954:	0011      	movs	r1, r2
 8004956:	1cfb      	adds	r3, r7, #3
 8004958:	1c02      	adds	r2, r0, #0
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	003b      	movs	r3, r7
 800495e:	1c0a      	adds	r2, r1, #0
 8004960:	801a      	strh	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
 8004962:	e010      	b.n	8004986 <writeInt16+0x3c>
	{
		if (i >= MAX_ARG_SIZE)
 8004964:	1cfb      	adds	r3, r7, #3
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b23      	cmp	r3, #35	@ 0x23
 800496a:	d901      	bls.n	8004970 <writeInt16+0x26>
		{
			return 255;
 800496c:	23ff      	movs	r3, #255	@ 0xff
 800496e:	e025      	b.n	80049bc <writeInt16+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 8004970:	1cfb      	adds	r3, r7, #3
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	18d3      	adds	r3, r2, r3
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
		i++;
 800497c:	1cfb      	adds	r3, r7, #3
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	1cfb      	adds	r3, r7, #3
 8004982:	3201      	adds	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
	while ((i % 2) != 0)
 8004986:	1cfb      	adds	r3, r7, #3
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e7      	bne.n	8004964 <writeInt16+0x1a>
	}

	if (i + 2 > MAX_ARG_SIZE)
 8004994:	1cfb      	adds	r3, r7, #3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b22      	cmp	r3, #34	@ 0x22
 800499a:	d901      	bls.n	80049a0 <writeInt16+0x56>
	{
		return 255;
 800499c:	23ff      	movs	r3, #255	@ 0xff
 800499e:	e00d      	b.n	80049bc <writeInt16+0x72>
	}

	((uint16_t*)buffer)[i/2] = value;
 80049a0:	1cfb      	adds	r3, r7, #3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	003a      	movs	r2, r7
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 80049b4:	1cfb      	adds	r3, r7, #3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	3302      	adds	r3, #2
 80049ba:	b2db      	uxtb	r3, r3
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	230b      	movs	r3, #11
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	1c0a      	adds	r2, r1, #0
 80049d4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
 80049d6:	e012      	b.n	80049fe <writeInt32+0x3a>
	{
		if (i >= MAX_ARG_SIZE)
 80049d8:	230b      	movs	r3, #11
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b23      	cmp	r3, #35	@ 0x23
 80049e0:	d901      	bls.n	80049e6 <writeInt32+0x22>
		{
			return 255;
 80049e2:	23ff      	movs	r3, #255	@ 0xff
 80049e4:	e027      	b.n	8004a36 <writeInt32+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 80049e6:	210b      	movs	r1, #11
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	18d3      	adds	r3, r2, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
		i++;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	187b      	adds	r3, r7, r1
 80049fa:	3201      	adds	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
	while ((i % 4) != 0)
 80049fe:	210b      	movs	r1, #11
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2203      	movs	r2, #3
 8004a06:	4013      	ands	r3, r2
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e4      	bne.n	80049d8 <writeInt32+0x14>
	}

	if (i + 4 > MAX_ARG_SIZE)
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d901      	bls.n	8004a1a <writeInt32+0x56>
	{
		return 255;
 8004a16:	23ff      	movs	r3, #255	@ 0xff
 8004a18:	e00d      	b.n	8004a36 <writeInt32+0x72>
	}

	((uint32_t*)buffer)[i/4] = value;
 8004a1a:	210b      	movs	r1, #11
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	3304      	adds	r3, #4
 8004a34:	b2db      	uxtb	r3, r3
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 8004a40:	b5b0      	push	{r4, r5, r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	1cfb      	adds	r3, r7, #3
 8004a50:	701a      	strb	r2, [r3, #0]
	uint16_t formatStrIndex = 0;
 8004a52:	2316      	movs	r3, #22
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2200      	movs	r2, #0
 8004a58:	801a      	strh	r2, [r3, #0]
	uint8_t argCounter = 0;
 8004a5a:	2315      	movs	r3, #21
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
	uint8_t i = byteOffset;
 8004a62:	2314      	movs	r3, #20
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	1cfa      	adds	r2, r7, #3
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	701a      	strb	r2, [r3, #0]

	while (formatStr[formatStrIndex] != '\0')
 8004a6c:	e16f      	b.n	8004d4e <prvTraceUserEventFormat+0x30e>
	{
		if (formatStr[formatStrIndex] == '%')
 8004a6e:	2116      	movs	r1, #22
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b25      	cmp	r3, #37	@ 0x25
 8004a7c:	d000      	beq.n	8004a80 <prvTraceUserEventFormat+0x40>
 8004a7e:	e155      	b.n	8004d2c <prvTraceUserEventFormat+0x2ec>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 8004a80:	187b      	adds	r3, r7, r1
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	18d3      	adds	r3, r2, r3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b25      	cmp	r3, #37	@ 0x25
 8004a8e:	d105      	bne.n	8004a9c <prvTraceUserEventFormat+0x5c>
			{
				formatStrIndex += 2;
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	187a      	adds	r2, r7, r1
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	3202      	adds	r2, #2
 8004a98:	801a      	strh	r2, [r3, #0]
				continue;
 8004a9a:	e158      	b.n	8004d4e <prvTraceUserEventFormat+0x30e>
			}

			/* We found a possible argument */
			argCounter++;
 8004a9c:	2115      	movs	r1, #21
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	3201      	adds	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]

			formatStrIndex++;
 8004aa8:	2116      	movs	r1, #22
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	3201      	adds	r2, #1
 8004ab2:	801a      	strh	r2, [r3, #0]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 8004ab4:	e005      	b.n	8004ac2 <prvTraceUserEventFormat+0x82>
				formatStrIndex++;
 8004ab6:	2116      	movs	r1, #22
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	3201      	adds	r2, #1
 8004ac0:	801a      	strh	r2, [r3, #0]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 8004ac2:	2116      	movs	r1, #22
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	18d3      	adds	r3, r2, r3
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b2f      	cmp	r3, #47	@ 0x2f
 8004ad0:	d906      	bls.n	8004ae0 <prvTraceUserEventFormat+0xa0>
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b39      	cmp	r3, #57	@ 0x39
 8004ade:	d9ea      	bls.n	8004ab6 <prvTraceUserEventFormat+0x76>
 8004ae0:	2116      	movs	r1, #22
 8004ae2:	187b      	adds	r3, r7, r1
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b23      	cmp	r3, #35	@ 0x23
 8004aee:	d0e2      	beq.n	8004ab6 <prvTraceUserEventFormat+0x76>
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004afc:	d0db      	beq.n	8004ab6 <prvTraceUserEventFormat+0x76>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d100      	bne.n	8004b0e <prvTraceUserEventFormat+0xce>
 8004b0c:	e129      	b.n	8004d62 <prvTraceUserEventFormat+0x322>
			{
				switch (formatStr[formatStrIndex])
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	3b58      	subs	r3, #88	@ 0x58
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d900      	bls.n	8004b20 <prvTraceUserEventFormat+0xe0>
 8004b1e:	e0f3      	b.n	8004d08 <prvTraceUserEventFormat+0x2c8>
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	4b96      	ldr	r3, [pc, #600]	@ (8004d7c <prvTraceUserEventFormat+0x33c>)
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	469f      	mov	pc, r3
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	60ba      	str	r2, [r7, #8]
 8004b30:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004b32:	2314      	movs	r3, #20
 8004b34:	18fc      	adds	r4, r7, r3
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	7819      	ldrb	r1, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7ff ff41 	bl	80049c4 <writeInt32>
 8004b42:	0003      	movs	r3, r0
 8004b44:	7023      	strb	r3, [r4, #0]
						break;
 8004b46:	e0e6      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	60ba      	str	r2, [r7, #8]
 8004b4e:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004b50:	2314      	movs	r3, #20
 8004b52:	18fc      	adds	r4, r7, r3
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	7819      	ldrb	r1, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7ff ff32 	bl	80049c4 <writeInt32>
 8004b60:	0003      	movs	r3, r0
 8004b62:	7023      	strb	r3, [r4, #0]
						break;
 8004b64:	e0d7      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					case 's':
						{
							TraceStringHandle_t xString;
							xTraceStringRegister((char*)va_arg(vl, char*), &xString);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1d1a      	adds	r2, r3, #4
 8004b6a:	60ba      	str	r2, [r7, #8]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2210      	movs	r2, #16
 8004b70:	18ba      	adds	r2, r7, r2
 8004b72:	0011      	movs	r1, r2
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f9f3 	bl	8004f60 <xTraceStringRegister>
							
							i = writeInt16(buffer,
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	2314      	movs	r3, #20
 8004b80:	18fc      	adds	r4, r7, r3
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	7819      	ldrb	r1, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff fede 	bl	800494a <writeInt16>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	7023      	strb	r3, [r4, #0]
								i,
								(uint16_t)xString);
						}
						break;
 8004b92:	e0c0      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3307      	adds	r3, #7
 8004b98:	2207      	movs	r2, #7
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	3208      	adds	r2, #8
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
						i = writeInt32(	buffer,
 8004ba6:	0010      	movs	r0, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	f7fb fb39 	bl	8000220 <__aeabi_d2uiz>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	2314      	movs	r3, #20
 8004bb2:	18fc      	adds	r4, r7, r3
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	7819      	ldrb	r1, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7ff ff02 	bl	80049c4 <writeInt32>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	7023      	strb	r3, [r4, #0]
						break;
 8004bc4:	e0a7      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
#endif
					case 'l':
						formatStrIndex++;
 8004bc6:	2116      	movs	r1, #22
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	3201      	adds	r2, #1
 8004bd0:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004bd2:	187b      	adds	r3, r7, r1
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	18d3      	adds	r3, r2, r3
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b66      	cmp	r3, #102	@ 0x66
 8004bde:	d12f      	bne.n	8004c40 <prvTraceUserEventFormat+0x200>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3307      	adds	r3, #7
 8004be4:	2207      	movs	r2, #7
 8004be6:	4393      	bics	r3, r2
 8004be8:	001a      	movs	r2, r3
 8004bea:	3208      	adds	r2, #8
 8004bec:	60ba      	str	r2, [r7, #8]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	f7fb fb13 	bl	8000220 <__aeabi_d2uiz>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	2514      	movs	r5, #20
 8004bfe:	197c      	adds	r4, r7, r5
 8004c00:	197b      	adds	r3, r7, r5
 8004c02:	7819      	ldrb	r1, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7ff fedc 	bl	80049c4 <writeInt32>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	7023      	strb	r3, [r4, #0]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3307      	adds	r3, #7
 8004c14:	2207      	movs	r2, #7
 8004c16:	4393      	bics	r3, r2
 8004c18:	001a      	movs	r2, r3
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	60ba      	str	r2, [r7, #8]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8004c22:	0010      	movs	r0, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	f7fb fafb 	bl	8000220 <__aeabi_d2uiz>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	197b      	adds	r3, r7, r5
 8004c30:	7819      	ldrb	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff fec5 	bl	80049c4 <writeInt32>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	7023      	strb	r3, [r4, #0]
								break;
 8004c3e:	e000      	b.n	8004c42 <prvTraceUserEventFormat+0x202>
#endif
							default:
								break;
 8004c40:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004c42:	e068      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					case 'h':
						formatStrIndex++;
 8004c44:	2116      	movs	r1, #22
 8004c46:	187b      	adds	r3, r7, r1
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	187b      	adds	r3, r7, r1
 8004c4c:	3201      	adds	r2, #1
 8004c4e:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	18d3      	adds	r3, r2, r3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b64      	cmp	r3, #100	@ 0x64
 8004c5c:	d002      	beq.n	8004c64 <prvTraceUserEventFormat+0x224>
 8004c5e:	2b75      	cmp	r3, #117	@ 0x75
 8004c60:	d010      	beq.n	8004c84 <prvTraceUserEventFormat+0x244>
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8004c62:	e01f      	b.n	8004ca4 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	60ba      	str	r2, [r7, #8]
 8004c6a:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	2314      	movs	r3, #20
 8004c70:	18fc      	adds	r4, r7, r3
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	7819      	ldrb	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fe66 	bl	800494a <writeInt16>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	7023      	strb	r3, [r4, #0]
								break;
 8004c82:	e00f      	b.n	8004ca4 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1d1a      	adds	r2, r3, #4
 8004c88:	60ba      	str	r2, [r7, #8]
 8004c8a:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	2314      	movs	r3, #20
 8004c90:	18fc      	adds	r4, r7, r3
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff fe56 	bl	800494a <writeInt16>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	7023      	strb	r3, [r4, #0]
								break;
 8004ca2:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004ca4:	e037      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					case 'b':
						formatStrIndex++;
 8004ca6:	2116      	movs	r1, #22
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	3201      	adds	r2, #1
 8004cb0:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004cb2:	187b      	adds	r3, r7, r1
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b64      	cmp	r3, #100	@ 0x64
 8004cbe:	d002      	beq.n	8004cc6 <prvTraceUserEventFormat+0x286>
 8004cc0:	2b75      	cmp	r3, #117	@ 0x75
 8004cc2:	d010      	beq.n	8004ce6 <prvTraceUserEventFormat+0x2a6>
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8004cc4:	e01f      	b.n	8004d06 <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	1d1a      	adds	r2, r3, #4
 8004cca:	60ba      	str	r2, [r7, #8]
 8004ccc:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	2314      	movs	r3, #20
 8004cd2:	18fc      	adds	r4, r7, r3
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	7819      	ldrb	r1, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f7ff fe0e 	bl	80048fc <writeInt8>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	7023      	strb	r3, [r4, #0]
								break;
 8004ce4:	e00f      	b.n	8004d06 <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	60ba      	str	r2, [r7, #8]
 8004cec:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	2314      	movs	r3, #20
 8004cf2:	18fc      	adds	r4, r7, r3
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	7819      	ldrb	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7ff fdfe 	bl	80048fc <writeInt8>
 8004d00:	0003      	movs	r3, r0
 8004d02:	7023      	strb	r3, [r4, #0]
								break;
 8004d04:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004d06:	e006      	b.n	8004d16 <prvTraceUserEventFormat+0x2d6>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 8004d08:	2115      	movs	r1, #21
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	187b      	adds	r3, r7, r1
 8004d10:	3a01      	subs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
						break;
 8004d14:	46c0      	nop			@ (mov r8, r8)
				}

				if (argCounter > 15)
 8004d16:	2315      	movs	r3, #21
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d905      	bls.n	8004d2c <prvTraceUserEventFormat+0x2ec>
				{
					prvTraceError("xTracePrintF - Too many arguments, max 15 allowed!");
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <prvTraceUserEventFormat+0x340>)
 8004d22:	0018      	movs	r0, r3
 8004d24:	f001 f950 	bl	8005fc8 <prvTraceError>
					return 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e022      	b.n	8004d72 <prvTraceUserEventFormat+0x332>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 8004d2c:	2116      	movs	r1, #22
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	3201      	adds	r2, #1
 8004d36:	801a      	strh	r2, [r3, #0]
		if (i == 255)
 8004d38:	2314      	movs	r3, #20
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2bff      	cmp	r3, #255	@ 0xff
 8004d40:	d105      	bne.n	8004d4e <prvTraceUserEventFormat+0x30e>
		{
			prvTraceError("xTracePrintF - Too large arguments, max 32 byte allowed!");
 8004d42:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <prvTraceUserEventFormat+0x344>)
 8004d44:	0018      	movs	r0, r3
 8004d46:	f001 f93f 	bl	8005fc8 <prvTraceError>
			return 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e011      	b.n	8004d72 <prvTraceUserEventFormat+0x332>
	while (formatStr[formatStrIndex] != '\0')
 8004d4e:	2316      	movs	r3, #22
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d000      	beq.n	8004d60 <prvTraceUserEventFormat+0x320>
 8004d5e:	e686      	b.n	8004a6e <prvTraceUserEventFormat+0x2e>
 8004d60:	e000      	b.n	8004d64 <prvTraceUserEventFormat+0x324>
				break;
 8004d62:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return (uint8_t)(i+3)/4;
 8004d64:	2314      	movs	r3, #20
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	3303      	adds	r3, #3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	b2db      	uxtb	r3, r3
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b006      	add	sp, #24
 8004d78:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	080079b8 	.word	0x080079b8
 8004d80:	08007618 	.word	0x08007618
 8004d84:	0800764c 	.word	0x0800764c

08004d88 <xTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrintF(TraceStringHandle_t eventLabel, const char* formatStr, ...)
{
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	va_list vl;

	va_start(vl, formatStr);
 8004d92:	2320      	movs	r3, #32
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	60fb      	str	r3, [r7, #12]
	xTraceVPrintF(eventLabel, formatStr, vl);
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f808 	bl	8004db4 <xTraceVPrintF>
	va_end(vl);

	return TRC_SUCCESS;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b005      	add	sp, #20
 8004dac:	bc80      	pop	{r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	b003      	add	sp, #12
 8004db2:	4718      	bx	r3

08004db4 <xTraceVPrintF>:
 * See xTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceVPrintF(TraceStringHandle_t eventLabel, const char* formatStr, va_list vl)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b094      	sub	sp, #80	@ 0x50
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != (void*)0, "vTraceVPrintF: formatStr == NULL", TRC_FAIL);

	trcCRITICAL_SECTION_BEGIN();
 8004dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dca:	2301      	movs	r3, #1
 8004dcc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f50 <xTraceVPrintF+0x19c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f50 <xTraceVPrintF+0x19c>)
 8004dde:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004de0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d100      	bne.n	8004dec <xTraceVPrintF+0x38>
 8004dea:	e0a0      	b.n	8004f2e <xTraceVPrintF+0x17a>
 8004dec:	4b5a      	ldr	r3, [pc, #360]	@ (8004f58 <xTraceVPrintF+0x1a4>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d100      	bne.n	8004df6 <xTraceVPrintF+0x42>
 8004df4:	e09b      	b.n	8004f2e <xTraceVPrintF+0x17a>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 8004df6:	2114      	movs	r1, #20
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

		ue1->type = (uint8_t)EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 8004dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dfe:	22aa      	movs	r2, #170	@ 0xaa
 8004e00:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 8004e02:	187a      	adds	r2, r7, r1
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f7ff fe19 	bl	8004a40 <prvTraceUserEventFormat>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	0011      	movs	r1, r2
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f001 f883 	bl	8005f24 <prvTraceOpenSymbol>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e24:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 8004e26:	20ff      	movs	r0, #255	@ 0xff
 8004e28:	f001 f9c2 	bl	80061b0 <prvTraceGetDTS>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e32:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 8004e34:	4b47      	ldr	r3, [pc, #284]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d077      	beq.n	8004f2e <xTraceVPrintF+0x17a>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 8004e3e:	4b45      	ldr	r3, [pc, #276]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e46:	18d2      	adds	r2, r2, r3
 8004e48:	4b42      	ldr	r3, [pc, #264]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d91f      	bls.n	8004e92 <xTraceVPrintF+0xde>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004e52:	4b40      	ldr	r3, [pc, #256]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b3f      	ldr	r3, [pc, #252]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	2182      	movs	r1, #130	@ 0x82
 8004e60:	00c9      	lsls	r1, r1, #3
 8004e62:	468c      	mov	ip, r1
 8004e64:	4463      	add	r3, ip
 8004e66:	18d3      	adds	r3, r2, r3
 8004e68:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	4b38      	ldr	r3, [pc, #224]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f002 f9a5 	bl	80071cc <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 8004e82:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 8004e8a:	4b32      	ldr	r3, [pc, #200]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 8004e92:	4b30      	ldr	r3, [pc, #192]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d045      	beq.n	8004f28 <xTraceVPrintF+0x174>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 8004e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f001 f8bf 	bl	8006024 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	2182      	movs	r1, #130	@ 0x82
 8004eb4:	00c9      	lsls	r1, r1, #3
 8004eb6:	468c      	mov	ip, r1
 8004eb8:	4463      	add	r3, ip
 8004eba:	18d3      	adds	r3, r2, r3
 8004ebc:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec0:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004ec2:	2314      	movs	r3, #20
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	f002 f9be 	bl	8007248 <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ece:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8004ed0:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8004edc:	3969      	subs	r1, #105	@ 0x69
 8004ede:	b2c8      	uxtb	r0, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8004ee0:	491e      	ldr	r1, [pc, #120]	@ (8004f5c <xTraceVPrintF+0x1a8>)
 8004ee2:	18d3      	adds	r3, r2, r3
 8004ee4:	185b      	adds	r3, r3, r1
 8004ee6:	1c02      	adds	r2, r0, #0
 8004ee8:	701a      	strb	r2, [r3, #0]

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 8004eea:	4b1a      	ldr	r3, [pc, #104]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69d9      	ldr	r1, [r3, #28]
 8004ef0:	4b18      	ldr	r3, [pc, #96]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ef6:	188a      	adds	r2, r1, r2
 8004ef8:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 8004efa:	4b16      	ldr	r3, [pc, #88]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6959      	ldr	r1, [r3, #20]
 8004f00:	4b14      	ldr	r3, [pc, #80]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f06:	188a      	adds	r2, r1, r2
 8004f08:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	23fa      	movs	r3, #250	@ 0xfa
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d307      	bcc.n	8004f28 <xTraceVPrintF+0x174>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <xTraceVPrintF+0x1a0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f001 f87b 	bl	8006024 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <xTraceVPrintF+0x19c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <xTraceVPrintF+0x19c>)
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3e:	f383 8810 	msr	PRIMASK, r3
}
 8004f42:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif

	return TRC_SUCCESS;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b014      	add	sp, #80	@ 0x50
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	200019b4 	.word	0x200019b4
 8004f54:	20002df8 	.word	0x20002df8
 8004f58:	200019bc 	.word	0x200019bc
 8004f5c:	00000414 	.word	0x00000414

08004f60 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 ffd8 	bl	8005f24 <prvTraceOpenSymbol>
 8004f74:	0002      	movs	r2, r0
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8004f90:	230c      	movs	r3, #12
 8004f92:	18fa      	adds	r2, r7, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0011      	movs	r1, r2
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff ffe1 	bl	8004f60 <xTraceStringRegister>

	return trcStr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b004      	add	sp, #16
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8004fac:	4b7f      	ldr	r3, [pc, #508]	@ (80051ac <xTraceInitialize+0x204>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e0f6      	b.n	80051a6 <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8004fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80051b0 <xTraceInitialize+0x208>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4252      	negs	r2, r2
 8004fbe:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8004fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80051b4 <xTraceInitialize+0x20c>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8004fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80051b8 <xTraceInitialize+0x210>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8004fcc:	4b7b      	ldr	r3, [pc, #492]	@ (80051bc <xTraceInitialize+0x214>)
 8004fce:	4a7c      	ldr	r2, [pc, #496]	@ (80051c0 <xTraceInitialize+0x218>)
 8004fd0:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8004fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80051c4 <xTraceInitialize+0x21c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80051c8 <xTraceInitialize+0x220>)
 8004fd8:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8004fda:	4b7c      	ldr	r3, [pc, #496]	@ (80051cc <xTraceInitialize+0x224>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fa21 	bl	8004424 <xTraceKernelPortInitialize>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0dc      	b.n	80051a6 <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8004fec:	4b73      	ldr	r3, [pc, #460]	@ (80051bc <xTraceInitialize+0x214>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a77      	ldr	r2, [pc, #476]	@ (80051d0 <xTraceInitialize+0x228>)
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f002 f8e9 	bl	80071cc <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8004ffa:	4b70      	ldr	r3, [pc, #448]	@ (80051bc <xTraceInitialize+0x214>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	@ (80051d4 <xTraceInitialize+0x22c>)
 8005000:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8005002:	4b6e      	ldr	r3, [pc, #440]	@ (80051bc <xTraceInitialize+0x214>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2207      	movs	r2, #7
 8005008:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800500a:	4b6c      	ldr	r3, [pc, #432]	@ (80051bc <xTraceInitialize+0x214>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8005012:	4b6a      	ldr	r3, [pc, #424]	@ (80051bc <xTraceInitialize+0x214>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6e      	ldr	r2, [pc, #440]	@ (80051d0 <xTraceInitialize+0x228>)
 8005018:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800501a:	4b68      	ldr	r3, [pc, #416]	@ (80051bc <xTraceInitialize+0x214>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	22fa      	movs	r2, #250	@ 0xfa
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8005024:	4b65      	ldr	r3, [pc, #404]	@ (80051bc <xTraceInitialize+0x214>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	@ (80051d8 <xTraceInitialize+0x230>)
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 800502c:	4b63      	ldr	r3, [pc, #396]	@ (80051bc <xTraceInitialize+0x214>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2200      	movs	r2, #0
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8005034:	4b61      	ldr	r3, [pc, #388]	@ (80051bc <xTraceInitialize+0x214>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2200      	movs	r2, #0
 800503a:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 800503c:	f7ff fa02 	bl	8004444 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8005040:	4b5e      	ldr	r3, [pc, #376]	@ (80051bc <xTraceInitialize+0x214>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	2398      	movs	r3, #152	@ 0x98
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4964      	ldr	r1, [pc, #400]	@ (80051dc <xTraceInitialize+0x234>)
 800504a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 800504c:	4b5b      	ldr	r3, [pc, #364]	@ (80051bc <xTraceInitialize+0x214>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2399      	movs	r3, #153	@ 0x99
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	21c8      	movs	r1, #200	@ 0xc8
 8005056:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8005058:	4b58      	ldr	r3, [pc, #352]	@ (80051bc <xTraceInitialize+0x214>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	239a      	movs	r3, #154	@ 0x9a
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	2101      	movs	r1, #1
 8005062:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8005064:	4b55      	ldr	r3, [pc, #340]	@ (80051bc <xTraceInitialize+0x214>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	23ef      	movs	r3, #239	@ 0xef
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	495c      	ldr	r1, [pc, #368]	@ (80051e0 <xTraceInitialize+0x238>)
 800506e:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8005070:	4b52      	ldr	r3, [pc, #328]	@ (80051bc <xTraceInitialize+0x214>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22f0      	movs	r2, #240	@ 0xf0
 8005076:	0092      	lsls	r2, r2, #2
 8005078:	4694      	mov	ip, r2
 800507a:	4463      	add	r3, ip
 800507c:	4959      	ldr	r1, [pc, #356]	@ (80051e4 <xTraceInitialize+0x23c>)
 800507e:	2250      	movs	r2, #80	@ 0x50
 8005080:	0018      	movs	r0, r3
 8005082:	f000 fec1 	bl	8005e08 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8005086:	4b4d      	ldr	r3, [pc, #308]	@ (80051bc <xTraceInitialize+0x214>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2382      	movs	r3, #130	@ 0x82
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4956      	ldr	r1, [pc, #344]	@ (80051e8 <xTraceInitialize+0x240>)
 8005090:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8005092:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <xTraceInitialize+0x214>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a55      	ldr	r2, [pc, #340]	@ (80051ec <xTraceInitialize+0x244>)
 8005098:	210a      	movs	r1, #10
 800509a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 800509c:	4b47      	ldr	r3, [pc, #284]	@ (80051bc <xTraceInitialize+0x214>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a53      	ldr	r2, [pc, #332]	@ (80051f0 <xTraceInitialize+0x248>)
 80050a2:	210b      	movs	r1, #11
 80050a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 80050a6:	4b45      	ldr	r3, [pc, #276]	@ (80051bc <xTraceInitialize+0x214>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a52      	ldr	r2, [pc, #328]	@ (80051f4 <xTraceInitialize+0x24c>)
 80050ac:	210c      	movs	r1, #12
 80050ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 80050b0:	4b42      	ldr	r3, [pc, #264]	@ (80051bc <xTraceInitialize+0x214>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a50      	ldr	r2, [pc, #320]	@ (80051f8 <xTraceInitialize+0x250>)
 80050b6:	210d      	movs	r1, #13
 80050b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 80050ba:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <xTraceInitialize+0x214>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a4f      	ldr	r2, [pc, #316]	@ (80051fc <xTraceInitialize+0x254>)
 80050c0:	2171      	movs	r1, #113	@ 0x71
 80050c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 80050c4:	4b3d      	ldr	r3, [pc, #244]	@ (80051bc <xTraceInitialize+0x214>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005200 <xTraceInitialize+0x258>)
 80050ca:	2172      	movs	r1, #114	@ 0x72
 80050cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 80050ce:	4b3b      	ldr	r3, [pc, #236]	@ (80051bc <xTraceInitialize+0x214>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005204 <xTraceInitialize+0x25c>)
 80050d4:	2173      	movs	r1, #115	@ 0x73
 80050d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 80050d8:	4b38      	ldr	r3, [pc, #224]	@ (80051bc <xTraceInitialize+0x214>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005208 <xTraceInitialize+0x260>)
 80050de:	2174      	movs	r1, #116	@ 0x74
 80050e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 80050e2:	4b36      	ldr	r3, [pc, #216]	@ (80051bc <xTraceInitialize+0x214>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	239e      	movs	r3, #158	@ 0x9e
 80050e8:	015b      	lsls	r3, r3, #5
 80050ea:	21f1      	movs	r1, #241	@ 0xf1
 80050ec:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 80050ee:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <xTraceInitialize+0x214>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a46      	ldr	r2, [pc, #280]	@ (800520c <xTraceInitialize+0x264>)
 80050f4:	21f2      	movs	r1, #242	@ 0xf2
 80050f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 80050f8:	4b30      	ldr	r3, [pc, #192]	@ (80051bc <xTraceInitialize+0x214>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a44      	ldr	r2, [pc, #272]	@ (8005210 <xTraceInitialize+0x268>)
 80050fe:	21f3      	movs	r1, #243	@ 0xf3
 8005100:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8005102:	4b2e      	ldr	r3, [pc, #184]	@ (80051bc <xTraceInitialize+0x214>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a43      	ldr	r2, [pc, #268]	@ (8005214 <xTraceInitialize+0x26c>)
 8005108:	21f4      	movs	r1, #244	@ 0xf4
 800510a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 800510c:	f7ff fa64 	bl	80045d8 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8005110:	4b2a      	ldr	r3, [pc, #168]	@ (80051bc <xTraceInitialize+0x214>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	22f4      	movs	r2, #244	@ 0xf4
 8005116:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8005118:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <xTraceInitialize+0x214>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	22f3      	movs	r2, #243	@ 0xf3
 800511e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8005120:	4b26      	ldr	r3, [pc, #152]	@ (80051bc <xTraceInitialize+0x214>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	22f2      	movs	r2, #242	@ 0xf2
 8005126:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8005128:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <xTraceInitialize+0x214>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	22f1      	movs	r2, #241	@ 0xf1
 800512e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8005130:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <xTraceInitialize+0x214>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2274      	movs	r2, #116	@ 0x74
 8005136:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8005138:	4b20      	ldr	r3, [pc, #128]	@ (80051bc <xTraceInitialize+0x214>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2273      	movs	r2, #115	@ 0x73
 800513e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8005140:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <xTraceInitialize+0x214>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2272      	movs	r2, #114	@ 0x72
 8005146:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8005148:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <xTraceInitialize+0x214>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2271      	movs	r2, #113	@ 0x71
 800514e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8005150:	4b1a      	ldr	r3, [pc, #104]	@ (80051bc <xTraceInitialize+0x214>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2204      	movs	r2, #4
 8005156:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8005158:	4b18      	ldr	r3, [pc, #96]	@ (80051bc <xTraceInitialize+0x214>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8005160:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <xTraceInitialize+0x214>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2202      	movs	r2, #2
 8005166:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8005168:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <xTraceInitialize+0x214>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8005170:	4b11      	ldr	r3, [pc, #68]	@ (80051b8 <xTraceInitialize+0x210>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005178:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <xTraceInitialize+0x214>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	22f0      	movs	r2, #240	@ 0xf0
 800517e:	0092      	lsls	r2, r2, #2
 8005180:	1898      	adds	r0, r3, r2
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <xTraceInitialize+0x210>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2250      	movs	r2, #80	@ 0x50
 8005188:	0019      	movs	r1, r3
 800518a:	f000 fe3d 	bl	8005e08 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800518e:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <xTraceInitialize+0x214>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	23ee      	movs	r3, #238	@ 0xee
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	2101      	movs	r1, #1
 8005198:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 800519a:	f7ff fb89 	bl	80048b0 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 800519e:	4b03      	ldr	r3, [pc, #12]	@ (80051ac <xTraceInitialize+0x204>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20002dfc 	.word	0x20002dfc
 80051b0:	200019c8 	.word	0x200019c8
 80051b4:	200019ca 	.word	0x200019ca
 80051b8:	20001a30 	.word	0x20001a30
 80051bc:	20002df8 	.word	0x20002df8
 80051c0:	20001a34 	.word	0x20001a34
 80051c4:	e000e018 	.word	0xe000e018
 80051c8:	200019c4 	.word	0x200019c4
 80051cc:	200019a0 	.word	0x200019a0
 80051d0:	000013c4 	.word	0x000013c4
 80051d4:	00001aa1 	.word	0x00001aa1
 80051d8:	f0f0f0f0 	.word	0xf0f0f0f0
 80051dc:	f1f1f1f1 	.word	0xf1f1f1f1
 80051e0:	f2f2f2f2 	.word	0xf2f2f2f2
 80051e4:	08007688 	.word	0x08007688
 80051e8:	f3f3f3f3 	.word	0xf3f3f3f3
 80051ec:	000013b8 	.word	0x000013b8
 80051f0:	000013b9 	.word	0x000013b9
 80051f4:	000013ba 	.word	0x000013ba
 80051f8:	000013bb 	.word	0x000013bb
 80051fc:	000013bc 	.word	0x000013bc
 8005200:	000013bd 	.word	0x000013bd
 8005204:	000013be 	.word	0x000013be
 8005208:	000013bf 	.word	0x000013bf
 800520c:	000013c1 	.word	0x000013c1
 8005210:	000013c2 	.word	0x000013c2
 8005214:	000013c3 	.word	0x000013c3

08005218 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	0002      	movs	r2, r0
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8005224:	1dfb      	adds	r3, r7, #7
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d04d      	beq.n	80052c8 <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 800522c:	4b29      	ldr	r3, [pc, #164]	@ (80052d4 <prvTraceStoreTaskReady+0xbc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d04b      	beq.n	80052cc <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8005234:	4b28      	ldr	r3, [pc, #160]	@ (80052d8 <prvTraceStoreTaskReady+0xc0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <prvTraceStoreTaskReady+0xc4>)
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fec2 	bl	8005fc8 <prvTraceError>
		return;
 8005244:	e043      	b.n	80052ce <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	60fb      	str	r3, [r7, #12]
  return(result);
 800524c:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	2301      	movs	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	4b1e      	ldr	r3, [pc, #120]	@ (80052d8 <prvTraceStoreTaskReady+0xc0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	4b1d      	ldr	r3, [pc, #116]	@ (80052d8 <prvTraceStoreTaskReady+0xc0>)
 8005264:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8005266:	4b1e      	ldr	r3, [pc, #120]	@ (80052e0 <prvTraceStoreTaskReady+0xc8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005270:	251a      	movs	r5, #26
 8005272:	197c      	adds	r4, r7, r5
 8005274:	4b1b      	ldr	r3, [pc, #108]	@ (80052e4 <prvTraceStoreTaskReady+0xcc>)
 8005276:	0018      	movs	r0, r3
 8005278:	f000 ff9a 	bl	80061b0 <prvTraceGetDTS>
 800527c:	0003      	movs	r3, r0
 800527e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8005280:	2419      	movs	r4, #25
 8005282:	193b      	adds	r3, r7, r4
 8005284:	1dfa      	adds	r2, r7, #7
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800528a:	f000 fc37 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 800528e:	0003      	movs	r3, r0
 8005290:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	197a      	adds	r2, r7, r5
 80052a2:	8812      	ldrh	r2, [r2, #0]
 80052a4:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	193a      	adds	r2, r7, r4
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80052ae:	f000 ff55 	bl	800615c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <prvTraceStoreTaskReady+0xc0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <prvTraceStoreTaskReady+0xc0>)
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	e002      	b.n	80052ce <prvTraceStoreTaskReady+0xb6>
		return;
 80052c8:	46c0      	nop			@ (mov r8, r8)
 80052ca:	e000      	b.n	80052ce <prvTraceStoreTaskReady+0xb6>
		return;
 80052cc:	46c0      	nop			@ (mov r8, r8)
}
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b008      	add	sp, #32
 80052d2:	bdb0      	pop	{r4, r5, r7, pc}
 80052d4:	20000010 	.word	0x20000010
 80052d8:	200019b4 	.word	0x200019b4
 80052dc:	0800769c 	.word	0x0800769c
 80052e0:	20002df8 	.word	0x20002df8
 80052e4:	0000ffff 	.word	0x0000ffff

080052e8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b08e      	sub	sp, #56	@ 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 80052f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d100      	bne.n	80052fe <vTraceStoreMemMangEvent+0x16>
 80052fc:	e090      	b.n	8005420 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	da03      	bge.n	800530c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	425b      	negs	r3, r3
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
 800530a:	e001      	b.n	8005310 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005310:	f3ef 8310 	mrs	r3, PRIMASK
 8005314:	61bb      	str	r3, [r7, #24]
  return(result);
 8005316:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
 800531a:	2301      	movs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	4b41      	ldr	r3, [pc, #260]	@ (800542c <vTraceStoreMemMangEvent+0x144>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	4b3f      	ldr	r3, [pc, #252]	@ (800542c <vTraceStoreMemMangEvent+0x144>)
 800532e:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d015      	beq.n	8005362 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8005336:	4b3c      	ldr	r3, [pc, #240]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4b3a      	ldr	r3, [pc, #232]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	188a      	adds	r2, r1, r2
 8005344:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8005346:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800534c:	4b36      	ldr	r3, [pc, #216]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	429a      	cmp	r2, r3
 8005354:	d905      	bls.n	8005362 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8005356:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b33      	ldr	r3, [pc, #204]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8005362:	4b31      	ldr	r3, [pc, #196]	@ (8005428 <vTraceStoreMemMangEvent+0x140>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	2b00      	cmp	r3, #0
 800536a:	d04e      	beq.n	800540a <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 800536c:	20ff      	movs	r0, #255	@ 0xff
 800536e:	f000 ff1f 	bl	80061b0 <prvTraceGetDTS>
 8005372:	0003      	movs	r3, r0
 8005374:	001a      	movs	r2, r3
 8005376:	242f      	movs	r4, #47	@ 0x2f
 8005378:	193b      	adds	r3, r7, r4
 800537a:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	4a2c      	ldr	r2, [pc, #176]	@ (8005430 <vTraceStoreMemMangEvent+0x148>)
 8005380:	0019      	movs	r1, r3
 8005382:	0010      	movs	r0, r2
 8005384:	f000 f92c 	bl	80055e0 <prvTraceGetParam>
 8005388:	0002      	movs	r2, r0
 800538a:	252c      	movs	r5, #44	@ 0x2c
 800538c:	197b      	adds	r3, r7, r5
 800538e:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8005390:	f000 fbb4 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 8005394:	0003      	movs	r3, r0
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d035      	beq.n	800540a <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	193a      	adds	r2, r7, r4
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	197a      	adds	r2, r7, r5
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80053b4:	f000 fed2 	bl	800615c <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <vTraceStoreMemMangEvent+0x148>)
 80053bc:	0019      	movs	r1, r3
 80053be:	0010      	movs	r0, r2
 80053c0:	f000 f90e 	bl	80055e0 <prvTraceGetParam>
 80053c4:	0002      	movs	r2, r0
 80053c6:	2426      	movs	r4, #38	@ 0x26
 80053c8:	193b      	adds	r3, r7, r4
 80053ca:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 80053cc:	2525      	movs	r5, #37	@ 0x25
 80053ce:	197b      	adds	r3, r7, r5
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80053d4:	f000 fb92 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80053d8:	0003      	movs	r3, r0
 80053da:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d013      	beq.n	800540a <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	193a      	adds	r2, r7, r4
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	197a      	adds	r2, r7, r5
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	3301      	adds	r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8005406:	f000 fea9 	bl	800615c <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <vTraceStoreMemMangEvent+0x144>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1e5a      	subs	r2, r3, #1
 8005410:	4b06      	ldr	r3, [pc, #24]	@ (800542c <vTraceStoreMemMangEvent+0x144>)
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	e000      	b.n	8005422 <vTraceStoreMemMangEvent+0x13a>
		return;
 8005420:	46c0      	nop			@ (mov r8, r8)
}
 8005422:	46bd      	mov	sp, r7
 8005424:	b00e      	add	sp, #56	@ 0x38
 8005426:	bdb0      	pop	{r4, r5, r7, pc}
 8005428:	20002df8 	.word	0x20002df8
 800542c:	200019b4 	.word	0x200019b4
 8005430:	0000ffff 	.word	0x0000ffff

08005434 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	230b      	movs	r3, #11
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	1c0a      	adds	r2, r1, #0
 8005444:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8005446:	4b29      	ldr	r3, [pc, #164]	@ (80054ec <prvTraceStoreKernelCall+0xb8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800544e:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <prvTraceStoreKernelCall+0xbc>)
 8005450:	0018      	movs	r0, r3
 8005452:	f000 fdb9 	bl	8005fc8 <prvTraceError>
		return;
 8005456:	e045      	b.n	80054e4 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 8005458:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <prvTraceStoreKernelCall+0xc0>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d040      	beq.n	80054e2 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005460:	f3ef 8310 	mrs	r3, PRIMASK
 8005464:	617b      	str	r3, [r7, #20]
  return(result);
 8005466:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	2301      	movs	r3, #1
 800546c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			@ (mov r8, r8)
 8005476:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <prvTraceStoreKernelCall+0xb8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <prvTraceStoreKernelCall+0xb8>)
 800547e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <prvTraceStoreKernelCall+0xc4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800548a:	2522      	movs	r5, #34	@ 0x22
 800548c:	197c      	adds	r4, r7, r5
 800548e:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <prvTraceStoreKernelCall+0xc8>)
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fe8d 	bl	80061b0 <prvTraceGetDTS>
 8005496:	0003      	movs	r3, r0
 8005498:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800549a:	2421      	movs	r4, #33	@ 0x21
 800549c:	193b      	adds	r3, r7, r4
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80054a2:	f000 fb2b 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80054a6:	0003      	movs	r3, r0
 80054a8:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	197a      	adds	r2, r7, r5
 80054b4:	8812      	ldrh	r2, [r2, #0]
 80054b6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	193a      	adds	r2, r7, r4
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80054c8:	f000 fe48 	bl	800615c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80054cc:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <prvTraceStoreKernelCall+0xb8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <prvTraceStoreKernelCall+0xb8>)
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	e000      	b.n	80054e4 <prvTraceStoreKernelCall+0xb0>
		return;
 80054e2:	46c0      	nop			@ (mov r8, r8)
}
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b00a      	add	sp, #40	@ 0x28
 80054e8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	200019b4 	.word	0x200019b4
 80054f0:	080076d4 	.word	0x080076d4
 80054f4:	200019bc 	.word	0x200019bc
 80054f8:	20002df8 	.word	0x20002df8
 80054fc:	0000ffff 	.word	0x0000ffff

08005500 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8005500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005502:	b08b      	sub	sp, #44	@ 0x2c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	230b      	movs	r3, #11
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	1c0a      	adds	r2, r1, #0
 8005512:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8005514:	4b2e      	ldr	r3, [pc, #184]	@ (80055d0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 800551c:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <prvTraceStoreKernelCallWithParam+0xd4>)
 800551e:	0018      	movs	r0, r3
 8005520:	f000 fd52 	bl	8005fc8 <prvTraceError>
		return;
 8005524:	e051      	b.n	80055ca <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005526:	f3ef 8310 	mrs	r3, PRIMASK
 800552a:	617b      	str	r3, [r7, #20]
  return(result);
 800552c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005530:	2301      	movs	r3, #1
 8005532:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	4b24      	ldr	r3, [pc, #144]	@ (80055d0 <prvTraceStoreKernelCallWithParam+0xd0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <prvTraceStoreKernelCallWithParam+0xd0>)
 8005544:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <prvTraceStoreKernelCallWithParam+0xd8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d031      	beq.n	80055b4 <prvTraceStoreKernelCallWithParam+0xb4>
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <prvTraceStoreKernelCallWithParam+0xdc>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02d      	beq.n	80055b4 <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005558:	20ff      	movs	r0, #255	@ 0xff
 800555a:	f000 fe29 	bl	80061b0 <prvTraceGetDTS>
 800555e:	0003      	movs	r3, r0
 8005560:	001a      	movs	r2, r3
 8005562:	2423      	movs	r4, #35	@ 0x23
 8005564:	193b      	adds	r3, r7, r4
 8005566:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	0019      	movs	r1, r3
 800556c:	20ff      	movs	r0, #255	@ 0xff
 800556e:	f000 f837 	bl	80055e0 <prvTraceGetParam>
 8005572:	0002      	movs	r2, r0
 8005574:	2522      	movs	r5, #34	@ 0x22
 8005576:	197b      	adds	r3, r7, r5
 8005578:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800557a:	2621      	movs	r6, #33	@ 0x21
 800557c:	19bb      	adds	r3, r7, r6
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8005582:	f000 fabb 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 8005586:	0003      	movs	r3, r0
 8005588:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d011      	beq.n	80055b4 <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	193a      	adds	r2, r7, r4
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	19ba      	adds	r2, r7, r6
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	197a      	adds	r2, r7, r5
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 80055b0:	f000 fdd4 	bl	800615c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <prvTraceStoreKernelCallWithParam+0xd0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <prvTraceStoreKernelCallWithParam+0xd0>)
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
}
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b00b      	add	sp, #44	@ 0x2c
 80055ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d0:	200019b4 	.word	0x200019b4
 80055d4:	0800770c 	.word	0x0800770c
 80055d8:	20002df8 	.word	0x20002df8
 80055dc:	200019bc 	.word	0x200019bc

080055e0 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d801      	bhi.n	80055f6 <prvTraceGetParam+0x16>
	{
		return param;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	e01e      	b.n	8005634 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80055f6:	f000 fa81 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80055fa:	0003      	movs	r3, r0
 80055fc:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d014      	beq.n	800562e <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	43db      	mvns	r3, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	4013      	ands	r3, r2
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b2da      	uxtb	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	43db      	mvns	r3, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4013      	ands	r3, r2
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800562a:	f000 fd97 	bl	800615c <prvTraceUpdateCounters>
		}

		return param & param_max;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4013      	ands	r3, r2
	}
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b004      	add	sp, #16
 800563a:	bd80      	pop	{r7, pc}

0800563c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800563c:	b5b0      	push	{r4, r5, r7, lr}
 800563e:	b08a      	sub	sp, #40	@ 0x28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8005646:	2326      	movs	r3, #38	@ 0x26
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	2200      	movs	r2, #0
 800564c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 800564e:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005656:	4b2a      	ldr	r3, [pc, #168]	@ (8005700 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8005658:	0018      	movs	r0, r3
 800565a:	f000 fcb5 	bl	8005fc8 <prvTraceError>
		return;
 800565e:	e04a      	b.n	80056f6 <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005660:	f3ef 8310 	mrs	r3, PRIMASK
 8005664:	613b      	str	r3, [r7, #16]
  return(result);
 8005666:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	2301      	movs	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	4b21      	ldr	r3, [pc, #132]	@ (80056fc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	4b1f      	ldr	r3, [pc, #124]	@ (80056fc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 800567e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005680:	4b20      	ldr	r3, [pc, #128]	@ (8005704 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02a      	beq.n	80056e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 800568a:	4b1f      	ldr	r3, [pc, #124]	@ (8005708 <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d026      	beq.n	80056e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8005692:	20ff      	movs	r0, #255	@ 0xff
 8005694:	f000 fd8c 	bl	80061b0 <prvTraceGetDTS>
 8005698:	0003      	movs	r3, r0
 800569a:	001a      	movs	r2, r3
 800569c:	241f      	movs	r4, #31
 800569e:	193b      	adds	r3, r7, r4
 80056a0:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	4a19      	ldr	r2, [pc, #100]	@ (800570c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 80056a6:	0019      	movs	r1, r3
 80056a8:	0010      	movs	r0, r2
 80056aa:	f7ff ff99 	bl	80055e0 <prvTraceGetParam>
 80056ae:	0002      	movs	r2, r0
 80056b0:	2526      	movs	r5, #38	@ 0x26
 80056b2:	197b      	adds	r3, r7, r5
 80056b4:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 80056b6:	f000 fa21 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80056ba:	0003      	movs	r3, r0
 80056bc:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	193a      	adds	r2, r7, r4
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	197a      	adds	r2, r7, r5
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80056dc:	f000 fd3e 	bl	800615c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			@ (mov r8, r8)
}
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b00a      	add	sp, #40	@ 0x28
 80056fa:	bdb0      	pop	{r4, r5, r7, pc}
 80056fc:	200019b4 	.word	0x200019b4
 8005700:	08007744 	.word	0x08007744
 8005704:	20002df8 	.word	0x20002df8
 8005708:	200019bc 	.word	0x200019bc
 800570c:	0000ffff 	.word	0x0000ffff

08005710 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b089      	sub	sp, #36	@ 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	0002      	movs	r2, r0
 8005718:	1dfb      	adds	r3, r7, #7
 800571a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	60fb      	str	r3, [r7, #12]
  return(result);
 8005722:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	2301      	movs	r3, #1
 8005728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	4b2d      	ldr	r3, [pc, #180]	@ (80057e8 <prvTraceStoreTaskswitch+0xd8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	4b2b      	ldr	r3, [pc, #172]	@ (80057e8 <prvTraceStoreTaskswitch+0xd8>)
 800573a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800573c:	4b2b      	ldr	r3, [pc, #172]	@ (80057ec <prvTraceStoreTaskswitch+0xdc>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	1dfa      	adds	r2, r7, #7
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d03f      	beq.n	80057c8 <prvTraceStoreTaskswitch+0xb8>
 8005748:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <prvTraceStoreTaskswitch+0xe0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03a      	beq.n	80057c8 <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005752:	231a      	movs	r3, #26
 8005754:	18fc      	adds	r4, r7, r3
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <prvTraceStoreTaskswitch+0xe4>)
 8005758:	0018      	movs	r0, r3
 800575a:	f000 fd29 	bl	80061b0 <prvTraceGetDTS>
 800575e:	0003      	movs	r3, r0
 8005760:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8005762:	4b22      	ldr	r3, [pc, #136]	@ (80057ec <prvTraceStoreTaskswitch+0xdc>)
 8005764:	1dfa      	adds	r2, r7, #7
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800576a:	2319      	movs	r3, #25
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <prvTraceStoreTaskswitch+0xdc>)
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8005774:	f000 f9c2 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 8005778:	0003      	movs	r3, r0
 800577a:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d022      	beq.n	80057c8 <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8005782:	4b1a      	ldr	r3, [pc, #104]	@ (80057ec <prvTraceStoreTaskswitch+0xdc>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	0019      	movs	r1, r3
 8005788:	2003      	movs	r0, #3
 800578a:	f000 f96f 	bl	8005a6c <prvTraceGetObjectState>
 800578e:	0003      	movs	r3, r0
 8005790:	2b01      	cmp	r3, #1
 8005792:	d103      	bne.n	800579c <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2207      	movs	r2, #7
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e002      	b.n	80057a2 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2206      	movs	r2, #6
 80057a0:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	221a      	movs	r2, #26
 80057a6:	18ba      	adds	r2, r7, r2
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2219      	movs	r2, #25
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	7812      	ldrb	r2, [r2, #0]
 80057b4:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <prvTraceStoreTaskswitch+0xdc>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	0019      	movs	r1, r3
 80057be:	2003      	movs	r0, #3
 80057c0:	f000 f924 	bl	8005a0c <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80057c4:	f000 fcca 	bl	800615c <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <prvTraceStoreTaskswitch+0xd8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <prvTraceStoreTaskswitch+0xd8>)
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b009      	add	sp, #36	@ 0x24
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	200019b4 	.word	0x200019b4
 80057ec:	200019bc 	.word	0x200019bc
 80057f0:	20002df8 	.word	0x20002df8
 80057f4:	0000ffff 	.word	0x0000ffff

080057f8 <prvTraceStoreObjectNameOnCloseEvent>:
 * and name (a symbol table handle). The stored name-handle mapping is thus the
 * "old" one, valid up until this point.
 ******************************************************************************/
void prvTraceStoreObjectNameOnCloseEvent(uint8_t evtcode, traceHandle handle,
										traceObjectClass objectclass)
{
 80057f8:	b5b0      	push	{r4, r5, r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	0004      	movs	r4, r0
 8005800:	0008      	movs	r0, r1
 8005802:	0011      	movs	r1, r2
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	1c22      	adds	r2, r4, #0
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	1dbb      	adds	r3, r7, #6
 800580c:	1c02      	adds	r2, r0, #0
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	1d7b      	adds	r3, r7, #5
 8005812:	1c0a      	adds	r2, r1, #0
 8005814:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceStoreObjectNameOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 8005816:	4b1c      	ldr	r3, [pc, #112]	@ (8005888 <prvTraceStoreObjectNameOnCloseEvent+0x90>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02e      	beq.n	800587e <prvTraceStoreObjectNameOnCloseEvent+0x86>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
 8005820:	2517      	movs	r5, #23
 8005822:	197b      	adds	r3, r7, r5
 8005824:	1dba      	adds	r2, r7, #6
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	701a      	strb	r2, [r3, #0]
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
 800582a:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <prvTraceStoreObjectNameOnCloseEvent+0x90>)
 800582c:	681c      	ldr	r4, [r3, #0]
 800582e:	1d7b      	adds	r3, r7, #5
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	1dbb      	adds	r3, r7, #6
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	0011      	movs	r1, r2
 8005838:	0018      	movs	r0, r3
 800583a:	f000 f989 	bl	8005b50 <uiIndexOfObject>
 800583e:	0003      	movs	r3, r0
 8005840:	3388      	adds	r3, #136	@ 0x88
 8005842:	18e3      	adds	r3, r4, r3
 8005844:	613b      	str	r3, [r7, #16]
		idx = prvTraceOpenSymbol(name, 0);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2100      	movs	r1, #0
 800584a:	0018      	movs	r0, r3
 800584c:	f000 fb6a 	bl	8005f24 <prvTraceOpenSymbol>
 8005850:	0003      	movs	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) prvTraceNextFreeEventBufferSlot();
 8005854:	f000 f952 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 8005858:	0003      	movs	r3, r0
 800585a:	60bb      	str	r3, [r7, #8]
		if (ce != (void*)0)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <prvTraceStoreObjectNameOnCloseEvent+0x86>
		{
			ce->type = (uint8_t) evtcode;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	1dfa      	adds	r2, r7, #7
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	701a      	strb	r2, [r3, #0]
			ce->objHandle = hnd8;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	197a      	adds	r2, r7, r5
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	705a      	strb	r2, [r3, #1]
			ce->symbolIndex = idx;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	b29a      	uxth	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800587a:	f000 fc6f 	bl	800615c <prvTraceUpdateCounters>
		}
	}
}
 800587e:	46c0      	nop			@ (mov r8, r8)
 8005880:	46bd      	mov	sp, r7
 8005882:	b006      	add	sp, #24
 8005884:	bdb0      	pop	{r4, r5, r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	20002df8 	.word	0x20002df8

0800588c <prvTraceStoreObjectPropertiesOnCloseEvent>:

void prvTraceStoreObjectPropertiesOnCloseEvent(uint8_t evtcode, traceHandle handle,
											 traceObjectClass objectclass)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	0004      	movs	r4, r0
 8005894:	0008      	movs	r0, r1
 8005896:	0011      	movs	r1, r2
 8005898:	1dfb      	adds	r3, r7, #7
 800589a:	1c22      	adds	r2, r4, #0
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	1dbb      	adds	r3, r7, #6
 80058a0:	1c02      	adds	r2, r0, #0
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	1d7b      	adds	r3, r7, #5
 80058a6:	1c0a      	adds	r2, r1, #0
 80058a8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d048      	beq.n	8005946 <prvTraceStoreObjectPropertiesOnCloseEvent+0xba>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) prvTraceNextFreeEventBufferSlot();
 80058b4:	f000 f922 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80058b8:	0003      	movs	r3, r0
 80058ba:	60fb      	str	r3, [r7, #12]
		if (pe != (void*)0)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d041      	beq.n	8005946 <prvTraceStoreObjectPropertiesOnCloseEvent+0xba>
		{
			if (objectclass == TRACE_CLASS_TASK)
 80058c2:	1d7b      	adds	r3, r7, #5
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d11c      	bne.n	8005904 <prvTraceStoreObjectPropertiesOnCloseEvent+0x78>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 80058ca:	4b21      	ldr	r3, [pc, #132]	@ (8005950 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 80058cc:	681c      	ldr	r4, [r3, #0]
 80058ce:	1d7b      	adds	r3, r7, #5
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	1dbb      	adds	r3, r7, #6
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	0011      	movs	r1, r2
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 f939 	bl	8005b50 <uiIndexOfObject>
 80058de:	0003      	movs	r3, r0
 80058e0:	0018      	movs	r0, r3
 80058e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	1d7b      	adds	r3, r7, #5
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	215c      	movs	r1, #92	@ 0x5c
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	185b      	adds	r3, r3, r1
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	18c3      	adds	r3, r0, r3
 80058f4:	3301      	adds	r3, #1
 80058f6:	2288      	movs	r2, #136	@ 0x88
 80058f8:	18e3      	adds	r3, r4, r3
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	705a      	strb	r2, [r3, #1]
 8005902:	e01a      	b.n	800593a <prvTraceStoreObjectPropertiesOnCloseEvent+0xae>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 8005904:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 8005906:	681c      	ldr	r4, [r3, #0]
 8005908:	1d7b      	adds	r3, r7, #5
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	1dbb      	adds	r3, r7, #6
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	0011      	movs	r1, r2
 8005912:	0018      	movs	r0, r3
 8005914:	f000 f91c 	bl	8005b50 <uiIndexOfObject>
 8005918:	0003      	movs	r3, r0
 800591a:	0018      	movs	r0, r3
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	1d7b      	adds	r3, r7, #5
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	215c      	movs	r1, #92	@ 0x5c
 8005926:	18d3      	adds	r3, r2, r3
 8005928:	185b      	adds	r3, r3, r1
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	18c3      	adds	r3, r0, r3
 800592e:	2288      	movs	r2, #136	@ 0x88
 8005930:	18e3      	adds	r3, r4, r3
 8005932:	189b      	adds	r3, r3, r2
 8005934:	781a      	ldrb	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	705a      	strb	r2, [r3, #1]
			}
			pe->type = evtcode;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1dfa      	adds	r2, r7, #7
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	701a      	strb	r2, [r3, #0]
			prvTraceUpdateCounters();
 8005942:	f000 fc0b 	bl	800615c <prvTraceUpdateCounters>
		}
	}
}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b005      	add	sp, #20
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	20002df8 	.word	0x20002df8

08005954 <prvTraceSetPriorityProperty>:

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	0004      	movs	r4, r0
 800595c:	0008      	movs	r0, r1
 800595e:	0011      	movs	r1, r2
 8005960:	1dfb      	adds	r3, r7, #7
 8005962:	1c22      	adds	r2, r4, #0
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	1dbb      	adds	r3, r7, #6
 8005968:	1c02      	adds	r2, r0, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	1d7b      	adds	r3, r7, #5
 800596e:	1c0a      	adds	r2, r1, #0
 8005970:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8005972:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <prvTraceSetPriorityProperty+0x60>)
 8005974:	681c      	ldr	r4, [r3, #0]
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	1dbb      	adds	r3, r7, #6
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	0011      	movs	r1, r2
 8005980:	0018      	movs	r0, r3
 8005982:	f000 f8e5 	bl	8005b50 <uiIndexOfObject>
 8005986:	0003      	movs	r3, r0
 8005988:	0018      	movs	r0, r3
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <prvTraceSetPriorityProperty+0x60>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	1dfb      	adds	r3, r7, #7
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	215c      	movs	r1, #92	@ 0x5c
 8005994:	18d3      	adds	r3, r2, r3
 8005996:	185b      	adds	r3, r3, r1
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	18c3      	adds	r3, r0, r3
 800599c:	3301      	adds	r3, #1
 800599e:	2288      	movs	r2, #136	@ 0x88
 80059a0:	18e3      	adds	r3, r4, r3
 80059a2:	189b      	adds	r3, r3, r2
 80059a4:	1d7a      	adds	r2, r7, #5
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b003      	add	sp, #12
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	20002df8 	.word	0x20002df8

080059b8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	0002      	movs	r2, r0
 80059c0:	1dfb      	adds	r3, r7, #7
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	1dbb      	adds	r3, r7, #6
 80059c6:	1c0a      	adds	r2, r1, #0
 80059c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80059ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005a08 <prvTraceGetPriorityProperty+0x50>)
 80059cc:	681c      	ldr	r4, [r3, #0]
 80059ce:	1dfb      	adds	r3, r7, #7
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	1dbb      	adds	r3, r7, #6
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 f8b9 	bl	8005b50 <uiIndexOfObject>
 80059de:	0003      	movs	r3, r0
 80059e0:	0018      	movs	r0, r3
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <prvTraceGetPriorityProperty+0x50>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	1dfb      	adds	r3, r7, #7
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	215c      	movs	r1, #92	@ 0x5c
 80059ec:	18d3      	adds	r3, r2, r3
 80059ee:	185b      	adds	r3, r3, r1
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	18c3      	adds	r3, r0, r3
 80059f4:	3301      	adds	r3, #1
 80059f6:	2288      	movs	r2, #136	@ 0x88
 80059f8:	18e3      	adds	r3, r4, r3
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	781b      	ldrb	r3, [r3, #0]
}
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b003      	add	sp, #12
 8005a04:	bd90      	pop	{r4, r7, pc}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	20002df8 	.word	0x20002df8

08005a0c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0004      	movs	r4, r0
 8005a14:	0008      	movs	r0, r1
 8005a16:	0011      	movs	r1, r2
 8005a18:	1dfb      	adds	r3, r7, #7
 8005a1a:	1c22      	adds	r2, r4, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	1dbb      	adds	r3, r7, #6
 8005a20:	1c02      	adds	r2, r0, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	1d7b      	adds	r3, r7, #5
 8005a26:	1c0a      	adds	r2, r1, #0
 8005a28:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a68 <prvTraceSetObjectState+0x5c>)
 8005a2c:	681c      	ldr	r4, [r3, #0]
 8005a2e:	1dfb      	adds	r3, r7, #7
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	1dbb      	adds	r3, r7, #6
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f889 	bl	8005b50 <uiIndexOfObject>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	0018      	movs	r0, r3
 8005a42:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <prvTraceSetObjectState+0x5c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	1dfb      	adds	r3, r7, #7
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	215c      	movs	r1, #92	@ 0x5c
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	185b      	adds	r3, r3, r1
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	18c3      	adds	r3, r0, r3
 8005a54:	2288      	movs	r2, #136	@ 0x88
 8005a56:	18e3      	adds	r3, r4, r3
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	1d7a      	adds	r2, r7, #5
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	701a      	strb	r2, [r3, #0]
}
 8005a60:	46c0      	nop			@ (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b003      	add	sp, #12
 8005a66:	bd90      	pop	{r4, r7, pc}
 8005a68:	20002df8 	.word	0x20002df8

08005a6c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	0002      	movs	r2, r0
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	1dbb      	adds	r3, r7, #6
 8005a7a:	1c0a      	adds	r2, r1, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <prvTraceGetObjectState+0x4c>)
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	1dbb      	adds	r3, r7, #6
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 f85f 	bl	8005b50 <uiIndexOfObject>
 8005a92:	0003      	movs	r3, r0
 8005a94:	0018      	movs	r0, r3
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <prvTraceGetObjectState+0x4c>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	1dfb      	adds	r3, r7, #7
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	215c      	movs	r1, #92	@ 0x5c
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	185b      	adds	r3, r3, r1
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	18c3      	adds	r3, r0, r3
 8005aa8:	2288      	movs	r2, #136	@ 0x88
 8005aaa:	18e3      	adds	r3, r4, r3
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	781b      	ldrb	r3, [r3, #0]
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bd90      	pop	{r4, r7, pc}
 8005ab8:	20002df8 	.word	0x20002df8

08005abc <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <prvTraceSetTaskInstanceFinished+0x3c>)
 8005aca:	681c      	ldr	r4, [r3, #0]
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2103      	movs	r1, #3
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f000 f83c 	bl	8005b50 <uiIndexOfObject>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	0019      	movs	r1, r3
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <prvTraceSetTaskInstanceFinished+0x3c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	225f      	movs	r2, #95	@ 0x5f
 8005ae2:	5c9b      	ldrb	r3, [r3, r2]
 8005ae4:	18cb      	adds	r3, r1, r3
 8005ae6:	2288      	movs	r2, #136	@ 0x88
 8005ae8:	18e3      	adds	r3, r4, r3
 8005aea:	189b      	adds	r3, r3, r2
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
#endif
}
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b003      	add	sp, #12
 8005af6:	bd90      	pop	{r4, r7, pc}
 8005af8:	20002df8 	.word	0x20002df8

08005afc <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e018      	b.n	8005b40 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	23fa      	movs	r3, #250	@ 0xfa
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d305      	bcc.n	8005b28 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <prvTraceNextFreeEventBufferSlot+0x50>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f000 fa52 	bl	8005fc8 <prvTraceError>
		return (void*)0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e00b      	b.n	8005b40 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	2182      	movs	r1, #130	@ 0x82
 8005b36:	00c9      	lsls	r1, r1, #3
 8005b38:	468c      	mov	ip, r1
 8005b3a:	4463      	add	r3, ip
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	3304      	adds	r3, #4
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	20002df8 	.word	0x20002df8
 8005b4c:	0800777c 	.word	0x0800777c

08005b50 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	0002      	movs	r2, r0
 8005b58:	1dfb      	adds	r3, r7, #7
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	1dbb      	adds	r3, r7, #6
 8005b5e:	1c0a      	adds	r2, r1, #0
 8005b60:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005b62:	1dbb      	adds	r3, r7, #6
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d82e      	bhi.n	8005bc8 <uiIndexOfObject+0x78>
 8005b6a:	1dfb      	adds	r3, r7, #7
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02a      	beq.n	8005bc8 <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8005b72:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <uiIndexOfObject+0x8c>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	1dbb      	adds	r3, r7, #6
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2150      	movs	r1, #80	@ 0x50
 8005b7c:	18d3      	adds	r3, r2, r3
 8005b7e:	185b      	adds	r3, r3, r1
 8005b80:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005b82:	1dfa      	adds	r2, r7, #7
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d81e      	bhi.n	8005bc8 <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8005b8a:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <uiIndexOfObject+0x8c>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	1dbb      	adds	r3, r7, #6
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	3338      	adds	r3, #56	@ 0x38
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	18d3      	adds	r3, r2, r3
 8005b98:	3304      	adds	r3, #4
 8005b9a:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <uiIndexOfObject+0x8c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	1dbb      	adds	r3, r7, #6
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2068      	movs	r0, #104	@ 0x68
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	181b      	adds	r3, r3, r0
 8005baa:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8005bac:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8005bae:	1dfb      	adds	r3, r7, #7
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4353      	muls	r3, r2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	200e      	movs	r0, #14
 8005bbc:	183b      	adds	r3, r7, r0
 8005bbe:	188a      	adds	r2, r1, r2
 8005bc0:	801a      	strh	r2, [r3, #0]
		return index;
 8005bc2:	183b      	adds	r3, r7, r0
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	e004      	b.n	8005bd2 <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <uiIndexOfObject+0x90>)
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f9fc 	bl	8005fc8 <prvTraceError>
	return 0;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b004      	add	sp, #16
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	20002df8 	.word	0x20002df8
 8005be0:	080077a4 	.word	0x080077a4

08005be4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b089      	sub	sp, #36	@ 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	0002      	movs	r2, r0
 8005bec:	1dfb      	adds	r3, r7, #7
 8005bee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			@ (mov r8, r8)
 8005c06:	4b4c      	ldr	r3, [pc, #304]	@ (8005d38 <prvTraceGetObjectHandle+0x154>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d38 <prvTraceGetObjectHandle+0x154>)
 8005c0e:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8005c10:	1dfb      	adds	r3, r7, #7
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	4b49      	ldr	r3, [pc, #292]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c16:	0052      	lsls	r2, r2, #1
 8005c18:	5ad3      	ldrh	r3, [r2, r3]
 8005c1a:	001a      	movs	r2, r3
 8005c1c:	4b48      	ldr	r3, [pc, #288]	@ (8005d40 <prvTraceGetObjectHandle+0x15c>)
 8005c1e:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8005c20:	4b47      	ldr	r3, [pc, #284]	@ (8005d40 <prvTraceGetObjectHandle+0x15c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a45      	ldr	r2, [pc, #276]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c26:	2148      	movs	r1, #72	@ 0x48
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	185b      	adds	r3, r3, r1
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d117      	bne.n	8005c62 <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8005c32:	4b43      	ldr	r3, [pc, #268]	@ (8005d40 <prvTraceGetObjectHandle+0x15c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	493f      	ldr	r1, [pc, #252]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c3e:	3308      	adds	r3, #8
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	18cb      	adds	r3, r1, r3
 8005c44:	3302      	adds	r3, #2
 8005c46:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d40 <prvTraceGetObjectHandle+0x15c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8005c52:	3201      	adds	r2, #1
 8005c54:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005c56:	4a39      	ldr	r2, [pc, #228]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c58:	2148      	movs	r1, #72	@ 0x48
 8005c5a:	18d3      	adds	r3, r2, r3
 8005c5c:	185b      	adds	r3, r3, r1
 8005c5e:	1c02      	adds	r2, r0, #0
 8005c60:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8005c62:	4b37      	ldr	r3, [pc, #220]	@ (8005d40 <prvTraceGetObjectHandle+0x15c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	241f      	movs	r4, #31
 8005c68:	193b      	adds	r3, r7, r4
 8005c6a:	4934      	ldr	r1, [pc, #208]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c6c:	2048      	movs	r0, #72	@ 0x48
 8005c6e:	188a      	adds	r2, r1, r2
 8005c70:	1812      	adds	r2, r2, r0
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	4b30      	ldr	r3, [pc, #192]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c7c:	0052      	lsls	r2, r2, #1
 8005c7e:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	492d      	ldr	r1, [pc, #180]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005c86:	3310      	adds	r3, #16
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	18cb      	adds	r3, r1, r3
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d90c      	bls.n	8005cae <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005c94:	1dfb      	adds	r3, r7, #7
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fe fd25 	bl	80046e8 <pszTraceGetErrorNotEnoughHandles>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 f991 	bl	8005fc8 <prvTraceError>
		handle = 0;
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	e031      	b.n	8005d12 <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005cae:	1dfb      	adds	r3, r7, #7
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4a22      	ldr	r2, [pc, #136]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005cb4:	0059      	lsls	r1, r3, #1
 8005cb6:	5a8a      	ldrh	r2, [r1, r2]
 8005cb8:	3201      	adds	r2, #1
 8005cba:	b291      	uxth	r1, r2
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005cc2:	1dfb      	adds	r3, r7, #7
 8005cc4:	781a      	ldrb	r2, [r3, #0]
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005cc8:	0052      	lsls	r2, r2, #1
 8005cca:	5ad3      	ldrh	r3, [r2, r3]
 8005ccc:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005cce:	1dfb      	adds	r3, r7, #7
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	18d3      	adds	r3, r2, r3
 8005cda:	3302      	adds	r3, #2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8005cde:	1acb      	subs	r3, r1, r3
 8005ce0:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8005ce2:	1dfb      	adds	r3, r7, #7
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005ce8:	3318      	adds	r3, #24
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	18d3      	adds	r3, r2, r3
 8005cee:	3306      	adds	r3, #6
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	001a      	movs	r2, r3
		if (hndCount >
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	dd0b      	ble.n	8005d12 <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005cfe:	1dfb      	adds	r3, r7, #7
 8005d00:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8005d02:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005d04:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <prvTraceGetObjectHandle+0x158>)
 8005d06:	3318      	adds	r3, #24
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	18d3      	adds	r3, r2, r3
 8005d0c:	3306      	adds	r3, #6
 8005d0e:	1c0a      	adds	r2, r1, #0
 8005d10:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8005d12:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <prvTraceGetObjectHandle+0x154>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <prvTraceGetObjectHandle+0x154>)
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			@ (mov r8, r8)

	return handle;
 8005d28:	231f      	movs	r3, #31
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b009      	add	sp, #36	@ 0x24
 8005d34:	bd90      	pop	{r4, r7, pc}
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	200019b4 	.word	0x200019b4
 8005d3c:	200019cc 	.word	0x200019cc
 8005d40:	20002e00 	.word	0x20002e00

08005d44 <prvTraceFreeObjectHandle>:

void prvTraceFreeObjectHandle(traceObjectClass objectclass, traceHandle handle)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	1dfb      	adds	r3, r7, #7
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	1dbb      	adds	r3, r7, #6
 8005d52:	1c0a      	adds	r2, r1, #0
 8005d54:	701a      	strb	r2, [r3, #0]
		"prvTraceFreeObjectHandle: Invalid value for objectclass", TRC_UNUSED);
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"prvTraceFreeObjectHandle: Invalid value for handle", TRC_UNUSED);

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 8005d56:	1dfb      	adds	r3, r7, #7
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	4b17      	ldr	r3, [pc, #92]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	5ad2      	ldrh	r2, [r2, r3]
		objectHandleStacks.lowestIndexOfClass[objectclass])
 8005d60:	1dfb      	adds	r3, r7, #7
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4914      	ldr	r1, [pc, #80]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005d66:	3308      	adds	r3, #8
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	18cb      	adds	r3, r1, r3
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d804      	bhi.n	8005d7e <prvTraceFreeObjectHandle+0x3a>
	{
		/* Error */
		prvTraceError("Attempt to free more handles than allocated!");
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <prvTraceFreeObjectHandle+0x78>)
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f926 	bl	8005fc8 <prvTraceError>
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
	}
}
 8005d7c:	e017      	b.n	8005dae <prvTraceFreeObjectHandle+0x6a>
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
 8005d7e:	1dfb      	adds	r3, r7, #7
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	4a0d      	ldr	r2, [pc, #52]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005d84:	0059      	lsls	r1, r3, #1
 8005d86:	5a8a      	ldrh	r2, [r1, r2]
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	b291      	uxth	r1, r2
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	5299      	strh	r1, [r3, r2]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8005d92:	1dfb      	adds	r3, r7, #7
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	4b08      	ldr	r3, [pc, #32]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005d98:	0052      	lsls	r2, r2, #1
 8005d9a:	5ad3      	ldrh	r3, [r2, r3]
 8005d9c:	60fb      	str	r3, [r7, #12]
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
 8005d9e:	4a06      	ldr	r2, [pc, #24]	@ (8005db8 <prvTraceFreeObjectHandle+0x74>)
 8005da0:	2148      	movs	r1, #72	@ 0x48
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	185b      	adds	r3, r3, r1
 8005da8:	1dba      	adds	r2, r7, #6
 8005daa:	7812      	ldrb	r2, [r2, #0]
 8005dac:	701a      	strb	r2, [r3, #0]
}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	200019cc 	.word	0x200019cc
 8005dbc:	080077e4 	.word	0x080077e4

08005dc0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	1dfb      	adds	r3, r7, #7
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	1dbb      	adds	r3, r7, #6
 8005dce:	1c0a      	adds	r2, r1, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8005dd2:	250e      	movs	r5, #14
 8005dd4:	197c      	adds	r4, r7, r5
 8005dd6:	1dfb      	adds	r3, r7, #7
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	1dbb      	adds	r3, r7, #6
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	0011      	movs	r1, r2
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff feb5 	bl	8005b50 <uiIndexOfObject>
 8005de6:	0003      	movs	r3, r0
 8005de8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <prvMarkObjectAsUsed+0x44>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	197b      	adds	r3, r7, r5
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2188      	movs	r1, #136	@ 0x88
 8005df4:	18d3      	adds	r3, r2, r3
 8005df6:	185b      	adds	r3, r3, r1
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
}
 8005dfc:	46c0      	nop			@ (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bdb0      	pop	{r4, r5, r7, pc}
 8005e04:	20002df8 	.word	0x20002df8

08005e08 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e010      	b.n	8005e3c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	18d2      	adds	r2, r2, r3
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	18cb      	adds	r3, r1, r3
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d3ea      	bcc.n	8005e1a <prvStrncpy+0x12>
			break;
	}
}
 8005e44:	e000      	b.n	8005e48 <prvStrncpy+0x40>
			break;
 8005e46:	46c0      	nop			@ (mov r8, r8)
}
 8005e48:	46c0      	nop			@ (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b006      	add	sp, #24
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	603a      	str	r2, [r7, #0]
 8005e58:	1dfb      	adds	r3, r7, #7
 8005e5a:	1c02      	adds	r2, r0, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	1dbb      	adds	r3, r7, #6
 8005e60:	1c0a      	adds	r2, r1, #0
 8005e62:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8005e6a:	4b28      	ldr	r3, [pc, #160]	@ (8005f0c <prvTraceSetObjectName+0xbc>)
 8005e6c:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8005e6e:	1dfb      	adds	r3, r7, #7
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d904      	bls.n	8005e80 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005e76:	4b26      	ldr	r3, [pc, #152]	@ (8005f10 <prvTraceSetObjectName+0xc0>)
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f8a5 	bl	8005fc8 <prvTraceError>
		return;
 8005e7e:	e041      	b.n	8005f04 <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8005e80:	1dbb      	adds	r3, r7, #6
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8005e88:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <prvTraceSetObjectName+0xc4>)
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f89c 	bl	8005fc8 <prvTraceError>
		return;
 8005e90:	e038      	b.n	8005f04 <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8005e92:	4b21      	ldr	r3, [pc, #132]	@ (8005f18 <prvTraceSetObjectName+0xc8>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	1dfb      	adds	r3, r7, #7
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2150      	movs	r1, #80	@ 0x50
 8005e9c:	18d3      	adds	r3, r2, r3
 8005e9e:	185b      	adds	r3, r3, r1
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	1dba      	adds	r2, r7, #6
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d909      	bls.n	8005ebe <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005eaa:	1dfb      	adds	r3, r7, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7fe fc1a 	bl	80046e8 <pszTraceGetErrorNotEnoughHandles>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 f886 	bl	8005fc8 <prvTraceError>
 8005ebc:	e022      	b.n	8005f04 <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	1dbb      	adds	r3, r7, #6
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7ff fe41 	bl	8005b50 <uiIndexOfObject>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <prvTraceSetObjectName+0xcc>)
 8005ed4:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <prvTraceSetObjectName+0xd0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d112      	bne.n	8005f04 <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005ede:	4b0e      	ldr	r3, [pc, #56]	@ (8005f18 <prvTraceSetObjectName+0xc8>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <prvTraceSetObjectName+0xcc>)
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	3388      	adds	r3, #136	@ 0x88
 8005ee8:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005eea:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <prvTraceSetObjectName+0xc8>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	1dfb      	adds	r3, r7, #7
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	215c      	movs	r1, #92	@ 0x5c
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	185b      	adds	r3, r3, r1
 8005ef8:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005efa:	001a      	movs	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	0019      	movs	r1, r3
 8005f00:	f7ff ff82 	bl	8005e08 <prvStrncpy>
		}
	}
}
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b002      	add	sp, #8
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	08007814 	.word	0x08007814
 8005f10:	08007818 	.word	0x08007818
 8005f14:	08007848 	.word	0x08007848
 8005f18:	20002df8 	.word	0x20002df8
 8005f1c:	20002e04 	.word	0x20002e04
 8005f20:	20001a30 	.word	0x20001a30

08005f24 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b089      	sub	sp, #36	@ 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8005f2e:	240b      	movs	r4, #11
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
	crc = 0;
 8005f36:	250a      	movs	r5, #10
 8005f38:	197b      	adds	r3, r7, r5
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 8005f3e:	193a      	adds	r2, r7, r4
 8005f40:	1979      	adds	r1, r7, r5
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 fb67 	bl	8006618 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f4e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f50:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f383 8810 	msr	PRIMASK, r3
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <prvTraceOpenSymbol+0xa0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	4b17      	ldr	r3, [pc, #92]	@ (8005fc4 <prvTraceOpenSymbol+0xa0>)
 8005f68:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8005f6a:	197b      	adds	r3, r7, r5
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	193b      	adds	r3, r7, r4
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f9f1 	bl	800635c <prvTraceLookupSymbolTableEntry>
 8005f7a:	0002      	movs	r2, r0
 8005f7c:	261e      	movs	r6, #30
 8005f7e:	19bb      	adds	r3, r7, r6
 8005f80:	801a      	strh	r2, [r3, #0]
	if (!result)
 8005f82:	19bb      	adds	r3, r7, r6
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8005f8a:	197b      	adds	r3, r7, r5
 8005f8c:	7819      	ldrb	r1, [r3, #0]
 8005f8e:	193b      	adds	r3, r7, r4
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa6b 	bl	8006470 <prvTraceCreateSymbolTableEntry>
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	19bb      	adds	r3, r7, r6
 8005f9e:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 8005fa0:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <prvTraceOpenSymbol+0xa0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	4b07      	ldr	r3, [pc, #28]	@ (8005fc4 <prvTraceOpenSymbol+0xa0>)
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f383 8810 	msr	PRIMASK, r3
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)

	return result;
 8005fb6:	231e      	movs	r3, #30
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	881b      	ldrh	r3, [r3, #0]
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b009      	add	sp, #36	@ 0x24
 8005fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc4:	200019b4 	.word	0x200019b4

08005fc8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8005fd0:	4b12      	ldr	r3, [pc, #72]	@ (800601c <prvTraceError+0x54>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <prvTraceError+0x14>
	{
		xTraceDisable();
 8005fd8:	f7fe fbf8 	bl	80047cc <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8005fdc:	4b10      	ldr	r3, [pc, #64]	@ (8006020 <prvTraceError+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d117      	bne.n	8006014 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <prvTraceError+0x58>)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <prvTraceError+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d010      	beq.n	8006014 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <prvTraceError+0x54>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	22f0      	movs	r2, #240	@ 0xf0
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	1898      	adds	r0, r3, r2
 8005ffc:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <prvTraceError+0x58>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2250      	movs	r2, #80	@ 0x50
 8006002:	0019      	movs	r1, r3
 8006004:	f7ff ff00 	bl	8005e08 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8006008:	4b04      	ldr	r3, [pc, #16]	@ (800601c <prvTraceError+0x54>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	23ee      	movs	r3, #238	@ 0xee
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	2101      	movs	r1, #1
 8006012:	50d1      	str	r1, [r2, r3]
		}
	}
}
 8006014:	46c0      	nop			@ (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20002df8 	.word	0x20002df8
 8006020:	20001a30 	.word	0x20001a30

08006024 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	0002      	movs	r2, r0
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8006038:	e080      	b.n	800613c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 800603a:	4b46      	ldr	r3, [pc, #280]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	18d3      	adds	r3, r2, r3
 8006044:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8006046:	4b43      	ldr	r3, [pc, #268]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4942      	ldr	r1, [pc, #264]	@ (8006158 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	185b      	adds	r3, r3, r1
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b98      	cmp	r3, #152	@ 0x98
 8006058:	d931      	bls.n	80060be <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800605a:	4b3e      	ldr	r3, [pc, #248]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	493d      	ldr	r1, [pc, #244]	@ (8006158 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	185b      	adds	r3, r3, r1
 8006068:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800606a:	2ba7      	cmp	r3, #167	@ 0xa7
 800606c:	d827      	bhi.n	80060be <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800606e:	4b39      	ldr	r3, [pc, #228]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4938      	ldr	r1, [pc, #224]	@ (8006158 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006078:	18d3      	adds	r3, r2, r3
 800607a:	185b      	adds	r3, r3, r1
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	210f      	movs	r1, #15
 8006080:	187b      	adds	r3, r7, r1
 8006082:	3268      	adds	r2, #104	@ 0x68
 8006084:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8006086:	187b      	adds	r3, r7, r1
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	18d2      	adds	r2, r2, r3
 800608e:	4b31      	ldr	r3, [pc, #196]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	d24d      	bcs.n	8006134 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8006098:	4b2e      	ldr	r3, [pc, #184]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	2082      	movs	r0, #130	@ 0x82
 80060a2:	00c0      	lsls	r0, r0, #3
 80060a4:	4684      	mov	ip, r0
 80060a6:	4463      	add	r3, ip
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	1d18      	adds	r0, r3, #4
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	001a      	movs	r2, r3
 80060b6:	2100      	movs	r1, #0
 80060b8:	f001 f888 	bl	80071cc <memset>
		{
 80060bc:	e03a      	b.n	8006134 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 80060be:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4924      	ldr	r1, [pc, #144]	@ (8006158 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80060c8:	18d3      	adds	r3, r2, r3
 80060ca:	185b      	adds	r3, r3, r1
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d131      	bne.n	8006136 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d20f      	bcs.n	8006100 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80060e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	2182      	movs	r1, #130	@ 0x82
 80060ea:	00c9      	lsls	r1, r1, #3
 80060ec:	468c      	mov	ip, r1
 80060ee:	4463      	add	r3, ip
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	3304      	adds	r3, #4
 80060f4:	2208      	movs	r2, #8
 80060f6:	2100      	movs	r1, #0
 80060f8:	0018      	movs	r0, r3
 80060fa:	f001 f867 	bl	80071cc <memset>
 80060fe:	e01a      	b.n	8006136 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8006100:	4b14      	ldr	r3, [pc, #80]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006106:	4694      	mov	ip, r2
 8006108:	4463      	add	r3, ip
 800610a:	2204      	movs	r2, #4
 800610c:	2100      	movs	r1, #0
 800610e:	0018      	movs	r0, r3
 8006110:	f001 f85c 	bl	80071cc <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8006114:	4b0f      	ldr	r3, [pc, #60]	@ (8006154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	2182      	movs	r1, #130	@ 0x82
 800611e:	00c9      	lsls	r1, r1, #3
 8006120:	468c      	mov	ip, r1
 8006122:	4463      	add	r3, ip
 8006124:	18d3      	adds	r3, r2, r3
 8006126:	3304      	adds	r3, #4
 8006128:	2204      	movs	r2, #4
 800612a:	2100      	movs	r1, #0
 800612c:	0018      	movs	r0, r3
 800612e:	f001 f84d 	bl	80071cc <memset>
 8006132:	e000      	b.n	8006136 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 8006134:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	3301      	adds	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 800613c:	1dfb      	adds	r3, r7, #7
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	429a      	cmp	r2, r3
 8006144:	d200      	bcs.n	8006148 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 8006146:	e778      	b.n	800603a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 8006148:	46c0      	nop			@ (mov r8, r8)
 800614a:	46c0      	nop			@ (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b006      	add	sp, #24
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	20002df8 	.word	0x20002df8
 8006158:	00000414 	.word	0x00000414

0800615c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8006160:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01c      	beq.n	80061a4 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800616a:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	3201      	adds	r2, #1
 8006172:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8006174:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	3201      	adds	r2, #1
 800617c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	23fa      	movs	r3, #250	@ 0xfa
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	429a      	cmp	r2, r3
 800618a:	d307      	bcc.n	800619c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2201      	movs	r2, #1
 8006192:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <prvTraceUpdateCounters+0x50>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800619c:	2001      	movs	r0, #1
 800619e:	f7ff ff41 	bl	8006024 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80061a2:	e000      	b.n	80061a6 <prvTraceUpdateCounters+0x4a>
		return;
 80061a4:	46c0      	nop			@ (mov r8, r8)
#endif
}
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	20002df8 	.word	0x20002df8

080061b0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	0002      	movs	r2, r0
 80061b8:	1dbb      	adds	r3, r7, #6
 80061ba:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 80061c8:	4b5c      	ldr	r3, [pc, #368]	@ (800633c <prvTraceGetDTS+0x18c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 80061d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006340 <prvTraceGetDTS+0x190>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 80061da:	4b59      	ldr	r3, [pc, #356]	@ (8006340 <prvTraceGetDTS+0x190>)
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b57      	ldr	r3, [pc, #348]	@ (800633c <prvTraceGetDTS+0x18c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	0892      	lsrs	r2, r2, #2
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80061e6:	e00b      	b.n	8006200 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80061e8:	4b56      	ldr	r3, [pc, #344]	@ (8006344 <prvTraceGetDTS+0x194>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b56      	ldr	r3, [pc, #344]	@ (8006348 <prvTraceGetDTS+0x198>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d005      	beq.n	8006200 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80061f4:	4b55      	ldr	r3, [pc, #340]	@ (800634c <prvTraceGetDTS+0x19c>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b50      	ldr	r3, [pc, #320]	@ (800633c <prvTraceGetDTS+0x18c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	0892      	lsrs	r2, r2, #2
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8006200:	230c      	movs	r3, #12
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	0018      	movs	r0, r3
 8006206:	f000 fa39 	bl	800667c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4b50      	ldr	r3, [pc, #320]	@ (8006350 <prvTraceGetDTS+0x1a0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4b4e      	ldr	r3, [pc, #312]	@ (8006350 <prvTraceGetDTS+0x1a0>)
 8006218:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 800621a:	4b48      	ldr	r3, [pc, #288]	@ (800633c <prvTraceGetDTS+0x18c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d047      	beq.n	80062b4 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8006224:	4b45      	ldr	r3, [pc, #276]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	429a      	cmp	r2, r3
 800622e:	d921      	bls.n	8006274 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8006230:	4b42      	ldr	r3, [pc, #264]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006236:	4b41      	ldr	r3, [pc, #260]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	0019      	movs	r1, r3
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f7f9 ff62 	bl	8000108 <__udivsi3>
 8006244:	0003      	movs	r3, r0
 8006246:	001a      	movs	r2, r3
 8006248:	4b3c      	ldr	r3, [pc, #240]	@ (800633c <prvTraceGetDTS+0x18c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	18a2      	adds	r2, r4, r2
 800624e:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8006250:	4b3a      	ldr	r3, [pc, #232]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006256:	4b39      	ldr	r3, [pc, #228]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	0011      	movs	r1, r2
 8006260:	0018      	movs	r0, r3
 8006262:	f7f9 ffd7 	bl	8000214 <__aeabi_uidivmod>
 8006266:	000b      	movs	r3, r1
 8006268:	001a      	movs	r2, r3
 800626a:	4b34      	ldr	r3, [pc, #208]	@ (800633c <prvTraceGetDTS+0x18c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	18a2      	adds	r2, r4, r2
 8006270:	629a      	str	r2, [r3, #40]	@ 0x28
 8006272:	e007      	b.n	8006284 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8006274:	4b31      	ldr	r3, [pc, #196]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800627a:	4b30      	ldr	r3, [pc, #192]	@ (800633c <prvTraceGetDTS+0x18c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	188a      	adds	r2, r1, r2
 8006282:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8006284:	4b2d      	ldr	r3, [pc, #180]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800628a:	4b2c      	ldr	r3, [pc, #176]	@ (800633c <prvTraceGetDTS+0x18c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	429a      	cmp	r2, r3
 8006292:	d313      	bcc.n	80062bc <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8006294:	4b29      	ldr	r3, [pc, #164]	@ (800633c <prvTraceGetDTS+0x18c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629a:	3201      	adds	r2, #1
 800629c:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800629e:	4b27      	ldr	r3, [pc, #156]	@ (800633c <prvTraceGetDTS+0x18c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80062a4:	4b25      	ldr	r3, [pc, #148]	@ (800633c <prvTraceGetDTS+0x18c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062aa:	4b24      	ldr	r3, [pc, #144]	@ (800633c <prvTraceGetDTS+0x18c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1a8a      	subs	r2, r1, r2
 80062b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80062b2:	e003      	b.n	80062bc <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80062b4:	4b21      	ldr	r3, [pc, #132]	@ (800633c <prvTraceGetDTS+0x18c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 80062bc:	1dbb      	adds	r3, r7, #6
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d92f      	bls.n	8006326 <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80062c6:	f7ff fc19 	bl	8005afc <prvTraceNextFreeEventBufferSlot>
 80062ca:	0003      	movs	r3, r0
 80062cc:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d028      	beq.n	8006326 <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 80062d4:	1dbb      	adds	r3, r7, #6
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006354 <prvTraceGetDTS+0x1a4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10b      	bne.n	80062f6 <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	22a9      	movs	r2, #169	@ 0xa9
 80062e2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	0c1b      	lsrs	r3, r3, #16
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	705a      	strb	r2, [r3, #1]
 80062f4:	e015      	b.n	8006322 <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 80062f6:	1dbb      	adds	r3, r7, #6
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	2bff      	cmp	r3, #255	@ 0xff
 80062fc:	d10d      	bne.n	800631a <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	22a8      	movs	r2, #168	@ 0xa8
 8006302:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b29a      	uxth	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	0e1b      	lsrs	r3, r3, #24
 8006312:	b2da      	uxtb	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	705a      	strb	r2, [r3, #1]
 8006318:	e003      	b.n	8006322 <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800631a:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <prvTraceGetDTS+0x1a8>)
 800631c:	0018      	movs	r0, r3
 800631e:	f7ff fe53 	bl	8005fc8 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8006322:	f7ff ff1b 	bl	800615c <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	b29b      	uxth	r3, r3
 800632a:	1dba      	adds	r2, r7, #6
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	4013      	ands	r3, r2
 8006330:	b29b      	uxth	r3, r3
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b007      	add	sp, #28
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	20002df8 	.word	0x20002df8
 8006340:	200019b8 	.word	0x200019b8
 8006344:	e000e018 	.word	0xe000e018
 8006348:	200019c4 	.word	0x200019c4
 800634c:	20000014 	.word	0x20000014
 8006350:	20002e08 	.word	0x20002e08
 8006354:	0000ffff 	.word	0x0000ffff
 8006358:	08007878 	.word	0x08007878

0800635c <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	0008      	movs	r0, r1
 8006366:	0011      	movs	r1, r2
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	240b      	movs	r4, #11
 800636c:	193b      	adds	r3, r7, r4
 800636e:	1c02      	adds	r2, r0, #0
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	230a      	movs	r3, #10
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	1c0a      	adds	r2, r1, #0
 8006378:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 800637a:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	193b      	adds	r3, r7, r4
 8006380:	781a      	ldrb	r2, [r3, #0]
 8006382:	2316      	movs	r3, #22
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	3299      	adds	r2, #153	@ 0x99
 8006388:	32ff      	adds	r2, #255	@ 0xff
 800638a:	0052      	lsls	r2, r2, #1
 800638c:	188a      	adds	r2, r1, r2
 800638e:	3204      	adds	r2, #4
 8006390:	8812      	ldrh	r2, [r2, #0]
 8006392:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8006394:	e05c      	b.n	8006450 <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8006396:	4b35      	ldr	r3, [pc, #212]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	2016      	movs	r0, #22
 800639c:	183b      	adds	r3, r7, r0
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	239b      	movs	r3, #155	@ 0x9b
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	188a      	adds	r2, r1, r2
 80063a8:	18d3      	adds	r3, r2, r3
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	22ff      	movs	r2, #255	@ 0xff
 80063b2:	4013      	ands	r3, r2
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d131      	bne.n	800641c <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 80063b8:	4b2c      	ldr	r3, [pc, #176]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	183b      	adds	r3, r7, r0
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	1cda      	adds	r2, r3, #3
 80063c2:	239b      	movs	r3, #155	@ 0x9b
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	188a      	adds	r2, r1, r2
 80063c8:	18d3      	adds	r3, r2, r3
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	001a      	movs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	0a1b      	lsrs	r3, r3, #8
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d122      	bne.n	800641c <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 80063d6:	4b25      	ldr	r3, [pc, #148]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	183b      	adds	r3, r7, r0
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	240a      	movs	r4, #10
 80063e2:	193b      	adds	r3, r7, r4
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	18d2      	adds	r2, r2, r3
 80063e8:	239b      	movs	r3, #155	@ 0x9b
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	188a      	adds	r2, r1, r2
 80063ee:	18d3      	adds	r3, r2, r3
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d112      	bne.n	800641c <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80063f6:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	183b      	adds	r3, r7, r0
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	3304      	adds	r3, #4
 8006400:	219a      	movs	r1, #154	@ 0x9a
 8006402:	0089      	lsls	r1, r1, #2
 8006404:	468c      	mov	ip, r1
 8006406:	4463      	add	r3, ip
 8006408:	18d3      	adds	r3, r2, r3
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	193b      	adds	r3, r7, r4
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	0019      	movs	r1, r3
 8006414:	f000 fee2 	bl	80071dc <strncmp>
 8006418:	1e03      	subs	r3, r0, #0
 800641a:	d01f      	beq.n	800645c <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 800641c:	4b13      	ldr	r3, [pc, #76]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	2416      	movs	r4, #22
 8006422:	193b      	adds	r3, r7, r4
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	239b      	movs	r3, #155	@ 0x9b
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	188a      	adds	r2, r1, r2
 800642c:	18d3      	adds	r3, r2, r3
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	0018      	movs	r0, r3
 8006432:	4b0e      	ldr	r3, [pc, #56]	@ (800646c <prvTraceLookupSymbolTableEntry+0x110>)
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	193b      	adds	r3, r7, r4
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	239b      	movs	r3, #155	@ 0x9b
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	188a      	adds	r2, r1, r2
 8006442:	18d3      	adds	r3, r2, r3
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	b29a      	uxth	r2, r3
 800644a:	193b      	adds	r3, r7, r4
 800644c:	1882      	adds	r2, r0, r2
 800644e:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 8006450:	2316      	movs	r3, #22
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d19d      	bne.n	8006396 <prvTraceLookupSymbolTableEntry+0x3a>
 800645a:	e000      	b.n	800645e <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 800645c:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 800645e:	2316      	movs	r3, #22
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	881b      	ldrh	r3, [r3, #0]
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	b007      	add	sp, #28
 800646a:	bd90      	pop	{r4, r7, pc}
 800646c:	20002df8 	.word	0x20002df8

08006470 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	0008      	movs	r0, r1
 800647a:	0011      	movs	r1, r2
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	230b      	movs	r3, #11
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	1c02      	adds	r2, r0, #0
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	200a      	movs	r0, #10
 8006488:	183b      	adds	r3, r7, r0
 800648a:	1c0a      	adds	r2, r1, #0
 800648c:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8006492:	4b5f      	ldr	r3, [pc, #380]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	239a      	movs	r3, #154	@ 0x9a
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	58d2      	ldr	r2, [r2, r3]
 800649c:	183b      	adds	r3, r7, r0
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	3304      	adds	r3, #4
 80064a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80064a6:	d906      	bls.n	80064b6 <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 80064a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006614 <prvTraceCreateSymbolTableEntry+0x1a4>)
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff fd8c 	bl	8005fc8 <prvTraceError>
		ret = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e0a7      	b.n	8006606 <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80064b6:	4b56      	ldr	r3, [pc, #344]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	250b      	movs	r5, #11
 80064bc:	197b      	adds	r3, r7, r5
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	3399      	adds	r3, #153	@ 0x99
 80064c2:	33ff      	adds	r3, #255	@ 0xff
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	18d3      	adds	r3, r2, r3
 80064c8:	3304      	adds	r3, #4
 80064ca:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 80064cc:	4b50      	ldr	r3, [pc, #320]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80064ce:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80064d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	239a      	movs	r3, #154	@ 0x9a
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80064da:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80064dc:	239b      	movs	r3, #155	@ 0x9b
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	188a      	adds	r2, r1, r2
 80064e2:	18d3      	adds	r3, r2, r3
 80064e4:	1c02      	adds	r2, r0, #0
 80064e6:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80064e8:	4b49      	ldr	r3, [pc, #292]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	197b      	adds	r3, r7, r5
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	3399      	adds	r3, #153	@ 0x99
 80064f2:	33ff      	adds	r3, #255	@ 0xff
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	18d3      	adds	r3, r2, r3
 80064f8:	3304      	adds	r3, #4
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 8006500:	4b43      	ldr	r3, [pc, #268]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006502:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8006504:	4b42      	ldr	r3, [pc, #264]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	239a      	movs	r3, #154	@ 0x9a
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	58d3      	ldr	r3, [r2, r3]
 800650e:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8006510:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8006512:	239b      	movs	r3, #155	@ 0x9b
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	188a      	adds	r2, r1, r2
 8006518:	18d3      	adds	r3, r2, r3
 800651a:	1c02      	adds	r2, r0, #0
 800651c:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 800651e:	4b3c      	ldr	r3, [pc, #240]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006520:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8006522:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	239a      	movs	r3, #154	@ 0x9a
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	58d3      	ldr	r3, [r2, r3]
 800652c:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8006532:	239b      	movs	r3, #155	@ 0x9b
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	188a      	adds	r2, r1, r2
 8006538:	18d3      	adds	r3, r2, r3
 800653a:	1c02      	adds	r2, r0, #0
 800653c:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 8006542:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006544:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8006546:	4b32      	ldr	r3, [pc, #200]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	239a      	movs	r3, #154	@ 0x9a
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	58d3      	ldr	r3, [r2, r3]
 8006550:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 8006552:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8006554:	239b      	movs	r3, #155	@ 0x9b
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	188a      	adds	r2, r1, r2
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	1c02      	adds	r2, r0, #0
 800655e:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8006560:	4b2b      	ldr	r3, [pc, #172]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006562:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8006564:	4b2a      	ldr	r3, [pc, #168]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006566:	6819      	ldr	r1, [r3, #0]
 8006568:	239a      	movs	r3, #154	@ 0x9a
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	58cb      	ldr	r3, [r1, r3]
 800656e:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8006570:	219a      	movs	r1, #154	@ 0x9a
 8006572:	0089      	lsls	r1, r1, #2
 8006574:	468c      	mov	ip, r1
 8006576:	4463      	add	r3, ip
 8006578:	18d3      	adds	r3, r2, r3
 800657a:	1d18      	adds	r0, r3, #4
 800657c:	240a      	movs	r4, #10
 800657e:	193b      	adds	r3, r7, r4
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	0019      	movs	r1, r3
 8006586:	f7ff fc3f 	bl	8005e08 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 800658a:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 800658c:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800658e:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	239a      	movs	r3, #154	@ 0x9a
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	58d2      	ldr	r2, [r2, r3]
 8006598:	0020      	movs	r0, r4
 800659a:	183b      	adds	r3, r7, r0
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	18d3      	adds	r3, r2, r3
 80065a0:	1d1a      	adds	r2, r3, #4
 80065a2:	239b      	movs	r3, #155	@ 0x9b
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	188a      	adds	r2, r1, r2
 80065a8:	18d3      	adds	r3, r2, r3
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 80065ae:	4b18      	ldr	r3, [pc, #96]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	239a      	movs	r3, #154	@ 0x9a
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80065ba:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 80065bc:	197b      	adds	r3, r7, r5
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	b289      	uxth	r1, r1
 80065c2:	3399      	adds	r3, #153	@ 0x99
 80065c4:	33ff      	adds	r3, #255	@ 0xff
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	18d3      	adds	r3, r2, r3
 80065ca:	3304      	adds	r3, #4
 80065cc:	1c0a      	adds	r2, r1, #0
 80065ce:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 80065d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	239a      	movs	r3, #154	@ 0x9a
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	58d2      	ldr	r2, [r2, r3]
 80065da:	183b      	adds	r3, r7, r0
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	18d1      	adds	r1, r2, r3
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	3105      	adds	r1, #5
 80065e6:	239a      	movs	r3, #154	@ 0x9a
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 80065ec:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	239a      	movs	r3, #154	@ 0x9a
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	58d3      	ldr	r3, [r2, r3]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	183a      	adds	r2, r7, r0
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	3205      	adds	r2, #5
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b006      	add	sp, #24
 800660e:	bdb0      	pop	{r4, r5, r7, pc}
 8006610:	20002df8 	.word	0x20002df8
 8006614:	0800789c 	.word	0x0800789c

08006618 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8006624:	2301      	movs	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8006632:	e008      	b.n	8006646 <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8006634:	2317      	movs	r3, #23
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	18d3      	adds	r3, r2, r3
 800663e:	61bb      	str	r3, [r7, #24]
			length++;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3301      	adds	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	60fa      	str	r2, [r7, #12]
 800664c:	2117      	movs	r1, #23
 800664e:	187a      	adds	r2, r7, r1
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	7013      	strb	r3, [r2, #0]
 8006654:	187b      	adds	r3, r7, r1
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1eb      	bne.n	8006634 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	223f      	movs	r2, #63	@ 0x3f
 8006662:	4013      	ands	r3, r2
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	701a      	strb	r2, [r3, #0]
}
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	46bd      	mov	sp, r7
 8006676:	b008      	add	sp, #32
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 800668c:	4b2d      	ldr	r3, [pc, #180]	@ (8006744 <prvTracePortGetTimeStamp+0xc8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04f      	beq.n	800673a <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 800669a:	4b2b      	ldr	r3, [pc, #172]	@ (8006748 <prvTracePortGetTimeStamp+0xcc>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	601a      	str	r2, [r3, #0]
		return;
 80066a2:	e04a      	b.n	800673a <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 80066a4:	4b29      	ldr	r3, [pc, #164]	@ (800674c <prvTracePortGetTimeStamp+0xd0>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b29      	ldr	r3, [pc, #164]	@ (8006750 <prvTracePortGetTimeStamp+0xd4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	3301      	adds	r3, #1
 80066b0:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 80066b2:	4b28      	ldr	r3, [pc, #160]	@ (8006754 <prvTracePortGetTimeStamp+0xd8>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b28      	ldr	r3, [pc, #160]	@ (8006758 <prvTracePortGetTimeStamp+0xdc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	db03      	blt.n	80066ca <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 80066c2:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <prvTracePortGetTimeStamp+0xd8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e002      	b.n	80066d0 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 80066ca:	4b23      	ldr	r3, [pc, #140]	@ (8006758 <prvTracePortGetTimeStamp+0xdc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 80066d0:	4b20      	ldr	r3, [pc, #128]	@ (8006754 <prvTracePortGetTimeStamp+0xd8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d107      	bne.n	80066ea <prvTracePortGetTimeStamp+0x6e>
 80066da:	4b20      	ldr	r3, [pc, #128]	@ (800675c <prvTracePortGetTimeStamp+0xe0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d202      	bcs.n	80066ea <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d016      	beq.n	800671e <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 80066f0:	4b16      	ldr	r3, [pc, #88]	@ (800674c <prvTracePortGetTimeStamp+0xd0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	435a      	muls	r2, r3
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <prvTracePortGetTimeStamp+0xcc>)
 80066fe:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8006700:	4b12      	ldr	r3, [pc, #72]	@ (800674c <prvTracePortGetTimeStamp+0xd0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	2203      	movs	r2, #3
 8006708:	4013      	ands	r3, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	435a      	muls	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	18d3      	adds	r3, r2, r3
 8006712:	089a      	lsrs	r2, r3, #2
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvTracePortGetTimeStamp+0xcc>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	18d2      	adds	r2, r2, r3
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <prvTracePortGetTimeStamp+0xcc>)
 800671c:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <prvTracePortGetTimeStamp+0xd8>)
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <prvTracePortGetTimeStamp+0xcc>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <prvTracePortGetTimeStamp+0xe0>)
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e000      	b.n	800673c <prvTracePortGetTimeStamp+0xc0>
		return;
 800673a:	46c0      	nop			@ (mov r8, r8)
}
 800673c:	46bd      	mov	sp, r7
 800673e:	b004      	add	sp, #16
 8006740:	bd80      	pop	{r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	200019a8 	.word	0x200019a8
 8006748:	200019ac 	.word	0x200019ac
 800674c:	e000e014 	.word	0xe000e014
 8006750:	e000e018 	.word	0xe000e018
 8006754:	20002e0c 	.word	0x20002e0c
 8006758:	200019a4 	.word	0x200019a4
 800675c:	20002e10 	.word	0x20002e10

08006760 <main>:
// Define the message_t type as an array of 64 char
typedef uint8_t msg_t[64];

// Main function
int main()
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b083      	sub	sp, #12
 8006764:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8006766:	f000 f86b 	bl	8006840 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 800676a:	f000 fb6f 	bl	8006e4c <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 800676e:	f000 fbc7 	bl	8006f00 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8006772:	f000 fc13 	bl	8006f9c <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8006776:	4b26      	ldr	r3, [pc, #152]	@ (8006810 <main+0xb0>)
 8006778:	0018      	movs	r0, r3
 800677a:	f000 fb21 	bl	8006dc0 <my_printf>

	// Initialize NVIC
	//BSP_NVIC_Init();

	// Start Trace Recording
	xTraceEnable(TRC_START);		// vTraceEnable(TRC_START);
 800677e:	2001      	movs	r0, #1
 8006780:	f7fd ffee 	bl	8004760 <xTraceEnable>

	// Create Event Group                   // <-- Create Event Group here
	myEventGroup = xEventGroupCreate();
 8006784:	f7fa fac8 	bl	8000d18 <xEventGroupCreate>
 8006788:	0002      	movs	r2, r0
 800678a:	4b22      	ldr	r3, [pc, #136]	@ (8006814 <main+0xb4>)
 800678c:	601a      	str	r2, [r3, #0]

	// Create Timer object
	my_timer = xTimerCreate("my_timer", 200, pdTRUE, NULL, vTaskTimer);
 800678e:	4822      	ldr	r0, [pc, #136]	@ (8006818 <main+0xb8>)
 8006790:	4b22      	ldr	r3, [pc, #136]	@ (800681c <main+0xbc>)
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	2201      	movs	r2, #1
 8006798:	21c8      	movs	r1, #200	@ 0xc8
 800679a:	f7fc fe85 	bl	80034a8 <xTimerCreate>
 800679e:	0002      	movs	r2, r0
 80067a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006820 <main+0xc0>)
 80067a2:	601a      	str	r2, [r3, #0]
	// Start Timer
	xTimerStart(my_timer, 0);
 80067a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006820 <main+0xc0>)
 80067a6:	681c      	ldr	r4, [r3, #0]
 80067a8:	f7fc f8e8 	bl	800297c <xTaskGetTickCount>
 80067ac:	0002      	movs	r2, r0
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	2101      	movs	r1, #1
 80067b6:	0020      	movs	r0, r4
 80067b8:	f7fc ff1a 	bl	80035f0 <xTimerGenericCommand>
	ticks = xTimerGetExpiryTime(my_timer);
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <main+0xc0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f7fd f83b 	bl	800383c <xTimerGetExpiryTime>
 80067c6:	0002      	movs	r2, r0
 80067c8:	4b16      	ldr	r3, [pc, #88]	@ (8006824 <main+0xc4>)
 80067ca:	601a      	str	r2, [r3, #0]
	// Register the Trace User Event Channels
	ue1 = xTraceRegisterString("ticks");
 80067cc:	4b16      	ldr	r3, [pc, #88]	@ (8006828 <main+0xc8>)
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7fe fbd8 	bl	8004f84 <xTraceRegisterString>
 80067d4:	0002      	movs	r2, r0
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <main+0xcc>)
 80067d8:	601a      	str	r2, [r3, #0]

	// Give a nice name to the Semaphore in the trace recorder
	//vTraceSetSemaphoreName(xSem, "xSEM");

	// Create Tasks
	xTaskCreate(vTask1,		"Task_1", 		256, NULL, 1, NULL);
 80067da:	2380      	movs	r3, #128	@ 0x80
 80067dc:	005a      	lsls	r2, r3, #1
 80067de:	4914      	ldr	r1, [pc, #80]	@ (8006830 <main+0xd0>)
 80067e0:	4814      	ldr	r0, [pc, #80]	@ (8006834 <main+0xd4>)
 80067e2:	2300      	movs	r3, #0
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	2301      	movs	r3, #1
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2300      	movs	r3, #0
 80067ec:	f7fb fd15 	bl	800221a <xTaskCreate>
	xTaskCreate(vTask2,		"Task_2", 		256, NULL, 2, NULL);
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	005a      	lsls	r2, r3, #1
 80067f4:	4910      	ldr	r1, [pc, #64]	@ (8006838 <main+0xd8>)
 80067f6:	4811      	ldr	r0, [pc, #68]	@ (800683c <main+0xdc>)
 80067f8:	2300      	movs	r3, #0
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	2302      	movs	r3, #2
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2300      	movs	r3, #0
 8006802:	f7fb fd0a 	bl	800221a <xTaskCreate>

	// Give a nice name to the Queue in the trace recorder
	// vTraceSetQueueName(xConsoleQueue, "Console Queue");

	 // Start the Scheduler
	vTaskStartScheduler();
 8006806:	f7fb ff49 	bl	800269c <vTaskStartScheduler>

	while(1)
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	e7fd      	b.n	800680a <main+0xaa>
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	080078e4 	.word	0x080078e4
 8006814:	20002e24 	.word	0x20002e24
 8006818:	080078f8 	.word	0x080078f8
 800681c:	080069bd 	.word	0x080069bd
 8006820:	20002e14 	.word	0x20002e14
 8006824:	20002e18 	.word	0x20002e18
 8006828:	08007904 	.word	0x08007904
 800682c:	20002e1c 	.word	0x20002e1c
 8006830:	0800790c 	.word	0x0800790c
 8006834:	08006975 	.word	0x08006975
 8006838:	08007914 	.word	0x08007914
 800683c:	08006999 	.word	0x08006999

08006840 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 800684a:	4b44      	ldr	r3, [pc, #272]	@ (800695c <SystemClock_Config+0x11c>)
 800684c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 800684e:	4b44      	ldr	r3, [pc, #272]	@ (8006960 <SystemClock_Config+0x120>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b43      	ldr	r3, [pc, #268]	@ (8006960 <SystemClock_Config+0x120>)
 8006854:	2180      	movs	r1, #128	@ 0x80
 8006856:	02c9      	lsls	r1, r1, #11
 8006858:	430a      	orrs	r2, r1
 800685a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 800685c:	4b40      	ldr	r3, [pc, #256]	@ (8006960 <SystemClock_Config+0x120>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b3f      	ldr	r3, [pc, #252]	@ (8006960 <SystemClock_Config+0x120>)
 8006862:	2180      	movs	r1, #128	@ 0x80
 8006864:	0249      	lsls	r1, r1, #9
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 800686a:	4b3d      	ldr	r3, [pc, #244]	@ (8006960 <SystemClock_Config+0x120>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	2380      	movs	r3, #128	@ 0x80
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	4013      	ands	r3, r2
 8006874:	60bb      	str	r3, [r7, #8]
		timeout--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b01      	subs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <SystemClock_Config+0x48>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f0      	bne.n	800686a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8006888:	4b35      	ldr	r3, [pc, #212]	@ (8006960 <SystemClock_Config+0x120>)
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b34      	ldr	r3, [pc, #208]	@ (8006960 <SystemClock_Config+0x120>)
 800688e:	4935      	ldr	r1, [pc, #212]	@ (8006964 <SystemClock_Config+0x124>)
 8006890:	400a      	ands	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8006894:	4b32      	ldr	r3, [pc, #200]	@ (8006960 <SystemClock_Config+0x120>)
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	4b31      	ldr	r3, [pc, #196]	@ (8006960 <SystemClock_Config+0x120>)
 800689a:	2180      	movs	r1, #128	@ 0x80
 800689c:	0249      	lsls	r1, r1, #9
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80068a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006960 <SystemClock_Config+0x120>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80068a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006960 <SystemClock_Config+0x120>)
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006960 <SystemClock_Config+0x120>)
 80068ae:	492e      	ldr	r1, [pc, #184]	@ (8006968 <SystemClock_Config+0x128>)
 80068b0:	400a      	ands	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80068b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006960 <SystemClock_Config+0x120>)
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <SystemClock_Config+0x120>)
 80068ba:	2180      	movs	r1, #128	@ 0x80
 80068bc:	0349      	lsls	r1, r1, #13
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 80068c2:	4b27      	ldr	r3, [pc, #156]	@ (8006960 <SystemClock_Config+0x120>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4b26      	ldr	r3, [pc, #152]	@ (8006960 <SystemClock_Config+0x120>)
 80068c8:	2180      	movs	r1, #128	@ 0x80
 80068ca:	0449      	lsls	r1, r1, #17
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80068d0:	4b23      	ldr	r3, [pc, #140]	@ (8006960 <SystemClock_Config+0x120>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	049b      	lsls	r3, r3, #18
 80068d8:	4013      	ands	r3, r2
 80068da:	607b      	str	r3, [r7, #4]
		timeout--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3b01      	subs	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <SystemClock_Config+0xae>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 80068ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006960 <SystemClock_Config+0x120>)
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006960 <SystemClock_Config+0x120>)
 80068f4:	21f0      	movs	r1, #240	@ 0xf0
 80068f6:	438a      	bics	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80068fa:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <SystemClock_Config+0x120>)
 80068fc:	4b18      	ldr	r3, [pc, #96]	@ (8006960 <SystemClock_Config+0x120>)
 80068fe:	6852      	ldr	r2, [r2, #4]
 8006900:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8006902:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <SystemClock_Config+0x120>)
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <SystemClock_Config+0x120>)
 8006908:	4918      	ldr	r1, [pc, #96]	@ (800696c <SystemClock_Config+0x12c>)
 800690a:	400a      	ands	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 800690e:	4a14      	ldr	r2, [pc, #80]	@ (8006960 <SystemClock_Config+0x120>)
 8006910:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <SystemClock_Config+0x120>)
 8006912:	6852      	ldr	r2, [r2, #4]
 8006914:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8006916:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <SystemClock_Config+0x130>)
 8006918:	2211      	movs	r2, #17
 800691a:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800691c:	4b10      	ldr	r3, [pc, #64]	@ (8006960 <SystemClock_Config+0x120>)
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	4b0f      	ldr	r3, [pc, #60]	@ (8006960 <SystemClock_Config+0x120>)
 8006922:	2103      	movs	r1, #3
 8006924:	438a      	bics	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006928:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <SystemClock_Config+0x120>)
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <SystemClock_Config+0x120>)
 800692e:	2102      	movs	r1, #2
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <SystemClock_Config+0x120>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	220c      	movs	r2, #12
 800693a:	4013      	ands	r3, r2
 800693c:	603b      	str	r3, [r7, #0]
		timeout--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3b01      	subs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d002      	beq.n	8006950 <SystemClock_Config+0x110>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f1      	bne.n	8006934 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8006950:	f000 fbb6 	bl	80070c0 <SystemCoreClockUpdate>
}
 8006954:	46c0      	nop			@ (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b004      	add	sp, #16
 800695a:	bd80      	pop	{r7, pc}
 800695c:	000f4240 	.word	0x000f4240
 8006960:	40021000 	.word	0x40021000
 8006964:	fffe7fff 	.word	0xfffe7fff
 8006968:	ffc3ffff 	.word	0xffc3ffff
 800696c:	fffff8ff 	.word	0xfffff8ff
 8006970:	40022000 	.word	0x40022000

08006974 <vTask1>:

/*
 *	Task_1
 */
void vTask1 (void *pvParameters)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		my_printf("-");
 800697c:	4b05      	ldr	r3, [pc, #20]	@ (8006994 <vTask1+0x20>)
 800697e:	0018      	movs	r0, r3
 8006980:	f000 fa1e 	bl	8006dc0 <my_printf>
		// Wait for 1s
		vTaskDelay(1000);
 8006984:	23fa      	movs	r3, #250	@ 0xfa
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	0018      	movs	r0, r3
 800698a:	f7fb fe27 	bl	80025dc <vTaskDelay>
		my_printf("-");
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	e7f4      	b.n	800697c <vTask1+0x8>
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	0800791c 	.word	0x0800791c

08006998 <vTask2>:
}
/*
 *	Task_2
 */
void vTask2 (void *pvParameters)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		my_printf("#");
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <vTask2+0x20>)
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 fa0c 	bl	8006dc0 <my_printf>
		// Wait for 500ms
		vTaskDelay(500);
 80069a8:	23fa      	movs	r3, #250	@ 0xfa
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7fb fe15 	bl	80025dc <vTaskDelay>
		my_printf("#");
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	e7f4      	b.n	80069a0 <vTask2+0x8>
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	08007920 	.word	0x08007920

080069bc <vTaskTimer>:

/*
 * Timer Callback
 */
void vTaskTimer (TimerHandle_t xTimer)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	vTracePrintF(ue1, (char *)"%d", (uint32_t)ticks);
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <vTaskTimer+0x3c>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4b0c      	ldr	r3, [pc, #48]	@ (80069fc <vTaskTimer+0x40>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <vTaskTimer+0x44>)
 80069ce:	0019      	movs	r1, r3
 80069d0:	f7fe f9da 	bl	8004d88 <xTracePrintF>

	my_printf("\tTimer callback\r\n");
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <vTaskTimer+0x48>)
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f9f2 	bl	8006dc0 <my_printf>

	ticks = xTimerGetExpiryTime(my_timer);
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <vTaskTimer+0x4c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fc ff2b 	bl	800383c <xTimerGetExpiryTime>
 80069e6:	0002      	movs	r2, r0
 80069e8:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <vTaskTimer+0x40>)
 80069ea:	601a      	str	r2, [r3, #0]
	BSP_LED_Toggle();
 80069ec:	f000 fa7a 	bl	8006ee4 <BSP_LED_Toggle>
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20002e1c 	.word	0x20002e1c
 80069fc:	20002e18 	.word	0x20002e18
 8006a00:	0800794c 	.word	0x0800794c
 8006a04:	08007950 	.word	0x08007950
 8006a08:	20002e14 	.word	0x20002e14

08006a0c <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	if (str) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <printchar+0x26>
		**str = c;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
		++(*str);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8006a30:	e00a      	b.n	8006a48 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <printchar+0x44>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2240      	movs	r2, #64	@ 0x40
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d1f9      	bne.n	8006a34 <printchar+0x28>
		USART2->TDR = c;
 8006a40:	4b03      	ldr	r3, [pc, #12]	@ (8006a50 <printchar+0x44>)
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	b292      	uxth	r2, r2
 8006a46:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8006a48:	46c0      	nop			@ (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b002      	add	sp, #8
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40004400 	.word	0x40004400

08006a54 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	46c6      	mov	lr, r8
 8006a58:	b500      	push	{lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8006a66:	2400      	movs	r4, #0
 8006a68:	2320      	movs	r3, #32
 8006a6a:	4698      	mov	r8, r3

	if (width > 0) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dd16      	ble.n	8006aa0 <prints+0x4c>
		register int len = 0;
 8006a72:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8006a74:	68be      	ldr	r6, [r7, #8]
 8006a76:	e001      	b.n	8006a7c <prints+0x28>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	7833      	ldrb	r3, [r6, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1fa      	bne.n	8006a78 <prints+0x24>
		if (len >= width) width = 0;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429d      	cmp	r5, r3
 8006a86:	db02      	blt.n	8006a8e <prints+0x3a>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	e002      	b.n	8006a94 <prints+0x40>
		else width -= len;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	1b5b      	subs	r3, r3, r5
 8006a92:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2202      	movs	r2, #2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d001      	beq.n	8006aa0 <prints+0x4c>
 8006a9c:	2330      	movs	r3, #48	@ 0x30
 8006a9e:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d119      	bne.n	8006adc <prints+0x88>
		for ( ; width > 0; --width) {
 8006aa8:	e008      	b.n	8006abc <prints+0x68>
			printchar (out, padchar);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4641      	mov	r1, r8
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7ff ffac 	bl	8006a0c <printchar>
			++pc;
 8006ab4:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dcf3      	bgt.n	8006aaa <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8006ac2:	e00b      	b.n	8006adc <prints+0x88>
		printchar (out, *string);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	001a      	movs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7ff ff9c 	bl	8006a0c <printchar>
		++pc;
 8006ad4:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ef      	bne.n	8006ac4 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8006ae4:	e008      	b.n	8006af8 <prints+0xa4>
		printchar (out, padchar);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4641      	mov	r1, r8
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff ff8e 	bl	8006a0c <printchar>
		++pc;
 8006af0:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dcf3      	bgt.n	8006ae6 <prints+0x92>
	}

	return pc;
 8006afe:	0023      	movs	r3, r4
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b004      	add	sp, #16
 8006b06:	bc80      	pop	{r7}
 8006b08:	46b8      	mov	r8, r7
 8006b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b0c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	46ce      	mov	lr, r9
 8006b10:	4647      	mov	r7, r8
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b089      	sub	sp, #36	@ 0x24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	4699      	mov	r9, r3
 8006b24:	2600      	movs	r6, #0
	register unsigned int u = i;
 8006b26:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10e      	bne.n	8006b4c <printi+0x40>
		print_buf[0] = '0';
 8006b2e:	2114      	movs	r1, #20
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	2230      	movs	r2, #48	@ 0x30
 8006b34:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b40:	1879      	adds	r1, r7, r1
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff ff86 	bl	8006a54 <prints>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	e04e      	b.n	8006bea <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <printi+0x5c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b0a      	cmp	r3, #10
 8006b56:	d107      	bne.n	8006b68 <printi+0x5c>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da04      	bge.n	8006b68 <printi+0x5c>
		neg = 1;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4699      	mov	r9, r3
		u = -i;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	425b      	negs	r3, r3
 8006b66:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8006b68:	2314      	movs	r3, #20
 8006b6a:	18fc      	adds	r4, r7, r3
 8006b6c:	340b      	adds	r4, #11
	*s = '\0';
 8006b6e:	2300      	movs	r3, #0
 8006b70:	7023      	strb	r3, [r4, #0]

	while (u) {
 8006b72:	e019      	b.n	8006ba8 <printi+0x9c>
		t = u % b;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0019      	movs	r1, r3
 8006b78:	0028      	movs	r0, r5
 8006b7a:	f7f9 fb4b 	bl	8000214 <__aeabi_uidivmod>
 8006b7e:	000b      	movs	r3, r1
 8006b80:	4698      	mov	r8, r3
		if( t >= 10 )
 8006b82:	4643      	mov	r3, r8
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	dd02      	ble.n	8006b8e <printi+0x82>
			t += letbase - '0' - 10;
 8006b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8a:	3b3a      	subs	r3, #58	@ 0x3a
 8006b8c:	4498      	add	r8, r3
		*--s = t + '0';
 8006b8e:	4643      	mov	r3, r8
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	3c01      	subs	r4, #1
 8006b94:	3330      	adds	r3, #48	@ 0x30
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	7023      	strb	r3, [r4, #0]
		u /= b;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	0028      	movs	r0, r5
 8006ba0:	f7f9 fab2 	bl	8000108 <__udivsi3>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	001d      	movs	r5, r3
	while (u) {
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	d1e3      	bne.n	8006b74 <printi+0x68>
	}

	if (neg) {
 8006bac:	464b      	mov	r3, r9
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d013      	beq.n	8006bda <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00d      	beq.n	8006bd4 <printi+0xc8>
 8006bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <printi+0xc8>
			printchar (out, '-');
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	212d      	movs	r1, #45	@ 0x2d
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7ff ff21 	bl	8006a0c <printchar>
			++pc;
 8006bca:	3601      	adds	r6, #1
			--width;
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bd2:	e002      	b.n	8006bda <printi+0xce>
		}
		else {
			*--s = '-';
 8006bd4:	3c01      	subs	r4, #1
 8006bd6:	232d      	movs	r3, #45	@ 0x2d
 8006bd8:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8006bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	0021      	movs	r1, r4
 8006be2:	f7ff ff37 	bl	8006a54 <prints>
 8006be6:	0003      	movs	r3, r0
 8006be8:	18f3      	adds	r3, r6, r3
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b009      	add	sp, #36	@ 0x24
 8006bf0:	bcc0      	pop	{r6, r7}
 8006bf2:	46b9      	mov	r9, r7
 8006bf4:	46b0      	mov	r8, r6
 8006bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bf8 <print>:

static int print(char **out, const char *format, va_list args )
{
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	b08b      	sub	sp, #44	@ 0x2c
 8006bfc:	af04      	add	r7, sp, #16
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8006c04:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8006c06:	e0c6      	b.n	8006d96 <print+0x19e>
		if (*format == '%') {
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b25      	cmp	r3, #37	@ 0x25
 8006c0e:	d000      	beq.n	8006c12 <print+0x1a>
 8006c10:	e0b2      	b.n	8006d78 <print+0x180>
			++format;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8006c18:	2600      	movs	r6, #0
 8006c1a:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d100      	bne.n	8006c26 <print+0x2e>
 8006c24:	e0bd      	b.n	8006da2 <print+0x1aa>
			if (*format == '%') goto out;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b25      	cmp	r3, #37	@ 0x25
 8006c2c:	d100      	bne.n	8006c30 <print+0x38>
 8006c2e:	e0a5      	b.n	8006d7c <print+0x184>
			if (*format == '-') {
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c36:	d10a      	bne.n	8006c4e <print+0x56>
				++format;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8006c3e:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8006c40:	e005      	b.n	8006c4e <print+0x56>
				++format;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	4333      	orrs	r3, r6
 8006c4c:	001e      	movs	r6, r3
			while (*format == '0') {
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b30      	cmp	r3, #48	@ 0x30
 8006c54:	d0f5      	beq.n	8006c42 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8006c56:	e00b      	b.n	8006c70 <print+0x78>
				width *= 10;
 8006c58:	002b      	movs	r3, r5
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	195b      	adds	r3, r3, r5
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	001d      	movs	r5, r3
				width += *format - '0';
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	3b30      	subs	r3, #48	@ 0x30
 8006c68:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60bb      	str	r3, [r7, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c76:	d903      	bls.n	8006c80 <print+0x88>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b39      	cmp	r3, #57	@ 0x39
 8006c7e:	d9eb      	bls.n	8006c58 <print+0x60>
			}
			if( *format == 's' ) {
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b73      	cmp	r3, #115	@ 0x73
 8006c86:	d10f      	bne.n	8006ca8 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8006c92:	d000      	beq.n	8006c96 <print+0x9e>
 8006c94:	e000      	b.n	8006c98 <print+0xa0>
 8006c96:	4949      	ldr	r1, [pc, #292]	@ (8006dbc <print+0x1c4>)
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	0033      	movs	r3, r6
 8006c9c:	002a      	movs	r2, r5
 8006c9e:	f7ff fed9 	bl	8006a54 <prints>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	18e4      	adds	r4, r4, r3
				continue;
 8006ca6:	e073      	b.n	8006d90 <print+0x198>
			}
			if( *format == 'd' ) {
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b64      	cmp	r3, #100	@ 0x64
 8006cae:	d10f      	bne.n	8006cd0 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	2361      	movs	r3, #97	@ 0x61
 8006cbc:	9302      	str	r3, [sp, #8]
 8006cbe:	9601      	str	r6, [sp, #4]
 8006cc0:	9500      	str	r5, [sp, #0]
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	f7ff ff21 	bl	8006b0c <printi>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	18e4      	adds	r4, r4, r3
				continue;
 8006cce:	e05f      	b.n	8006d90 <print+0x198>
			}
			if( *format == 'x' ) {
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b78      	cmp	r3, #120	@ 0x78
 8006cd6:	d10f      	bne.n	8006cf8 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	607a      	str	r2, [r7, #4]
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	2361      	movs	r3, #97	@ 0x61
 8006ce4:	9302      	str	r3, [sp, #8]
 8006ce6:	9601      	str	r6, [sp, #4]
 8006ce8:	9500      	str	r5, [sp, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	2210      	movs	r2, #16
 8006cee:	f7ff ff0d 	bl	8006b0c <printi>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	18e4      	adds	r4, r4, r3
				continue;
 8006cf6:	e04b      	b.n	8006d90 <print+0x198>
			}
			if( *format == 'X' ) {
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b58      	cmp	r3, #88	@ 0x58
 8006cfe:	d10f      	bne.n	8006d20 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	2341      	movs	r3, #65	@ 0x41
 8006d0c:	9302      	str	r3, [sp, #8]
 8006d0e:	9601      	str	r6, [sp, #4]
 8006d10:	9500      	str	r5, [sp, #0]
 8006d12:	2300      	movs	r3, #0
 8006d14:	2210      	movs	r2, #16
 8006d16:	f7ff fef9 	bl	8006b0c <printi>
 8006d1a:	0003      	movs	r3, r0
 8006d1c:	18e4      	adds	r4, r4, r3
				continue;
 8006d1e:	e037      	b.n	8006d90 <print+0x198>
			}
			if( *format == 'u' ) {
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b75      	cmp	r3, #117	@ 0x75
 8006d26:	d10f      	bne.n	8006d48 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	1d1a      	adds	r2, r3, #4
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	2361      	movs	r3, #97	@ 0x61
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	9601      	str	r6, [sp, #4]
 8006d38:	9500      	str	r5, [sp, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	220a      	movs	r2, #10
 8006d3e:	f7ff fee5 	bl	8006b0c <printi>
 8006d42:	0003      	movs	r3, r0
 8006d44:	18e4      	adds	r4, r4, r3
				continue;
 8006d46:	e023      	b.n	8006d90 <print+0x198>
			}
			if( *format == 'c' ) {
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b63      	cmp	r3, #99	@ 0x63
 8006d4e:	d11f      	bne.n	8006d90 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	2114      	movs	r1, #20
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	2200      	movs	r2, #0
 8006d64:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8006d66:	1879      	adds	r1, r7, r1
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	0033      	movs	r3, r6
 8006d6c:	002a      	movs	r2, r5
 8006d6e:	f7ff fe71 	bl	8006a54 <prints>
 8006d72:	0003      	movs	r3, r0
 8006d74:	18e4      	adds	r4, r4, r3
				continue;
 8006d76:	e00b      	b.n	8006d90 <print+0x198>
			}
		}
		else {
		out:
 8006d78:	46c0      	nop			@ (mov r8, r8)
 8006d7a:	e000      	b.n	8006d7e <print+0x186>
			if (*format == '%') goto out;
 8006d7c:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	001a      	movs	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7ff fe3f 	bl	8006a0c <printchar>
			++pc;
 8006d8e:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d000      	beq.n	8006da0 <print+0x1a8>
 8006d9e:	e733      	b.n	8006c08 <print+0x10>
 8006da0:	e000      	b.n	8006da4 <print+0x1ac>
			if (*format == '\0') break;
 8006da2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <print+0x1ba>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8006db2:	0023      	movs	r3, r4
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b007      	add	sp, #28
 8006dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbc:	08007964 	.word	0x08007964

08006dc0 <my_printf>:

int my_printf(const char *format, ...)
{
 8006dc0:	b40f      	push	{r0, r1, r2, r3}
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8006dc8:	2314      	movs	r3, #20
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	0019      	movs	r1, r3
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f7ff ff0f 	bl	8006bf8 <print>
 8006dda:	0003      	movs	r3, r0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bc80      	pop	{r7}
 8006de4:	bc08      	pop	{r3}
 8006de6:	b004      	add	sp, #16
 8006de8:	4718      	bx	r3

08006dea <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	af00      	add	r7, sp, #0
}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006df8:	46c0      	nop			@ (mov r8, r8)
 8006dfa:	e7fd      	b.n	8006df8 <HardFault_Handler+0x4>

08006dfc <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 8006e06:	4b0e      	ldr	r3, [pc, #56]	@ (8006e40 <EXTI4_15_IRQHandler+0x44>)
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	019b      	lsls	r3, r3, #6
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d011      	beq.n	8006e36 <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 8006e12:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <EXTI4_15_IRQHandler+0x44>)
 8006e14:	2280      	movs	r2, #128	@ 0x80
 8006e16:	0192      	lsls	r2, r2, #6
 8006e18:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <EXTI4_15_IRQHandler+0x48>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1d3a      	adds	r2, r7, #4
 8006e20:	0011      	movs	r1, r2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7fa fd38 	bl	8001898 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <EXTI4_15_IRQHandler+0x3a>
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <EXTI4_15_IRQHandler+0x4c>)
 8006e30:	2280      	movs	r2, #128	@ 0x80
 8006e32:	0552      	lsls	r2, r2, #21
 8006e34:	601a      	str	r2, [r3, #0]
	}
}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b002      	add	sp, #8
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	40010400 	.word	0x40010400
 8006e44:	20002e20 	.word	0x20002e20
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006e50:	4b22      	ldr	r3, [pc, #136]	@ (8006edc <BSP_LED_Init+0x90>)
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	4b21      	ldr	r3, [pc, #132]	@ (8006edc <BSP_LED_Init+0x90>)
 8006e56:	2180      	movs	r1, #128	@ 0x80
 8006e58:	0289      	lsls	r1, r1, #10
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8006e5e:	2390      	movs	r3, #144	@ 0x90
 8006e60:	05db      	lsls	r3, r3, #23
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	2390      	movs	r3, #144	@ 0x90
 8006e66:	05db      	lsls	r3, r3, #23
 8006e68:	491d      	ldr	r1, [pc, #116]	@ (8006ee0 <BSP_LED_Init+0x94>)
 8006e6a:	400a      	ands	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8006e6e:	2390      	movs	r3, #144	@ 0x90
 8006e70:	05db      	lsls	r3, r3, #23
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	2390      	movs	r3, #144	@ 0x90
 8006e76:	05db      	lsls	r3, r3, #23
 8006e78:	2180      	movs	r1, #128	@ 0x80
 8006e7a:	00c9      	lsls	r1, r1, #3
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8006e80:	2390      	movs	r3, #144	@ 0x90
 8006e82:	05db      	lsls	r3, r3, #23
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	2390      	movs	r3, #144	@ 0x90
 8006e88:	05db      	lsls	r3, r3, #23
 8006e8a:	2120      	movs	r1, #32
 8006e8c:	438a      	bics	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8006e90:	2390      	movs	r3, #144	@ 0x90
 8006e92:	05db      	lsls	r3, r3, #23
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	2390      	movs	r3, #144	@ 0x90
 8006e98:	05db      	lsls	r3, r3, #23
 8006e9a:	4911      	ldr	r1, [pc, #68]	@ (8006ee0 <BSP_LED_Init+0x94>)
 8006e9c:	400a      	ands	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8006ea0:	2390      	movs	r3, #144	@ 0x90
 8006ea2:	05db      	lsls	r3, r3, #23
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	2390      	movs	r3, #144	@ 0x90
 8006ea8:	05db      	lsls	r3, r3, #23
 8006eaa:	21c0      	movs	r1, #192	@ 0xc0
 8006eac:	0109      	lsls	r1, r1, #4
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8006eb2:	2390      	movs	r3, #144	@ 0x90
 8006eb4:	05db      	lsls	r3, r3, #23
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	2390      	movs	r3, #144	@ 0x90
 8006eba:	05db      	lsls	r3, r3, #23
 8006ebc:	4908      	ldr	r1, [pc, #32]	@ (8006ee0 <BSP_LED_Init+0x94>)
 8006ebe:	400a      	ands	r2, r1
 8006ec0:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8006ec2:	2390      	movs	r3, #144	@ 0x90
 8006ec4:	05db      	lsls	r3, r3, #23
 8006ec6:	699a      	ldr	r2, [r3, #24]
 8006ec8:	2390      	movs	r3, #144	@ 0x90
 8006eca:	05db      	lsls	r3, r3, #23
 8006ecc:	2180      	movs	r1, #128	@ 0x80
 8006ece:	0389      	lsls	r1, r1, #14
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	619a      	str	r2, [r3, #24]
}
 8006ed4:	46c0      	nop			@ (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	fffff3ff 	.word	0xfffff3ff

08006ee4 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8006ee8:	2390      	movs	r3, #144	@ 0x90
 8006eea:	05db      	lsls	r3, r3, #23
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	2390      	movs	r3, #144	@ 0x90
 8006ef0:	05db      	lsls	r3, r3, #23
 8006ef2:	2120      	movs	r1, #32
 8006ef4:	404a      	eors	r2, r1
 8006ef6:	615a      	str	r2, [r3, #20]
}
 8006ef8:	46c0      	nop			@ (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8006f04:	4b1f      	ldr	r3, [pc, #124]	@ (8006f84 <BSP_PB_Init+0x84>)
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <BSP_PB_Init+0x84>)
 8006f0a:	2180      	movs	r1, #128	@ 0x80
 8006f0c:	0309      	lsls	r1, r1, #12
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b1c      	ldr	r3, [pc, #112]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f18:	491c      	ldr	r1, [pc, #112]	@ (8006f8c <BSP_PB_Init+0x8c>)
 8006f1a:	400a      	ands	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8006f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8006f26:	4b18      	ldr	r3, [pc, #96]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	4b17      	ldr	r3, [pc, #92]	@ (8006f88 <BSP_PB_Init+0x88>)
 8006f2c:	4917      	ldr	r1, [pc, #92]	@ (8006f8c <BSP_PB_Init+0x8c>)
 8006f2e:	400a      	ands	r2, r1
 8006f30:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006f32:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <BSP_PB_Init+0x84>)
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <BSP_PB_Init+0x84>)
 8006f38:	2101      	movs	r1, #1
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 8006f3e:	4b14      	ldr	r3, [pc, #80]	@ (8006f90 <BSP_PB_Init+0x90>)
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <BSP_PB_Init+0x90>)
 8006f44:	21f0      	movs	r1, #240	@ 0xf0
 8006f46:	438a      	bics	r2, r1
 8006f48:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 8006f4a:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <BSP_PB_Init+0x90>)
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	4b10      	ldr	r3, [pc, #64]	@ (8006f90 <BSP_PB_Init+0x90>)
 8006f50:	2120      	movs	r1, #32
 8006f52:	430a      	orrs	r2, r1
 8006f54:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 8006f56:	4b0f      	ldr	r3, [pc, #60]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f5c:	2180      	movs	r1, #128	@ 0x80
 8006f5e:	0189      	lsls	r1, r1, #6
 8006f60:	430a      	orrs	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 8006f64:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f6a:	490b      	ldr	r1, [pc, #44]	@ (8006f98 <BSP_PB_Init+0x98>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8006f70:	4b08      	ldr	r3, [pc, #32]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <BSP_PB_Init+0x94>)
 8006f76:	2180      	movs	r1, #128	@ 0x80
 8006f78:	0189      	lsls	r1, r1, #6
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	60da      	str	r2, [r3, #12]
}
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40021000 	.word	0x40021000
 8006f88:	48000800 	.word	0x48000800
 8006f8c:	f3ffffff 	.word	0xf3ffffff
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40010400 	.word	0x40010400
 8006f98:	ffffdfff 	.word	0xffffdfff

08006f9c <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8007050 <BSP_Console_Init+0xb4>)
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8007050 <BSP_Console_Init+0xb4>)
 8006fa6:	2180      	movs	r1, #128	@ 0x80
 8006fa8:	0289      	lsls	r1, r1, #10
 8006faa:	430a      	orrs	r2, r1
 8006fac:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006fae:	2390      	movs	r3, #144	@ 0x90
 8006fb0:	05db      	lsls	r3, r3, #23
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	2390      	movs	r3, #144	@ 0x90
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	21f0      	movs	r1, #240	@ 0xf0
 8006fba:	438a      	bics	r2, r1
 8006fbc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006fbe:	2390      	movs	r3, #144	@ 0x90
 8006fc0:	05db      	lsls	r3, r3, #23
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	2390      	movs	r3, #144	@ 0x90
 8006fc6:	05db      	lsls	r3, r3, #23
 8006fc8:	21a0      	movs	r1, #160	@ 0xa0
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006fce:	2390      	movs	r3, #144	@ 0x90
 8006fd0:	05db      	lsls	r3, r3, #23
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
 8006fd4:	2390      	movs	r3, #144	@ 0x90
 8006fd6:	05db      	lsls	r3, r3, #23
 8006fd8:	491e      	ldr	r1, [pc, #120]	@ (8007054 <BSP_Console_Init+0xb8>)
 8006fda:	400a      	ands	r2, r1
 8006fdc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006fde:	2390      	movs	r3, #144	@ 0x90
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	2390      	movs	r3, #144	@ 0x90
 8006fe6:	05db      	lsls	r3, r3, #23
 8006fe8:	2188      	movs	r1, #136	@ 0x88
 8006fea:	0149      	lsls	r1, r1, #5
 8006fec:	430a      	orrs	r2, r1
 8006fee:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006ff0:	4b17      	ldr	r3, [pc, #92]	@ (8007050 <BSP_Console_Init+0xb4>)
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	4b16      	ldr	r3, [pc, #88]	@ (8007050 <BSP_Console_Init+0xb4>)
 8006ff6:	2180      	movs	r1, #128	@ 0x80
 8006ff8:	0289      	lsls	r1, r1, #10
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006ffe:	4b16      	ldr	r3, [pc, #88]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8007004:	4b14      	ldr	r3, [pc, #80]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007006:	2200      	movs	r2, #0
 8007008:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800700a:	4b13      	ldr	r3, [pc, #76]	@ (8007058 <BSP_Console_Init+0xbc>)
 800700c:	2200      	movs	r2, #0
 800700e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8007010:	4b0f      	ldr	r3, [pc, #60]	@ (8007050 <BSP_Console_Init+0xb4>)
 8007012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007014:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <BSP_Console_Init+0xb4>)
 8007016:	4911      	ldr	r1, [pc, #68]	@ (800705c <BSP_Console_Init+0xc0>)
 8007018:	400a      	ands	r2, r1
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 800701c:	4b0e      	ldr	r3, [pc, #56]	@ (8007058 <BSP_Console_Init+0xbc>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007022:	2180      	movs	r1, #128	@ 0x80
 8007024:	0209      	lsls	r1, r1, #8
 8007026:	430a      	orrs	r2, r1
 8007028:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 800702a:	4b0b      	ldr	r3, [pc, #44]	@ (8007058 <BSP_Console_Init+0xbc>)
 800702c:	4a0c      	ldr	r2, [pc, #48]	@ (8007060 <BSP_Console_Init+0xc4>)
 800702e:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8007030:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007036:	210c      	movs	r1, #12
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 800703c:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <BSP_Console_Init+0xbc>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <BSP_Console_Init+0xbc>)
 8007042:	2101      	movs	r1, #1
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
}
 8007048:	46c0      	nop			@ (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	40021000 	.word	0x40021000
 8007054:	ffff00ff 	.word	0xffff00ff
 8007058:	40004400 	.word	0x40004400
 800705c:	fffcffff 	.word	0xfffcffff
 8007060:	00000341 	.word	0x00000341

08007064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007064:	480d      	ldr	r0, [pc, #52]	@ (800709c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007066:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007068:	f000 f825 	bl	80070b6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800706c:	480c      	ldr	r0, [pc, #48]	@ (80070a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800706e:	490d      	ldr	r1, [pc, #52]	@ (80070a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007070:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <LoopForever+0xe>)
  movs r3, #0
 8007072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007074:	e002      	b.n	800707c <LoopCopyDataInit>

08007076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800707a:	3304      	adds	r3, #4

0800707c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800707c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800707e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007080:	d3f9      	bcc.n	8007076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007082:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8007084:	4c0a      	ldr	r4, [pc, #40]	@ (80070b0 <LoopForever+0x16>)
  movs r3, #0
 8007086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007088:	e001      	b.n	800708e <LoopFillZerobss>

0800708a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800708a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800708c:	3204      	adds	r2, #4

0800708e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800708e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007090:	d3fb      	bcc.n	800708a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007092:	f000 f8b5 	bl	8007200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007096:	f7ff fb63 	bl	8006760 <main>

0800709a <LoopForever>:

LoopForever:
    b LoopForever
 800709a:	e7fe      	b.n	800709a <LoopForever>
  ldr   r0, =_estack
 800709c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80070a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070a4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80070a8:	08007a54 	.word	0x08007a54
  ldr r2, =_sbss
 80070ac:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80070b0:	20002e28 	.word	0x20002e28

080070b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070b4:	e7fe      	b.n	80070b4 <ADC1_COMP_IRQHandler>

080070b6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	2300      	movs	r3, #0
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	2300      	movs	r3, #0
 80070d4:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80070d6:	4b38      	ldr	r3, [pc, #224]	@ (80071b8 <SystemCoreClockUpdate+0xf8>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	220c      	movs	r2, #12
 80070dc:	4013      	ands	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d011      	beq.n	800710a <SystemCoreClockUpdate+0x4a>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d84f      	bhi.n	800718c <SystemCoreClockUpdate+0xcc>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <SystemCoreClockUpdate+0x3a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d004      	beq.n	8007102 <SystemCoreClockUpdate+0x42>
 80070f8:	e048      	b.n	800718c <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80070fa:	4b30      	ldr	r3, [pc, #192]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 80070fc:	4a30      	ldr	r2, [pc, #192]	@ (80071c0 <SystemCoreClockUpdate+0x100>)
 80070fe:	601a      	str	r2, [r3, #0]
      break;
 8007100:	e048      	b.n	8007194 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8007102:	4b2e      	ldr	r3, [pc, #184]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 8007104:	4a2e      	ldr	r2, [pc, #184]	@ (80071c0 <SystemCoreClockUpdate+0x100>)
 8007106:	601a      	str	r2, [r3, #0]
      break;
 8007108:	e044      	b.n	8007194 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800710a:	4b2b      	ldr	r3, [pc, #172]	@ (80071b8 <SystemCoreClockUpdate+0xf8>)
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	23f0      	movs	r3, #240	@ 0xf0
 8007110:	039b      	lsls	r3, r3, #14
 8007112:	4013      	ands	r3, r2
 8007114:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8007116:	4b28      	ldr	r3, [pc, #160]	@ (80071b8 <SystemCoreClockUpdate+0xf8>)
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	23c0      	movs	r3, #192	@ 0xc0
 800711c:	025b      	lsls	r3, r3, #9
 800711e:	4013      	ands	r3, r2
 8007120:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	0c9b      	lsrs	r3, r3, #18
 8007126:	3302      	adds	r3, #2
 8007128:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800712a:	4b23      	ldr	r3, [pc, #140]	@ (80071b8 <SystemCoreClockUpdate+0xf8>)
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	220f      	movs	r2, #15
 8007130:	4013      	ands	r3, r2
 8007132:	3301      	adds	r3, #1
 8007134:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	025b      	lsls	r3, r3, #9
 800713c:	429a      	cmp	r2, r3
 800713e:	d10a      	bne.n	8007156 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	481f      	ldr	r0, [pc, #124]	@ (80071c0 <SystemCoreClockUpdate+0x100>)
 8007144:	f7f8 ffe0 	bl	8000108 <__udivsi3>
 8007148:	0003      	movs	r3, r0
 800714a:	001a      	movs	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	435a      	muls	r2, r3
 8007150:	4b1a      	ldr	r3, [pc, #104]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 8007152:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8007154:	e01e      	b.n	8007194 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	23c0      	movs	r3, #192	@ 0xc0
 800715a:	025b      	lsls	r3, r3, #9
 800715c:	429a      	cmp	r2, r3
 800715e:	d10a      	bne.n	8007176 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	4818      	ldr	r0, [pc, #96]	@ (80071c4 <SystemCoreClockUpdate+0x104>)
 8007164:	f7f8 ffd0 	bl	8000108 <__udivsi3>
 8007168:	0003      	movs	r3, r0
 800716a:	001a      	movs	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	435a      	muls	r2, r3
 8007170:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 8007172:	601a      	str	r2, [r3, #0]
      break;
 8007174:	e00e      	b.n	8007194 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	4811      	ldr	r0, [pc, #68]	@ (80071c0 <SystemCoreClockUpdate+0x100>)
 800717a:	f7f8 ffc5 	bl	8000108 <__udivsi3>
 800717e:	0003      	movs	r3, r0
 8007180:	001a      	movs	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	435a      	muls	r2, r3
 8007186:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 8007188:	601a      	str	r2, [r3, #0]
      break;
 800718a:	e003      	b.n	8007194 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800718c:	4b0b      	ldr	r3, [pc, #44]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 800718e:	4a0c      	ldr	r2, [pc, #48]	@ (80071c0 <SystemCoreClockUpdate+0x100>)
 8007190:	601a      	str	r2, [r3, #0]
      break;
 8007192:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8007194:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <SystemCoreClockUpdate+0xf8>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	220f      	movs	r2, #15
 800719c:	4013      	ands	r3, r2
 800719e:	4a0a      	ldr	r2, [pc, #40]	@ (80071c8 <SystemCoreClockUpdate+0x108>)
 80071a0:	5cd3      	ldrb	r3, [r2, r3]
 80071a2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	40da      	lsrs	r2, r3
 80071ac:	4b03      	ldr	r3, [pc, #12]	@ (80071bc <SystemCoreClockUpdate+0xfc>)
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	46c0      	nop			@ (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b004      	add	sp, #16
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40021000 	.word	0x40021000
 80071bc:	20000014 	.word	0x20000014
 80071c0:	007a1200 	.word	0x007a1200
 80071c4:	02dc6c00 	.word	0x02dc6c00
 80071c8:	08007a3c 	.word	0x08007a3c

080071cc <memset>:
 80071cc:	0003      	movs	r3, r0
 80071ce:	1882      	adds	r2, r0, r2
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d100      	bne.n	80071d6 <memset+0xa>
 80071d4:	4770      	bx	lr
 80071d6:	7019      	strb	r1, [r3, #0]
 80071d8:	3301      	adds	r3, #1
 80071da:	e7f9      	b.n	80071d0 <memset+0x4>

080071dc <strncmp>:
 80071dc:	b530      	push	{r4, r5, lr}
 80071de:	0005      	movs	r5, r0
 80071e0:	1e10      	subs	r0, r2, #0
 80071e2:	d00b      	beq.n	80071fc <strncmp+0x20>
 80071e4:	2400      	movs	r4, #0
 80071e6:	3a01      	subs	r2, #1
 80071e8:	5d2b      	ldrb	r3, [r5, r4]
 80071ea:	5d08      	ldrb	r0, [r1, r4]
 80071ec:	4283      	cmp	r3, r0
 80071ee:	d104      	bne.n	80071fa <strncmp+0x1e>
 80071f0:	42a2      	cmp	r2, r4
 80071f2:	d002      	beq.n	80071fa <strncmp+0x1e>
 80071f4:	3401      	adds	r4, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f6      	bne.n	80071e8 <strncmp+0xc>
 80071fa:	1a18      	subs	r0, r3, r0
 80071fc:	bd30      	pop	{r4, r5, pc}
	...

08007200 <__libc_init_array>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	2600      	movs	r6, #0
 8007204:	4c0c      	ldr	r4, [pc, #48]	@ (8007238 <__libc_init_array+0x38>)
 8007206:	4d0d      	ldr	r5, [pc, #52]	@ (800723c <__libc_init_array+0x3c>)
 8007208:	1b64      	subs	r4, r4, r5
 800720a:	10a4      	asrs	r4, r4, #2
 800720c:	42a6      	cmp	r6, r4
 800720e:	d109      	bne.n	8007224 <__libc_init_array+0x24>
 8007210:	2600      	movs	r6, #0
 8007212:	f000 f823 	bl	800725c <_init>
 8007216:	4c0a      	ldr	r4, [pc, #40]	@ (8007240 <__libc_init_array+0x40>)
 8007218:	4d0a      	ldr	r5, [pc, #40]	@ (8007244 <__libc_init_array+0x44>)
 800721a:	1b64      	subs	r4, r4, r5
 800721c:	10a4      	asrs	r4, r4, #2
 800721e:	42a6      	cmp	r6, r4
 8007220:	d105      	bne.n	800722e <__libc_init_array+0x2e>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	00b3      	lsls	r3, r6, #2
 8007226:	58eb      	ldr	r3, [r5, r3]
 8007228:	4798      	blx	r3
 800722a:	3601      	adds	r6, #1
 800722c:	e7ee      	b.n	800720c <__libc_init_array+0xc>
 800722e:	00b3      	lsls	r3, r6, #2
 8007230:	58eb      	ldr	r3, [r5, r3]
 8007232:	4798      	blx	r3
 8007234:	3601      	adds	r6, #1
 8007236:	e7f2      	b.n	800721e <__libc_init_array+0x1e>
 8007238:	08007a4c 	.word	0x08007a4c
 800723c:	08007a4c 	.word	0x08007a4c
 8007240:	08007a50 	.word	0x08007a50
 8007244:	08007a4c 	.word	0x08007a4c

08007248 <memcpy>:
 8007248:	2300      	movs	r3, #0
 800724a:	b510      	push	{r4, lr}
 800724c:	429a      	cmp	r2, r3
 800724e:	d100      	bne.n	8007252 <memcpy+0xa>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	5ccc      	ldrb	r4, [r1, r3]
 8007254:	54c4      	strb	r4, [r0, r3]
 8007256:	3301      	adds	r3, #1
 8007258:	e7f8      	b.n	800724c <memcpy+0x4>
	...

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	46c0      	nop			@ (mov r8, r8)
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
