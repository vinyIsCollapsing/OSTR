
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006ecc  08006ecc  00007ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006ed0  08006ed0  00007ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08006ed4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e08  20000018  08006eec  00008018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002e20  08006eec  00008e20  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007e07  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019af  00000000  00000000  0000fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008a0  00000000  00000000  000117f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000682  00000000  00000000  00012098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001ed0  00000000  00000000  0001271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b182  00000000  00000000  000145ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00074784  00000000  00000000  0001f76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00093ef0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f54  00000000  00000000  00093f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00095e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066e0 	.word	0x080066e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080066e0 	.word	0x080066e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fc23 	bl	8000a74 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fbad 	bl	8000994 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 f80a 	bl	800025c <__aeabi_dsub>
 8000248:	f000 fba4 	bl	8000994 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dsub>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464e      	mov	r6, r9
 8000260:	4645      	mov	r5, r8
 8000262:	46de      	mov	lr, fp
 8000264:	4657      	mov	r7, sl
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b085      	sub	sp, #20
 800026a:	9000      	str	r0, [sp, #0]
 800026c:	9101      	str	r1, [sp, #4]
 800026e:	030c      	lsls	r4, r1, #12
 8000270:	004f      	lsls	r7, r1, #1
 8000272:	0fce      	lsrs	r6, r1, #31
 8000274:	0a61      	lsrs	r1, r4, #9
 8000276:	9c00      	ldr	r4, [sp, #0]
 8000278:	46b0      	mov	r8, r6
 800027a:	0f64      	lsrs	r4, r4, #29
 800027c:	430c      	orrs	r4, r1
 800027e:	9900      	ldr	r1, [sp, #0]
 8000280:	0d7f      	lsrs	r7, r7, #21
 8000282:	00c8      	lsls	r0, r1, #3
 8000284:	0011      	movs	r1, r2
 8000286:	001a      	movs	r2, r3
 8000288:	031b      	lsls	r3, r3, #12
 800028a:	469c      	mov	ip, r3
 800028c:	9100      	str	r1, [sp, #0]
 800028e:	9201      	str	r2, [sp, #4]
 8000290:	0051      	lsls	r1, r2, #1
 8000292:	0d4b      	lsrs	r3, r1, #21
 8000294:	4699      	mov	r9, r3
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	9d00      	ldr	r5, [sp, #0]
 800029a:	0fd9      	lsrs	r1, r3, #31
 800029c:	4663      	mov	r3, ip
 800029e:	0f6a      	lsrs	r2, r5, #29
 80002a0:	0a5b      	lsrs	r3, r3, #9
 80002a2:	4313      	orrs	r3, r2
 80002a4:	00ea      	lsls	r2, r5, #3
 80002a6:	4694      	mov	ip, r2
 80002a8:	4693      	mov	fp, r2
 80002aa:	4ac1      	ldr	r2, [pc, #772]	@ (80005b0 <__aeabi_dsub+0x354>)
 80002ac:	9003      	str	r0, [sp, #12]
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	4591      	cmp	r9, r2
 80002b2:	d100      	bne.n	80002b6 <__aeabi_dsub+0x5a>
 80002b4:	e0cd      	b.n	8000452 <__aeabi_dsub+0x1f6>
 80002b6:	2501      	movs	r5, #1
 80002b8:	4069      	eors	r1, r5
 80002ba:	464d      	mov	r5, r9
 80002bc:	1b7d      	subs	r5, r7, r5
 80002be:	46aa      	mov	sl, r5
 80002c0:	428e      	cmp	r6, r1
 80002c2:	d100      	bne.n	80002c6 <__aeabi_dsub+0x6a>
 80002c4:	e080      	b.n	80003c8 <__aeabi_dsub+0x16c>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	dc00      	bgt.n	80002cc <__aeabi_dsub+0x70>
 80002ca:	e335      	b.n	8000938 <__aeabi_dsub+0x6dc>
 80002cc:	4649      	mov	r1, r9
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d100      	bne.n	80002d4 <__aeabi_dsub+0x78>
 80002d2:	e0df      	b.n	8000494 <__aeabi_dsub+0x238>
 80002d4:	4297      	cmp	r7, r2
 80002d6:	d100      	bne.n	80002da <__aeabi_dsub+0x7e>
 80002d8:	e194      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80002da:	4652      	mov	r2, sl
 80002dc:	2501      	movs	r5, #1
 80002de:	2a38      	cmp	r2, #56	@ 0x38
 80002e0:	dc19      	bgt.n	8000316 <__aeabi_dsub+0xba>
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	9b02      	ldr	r3, [sp, #8]
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	4313      	orrs	r3, r2
 80002ea:	9302      	str	r3, [sp, #8]
 80002ec:	4652      	mov	r2, sl
 80002ee:	2a1f      	cmp	r2, #31
 80002f0:	dd00      	ble.n	80002f4 <__aeabi_dsub+0x98>
 80002f2:	e1e3      	b.n	80006bc <__aeabi_dsub+0x460>
 80002f4:	4653      	mov	r3, sl
 80002f6:	2220      	movs	r2, #32
 80002f8:	4661      	mov	r1, ip
 80002fa:	9d02      	ldr	r5, [sp, #8]
 80002fc:	1ad2      	subs	r2, r2, r3
 80002fe:	4095      	lsls	r5, r2
 8000300:	40d9      	lsrs	r1, r3
 8000302:	430d      	orrs	r5, r1
 8000304:	4661      	mov	r1, ip
 8000306:	4091      	lsls	r1, r2
 8000308:	000a      	movs	r2, r1
 800030a:	1e51      	subs	r1, r2, #1
 800030c:	418a      	sbcs	r2, r1
 800030e:	4315      	orrs	r5, r2
 8000310:	9a02      	ldr	r2, [sp, #8]
 8000312:	40da      	lsrs	r2, r3
 8000314:	1aa4      	subs	r4, r4, r2
 8000316:	1b45      	subs	r5, r0, r5
 8000318:	42a8      	cmp	r0, r5
 800031a:	4180      	sbcs	r0, r0
 800031c:	4240      	negs	r0, r0
 800031e:	1a24      	subs	r4, r4, r0
 8000320:	0223      	lsls	r3, r4, #8
 8000322:	d400      	bmi.n	8000326 <__aeabi_dsub+0xca>
 8000324:	e13d      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000326:	0264      	lsls	r4, r4, #9
 8000328:	0a64      	lsrs	r4, r4, #9
 800032a:	2c00      	cmp	r4, #0
 800032c:	d100      	bne.n	8000330 <__aeabi_dsub+0xd4>
 800032e:	e147      	b.n	80005c0 <__aeabi_dsub+0x364>
 8000330:	0020      	movs	r0, r4
 8000332:	f000 fba9 	bl	8000a88 <__clzsi2>
 8000336:	0003      	movs	r3, r0
 8000338:	3b08      	subs	r3, #8
 800033a:	2120      	movs	r1, #32
 800033c:	0028      	movs	r0, r5
 800033e:	1aca      	subs	r2, r1, r3
 8000340:	40d0      	lsrs	r0, r2
 8000342:	409c      	lsls	r4, r3
 8000344:	0002      	movs	r2, r0
 8000346:	409d      	lsls	r5, r3
 8000348:	4322      	orrs	r2, r4
 800034a:	429f      	cmp	r7, r3
 800034c:	dd00      	ble.n	8000350 <__aeabi_dsub+0xf4>
 800034e:	e177      	b.n	8000640 <__aeabi_dsub+0x3e4>
 8000350:	1bd8      	subs	r0, r3, r7
 8000352:	3001      	adds	r0, #1
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	002c      	movs	r4, r5
 8000358:	408d      	lsls	r5, r1
 800035a:	40c4      	lsrs	r4, r0
 800035c:	1e6b      	subs	r3, r5, #1
 800035e:	419d      	sbcs	r5, r3
 8000360:	0013      	movs	r3, r2
 8000362:	40c2      	lsrs	r2, r0
 8000364:	408b      	lsls	r3, r1
 8000366:	4325      	orrs	r5, r4
 8000368:	2700      	movs	r7, #0
 800036a:	0014      	movs	r4, r2
 800036c:	431d      	orrs	r5, r3
 800036e:	076b      	lsls	r3, r5, #29
 8000370:	d009      	beq.n	8000386 <__aeabi_dsub+0x12a>
 8000372:	230f      	movs	r3, #15
 8000374:	402b      	ands	r3, r5
 8000376:	2b04      	cmp	r3, #4
 8000378:	d005      	beq.n	8000386 <__aeabi_dsub+0x12a>
 800037a:	1d2b      	adds	r3, r5, #4
 800037c:	42ab      	cmp	r3, r5
 800037e:	41ad      	sbcs	r5, r5
 8000380:	426d      	negs	r5, r5
 8000382:	1964      	adds	r4, r4, r5
 8000384:	001d      	movs	r5, r3
 8000386:	0223      	lsls	r3, r4, #8
 8000388:	d400      	bmi.n	800038c <__aeabi_dsub+0x130>
 800038a:	e140      	b.n	800060e <__aeabi_dsub+0x3b2>
 800038c:	4a88      	ldr	r2, [pc, #544]	@ (80005b0 <__aeabi_dsub+0x354>)
 800038e:	3701      	adds	r7, #1
 8000390:	4297      	cmp	r7, r2
 8000392:	d100      	bne.n	8000396 <__aeabi_dsub+0x13a>
 8000394:	e101      	b.n	800059a <__aeabi_dsub+0x33e>
 8000396:	2601      	movs	r6, #1
 8000398:	4643      	mov	r3, r8
 800039a:	4986      	ldr	r1, [pc, #536]	@ (80005b4 <__aeabi_dsub+0x358>)
 800039c:	08ed      	lsrs	r5, r5, #3
 800039e:	4021      	ands	r1, r4
 80003a0:	074a      	lsls	r2, r1, #29
 80003a2:	432a      	orrs	r2, r5
 80003a4:	057c      	lsls	r4, r7, #21
 80003a6:	024d      	lsls	r5, r1, #9
 80003a8:	0b2d      	lsrs	r5, r5, #12
 80003aa:	0d64      	lsrs	r4, r4, #21
 80003ac:	401e      	ands	r6, r3
 80003ae:	0524      	lsls	r4, r4, #20
 80003b0:	432c      	orrs	r4, r5
 80003b2:	07f6      	lsls	r6, r6, #31
 80003b4:	4334      	orrs	r4, r6
 80003b6:	0010      	movs	r0, r2
 80003b8:	0021      	movs	r1, r4
 80003ba:	b005      	add	sp, #20
 80003bc:	bcf0      	pop	{r4, r5, r6, r7}
 80003be:	46bb      	mov	fp, r7
 80003c0:	46b2      	mov	sl, r6
 80003c2:	46a9      	mov	r9, r5
 80003c4:	46a0      	mov	r8, r4
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	dc00      	bgt.n	80003ce <__aeabi_dsub+0x172>
 80003cc:	e2d0      	b.n	8000970 <__aeabi_dsub+0x714>
 80003ce:	4649      	mov	r1, r9
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d000      	beq.n	80003d6 <__aeabi_dsub+0x17a>
 80003d4:	e0d4      	b.n	8000580 <__aeabi_dsub+0x324>
 80003d6:	4661      	mov	r1, ip
 80003d8:	9b02      	ldr	r3, [sp, #8]
 80003da:	4319      	orrs	r1, r3
 80003dc:	d100      	bne.n	80003e0 <__aeabi_dsub+0x184>
 80003de:	e12b      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80003e0:	1e69      	subs	r1, r5, #1
 80003e2:	2d01      	cmp	r5, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dsub+0x18c>
 80003e6:	e1d9      	b.n	800079c <__aeabi_dsub+0x540>
 80003e8:	4295      	cmp	r5, r2
 80003ea:	d100      	bne.n	80003ee <__aeabi_dsub+0x192>
 80003ec:	e10a      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80003ee:	2501      	movs	r5, #1
 80003f0:	2938      	cmp	r1, #56	@ 0x38
 80003f2:	dc17      	bgt.n	8000424 <__aeabi_dsub+0x1c8>
 80003f4:	468a      	mov	sl, r1
 80003f6:	4653      	mov	r3, sl
 80003f8:	2b1f      	cmp	r3, #31
 80003fa:	dd00      	ble.n	80003fe <__aeabi_dsub+0x1a2>
 80003fc:	e1e7      	b.n	80007ce <__aeabi_dsub+0x572>
 80003fe:	2220      	movs	r2, #32
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	9b02      	ldr	r3, [sp, #8]
 8000404:	4661      	mov	r1, ip
 8000406:	4093      	lsls	r3, r2
 8000408:	001d      	movs	r5, r3
 800040a:	4653      	mov	r3, sl
 800040c:	40d9      	lsrs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	4093      	lsls	r3, r2
 8000412:	001a      	movs	r2, r3
 8000414:	430d      	orrs	r5, r1
 8000416:	1e51      	subs	r1, r2, #1
 8000418:	418a      	sbcs	r2, r1
 800041a:	4653      	mov	r3, sl
 800041c:	4315      	orrs	r5, r2
 800041e:	9a02      	ldr	r2, [sp, #8]
 8000420:	40da      	lsrs	r2, r3
 8000422:	18a4      	adds	r4, r4, r2
 8000424:	182d      	adds	r5, r5, r0
 8000426:	4285      	cmp	r5, r0
 8000428:	4180      	sbcs	r0, r0
 800042a:	4240      	negs	r0, r0
 800042c:	1824      	adds	r4, r4, r0
 800042e:	0223      	lsls	r3, r4, #8
 8000430:	d400      	bmi.n	8000434 <__aeabi_dsub+0x1d8>
 8000432:	e0b6      	b.n	80005a2 <__aeabi_dsub+0x346>
 8000434:	4b5e      	ldr	r3, [pc, #376]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000436:	3701      	adds	r7, #1
 8000438:	429f      	cmp	r7, r3
 800043a:	d100      	bne.n	800043e <__aeabi_dsub+0x1e2>
 800043c:	e0ad      	b.n	800059a <__aeabi_dsub+0x33e>
 800043e:	2101      	movs	r1, #1
 8000440:	4b5c      	ldr	r3, [pc, #368]	@ (80005b4 <__aeabi_dsub+0x358>)
 8000442:	086a      	lsrs	r2, r5, #1
 8000444:	401c      	ands	r4, r3
 8000446:	4029      	ands	r1, r5
 8000448:	430a      	orrs	r2, r1
 800044a:	07e5      	lsls	r5, r4, #31
 800044c:	4315      	orrs	r5, r2
 800044e:	0864      	lsrs	r4, r4, #1
 8000450:	e78d      	b.n	800036e <__aeabi_dsub+0x112>
 8000452:	4a59      	ldr	r2, [pc, #356]	@ (80005b8 <__aeabi_dsub+0x35c>)
 8000454:	9b02      	ldr	r3, [sp, #8]
 8000456:	4692      	mov	sl, r2
 8000458:	4662      	mov	r2, ip
 800045a:	44ba      	add	sl, r7
 800045c:	431a      	orrs	r2, r3
 800045e:	d02c      	beq.n	80004ba <__aeabi_dsub+0x25e>
 8000460:	428e      	cmp	r6, r1
 8000462:	d02e      	beq.n	80004c2 <__aeabi_dsub+0x266>
 8000464:	4652      	mov	r2, sl
 8000466:	2a00      	cmp	r2, #0
 8000468:	d060      	beq.n	800052c <__aeabi_dsub+0x2d0>
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_dsub+0x214>
 800046e:	e0db      	b.n	8000628 <__aeabi_dsub+0x3cc>
 8000470:	4663      	mov	r3, ip
 8000472:	000e      	movs	r6, r1
 8000474:	9c02      	ldr	r4, [sp, #8]
 8000476:	08d8      	lsrs	r0, r3, #3
 8000478:	0762      	lsls	r2, r4, #29
 800047a:	4302      	orrs	r2, r0
 800047c:	08e4      	lsrs	r4, r4, #3
 800047e:	0013      	movs	r3, r2
 8000480:	4323      	orrs	r3, r4
 8000482:	d100      	bne.n	8000486 <__aeabi_dsub+0x22a>
 8000484:	e254      	b.n	8000930 <__aeabi_dsub+0x6d4>
 8000486:	2580      	movs	r5, #128	@ 0x80
 8000488:	032d      	lsls	r5, r5, #12
 800048a:	4325      	orrs	r5, r4
 800048c:	032d      	lsls	r5, r5, #12
 800048e:	4c48      	ldr	r4, [pc, #288]	@ (80005b0 <__aeabi_dsub+0x354>)
 8000490:	0b2d      	lsrs	r5, r5, #12
 8000492:	e78c      	b.n	80003ae <__aeabi_dsub+0x152>
 8000494:	4661      	mov	r1, ip
 8000496:	9b02      	ldr	r3, [sp, #8]
 8000498:	4319      	orrs	r1, r3
 800049a:	d100      	bne.n	800049e <__aeabi_dsub+0x242>
 800049c:	e0cc      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800049e:	0029      	movs	r1, r5
 80004a0:	3901      	subs	r1, #1
 80004a2:	2d01      	cmp	r5, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x24c>
 80004a6:	e188      	b.n	80007ba <__aeabi_dsub+0x55e>
 80004a8:	4295      	cmp	r5, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dsub+0x252>
 80004ac:	e0aa      	b.n	8000604 <__aeabi_dsub+0x3a8>
 80004ae:	2501      	movs	r5, #1
 80004b0:	2938      	cmp	r1, #56	@ 0x38
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dsub+0x25a>
 80004b4:	e72f      	b.n	8000316 <__aeabi_dsub+0xba>
 80004b6:	468a      	mov	sl, r1
 80004b8:	e718      	b.n	80002ec <__aeabi_dsub+0x90>
 80004ba:	2201      	movs	r2, #1
 80004bc:	4051      	eors	r1, r2
 80004be:	428e      	cmp	r6, r1
 80004c0:	d1d0      	bne.n	8000464 <__aeabi_dsub+0x208>
 80004c2:	4653      	mov	r3, sl
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_dsub+0x26e>
 80004c8:	e0be      	b.n	8000648 <__aeabi_dsub+0x3ec>
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_dsub+0x274>
 80004ce:	e138      	b.n	8000742 <__aeabi_dsub+0x4e6>
 80004d0:	46ca      	mov	sl, r9
 80004d2:	0022      	movs	r2, r4
 80004d4:	4302      	orrs	r2, r0
 80004d6:	d100      	bne.n	80004da <__aeabi_dsub+0x27e>
 80004d8:	e1e2      	b.n	80008a0 <__aeabi_dsub+0x644>
 80004da:	4653      	mov	r3, sl
 80004dc:	1e59      	subs	r1, r3, #1
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dsub+0x288>
 80004e2:	e20d      	b.n	8000900 <__aeabi_dsub+0x6a4>
 80004e4:	4a32      	ldr	r2, [pc, #200]	@ (80005b0 <__aeabi_dsub+0x354>)
 80004e6:	4592      	cmp	sl, r2
 80004e8:	d100      	bne.n	80004ec <__aeabi_dsub+0x290>
 80004ea:	e1d2      	b.n	8000892 <__aeabi_dsub+0x636>
 80004ec:	2701      	movs	r7, #1
 80004ee:	2938      	cmp	r1, #56	@ 0x38
 80004f0:	dc13      	bgt.n	800051a <__aeabi_dsub+0x2be>
 80004f2:	291f      	cmp	r1, #31
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dsub+0x29c>
 80004f6:	e1ee      	b.n	80008d6 <__aeabi_dsub+0x67a>
 80004f8:	2220      	movs	r2, #32
 80004fa:	9b02      	ldr	r3, [sp, #8]
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	0025      	movs	r5, r4
 8000500:	0007      	movs	r7, r0
 8000502:	469a      	mov	sl, r3
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4090      	lsls	r0, r2
 8000508:	4095      	lsls	r5, r2
 800050a:	40cf      	lsrs	r7, r1
 800050c:	44a2      	add	sl, r4
 800050e:	1e42      	subs	r2, r0, #1
 8000510:	4190      	sbcs	r0, r2
 8000512:	4653      	mov	r3, sl
 8000514:	432f      	orrs	r7, r5
 8000516:	4307      	orrs	r7, r0
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	003d      	movs	r5, r7
 800051c:	4465      	add	r5, ip
 800051e:	4565      	cmp	r5, ip
 8000520:	4192      	sbcs	r2, r2
 8000522:	9b02      	ldr	r3, [sp, #8]
 8000524:	4252      	negs	r2, r2
 8000526:	464f      	mov	r7, r9
 8000528:	18d4      	adds	r4, r2, r3
 800052a:	e780      	b.n	800042e <__aeabi_dsub+0x1d2>
 800052c:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <__aeabi_dsub+0x360>)
 800052e:	1c7d      	adds	r5, r7, #1
 8000530:	4215      	tst	r5, r2
 8000532:	d000      	beq.n	8000536 <__aeabi_dsub+0x2da>
 8000534:	e0aa      	b.n	800068c <__aeabi_dsub+0x430>
 8000536:	4662      	mov	r2, ip
 8000538:	0025      	movs	r5, r4
 800053a:	9b02      	ldr	r3, [sp, #8]
 800053c:	4305      	orrs	r5, r0
 800053e:	431a      	orrs	r2, r3
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_dsub+0x2ea>
 8000544:	e0f5      	b.n	8000732 <__aeabi_dsub+0x4d6>
 8000546:	2d00      	cmp	r5, #0
 8000548:	d100      	bne.n	800054c <__aeabi_dsub+0x2f0>
 800054a:	e16b      	b.n	8000824 <__aeabi_dsub+0x5c8>
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dsub+0x2f6>
 8000550:	e152      	b.n	80007f8 <__aeabi_dsub+0x59c>
 8000552:	4663      	mov	r3, ip
 8000554:	1ac5      	subs	r5, r0, r3
 8000556:	9b02      	ldr	r3, [sp, #8]
 8000558:	1ae2      	subs	r2, r4, r3
 800055a:	42a8      	cmp	r0, r5
 800055c:	419b      	sbcs	r3, r3
 800055e:	425b      	negs	r3, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	021a      	lsls	r2, r3, #8
 8000564:	d400      	bmi.n	8000568 <__aeabi_dsub+0x30c>
 8000566:	e1d5      	b.n	8000914 <__aeabi_dsub+0x6b8>
 8000568:	4663      	mov	r3, ip
 800056a:	1a1d      	subs	r5, r3, r0
 800056c:	45ac      	cmp	ip, r5
 800056e:	4192      	sbcs	r2, r2
 8000570:	2601      	movs	r6, #1
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	4252      	negs	r2, r2
 8000576:	1b1c      	subs	r4, r3, r4
 8000578:	4688      	mov	r8, r1
 800057a:	1aa4      	subs	r4, r4, r2
 800057c:	400e      	ands	r6, r1
 800057e:	e6f6      	b.n	800036e <__aeabi_dsub+0x112>
 8000580:	4297      	cmp	r7, r2
 8000582:	d03f      	beq.n	8000604 <__aeabi_dsub+0x3a8>
 8000584:	4652      	mov	r2, sl
 8000586:	2501      	movs	r5, #1
 8000588:	2a38      	cmp	r2, #56	@ 0x38
 800058a:	dd00      	ble.n	800058e <__aeabi_dsub+0x332>
 800058c:	e74a      	b.n	8000424 <__aeabi_dsub+0x1c8>
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	9b02      	ldr	r3, [sp, #8]
 8000592:	0412      	lsls	r2, r2, #16
 8000594:	4313      	orrs	r3, r2
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	e72d      	b.n	80003f6 <__aeabi_dsub+0x19a>
 800059a:	003c      	movs	r4, r7
 800059c:	2500      	movs	r5, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	e705      	b.n	80003ae <__aeabi_dsub+0x152>
 80005a2:	2307      	movs	r3, #7
 80005a4:	402b      	ands	r3, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dsub+0x350>
 80005aa:	e6e2      	b.n	8000372 <__aeabi_dsub+0x116>
 80005ac:	e06b      	b.n	8000686 <__aeabi_dsub+0x42a>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	000007ff 	.word	0x000007ff
 80005b4:	ff7fffff 	.word	0xff7fffff
 80005b8:	fffff801 	.word	0xfffff801
 80005bc:	000007fe 	.word	0x000007fe
 80005c0:	0028      	movs	r0, r5
 80005c2:	f000 fa61 	bl	8000a88 <__clzsi2>
 80005c6:	0003      	movs	r3, r0
 80005c8:	3318      	adds	r3, #24
 80005ca:	2b1f      	cmp	r3, #31
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_dsub+0x374>
 80005ce:	e6b4      	b.n	800033a <__aeabi_dsub+0xde>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3808      	subs	r0, #8
 80005d4:	4082      	lsls	r2, r0
 80005d6:	429f      	cmp	r7, r3
 80005d8:	dd00      	ble.n	80005dc <__aeabi_dsub+0x380>
 80005da:	e0b9      	b.n	8000750 <__aeabi_dsub+0x4f4>
 80005dc:	1bdb      	subs	r3, r3, r7
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	281f      	cmp	r0, #31
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dsub+0x38a>
 80005e4:	e1a0      	b.n	8000928 <__aeabi_dsub+0x6cc>
 80005e6:	0015      	movs	r5, r2
 80005e8:	3b1f      	subs	r3, #31
 80005ea:	40dd      	lsrs	r5, r3
 80005ec:	2820      	cmp	r0, #32
 80005ee:	d005      	beq.n	80005fc <__aeabi_dsub+0x3a0>
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	1a1b      	subs	r3, r3, r0
 80005f4:	409a      	lsls	r2, r3
 80005f6:	1e53      	subs	r3, r2, #1
 80005f8:	419a      	sbcs	r2, r3
 80005fa:	4315      	orrs	r5, r2
 80005fc:	2307      	movs	r3, #7
 80005fe:	2700      	movs	r7, #0
 8000600:	402b      	ands	r3, r5
 8000602:	e7d0      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000604:	08c0      	lsrs	r0, r0, #3
 8000606:	0762      	lsls	r2, r4, #29
 8000608:	4302      	orrs	r2, r0
 800060a:	08e4      	lsrs	r4, r4, #3
 800060c:	e737      	b.n	800047e <__aeabi_dsub+0x222>
 800060e:	08ea      	lsrs	r2, r5, #3
 8000610:	0763      	lsls	r3, r4, #29
 8000612:	431a      	orrs	r2, r3
 8000614:	4bd3      	ldr	r3, [pc, #844]	@ (8000964 <__aeabi_dsub+0x708>)
 8000616:	08e4      	lsrs	r4, r4, #3
 8000618:	429f      	cmp	r7, r3
 800061a:	d100      	bne.n	800061e <__aeabi_dsub+0x3c2>
 800061c:	e72f      	b.n	800047e <__aeabi_dsub+0x222>
 800061e:	0324      	lsls	r4, r4, #12
 8000620:	0b25      	lsrs	r5, r4, #12
 8000622:	057c      	lsls	r4, r7, #21
 8000624:	0d64      	lsrs	r4, r4, #21
 8000626:	e6c2      	b.n	80003ae <__aeabi_dsub+0x152>
 8000628:	46ca      	mov	sl, r9
 800062a:	0022      	movs	r2, r4
 800062c:	4302      	orrs	r2, r0
 800062e:	d158      	bne.n	80006e2 <__aeabi_dsub+0x486>
 8000630:	4663      	mov	r3, ip
 8000632:	000e      	movs	r6, r1
 8000634:	9c02      	ldr	r4, [sp, #8]
 8000636:	9303      	str	r3, [sp, #12]
 8000638:	9b03      	ldr	r3, [sp, #12]
 800063a:	4657      	mov	r7, sl
 800063c:	08da      	lsrs	r2, r3, #3
 800063e:	e7e7      	b.n	8000610 <__aeabi_dsub+0x3b4>
 8000640:	4cc9      	ldr	r4, [pc, #804]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000642:	1aff      	subs	r7, r7, r3
 8000644:	4014      	ands	r4, r2
 8000646:	e692      	b.n	800036e <__aeabi_dsub+0x112>
 8000648:	4dc8      	ldr	r5, [pc, #800]	@ (800096c <__aeabi_dsub+0x710>)
 800064a:	1c7a      	adds	r2, r7, #1
 800064c:	422a      	tst	r2, r5
 800064e:	d000      	beq.n	8000652 <__aeabi_dsub+0x3f6>
 8000650:	e084      	b.n	800075c <__aeabi_dsub+0x500>
 8000652:	0022      	movs	r2, r4
 8000654:	4302      	orrs	r2, r0
 8000656:	2f00      	cmp	r7, #0
 8000658:	d000      	beq.n	800065c <__aeabi_dsub+0x400>
 800065a:	e0ef      	b.n	800083c <__aeabi_dsub+0x5e0>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_dsub+0x406>
 8000660:	e0e5      	b.n	800082e <__aeabi_dsub+0x5d2>
 8000662:	4662      	mov	r2, ip
 8000664:	9902      	ldr	r1, [sp, #8]
 8000666:	430a      	orrs	r2, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dsub+0x410>
 800066a:	e0c5      	b.n	80007f8 <__aeabi_dsub+0x59c>
 800066c:	4663      	mov	r3, ip
 800066e:	18c5      	adds	r5, r0, r3
 8000670:	468c      	mov	ip, r1
 8000672:	4285      	cmp	r5, r0
 8000674:	4180      	sbcs	r0, r0
 8000676:	4464      	add	r4, ip
 8000678:	4240      	negs	r0, r0
 800067a:	1824      	adds	r4, r4, r0
 800067c:	0223      	lsls	r3, r4, #8
 800067e:	d502      	bpl.n	8000686 <__aeabi_dsub+0x42a>
 8000680:	4bb9      	ldr	r3, [pc, #740]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000682:	3701      	adds	r7, #1
 8000684:	401c      	ands	r4, r3
 8000686:	46ba      	mov	sl, r7
 8000688:	9503      	str	r5, [sp, #12]
 800068a:	e7d5      	b.n	8000638 <__aeabi_dsub+0x3dc>
 800068c:	4662      	mov	r2, ip
 800068e:	1a85      	subs	r5, r0, r2
 8000690:	42a8      	cmp	r0, r5
 8000692:	4192      	sbcs	r2, r2
 8000694:	4252      	negs	r2, r2
 8000696:	4691      	mov	r9, r2
 8000698:	9b02      	ldr	r3, [sp, #8]
 800069a:	1ae3      	subs	r3, r4, r3
 800069c:	001a      	movs	r2, r3
 800069e:	464b      	mov	r3, r9
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	0013      	movs	r3, r2
 80006a4:	4691      	mov	r9, r2
 80006a6:	021a      	lsls	r2, r3, #8
 80006a8:	d46c      	bmi.n	8000784 <__aeabi_dsub+0x528>
 80006aa:	464a      	mov	r2, r9
 80006ac:	464c      	mov	r4, r9
 80006ae:	432a      	orrs	r2, r5
 80006b0:	d000      	beq.n	80006b4 <__aeabi_dsub+0x458>
 80006b2:	e63a      	b.n	800032a <__aeabi_dsub+0xce>
 80006b4:	2600      	movs	r6, #0
 80006b6:	2400      	movs	r4, #0
 80006b8:	2500      	movs	r5, #0
 80006ba:	e678      	b.n	80003ae <__aeabi_dsub+0x152>
 80006bc:	9902      	ldr	r1, [sp, #8]
 80006be:	4653      	mov	r3, sl
 80006c0:	000d      	movs	r5, r1
 80006c2:	3a20      	subs	r2, #32
 80006c4:	40d5      	lsrs	r5, r2
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	d006      	beq.n	80006d8 <__aeabi_dsub+0x47c>
 80006ca:	2240      	movs	r2, #64	@ 0x40
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	4093      	lsls	r3, r2
 80006d2:	4662      	mov	r2, ip
 80006d4:	431a      	orrs	r2, r3
 80006d6:	4693      	mov	fp, r2
 80006d8:	465b      	mov	r3, fp
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	431d      	orrs	r5, r3
 80006e0:	e619      	b.n	8000316 <__aeabi_dsub+0xba>
 80006e2:	4653      	mov	r3, sl
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d100      	bne.n	80006ec <__aeabi_dsub+0x490>
 80006ea:	e0c6      	b.n	800087a <__aeabi_dsub+0x61e>
 80006ec:	4e9d      	ldr	r6, [pc, #628]	@ (8000964 <__aeabi_dsub+0x708>)
 80006ee:	45b2      	cmp	sl, r6
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dsub+0x498>
 80006f2:	e6bd      	b.n	8000470 <__aeabi_dsub+0x214>
 80006f4:	4688      	mov	r8, r1
 80006f6:	000e      	movs	r6, r1
 80006f8:	2501      	movs	r5, #1
 80006fa:	2a38      	cmp	r2, #56	@ 0x38
 80006fc:	dc10      	bgt.n	8000720 <__aeabi_dsub+0x4c4>
 80006fe:	2a1f      	cmp	r2, #31
 8000700:	dc7f      	bgt.n	8000802 <__aeabi_dsub+0x5a6>
 8000702:	2120      	movs	r1, #32
 8000704:	0025      	movs	r5, r4
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	0007      	movs	r7, r0
 800070a:	4088      	lsls	r0, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d7      	lsrs	r7, r2
 8000710:	40d4      	lsrs	r4, r2
 8000712:	1e41      	subs	r1, r0, #1
 8000714:	4188      	sbcs	r0, r1
 8000716:	9b02      	ldr	r3, [sp, #8]
 8000718:	433d      	orrs	r5, r7
 800071a:	1b1b      	subs	r3, r3, r4
 800071c:	4305      	orrs	r5, r0
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	4662      	mov	r2, ip
 8000722:	1b55      	subs	r5, r2, r5
 8000724:	45ac      	cmp	ip, r5
 8000726:	4192      	sbcs	r2, r2
 8000728:	9b02      	ldr	r3, [sp, #8]
 800072a:	4252      	negs	r2, r2
 800072c:	464f      	mov	r7, r9
 800072e:	1a9c      	subs	r4, r3, r2
 8000730:	e5f6      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_dsub+0x4dc>
 8000736:	e0b7      	b.n	80008a8 <__aeabi_dsub+0x64c>
 8000738:	2a00      	cmp	r2, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dsub+0x4e2>
 800073c:	e0f0      	b.n	8000920 <__aeabi_dsub+0x6c4>
 800073e:	2601      	movs	r6, #1
 8000740:	400e      	ands	r6, r1
 8000742:	4663      	mov	r3, ip
 8000744:	9802      	ldr	r0, [sp, #8]
 8000746:	08d9      	lsrs	r1, r3, #3
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	430a      	orrs	r2, r1
 800074c:	08c4      	lsrs	r4, r0, #3
 800074e:	e696      	b.n	800047e <__aeabi_dsub+0x222>
 8000750:	4c85      	ldr	r4, [pc, #532]	@ (8000968 <__aeabi_dsub+0x70c>)
 8000752:	1aff      	subs	r7, r7, r3
 8000754:	4014      	ands	r4, r2
 8000756:	0762      	lsls	r2, r4, #29
 8000758:	08e4      	lsrs	r4, r4, #3
 800075a:	e760      	b.n	800061e <__aeabi_dsub+0x3c2>
 800075c:	4981      	ldr	r1, [pc, #516]	@ (8000964 <__aeabi_dsub+0x708>)
 800075e:	428a      	cmp	r2, r1
 8000760:	d100      	bne.n	8000764 <__aeabi_dsub+0x508>
 8000762:	e0c9      	b.n	80008f8 <__aeabi_dsub+0x69c>
 8000764:	4663      	mov	r3, ip
 8000766:	18c1      	adds	r1, r0, r3
 8000768:	4281      	cmp	r1, r0
 800076a:	4180      	sbcs	r0, r0
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	4240      	negs	r0, r0
 8000770:	18e3      	adds	r3, r4, r3
 8000772:	181b      	adds	r3, r3, r0
 8000774:	07dd      	lsls	r5, r3, #31
 8000776:	085c      	lsrs	r4, r3, #1
 8000778:	2307      	movs	r3, #7
 800077a:	0849      	lsrs	r1, r1, #1
 800077c:	430d      	orrs	r5, r1
 800077e:	0017      	movs	r7, r2
 8000780:	402b      	ands	r3, r5
 8000782:	e710      	b.n	80005a6 <__aeabi_dsub+0x34a>
 8000784:	4663      	mov	r3, ip
 8000786:	1a1d      	subs	r5, r3, r0
 8000788:	45ac      	cmp	ip, r5
 800078a:	4192      	sbcs	r2, r2
 800078c:	2601      	movs	r6, #1
 800078e:	9b02      	ldr	r3, [sp, #8]
 8000790:	4252      	negs	r2, r2
 8000792:	1b1c      	subs	r4, r3, r4
 8000794:	4688      	mov	r8, r1
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	400e      	ands	r6, r1
 800079a:	e5c6      	b.n	800032a <__aeabi_dsub+0xce>
 800079c:	4663      	mov	r3, ip
 800079e:	18c5      	adds	r5, r0, r3
 80007a0:	9b02      	ldr	r3, [sp, #8]
 80007a2:	4285      	cmp	r5, r0
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	469c      	mov	ip, r3
 80007a8:	4240      	negs	r0, r0
 80007aa:	4464      	add	r4, ip
 80007ac:	1824      	adds	r4, r4, r0
 80007ae:	2701      	movs	r7, #1
 80007b0:	0223      	lsls	r3, r4, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dsub+0x55a>
 80007b4:	e6f5      	b.n	80005a2 <__aeabi_dsub+0x346>
 80007b6:	2702      	movs	r7, #2
 80007b8:	e641      	b.n	800043e <__aeabi_dsub+0x1e2>
 80007ba:	4663      	mov	r3, ip
 80007bc:	1ac5      	subs	r5, r0, r3
 80007be:	42a8      	cmp	r0, r5
 80007c0:	4180      	sbcs	r0, r0
 80007c2:	9b02      	ldr	r3, [sp, #8]
 80007c4:	4240      	negs	r0, r0
 80007c6:	1ae4      	subs	r4, r4, r3
 80007c8:	2701      	movs	r7, #1
 80007ca:	1a24      	subs	r4, r4, r0
 80007cc:	e5a8      	b.n	8000320 <__aeabi_dsub+0xc4>
 80007ce:	9d02      	ldr	r5, [sp, #8]
 80007d0:	4652      	mov	r2, sl
 80007d2:	002b      	movs	r3, r5
 80007d4:	3a20      	subs	r2, #32
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	0019      	movs	r1, r3
 80007da:	4653      	mov	r3, sl
 80007dc:	2b20      	cmp	r3, #32
 80007de:	d006      	beq.n	80007ee <__aeabi_dsub+0x592>
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	002b      	movs	r3, r5
 80007e6:	4093      	lsls	r3, r2
 80007e8:	4662      	mov	r2, ip
 80007ea:	431a      	orrs	r2, r3
 80007ec:	4693      	mov	fp, r2
 80007ee:	465d      	mov	r5, fp
 80007f0:	1e6b      	subs	r3, r5, #1
 80007f2:	419d      	sbcs	r5, r3
 80007f4:	430d      	orrs	r5, r1
 80007f6:	e615      	b.n	8000424 <__aeabi_dsub+0x1c8>
 80007f8:	0762      	lsls	r2, r4, #29
 80007fa:	08c0      	lsrs	r0, r0, #3
 80007fc:	4302      	orrs	r2, r0
 80007fe:	08e4      	lsrs	r4, r4, #3
 8000800:	e70d      	b.n	800061e <__aeabi_dsub+0x3c2>
 8000802:	0011      	movs	r1, r2
 8000804:	0027      	movs	r7, r4
 8000806:	3920      	subs	r1, #32
 8000808:	40cf      	lsrs	r7, r1
 800080a:	2a20      	cmp	r2, #32
 800080c:	d005      	beq.n	800081a <__aeabi_dsub+0x5be>
 800080e:	2140      	movs	r1, #64	@ 0x40
 8000810:	1a8a      	subs	r2, r1, r2
 8000812:	4094      	lsls	r4, r2
 8000814:	0025      	movs	r5, r4
 8000816:	4305      	orrs	r5, r0
 8000818:	9503      	str	r5, [sp, #12]
 800081a:	9d03      	ldr	r5, [sp, #12]
 800081c:	1e6a      	subs	r2, r5, #1
 800081e:	4195      	sbcs	r5, r2
 8000820:	433d      	orrs	r5, r7
 8000822:	e77d      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dsub+0x5ce>
 8000828:	e744      	b.n	80006b4 <__aeabi_dsub+0x458>
 800082a:	2601      	movs	r6, #1
 800082c:	400e      	ands	r6, r1
 800082e:	4663      	mov	r3, ip
 8000830:	08d9      	lsrs	r1, r3, #3
 8000832:	9b02      	ldr	r3, [sp, #8]
 8000834:	075a      	lsls	r2, r3, #29
 8000836:	430a      	orrs	r2, r1
 8000838:	08dc      	lsrs	r4, r3, #3
 800083a:	e6f0      	b.n	800061e <__aeabi_dsub+0x3c2>
 800083c:	2a00      	cmp	r2, #0
 800083e:	d028      	beq.n	8000892 <__aeabi_dsub+0x636>
 8000840:	4662      	mov	r2, ip
 8000842:	9f02      	ldr	r7, [sp, #8]
 8000844:	08c0      	lsrs	r0, r0, #3
 8000846:	433a      	orrs	r2, r7
 8000848:	d100      	bne.n	800084c <__aeabi_dsub+0x5f0>
 800084a:	e6dc      	b.n	8000606 <__aeabi_dsub+0x3aa>
 800084c:	0762      	lsls	r2, r4, #29
 800084e:	4310      	orrs	r0, r2
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	08e4      	lsrs	r4, r4, #3
 8000854:	0312      	lsls	r2, r2, #12
 8000856:	4214      	tst	r4, r2
 8000858:	d009      	beq.n	800086e <__aeabi_dsub+0x612>
 800085a:	08fd      	lsrs	r5, r7, #3
 800085c:	4215      	tst	r5, r2
 800085e:	d106      	bne.n	800086e <__aeabi_dsub+0x612>
 8000860:	4663      	mov	r3, ip
 8000862:	2601      	movs	r6, #1
 8000864:	002c      	movs	r4, r5
 8000866:	08d8      	lsrs	r0, r3, #3
 8000868:	077b      	lsls	r3, r7, #29
 800086a:	4318      	orrs	r0, r3
 800086c:	400e      	ands	r6, r1
 800086e:	0f42      	lsrs	r2, r0, #29
 8000870:	00c0      	lsls	r0, r0, #3
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	0752      	lsls	r2, r2, #29
 8000876:	4302      	orrs	r2, r0
 8000878:	e601      	b.n	800047e <__aeabi_dsub+0x222>
 800087a:	4663      	mov	r3, ip
 800087c:	1a1d      	subs	r5, r3, r0
 800087e:	45ac      	cmp	ip, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	9b02      	ldr	r3, [sp, #8]
 8000884:	4252      	negs	r2, r2
 8000886:	1b1c      	subs	r4, r3, r4
 8000888:	000e      	movs	r6, r1
 800088a:	4688      	mov	r8, r1
 800088c:	2701      	movs	r7, #1
 800088e:	1aa4      	subs	r4, r4, r2
 8000890:	e546      	b.n	8000320 <__aeabi_dsub+0xc4>
 8000892:	4663      	mov	r3, ip
 8000894:	08d9      	lsrs	r1, r3, #3
 8000896:	9b02      	ldr	r3, [sp, #8]
 8000898:	075a      	lsls	r2, r3, #29
 800089a:	430a      	orrs	r2, r1
 800089c:	08dc      	lsrs	r4, r3, #3
 800089e:	e5ee      	b.n	800047e <__aeabi_dsub+0x222>
 80008a0:	4663      	mov	r3, ip
 80008a2:	9c02      	ldr	r4, [sp, #8]
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	e6c7      	b.n	8000638 <__aeabi_dsub+0x3dc>
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x654>
 80008ae:	e6aa      	b.n	8000606 <__aeabi_dsub+0x3aa>
 80008b0:	0762      	lsls	r2, r4, #29
 80008b2:	4310      	orrs	r0, r2
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	08e4      	lsrs	r4, r4, #3
 80008b8:	0312      	lsls	r2, r2, #12
 80008ba:	4214      	tst	r4, r2
 80008bc:	d0d7      	beq.n	800086e <__aeabi_dsub+0x612>
 80008be:	9f02      	ldr	r7, [sp, #8]
 80008c0:	08fd      	lsrs	r5, r7, #3
 80008c2:	4215      	tst	r5, r2
 80008c4:	d1d3      	bne.n	800086e <__aeabi_dsub+0x612>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2601      	movs	r6, #1
 80008ca:	08d8      	lsrs	r0, r3, #3
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	002c      	movs	r4, r5
 80008d0:	4318      	orrs	r0, r3
 80008d2:	400e      	ands	r6, r1
 80008d4:	e7cb      	b.n	800086e <__aeabi_dsub+0x612>
 80008d6:	000a      	movs	r2, r1
 80008d8:	0027      	movs	r7, r4
 80008da:	3a20      	subs	r2, #32
 80008dc:	40d7      	lsrs	r7, r2
 80008de:	2920      	cmp	r1, #32
 80008e0:	d005      	beq.n	80008ee <__aeabi_dsub+0x692>
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	1a52      	subs	r2, r2, r1
 80008e6:	4094      	lsls	r4, r2
 80008e8:	0025      	movs	r5, r4
 80008ea:	4305      	orrs	r5, r0
 80008ec:	9503      	str	r5, [sp, #12]
 80008ee:	9d03      	ldr	r5, [sp, #12]
 80008f0:	1e6a      	subs	r2, r5, #1
 80008f2:	4195      	sbcs	r5, r2
 80008f4:	432f      	orrs	r7, r5
 80008f6:	e610      	b.n	800051a <__aeabi_dsub+0x2be>
 80008f8:	0014      	movs	r4, r2
 80008fa:	2500      	movs	r5, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	e556      	b.n	80003ae <__aeabi_dsub+0x152>
 8000900:	9b02      	ldr	r3, [sp, #8]
 8000902:	4460      	add	r0, ip
 8000904:	4699      	mov	r9, r3
 8000906:	4560      	cmp	r0, ip
 8000908:	4192      	sbcs	r2, r2
 800090a:	444c      	add	r4, r9
 800090c:	4252      	negs	r2, r2
 800090e:	0005      	movs	r5, r0
 8000910:	18a4      	adds	r4, r4, r2
 8000912:	e74c      	b.n	80007ae <__aeabi_dsub+0x552>
 8000914:	001a      	movs	r2, r3
 8000916:	001c      	movs	r4, r3
 8000918:	432a      	orrs	r2, r5
 800091a:	d000      	beq.n	800091e <__aeabi_dsub+0x6c2>
 800091c:	e6b3      	b.n	8000686 <__aeabi_dsub+0x42a>
 800091e:	e6c9      	b.n	80006b4 <__aeabi_dsub+0x458>
 8000920:	2480      	movs	r4, #128	@ 0x80
 8000922:	2600      	movs	r6, #0
 8000924:	0324      	lsls	r4, r4, #12
 8000926:	e5ae      	b.n	8000486 <__aeabi_dsub+0x22a>
 8000928:	2120      	movs	r1, #32
 800092a:	2500      	movs	r5, #0
 800092c:	1a09      	subs	r1, r1, r0
 800092e:	e517      	b.n	8000360 <__aeabi_dsub+0x104>
 8000930:	2200      	movs	r2, #0
 8000932:	2500      	movs	r5, #0
 8000934:	4c0b      	ldr	r4, [pc, #44]	@ (8000964 <__aeabi_dsub+0x708>)
 8000936:	e53a      	b.n	80003ae <__aeabi_dsub+0x152>
 8000938:	2d00      	cmp	r5, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dsub+0x6e2>
 800093c:	e5f6      	b.n	800052c <__aeabi_dsub+0x2d0>
 800093e:	464b      	mov	r3, r9
 8000940:	1bda      	subs	r2, r3, r7
 8000942:	4692      	mov	sl, r2
 8000944:	2f00      	cmp	r7, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dsub+0x6ee>
 8000948:	e66f      	b.n	800062a <__aeabi_dsub+0x3ce>
 800094a:	2a38      	cmp	r2, #56	@ 0x38
 800094c:	dc05      	bgt.n	800095a <__aeabi_dsub+0x6fe>
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	0436      	lsls	r6, r6, #16
 8000952:	4334      	orrs	r4, r6
 8000954:	4688      	mov	r8, r1
 8000956:	000e      	movs	r6, r1
 8000958:	e6d1      	b.n	80006fe <__aeabi_dsub+0x4a2>
 800095a:	4688      	mov	r8, r1
 800095c:	000e      	movs	r6, r1
 800095e:	2501      	movs	r5, #1
 8000960:	e6de      	b.n	8000720 <__aeabi_dsub+0x4c4>
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	000007ff 	.word	0x000007ff
 8000968:	ff7fffff 	.word	0xff7fffff
 800096c:	000007fe 	.word	0x000007fe
 8000970:	2d00      	cmp	r5, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_dsub+0x71a>
 8000974:	e668      	b.n	8000648 <__aeabi_dsub+0x3ec>
 8000976:	464b      	mov	r3, r9
 8000978:	1bd9      	subs	r1, r3, r7
 800097a:	2f00      	cmp	r7, #0
 800097c:	d101      	bne.n	8000982 <__aeabi_dsub+0x726>
 800097e:	468a      	mov	sl, r1
 8000980:	e5a7      	b.n	80004d2 <__aeabi_dsub+0x276>
 8000982:	2701      	movs	r7, #1
 8000984:	2938      	cmp	r1, #56	@ 0x38
 8000986:	dd00      	ble.n	800098a <__aeabi_dsub+0x72e>
 8000988:	e5c7      	b.n	800051a <__aeabi_dsub+0x2be>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0412      	lsls	r2, r2, #16
 800098e:	4314      	orrs	r4, r2
 8000990:	e5af      	b.n	80004f2 <__aeabi_dsub+0x296>
 8000992:	46c0      	nop			@ (mov r8, r8)

08000994 <__aeabi_d2iz>:
 8000994:	000b      	movs	r3, r1
 8000996:	0002      	movs	r2, r0
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d16      	ldr	r5, [pc, #88]	@ (80009f4 <__aeabi_d2iz+0x60>)
 800099c:	030c      	lsls	r4, r1, #12
 800099e:	b082      	sub	sp, #8
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	2000      	movs	r0, #0
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	0b24      	lsrs	r4, r4, #12
 80009aa:	0d49      	lsrs	r1, r1, #21
 80009ac:	0fde      	lsrs	r6, r3, #31
 80009ae:	42a9      	cmp	r1, r5
 80009b0:	dd04      	ble.n	80009bc <__aeabi_d2iz+0x28>
 80009b2:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <__aeabi_d2iz+0x64>)
 80009b4:	4281      	cmp	r1, r0
 80009b6:	dd03      	ble.n	80009c0 <__aeabi_d2iz+0x2c>
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <__aeabi_d2iz+0x68>)
 80009ba:	18f0      	adds	r0, r6, r3
 80009bc:	b002      	add	sp, #8
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	2080      	movs	r0, #128	@ 0x80
 80009c2:	0340      	lsls	r0, r0, #13
 80009c4:	4320      	orrs	r0, r4
 80009c6:	4c0e      	ldr	r4, [pc, #56]	@ (8000a00 <__aeabi_d2iz+0x6c>)
 80009c8:	1a64      	subs	r4, r4, r1
 80009ca:	2c1f      	cmp	r4, #31
 80009cc:	dd08      	ble.n	80009e0 <__aeabi_d2iz+0x4c>
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <__aeabi_d2iz+0x70>)
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	40d8      	lsrs	r0, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4258      	negs	r0, r3
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d1ef      	bne.n	80009bc <__aeabi_d2iz+0x28>
 80009dc:	0018      	movs	r0, r3
 80009de:	e7ed      	b.n	80009bc <__aeabi_d2iz+0x28>
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <__aeabi_d2iz+0x74>)
 80009e2:	9a00      	ldr	r2, [sp, #0]
 80009e4:	469c      	mov	ip, r3
 80009e6:	0003      	movs	r3, r0
 80009e8:	4461      	add	r1, ip
 80009ea:	408b      	lsls	r3, r1
 80009ec:	40e2      	lsrs	r2, r4
 80009ee:	4313      	orrs	r3, r2
 80009f0:	e7f1      	b.n	80009d6 <__aeabi_d2iz+0x42>
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	000003fe 	.word	0x000003fe
 80009f8:	0000041d 	.word	0x0000041d
 80009fc:	7fffffff 	.word	0x7fffffff
 8000a00:	00000433 	.word	0x00000433
 8000a04:	00000413 	.word	0x00000413
 8000a08:	fffffbed 	.word	0xfffffbed

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	0010      	movs	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	0019      	movs	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	46c0      	nop			@ (mov r8, r8)

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a1e:	f000 f909 	bl	8000c34 <__ledf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d401      	bmi.n	8000a2a <__aeabi_cdcmpeq+0xe>
 8000a26:	2100      	movs	r1, #0
 8000a28:	42c8      	cmn	r0, r1
 8000a2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	f000 f849 	bl	8000ac4 <__eqdf2>
 8000a32:	4240      	negs	r0, r0
 8000a34:	3001      	adds	r0, #1
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <__aeabi_dcmplt>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	f000 f8fb 	bl	8000c34 <__ledf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	db01      	blt.n	8000a46 <__aeabi_dcmplt+0xe>
 8000a42:	2000      	movs	r0, #0
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	2001      	movs	r0, #1
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)

08000a4c <__aeabi_dcmple>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	f000 f8f1 	bl	8000c34 <__ledf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	dd01      	ble.n	8000a5a <__aeabi_dcmple+0xe>
 8000a56:	2000      	movs	r0, #0
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)

08000a60 <__aeabi_dcmpgt>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	f000 f873 	bl	8000b4c <__gedf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	dc01      	bgt.n	8000a6e <__aeabi_dcmpgt+0xe>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	2001      	movs	r0, #1
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)

08000a74 <__aeabi_dcmpge>:
 8000a74:	b510      	push	{r4, lr}
 8000a76:	f000 f869 	bl	8000b4c <__gedf2>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	da01      	bge.n	8000a82 <__aeabi_dcmpge+0xe>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	2001      	movs	r0, #1
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)

08000a88 <__clzsi2>:
 8000a88:	211c      	movs	r1, #28
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d301      	bcc.n	8000a96 <__clzsi2+0xe>
 8000a92:	0c00      	lsrs	r0, r0, #16
 8000a94:	3910      	subs	r1, #16
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	4298      	cmp	r0, r3
 8000a9a:	d301      	bcc.n	8000aa0 <__clzsi2+0x18>
 8000a9c:	0a00      	lsrs	r0, r0, #8
 8000a9e:	3908      	subs	r1, #8
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d301      	bcc.n	8000aaa <__clzsi2+0x22>
 8000aa6:	0900      	lsrs	r0, r0, #4
 8000aa8:	3904      	subs	r1, #4
 8000aaa:	a202      	add	r2, pc, #8	@ (adr r2, 8000ab4 <__clzsi2+0x2c>)
 8000aac:	5c10      	ldrb	r0, [r2, r0]
 8000aae:	1840      	adds	r0, r0, r1
 8000ab0:	4770      	bx	lr
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	02020304 	.word	0x02020304
 8000ab8:	01010101 	.word	0x01010101
	...

08000ac4 <__eqdf2>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	4657      	mov	r7, sl
 8000ac8:	46de      	mov	lr, fp
 8000aca:	464e      	mov	r6, r9
 8000acc:	4645      	mov	r5, r8
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	000d      	movs	r5, r1
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	0fe8      	lsrs	r0, r5, #31
 8000ad6:	4683      	mov	fp, r0
 8000ad8:	0309      	lsls	r1, r1, #12
 8000ada:	0fd8      	lsrs	r0, r3, #31
 8000adc:	0b09      	lsrs	r1, r1, #12
 8000ade:	4682      	mov	sl, r0
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <__eqdf2+0x84>)
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	031f      	lsls	r7, r3, #12
 8000ae6:	0069      	lsls	r1, r5, #1
 8000ae8:	005e      	lsls	r6, r3, #1
 8000aea:	0d49      	lsrs	r1, r1, #21
 8000aec:	0b3f      	lsrs	r7, r7, #12
 8000aee:	0d76      	lsrs	r6, r6, #21
 8000af0:	4281      	cmp	r1, r0
 8000af2:	d018      	beq.n	8000b26 <__eqdf2+0x62>
 8000af4:	4286      	cmp	r6, r0
 8000af6:	d00f      	beq.n	8000b18 <__eqdf2+0x54>
 8000af8:	2001      	movs	r0, #1
 8000afa:	42b1      	cmp	r1, r6
 8000afc:	d10d      	bne.n	8000b1a <__eqdf2+0x56>
 8000afe:	45bc      	cmp	ip, r7
 8000b00:	d10b      	bne.n	8000b1a <__eqdf2+0x56>
 8000b02:	4294      	cmp	r4, r2
 8000b04:	d109      	bne.n	8000b1a <__eqdf2+0x56>
 8000b06:	45d3      	cmp	fp, sl
 8000b08:	d01c      	beq.n	8000b44 <__eqdf2+0x80>
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d105      	bne.n	8000b1a <__eqdf2+0x56>
 8000b0e:	4660      	mov	r0, ip
 8000b10:	4320      	orrs	r0, r4
 8000b12:	1e43      	subs	r3, r0, #1
 8000b14:	4198      	sbcs	r0, r3
 8000b16:	e000      	b.n	8000b1a <__eqdf2+0x56>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b1c:	46bb      	mov	fp, r7
 8000b1e:	46b2      	mov	sl, r6
 8000b20:	46a9      	mov	r9, r5
 8000b22:	46a0      	mov	r8, r4
 8000b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b26:	2001      	movs	r0, #1
 8000b28:	428e      	cmp	r6, r1
 8000b2a:	d1f6      	bne.n	8000b1a <__eqdf2+0x56>
 8000b2c:	4661      	mov	r1, ip
 8000b2e:	4339      	orrs	r1, r7
 8000b30:	000f      	movs	r7, r1
 8000b32:	4317      	orrs	r7, r2
 8000b34:	4327      	orrs	r7, r4
 8000b36:	d1f0      	bne.n	8000b1a <__eqdf2+0x56>
 8000b38:	465b      	mov	r3, fp
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	1a98      	subs	r0, r3, r2
 8000b3e:	1e43      	subs	r3, r0, #1
 8000b40:	4198      	sbcs	r0, r3
 8000b42:	e7ea      	b.n	8000b1a <__eqdf2+0x56>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e7e8      	b.n	8000b1a <__eqdf2+0x56>
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__gedf2>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	4657      	mov	r7, sl
 8000b50:	464e      	mov	r6, r9
 8000b52:	4645      	mov	r5, r8
 8000b54:	46de      	mov	lr, fp
 8000b56:	b5e0      	push	{r5, r6, r7, lr}
 8000b58:	000d      	movs	r5, r1
 8000b5a:	030f      	lsls	r7, r1, #12
 8000b5c:	0b39      	lsrs	r1, r7, #12
 8000b5e:	b083      	sub	sp, #12
 8000b60:	0004      	movs	r4, r0
 8000b62:	4680      	mov	r8, r0
 8000b64:	9101      	str	r1, [sp, #4]
 8000b66:	0058      	lsls	r0, r3, #1
 8000b68:	0fe9      	lsrs	r1, r5, #31
 8000b6a:	4f31      	ldr	r7, [pc, #196]	@ (8000c30 <__gedf2+0xe4>)
 8000b6c:	0d40      	lsrs	r0, r0, #21
 8000b6e:	468c      	mov	ip, r1
 8000b70:	006e      	lsls	r6, r5, #1
 8000b72:	0319      	lsls	r1, r3, #12
 8000b74:	4682      	mov	sl, r0
 8000b76:	4691      	mov	r9, r2
 8000b78:	0d76      	lsrs	r6, r6, #21
 8000b7a:	0b09      	lsrs	r1, r1, #12
 8000b7c:	0fd8      	lsrs	r0, r3, #31
 8000b7e:	42be      	cmp	r6, r7
 8000b80:	d01f      	beq.n	8000bc2 <__gedf2+0x76>
 8000b82:	45ba      	cmp	sl, r7
 8000b84:	d00f      	beq.n	8000ba6 <__gedf2+0x5a>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d12f      	bne.n	8000bea <__gedf2+0x9e>
 8000b8a:	4655      	mov	r5, sl
 8000b8c:	9e01      	ldr	r6, [sp, #4]
 8000b8e:	4334      	orrs	r4, r6
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d127      	bne.n	8000be4 <__gedf2+0x98>
 8000b94:	430a      	orrs	r2, r1
 8000b96:	d03a      	beq.n	8000c0e <__gedf2+0xc2>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d145      	bne.n	8000c28 <__gedf2+0xdc>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d11a      	bne.n	8000bd6 <__gedf2+0x8a>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e017      	b.n	8000bd6 <__gedf2+0x8a>
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	d13b      	bne.n	8000c22 <__gedf2+0xd6>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d102      	bne.n	8000bb4 <__gedf2+0x68>
 8000bae:	9f01      	ldr	r7, [sp, #4]
 8000bb0:	4327      	orrs	r7, r4
 8000bb2:	d0f3      	beq.n	8000b9c <__gedf2+0x50>
 8000bb4:	4584      	cmp	ip, r0
 8000bb6:	d109      	bne.n	8000bcc <__gedf2+0x80>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <__gedf2+0x54>
 8000bbe:	4660      	mov	r0, ip
 8000bc0:	e009      	b.n	8000bd6 <__gedf2+0x8a>
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	4327      	orrs	r7, r4
 8000bc6:	d12c      	bne.n	8000c22 <__gedf2+0xd6>
 8000bc8:	45b2      	cmp	sl, r6
 8000bca:	d024      	beq.n	8000c16 <__gedf2+0xca>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	2002      	movs	r0, #2
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4018      	ands	r0, r3
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bda:	46bb      	mov	fp, r7
 8000bdc:	46b2      	mov	sl, r6
 8000bde:	46a9      	mov	r9, r5
 8000be0:	46a0      	mov	r8, r4
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d0d9      	beq.n	8000b9c <__gedf2+0x50>
 8000be8:	e7e4      	b.n	8000bb4 <__gedf2+0x68>
 8000bea:	4654      	mov	r4, sl
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d0ed      	beq.n	8000bcc <__gedf2+0x80>
 8000bf0:	4584      	cmp	ip, r0
 8000bf2:	d1eb      	bne.n	8000bcc <__gedf2+0x80>
 8000bf4:	4556      	cmp	r6, sl
 8000bf6:	dce9      	bgt.n	8000bcc <__gedf2+0x80>
 8000bf8:	dbde      	blt.n	8000bb8 <__gedf2+0x6c>
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d8e5      	bhi.n	8000bcc <__gedf2+0x80>
 8000c00:	d1da      	bne.n	8000bb8 <__gedf2+0x6c>
 8000c02:	45c8      	cmp	r8, r9
 8000c04:	d8e2      	bhi.n	8000bcc <__gedf2+0x80>
 8000c06:	2000      	movs	r0, #0
 8000c08:	45c8      	cmp	r8, r9
 8000c0a:	d2e4      	bcs.n	8000bd6 <__gedf2+0x8a>
 8000c0c:	e7d4      	b.n	8000bb8 <__gedf2+0x6c>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d0e0      	beq.n	8000bd6 <__gedf2+0x8a>
 8000c14:	e7da      	b.n	8000bcc <__gedf2+0x80>
 8000c16:	4311      	orrs	r1, r2
 8000c18:	d103      	bne.n	8000c22 <__gedf2+0xd6>
 8000c1a:	4584      	cmp	ip, r0
 8000c1c:	d1d6      	bne.n	8000bcc <__gedf2+0x80>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e7d9      	b.n	8000bd6 <__gedf2+0x8a>
 8000c22:	2002      	movs	r0, #2
 8000c24:	4240      	negs	r0, r0
 8000c26:	e7d6      	b.n	8000bd6 <__gedf2+0x8a>
 8000c28:	4584      	cmp	ip, r0
 8000c2a:	d0e6      	beq.n	8000bfa <__gedf2+0xae>
 8000c2c:	e7ce      	b.n	8000bcc <__gedf2+0x80>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	000007ff 	.word	0x000007ff

08000c34 <__ledf2>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	4657      	mov	r7, sl
 8000c38:	464e      	mov	r6, r9
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	000d      	movs	r5, r1
 8000c42:	030f      	lsls	r7, r1, #12
 8000c44:	0004      	movs	r4, r0
 8000c46:	4680      	mov	r8, r0
 8000c48:	0fe8      	lsrs	r0, r5, #31
 8000c4a:	0b39      	lsrs	r1, r7, #12
 8000c4c:	4684      	mov	ip, r0
 8000c4e:	b083      	sub	sp, #12
 8000c50:	0058      	lsls	r0, r3, #1
 8000c52:	4f30      	ldr	r7, [pc, #192]	@ (8000d14 <__ledf2+0xe0>)
 8000c54:	0d40      	lsrs	r0, r0, #21
 8000c56:	9101      	str	r1, [sp, #4]
 8000c58:	031e      	lsls	r6, r3, #12
 8000c5a:	0069      	lsls	r1, r5, #1
 8000c5c:	4682      	mov	sl, r0
 8000c5e:	4691      	mov	r9, r2
 8000c60:	0d49      	lsrs	r1, r1, #21
 8000c62:	0b36      	lsrs	r6, r6, #12
 8000c64:	0fd8      	lsrs	r0, r3, #31
 8000c66:	42b9      	cmp	r1, r7
 8000c68:	d020      	beq.n	8000cac <__ledf2+0x78>
 8000c6a:	45ba      	cmp	sl, r7
 8000c6c:	d00f      	beq.n	8000c8e <__ledf2+0x5a>
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d12b      	bne.n	8000cca <__ledf2+0x96>
 8000c72:	9901      	ldr	r1, [sp, #4]
 8000c74:	430c      	orrs	r4, r1
 8000c76:	4651      	mov	r1, sl
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d137      	bne.n	8000cec <__ledf2+0xb8>
 8000c7c:	4332      	orrs	r2, r6
 8000c7e:	d038      	beq.n	8000cf2 <__ledf2+0xbe>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d144      	bne.n	8000d0e <__ledf2+0xda>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d119      	bne.n	8000cbc <__ledf2+0x88>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	e016      	b.n	8000cbc <__ledf2+0x88>
 8000c8e:	4316      	orrs	r6, r2
 8000c90:	d113      	bne.n	8000cba <__ledf2+0x86>
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d102      	bne.n	8000c9c <__ledf2+0x68>
 8000c96:	9f01      	ldr	r7, [sp, #4]
 8000c98:	4327      	orrs	r7, r4
 8000c9a:	d0f3      	beq.n	8000c84 <__ledf2+0x50>
 8000c9c:	4584      	cmp	ip, r0
 8000c9e:	d020      	beq.n	8000ce2 <__ledf2+0xae>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4018      	ands	r0, r3
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e007      	b.n	8000cbc <__ledf2+0x88>
 8000cac:	9f01      	ldr	r7, [sp, #4]
 8000cae:	4327      	orrs	r7, r4
 8000cb0:	d103      	bne.n	8000cba <__ledf2+0x86>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d1f4      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cb6:	4316      	orrs	r6, r2
 8000cb8:	d01f      	beq.n	8000cfa <__ledf2+0xc6>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	4654      	mov	r4, sl
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d0e7      	beq.n	8000ca0 <__ledf2+0x6c>
 8000cd0:	4584      	cmp	ip, r0
 8000cd2:	d1e5      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cd4:	4551      	cmp	r1, sl
 8000cd6:	dce3      	bgt.n	8000ca0 <__ledf2+0x6c>
 8000cd8:	db03      	blt.n	8000ce2 <__ledf2+0xae>
 8000cda:	9b01      	ldr	r3, [sp, #4]
 8000cdc:	42b3      	cmp	r3, r6
 8000cde:	d8df      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000ce0:	d00f      	beq.n	8000d02 <__ledf2+0xce>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0cf      	beq.n	8000c88 <__ledf2+0x54>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e7e7      	b.n	8000cbc <__ledf2+0x88>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d0c9      	beq.n	8000c84 <__ledf2+0x50>
 8000cf0:	e7d4      	b.n	8000c9c <__ledf2+0x68>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d0e1      	beq.n	8000cbc <__ledf2+0x88>
 8000cf8:	e7d2      	b.n	8000ca0 <__ledf2+0x6c>
 8000cfa:	4584      	cmp	ip, r0
 8000cfc:	d1d0      	bne.n	8000ca0 <__ledf2+0x6c>
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e7dc      	b.n	8000cbc <__ledf2+0x88>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d8cc      	bhi.n	8000ca0 <__ledf2+0x6c>
 8000d06:	2000      	movs	r0, #0
 8000d08:	45c8      	cmp	r8, r9
 8000d0a:	d2d7      	bcs.n	8000cbc <__ledf2+0x88>
 8000d0c:	e7e9      	b.n	8000ce2 <__ledf2+0xae>
 8000d0e:	4584      	cmp	ip, r0
 8000d10:	d0e3      	beq.n	8000cda <__ledf2+0xa6>
 8000d12:	e7c5      	b.n	8000ca0 <__ledf2+0x6c>
 8000d14:	000007ff 	.word	0x000007ff

08000d18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3308      	adds	r3, #8
 8000d24:	001a      	movs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4252      	negs	r2, r2
 8000d30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3308      	adds	r3, #8
 8000d36:	001a      	movs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3308      	adds	r3, #8
 8000d40:	001a      	movs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	d103      	bne.n	8000d88 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e00c      	b.n	8000da2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e002      	b.n	8000d96 <vListInsert+0x2c>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d2f6      	bcs.n	8000d90 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6892      	ldr	r2, [r2, #8]
 8000dec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d103      	bne.n	8000e0a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e26:	b5b0      	push	{r4, r5, r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <xQueueGenericReset+0x1e>
 8000e3e:	b672      	cpsid	i
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	e7fd      	b.n	8000e40 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <xQueueGenericReset+0x26>
 8000e4a:	e06a      	b.n	8000f22 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d066      	beq.n	8000f22 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	0c15      	lsrs	r5, r2, #16
 8000e60:	0c19      	lsrs	r1, r3, #16
 8000e62:	b2a8      	uxth	r0, r5
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d104      	bne.n	8000e72 <xQueueGenericReset+0x4c>
 8000e68:	b288      	uxth	r0, r1
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d013      	beq.n	8000e96 <xQueueGenericReset+0x70>
 8000e6e:	1c10      	adds	r0, r2, #0
 8000e70:	e004      	b.n	8000e7c <xQueueGenericReset+0x56>
 8000e72:	b289      	uxth	r1, r1
 8000e74:	2900      	cmp	r1, #0
 8000e76:	d10d      	bne.n	8000e94 <xQueueGenericReset+0x6e>
 8000e78:	1c29      	adds	r1, r5, #0
 8000e7a:	1c18      	adds	r0, r3, #0
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	435a      	muls	r2, r3
 8000e82:	b283      	uxth	r3, r0
 8000e84:	b289      	uxth	r1, r1
 8000e86:	434b      	muls	r3, r1
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	141b      	asrs	r3, r3, #16
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d000      	beq.n	8000e96 <xQueueGenericReset+0x70>
 8000e94:	2401      	movs	r4, #1
 8000e96:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8000e98:	d143      	bne.n	8000f22 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8000e9a:	f002 fc69 	bl	8003770 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	434b      	muls	r3, r1
 8000eac:	18d2      	adds	r2, r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec8:	1e59      	subs	r1, r3, #1
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	434b      	muls	r3, r1
 8000ed0:	18d2      	adds	r2, r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2244      	movs	r2, #68	@ 0x44
 8000eda:	21ff      	movs	r1, #255	@ 0xff
 8000edc:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2245      	movs	r2, #69	@ 0x45
 8000ee2:	21ff      	movs	r1, #255	@ 0xff
 8000ee4:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10d      	bne.n	8000f08 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fee3 	bl	8002cc4 <xTaskRemoveFromEventList>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d00c      	beq.n	8000f1c <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f02:	f002 fc25 	bl	8003750 <vPortYield>
 8000f06:	e009      	b.n	8000f1c <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff03 	bl	8000d18 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3324      	adds	r3, #36	@ 0x24
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fefe 	bl	8000d18 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f1c:	f002 fc3a 	bl	8003794 <vPortExitCritical>
 8000f20:	e001      	b.n	8000f26 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <xQueueGenericReset+0x10c>
 8000f2c:	b672      	cpsid	i
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	e7fd      	b.n	8000f2e <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bdb0      	pop	{r4, r5, r7, pc}

08000f3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b08b      	sub	sp, #44	@ 0x2c
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d065      	beq.n	8001020 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f54:	2000      	movs	r0, #0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	0c19      	lsrs	r1, r3, #16
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1c1e      	adds	r6, r3, #0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	1c15      	adds	r5, r2, #0
 8000f66:	b28a      	uxth	r2, r1
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d105      	bne.n	8000f78 <xQueueGenericCreate+0x3c>
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d013      	beq.n	8000f9a <xQueueGenericCreate+0x5e>
 8000f72:	1c19      	adds	r1, r3, #0
 8000f74:	1c34      	adds	r4, r6, #0
 8000f76:	e003      	b.n	8000f80 <xQueueGenericCreate+0x44>
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <xQueueGenericCreate+0x5c>
 8000f7e:	1c2c      	adds	r4, r5, #0
 8000f80:	b2b3      	uxth	r3, r6
 8000f82:	b2aa      	uxth	r2, r5
 8000f84:	435a      	muls	r2, r3
 8000f86:	b2a3      	uxth	r3, r4
 8000f88:	b289      	uxth	r1, r1
 8000f8a:	434b      	muls	r3, r1
 8000f8c:	0c12      	lsrs	r2, r2, #16
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	141b      	asrs	r3, r3, #16
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d000      	beq.n	8000f9a <xQueueGenericCreate+0x5e>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f9c:	d140      	bne.n	8001020 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000fa4:	3351      	adds	r3, #81	@ 0x51
 8000fa6:	d83b      	bhi.n	8001020 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4353      	muls	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3350      	adds	r3, #80	@ 0x50
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f002 fc73 	bl	80038a0 <pvPortMalloc>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00f      	beq.n	8000fe4 <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3350      	adds	r3, #80	@ 0x50
 8000fcc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781c      	ldrb	r4, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	0023      	movs	r3, r4
 8000fde:	f000 f82f 	bl	8001040 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000fe2:	e023      	b.n	800102c <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000fe4:	f002 fd9e 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f002 fcf0 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <xQueueGenericCreate+0xfc>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <xQueueGenericCreate+0xf0>
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <xQueueGenericCreate+0x100>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	3340      	adds	r3, #64	@ 0x40
 800100a:	b2db      	uxtb	r3, r3
 800100c:	0018      	movs	r0, r3
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <xQueueGenericCreate+0x100>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	2200      	movs	r2, #0
 8001018:	0019      	movs	r1, r3
 800101a:	f003 fde9 	bl	8004bf0 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 800101e:	e005      	b.n	800102c <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <xQueueGenericCreate+0xf2>
 8001026:	b672      	cpsid	i
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	e7fd      	b.n	8001028 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 800102c:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800102e:	69fb      	ldr	r3, [r7, #28]
    }
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b009      	add	sp, #36	@ 0x24
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001038:	200019c8 	.word	0x200019c8
 800103c:	20000008 	.word	0x20000008

08001040 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	001a      	movs	r2, r3
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	6a3a      	ldr	r2, [r7, #32]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e002      	b.n	8001066 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	2101      	movs	r1, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fed5 	bl	8000e26 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	1cfa      	adds	r2, r7, #3
 8001080:	214c      	movs	r1, #76	@ 0x4c
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fc86 	bl	800399a <prvTraceGetQueueType>
 800108e:	0003      	movs	r3, r0
 8001090:	001a      	movs	r2, r3
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	0018      	movs	r0, r3
 8001098:	f004 f83a 	bl	8005110 <prvTraceGetObjectHandle>
 800109c:	0003      	movs	r3, r0
 800109e:	001a      	movs	r2, r3
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f002 fcf4 	bl	8003a92 <prvTraceSetQueueNumberLow16>
 80010aa:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <prvInitialiseNewQueue+0x140>)
 80010ac:	881a      	ldrh	r2, [r3, #0]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 fd07 	bl	8003ac6 <prvTraceSetQueueNumberHigh16>
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 fc6d 	bl	800399a <prvTraceGetQueueType>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 80010c6:	5c9c      	ldrb	r4, [r3, r2]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f002 fcc4 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 80010d0:	0003      	movs	r3, r0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	0019      	movs	r1, r3
 80010d6:	0020      	movs	r0, r4
 80010d8:	f004 f8ca 	bl	8005270 <prvMarkObjectAsUsed>
 80010dc:	f002 fd22 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 fc74 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80010e8:	0003      	movs	r3, r0
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <prvInitialiseNewQueue+0x144>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4013      	ands	r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d029      	beq.n	800114c <prvInitialiseNewQueue+0x10c>
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 fcba 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001100:	0003      	movs	r3, r0
 8001102:	001a      	movs	r2, r3
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <prvInitialiseNewQueue+0x144>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4013      	ands	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01d      	beq.n	800114c <prvInitialiseNewQueue+0x10c>
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0018      	movs	r0, r3
 8001114:	f002 fc41 	bl	800399a <prvTraceGetQueueType>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	3318      	adds	r3, #24
 8001122:	b2db      	uxtb	r3, r3
 8001124:	001d      	movs	r5, r3
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	0018      	movs	r0, r3
 800112a:	f002 fc36 	bl	800399a <prvTraceGetQueueType>
 800112e:	0003      	movs	r3, r0
 8001130:	001a      	movs	r2, r3
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 8001134:	5c9c      	ldrb	r4, [r3, r2]
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	0018      	movs	r0, r3
 800113a:	f002 fc8d 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 800113e:	0003      	movs	r3, r0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	001a      	movs	r2, r3
 8001144:	0021      	movs	r1, r4
 8001146:	0028      	movs	r0, r5
 8001148:	f003 fd52 	bl	8004bf0 <prvTraceStoreKernelCall>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	0018      	movs	r0, r3
 8001150:	f002 fc23 	bl	800399a <prvTraceGetQueueType>
 8001154:	0003      	movs	r3, r0
 8001156:	001a      	movs	r2, r3
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <prvInitialiseNewQueue+0x13c>)
 800115a:	5c9c      	ldrb	r4, [r3, r2]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	0018      	movs	r0, r3
 8001160:	f002 fc7a 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001164:	0003      	movs	r3, r0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2200      	movs	r2, #0
 800116a:	0019      	movs	r1, r3
 800116c:	0020      	movs	r0, r4
 800116e:	f003 fee3 	bl	8004f38 <prvTraceSetObjectState>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	200019ca 	.word	0x200019ca
 8001184:	200019c8 	.word	0x200019c8

08001188 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <xQueueGenericSend+0x22>
 80011a4:	b672      	cpsid	i
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	e7fd      	b.n	80011a6 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <xQueueGenericSend+0x30>
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <xQueueGenericSend+0x34>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <xQueueGenericSend+0x36>
 80011bc:	2300      	movs	r3, #0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <xQueueGenericSend+0x40>
 80011c2:	b672      	cpsid	i
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	e7fd      	b.n	80011c4 <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d103      	bne.n	80011d6 <xQueueGenericSend+0x4e>
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <xQueueGenericSend+0x52>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <xQueueGenericSend+0x54>
 80011da:	2300      	movs	r3, #0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <xQueueGenericSend+0x5e>
 80011e0:	b672      	cpsid	i
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	e7fd      	b.n	80011e2 <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011e6:	f001 ff57 	bl	8003098 <xTaskGetSchedulerState>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d102      	bne.n	80011f4 <xQueueGenericSend+0x6c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <xQueueGenericSend+0x70>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <xQueueGenericSend+0x72>
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <xQueueGenericSend+0x7c>
 80011fe:	b672      	cpsid	i
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	e7fd      	b.n	8001200 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001204:	f002 fab4 	bl	8003770 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001210:	429a      	cmp	r2, r3
 8001212:	d303      	bcc.n	800121c <xQueueGenericSend+0x94>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d000      	beq.n	800121c <xQueueGenericSend+0x94>
 800121a:	e07f      	b.n	800131c <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 800121c:	f002 fc82 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001220:	0003      	movs	r3, r0
 8001222:	0018      	movs	r0, r3
 8001224:	f002 fbd4 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001228:	0003      	movs	r3, r0
 800122a:	001a      	movs	r2, r3
 800122c:	4bc7      	ldr	r3, [pc, #796]	@ (800154c <xQueueGenericSend+0x3c4>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	4013      	ands	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d02e      	beq.n	8001296 <xQueueGenericSend+0x10e>
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	0018      	movs	r0, r3
 800123c:	f002 fc1a 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001240:	0003      	movs	r3, r0
 8001242:	001a      	movs	r2, r3
 8001244:	4bc1      	ldr	r3, [pc, #772]	@ (800154c <xQueueGenericSend+0x3c4>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4013      	ands	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d022      	beq.n	8001296 <xQueueGenericSend+0x10e>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10b      	bne.n	800126e <xQueueGenericSend+0xe6>
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	0018      	movs	r0, r3
 800125a:	f002 fb9e 	bl	800399a <prvTraceGetQueueType>
 800125e:	0003      	movs	r3, r0
 8001260:	001a      	movs	r2, r3
 8001262:	4bbb      	ldr	r3, [pc, #748]	@ (8001550 <xQueueGenericSend+0x3c8>)
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	3320      	adds	r3, #32
 8001268:	b2db      	uxtb	r3, r3
 800126a:	001d      	movs	r5, r3
 800126c:	e000      	b.n	8001270 <xQueueGenericSend+0xe8>
 800126e:	2525      	movs	r5, #37	@ 0x25
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	0018      	movs	r0, r3
 8001274:	f002 fb91 	bl	800399a <prvTraceGetQueueType>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	4bb4      	ldr	r3, [pc, #720]	@ (8001550 <xQueueGenericSend+0x3c8>)
 800127e:	5c9c      	ldrb	r4, [r3, r2]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	0018      	movs	r0, r3
 8001284:	f002 fbe8 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001288:	0003      	movs	r3, r0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	001a      	movs	r2, r3
 800128e:	0021      	movs	r1, r4
 8001290:	0028      	movs	r0, r5
 8001292:	f003 fcad 	bl	8004bf0 <prvTraceStoreKernelCall>
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	0018      	movs	r0, r3
 800129a:	f002 fb7e 	bl	800399a <prvTraceGetQueueType>
 800129e:	0003      	movs	r3, r0
 80012a0:	001a      	movs	r2, r3
 80012a2:	4bab      	ldr	r3, [pc, #684]	@ (8001550 <xQueueGenericSend+0x3c8>)
 80012a4:	5c9c      	ldrb	r4, [r3, r2]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f002 fbd5 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 80012ae:	0003      	movs	r3, r0
 80012b0:	b2dd      	uxtb	r5, r3
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 fb70 	bl	800399a <prvTraceGetQueueType>
 80012ba:	0003      	movs	r3, r0
 80012bc:	001a      	movs	r2, r3
 80012be:	4ba4      	ldr	r3, [pc, #656]	@ (8001550 <xQueueGenericSend+0x3c8>)
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d005      	beq.n	80012d2 <xQueueGenericSend+0x14a>
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	e000      	b.n	80012d4 <xQueueGenericSend+0x14c>
 80012d2:	2300      	movs	r3, #0
 80012d4:	001a      	movs	r2, r3
 80012d6:	0029      	movs	r1, r5
 80012d8:	0020      	movs	r0, r4
 80012da:	f003 fe2d 	bl	8004f38 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 fd22 	bl	8001d2e <prvCopyDataToQueue>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	3324      	adds	r3, #36	@ 0x24
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fce2 	bl	8002cc4 <xTaskRemoveFromEventList>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d007      	beq.n	8001314 <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001304:	f002 fa24 	bl	8003750 <vPortYield>
 8001308:	e004      	b.n	8001314 <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001310:	f002 fa1e 	bl	8003750 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001314:	f002 fa3e 	bl	8003794 <vPortExitCritical>
                return pdPASS;
 8001318:	2301      	movs	r3, #1
 800131a:	e113      	b.n	8001544 <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d140      	bne.n	80013a4 <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001322:	f002 fa37 	bl	8003794 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001326:	f002 fbfd 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 800132a:	0003      	movs	r3, r0
 800132c:	0018      	movs	r0, r3
 800132e:	f002 fb4f 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001332:	0003      	movs	r3, r0
 8001334:	001a      	movs	r2, r3
 8001336:	4b85      	ldr	r3, [pc, #532]	@ (800154c <xQueueGenericSend+0x3c4>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	4013      	ands	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d02e      	beq.n	80013a0 <xQueueGenericSend+0x218>
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	0018      	movs	r0, r3
 8001346:	f002 fb95 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 800134a:	0003      	movs	r3, r0
 800134c:	001a      	movs	r2, r3
 800134e:	4b7f      	ldr	r3, [pc, #508]	@ (800154c <xQueueGenericSend+0x3c4>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	4013      	ands	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d022      	beq.n	80013a0 <xQueueGenericSend+0x218>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10b      	bne.n	8001378 <xQueueGenericSend+0x1f0>
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	0018      	movs	r0, r3
 8001364:	f002 fb19 	bl	800399a <prvTraceGetQueueType>
 8001368:	0003      	movs	r3, r0
 800136a:	001a      	movs	r2, r3
 800136c:	4b78      	ldr	r3, [pc, #480]	@ (8001550 <xQueueGenericSend+0x3c8>)
 800136e:	5c9b      	ldrb	r3, [r3, r2]
 8001370:	3348      	adds	r3, #72	@ 0x48
 8001372:	b2db      	uxtb	r3, r3
 8001374:	001d      	movs	r5, r3
 8001376:	e000      	b.n	800137a <xQueueGenericSend+0x1f2>
 8001378:	254d      	movs	r5, #77	@ 0x4d
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	0018      	movs	r0, r3
 800137e:	f002 fb0c 	bl	800399a <prvTraceGetQueueType>
 8001382:	0003      	movs	r3, r0
 8001384:	001a      	movs	r2, r3
 8001386:	4b72      	ldr	r3, [pc, #456]	@ (8001550 <xQueueGenericSend+0x3c8>)
 8001388:	5c9c      	ldrb	r4, [r3, r2]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	0018      	movs	r0, r3
 800138e:	f002 fb63 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001392:	0003      	movs	r3, r0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	001a      	movs	r2, r3
 8001398:	0021      	movs	r1, r4
 800139a:	0028      	movs	r0, r5
 800139c:	f003 fc28 	bl	8004bf0 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e0cf      	b.n	8001544 <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80013aa:	2314      	movs	r3, #20
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 fd6a 	bl	8002e88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013b8:	f002 f9ec 	bl	8003794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013bc:	f001 f92c 	bl	8002618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013c0:	f002 f9d6 	bl	8003770 <vPortEnterCritical>
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	2244      	movs	r2, #68	@ 0x44
 80013c8:	5c9b      	ldrb	r3, [r3, r2]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	d103      	bne.n	80013d8 <xQueueGenericSend+0x250>
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2244      	movs	r2, #68	@ 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	2245      	movs	r2, #69	@ 0x45
 80013dc:	5c9b      	ldrb	r3, [r3, r2]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	d103      	bne.n	80013ec <xQueueGenericSend+0x264>
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	2245      	movs	r2, #69	@ 0x45
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]
 80013ec:	f002 f9d2 	bl	8003794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013f0:	1d3a      	adds	r2, r7, #4
 80013f2:	2314      	movs	r3, #20
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f001 fd59 	bl	8002eb0 <xTaskCheckForTimeOut>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d15c      	bne.n	80014bc <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	0018      	movs	r0, r3
 8001406:	f000 fd88 	bl	8001f1a <prvIsQueueFull>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d04f      	beq.n	80014ae <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800140e:	f002 fb89 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001412:	0003      	movs	r3, r0
 8001414:	0018      	movs	r0, r3
 8001416:	f002 fadb 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 800141a:	0003      	movs	r3, r0
 800141c:	001a      	movs	r2, r3
 800141e:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <xQueueGenericSend+0x3c4>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	4013      	ands	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d02e      	beq.n	8001488 <xQueueGenericSend+0x300>
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	0018      	movs	r0, r3
 800142e:	f002 fb21 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001432:	0003      	movs	r3, r0
 8001434:	001a      	movs	r2, r3
 8001436:	4b45      	ldr	r3, [pc, #276]	@ (800154c <xQueueGenericSend+0x3c4>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4013      	ands	r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d022      	beq.n	8001488 <xQueueGenericSend+0x300>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10b      	bne.n	8001460 <xQueueGenericSend+0x2d8>
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	0018      	movs	r0, r3
 800144c:	f002 faa5 	bl	800399a <prvTraceGetQueueType>
 8001450:	0003      	movs	r3, r0
 8001452:	001a      	movs	r2, r3
 8001454:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <xQueueGenericSend+0x3c8>)
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	3370      	adds	r3, #112	@ 0x70
 800145a:	b2db      	uxtb	r3, r3
 800145c:	001d      	movs	r5, r3
 800145e:	e000      	b.n	8001462 <xQueueGenericSend+0x2da>
 8001460:	2575      	movs	r5, #117	@ 0x75
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fa98 	bl	800399a <prvTraceGetQueueType>
 800146a:	0003      	movs	r3, r0
 800146c:	001a      	movs	r2, r3
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <xQueueGenericSend+0x3c8>)
 8001470:	5c9c      	ldrb	r4, [r3, r2]
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	0018      	movs	r0, r3
 8001476:	f002 faef 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 800147a:	0003      	movs	r3, r0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	001a      	movs	r2, r3
 8001480:	0021      	movs	r1, r4
 8001482:	0028      	movs	r0, r5
 8001484:	f003 fbb4 	bl	8004bf0 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	3310      	adds	r3, #16
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f001 fb7b 	bl	8002b8c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fcca 	bl	8001e32 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800149e:	f001 f8c7 	bl	8002630 <xTaskResumeAll>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d000      	beq.n	80014a8 <xQueueGenericSend+0x320>
 80014a6:	e6ad      	b.n	8001204 <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 80014a8:	f002 f952 	bl	8003750 <vPortYield>
 80014ac:	e6aa      	b.n	8001204 <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 fcbe 	bl	8001e32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80014b6:	f001 f8bb 	bl	8002630 <xTaskResumeAll>
 80014ba:	e6a3      	b.n	8001204 <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 fcb7 	bl	8001e32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80014c4:	f001 f8b4 	bl	8002630 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80014c8:	f002 fb2c 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80014cc:	0003      	movs	r3, r0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f002 fa7e 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80014d4:	0003      	movs	r3, r0
 80014d6:	001a      	movs	r2, r3
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <xQueueGenericSend+0x3c4>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4013      	ands	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02e      	beq.n	8001542 <xQueueGenericSend+0x3ba>
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f002 fac4 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80014ec:	0003      	movs	r3, r0
 80014ee:	001a      	movs	r2, r3
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <xQueueGenericSend+0x3c4>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	4013      	ands	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d022      	beq.n	8001542 <xQueueGenericSend+0x3ba>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10b      	bne.n	800151a <xQueueGenericSend+0x392>
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	0018      	movs	r0, r3
 8001506:	f002 fa48 	bl	800399a <prvTraceGetQueueType>
 800150a:	0003      	movs	r3, r0
 800150c:	001a      	movs	r2, r3
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <xQueueGenericSend+0x3c8>)
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	3348      	adds	r3, #72	@ 0x48
 8001514:	b2db      	uxtb	r3, r3
 8001516:	001d      	movs	r5, r3
 8001518:	e000      	b.n	800151c <xQueueGenericSend+0x394>
 800151a:	254d      	movs	r5, #77	@ 0x4d
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	0018      	movs	r0, r3
 8001520:	f002 fa3b 	bl	800399a <prvTraceGetQueueType>
 8001524:	0003      	movs	r3, r0
 8001526:	001a      	movs	r2, r3
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <xQueueGenericSend+0x3c8>)
 800152a:	5c9c      	ldrb	r4, [r3, r2]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fa92 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001534:	0003      	movs	r3, r0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	001a      	movs	r2, r3
 800153a:	0021      	movs	r1, r4
 800153c:	0028      	movs	r0, r5
 800153e:	f003 fb57 	bl	8004bf0 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8001542:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b00a      	add	sp, #40	@ 0x28
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	200019c8 	.word	0x200019c8
 8001550:	20000008 	.word	0x20000008

08001554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <xQueueReceive+0x20>
 800156e:	b672      	cpsid	i
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	e7fd      	b.n	8001570 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <xQueueReceive+0x2e>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <xQueueReceive+0x32>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <xQueueReceive+0x34>
 8001586:	2300      	movs	r3, #0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <xQueueReceive+0x3e>
 800158c:	b672      	cpsid	i
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	e7fd      	b.n	800158e <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001592:	f001 fd81 	bl	8003098 <xTaskGetSchedulerState>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d102      	bne.n	80015a0 <xQueueReceive+0x4c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <xQueueReceive+0x50>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <xQueueReceive+0x52>
 80015a4:	2300      	movs	r3, #0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <xQueueReceive+0x5c>
 80015aa:	b672      	cpsid	i
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	e7fd      	b.n	80015ac <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015b0:	f002 f8de 	bl	8003770 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b8:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <xQueueReceive+0x6e>
 80015c0:	e07d      	b.n	80016be <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fc0c 	bl	8001de6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80015ce:	f002 faa9 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80015d2:	0003      	movs	r3, r0
 80015d4:	0018      	movs	r0, r3
 80015d6:	f002 f9fb 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80015da:	0003      	movs	r3, r0
 80015dc:	001a      	movs	r2, r3
 80015de:	4bd2      	ldr	r3, [pc, #840]	@ (8001928 <xQueueReceive+0x3d4>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	4013      	ands	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d029      	beq.n	800163e <xQueueReceive+0xea>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f002 fa41 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80015f2:	0003      	movs	r3, r0
 80015f4:	001a      	movs	r2, r3
 80015f6:	4bcc      	ldr	r3, [pc, #816]	@ (8001928 <xQueueReceive+0x3d4>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4013      	ands	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01d      	beq.n	800163e <xQueueReceive+0xea>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	0018      	movs	r0, r3
 8001606:	f002 f9c8 	bl	800399a <prvTraceGetQueueType>
 800160a:	0003      	movs	r3, r0
 800160c:	001a      	movs	r2, r3
 800160e:	4bc7      	ldr	r3, [pc, #796]	@ (800192c <xQueueReceive+0x3d8>)
 8001610:	5c9b      	ldrb	r3, [r3, r2]
 8001612:	3328      	adds	r3, #40	@ 0x28
 8001614:	b2db      	uxtb	r3, r3
 8001616:	001d      	movs	r5, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	0018      	movs	r0, r3
 800161c:	f002 f9bd 	bl	800399a <prvTraceGetQueueType>
 8001620:	0003      	movs	r3, r0
 8001622:	001a      	movs	r2, r3
 8001624:	4bc1      	ldr	r3, [pc, #772]	@ (800192c <xQueueReceive+0x3d8>)
 8001626:	5c9c      	ldrb	r4, [r3, r2]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fa14 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001630:	0003      	movs	r3, r0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	001a      	movs	r2, r3
 8001636:	0021      	movs	r1, r4
 8001638:	0028      	movs	r0, r5
 800163a:	f003 fad9 	bl	8004bf0 <prvTraceStoreKernelCall>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	0018      	movs	r0, r3
 8001642:	f002 f9aa 	bl	800399a <prvTraceGetQueueType>
 8001646:	0003      	movs	r3, r0
 8001648:	001a      	movs	r2, r3
 800164a:	4bb8      	ldr	r3, [pc, #736]	@ (800192c <xQueueReceive+0x3d8>)
 800164c:	5c9c      	ldrb	r4, [r3, r2]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	0018      	movs	r0, r3
 8001652:	f002 fa01 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001656:	0003      	movs	r3, r0
 8001658:	b2dd      	uxtb	r5, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	0018      	movs	r0, r3
 800165e:	f002 f99c 	bl	800399a <prvTraceGetQueueType>
 8001662:	0003      	movs	r3, r0
 8001664:	001a      	movs	r2, r3
 8001666:	4bb1      	ldr	r3, [pc, #708]	@ (800192c <xQueueReceive+0x3d8>)
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d108      	bne.n	8001680 <xQueueReceive+0x12c>
 800166e:	f002 fa59 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001672:	0003      	movs	r3, r0
 8001674:	0018      	movs	r0, r3
 8001676:	f002 f99d 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 800167a:	0003      	movs	r3, r0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e004      	b.n	800168a <xQueueReceive+0x136>
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	001a      	movs	r2, r3
 800168c:	0029      	movs	r1, r5
 800168e:	0020      	movs	r0, r4
 8001690:	f003 fc52 	bl	8004f38 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	3310      	adds	r3, #16
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 fb0b 	bl	8002cc4 <xTaskRemoveFromEventList>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016b2:	f002 f84d 	bl	8003750 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016b6:	f002 f86d 	bl	8003794 <vPortExitCritical>
                return pdPASS;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e12f      	b.n	800191e <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13b      	bne.n	800173c <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80016c4:	f002 f866 	bl	8003794 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80016c8:	f002 fa2c 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80016cc:	0003      	movs	r3, r0
 80016ce:	0018      	movs	r0, r3
 80016d0:	f002 f97e 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80016d4:	0003      	movs	r3, r0
 80016d6:	001a      	movs	r2, r3
 80016d8:	4b93      	ldr	r3, [pc, #588]	@ (8001928 <xQueueReceive+0x3d4>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	4013      	ands	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d029      	beq.n	8001738 <xQueueReceive+0x1e4>
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f002 f9c4 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <xQueueReceive+0x3d4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01d      	beq.n	8001738 <xQueueReceive+0x1e4>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	0018      	movs	r0, r3
 8001700:	f002 f94b 	bl	800399a <prvTraceGetQueueType>
 8001704:	0003      	movs	r3, r0
 8001706:	001a      	movs	r2, r3
 8001708:	4b88      	ldr	r3, [pc, #544]	@ (800192c <xQueueReceive+0x3d8>)
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	3350      	adds	r3, #80	@ 0x50
 800170e:	b2db      	uxtb	r3, r3
 8001710:	001d      	movs	r5, r3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	0018      	movs	r0, r3
 8001716:	f002 f940 	bl	800399a <prvTraceGetQueueType>
 800171a:	0003      	movs	r3, r0
 800171c:	001a      	movs	r2, r3
 800171e:	4b83      	ldr	r3, [pc, #524]	@ (800192c <xQueueReceive+0x3d8>)
 8001720:	5c9c      	ldrb	r4, [r3, r2]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	0018      	movs	r0, r3
 8001726:	f002 f997 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 800172a:	0003      	movs	r3, r0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	001a      	movs	r2, r3
 8001730:	0021      	movs	r1, r4
 8001732:	0028      	movs	r0, r5
 8001734:	f003 fa5c 	bl	8004bf0 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8001738:	2300      	movs	r3, #0
 800173a:	e0f0      	b.n	800191e <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001742:	2314      	movs	r3, #20
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	0018      	movs	r0, r3
 8001748:	f001 fb9e 	bl	8002e88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001750:	f002 f820 	bl	8003794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001754:	f000 ff60 	bl	8002618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001758:	f002 f80a 	bl	8003770 <vPortEnterCritical>
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2244      	movs	r2, #68	@ 0x44
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	3301      	adds	r3, #1
 8001766:	d103      	bne.n	8001770 <xQueueReceive+0x21c>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2244      	movs	r2, #68	@ 0x44
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2245      	movs	r2, #69	@ 0x45
 8001774:	5c9b      	ldrb	r3, [r3, r2]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	d103      	bne.n	8001784 <xQueueReceive+0x230>
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2245      	movs	r2, #69	@ 0x45
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]
 8001784:	f002 f806 	bl	8003794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001788:	1d3a      	adds	r2, r7, #4
 800178a:	2314      	movs	r3, #20
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f001 fb8d 	bl	8002eb0 <xTaskCheckForTimeOut>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d000      	beq.n	800179c <xQueueReceive+0x248>
 800179a:	e07a      	b.n	8001892 <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fba5 	bl	8001eee <prvIsQueueEmpty>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d06d      	beq.n	8001884 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80017a8:	f002 f9bc 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80017ac:	0003      	movs	r3, r0
 80017ae:	0018      	movs	r0, r3
 80017b0:	f002 f90e 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80017b4:	0003      	movs	r3, r0
 80017b6:	001a      	movs	r2, r3
 80017b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001928 <xQueueReceive+0x3d4>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4013      	ands	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d029      	beq.n	8001818 <xQueueReceive+0x2c4>
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f002 f954 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80017cc:	0003      	movs	r3, r0
 80017ce:	001a      	movs	r2, r3
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <xQueueReceive+0x3d4>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4013      	ands	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01d      	beq.n	8001818 <xQueueReceive+0x2c4>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 f8db 	bl	800399a <prvTraceGetQueueType>
 80017e4:	0003      	movs	r3, r0
 80017e6:	001a      	movs	r2, r3
 80017e8:	4b50      	ldr	r3, [pc, #320]	@ (800192c <xQueueReceive+0x3d8>)
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	3368      	adds	r3, #104	@ 0x68
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	001d      	movs	r5, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f002 f8d0 	bl	800399a <prvTraceGetQueueType>
 80017fa:	0003      	movs	r3, r0
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <xQueueReceive+0x3d8>)
 8001800:	5c9c      	ldrb	r4, [r3, r2]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0018      	movs	r0, r3
 8001806:	f002 f927 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 800180a:	0003      	movs	r3, r0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	001a      	movs	r2, r3
 8001810:	0021      	movs	r1, r4
 8001812:	0028      	movs	r0, r5
 8001814:	f003 f9ec 	bl	8004bf0 <prvTraceStoreKernelCall>
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	0018      	movs	r0, r3
 800181c:	f002 f8bd 	bl	800399a <prvTraceGetQueueType>
 8001820:	0003      	movs	r3, r0
 8001822:	001a      	movs	r2, r3
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <xQueueReceive+0x3d8>)
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d018      	beq.n	800185e <xQueueReceive+0x30a>
 800182c:	f002 f97a 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001830:	0003      	movs	r3, r0
 8001832:	0018      	movs	r0, r3
 8001834:	f002 f8cc 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001838:	0003      	movs	r3, r0
 800183a:	001a      	movs	r2, r3
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <xQueueReceive+0x3d4>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	4013      	ands	r3, r2
 8001842:	b29b      	uxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <xQueueReceive+0x30a>
 8001848:	f002 f96c 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 800184c:	0003      	movs	r3, r0
 800184e:	0018      	movs	r0, r3
 8001850:	f002 f8b0 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8001854:	0003      	movs	r3, r0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	0018      	movs	r0, r3
 800185a:	f003 fbc5 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3324      	adds	r3, #36	@ 0x24
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f001 f990 	bl	8002b8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fadf 	bl	8001e32 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001874:	f000 fedc 	bl	8002630 <xTaskResumeAll>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d000      	beq.n	800187e <xQueueReceive+0x32a>
 800187c:	e698      	b.n	80015b0 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 800187e:	f001 ff67 	bl	8003750 <vPortYield>
 8001882:	e695      	b.n	80015b0 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fad3 	bl	8001e32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800188c:	f000 fed0 	bl	8002630 <xTaskResumeAll>
 8001890:	e68e      	b.n	80015b0 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 facc 	bl	8001e32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800189a:	f000 fec9 	bl	8002630 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 fb24 	bl	8001eee <prvIsQueueEmpty>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d100      	bne.n	80018ac <xQueueReceive+0x358>
 80018aa:	e681      	b.n	80015b0 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80018ac:	f002 f93a 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80018b0:	0003      	movs	r3, r0
 80018b2:	0018      	movs	r0, r3
 80018b4:	f002 f88c 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80018b8:	0003      	movs	r3, r0
 80018ba:	001a      	movs	r2, r3
 80018bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <xQueueReceive+0x3d4>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4013      	ands	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d029      	beq.n	800191c <xQueueReceive+0x3c8>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f002 f8d2 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80018d0:	0003      	movs	r3, r0
 80018d2:	001a      	movs	r2, r3
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <xQueueReceive+0x3d4>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4013      	ands	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01d      	beq.n	800191c <xQueueReceive+0x3c8>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f002 f859 	bl	800399a <prvTraceGetQueueType>
 80018e8:	0003      	movs	r3, r0
 80018ea:	001a      	movs	r2, r3
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <xQueueReceive+0x3d8>)
 80018ee:	5c9b      	ldrb	r3, [r3, r2]
 80018f0:	3350      	adds	r3, #80	@ 0x50
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	001d      	movs	r5, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f002 f84e 	bl	800399a <prvTraceGetQueueType>
 80018fe:	0003      	movs	r3, r0
 8001900:	001a      	movs	r2, r3
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <xQueueReceive+0x3d8>)
 8001904:	5c9c      	ldrb	r4, [r3, r2]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	0018      	movs	r0, r3
 800190a:	f002 f8a5 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 800190e:	0003      	movs	r3, r0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	001a      	movs	r2, r3
 8001914:	0021      	movs	r1, r4
 8001916:	0028      	movs	r0, r5
 8001918:	f003 f96a 	bl	8004bf0 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 800191c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b00a      	add	sp, #40	@ 0x28
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	200019c8 	.word	0x200019c8
 800192c:	20000008 	.word	0x20000008

08001930 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	61bb      	str	r3, [r7, #24]
    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <xQueueSemaphoreTake+0x1e>
 8001948:	b672      	cpsid	i
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	e7fd      	b.n	800194a <xQueueSemaphoreTake+0x1a>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <xQueueSemaphoreTake+0x2c>
 8001956:	b672      	cpsid	i
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	e7fd      	b.n	8001958 <xQueueSemaphoreTake+0x28>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800195c:	f001 fb9c 	bl	8003098 <xTaskGetSchedulerState>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d102      	bne.n	800196a <xQueueSemaphoreTake+0x3a>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <xQueueSemaphoreTake+0x3e>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <xQueueSemaphoreTake+0x40>
 800196e:	2300      	movs	r3, #0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <xQueueSemaphoreTake+0x4a>
 8001974:	b672      	cpsid	i
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	e7fd      	b.n	8001976 <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800197a:	f001 fef9 	bl	8003770 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001982:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d100      	bne.n	800198c <xQueueSemaphoreTake+0x5c>
 800198a:	e077      	b.n	8001a7c <xQueueSemaphoreTake+0x14c>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800198c:	f002 f8ca 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001990:	0003      	movs	r3, r0
 8001992:	0018      	movs	r0, r3
 8001994:	f002 f81c 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001998:	0003      	movs	r3, r0
 800199a:	001a      	movs	r2, r3
 800199c:	4bd1      	ldr	r3, [pc, #836]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d029      	beq.n	80019fc <xQueueSemaphoreTake+0xcc>
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f002 f862 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 80019b0:	0003      	movs	r3, r0
 80019b2:	001a      	movs	r2, r3
 80019b4:	4bcb      	ldr	r3, [pc, #812]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4013      	ands	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01d      	beq.n	80019fc <xQueueSemaphoreTake+0xcc>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	0018      	movs	r0, r3
 80019c4:	f001 ffe9 	bl	800399a <prvTraceGetQueueType>
 80019c8:	0003      	movs	r3, r0
 80019ca:	001a      	movs	r2, r3
 80019cc:	4bc6      	ldr	r3, [pc, #792]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 80019ce:	5c9b      	ldrb	r3, [r3, r2]
 80019d0:	3328      	adds	r3, #40	@ 0x28
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	001d      	movs	r5, r3
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	0018      	movs	r0, r3
 80019da:	f001 ffde 	bl	800399a <prvTraceGetQueueType>
 80019de:	0003      	movs	r3, r0
 80019e0:	001a      	movs	r2, r3
 80019e2:	4bc1      	ldr	r3, [pc, #772]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 80019e4:	5c9c      	ldrb	r4, [r3, r2]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f002 f835 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 80019ee:	0003      	movs	r3, r0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	001a      	movs	r2, r3
 80019f4:	0021      	movs	r1, r4
 80019f6:	0028      	movs	r0, r5
 80019f8:	f003 f8fa 	bl	8004bf0 <prvTraceStoreKernelCall>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 ffcb 	bl	800399a <prvTraceGetQueueType>
 8001a04:	0003      	movs	r3, r0
 8001a06:	001a      	movs	r2, r3
 8001a08:	4bb7      	ldr	r3, [pc, #732]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001a0a:	5c9c      	ldrb	r4, [r3, r2]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f002 f822 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001a14:	0003      	movs	r3, r0
 8001a16:	b2dd      	uxtb	r5, r3
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f001 ffbd 	bl	800399a <prvTraceGetQueueType>
 8001a20:	0003      	movs	r3, r0
 8001a22:	001a      	movs	r2, r3
 8001a24:	4bb0      	ldr	r3, [pc, #704]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001a26:	5c9b      	ldrb	r3, [r3, r2]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d108      	bne.n	8001a3e <xQueueSemaphoreTake+0x10e>
 8001a2c:	f002 f87a 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001a30:	0003      	movs	r3, r0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 ffbe 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	e004      	b.n	8001a48 <xQueueSemaphoreTake+0x118>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	001a      	movs	r2, r3
 8001a4a:	0029      	movs	r1, r5
 8001a4c:	0020      	movs	r0, r4
 8001a4e:	f003 fa73 	bl	8004f38 <prvTraceSetObjectState>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	639a      	str	r2, [r3, #56]	@ 0x38
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <xQueueSemaphoreTake+0x144>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	3310      	adds	r3, #16
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 f92c 	bl	8002cc4 <xTaskRemoveFromEventList>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <xQueueSemaphoreTake+0x144>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001a70:	f001 fe6e 	bl	8003750 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001a74:	f001 fe8e 	bl	8003794 <vPortExitCritical>
                return pdPASS;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e12f      	b.n	8001cdc <xQueueSemaphoreTake+0x3ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13b      	bne.n	8001afa <xQueueSemaphoreTake+0x1ca>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001a82:	f001 fe87 	bl	8003794 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001a86:	f002 f84d 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 ff9f 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001a92:	0003      	movs	r3, r0
 8001a94:	001a      	movs	r2, r3
 8001a96:	4b93      	ldr	r3, [pc, #588]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d029      	beq.n	8001af6 <xQueueSemaphoreTake+0x1c6>
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f001 ffe5 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	001a      	movs	r2, r3
 8001aae:	4b8d      	ldr	r3, [pc, #564]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01d      	beq.n	8001af6 <xQueueSemaphoreTake+0x1c6>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 ff6c 	bl	800399a <prvTraceGetQueueType>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	4b88      	ldr	r3, [pc, #544]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001ac8:	5c9b      	ldrb	r3, [r3, r2]
 8001aca:	3350      	adds	r3, #80	@ 0x50
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	001d      	movs	r5, r3
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f001 ff61 	bl	800399a <prvTraceGetQueueType>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	001a      	movs	r2, r3
 8001adc:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001ade:	5c9c      	ldrb	r4, [r3, r2]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 ffb8 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	001a      	movs	r2, r3
 8001aee:	0021      	movs	r1, r4
 8001af0:	0028      	movs	r0, r5
 8001af2:	f003 f87d 	bl	8004bf0 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e0f0      	b.n	8001cdc <xQueueSemaphoreTake+0x3ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <xQueueSemaphoreTake+0x1de>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001b00:	230c      	movs	r3, #12
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	0018      	movs	r0, r3
 8001b06:	f001 f9bf 	bl	8002e88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001b0e:	f001 fe41 	bl	8003794 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001b12:	f000 fd81 	bl	8002618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001b16:	f001 fe2b 	bl	8003770 <vPortEnterCritical>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2244      	movs	r2, #68	@ 0x44
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	d103      	bne.n	8001b2e <xQueueSemaphoreTake+0x1fe>
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2244      	movs	r2, #68	@ 0x44
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2245      	movs	r2, #69	@ 0x45
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	d103      	bne.n	8001b42 <xQueueSemaphoreTake+0x212>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2245      	movs	r2, #69	@ 0x45
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]
 8001b42:	f001 fe27 	bl	8003794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b46:	003a      	movs	r2, r7
 8001b48:	230c      	movs	r3, #12
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f001 f9ae 	bl	8002eb0 <xTaskCheckForTimeOut>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d000      	beq.n	8001b5a <xQueueSemaphoreTake+0x22a>
 8001b58:	e07a      	b.n	8001c50 <xQueueSemaphoreTake+0x320>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 f9c6 	bl	8001eee <prvIsQueueEmpty>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d06d      	beq.n	8001c42 <xQueueSemaphoreTake+0x312>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001b66:	f001 ffdd 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 ff2f 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001b72:	0003      	movs	r3, r0
 8001b74:	001a      	movs	r2, r3
 8001b76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d029      	beq.n	8001bd6 <xQueueSemaphoreTake+0x2a6>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f001 ff75 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	4b55      	ldr	r3, [pc, #340]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4013      	ands	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01d      	beq.n	8001bd6 <xQueueSemaphoreTake+0x2a6>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f001 fefc 	bl	800399a <prvTraceGetQueueType>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	3368      	adds	r3, #104	@ 0x68
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	001d      	movs	r5, r3
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f001 fef1 	bl	800399a <prvTraceGetQueueType>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001bbe:	5c9c      	ldrb	r4, [r3, r2]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 ff48 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	001a      	movs	r2, r3
 8001bce:	0021      	movs	r1, r4
 8001bd0:	0028      	movs	r0, r5
 8001bd2:	f003 f80d 	bl	8004bf0 <prvTraceStoreKernelCall>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f001 fede 	bl	800399a <prvTraceGetQueueType>
 8001bde:	0003      	movs	r3, r0
 8001be0:	001a      	movs	r2, r3
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d018      	beq.n	8001c1c <xQueueSemaphoreTake+0x2ec>
 8001bea:	f001 ff9b 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f001 feed 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <xQueueSemaphoreTake+0x2ec>
 8001c06:	f001 ff8d 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 fed1 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8001c12:	0003      	movs	r3, r0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	0018      	movs	r0, r3
 8001c18:	f003 f9e6 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	3324      	adds	r3, #36	@ 0x24
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 ffb1 	bl	8002b8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f900 	bl	8001e32 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001c32:	f000 fcfd 	bl	8002630 <xTaskResumeAll>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d000      	beq.n	8001c3c <xQueueSemaphoreTake+0x30c>
 8001c3a:	e69e      	b.n	800197a <xQueueSemaphoreTake+0x4a>
                {
                    portYIELD_WITHIN_API();
 8001c3c:	f001 fd88 	bl	8003750 <vPortYield>
 8001c40:	e69b      	b.n	800197a <xQueueSemaphoreTake+0x4a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f8f4 	bl	8001e32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c4a:	f000 fcf1 	bl	8002630 <xTaskResumeAll>
 8001c4e:	e694      	b.n	800197a <xQueueSemaphoreTake+0x4a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f8ed 	bl	8001e32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c58:	f000 fcea 	bl	8002630 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f945 	bl	8001eee <prvIsQueueEmpty>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d100      	bne.n	8001c6a <xQueueSemaphoreTake+0x33a>
 8001c68:	e687      	b.n	800197a <xQueueSemaphoreTake+0x4a>
                        taskEXIT_CRITICAL();
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001c6a:	f001 ff5b 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	0018      	movs	r0, r3
 8001c72:	f001 fead 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8001c76:	0003      	movs	r3, r0
 8001c78:	001a      	movs	r2, r3
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d029      	beq.n	8001cda <xQueueSemaphoreTake+0x3aa>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f001 fef3 	bl	8003a74 <prvTraceGetQueueNumberHigh16>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	001a      	movs	r2, r3
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <xQueueSemaphoreTake+0x3b4>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01d      	beq.n	8001cda <xQueueSemaphoreTake+0x3aa>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f001 fe7a 	bl	800399a <prvTraceGetQueueType>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	001a      	movs	r2, r3
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	3350      	adds	r3, #80	@ 0x50
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	001d      	movs	r5, r3
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 fe6f 	bl	800399a <prvTraceGetQueueType>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <xQueueSemaphoreTake+0x3b8>)
 8001cc2:	5c9c      	ldrb	r4, [r3, r2]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f001 fec6 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	0021      	movs	r1, r4
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	f002 ff8b 	bl	8004bf0 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8001cda:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b008      	add	sp, #32
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	200019c8 	.word	0x200019c8
 8001ce8:	20000008 	.word	0x20000008

08001cec <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	224c      	movs	r2, #76	@ 0x4c
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
    }
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d043      	beq.n	8001dd4 <prvCopyDataToQueue+0xa6>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6858      	ldr	r0, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	f004 fcb5 	bl	80066cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	18d2      	adds	r2, r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d32b      	bcc.n	8001dd4 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e026      	b.n	8001dd4 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68d8      	ldr	r0, [r3, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0019      	movs	r1, r3
 8001d92:	f004 fc9b 	bl	80066cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	425b      	negs	r3, r3
 8001da0:	18d2      	adds	r2, r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d207      	bcs.n	8001dc2 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	425b      	negs	r3, r3
 8001dbc:	18d2      	adds	r2, r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d105      	bne.n	8001dd4 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001ddc:	693b      	ldr	r3, [r7, #16]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b006      	add	sp, #24
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	18d2      	adds	r2, r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d303      	bcc.n	8001e1a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f004 fc51 	bl	80066cc <memcpy>
    }
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001e3a:	f001 fc99 	bl	8003770 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001e3e:	230f      	movs	r3, #15
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	2145      	movs	r1, #69	@ 0x45
 8001e46:	5c52      	ldrb	r2, [r2, r1]
 8001e48:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e4a:	e013      	b.n	8001e74 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3324      	adds	r3, #36	@ 0x24
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 ff33 	bl	8002cc4 <xTaskRemoveFromEventList>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d001      	beq.n	8001e66 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001e62:	f001 f873 	bl	8002f4c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001e66:	210f      	movs	r1, #15
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dce5      	bgt.n	8001e4c <prvUnlockQueue+0x1a>
 8001e80:	e000      	b.n	8001e84 <prvUnlockQueue+0x52>
                    break;
 8001e82:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2245      	movs	r2, #69	@ 0x45
 8001e88:	21ff      	movs	r1, #255	@ 0xff
 8001e8a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001e8c:	f001 fc82 	bl	8003794 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001e90:	f001 fc6e 	bl	8003770 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001e94:	230e      	movs	r3, #14
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	2144      	movs	r1, #68	@ 0x44
 8001e9c:	5c52      	ldrb	r2, [r2, r1]
 8001e9e:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	e013      	b.n	8001eca <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d016      	beq.n	8001ed8 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3310      	adds	r3, #16
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 ff08 	bl	8002cc4 <xTaskRemoveFromEventList>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001eb8:	f001 f848 	bl	8002f4c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001ebc:	210e      	movs	r1, #14
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eca:	230e      	movs	r3, #14
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	dce5      	bgt.n	8001ea2 <prvUnlockQueue+0x70>
 8001ed6:	e000      	b.n	8001eda <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001ed8:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2244      	movs	r2, #68	@ 0x44
 8001ede:	21ff      	movs	r1, #255	@ 0xff
 8001ee0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001ee2:	f001 fc57 	bl	8003794 <vPortExitCritical>
}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}

08001eee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ef6:	f001 fc3b 	bl	8003770 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e001      	b.n	8001f0c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f0c:	f001 fc42 	bl	8003794 <vPortExitCritical>

    return xReturn;
 8001f10:	68fb      	ldr	r3, [r7, #12]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001f22:	f001 fc25 	bl	8003770 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d102      	bne.n	8001f38 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e001      	b.n	8001f3c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f3c:	f001 fc2a 	bl	8003794 <vPortExitCritical>

    return xReturn;
 8001f40:	68fb      	ldr	r3, [r7, #12]
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <vQueueAddToRegistry+0x1a>
 8001f60:	b672      	cpsid	i
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	e7fd      	b.n	8001f62 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d025      	beq.n	8001fb8 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e01f      	b.n	8001fb2 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <vQueueAddToRegistry+0xac>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d105      	bne.n	8001f90 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	00da      	lsls	r2, r3, #3
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <vQueueAddToRegistry+0xac>)
 8001f8a:	18d3      	adds	r3, r2, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
                    break;
 8001f8e:	e013      	b.n	8001fb8 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <vQueueAddToRegistry+0x60>
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <vQueueAddToRegistry+0xac>)
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	00d2      	lsls	r2, r2, #3
 8001f9c:	58d3      	ldr	r3, [r2, r3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d104      	bne.n	8001fac <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	00da      	lsls	r2, r3, #3
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <vQueueAddToRegistry+0xac>)
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d9dc      	bls.n	8001f72 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d018      	beq.n	8001ff0 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f001 fce4 	bl	800399a <prvTraceGetQueueType>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <vQueueAddToRegistry+0xb0>)
 8001fd8:	5c9c      	ldrb	r4, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f001 fd3b 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	0019      	movs	r1, r3
 8001fea:	0020      	movs	r0, r4
 8001fec:	f003 f988 	bl	8005300 <prvTraceSetObjectName>
        }
    }
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b005      	add	sp, #20
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	20000034 	.word	0x20000034
 8001ffc:	20000008 	.word	0x20000008

08002000 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002010:	f001 fbae 	bl	8003770 <vPortEnterCritical>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2244      	movs	r2, #68	@ 0x44
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	d103      	bne.n	8002028 <vQueueWaitForMessageRestricted+0x28>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2244      	movs	r2, #68	@ 0x44
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2245      	movs	r2, #69	@ 0x45
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	b25b      	sxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	d103      	bne.n	800203c <vQueueWaitForMessageRestricted+0x3c>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2245      	movs	r2, #69	@ 0x45
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]
 800203c:	f001 fbaa 	bl	8003794 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3324      	adds	r3, #36	@ 0x24
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fdbb 	bl	8002bcc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff feea 	bl	8001e32 <prvUnlockQueue>
    }
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b006      	add	sp, #24
 8002064:	bd80      	pop	{r7, pc}

08002066 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002066:	b590      	push	{r4, r7, lr}
 8002068:	b08d      	sub	sp, #52	@ 0x34
 800206a:	af04      	add	r7, sp, #16
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002076:	1dbb      	adds	r3, r7, #6
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	0018      	movs	r0, r3
 800207e:	f001 fc0f 	bl	80038a0 <pvPortMalloc>
 8002082:	0003      	movs	r3, r0
 8002084:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d016      	beq.n	80020ba <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800208c:	2054      	movs	r0, #84	@ 0x54
 800208e:	f001 fc07 	bl	80038a0 <pvPortMalloc>
 8002092:	0003      	movs	r3, r0
 8002094:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2254      	movs	r2, #84	@ 0x54
 80020a0:	2100      	movs	r1, #0
 80020a2:	0018      	movs	r0, r3
 80020a4:	f004 fad4 	bl	8006650 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ae:	e006      	b.n	80020be <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fc56 	bl	8003964 <vPortFree>
 80020b8:	e001      	b.n	80020be <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d016      	beq.n	80020f2 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	683c      	ldr	r4, [r7, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	0023      	movs	r3, r4
 80020e0:	f000 f810 	bl	8002104 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f88a 	bl	8002200 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e002      	b.n	80020f8 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020f2:	2301      	movs	r3, #1
 80020f4:	425b      	negs	r3, r3
 80020f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80020f8:	69bb      	ldr	r3, [r7, #24]
    }
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b009      	add	sp, #36	@ 0x24
 8002100:	bd90      	pop	{r4, r7, pc}
	...

08002104 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	001a      	movs	r2, r3
 800211c:	21a5      	movs	r1, #165	@ 0xa5
 800211e:	f004 fa97 	bl	8006650 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4934      	ldr	r1, [pc, #208]	@ (80021fc <prvInitialiseNewTask+0xf8>)
 800212a:	468c      	mov	ip, r1
 800212c:	4463      	add	r3, ip
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2207      	movs	r2, #7
 8002138:	4393      	bics	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2207      	movs	r2, #7
 8002140:	4013      	ands	r3, r2
 8002142:	d002      	beq.n	800214a <prvInitialiseNewTask+0x46>
 8002144:	b672      	cpsid	i
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	e7fd      	b.n	8002146 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01f      	beq.n	8002190 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e013      	b.n	800217e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	18d3      	adds	r3, r2, r3
 800215c:	7818      	ldrb	r0, [r3, #0]
 800215e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002160:	2134      	movs	r1, #52	@ 0x34
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	185b      	adds	r3, r3, r1
 8002168:	1c02      	adds	r2, r0, #0
 800216a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	18d3      	adds	r3, r2, r3
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d9e8      	bls.n	8002156 <prvInitialiseNewTask+0x52>
 8002184:	e000      	b.n	8002188 <prvInitialiseNewTask+0x84>
            {
                break;
 8002186:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	2243      	movs	r2, #67	@ 0x43
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d902      	bls.n	800219c <prvInitialiseNewTask+0x98>
 8002196:	b672      	cpsid	i
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	e7fd      	b.n	8002198 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d901      	bls.n	80021a6 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021a2:	2304      	movs	r3, #4
 80021a4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ae:	3304      	adds	r3, #4
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fdcf 	bl	8000d54 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	3318      	adds	r3, #24
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fdca 	bl	8000d54 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	2205      	movs	r2, #5
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	0018      	movs	r0, r3
 80021de:	f001 fa2d 	bl	800363c <pxPortInitialiseStack>
 80021e2:	0002      	movs	r2, r0
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <prvInitialiseNewTask+0xf0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b006      	add	sp, #24
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	3fffffff 	.word	0x3fffffff

08002200 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002208:	f001 fab2 	bl	8003770 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800220c:	4b7c      	ldr	r3, [pc, #496]	@ (8002400 <prvAddNewTaskToReadyList+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	4b7b      	ldr	r3, [pc, #492]	@ (8002400 <prvAddNewTaskToReadyList+0x200>)
 8002214:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8002216:	4b7b      	ldr	r3, [pc, #492]	@ (8002404 <prvAddNewTaskToReadyList+0x204>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800221e:	4b79      	ldr	r3, [pc, #484]	@ (8002404 <prvAddNewTaskToReadyList+0x204>)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002224:	4b76      	ldr	r3, [pc, #472]	@ (8002400 <prvAddNewTaskToReadyList+0x200>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d110      	bne.n	800224e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800222c:	f000 fece 	bl	8002fcc <prvInitialiseTaskLists>
 8002230:	e00d      	b.n	800224e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002232:	4b75      	ldr	r3, [pc, #468]	@ (8002408 <prvAddNewTaskToReadyList+0x208>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800223a:	4b72      	ldr	r3, [pc, #456]	@ (8002404 <prvAddNewTaskToReadyList+0x204>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	429a      	cmp	r2, r3
 8002246:	d802      	bhi.n	800224e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002248:	4b6e      	ldr	r3, [pc, #440]	@ (8002404 <prvAddNewTaskToReadyList+0x204>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800224e:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <prvAddNewTaskToReadyList+0x20c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4b6d      	ldr	r3, [pc, #436]	@ (800240c <prvAddNewTaskToReadyList+0x20c>)
 8002256:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002258:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <prvAddNewTaskToReadyList+0x20c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d065      	beq.n	8002332 <prvAddNewTaskToReadyList+0x132>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d04f      	beq.n	800230c <prvAddNewTaskToReadyList+0x10c>
 800226c:	2003      	movs	r0, #3
 800226e:	f002 ff4f 	bl	8005110 <prvTraceGetObjectHandle>
 8002272:	0003      	movs	r3, r0
 8002274:	001a      	movs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0011      	movs	r1, r2
 800227a:	0018      	movs	r0, r3
 800227c:	f001 fbb7 	bl	80039ee <prvTraceSetTaskNumberLow16>
 8002280:	4b63      	ldr	r3, [pc, #396]	@ (8002410 <prvAddNewTaskToReadyList+0x210>)
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0011      	movs	r1, r2
 8002288:	0018      	movs	r0, r3
 800228a:	f001 fbca 	bl	8003a22 <prvTraceSetTaskNumberHigh16>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f001 fb8f 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002296:	0003      	movs	r3, r0
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3334      	adds	r3, #52	@ 0x34
 800229e:	001a      	movs	r2, r3
 80022a0:	2003      	movs	r0, #3
 80022a2:	f003 f82d 	bl	8005300 <prvTraceSetObjectName>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f001 fb83 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 80022ae:	0003      	movs	r3, r0
 80022b0:	b2d9      	uxtb	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	001a      	movs	r2, r3
 80022ba:	2003      	movs	r0, #3
 80022bc:	f002 fe0a 	bl	8004ed4 <prvTraceSetPriorityProperty>
 80022c0:	f001 fc30 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80022c4:	0003      	movs	r3, r0
 80022c6:	0018      	movs	r0, r3
 80022c8:	f001 fb82 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80022cc:	0003      	movs	r3, r0
 80022ce:	001a      	movs	r2, r3
 80022d0:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <prvAddNewTaskToReadyList+0x214>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	4013      	ands	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d02a      	beq.n	8002332 <prvAddNewTaskToReadyList+0x132>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0018      	movs	r0, r3
 80022e0:	f001 fb76 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80022e4:	0003      	movs	r3, r0
 80022e6:	001a      	movs	r2, r3
 80022e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <prvAddNewTaskToReadyList+0x214>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01e      	beq.n	8002332 <prvAddNewTaskToReadyList+0x132>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f001 fb5c 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 80022fc:	0003      	movs	r3, r0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	001a      	movs	r2, r3
 8002302:	2103      	movs	r1, #3
 8002304:	201b      	movs	r0, #27
 8002306:	f002 fc73 	bl	8004bf0 <prvTraceStoreKernelCall>
 800230a:	e012      	b.n	8002332 <prvAddNewTaskToReadyList+0x132>
 800230c:	f001 fc0a 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002310:	0003      	movs	r3, r0
 8002312:	0018      	movs	r0, r3
 8002314:	f001 fb5c 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002318:	0003      	movs	r3, r0
 800231a:	001a      	movs	r2, r3
 800231c:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <prvAddNewTaskToReadyList+0x214>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	4013      	ands	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <prvAddNewTaskToReadyList+0x132>
 8002328:	2200      	movs	r2, #0
 800232a:	2103      	movs	r1, #3
 800232c:	201b      	movs	r0, #27
 800232e:	f002 fc5f 	bl	8004bf0 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fb4b 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 800233a:	0003      	movs	r3, r0
 800233c:	001a      	movs	r2, r3
 800233e:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <prvAddNewTaskToReadyList+0x214>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	4013      	ands	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <prvAddNewTaskToReadyList+0x15c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f001 fb31 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002352:	0003      	movs	r3, r0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	0018      	movs	r0, r3
 8002358:	f002 fb3c 	bl	80049d4 <prvTraceStoreTaskReady>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <prvAddNewTaskToReadyList+0x218>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d903      	bls.n	8002370 <prvAddNewTaskToReadyList+0x170>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <prvAddNewTaskToReadyList+0x218>)
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002374:	4929      	ldr	r1, [pc, #164]	@ (800241c <prvAddNewTaskToReadyList+0x21c>)
 8002376:	0013      	movs	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	189b      	adds	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	18cb      	adds	r3, r1, r3
 8002380:	3304      	adds	r3, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	3204      	adds	r2, #4
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1d1a      	adds	r2, r3, #4
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023aa:	0013      	movs	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4a1a      	ldr	r2, [pc, #104]	@ (800241c <prvAddNewTaskToReadyList+0x21c>)
 80023b4:	189a      	adds	r2, r3, r2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	615a      	str	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023be:	4917      	ldr	r1, [pc, #92]	@ (800241c <prvAddNewTaskToReadyList+0x21c>)
 80023c0:	0013      	movs	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	585b      	ldr	r3, [r3, r1]
 80023ca:	1c58      	adds	r0, r3, #1
 80023cc:	4913      	ldr	r1, [pc, #76]	@ (800241c <prvAddNewTaskToReadyList+0x21c>)
 80023ce:	0013      	movs	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	189b      	adds	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023d8:	f001 f9dc 	bl	8003794 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <prvAddNewTaskToReadyList+0x208>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <prvAddNewTaskToReadyList+0x204>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d201      	bcs.n	80023f6 <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023f2:	f001 f9ad 	bl	8003750 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	20000130 	.word	0x20000130
 8002404:	20000084 	.word	0x20000084
 8002408:	2000013c 	.word	0x2000013c
 800240c:	2000014c 	.word	0x2000014c
 8002410:	200019ca 	.word	0x200019ca
 8002414:	200019c8 	.word	0x200019c8
 8002418:	20000138 	.word	0x20000138
 800241c:	20000088 	.word	0x20000088

08002420 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <xTaskDelayUntil+0x1a>
 8002434:	b672      	cpsid	i
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	e7fd      	b.n	8002436 <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <xTaskDelayUntil+0x26>
 8002440:	b672      	cpsid	i
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	e7fd      	b.n	8002442 <xTaskDelayUntil+0x22>
        configASSERT( uxSchedulerSuspended == 0 );
 8002446:	4b3e      	ldr	r3, [pc, #248]	@ (8002540 <xTaskDelayUntil+0x120>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <xTaskDelayUntil+0x34>
 800244e:	b672      	cpsid	i
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	e7fd      	b.n	8002450 <xTaskDelayUntil+0x30>

        vTaskSuspendAll();
 8002454:	f000 f8e0 	bl	8002618 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <xTaskDelayUntil+0x124>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20b      	bcs.n	800248a <xTaskDelayUntil+0x6a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d211      	bcs.n	80024a0 <xTaskDelayUntil+0x80>
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d90d      	bls.n	80024a0 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00a      	b.n	80024a0 <xTaskDelayUntil+0x80>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d303      	bcc.n	800249c <xTaskDelayUntil+0x7c>
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d901      	bls.n	80024a0 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03b      	beq.n	8002524 <xTaskDelayUntil+0x104>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80024ac:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <xTaskDelayUntil+0x128>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 fa8d 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80024b6:	0003      	movs	r3, r0
 80024b8:	001a      	movs	r2, r3
 80024ba:	4b24      	ldr	r3, [pc, #144]	@ (800254c <xTaskDelayUntil+0x12c>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4013      	ands	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00e      	beq.n	80024e4 <xTaskDelayUntil+0xc4>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0019      	movs	r1, r3
 80024ca:	2088      	movs	r0, #136	@ 0x88
 80024cc:	f002 fc24 	bl	8004d18 <prvTraceStoreKernelCallWithNumericParamOnly>
 80024d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <xTaskDelayUntil+0x128>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 fa6d 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 80024da:	0003      	movs	r3, r0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	f002 fd82 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>
 80024e4:	f001 fb1e 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80024e8:	0003      	movs	r3, r0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f001 fa70 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80024f0:	0003      	movs	r3, r0
 80024f2:	001a      	movs	r2, r3
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <xTaskDelayUntil+0x12c>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <xTaskDelayUntil+0xf6>
 8002500:	f001 fb10 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002504:	0003      	movs	r3, r0
 8002506:	0018      	movs	r0, r3
 8002508:	f001 fa54 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 800250c:	0003      	movs	r3, r0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	0018      	movs	r0, r3
 8002512:	f002 fd69 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2100      	movs	r1, #0
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fdd6 	bl	80030d0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002524:	f000 f884 	bl	8002630 <xTaskResumeAll>
 8002528:	0003      	movs	r3, r0
 800252a:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <xTaskDelayUntil+0x116>
        {
            portYIELD_WITHIN_API();
 8002532:	f001 f90d 	bl	8003750 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002536:	697b      	ldr	r3, [r7, #20]
    }
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000158 	.word	0x20000158
 8002544:	20000134 	.word	0x20000134
 8002548:	20000084 	.word	0x20000084
 800254c:	200019c8 	.word	0x200019c8

08002550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002556:	4927      	ldr	r1, [pc, #156]	@ (80025f4 <vTaskStartScheduler+0xa4>)
 8002558:	4827      	ldr	r0, [pc, #156]	@ (80025f8 <vTaskStartScheduler+0xa8>)
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <vTaskStartScheduler+0xac>)
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	2280      	movs	r2, #128	@ 0x80
 8002566:	f7ff fd7e 	bl	8002066 <xTaskCreate>
 800256a:	0003      	movs	r3, r0
 800256c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d103      	bne.n	800257c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8002574:	f000 fdf0 	bl	8003158 <xTimerCreateTimerTask>
 8002578:	0003      	movs	r3, r0
 800257a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d12c      	bne.n	80025dc <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8002582:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002584:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <vTaskStartScheduler+0xb0>)
 8002586:	2201      	movs	r2, #1
 8002588:	4252      	negs	r2, r2
 800258a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <vTaskStartScheduler+0xb4>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002592:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <vTaskStartScheduler+0xb8>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002598:	4b1c      	ldr	r3, [pc, #112]	@ (800260c <vTaskStartScheduler+0xbc>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f001 fac1 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80025a2:	0003      	movs	r3, r0
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 fa13 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80025aa:	0003      	movs	r3, r0
 80025ac:	001a      	movs	r2, r3
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <vTaskStartScheduler+0xc0>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	4013      	ands	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <vTaskStartScheduler+0x80>
 80025ba:	f001 fab3 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 80025be:	0003      	movs	r3, r0
 80025c0:	0018      	movs	r0, r3
 80025c2:	f001 f9f7 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 80025c6:	0003      	movs	r3, r0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	0018      	movs	r0, r3
 80025cc:	f002 fc0e 	bl	8004dec <prvTraceStoreTaskswitch>
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <vTaskStartScheduler+0xbc>)
 80025d2:	2202      	movs	r2, #2
 80025d4:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80025d6:	f001 f897 	bl	8003708 <xPortStartScheduler>
 80025da:	e005      	b.n	80025e8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	d102      	bne.n	80025e8 <vTaskStartScheduler+0x98>
 80025e2:	b672      	cpsid	i
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	e7fd      	b.n	80025e4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <vTaskStartScheduler+0xc4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	080066f8 	.word	0x080066f8
 80025f8:	08002fad 	.word	0x08002fad
 80025fc:	20000154 	.word	0x20000154
 8002600:	20000150 	.word	0x20000150
 8002604:	2000013c 	.word	0x2000013c
 8002608:	20000134 	.word	0x20000134
 800260c:	200019b0 	.word	0x200019b0
 8002610:	200019c8 	.word	0x200019c8
 8002614:	20000000 	.word	0x20000000

08002618 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <vTaskSuspendAll+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	4b02      	ldr	r3, [pc, #8]	@ (800262c <vTaskSuspendAll+0x14>)
 8002624:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000158 	.word	0x20000158

08002630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800263e:	4b73      	ldr	r3, [pc, #460]	@ (800280c <xTaskResumeAll+0x1dc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <xTaskResumeAll+0x1c>
 8002646:	b672      	cpsid	i
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	e7fd      	b.n	8002648 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800264c:	f001 f890 	bl	8003770 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002650:	4b6e      	ldr	r3, [pc, #440]	@ (800280c <xTaskResumeAll+0x1dc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	4b6d      	ldr	r3, [pc, #436]	@ (800280c <xTaskResumeAll+0x1dc>)
 8002658:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b6c      	ldr	r3, [pc, #432]	@ (800280c <xTaskResumeAll+0x1dc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d000      	beq.n	8002664 <xTaskResumeAll+0x34>
 8002662:	e0cc      	b.n	80027fe <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002664:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <xTaskResumeAll+0x1e0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d100      	bne.n	800266e <xTaskResumeAll+0x3e>
 800266c:	e0c7      	b.n	80027fe <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266e:	e09e      	b.n	80027ae <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <xTaskResumeAll+0x1e4>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6a12      	ldr	r2, [r2, #32]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	69d2      	ldr	r2, [r2, #28]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3318      	adds	r3, #24
 800269a:	429a      	cmp	r2, r3
 800269c:	d103      	bne.n	80026a6 <xTaskResumeAll+0x76>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1e5a      	subs	r2, r3, #1
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3304      	adds	r3, #4
 80026d8:	429a      	cmp	r2, r3
 80026da:	d103      	bne.n	80026e4 <xTaskResumeAll+0xb4>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f001 f96a 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	4b45      	ldr	r3, [pc, #276]	@ (8002818 <xTaskResumeAll+0x1e8>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <xTaskResumeAll+0xee>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	0018      	movs	r0, r3
 8002710:	f001 f950 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002714:	0003      	movs	r3, r0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	0018      	movs	r0, r3
 800271a:	f002 f95b 	bl	80049d4 <prvTraceStoreTaskReady>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002722:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <xTaskResumeAll+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d903      	bls.n	8002732 <xTaskResumeAll+0x102>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <xTaskResumeAll+0x1ec>)
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002736:	493a      	ldr	r1, [pc, #232]	@ (8002820 <xTaskResumeAll+0x1f0>)
 8002738:	0013      	movs	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	189b      	adds	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	18cb      	adds	r3, r1, r3
 8002742:	3304      	adds	r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	3204      	adds	r2, #4
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1d1a      	adds	r2, r3, #4
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276c:	0013      	movs	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	189b      	adds	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <xTaskResumeAll+0x1f0>)
 8002776:	189a      	adds	r2, r3, r2
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	615a      	str	r2, [r3, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002780:	4927      	ldr	r1, [pc, #156]	@ (8002820 <xTaskResumeAll+0x1f0>)
 8002782:	0013      	movs	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	189b      	adds	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	585b      	ldr	r3, [r3, r1]
 800278c:	1c58      	adds	r0, r3, #1
 800278e:	4924      	ldr	r1, [pc, #144]	@ (8002820 <xTaskResumeAll+0x1f0>)
 8002790:	0013      	movs	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	189b      	adds	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279e:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <xTaskResumeAll+0x1f4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d302      	bcc.n	80027ae <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <xTaskResumeAll+0x1f8>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ae:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <xTaskResumeAll+0x1e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d000      	beq.n	80027b8 <xTaskResumeAll+0x188>
 80027b6:	e75b      	b.n	8002670 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027be:	f000 fc43 	bl	8003048 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <xTaskResumeAll+0x1fc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00f      	beq.n	80027ee <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027ce:	f000 f83d 	bl	800284c <xTaskIncrementTick>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d002      	beq.n	80027dc <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <xTaskResumeAll+0x1f8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f2      	bne.n	80027ce <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <xTaskResumeAll+0x1fc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <xTaskResumeAll+0x1f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80027fa:	f000 ffa9 	bl	8003750 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027fe:	f000 ffc9 	bl	8003794 <vPortExitCritical>

    return xAlreadyYielded;
 8002802:	693b      	ldr	r3, [r7, #16]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000158 	.word	0x20000158
 8002810:	20000130 	.word	0x20000130
 8002814:	2000011c 	.word	0x2000011c
 8002818:	200019c8 	.word	0x200019c8
 800281c:	20000138 	.word	0x20000138
 8002820:	20000088 	.word	0x20000088
 8002824:	20000084 	.word	0x20000084
 8002828:	20000144 	.word	0x20000144
 800282c:	20000140 	.word	0x20000140

08002830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <xTaskGetTickCount+0x18>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	20000134 	.word	0x20000134

0800284c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8002856:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <xTaskIncrementTick+0x220>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d003      	beq.n	8002866 <xTaskIncrementTick+0x1a>
 800285e:	4b84      	ldr	r3, [pc, #528]	@ (8002a70 <xTaskIncrementTick+0x224>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <xTaskIncrementTick+0x2a>
 8002866:	4b83      	ldr	r3, [pc, #524]	@ (8002a74 <xTaskIncrementTick+0x228>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	4b81      	ldr	r3, [pc, #516]	@ (8002a74 <xTaskIncrementTick+0x228>)
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	2000      	movs	r0, #0
 8002872:	f003 f95b 	bl	8005b2c <prvTracePortGetTimeStamp>
 8002876:	4b7d      	ldr	r3, [pc, #500]	@ (8002a6c <xTaskIncrementTick+0x220>)
 8002878:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800287a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a6c <xTaskIncrementTick+0x220>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d000      	beq.n	8002884 <xTaskIncrementTick+0x38>
 8002882:	e0e9      	b.n	8002a58 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002884:	4b7c      	ldr	r3, [pc, #496]	@ (8002a78 <xTaskIncrementTick+0x22c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800288c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <xTaskIncrementTick+0x22c>)
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8002898:	4b78      	ldr	r3, [pc, #480]	@ (8002a7c <xTaskIncrementTick+0x230>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <xTaskIncrementTick+0x5c>
 80028a2:	b672      	cpsid	i
 80028a4:	46c0      	nop			@ (mov r8, r8)
 80028a6:	e7fd      	b.n	80028a4 <xTaskIncrementTick+0x58>
 80028a8:	4b74      	ldr	r3, [pc, #464]	@ (8002a7c <xTaskIncrementTick+0x230>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b74      	ldr	r3, [pc, #464]	@ (8002a80 <xTaskIncrementTick+0x234>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b72      	ldr	r3, [pc, #456]	@ (8002a7c <xTaskIncrementTick+0x230>)
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4b72      	ldr	r3, [pc, #456]	@ (8002a80 <xTaskIncrementTick+0x234>)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b71      	ldr	r3, [pc, #452]	@ (8002a84 <xTaskIncrementTick+0x238>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	4b70      	ldr	r3, [pc, #448]	@ (8002a84 <xTaskIncrementTick+0x238>)
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f000 fbbf 	bl	8003048 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002a88 <xTaskIncrementTick+0x23c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d200      	bcs.n	80028d6 <xTaskIncrementTick+0x8a>
 80028d4:	e0b9      	b.n	8002a4a <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028d6:	4b69      	ldr	r3, [pc, #420]	@ (8002a7c <xTaskIncrementTick+0x230>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <xTaskIncrementTick+0x23c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	4252      	negs	r2, r2
 80028e6:	601a      	str	r2, [r3, #0]
                    break;
 80028e8:	e0af      	b.n	8002a4a <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ea:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <xTaskIncrementTick+0x230>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d203      	bcs.n	800290a <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002902:	4b61      	ldr	r3, [pc, #388]	@ (8002a88 <xTaskIncrementTick+0x23c>)
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002908:	e09f      	b.n	8002a4a <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	3304      	adds	r3, #4
 800292c:	429a      	cmp	r2, r3
 800292e:	d103      	bne.n	8002938 <xTaskIncrementTick+0xec>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01e      	beq.n	800298e <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	6a12      	ldr	r2, [r2, #32]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	69d2      	ldr	r2, [r2, #28]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3318      	adds	r3, #24
 8002972:	429a      	cmp	r2, r3
 8002974:	d103      	bne.n	800297e <xTaskIncrementTick+0x132>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2200      	movs	r2, #0
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	0018      	movs	r0, r3
 8002992:	f001 f81d 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002996:	0003      	movs	r3, r0
 8002998:	001a      	movs	r2, r3
 800299a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <xTaskIncrementTick+0x240>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <xTaskIncrementTick+0x16c>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f001 f803 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 80029ae:	0003      	movs	r3, r0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	0018      	movs	r0, r3
 80029b4:	f002 f80e 	bl	80049d4 <prvTraceStoreTaskReady>
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029bc:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <xTaskIncrementTick+0x244>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d903      	bls.n	80029cc <xTaskIncrementTick+0x180>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <xTaskIncrementTick+0x244>)
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d0:	4930      	ldr	r1, [pc, #192]	@ (8002a94 <xTaskIncrementTick+0x248>)
 80029d2:	0013      	movs	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	18cb      	adds	r3, r1, r3
 80029dc:	3304      	adds	r3, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	3204      	adds	r2, #4
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a06:	0013      	movs	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4a21      	ldr	r2, [pc, #132]	@ (8002a94 <xTaskIncrementTick+0x248>)
 8002a10:	189a      	adds	r2, r3, r2
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1a:	491e      	ldr	r1, [pc, #120]	@ (8002a94 <xTaskIncrementTick+0x248>)
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	585b      	ldr	r3, [r3, r1]
 8002a26:	1c58      	adds	r0, r3, #1
 8002a28:	491a      	ldr	r1, [pc, #104]	@ (8002a94 <xTaskIncrementTick+0x248>)
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <xTaskIncrementTick+0x24c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d800      	bhi.n	8002a44 <xTaskIncrementTick+0x1f8>
 8002a42:	e748      	b.n	80028d6 <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a48:	e745      	b.n	80028d6 <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <xTaskIncrementTick+0x250>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e004      	b.n	8002a62 <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <xTaskIncrementTick+0x224>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <xTaskIncrementTick+0x224>)
 8002a60:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002a62:	69fb      	ldr	r3, [r7, #28]
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b008      	add	sp, #32
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000158 	.word	0x20000158
 8002a70:	20000140 	.word	0x20000140
 8002a74:	200019a4 	.word	0x200019a4
 8002a78:	20000134 	.word	0x20000134
 8002a7c:	20000114 	.word	0x20000114
 8002a80:	20000118 	.word	0x20000118
 8002a84:	20000148 	.word	0x20000148
 8002a88:	20000150 	.word	0x20000150
 8002a8c:	200019c8 	.word	0x200019c8
 8002a90:	20000138 	.word	0x20000138
 8002a94:	20000088 	.word	0x20000088
 8002a98:	20000084 	.word	0x20000084
 8002a9c:	20000144 	.word	0x20000144

08002aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aa6:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <vTaskSwitchContext+0xd0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <vTaskSwitchContext+0xd4>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002ab4:	e057      	b.n	8002b66 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <vTaskSwitchContext+0xd4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002abc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b78 <vTaskSwitchContext+0xd8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	e008      	b.n	8002ad6 <vTaskSwitchContext+0x36>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <vTaskSwitchContext+0x30>
 8002aca:	b672      	cpsid	i
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	e7fd      	b.n	8002acc <vTaskSwitchContext+0x2c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	4929      	ldr	r1, [pc, #164]	@ (8002b7c <vTaskSwitchContext+0xdc>)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	0013      	movs	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	585b      	ldr	r3, [r3, r1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ed      	beq.n	8002ac4 <vTaskSwitchContext+0x24>
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	0013      	movs	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	189b      	adds	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <vTaskSwitchContext+0xdc>)
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	3308      	adds	r3, #8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d104      	bne.n	8002b18 <vTaskSwitchContext+0x78>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <vTaskSwitchContext+0xe0>)
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <vTaskSwitchContext+0xd8>)
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <vTaskSwitchContext+0xe4>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f000 fff9 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002b32:	0003      	movs	r3, r0
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 ff4b 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <vTaskSwitchContext+0xe8>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <vTaskSwitchContext+0xc0>
 8002b4a:	f000 ffeb 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 ff2f 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002b56:	0003      	movs	r3, r0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f002 f946 	bl	8004dec <prvTraceStoreTaskswitch>
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <vTaskSwitchContext+0xe4>)
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	20000158 	.word	0x20000158
 8002b74:	20000144 	.word	0x20000144
 8002b78:	20000138 	.word	0x20000138
 8002b7c:	20000088 	.word	0x20000088
 8002b80:	20000084 	.word	0x20000084
 8002b84:	200019b0 	.word	0x200019b0
 8002b88:	200019c8 	.word	0x200019c8

08002b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <vTaskPlaceOnEventList+0x16>
 8002b9c:	b672      	cpsid	i
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	e7fd      	b.n	8002b9e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <vTaskPlaceOnEventList+0x3c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3318      	adds	r3, #24
 8002ba8:	001a      	movs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7fe f8db 	bl	8000d6a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa89 	bl	80030d0 <prvAddCurrentTaskToDelayedList>
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	20000084 	.word	0x20000084

08002bcc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <vTaskPlaceOnEventListRestricted+0x18>
 8002bde:	b672      	cpsid	i
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	e7fd      	b.n	8002be0 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	4b33      	ldr	r3, [pc, #204]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	3218      	adds	r2, #24
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3318      	adds	r3, #24
 8002c0e:	001a      	movs	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	425b      	negs	r3, r3
 8002c30:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002c32:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 feca 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	001a      	movs	r2, r3
 8002c40:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <vTaskPlaceOnEventListRestricted+0xf0>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d011      	beq.n	8002c70 <vTaskPlaceOnEventListRestricted+0xa4>
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <vTaskPlaceOnEventListRestricted+0xf4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	18d3      	adds	r3, r2, r3
 8002c54:	0019      	movs	r1, r3
 8002c56:	2088      	movs	r0, #136	@ 0x88
 8002c58:	f002 f85e 	bl	8004d18 <prvTraceStoreKernelCallWithNumericParamOnly>
 8002c5c:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <vTaskPlaceOnEventListRestricted+0xec>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fea7 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002c66:	0003      	movs	r3, r0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 f9bc 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>
 8002c70:	f000 ff58 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002c74:	0003      	movs	r3, r0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 feaa 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	001a      	movs	r2, r3
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <vTaskPlaceOnEventListRestricted+0xf0>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4013      	ands	r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <vTaskPlaceOnEventListRestricted+0xd6>
 8002c8c:	f000 ff4a 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8002c90:	0003      	movs	r3, r0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fe8e 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f002 f9a3 	bl	8004fe8 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fa11 	bl	80030d0 <prvAddCurrentTaskToDelayedList>
    }
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b006      	add	sp, #24
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	20000084 	.word	0x20000084
 8002cbc:	200019c8 	.word	0x200019c8
 8002cc0:	20000134 	.word	0x20000134

08002cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <xTaskRemoveFromEventList+0x1c>
 8002cda:	b672      	cpsid	i
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	e7fd      	b.n	8002cdc <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	6a12      	ldr	r2, [r2, #32]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	69d2      	ldr	r2, [r2, #28]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	3318      	adds	r3, #24
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d103      	bne.n	8002d0e <xTaskRemoveFromEventList+0x4a>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1e5a      	subs	r2, r3, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d1e:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <xTaskRemoveFromEventList+0x1a8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d172      	bne.n	8002e0c <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	68d2      	ldr	r2, [r2, #12]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	3304      	adds	r3, #4
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d103      	bne.n	8002d54 <xTaskRemoveFromEventList+0x90>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fe32 	bl	80039d0 <prvTraceGetTaskNumberHigh16>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	001a      	movs	r2, r3
 8002d70:	4b3f      	ldr	r3, [pc, #252]	@ (8002e70 <xTaskRemoveFromEventList+0x1ac>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <xTaskRemoveFromEventList+0xca>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fe18 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8002d84:	0003      	movs	r3, r0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f001 fe23 	bl	80049d4 <prvTraceStoreTaskReady>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d92:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <xTaskRemoveFromEventList+0x1b0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d903      	bls.n	8002da2 <xTaskRemoveFromEventList+0xde>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9e:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <xTaskRemoveFromEventList+0x1b0>)
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da6:	4934      	ldr	r1, [pc, #208]	@ (8002e78 <xTaskRemoveFromEventList+0x1b4>)
 8002da8:	0013      	movs	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	18cb      	adds	r3, r1, r3
 8002db2:	3304      	adds	r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	3204      	adds	r2, #4
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	0013      	movs	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <xTaskRemoveFromEventList+0x1b4>)
 8002de6:	189a      	adds	r2, r3, r2
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	615a      	str	r2, [r3, #20]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	4921      	ldr	r1, [pc, #132]	@ (8002e78 <xTaskRemoveFromEventList+0x1b4>)
 8002df2:	0013      	movs	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	585b      	ldr	r3, [r3, r1]
 8002dfc:	1c58      	adds	r0, r3, #1
 8002dfe:	491e      	ldr	r1, [pc, #120]	@ (8002e78 <xTaskRemoveFromEventList+0x1b4>)
 8002e00:	0013      	movs	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	5058      	str	r0, [r3, r1]
 8002e0a:	e01b      	b.n	8002e44 <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <xTaskRemoveFromEventList+0x1b8>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	61da      	str	r2, [r3, #28]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	621a      	str	r2, [r3, #32]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	3218      	adds	r2, #24
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	001a      	movs	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4a11      	ldr	r2, [pc, #68]	@ (8002e7c <xTaskRemoveFromEventList+0x1b8>)
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <xTaskRemoveFromEventList+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <xTaskRemoveFromEventList+0x1b8>)
 8002e42:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <xTaskRemoveFromEventList+0x1bc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d905      	bls.n	8002e5e <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <xTaskRemoveFromEventList+0x1c0>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e001      	b.n	8002e62 <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002e62:	69fb      	ldr	r3, [r7, #28]
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b008      	add	sp, #32
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000158 	.word	0x20000158
 8002e70:	200019c8 	.word	0x200019c8
 8002e74:	20000138 	.word	0x20000138
 8002e78:	20000088 	.word	0x20000088
 8002e7c:	2000011c 	.word	0x2000011c
 8002e80:	20000084 	.word	0x20000084
 8002e84:	20000144 	.word	0x20000144

08002e88 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <vTaskInternalSetTimeOutState+0x20>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <vTaskInternalSetTimeOutState+0x24>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	605a      	str	r2, [r3, #4]
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000148 	.word	0x20000148
 8002eac:	20000134 	.word	0x20000134

08002eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <xTaskCheckForTimeOut+0x16>
 8002ec0:	b672      	cpsid	i
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	e7fd      	b.n	8002ec2 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <xTaskCheckForTimeOut+0x22>
 8002ecc:	b672      	cpsid	i
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	e7fd      	b.n	8002ece <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8002ed2:	f000 fc4d 	bl	8003770 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <xTaskCheckForTimeOut+0x94>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <xTaskCheckForTimeOut+0x98>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d00a      	beq.n	8002f08 <xTaskCheckForTimeOut+0x58>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d305      	bcc.n	8002f08 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e016      	b.n	8002f36 <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad2      	subs	r2, r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ffb1 	bl	8002e88 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e004      	b.n	8002f36 <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002f36:	f000 fc2d 	bl	8003794 <vPortExitCritical>

    return xReturn;
 8002f3a:	697b      	ldr	r3, [r7, #20]
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b006      	add	sp, #24
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000134 	.word	0x20000134
 8002f48:	20000148 	.word	0x20000148

08002f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002f50:	4b02      	ldr	r3, [pc, #8]	@ (8002f5c <vTaskMissedYield+0x10>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000144 	.word	0x20000144

08002f60 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e001      	b.n	8002f7e <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    }
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fb4:	f000 f842 	bl	800303c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fb8:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <prvIdleTask+0x1c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d9f9      	bls.n	8002fb4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002fc0:	f000 fbc6 	bl	8003750 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002fc4:	e7f6      	b.n	8002fb4 <prvIdleTask+0x8>
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	20000088 	.word	0x20000088

08002fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e00c      	b.n	8002ff2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	0013      	movs	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4a10      	ldr	r2, [pc, #64]	@ (8003024 <prvInitialiseTaskLists+0x58>)
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd fe96 	bl	8000d18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d9ef      	bls.n	8002fd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <prvInitialiseTaskLists+0x5c>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7fd fe8c 	bl	8000d18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003000:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <prvInitialiseTaskLists+0x60>)
 8003002:	0018      	movs	r0, r3
 8003004:	f7fd fe88 	bl	8000d18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <prvInitialiseTaskLists+0x64>)
 800300a:	0018      	movs	r0, r3
 800300c:	f7fd fe84 	bl	8000d18 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003010:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <prvInitialiseTaskLists+0x68>)
 8003012:	4a05      	ldr	r2, [pc, #20]	@ (8003028 <prvInitialiseTaskLists+0x5c>)
 8003014:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <prvInitialiseTaskLists+0x6c>)
 8003018:	4a04      	ldr	r2, [pc, #16]	@ (800302c <prvInitialiseTaskLists+0x60>)
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000088 	.word	0x20000088
 8003028:	200000ec 	.word	0x200000ec
 800302c:	20000100 	.word	0x20000100
 8003030:	2000011c 	.word	0x2000011c
 8003034:	20000114 	.word	0x20000114
 8003038:	20000118 	.word	0x20000118

0800303c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <prvResetNextTaskUnblockTime+0x2c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <prvResetNextTaskUnblockTime+0x30>)
 8003058:	2201      	movs	r2, #1
 800305a:	4252      	negs	r2, r2
 800305c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800305e:	e005      	b.n	800306c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <prvResetNextTaskUnblockTime+0x2c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <prvResetNextTaskUnblockTime+0x30>)
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000114 	.word	0x20000114
 8003078:	20000150 	.word	0x20000150

0800307c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <xTaskGetCurrentTaskHandle+0x18>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003088:	687b      	ldr	r3, [r7, #4]
    }
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	20000084 	.word	0x20000084

08003098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800309e:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <xTaskGetSchedulerState+0x30>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80030a6:	2301      	movs	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	e008      	b.n	80030be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ac:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <xTaskGetSchedulerState+0x34>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80030b4:	2302      	movs	r3, #2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e001      	b.n	80030be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80030be:	687b      	ldr	r3, [r7, #4]
    }
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	2000013c 	.word	0x2000013c
 80030cc:	20000158 	.word	0x20000158

080030d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030da:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <prvAddCurrentTaskToDelayedList+0x74>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <prvAddCurrentTaskToDelayedList+0x78>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3304      	adds	r3, #4
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd fe75 	bl	8000dd6 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	18d3      	adds	r3, r2, r3
 80030f2:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <prvAddCurrentTaskToDelayedList+0x78>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d209      	bcs.n	8003118 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003104:	4b11      	ldr	r3, [pc, #68]	@ (800314c <prvAddCurrentTaskToDelayedList+0x7c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <prvAddCurrentTaskToDelayedList+0x78>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3304      	adds	r3, #4
 800310e:	0019      	movs	r1, r3
 8003110:	0010      	movs	r0, r2
 8003112:	f7fd fe2a 	bl	8000d6a <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003116:	e010      	b.n	800313a <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <prvAddCurrentTaskToDelayedList+0x80>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <prvAddCurrentTaskToDelayedList+0x78>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3304      	adds	r3, #4
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f7fd fe20 	bl	8000d6a <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <prvAddCurrentTaskToDelayedList+0x84>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d202      	bcs.n	800313a <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <prvAddCurrentTaskToDelayedList+0x84>)
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b004      	add	sp, #16
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	20000134 	.word	0x20000134
 8003148:	20000084 	.word	0x20000084
 800314c:	20000118 	.word	0x20000118
 8003150:	20000114 	.word	0x20000114
 8003154:	20000150 	.word	0x20000150

08003158 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003162:	f000 fa31 	bl	80035c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <xTimerCreateTimerTask+0x44>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800316e:	490c      	ldr	r1, [pc, #48]	@ (80031a0 <xTimerCreateTimerTask+0x48>)
 8003170:	480c      	ldr	r0, [pc, #48]	@ (80031a4 <xTimerCreateTimerTask+0x4c>)
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <xTimerCreateTimerTask+0x50>)
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2303      	movs	r3, #3
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	f7fe ff72 	bl	8002066 <xTaskCreate>
 8003182:	0003      	movs	r3, r0
 8003184:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xTimerCreateTimerTask+0x3a>
 800318c:	b672      	cpsid	i
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	e7fd      	b.n	800318e <xTimerCreateTimerTask+0x36>
        return xReturn;
 8003192:	687b      	ldr	r3, [r7, #4]
    }
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2000018c 	.word	0x2000018c
 80031a0:	08006700 	.word	0x08006700
 80031a4:	08003255 	.word	0x08003255
 80031a8:	20000190 	.word	0x20000190

080031ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80031b8:	e009      	b.n	80031ce <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	18d3      	adds	r3, r2, r3
 80031c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	0010      	movs	r0, r2
 80031cc:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	18d1      	adds	r1, r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f8da 	bl	8003394 <prvInsertTimerInActiveList>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d1ea      	bne.n	80031ba <prvReloadTimer+0xe>
        }
    }
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <prvProcessExpiredTimer+0x60>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3304      	adds	r3, #4
 8003208:	0018      	movs	r0, r3
 800320a:	f7fd fde4 	bl	8000dd6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2228      	movs	r2, #40	@ 0x28
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	001a      	movs	r2, r3
 8003216:	2304      	movs	r3, #4
 8003218:	4013      	ands	r3, r2
 800321a:	d006      	beq.n	800322a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0018      	movs	r0, r3
 8003224:	f7ff ffc2 	bl	80031ac <prvReloadTimer>
 8003228:	e008      	b.n	800323c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2228      	movs	r2, #40	@ 0x28
 800322e:	5c9b      	ldrb	r3, [r3, r2]
 8003230:	2201      	movs	r2, #1
 8003232:	4393      	bics	r3, r2
 8003234:	b2d9      	uxtb	r1, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2228      	movs	r2, #40	@ 0x28
 800323a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	0010      	movs	r0, r2
 8003244:	4798      	blx	r3
    }
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	20000184 	.word	0x20000184

08003254 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800325c:	2308      	movs	r3, #8
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f855 	bl	8003310 <prvGetNextExpireTime>
 8003266:	0003      	movs	r3, r0
 8003268:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0011      	movs	r1, r2
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f805 	bl	8003280 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003276:	f000 f8cf 	bl	8003418 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	e7ee      	b.n	800325c <prvTimerTask+0x8>
	...

08003280 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800328a:	f7ff f9c5 	bl	8002618 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800328e:	2308      	movs	r3, #8
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f85e 	bl	8003354 <prvSampleTimeNow>
 8003298:	0003      	movs	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d12b      	bne.n	80032fa <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10c      	bne.n	80032c2 <prvProcessTimerOrBlockTask+0x42>
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d808      	bhi.n	80032c2 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80032b0:	f7ff f9be 	bl	8002630 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff ff98 	bl	80031f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80032c0:	e01d      	b.n	80032fe <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <prvProcessTimerOrBlockTask+0x88>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <prvProcessTimerOrBlockTask+0x56>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <prvProcessTimerOrBlockTask+0x58>
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80032da:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <prvProcessTimerOrBlockTask+0x8c>)
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	0019      	movs	r1, r3
 80032e8:	f7fe fe8a 	bl	8002000 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80032ec:	f7ff f9a0 	bl	8002630 <xTaskResumeAll>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d104      	bne.n	80032fe <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80032f4:	f000 fa2c 	bl	8003750 <vPortYield>
    }
 80032f8:	e001      	b.n	80032fe <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80032fa:	f7ff f999 	bl	8002630 <xTaskResumeAll>
    }
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	20000188 	.word	0x20000188
 800330c:	2000018c 	.word	0x2000018c

08003310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <prvGetNextExpireTime+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <prvGetNextExpireTime+0x16>
 8003322:	2201      	movs	r2, #1
 8003324:	e000      	b.n	8003328 <prvGetNextExpireTime+0x18>
 8003326:	2200      	movs	r2, #0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <prvGetNextExpireTime+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e001      	b.n	8003344 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003344:	68fb      	ldr	r3, [r7, #12]
    }
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	20000184 	.word	0x20000184

08003354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800335c:	f7ff fa68 	bl	8002830 <xTaskGetTickCount>
 8003360:	0003      	movs	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <prvSampleTimeNow+0x3c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d205      	bcs.n	800337a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 800336e:	f000 f903 	bl	8003578 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e002      	b.n	8003380 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <prvSampleTimeNow+0x3c>)
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8003386:	68fb      	ldr	r3, [r7, #12]
    }
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b004      	add	sp, #16
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000194 	.word	0x20000194

08003394 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d812      	bhi.n	80033e0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e01b      	b.n	8003406 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033ce:	4b10      	ldr	r3, [pc, #64]	@ (8003410 <prvInsertTimerInActiveList+0x7c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3304      	adds	r3, #4
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f7fd fcc6 	bl	8000d6a <vListInsert>
 80033de:	e012      	b.n	8003406 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d206      	bcs.n	80033f6 <prvInsertTimerInActiveList+0x62>
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d302      	bcc.n	80033f6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e007      	b.n	8003406 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033f6:	4b07      	ldr	r3, [pc, #28]	@ (8003414 <prvInsertTimerInActiveList+0x80>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3304      	adds	r3, #4
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f7fd fcb2 	bl	8000d6a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003406:	697b      	ldr	r3, [r7, #20]
    }
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b006      	add	sp, #24
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000188 	.word	0x20000188
 8003414:	20000184 	.word	0x20000184

08003418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800341e:	e098      	b.n	8003552 <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	da00      	bge.n	800342a <prvProcessReceivedCommands+0x12>
 8003428:	e093      	b.n	8003552 <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3304      	adds	r3, #4
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd fcca 	bl	8000dd6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003442:	003b      	movs	r3, r7
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff ff85 	bl	8003354 <prvSampleTimeNow>
 800344a:	0003      	movs	r3, r0
 800344c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b09      	cmp	r3, #9
 8003454:	d900      	bls.n	8003458 <prvProcessReceivedCommands+0x40>
 8003456:	e079      	b.n	800354c <prvProcessReceivedCommands+0x134>
 8003458:	009a      	lsls	r2, r3, #2
 800345a:	4b45      	ldr	r3, [pc, #276]	@ (8003570 <prvProcessReceivedCommands+0x158>)
 800345c:	18d3      	adds	r3, r2, r3
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2228      	movs	r2, #40	@ 0x28
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2201      	movs	r2, #1
 800346a:	4313      	orrs	r3, r2
 800346c:	b2d9      	uxtb	r1, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2228      	movs	r2, #40	@ 0x28
 8003472:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	18d1      	adds	r1, r2, r3
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f7ff ff85 	bl	8003394 <prvInsertTimerInActiveList>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d060      	beq.n	8003550 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2228      	movs	r2, #40	@ 0x28
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	001a      	movs	r2, r3
 8003496:	2304      	movs	r3, #4
 8003498:	4013      	ands	r3, r2
 800349a:	d00a      	beq.n	80034b2 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	18d1      	adds	r1, r2, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7ff fe7e 	bl	80031ac <prvReloadTimer>
 80034b0:	e008      	b.n	80034c4 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2228      	movs	r2, #40	@ 0x28
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	2201      	movs	r2, #1
 80034ba:	4393      	bics	r3, r2
 80034bc:	b2d9      	uxtb	r1, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2228      	movs	r2, #40	@ 0x28
 80034c2:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	0010      	movs	r0, r2
 80034cc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80034ce:	e03f      	b.n	8003550 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2228      	movs	r2, #40	@ 0x28
 80034d4:	5c9b      	ldrb	r3, [r3, r2]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4393      	bics	r3, r2
 80034da:	b2d9      	uxtb	r1, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2228      	movs	r2, #40	@ 0x28
 80034e0:	5499      	strb	r1, [r3, r2]
                        break;
 80034e2:	e036      	b.n	8003552 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2228      	movs	r2, #40	@ 0x28
 80034e8:	5c9b      	ldrb	r3, [r3, r2]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2228      	movs	r2, #40	@ 0x28
 80034f4:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <prvProcessReceivedCommands+0xf4>
 8003506:	b672      	cpsid	i
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	e7fd      	b.n	8003508 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	18d1      	adds	r1, r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	6978      	ldr	r0, [r7, #20]
 800351a:	f7ff ff3b 	bl	8003394 <prvInsertTimerInActiveList>
                        break;
 800351e:	e018      	b.n	8003552 <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2228      	movs	r2, #40	@ 0x28
 8003524:	5c9b      	ldrb	r3, [r3, r2]
 8003526:	001a      	movs	r2, r3
 8003528:	2302      	movs	r3, #2
 800352a:	4013      	ands	r3, r2
 800352c:	d104      	bne.n	8003538 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fa17 	bl	8003964 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003536:	e00c      	b.n	8003552 <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2228      	movs	r2, #40	@ 0x28
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	2201      	movs	r2, #1
 8003540:	4393      	bics	r3, r2
 8003542:	b2d9      	uxtb	r1, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2228      	movs	r2, #40	@ 0x28
 8003548:	5499      	strb	r1, [r3, r2]
                        break;
 800354a:	e002      	b.n	8003552 <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	e000      	b.n	8003552 <prvProcessReceivedCommands+0x13a>
                        break;
 8003550:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <prvProcessReceivedCommands+0x15c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1d39      	adds	r1, r7, #4
 8003558:	2200      	movs	r2, #0
 800355a:	0018      	movs	r0, r3
 800355c:	f7fd fffa 	bl	8001554 <xQueueReceive>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d000      	beq.n	8003566 <prvProcessReceivedCommands+0x14e>
 8003564:	e75c      	b.n	8003420 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	46c0      	nop			@ (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b006      	add	sp, #24
 800356e:	bd80      	pop	{r7, pc}
 8003570:	08006dec 	.word	0x08006dec
 8003574:	2000018c 	.word	0x2000018c

08003578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800357e:	e00b      	b.n	8003598 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003580:	4b0f      	ldr	r3, [pc, #60]	@ (80035c0 <prvSwitchTimerLists+0x48>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800358a:	2301      	movs	r3, #1
 800358c:	425a      	negs	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	0011      	movs	r1, r2
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff fe2c 	bl	80031f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <prvSwitchTimerLists+0x48>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ee      	bne.n	8003580 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80035a2:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <prvSwitchTimerLists+0x48>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80035a8:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <prvSwitchTimerLists+0x4c>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <prvSwitchTimerLists+0x48>)
 80035ae:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 80035b0:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <prvSwitchTimerLists+0x4c>)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
    }
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	20000184 	.word	0x20000184
 80035c4:	20000188 	.word	0x20000188

080035c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80035cc:	f000 f8d0 	bl	8003770 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80035d0:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <prvCheckForValidListAndQueue+0x5c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d120      	bne.n	800361a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <prvCheckForValidListAndQueue+0x60>)
 80035da:	0018      	movs	r0, r3
 80035dc:	f7fd fb9c 	bl	8000d18 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035e0:	4b12      	ldr	r3, [pc, #72]	@ (800362c <prvCheckForValidListAndQueue+0x64>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd fb98 	bl	8000d18 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <prvCheckForValidListAndQueue+0x68>)
 80035ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003628 <prvCheckForValidListAndQueue+0x60>)
 80035ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <prvCheckForValidListAndQueue+0x6c>)
 80035f0:	4a0e      	ldr	r2, [pc, #56]	@ (800362c <prvCheckForValidListAndQueue+0x64>)
 80035f2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035f4:	2200      	movs	r2, #0
 80035f6:	210c      	movs	r1, #12
 80035f8:	200a      	movs	r0, #10
 80035fa:	f7fd fc9f 	bl	8000f3c <xQueueGenericCreate>
 80035fe:	0002      	movs	r2, r0
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <prvCheckForValidListAndQueue+0x5c>)
 8003602:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003604:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <prvCheckForValidListAndQueue+0x5c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <prvCheckForValidListAndQueue+0x5c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <prvCheckForValidListAndQueue+0x70>)
 8003612:	0011      	movs	r1, r2
 8003614:	0018      	movs	r0, r3
 8003616:	f7fe fc99 	bl	8001f4c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800361a:	f000 f8bb 	bl	8003794 <vPortExitCritical>
    }
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	2000018c 	.word	0x2000018c
 8003628:	2000015c 	.word	0x2000015c
 800362c:	20000170 	.word	0x20000170
 8003630:	20000184 	.word	0x20000184
 8003634:	20000188 	.word	0x20000188
 8003638:	08006708 	.word	0x08006708

0800363c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b04      	subs	r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2280      	movs	r2, #128	@ 0x80
 8003652:	0452      	lsls	r2, r2, #17
 8003654:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b04      	subs	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3b04      	subs	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003668:	4a08      	ldr	r2, [pc, #32]	@ (800368c <pxPortInitialiseStack+0x50>)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b14      	subs	r3, #20
 8003672:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b20      	subs	r3, #32
 800367e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	08003691 	.word	0x08003691

08003690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800369a:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <prvTaskExitError+0x2c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	d002      	beq.n	80036a8 <prvTaskExitError+0x18>
 80036a2:	b672      	cpsid	i
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	e7fd      	b.n	80036a4 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80036a8:	b672      	cpsid	i

    while( ulDummy == 0 )
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0fc      	beq.n	80036ac <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000004 	.word	0x20000004

080036c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	0000      	movs	r0, r0
 80036cc:	0000      	movs	r0, r0
	...

080036d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80036d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <pxCurrentTCBConst2>)
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	3020      	adds	r0, #32
 80036d8:	f380 8809 	msr	PSP, r0
 80036dc:	2002      	movs	r0, #2
 80036de:	f380 8814 	msr	CONTROL, r0
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80036e8:	46ae      	mov	lr, r5
 80036ea:	bc08      	pop	{r3}
 80036ec:	bc04      	pop	{r2}
 80036ee:	b662      	cpsie	i
 80036f0:	4718      	bx	r3
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46c0      	nop			@ (mov r8, r8)

08003700 <pxCurrentTCBConst2>:
 8003700:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46c0      	nop			@ (mov r8, r8)

08003708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <xPortStartScheduler+0x40>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0d      	ldr	r3, [pc, #52]	@ (8003748 <xPortStartScheduler+0x40>)
 8003712:	21ff      	movs	r1, #255	@ 0xff
 8003714:	0409      	lsls	r1, r1, #16
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <xPortStartScheduler+0x40>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <xPortStartScheduler+0x40>)
 8003720:	21ff      	movs	r1, #255	@ 0xff
 8003722:	0609      	lsls	r1, r1, #24
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003728:	f000 f898 	bl	800385c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <xPortStartScheduler+0x44>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003732:	f7ff ffcd 	bl	80036d0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003736:	f7ff f9b3 	bl	8002aa0 <vTaskSwitchContext>
    prvTaskExitError();
 800373a:	f7ff ffa9 	bl	8003690 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800373e:	2300      	movs	r3, #0
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	e000ed20 	.word	0xe000ed20
 800374c:	20000004 	.word	0x20000004

08003750 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <vPortYield+0x1c>)
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	0552      	lsls	r2, r2, #21
 800375a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800375c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003760:	f3bf 8f6f 	isb	sy
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003774:	b672      	cpsid	i
    uxCriticalNesting++;
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <vPortEnterCritical+0x20>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <vPortEnterCritical+0x20>)
 800377e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003780:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003784:	f3bf 8f6f 	isb	sy
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	20000004 	.word	0x20000004

08003794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <vPortExitCritical+0x2c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <vPortExitCritical+0x12>
 80037a0:	b672      	cpsid	i
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	e7fd      	b.n	80037a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <vPortExitCritical+0x2c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1e5a      	subs	r2, r3, #1
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <vPortExitCritical+0x2c>)
 80037ae:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <vPortExitCritical+0x2c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d100      	bne.n	80037ba <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80037b8:	b662      	cpsie	i
    }
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000004 	.word	0x20000004

080037c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80037c4:	f3ef 8010 	mrs	r0, PRIMASK
 80037c8:	b672      	cpsid	i
 80037ca:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	0018      	movs	r0, r3

080037d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80037d0:	f380 8810 	msr	PRIMASK, r0
 80037d4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
	...

080037e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80037e0:	f3ef 8009 	mrs	r0, PSP
 80037e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <pxCurrentTCBConst>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	3820      	subs	r0, #32
 80037ea:	6010      	str	r0, [r2, #0]
 80037ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80037ee:	4644      	mov	r4, r8
 80037f0:	464d      	mov	r5, r9
 80037f2:	4656      	mov	r6, sl
 80037f4:	465f      	mov	r7, fp
 80037f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80037f8:	b508      	push	{r3, lr}
 80037fa:	b672      	cpsid	i
 80037fc:	f7ff f950 	bl	8002aa0 <vTaskSwitchContext>
 8003800:	b662      	cpsie	i
 8003802:	bc0c      	pop	{r2, r3}
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	6808      	ldr	r0, [r1, #0]
 8003808:	3010      	adds	r0, #16
 800380a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800380c:	46a0      	mov	r8, r4
 800380e:	46a9      	mov	r9, r5
 8003810:	46b2      	mov	sl, r6
 8003812:	46bb      	mov	fp, r7
 8003814:	f380 8809 	msr	PSP, r0
 8003818:	3820      	subs	r0, #32
 800381a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800381c:	4718      	bx	r3
 800381e:	46c0      	nop			@ (mov r8, r8)

08003820 <pxCurrentTCBConst>:
 8003820:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46c0      	nop			@ (mov r8, r8)

08003828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800382e:	f7ff ffc9 	bl	80037c4 <ulSetInterruptMaskFromISR>
 8003832:	0003      	movs	r3, r0
 8003834:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003836:	f7ff f809 	bl	800284c <xTaskIncrementTick>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d003      	beq.n	8003846 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <SysTick_Handler+0x30>)
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	0552      	lsls	r2, r2, #21
 8003844:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff ffc1 	bl	80037d0 <vClearInterruptMaskFromISR>
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <vPortSetupTimerInterrupt+0x38>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <vPortSetupTimerInterrupt+0x3c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	22fa      	movs	r2, #250	@ 0xfa
 8003872:	0091      	lsls	r1, r2, #2
 8003874:	0018      	movs	r0, r3
 8003876:	f7fc fc47 	bl	8000108 <__udivsi3>
 800387a:	0003      	movs	r3, r0
 800387c:	001a      	movs	r2, r3
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <vPortSetupTimerInterrupt+0x40>)
 8003880:	3a01      	subs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003884:	4b02      	ldr	r3, [pc, #8]	@ (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003886:	2207      	movs	r2, #7
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	e000e010 	.word	0xe000e010
 8003894:	e000e018 	.word	0xe000e018
 8003898:	20000014 	.word	0x20000014
 800389c:	e000e014 	.word	0xe000e014

080038a0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2207      	movs	r2, #7
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2207      	movs	r2, #7
 80038b8:	4393      	bics	r3, r2
 80038ba:	3308      	adds	r3, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d205      	bcs.n	80038ce <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2207      	movs	r2, #7
 80038c6:	4393      	bics	r3, r2
 80038c8:	3308      	adds	r3, #8
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e001      	b.n	80038d2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80038d2:	f7fe fea1 	bl	8002618 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80038d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003954 <pvPortMalloc+0xb4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <pvPortMalloc+0xb8>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	4393      	bics	r3, r2
 80038e4:	001a      	movs	r2, r3
 80038e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <pvPortMalloc+0xb4>)
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01a      	beq.n	8003926 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <pvPortMalloc+0xbc>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80038f8:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <pvPortMalloc+0xc0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d813      	bhi.n	8003926 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80038fe:	4b17      	ldr	r3, [pc, #92]	@ (800395c <pvPortMalloc+0xbc>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	18d2      	adds	r2, r2, r3
 8003906:	4b15      	ldr	r3, [pc, #84]	@ (800395c <pvPortMalloc+0xbc>)
 8003908:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800390a:	429a      	cmp	r2, r3
 800390c:	d90b      	bls.n	8003926 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <pvPortMalloc+0xb4>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <pvPortMalloc+0xbc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <pvPortMalloc+0xbc>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	18d2      	adds	r2, r2, r3
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <pvPortMalloc+0xbc>)
 8003924:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d006      	beq.n	800393a <pvPortMalloc+0x9a>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	0019      	movs	r1, r3
 8003932:	2094      	movs	r0, #148	@ 0x94
 8003934:	f001 f8b6 	bl	8004aa4 <vTraceStoreMemMangEvent>
 8003938:	e005      	b.n	8003946 <pvPortMalloc+0xa6>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	0019      	movs	r1, r3
 8003940:	20e8      	movs	r0, #232	@ 0xe8
 8003942:	f001 f8af 	bl	8004aa4 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8003946:	f7fe fe73 	bl	8002630 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800394a:	68fb      	ldr	r3, [r7, #12]
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}
 8003954:	2000199c 	.word	0x2000199c
 8003958:	2000019f 	.word	0x2000019f
 800395c:	20001998 	.word	0x20001998
 8003960:	000017f7 	.word	0x000017f7

08003964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <vPortFree+0x14>
 8003972:	b672      	cpsid	i
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	e7fd      	b.n	8003974 <vPortFree+0x10>
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f7fe f9ae 	bl	8001cec <uxQueueGetQueueNumber>
 8003990:	0003      	movs	r3, r0
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}

0800399a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fe f9b7 	bl	8001d18 <ucQueueGetQueueType>
 80039aa:	0003      	movs	r3, r0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff face 	bl	8002f60 <uxTaskGetTaskNumber>
 80039c4:	0003      	movs	r3, r0
 80039c6:	b29b      	uxth	r3, r3
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff fac0 	bl	8002f60 <uxTaskGetTaskNumber>
 80039e0:	0003      	movs	r3, r0
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	b29b      	uxth	r3, r3
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}

080039ee <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	000a      	movs	r2, r1
 80039f8:	1cbb      	adds	r3, r7, #2
 80039fa:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7ff faae 	bl	8002f60 <uxTaskGetTaskNumber>
 8003a04:	0003      	movs	r3, r0
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	041a      	lsls	r2, r3, #16
 8003a0a:	1cbb      	adds	r3, r7, #2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff fab7 	bl	8002f88 <vTaskSetTaskNumber>
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	000a      	movs	r2, r1
 8003a2c:	1cbb      	adds	r3, r7, #2
 8003a2e:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff fa94 	bl	8002f60 <uxTaskGetTaskNumber>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	0c1a      	lsrs	r2, r3, #16
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff fa9c 	bl	8002f88 <vTaskSetTaskNumber>
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7ff ff8c 	bl	8003980 <prvTraceGetQueueNumber>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	b29b      	uxth	r3, r3
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7ff ff7e 	bl	8003980 <prvTraceGetQueueNumber>
 8003a84:	0003      	movs	r3, r0
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	b29b      	uxth	r3, r3
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	000a      	movs	r2, r1
 8003a9c:	1cbb      	adds	r3, r7, #2
 8003a9e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7ff ff6c 	bl	8003980 <prvTraceGetQueueNumber>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	1cbb      	adds	r3, r7, #2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7fe f921 	bl	8001d00 <vQueueSetQueueNumber>
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	000a      	movs	r2, r1
 8003ad0:	1cbb      	adds	r3, r7, #2
 8003ad2:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7ff ff52 	bl	8003980 <prvTraceGetQueueNumber>
 8003adc:	0003      	movs	r3, r0
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	0c1a      	lsrs	r2, r3, #16
 8003ae2:	1cbb      	adds	r3, r7, #2
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7fe f906 	bl	8001d00 <vQueueSetQueueNumber>
}
 8003af4:	46c0      	nop			@ (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <vTraceSetSemaphoreName>:
{
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff ffa5 	bl	8003a58 <prvTraceGetQueueNumberLow16>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	0019      	movs	r1, r3
 8003b16:	2001      	movs	r0, #1
 8003b18:	f001 fbf2 	bl	8005300 <prvTraceSetObjectName>
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8003b28:	f7ff faa8 	bl	800307c <xTaskGetCurrentTaskHandle>
 8003b2c:	0003      	movs	r3, r0
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8003b58:	4b62      	ldr	r3, [pc, #392]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2209      	movs	r2, #9
 8003b5e:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8003b60:	4b60      	ldr	r3, [pc, #384]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2250      	movs	r2, #80	@ 0x50
 8003b66:	2102      	movs	r1, #2
 8003b68:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8003b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2251      	movs	r2, #81	@ 0x51
 8003b70:	2106      	movs	r1, #6
 8003b72:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003b74:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2252      	movs	r2, #82	@ 0x52
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8003b7e:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2253      	movs	r2, #83	@ 0x53
 8003b84:	2106      	movs	r1, #6
 8003b86:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8003b88:	4b56      	ldr	r3, [pc, #344]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2254      	movs	r2, #84	@ 0x54
 8003b8e:	2104      	movs	r1, #4
 8003b90:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8003b92:	4b54      	ldr	r3, [pc, #336]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2255      	movs	r2, #85	@ 0x55
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8003b9c:	4b51      	ldr	r3, [pc, #324]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2256      	movs	r2, #86	@ 0x56
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8003ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2257      	movs	r2, #87	@ 0x57
 8003bac:	2102      	movs	r1, #2
 8003bae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2258      	movs	r2, #88	@ 0x58
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8003bba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	225c      	movs	r2, #92	@ 0x5c
 8003bc0:	210f      	movs	r1, #15
 8003bc2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8003bc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	225d      	movs	r2, #93	@ 0x5d
 8003bca:	210f      	movs	r1, #15
 8003bcc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8003bce:	4b45      	ldr	r3, [pc, #276]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	225e      	movs	r2, #94	@ 0x5e
 8003bd4:	210f      	movs	r1, #15
 8003bd6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8003bd8:	4b42      	ldr	r3, [pc, #264]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	225f      	movs	r2, #95	@ 0x5f
 8003bde:	210f      	movs	r1, #15
 8003be0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8003be2:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2260      	movs	r2, #96	@ 0x60
 8003be8:	210f      	movs	r1, #15
 8003bea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8003bec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2261      	movs	r2, #97	@ 0x61
 8003bf2:	210f      	movs	r1, #15
 8003bf4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2262      	movs	r2, #98	@ 0x62
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8003c00:	4b38      	ldr	r3, [pc, #224]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2263      	movs	r2, #99	@ 0x63
 8003c06:	210f      	movs	r1, #15
 8003c08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8003c0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2264      	movs	r2, #100	@ 0x64
 8003c10:	210f      	movs	r1, #15
 8003c12:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8003c14:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2268      	movs	r2, #104	@ 0x68
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8003c1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2269      	movs	r2, #105	@ 0x69
 8003c24:	2110      	movs	r1, #16
 8003c26:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	226a      	movs	r2, #106	@ 0x6a
 8003c2e:	2110      	movs	r1, #16
 8003c30:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	226b      	movs	r2, #107	@ 0x6b
 8003c38:	2113      	movs	r1, #19
 8003c3a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003c3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	226c      	movs	r2, #108	@ 0x6c
 8003c42:	2111      	movs	r1, #17
 8003c44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8003c46:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	226d      	movs	r2, #109	@ 0x6d
 8003c4c:	2110      	movs	r1, #16
 8003c4e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	226e      	movs	r2, #110	@ 0x6e
 8003c56:	2113      	movs	r1, #19
 8003c58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	226f      	movs	r2, #111	@ 0x6f
 8003c60:	2113      	movs	r1, #19
 8003c62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003c64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2270      	movs	r2, #112	@ 0x70
 8003c6a:	2113      	movs	r1, #19
 8003c6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2274      	movs	r2, #116	@ 0x74
 8003c74:	2100      	movs	r1, #0
 8003c76:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2276      	movs	r2, #118	@ 0x76
 8003c7e:	2120      	movs	r1, #32
 8003c80:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8003c82:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2278      	movs	r2, #120	@ 0x78
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8003c8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	227a      	movs	r2, #122	@ 0x7a
 8003c92:	21a0      	movs	r1, #160	@ 0xa0
 8003c94:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	227c      	movs	r2, #124	@ 0x7c
 8003c9c:	2189      	movs	r1, #137	@ 0x89
 8003c9e:	0049      	lsls	r1, r1, #1
 8003ca0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	227e      	movs	r2, #126	@ 0x7e
 8003ca8:	21ab      	movs	r1, #171	@ 0xab
 8003caa:	0049      	lsls	r1, r1, #1
 8003cac:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2280      	movs	r2, #128	@ 0x80
 8003cb4:	21b3      	movs	r1, #179	@ 0xb3
 8003cb6:	0049      	lsls	r1, r1, #1
 8003cb8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2282      	movs	r2, #130	@ 0x82
 8003cc0:	21c6      	movs	r1, #198	@ 0xc6
 8003cc2:	0049      	lsls	r1, r1, #1
 8003cc4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2284      	movs	r2, #132	@ 0x84
 8003ccc:	21d9      	movs	r1, #217	@ 0xd9
 8003cce:	0049      	lsls	r1, r1, #1
 8003cd0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8003cd2:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	22ec      	movs	r2, #236	@ 0xec
 8003cd8:	0052      	lsls	r2, r2, #1
 8003cda:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20002df8 	.word	0x20002df8

08003ce8 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003cf2:	4b40      	ldr	r3, [pc, #256]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	825a      	strh	r2, [r3, #18]
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003cfa:	8a5a      	ldrh	r2, [r3, #18]
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003cfe:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8003d00:	4b3c      	ldr	r3, [pc, #240]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d02:	2202      	movs	r2, #2
 8003d04:	829a      	strh	r2, [r3, #20]
 8003d06:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d08:	8a9a      	ldrh	r2, [r3, #20]
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d0c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8003d0e:	4b39      	ldr	r3, [pc, #228]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d10:	2208      	movs	r2, #8
 8003d12:	82da      	strh	r2, [r3, #22]
 8003d14:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d16:	8ada      	ldrh	r2, [r3, #22]
 8003d18:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d1a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8003d1c:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d1e:	220a      	movs	r2, #10
 8003d20:	831a      	strh	r2, [r3, #24]
 8003d22:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d24:	8b1a      	ldrh	r2, [r3, #24]
 8003d26:	4b33      	ldr	r3, [pc, #204]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d28:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8003d2a:	4b32      	ldr	r3, [pc, #200]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	835a      	strh	r2, [r3, #26]
 8003d30:	4b30      	ldr	r3, [pc, #192]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d32:	8b5a      	ldrh	r2, [r3, #26]
 8003d34:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d36:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003d38:	4b2e      	ldr	r3, [pc, #184]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d3a:	2214      	movs	r2, #20
 8003d3c:	839a      	strh	r2, [r3, #28]
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d40:	8b9a      	ldrh	r2, [r3, #28]
 8003d42:	4b2c      	ldr	r3, [pc, #176]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d44:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003d46:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d48:	2215      	movs	r2, #21
 8003d4a:	83da      	strh	r2, [r3, #30]
 8003d4c:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d4e:	8bda      	ldrh	r2, [r3, #30]
 8003d50:	4b28      	ldr	r3, [pc, #160]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d52:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d56:	2217      	movs	r2, #23
 8003d58:	841a      	strh	r2, [r3, #32]
 8003d5a:	4b26      	ldr	r3, [pc, #152]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d5c:	8c1a      	ldrh	r2, [r3, #32]
 8003d5e:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d60:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003d62:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d64:	2219      	movs	r2, #25
 8003d66:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003d68:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d6a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d6e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003d70:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003d76:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d7e:	2209      	movs	r2, #9
 8003d80:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8003d82:	4b1c      	ldr	r3, [pc, #112]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d84:	220f      	movs	r2, #15
 8003d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d8a:	2213      	movs	r2, #19
 8003d8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8003d8e:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d90:	2214      	movs	r2, #20
 8003d92:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003d94:	4b17      	ldr	r3, [pc, #92]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d96:	2216      	movs	r2, #22
 8003d98:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8003d9a:	4b16      	ldr	r3, [pc, #88]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003da2:	221a      	movs	r2, #26
 8003da4:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e00a      	b.n	8003dc2 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003dac:	4a11      	ldr	r2, [pc, #68]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3318      	adds	r3, #24
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	3306      	adds	r3, #6
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d9f1      	bls.n	8003dac <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	e009      	b.n	8003de2 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003dd0:	2148      	movs	r1, #72	@ 0x48
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	18d3      	adds	r3, r2, r3
 8003dd6:	185b      	adds	r3, r3, r1
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3301      	adds	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b1a      	cmp	r3, #26
 8003de6:	d9f2      	bls.n	8003dce <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	200019cc 	.word	0x200019cc

08003df8 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	0002      	movs	r2, r0
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d816      	bhi.n	8003e3a <pszTraceGetErrorNotEnoughHandles+0x42>
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8003e16:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8003e18:	e010      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <pszTraceGetErrorNotEnoughHandles+0x54>)
 8003e1c:	e00e      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8003e20:	e00c      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8003e24:	e00a      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8003e26:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8003e28:	e008      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <pszTraceGetErrorNotEnoughHandles+0x64>)
 8003e2c:	e006      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8003e30:	e004      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003e34:	e002      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003e38:	e000      	b.n	8003e3c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	08006e14 	.word	0x08006e14
 8003e48:	08006710 	.word	0x08006710
 8003e4c:	08006758 	.word	0x08006758
 8003e50:	080067a0 	.word	0x080067a0
 8003e54:	080067f4 	.word	0x080067f4
 8003e58:	08006840 	.word	0x08006840
 8003e5c:	0800688c 	.word	0x0800688c
 8003e60:	080068d8 	.word	0x080068d8
 8003e64:	0800692c 	.word	0x0800692c
 8003e68:	08006984 	.word	0x08006984
 8003e6c:	080069e0 	.word	0x080069e0

08003e70 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8003e78:	f000 fc74 	bl	8004764 <xTraceInitialize>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e021      	b.n	8003eca <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10b      	bne.n	8003ea4 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8003e8c:	f7ff fe5b 	bl	8003b46 <xTraceKernelPortEnable>
 8003e90:	0003      	movs	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e017      	b.n	8003eca <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 8003e9a:	f000 f8a9 	bl	8003ff0 <prvTraceInitTimestamps>

		prvTraceStart();
 8003e9e:	f000 f825 	bl	8003eec <prvTraceStart>
 8003ea2:	e011      	b.n	8003ec8 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d105      	bne.n	8003eb6 <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <xTraceEnable+0x64>)
 8003eac:	0018      	movs	r0, r3
 8003eae:	f001 fae3 	bl	8005478 <prvTraceError>

		return TRC_FAIL;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e009      	b.n	8003eca <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <xTraceEnable+0x68>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f001 fada 	bl	8005478 <prvTraceError>

		return TRC_FAIL;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	08006a10 	.word	0x08006a10
 8003ed8:	08006a50 	.word	0x08006a50

08003edc <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	prvTraceStop();
 8003ee0:	f000 f86e 	bl	8003fc0 <prvTraceStop>

	return TRC_SUCCESS;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8003ef2:	2417      	movs	r4, #23
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 8003efa:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <prvTraceStart+0xc4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d050      	beq.n	8003fa4 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8003f02:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <prvTraceStart+0xc4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d04d      	beq.n	8003fa8 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8003f0c:	4b29      	ldr	r3, [pc, #164]	@ (8003fb4 <prvTraceStart+0xc8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d14a      	bne.n	8003faa <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8310 	mrs	r3, PRIMASK
 8003f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <prvTraceStart+0xcc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <prvTraceStart+0xcc>)
 8003f32:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <prvTraceStart+0xc4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8003f3c:	f7ff fdf2 	bl	8003b24 <prvTraceGetCurrentTaskHandle>
 8003f40:	0003      	movs	r3, r0
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7ff fd36 	bl	80039b4 <prvTraceGetTaskNumberLow16>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	0025      	movs	r5, r4
 8003f4e:	197b      	adds	r3, r7, r5
 8003f50:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8003f52:	197b      	adds	r3, r7, r5
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d113      	bne.n	8003f82 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8003f5a:	197c      	adds	r4, r7, r5
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f001 f8d7 	bl	8005110 <prvTraceGetObjectHandle>
 8003f62:	0003      	movs	r3, r0
 8003f64:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8003f66:	4a15      	ldr	r2, [pc, #84]	@ (8003fbc <prvTraceStart+0xd0>)
 8003f68:	197b      	adds	r3, r7, r5
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	2003      	movs	r0, #3
 8003f70:	f001 f9c6 	bl	8005300 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8003f74:	197b      	adds	r3, r7, r5
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f000 ffa9 	bl	8004ed4 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8003f82:	2317      	movs	r3, #23
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 ff2f 	bl	8004dec <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <prvTraceStart+0xcc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <prvTraceStart+0xcc>)
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	e002      	b.n	8003faa <prvTraceStart+0xbe>
		return;
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	e000      	b.n	8003faa <prvTraceStart+0xbe>
		return; /* Already running */
 8003fa8:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb0:	20002df8 	.word	0x20002df8
 8003fb4:	20001a30 	.word	0x20001a30
 8003fb8:	200019b4 	.word	0x200019b4
 8003fbc:	08006a90 	.word	0x08006a90

08003fc0 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8003fc4:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <prvTraceStop+0x28>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <prvTraceStop+0x28>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <prvTraceStop+0x2c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8003fdc:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <prvTraceStop+0x2c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4798      	blx	r3
	}
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20002df8 	.word	0x20002df8
 8003fec:	200019c0 	.word	0x200019c0

08003ff0 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <prvTraceInitTimestamps+0x14>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <prvTraceInitTimestamps+0x18>)
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	e000e018 	.word	0xe000e018
 8004008:	200019c4 	.word	0x200019c4

0800400c <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	0008      	movs	r0, r1
 8004016:	0011      	movs	r1, r2
 8004018:	1cfb      	adds	r3, r7, #3
 800401a:	1c02      	adds	r2, r0, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	1cbb      	adds	r3, r7, #2
 8004020:	1c0a      	adds	r2, r1, #0
 8004022:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
 8004024:	1cfb      	adds	r3, r7, #3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b23      	cmp	r3, #35	@ 0x23
 800402a:	d901      	bls.n	8004030 <writeInt8+0x24>
	{
		return 255;
 800402c:	23ff      	movs	r3, #255	@ 0xff
 800402e:	e010      	b.n	8004052 <writeInt8+0x46>
	}

	((uint8_t*)buffer)[i] = value;
 8004030:	1cfb      	adds	r3, r7, #3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	1cba      	adds	r2, r7, #2
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 800403e:	1cfb      	adds	r3, r7, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b23      	cmp	r3, #35	@ 0x23
 8004044:	d901      	bls.n	800404a <writeInt8+0x3e>
	{
		return 255;
 8004046:	23ff      	movs	r3, #255	@ 0xff
 8004048:	e003      	b.n	8004052 <writeInt8+0x46>
	}

	return ((uint8_t) (i + 1));
 800404a:	1cfb      	adds	r3, r7, #3
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	b2db      	uxtb	r3, r3
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}

0800405a <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	0008      	movs	r0, r1
 8004064:	0011      	movs	r1, r2
 8004066:	1cfb      	adds	r3, r7, #3
 8004068:	1c02      	adds	r2, r0, #0
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	003b      	movs	r3, r7
 800406e:	1c0a      	adds	r2, r1, #0
 8004070:	801a      	strh	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
 8004072:	e010      	b.n	8004096 <writeInt16+0x3c>
	{
		if (i >= MAX_ARG_SIZE)
 8004074:	1cfb      	adds	r3, r7, #3
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b23      	cmp	r3, #35	@ 0x23
 800407a:	d901      	bls.n	8004080 <writeInt16+0x26>
		{
			return 255;
 800407c:	23ff      	movs	r3, #255	@ 0xff
 800407e:	e025      	b.n	80040cc <writeInt16+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 8004080:	1cfb      	adds	r3, r7, #3
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
		i++;
 800408c:	1cfb      	adds	r3, r7, #3
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	1cfb      	adds	r3, r7, #3
 8004092:	3201      	adds	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
	while ((i % 2) != 0)
 8004096:	1cfb      	adds	r3, r7, #3
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	4013      	ands	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e7      	bne.n	8004074 <writeInt16+0x1a>
	}

	if (i + 2 > MAX_ARG_SIZE)
 80040a4:	1cfb      	adds	r3, r7, #3
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b22      	cmp	r3, #34	@ 0x22
 80040aa:	d901      	bls.n	80040b0 <writeInt16+0x56>
	{
		return 255;
 80040ac:	23ff      	movs	r3, #255	@ 0xff
 80040ae:	e00d      	b.n	80040cc <writeInt16+0x72>
	}

	((uint16_t*)buffer)[i/2] = value;
 80040b0:	1cfb      	adds	r3, r7, #3
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	003a      	movs	r2, r7
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 80040c4:	1cfb      	adds	r3, r7, #3
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	3302      	adds	r3, #2
 80040ca:	b2db      	uxtb	r3, r3
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	230b      	movs	r3, #11
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	1c0a      	adds	r2, r1, #0
 80040e4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
 80040e6:	e012      	b.n	800410e <writeInt32+0x3a>
	{
		if (i >= MAX_ARG_SIZE)
 80040e8:	230b      	movs	r3, #11
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b23      	cmp	r3, #35	@ 0x23
 80040f0:	d901      	bls.n	80040f6 <writeInt32+0x22>
		{
			return 255;
 80040f2:	23ff      	movs	r3, #255	@ 0xff
 80040f4:	e027      	b.n	8004146 <writeInt32+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 80040f6:	210b      	movs	r1, #11
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
		i++;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	781a      	ldrb	r2, [r3, #0]
 8004108:	187b      	adds	r3, r7, r1
 800410a:	3201      	adds	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
	while ((i % 4) != 0)
 800410e:	210b      	movs	r1, #11
 8004110:	187b      	adds	r3, r7, r1
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	4013      	ands	r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e4      	bne.n	80040e8 <writeInt32+0x14>
	}

	if (i + 4 > MAX_ARG_SIZE)
 800411e:	187b      	adds	r3, r7, r1
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b20      	cmp	r3, #32
 8004124:	d901      	bls.n	800412a <writeInt32+0x56>
	{
		return 255;
 8004126:	23ff      	movs	r3, #255	@ 0xff
 8004128:	e00d      	b.n	8004146 <writeInt32+0x72>
	}

	((uint32_t*)buffer)[i/4] = value;
 800412a:	210b      	movs	r1, #11
 800412c:	187b      	adds	r3, r7, r1
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	b2db      	uxtb	r3, r3
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 800413e:	187b      	adds	r3, r7, r1
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	3304      	adds	r3, #4
 8004144:	b2db      	uxtb	r3, r3
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	001a      	movs	r2, r3
 800415e:	1cfb      	adds	r3, r7, #3
 8004160:	701a      	strb	r2, [r3, #0]
	uint16_t formatStrIndex = 0;
 8004162:	2316      	movs	r3, #22
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2200      	movs	r2, #0
 8004168:	801a      	strh	r2, [r3, #0]
	uint8_t argCounter = 0;
 800416a:	2315      	movs	r3, #21
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
	uint8_t i = byteOffset;
 8004172:	2314      	movs	r3, #20
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	1cfa      	adds	r2, r7, #3
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]

	while (formatStr[formatStrIndex] != '\0')
 800417c:	e16f      	b.n	800445e <prvTraceUserEventFormat+0x30e>
	{
		if (formatStr[formatStrIndex] == '%')
 800417e:	2116      	movs	r1, #22
 8004180:	187b      	adds	r3, r7, r1
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b25      	cmp	r3, #37	@ 0x25
 800418c:	d000      	beq.n	8004190 <prvTraceUserEventFormat+0x40>
 800418e:	e155      	b.n	800443c <prvTraceUserEventFormat+0x2ec>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 8004190:	187b      	adds	r3, r7, r1
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b25      	cmp	r3, #37	@ 0x25
 800419e:	d105      	bne.n	80041ac <prvTraceUserEventFormat+0x5c>
			{
				formatStrIndex += 2;
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	187a      	adds	r2, r7, r1
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	3202      	adds	r2, #2
 80041a8:	801a      	strh	r2, [r3, #0]
				continue;
 80041aa:	e158      	b.n	800445e <prvTraceUserEventFormat+0x30e>
			}

			/* We found a possible argument */
			argCounter++;
 80041ac:	2115      	movs	r1, #21
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	3201      	adds	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]

			formatStrIndex++;
 80041b8:	2116      	movs	r1, #22
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	3201      	adds	r2, #1
 80041c2:	801a      	strh	r2, [r3, #0]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80041c4:	e005      	b.n	80041d2 <prvTraceUserEventFormat+0x82>
				formatStrIndex++;
 80041c6:	2116      	movs	r1, #22
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	3201      	adds	r2, #1
 80041d0:	801a      	strh	r2, [r3, #0]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80041d2:	2116      	movs	r1, #22
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	18d3      	adds	r3, r2, r3
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b2f      	cmp	r3, #47	@ 0x2f
 80041e0:	d906      	bls.n	80041f0 <prvTraceUserEventFormat+0xa0>
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b39      	cmp	r3, #57	@ 0x39
 80041ee:	d9ea      	bls.n	80041c6 <prvTraceUserEventFormat+0x76>
 80041f0:	2116      	movs	r1, #22
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	18d3      	adds	r3, r2, r3
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b23      	cmp	r3, #35	@ 0x23
 80041fe:	d0e2      	beq.n	80041c6 <prvTraceUserEventFormat+0x76>
 8004200:	187b      	adds	r3, r7, r1
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b2e      	cmp	r3, #46	@ 0x2e
 800420c:	d0db      	beq.n	80041c6 <prvTraceUserEventFormat+0x76>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 800420e:	187b      	adds	r3, r7, r1
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d100      	bne.n	800421e <prvTraceUserEventFormat+0xce>
 800421c:	e129      	b.n	8004472 <prvTraceUserEventFormat+0x322>
			{
				switch (formatStr[formatStrIndex])
 800421e:	187b      	adds	r3, r7, r1
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	18d3      	adds	r3, r2, r3
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	3b58      	subs	r3, #88	@ 0x58
 800422a:	2b20      	cmp	r3, #32
 800422c:	d900      	bls.n	8004230 <prvTraceUserEventFormat+0xe0>
 800422e:	e0f3      	b.n	8004418 <prvTraceUserEventFormat+0x2c8>
 8004230:	009a      	lsls	r2, r3, #2
 8004232:	4b96      	ldr	r3, [pc, #600]	@ (800448c <prvTraceUserEventFormat+0x33c>)
 8004234:	18d3      	adds	r3, r2, r3
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	469f      	mov	pc, r3
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1d1a      	adds	r2, r3, #4
 800423e:	60ba      	str	r2, [r7, #8]
 8004240:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004242:	2314      	movs	r3, #20
 8004244:	18fc      	adds	r4, r7, r3
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	7819      	ldrb	r1, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff ff41 	bl	80040d4 <writeInt32>
 8004252:	0003      	movs	r3, r0
 8004254:	7023      	strb	r3, [r4, #0]
						break;
 8004256:	e0e6      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	60ba      	str	r2, [r7, #8]
 800425e:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8004260:	2314      	movs	r3, #20
 8004262:	18fc      	adds	r4, r7, r3
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	7819      	ldrb	r1, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff ff32 	bl	80040d4 <writeInt32>
 8004270:	0003      	movs	r3, r0
 8004272:	7023      	strb	r3, [r4, #0]
						break;
 8004274:	e0d7      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					case 's':
						{
							TraceStringHandle_t xString;
							xTraceStringRegister((char*)va_arg(vl, char*), &xString);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1d1a      	adds	r2, r3, #4
 800427a:	60ba      	str	r2, [r7, #8]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	18ba      	adds	r2, r7, r2
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fa49 	bl	800471c <xTraceStringRegister>
							
							i = writeInt16(buffer,
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	b29a      	uxth	r2, r3
 800428e:	2314      	movs	r3, #20
 8004290:	18fc      	adds	r4, r7, r3
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	7819      	ldrb	r1, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff fede 	bl	800405a <writeInt16>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]
								i,
								(uint16_t)xString);
						}
						break;
 80042a2:	e0c0      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3307      	adds	r3, #7
 80042a8:	2207      	movs	r2, #7
 80042aa:	4393      	bics	r3, r2
 80042ac:	001a      	movs	r2, r3
 80042ae:	3208      	adds	r2, #8
 80042b0:	60ba      	str	r2, [r7, #8]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
						i = writeInt32(	buffer,
 80042b6:	0010      	movs	r0, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	f7fb ffb1 	bl	8000220 <__aeabi_d2uiz>
 80042be:	0002      	movs	r2, r0
 80042c0:	2314      	movs	r3, #20
 80042c2:	18fc      	adds	r4, r7, r3
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	7819      	ldrb	r1, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff ff02 	bl	80040d4 <writeInt32>
 80042d0:	0003      	movs	r3, r0
 80042d2:	7023      	strb	r3, [r4, #0]
						break;
 80042d4:	e0a7      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
#endif
					case 'l':
						formatStrIndex++;
 80042d6:	2116      	movs	r1, #22
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	3201      	adds	r2, #1
 80042e0:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	18d3      	adds	r3, r2, r3
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b66      	cmp	r3, #102	@ 0x66
 80042ee:	d12f      	bne.n	8004350 <prvTraceUserEventFormat+0x200>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3307      	adds	r3, #7
 80042f4:	2207      	movs	r2, #7
 80042f6:	4393      	bics	r3, r2
 80042f8:	001a      	movs	r2, r3
 80042fa:	3208      	adds	r2, #8
 80042fc:	60ba      	str	r2, [r7, #8]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 8004302:	0010      	movs	r0, r2
 8004304:	0019      	movs	r1, r3
 8004306:	f7fb ff8b 	bl	8000220 <__aeabi_d2uiz>
 800430a:	0002      	movs	r2, r0
 800430c:	2514      	movs	r5, #20
 800430e:	197c      	adds	r4, r7, r5
 8004310:	197b      	adds	r3, r7, r5
 8004312:	7819      	ldrb	r1, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff fedc 	bl	80040d4 <writeInt32>
 800431c:	0003      	movs	r3, r0
 800431e:	7023      	strb	r3, [r4, #0]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3307      	adds	r3, #7
 8004324:	2207      	movs	r2, #7
 8004326:	4393      	bics	r3, r2
 8004328:	001a      	movs	r2, r3
 800432a:	3208      	adds	r2, #8
 800432c:	60ba      	str	r2, [r7, #8]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8004332:	0010      	movs	r0, r2
 8004334:	0019      	movs	r1, r3
 8004336:	f7fb ff73 	bl	8000220 <__aeabi_d2uiz>
 800433a:	0002      	movs	r2, r0
 800433c:	197c      	adds	r4, r7, r5
 800433e:	197b      	adds	r3, r7, r5
 8004340:	7819      	ldrb	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fec5 	bl	80040d4 <writeInt32>
 800434a:	0003      	movs	r3, r0
 800434c:	7023      	strb	r3, [r4, #0]
								break;
 800434e:	e000      	b.n	8004352 <prvTraceUserEventFormat+0x202>
#endif
							default:
								break;
 8004350:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004352:	e068      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					case 'h':
						formatStrIndex++;
 8004354:	2116      	movs	r1, #22
 8004356:	187b      	adds	r3, r7, r1
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	187b      	adds	r3, r7, r1
 800435c:	3201      	adds	r2, #1
 800435e:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8004360:	187b      	adds	r3, r7, r1
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d002      	beq.n	8004374 <prvTraceUserEventFormat+0x224>
 800436e:	2b75      	cmp	r3, #117	@ 0x75
 8004370:	d010      	beq.n	8004394 <prvTraceUserEventFormat+0x244>
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8004372:	e01f      	b.n	80043b4 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	60ba      	str	r2, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 800437c:	b29a      	uxth	r2, r3
 800437e:	2314      	movs	r3, #20
 8004380:	18fc      	adds	r4, r7, r3
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	7819      	ldrb	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fe66 	bl	800405a <writeInt16>
 800438e:	0003      	movs	r3, r0
 8004390:	7023      	strb	r3, [r4, #0]
								break;
 8004392:	e00f      	b.n	80043b4 <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	60ba      	str	r2, [r7, #8]
 800439a:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 800439c:	b29a      	uxth	r2, r3
 800439e:	2314      	movs	r3, #20
 80043a0:	18fc      	adds	r4, r7, r3
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	7819      	ldrb	r1, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff fe56 	bl	800405a <writeInt16>
 80043ae:	0003      	movs	r3, r0
 80043b0:	7023      	strb	r3, [r4, #0]
								break;
 80043b2:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 80043b4:	e037      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					case 'b':
						formatStrIndex++;
 80043b6:	2116      	movs	r1, #22
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	3201      	adds	r2, #1
 80043c0:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b64      	cmp	r3, #100	@ 0x64
 80043ce:	d002      	beq.n	80043d6 <prvTraceUserEventFormat+0x286>
 80043d0:	2b75      	cmp	r3, #117	@ 0x75
 80043d2:	d010      	beq.n	80043f6 <prvTraceUserEventFormat+0x2a6>
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 80043d4:	e01f      	b.n	8004416 <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	60ba      	str	r2, [r7, #8]
 80043dc:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	2314      	movs	r3, #20
 80043e2:	18fc      	adds	r4, r7, r3
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	7819      	ldrb	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7ff fe0e 	bl	800400c <writeInt8>
 80043f0:	0003      	movs	r3, r0
 80043f2:	7023      	strb	r3, [r4, #0]
								break;
 80043f4:	e00f      	b.n	8004416 <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1d1a      	adds	r2, r3, #4
 80043fa:	60ba      	str	r2, [r7, #8]
 80043fc:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	2314      	movs	r3, #20
 8004402:	18fc      	adds	r4, r7, r3
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	7819      	ldrb	r1, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0018      	movs	r0, r3
 800440c:	f7ff fdfe 	bl	800400c <writeInt8>
 8004410:	0003      	movs	r3, r0
 8004412:	7023      	strb	r3, [r4, #0]
								break;
 8004414:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8004416:	e006      	b.n	8004426 <prvTraceUserEventFormat+0x2d6>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 8004418:	2115      	movs	r1, #21
 800441a:	187b      	adds	r3, r7, r1
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	187b      	adds	r3, r7, r1
 8004420:	3a01      	subs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
						break;
 8004424:	46c0      	nop			@ (mov r8, r8)
				}

				if (argCounter > 15)
 8004426:	2315      	movs	r3, #21
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b0f      	cmp	r3, #15
 800442e:	d905      	bls.n	800443c <prvTraceUserEventFormat+0x2ec>
				{
					prvTraceError("xTracePrintF - Too many arguments, max 15 allowed!");
 8004430:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <prvTraceUserEventFormat+0x340>)
 8004432:	0018      	movs	r0, r3
 8004434:	f001 f820 	bl	8005478 <prvTraceError>
					return 0;
 8004438:	2300      	movs	r3, #0
 800443a:	e022      	b.n	8004482 <prvTraceUserEventFormat+0x332>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 800443c:	2116      	movs	r1, #22
 800443e:	187b      	adds	r3, r7, r1
 8004440:	881a      	ldrh	r2, [r3, #0]
 8004442:	187b      	adds	r3, r7, r1
 8004444:	3201      	adds	r2, #1
 8004446:	801a      	strh	r2, [r3, #0]
		if (i == 255)
 8004448:	2314      	movs	r3, #20
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2bff      	cmp	r3, #255	@ 0xff
 8004450:	d105      	bne.n	800445e <prvTraceUserEventFormat+0x30e>
		{
			prvTraceError("xTracePrintF - Too large arguments, max 32 byte allowed!");
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <prvTraceUserEventFormat+0x344>)
 8004454:	0018      	movs	r0, r3
 8004456:	f001 f80f 	bl	8005478 <prvTraceError>
			return 0;
 800445a:	2300      	movs	r3, #0
 800445c:	e011      	b.n	8004482 <prvTraceUserEventFormat+0x332>
	while (formatStr[formatStrIndex] != '\0')
 800445e:	2316      	movs	r3, #22
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d000      	beq.n	8004470 <prvTraceUserEventFormat+0x320>
 800446e:	e686      	b.n	800417e <prvTraceUserEventFormat+0x2e>
 8004470:	e000      	b.n	8004474 <prvTraceUserEventFormat+0x324>
				break;
 8004472:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return (uint8_t)(i+3)/4;
 8004474:	2314      	movs	r3, #20
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	3303      	adds	r3, #3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	b2db      	uxtb	r3, r3
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b006      	add	sp, #24
 8004488:	bdb0      	pop	{r4, r5, r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	08006e38 	.word	0x08006e38
 8004490:	08006a9c 	.word	0x08006a9c
 8004494:	08006ad0 	.word	0x08006ad0

08004498 <xTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrintF(TraceStringHandle_t eventLabel, const char* formatStr, ...)
{
 8004498:	b40e      	push	{r1, r2, r3}
 800449a:	b580      	push	{r7, lr}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
	va_list vl;

	va_start(vl, formatStr);
 80044a2:	2320      	movs	r3, #32
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	60fb      	str	r3, [r7, #12]
	xTraceVPrintF(eventLabel, formatStr, vl);
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 f808 	bl	80044c4 <xTraceVPrintF>
	va_end(vl);

	return TRC_SUCCESS;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b005      	add	sp, #20
 80044bc:	bc80      	pop	{r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	b003      	add	sp, #12
 80044c2:	4718      	bx	r3

080044c4 <xTraceVPrintF>:
 * See xTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceVPrintF(TraceStringHandle_t eventLabel, const char* formatStr, va_list vl)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b094      	sub	sp, #80	@ 0x50
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d0:	f3ef 8310 	mrs	r3, PRIMASK
 80044d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80044d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != (void*)0, "vTraceVPrintF: formatStr == NULL", TRC_FAIL);

	trcCRITICAL_SECTION_BEGIN();
 80044d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044da:	2301      	movs	r3, #1
 80044dc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004660 <xTraceVPrintF+0x19c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <xTraceVPrintF+0x19c>)
 80044ee:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80044f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d100      	bne.n	80044fc <xTraceVPrintF+0x38>
 80044fa:	e0a0      	b.n	800463e <xTraceVPrintF+0x17a>
 80044fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004668 <xTraceVPrintF+0x1a4>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d100      	bne.n	8004506 <xTraceVPrintF+0x42>
 8004504:	e09b      	b.n	800463e <xTraceVPrintF+0x17a>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 8004506:	2114      	movs	r1, #20
 8004508:	187b      	adds	r3, r7, r1
 800450a:	64bb      	str	r3, [r7, #72]	@ 0x48

		ue1->type = (uint8_t)EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 800450c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450e:	22aa      	movs	r2, #170	@ 0xaa
 8004510:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 8004512:	187a      	adds	r2, r7, r1
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	68b8      	ldr	r0, [r7, #8]
 8004518:	2304      	movs	r3, #4
 800451a:	f7ff fe19 	bl	8004150 <prvTraceUserEventFormat>
 800451e:	0003      	movs	r3, r0
 8004520:	647b      	str	r3, [r7, #68]	@ 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	0011      	movs	r1, r2
 8004528:	0018      	movs	r0, r3
 800452a:	f000 ff53 	bl	80053d4 <prvTraceOpenSymbol>
 800452e:	0003      	movs	r3, r0
 8004530:	b29a      	uxth	r2, r3
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004534:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 8004536:	20ff      	movs	r0, #255	@ 0xff
 8004538:	f001 f892 	bl	8005660 <prvTraceGetDTS>
 800453c:	0003      	movs	r3, r0
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004542:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 8004544:	4b47      	ldr	r3, [pc, #284]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	2b00      	cmp	r3, #0
 800454c:	d077      	beq.n	800463e <xTraceVPrintF+0x17a>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 800454e:	4b45      	ldr	r3, [pc, #276]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004556:	18d2      	adds	r2, r2, r3
 8004558:	4b42      	ldr	r3, [pc, #264]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	429a      	cmp	r2, r3
 8004560:	d91f      	bls.n	80045a2 <xTraceVPrintF+0xde>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8004562:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b3f      	ldr	r3, [pc, #252]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	2182      	movs	r1, #130	@ 0x82
 8004570:	00c9      	lsls	r1, r1, #3
 8004572:	468c      	mov	ip, r1
 8004574:	4463      	add	r3, ip
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 800457a:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 800458a:	001a      	movs	r2, r3
 800458c:	2100      	movs	r1, #0
 800458e:	f002 f85f 	bl	8006650 <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 8004592:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 800459a:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 80045a2:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d045      	beq.n	8004638 <xTraceVPrintF+0x174>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 ff8f 	bl	80054d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80045b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	2182      	movs	r1, #130	@ 0x82
 80045c4:	00c9      	lsls	r1, r1, #3
 80045c6:	468c      	mov	ip, r1
 80045c8:	4463      	add	r3, ip
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 80045ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d0:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 80045d2:	2314      	movs	r3, #20
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	0019      	movs	r1, r3
 80045d8:	f002 f878 	bl	80066cc <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 80045dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045de:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 80045e0:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 80045ec:	3969      	subs	r1, #105	@ 0x69
 80045ee:	b2c8      	uxtb	r0, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 80045f0:	491e      	ldr	r1, [pc, #120]	@ (800466c <xTraceVPrintF+0x1a8>)
 80045f2:	18d3      	adds	r3, r2, r3
 80045f4:	185b      	adds	r3, r3, r1
 80045f6:	1c02      	adds	r2, r0, #0
 80045f8:	701a      	strb	r2, [r3, #0]

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 80045fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <xTraceVPrintF+0x1a0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	4b18      	ldr	r3, [pc, #96]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004606:	188a      	adds	r2, r1, r2
 8004608:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 800460a:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6959      	ldr	r1, [r3, #20]
 8004610:	4b14      	ldr	r3, [pc, #80]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004616:	188a      	adds	r2, r1, r2
 8004618:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	23fa      	movs	r3, #250	@ 0xfa
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d307      	bcc.n	8004638 <xTraceVPrintF+0x174>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 8004628:	4b0e      	ldr	r3, [pc, #56]	@ (8004664 <xTraceVPrintF+0x1a0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 8004630:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <xTraceVPrintF+0x1a0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004638:	2001      	movs	r0, #1
 800463a:	f000 ff4b 	bl	80054d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 800463e:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <xTraceVPrintF+0x19c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <xTraceVPrintF+0x19c>)
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif

	return TRC_SUCCESS;
 8004654:	2300      	movs	r3, #0
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b014      	add	sp, #80	@ 0x50
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	200019b4 	.word	0x200019b4
 8004664:	20002df8 	.word	0x20002df8
 8004668:	200019bc 	.word	0x200019bc
 800466c:	00000414 	.word	0x00000414

08004670 <xTracePrint>:
 * Generates a User Event with a text label. The label is created/looked up
 * in the symbol table using xTraceStringRegister.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrint(TraceStringHandle_t chn, const char* str)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467a:	f3ef 8310 	mrs	r3, PRIMASK
 800467e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004680:	68fb      	ldr	r3, [r7, #12]
#if (TRC_CFG_USE_SEPARATE_USER_EVENT_BUFFER == 0)
	UserEvent* ue;
	uint8_t dts1;
	TRACE_ALLOC_CRITICAL_SECTION();

	trcCRITICAL_SECTION_BEGIN();
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	2301      	movs	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	4b1f      	ldr	r3, [pc, #124]	@ (8004710 <xTracePrint+0xa0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	4b1e      	ldr	r3, [pc, #120]	@ (8004710 <xTracePrint+0xa0>)
 8004698:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800469a:	4b1e      	ldr	r3, [pc, #120]	@ (8004714 <xTracePrint+0xa4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d025      	beq.n	80046f0 <xTracePrint+0x80>
 80046a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <xTracePrint+0xa8>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <xTracePrint+0x80>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80046ac:	20ff      	movs	r0, #255	@ 0xff
 80046ae:	f000 ffd7 	bl	8005660 <prvTraceGetDTS>
 80046b2:	0003      	movs	r3, r0
 80046b4:	001a      	movs	r2, r3
 80046b6:	241b      	movs	r4, #27
 80046b8:	193b      	adds	r3, r7, r4
 80046ba:	701a      	strb	r2, [r3, #0]
		ue = (UserEvent*) prvTraceNextFreeEventBufferSlot();
 80046bc:	f000 fcb4 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 80046c0:	0003      	movs	r3, r0
 80046c2:	617b      	str	r3, [r7, #20]
		if (ue != (void*)0)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <xTracePrint+0x80>
		{
			ue->dts = dts1;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	193a      	adds	r2, r7, r4
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	705a      	strb	r2, [r3, #1]
			ue->type = (uint8_t)USER_EVENT;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2298      	movs	r2, #152	@ 0x98
 80046d6:	701a      	strb	r2, [r3, #0]
			ue->payload = prvTraceOpenSymbol(str, chn);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fe78 	bl	80053d4 <prvTraceOpenSymbol>
 80046e4:	0003      	movs	r3, r0
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80046ec:	f000 ff8e 	bl	800560c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80046f0:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <xTracePrint+0xa0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <xTracePrint+0xa0>)
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper2(channel, tempDataBuffer, noOfSlots);
	}
#endif

	return TRC_SUCCESS;
 8004706:	2300      	movs	r3, #0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b009      	add	sp, #36	@ 0x24
 800470e:	bd90      	pop	{r4, r7, pc}
 8004710:	200019b4 	.word	0x200019b4
 8004714:	20002df8 	.word	0x20002df8
 8004718:	200019bc 	.word	0x200019bc

0800471c <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2100      	movs	r1, #0
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fe52 	bl	80053d4 <prvTraceOpenSymbol>
 8004730:	0002      	movs	r2, r0
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004736:	2300      	movs	r3, #0
}
 8004738:	0018      	movs	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	b002      	add	sp, #8
 800473e:	bd80      	pop	{r7, pc}

08004740 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 800474c:	230c      	movs	r3, #12
 800474e:	18fa      	adds	r2, r7, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff ffe1 	bl	800471c <xTraceStringRegister>

	return trcStr;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b004      	add	sp, #16
 8004762:	bd80      	pop	{r7, pc}

08004764 <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8004768:	4b7f      	ldr	r3, [pc, #508]	@ (8004968 <xTraceInitialize+0x204>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8004770:	2300      	movs	r3, #0
 8004772:	e0f6      	b.n	8004962 <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8004774:	4b7d      	ldr	r3, [pc, #500]	@ (800496c <xTraceInitialize+0x208>)
 8004776:	2201      	movs	r2, #1
 8004778:	4252      	negs	r2, r2
 800477a:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 800477c:	4b7c      	ldr	r3, [pc, #496]	@ (8004970 <xTraceInitialize+0x20c>)
 800477e:	2201      	movs	r2, #1
 8004780:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8004782:	4b7c      	ldr	r3, [pc, #496]	@ (8004974 <xTraceInitialize+0x210>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8004788:	4b7b      	ldr	r3, [pc, #492]	@ (8004978 <xTraceInitialize+0x214>)
 800478a:	4a7c      	ldr	r2, [pc, #496]	@ (800497c <xTraceInitialize+0x218>)
 800478c:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 800478e:	4b7c      	ldr	r3, [pc, #496]	@ (8004980 <xTraceInitialize+0x21c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b7c      	ldr	r3, [pc, #496]	@ (8004984 <xTraceInitialize+0x220>)
 8004794:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8004796:	4b7c      	ldr	r3, [pc, #496]	@ (8004988 <xTraceInitialize+0x224>)
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff f9cb 	bl	8003b34 <xTraceKernelPortInitialize>
 800479e:	0003      	movs	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0dc      	b.n	8004962 <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 80047a8:	4b73      	ldr	r3, [pc, #460]	@ (8004978 <xTraceInitialize+0x214>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a77      	ldr	r2, [pc, #476]	@ (800498c <xTraceInitialize+0x228>)
 80047ae:	2100      	movs	r1, #0
 80047b0:	0018      	movs	r0, r3
 80047b2:	f001 ff4d 	bl	8006650 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 80047b6:	4b70      	ldr	r3, [pc, #448]	@ (8004978 <xTraceInitialize+0x214>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a75      	ldr	r2, [pc, #468]	@ (8004990 <xTraceInitialize+0x22c>)
 80047bc:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 80047be:	4b6e      	ldr	r3, [pc, #440]	@ (8004978 <xTraceInitialize+0x214>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2207      	movs	r2, #7
 80047c4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 80047c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004978 <xTraceInitialize+0x214>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 80047ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004978 <xTraceInitialize+0x214>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6e      	ldr	r2, [pc, #440]	@ (800498c <xTraceInitialize+0x228>)
 80047d4:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 80047d6:	4b68      	ldr	r3, [pc, #416]	@ (8004978 <xTraceInitialize+0x214>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	22fa      	movs	r2, #250	@ 0xfa
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80047e0:	4b65      	ldr	r3, [pc, #404]	@ (8004978 <xTraceInitialize+0x214>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004994 <xTraceInitialize+0x230>)
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80047e8:	4b63      	ldr	r3, [pc, #396]	@ (8004978 <xTraceInitialize+0x214>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80047f0:	4b61      	ldr	r3, [pc, #388]	@ (8004978 <xTraceInitialize+0x214>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80047f8:	f7ff f9ac 	bl	8003b54 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80047fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004978 <xTraceInitialize+0x214>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2398      	movs	r3, #152	@ 0x98
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4964      	ldr	r1, [pc, #400]	@ (8004998 <xTraceInitialize+0x234>)
 8004806:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8004808:	4b5b      	ldr	r3, [pc, #364]	@ (8004978 <xTraceInitialize+0x214>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2399      	movs	r3, #153	@ 0x99
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	21c8      	movs	r1, #200	@ 0xc8
 8004812:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8004814:	4b58      	ldr	r3, [pc, #352]	@ (8004978 <xTraceInitialize+0x214>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	239a      	movs	r3, #154	@ 0x9a
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	2101      	movs	r1, #1
 800481e:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8004820:	4b55      	ldr	r3, [pc, #340]	@ (8004978 <xTraceInitialize+0x214>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	23ef      	movs	r3, #239	@ 0xef
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	495c      	ldr	r1, [pc, #368]	@ (800499c <xTraceInitialize+0x238>)
 800482a:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 800482c:	4b52      	ldr	r3, [pc, #328]	@ (8004978 <xTraceInitialize+0x214>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	22f0      	movs	r2, #240	@ 0xf0
 8004832:	0092      	lsls	r2, r2, #2
 8004834:	4694      	mov	ip, r2
 8004836:	4463      	add	r3, ip
 8004838:	4959      	ldr	r1, [pc, #356]	@ (80049a0 <xTraceInitialize+0x23c>)
 800483a:	2250      	movs	r2, #80	@ 0x50
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fd3b 	bl	80052b8 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8004842:	4b4d      	ldr	r3, [pc, #308]	@ (8004978 <xTraceInitialize+0x214>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2382      	movs	r3, #130	@ 0x82
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4956      	ldr	r1, [pc, #344]	@ (80049a4 <xTraceInitialize+0x240>)
 800484c:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 800484e:	4b4a      	ldr	r3, [pc, #296]	@ (8004978 <xTraceInitialize+0x214>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a55      	ldr	r2, [pc, #340]	@ (80049a8 <xTraceInitialize+0x244>)
 8004854:	210a      	movs	r1, #10
 8004856:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8004858:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <xTraceInitialize+0x214>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a53      	ldr	r2, [pc, #332]	@ (80049ac <xTraceInitialize+0x248>)
 800485e:	210b      	movs	r1, #11
 8004860:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 8004862:	4b45      	ldr	r3, [pc, #276]	@ (8004978 <xTraceInitialize+0x214>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a52      	ldr	r2, [pc, #328]	@ (80049b0 <xTraceInitialize+0x24c>)
 8004868:	210c      	movs	r1, #12
 800486a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 800486c:	4b42      	ldr	r3, [pc, #264]	@ (8004978 <xTraceInitialize+0x214>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a50      	ldr	r2, [pc, #320]	@ (80049b4 <xTraceInitialize+0x250>)
 8004872:	210d      	movs	r1, #13
 8004874:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 8004876:	4b40      	ldr	r3, [pc, #256]	@ (8004978 <xTraceInitialize+0x214>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4f      	ldr	r2, [pc, #316]	@ (80049b8 <xTraceInitialize+0x254>)
 800487c:	2171      	movs	r1, #113	@ 0x71
 800487e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8004880:	4b3d      	ldr	r3, [pc, #244]	@ (8004978 <xTraceInitialize+0x214>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a4d      	ldr	r2, [pc, #308]	@ (80049bc <xTraceInitialize+0x258>)
 8004886:	2172      	movs	r1, #114	@ 0x72
 8004888:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 800488a:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <xTraceInitialize+0x214>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a4c      	ldr	r2, [pc, #304]	@ (80049c0 <xTraceInitialize+0x25c>)
 8004890:	2173      	movs	r1, #115	@ 0x73
 8004892:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8004894:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <xTraceInitialize+0x214>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a4a      	ldr	r2, [pc, #296]	@ (80049c4 <xTraceInitialize+0x260>)
 800489a:	2174      	movs	r1, #116	@ 0x74
 800489c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 800489e:	4b36      	ldr	r3, [pc, #216]	@ (8004978 <xTraceInitialize+0x214>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	239e      	movs	r3, #158	@ 0x9e
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	21f1      	movs	r1, #241	@ 0xf1
 80048a8:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 80048aa:	4b33      	ldr	r3, [pc, #204]	@ (8004978 <xTraceInitialize+0x214>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a46      	ldr	r2, [pc, #280]	@ (80049c8 <xTraceInitialize+0x264>)
 80048b0:	21f2      	movs	r1, #242	@ 0xf2
 80048b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 80048b4:	4b30      	ldr	r3, [pc, #192]	@ (8004978 <xTraceInitialize+0x214>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a44      	ldr	r2, [pc, #272]	@ (80049cc <xTraceInitialize+0x268>)
 80048ba:	21f3      	movs	r1, #243	@ 0xf3
 80048bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 80048be:	4b2e      	ldr	r3, [pc, #184]	@ (8004978 <xTraceInitialize+0x214>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a43      	ldr	r2, [pc, #268]	@ (80049d0 <xTraceInitialize+0x26c>)
 80048c4:	21f4      	movs	r1, #244	@ 0xf4
 80048c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 80048c8:	f7ff fa0e 	bl	8003ce8 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 80048cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004978 <xTraceInitialize+0x214>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	22f4      	movs	r2, #244	@ 0xf4
 80048d2:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80048d4:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <xTraceInitialize+0x214>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	22f3      	movs	r2, #243	@ 0xf3
 80048da:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80048dc:	4b26      	ldr	r3, [pc, #152]	@ (8004978 <xTraceInitialize+0x214>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	22f2      	movs	r2, #242	@ 0xf2
 80048e2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80048e4:	4b24      	ldr	r3, [pc, #144]	@ (8004978 <xTraceInitialize+0x214>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	22f1      	movs	r2, #241	@ 0xf1
 80048ea:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80048ec:	4b22      	ldr	r3, [pc, #136]	@ (8004978 <xTraceInitialize+0x214>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2274      	movs	r2, #116	@ 0x74
 80048f2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80048f4:	4b20      	ldr	r3, [pc, #128]	@ (8004978 <xTraceInitialize+0x214>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2273      	movs	r2, #115	@ 0x73
 80048fa:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80048fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004978 <xTraceInitialize+0x214>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2272      	movs	r2, #114	@ 0x72
 8004902:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8004904:	4b1c      	ldr	r3, [pc, #112]	@ (8004978 <xTraceInitialize+0x214>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2271      	movs	r2, #113	@ 0x71
 800490a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 800490c:	4b1a      	ldr	r3, [pc, #104]	@ (8004978 <xTraceInitialize+0x214>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2204      	movs	r2, #4
 8004912:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8004914:	4b18      	ldr	r3, [pc, #96]	@ (8004978 <xTraceInitialize+0x214>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2203      	movs	r2, #3
 800491a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 800491c:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <xTraceInitialize+0x214>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2202      	movs	r2, #2
 8004922:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8004924:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <xTraceInitialize+0x214>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <xTraceInitialize+0x210>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004934:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <xTraceInitialize+0x214>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	22f0      	movs	r2, #240	@ 0xf0
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	1898      	adds	r0, r3, r2
 800493e:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <xTraceInitialize+0x210>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2250      	movs	r2, #80	@ 0x50
 8004944:	0019      	movs	r1, r3
 8004946:	f000 fcb7 	bl	80052b8 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <xTraceInitialize+0x214>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	23ee      	movs	r3, #238	@ 0xee
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	2101      	movs	r1, #1
 8004954:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 8004956:	f7ff fb33 	bl	8003fc0 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 800495a:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <xTraceInitialize+0x204>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004960:	2300      	movs	r3, #0
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20002dfc 	.word	0x20002dfc
 800496c:	200019c8 	.word	0x200019c8
 8004970:	200019ca 	.word	0x200019ca
 8004974:	20001a30 	.word	0x20001a30
 8004978:	20002df8 	.word	0x20002df8
 800497c:	20001a34 	.word	0x20001a34
 8004980:	e000e018 	.word	0xe000e018
 8004984:	200019c4 	.word	0x200019c4
 8004988:	200019a0 	.word	0x200019a0
 800498c:	000013c4 	.word	0x000013c4
 8004990:	00001aa1 	.word	0x00001aa1
 8004994:	f0f0f0f0 	.word	0xf0f0f0f0
 8004998:	f1f1f1f1 	.word	0xf1f1f1f1
 800499c:	f2f2f2f2 	.word	0xf2f2f2f2
 80049a0:	08006b0c 	.word	0x08006b0c
 80049a4:	f3f3f3f3 	.word	0xf3f3f3f3
 80049a8:	000013b8 	.word	0x000013b8
 80049ac:	000013b9 	.word	0x000013b9
 80049b0:	000013ba 	.word	0x000013ba
 80049b4:	000013bb 	.word	0x000013bb
 80049b8:	000013bc 	.word	0x000013bc
 80049bc:	000013bd 	.word	0x000013bd
 80049c0:	000013be 	.word	0x000013be
 80049c4:	000013bf 	.word	0x000013bf
 80049c8:	000013c1 	.word	0x000013c1
 80049cc:	000013c2 	.word	0x000013c2
 80049d0:	000013c3 	.word	0x000013c3

080049d4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80049d4:	b5b0      	push	{r4, r5, r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	0002      	movs	r2, r0
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80049e0:	1dfb      	adds	r3, r7, #7
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d04d      	beq.n	8004a84 <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80049e8:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <prvTraceStoreTaskReady+0xbc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d04b      	beq.n	8004a88 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80049f0:	4b28      	ldr	r3, [pc, #160]	@ (8004a94 <prvTraceStoreTaskReady+0xc0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80049f8:	4b27      	ldr	r3, [pc, #156]	@ (8004a98 <prvTraceStoreTaskReady+0xc4>)
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fd3c 	bl	8005478 <prvTraceError>
		return;
 8004a00:	e043      	b.n	8004a8a <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a08:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	4b1e      	ldr	r3, [pc, #120]	@ (8004a94 <prvTraceStoreTaskReady+0xc0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <prvTraceStoreTaskReady+0xc0>)
 8004a20:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8004a22:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <prvTraceStoreTaskReady+0xc8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004a2c:	251a      	movs	r5, #26
 8004a2e:	197c      	adds	r4, r7, r5
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <prvTraceStoreTaskReady+0xcc>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 fe14 	bl	8005660 <prvTraceGetDTS>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8004a3c:	2419      	movs	r4, #25
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	1dfa      	adds	r2, r7, #7
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8004a46:	f000 faef 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00c      	beq.n	8004a6e <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2202      	movs	r2, #2
 8004a58:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	197a      	adds	r2, r7, r5
 8004a5e:	8812      	ldrh	r2, [r2, #0]
 8004a60:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	193a      	adds	r2, r7, r4
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004a6a:	f000 fdcf 	bl	800560c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <prvTraceStoreTaskReady+0xc0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvTraceStoreTaskReady+0xc0>)
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	e002      	b.n	8004a8a <prvTraceStoreTaskReady+0xb6>
		return;
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	e000      	b.n	8004a8a <prvTraceStoreTaskReady+0xb6>
		return;
 8004a88:	46c0      	nop			@ (mov r8, r8)
}
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b008      	add	sp, #32
 8004a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a90:	20000010 	.word	0x20000010
 8004a94:	200019b4 	.word	0x200019b4
 8004a98:	08006b20 	.word	0x08006b20
 8004a9c:	20002df8 	.word	0x20002df8
 8004aa0:	0000ffff 	.word	0x0000ffff

08004aa4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8004aa4:	b5b0      	push	{r4, r5, r7, lr}
 8004aa6:	b08e      	sub	sp, #56	@ 0x38
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8004ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d100      	bne.n	8004aba <vTraceStoreMemMangEvent+0x16>
 8004ab8:	e090      	b.n	8004bdc <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	da03      	bge.n	8004ac8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	e001      	b.n	8004acc <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004acc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ad2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8004ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <vTraceStoreMemMangEvent+0x144>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8004be8 <vTraceStoreMemMangEvent+0x144>)
 8004aea:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8004af2:	4b3c      	ldr	r3, [pc, #240]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	188a      	adds	r2, r1, r2
 8004b00:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8004b02:	4b38      	ldr	r3, [pc, #224]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b08:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d905      	bls.n	8004b1e <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8004b12:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8004b1e:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <vTraceStoreMemMangEvent+0x140>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d04e      	beq.n	8004bc6 <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004b28:	20ff      	movs	r0, #255	@ 0xff
 8004b2a:	f000 fd99 	bl	8005660 <prvTraceGetDTS>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	001a      	movs	r2, r3
 8004b32:	242f      	movs	r4, #47	@ 0x2f
 8004b34:	193b      	adds	r3, r7, r4
 8004b36:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bec <vTraceStoreMemMangEvent+0x148>)
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	0010      	movs	r0, r2
 8004b40:	f000 f8bc 	bl	8004cbc <prvTraceGetParam>
 8004b44:	0002      	movs	r2, r0
 8004b46:	252c      	movs	r5, #44	@ 0x2c
 8004b48:	197b      	adds	r3, r7, r5
 8004b4a:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8004b4c:	f000 fa6c 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004b50:	0003      	movs	r3, r0
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d035      	beq.n	8004bc6 <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	193a      	adds	r2, r7, r4
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	197a      	adds	r2, r7, r5
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004b70:	f000 fd4c 	bl	800560c <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	@ (8004bec <vTraceStoreMemMangEvent+0x148>)
 8004b78:	0019      	movs	r1, r3
 8004b7a:	0010      	movs	r0, r2
 8004b7c:	f000 f89e 	bl	8004cbc <prvTraceGetParam>
 8004b80:	0002      	movs	r2, r0
 8004b82:	2426      	movs	r4, #38	@ 0x26
 8004b84:	193b      	adds	r3, r7, r4
 8004b86:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8004b88:	2525      	movs	r5, #37	@ 0x25
 8004b8a:	197b      	adds	r3, r7, r5
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8004b90:	f000 fa4a 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004b94:	0003      	movs	r3, r0
 8004b96:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	193a      	adds	r2, r7, r4
 8004ba2:	8812      	ldrh	r2, [r2, #0]
 8004ba4:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	197a      	adds	r2, r7, r5
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8004bc2:	f000 fd23 	bl	800560c <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8004bc6:	4b08      	ldr	r3, [pc, #32]	@ (8004be8 <vTraceStoreMemMangEvent+0x144>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <vTraceStoreMemMangEvent+0x144>)
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	e000      	b.n	8004bde <vTraceStoreMemMangEvent+0x13a>
		return;
 8004bdc:	46c0      	nop			@ (mov r8, r8)
}
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b00e      	add	sp, #56	@ 0x38
 8004be2:	bdb0      	pop	{r4, r5, r7, pc}
 8004be4:	20002df8 	.word	0x20002df8
 8004be8:	200019b4 	.word	0x200019b4
 8004bec:	0000ffff 	.word	0x0000ffff

08004bf0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	b08a      	sub	sp, #40	@ 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	230b      	movs	r3, #11
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	1c0a      	adds	r2, r1, #0
 8004c00:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8004c02:	4b29      	ldr	r3, [pc, #164]	@ (8004ca8 <prvTraceStoreKernelCall+0xb8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <prvTraceStoreKernelCall+0xbc>)
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 fc33 	bl	8005478 <prvTraceError>
		return;
 8004c12:	e045      	b.n	8004ca0 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 8004c14:	4b26      	ldr	r3, [pc, #152]	@ (8004cb0 <prvTraceStoreKernelCall+0xc0>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d040      	beq.n	8004c9e <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	617b      	str	r3, [r7, #20]
  return(result);
 8004c22:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c26:	2301      	movs	r3, #1
 8004c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			@ (mov r8, r8)
 8004c32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <prvTraceStoreKernelCall+0xb8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <prvTraceStoreKernelCall+0xb8>)
 8004c3a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <prvTraceStoreKernelCall+0xc4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004c46:	2522      	movs	r5, #34	@ 0x22
 8004c48:	197c      	adds	r4, r7, r5
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <prvTraceStoreKernelCall+0xc8>)
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fd07 	bl	8005660 <prvTraceGetDTS>
 8004c52:	0003      	movs	r3, r0
 8004c54:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004c56:	2421      	movs	r4, #33	@ 0x21
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8004c5e:	f000 f9e3 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004c62:	0003      	movs	r3, r0
 8004c64:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	197a      	adds	r2, r7, r5
 8004c70:	8812      	ldrh	r2, [r2, #0]
 8004c72:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	193a      	adds	r2, r7, r4
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004c84:	f000 fcc2 	bl	800560c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <prvTraceStoreKernelCall+0xb8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <prvTraceStoreKernelCall+0xb8>)
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	e000      	b.n	8004ca0 <prvTraceStoreKernelCall+0xb0>
		return;
 8004c9e:	46c0      	nop			@ (mov r8, r8)
}
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b00a      	add	sp, #40	@ 0x28
 8004ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	200019b4 	.word	0x200019b4
 8004cac:	08006b58 	.word	0x08006b58
 8004cb0:	200019bc 	.word	0x200019bc
 8004cb4:	20002df8 	.word	0x20002df8
 8004cb8:	0000ffff 	.word	0x0000ffff

08004cbc <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d801      	bhi.n	8004cd2 <prvTraceGetParam+0x16>
	{
		return param;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	e01e      	b.n	8004d10 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8004cd2:	f000 f9a9 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004cd6:	0003      	movs	r3, r0
 8004cd8:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d014      	beq.n	8004d0a <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4013      	ands	r3, r2
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004d06:	f000 fc81 	bl	800560c <prvTraceUpdateCounters>
		}

		return param & param_max;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4013      	ands	r3, r2
	}
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b004      	add	sp, #16
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8004d22:	2326      	movs	r3, #38	@ 0x26
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2200      	movs	r2, #0
 8004d28:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8004d32:	4b2a      	ldr	r3, [pc, #168]	@ (8004ddc <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 fb9f 	bl	8005478 <prvTraceError>
		return;
 8004d3a:	e04a      	b.n	8004dd2 <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d40:	613b      	str	r3, [r7, #16]
  return(result);
 8004d42:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	2301      	movs	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004d5a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004d5c:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02a      	beq.n	8004dbc <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 8004d66:	4b1f      	ldr	r3, [pc, #124]	@ (8004de4 <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d026      	beq.n	8004dbc <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8004d6e:	20ff      	movs	r0, #255	@ 0xff
 8004d70:	f000 fc76 	bl	8005660 <prvTraceGetDTS>
 8004d74:	0003      	movs	r3, r0
 8004d76:	001a      	movs	r2, r3
 8004d78:	241f      	movs	r4, #31
 8004d7a:	193b      	adds	r3, r7, r4
 8004d7c:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8004d82:	0019      	movs	r1, r3
 8004d84:	0010      	movs	r0, r2
 8004d86:	f7ff ff99 	bl	8004cbc <prvTraceGetParam>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	2526      	movs	r5, #38	@ 0x26
 8004d8e:	197b      	adds	r3, r7, r5
 8004d90:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8004d92:	f000 f949 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004d96:	0003      	movs	r3, r0
 8004d98:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	193a      	adds	r2, r7, r4
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	197a      	adds	r2, r7, r5
 8004db4:	8812      	ldrh	r2, [r2, #0]
 8004db6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004db8:	f000 fc28 	bl	800560c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f383 8810 	msr	PRIMASK, r3
}
 8004dd0:	46c0      	nop			@ (mov r8, r8)
}
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b00a      	add	sp, #40	@ 0x28
 8004dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd8:	200019b4 	.word	0x200019b4
 8004ddc:	08006bc8 	.word	0x08006bc8
 8004de0:	20002df8 	.word	0x20002df8
 8004de4:	200019bc 	.word	0x200019bc
 8004de8:	0000ffff 	.word	0x0000ffff

08004dec <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	0002      	movs	r2, r0
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	2301      	movs	r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			@ (mov r8, r8)
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec4 <prvTraceStoreTaskswitch+0xd8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <prvTraceStoreTaskswitch+0xd8>)
 8004e16:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <prvTraceStoreTaskswitch+0xdc>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	1dfa      	adds	r2, r7, #7
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d03f      	beq.n	8004ea4 <prvTraceStoreTaskswitch+0xb8>
 8004e24:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <prvTraceStoreTaskswitch+0xe0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03a      	beq.n	8004ea4 <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004e2e:	231a      	movs	r3, #26
 8004e30:	18fc      	adds	r4, r7, r3
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <prvTraceStoreTaskswitch+0xe4>)
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 fc13 	bl	8005660 <prvTraceGetDTS>
 8004e3a:	0003      	movs	r3, r0
 8004e3c:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <prvTraceStoreTaskswitch+0xdc>)
 8004e40:	1dfa      	adds	r2, r7, #7
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8004e46:	2319      	movs	r3, #25
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <prvTraceStoreTaskswitch+0xdc>)
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8004e50:	f000 f8ea 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 8004e54:	0003      	movs	r3, r0
 8004e56:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d022      	beq.n	8004ea4 <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <prvTraceStoreTaskswitch+0xdc>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	0019      	movs	r1, r3
 8004e64:	2003      	movs	r0, #3
 8004e66:	f000 f897 	bl	8004f98 <prvTraceGetObjectState>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d103      	bne.n	8004e78 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2207      	movs	r2, #7
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	221a      	movs	r2, #26
 8004e82:	18ba      	adds	r2, r7, r2
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2219      	movs	r2, #25
 8004e8c:	18ba      	adds	r2, r7, r2
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <prvTraceStoreTaskswitch+0xdc>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	0019      	movs	r1, r3
 8004e9a:	2003      	movs	r0, #3
 8004e9c:	f000 f84c 	bl	8004f38 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8004ea0:	f000 fbb4 	bl	800560c <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8004ea4:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <prvTraceStoreTaskswitch+0xd8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <prvTraceStoreTaskswitch+0xd8>)
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			@ (mov r8, r8)
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b009      	add	sp, #36	@ 0x24
 8004ec0:	bd90      	pop	{r4, r7, pc}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	200019b4 	.word	0x200019b4
 8004ec8:	200019bc 	.word	0x200019bc
 8004ecc:	20002df8 	.word	0x20002df8
 8004ed0:	0000ffff 	.word	0x0000ffff

08004ed4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	0004      	movs	r4, r0
 8004edc:	0008      	movs	r0, r1
 8004ede:	0011      	movs	r1, r2
 8004ee0:	1dfb      	adds	r3, r7, #7
 8004ee2:	1c22      	adds	r2, r4, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	1dbb      	adds	r3, r7, #6
 8004ee8:	1c02      	adds	r2, r0, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	1d7b      	adds	r3, r7, #5
 8004eee:	1c0a      	adds	r2, r1, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <prvTraceSetPriorityProperty+0x60>)
 8004ef4:	681c      	ldr	r4, [r3, #0]
 8004ef6:	1dfb      	adds	r3, r7, #7
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	1dbb      	adds	r3, r7, #6
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	0011      	movs	r1, r2
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 f8bb 	bl	800507c <uiIndexOfObject>
 8004f06:	0003      	movs	r3, r0
 8004f08:	0018      	movs	r0, r3
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <prvTraceSetPriorityProperty+0x60>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	1dfb      	adds	r3, r7, #7
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	215c      	movs	r1, #92	@ 0x5c
 8004f14:	18d3      	adds	r3, r2, r3
 8004f16:	185b      	adds	r3, r3, r1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	18c3      	adds	r3, r0, r3
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	2288      	movs	r2, #136	@ 0x88
 8004f20:	18e3      	adds	r3, r4, r3
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	1d7a      	adds	r2, r7, #5
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b003      	add	sp, #12
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	20002df8 	.word	0x20002df8

08004f38 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	0004      	movs	r4, r0
 8004f40:	0008      	movs	r0, r1
 8004f42:	0011      	movs	r1, r2
 8004f44:	1dfb      	adds	r3, r7, #7
 8004f46:	1c22      	adds	r2, r4, #0
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	1dbb      	adds	r3, r7, #6
 8004f4c:	1c02      	adds	r2, r0, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	1d7b      	adds	r3, r7, #5
 8004f52:	1c0a      	adds	r2, r1, #0
 8004f54:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8004f56:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <prvTraceSetObjectState+0x5c>)
 8004f58:	681c      	ldr	r4, [r3, #0]
 8004f5a:	1dfb      	adds	r3, r7, #7
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	1dbb      	adds	r3, r7, #6
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	0011      	movs	r1, r2
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 f889 	bl	800507c <uiIndexOfObject>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <prvTraceSetObjectState+0x5c>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	215c      	movs	r1, #92	@ 0x5c
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	185b      	adds	r3, r3, r1
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	18c3      	adds	r3, r0, r3
 8004f80:	2288      	movs	r2, #136	@ 0x88
 8004f82:	18e3      	adds	r3, r4, r3
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	1d7a      	adds	r2, r7, #5
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	701a      	strb	r2, [r3, #0]
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b003      	add	sp, #12
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	20002df8 	.word	0x20002df8

08004f98 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	1c0a      	adds	r2, r1, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8004faa:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <prvTraceGetObjectState+0x4c>)
 8004fac:	681c      	ldr	r4, [r3, #0]
 8004fae:	1dfb      	adds	r3, r7, #7
 8004fb0:	781a      	ldrb	r2, [r3, #0]
 8004fb2:	1dbb      	adds	r3, r7, #6
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 f85f 	bl	800507c <uiIndexOfObject>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <prvTraceGetObjectState+0x4c>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	215c      	movs	r1, #92	@ 0x5c
 8004fcc:	18d3      	adds	r3, r2, r3
 8004fce:	185b      	adds	r3, r3, r1
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	18c3      	adds	r3, r0, r3
 8004fd4:	2288      	movs	r2, #136	@ 0x88
 8004fd6:	18e3      	adds	r3, r4, r3
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b003      	add	sp, #12
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	20002df8 	.word	0x20002df8

08004fe8 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	0002      	movs	r2, r0
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <prvTraceSetTaskInstanceFinished+0x3c>)
 8004ff6:	681c      	ldr	r4, [r3, #0]
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2103      	movs	r1, #3
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 f83c 	bl	800507c <uiIndexOfObject>
 8005004:	0003      	movs	r3, r0
 8005006:	0019      	movs	r1, r3
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <prvTraceSetTaskInstanceFinished+0x3c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	225f      	movs	r2, #95	@ 0x5f
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	18cb      	adds	r3, r1, r3
 8005012:	2288      	movs	r2, #136	@ 0x88
 8005014:	18e3      	adds	r3, r4, r3
 8005016:	189b      	adds	r3, r3, r2
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
#endif
}
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b003      	add	sp, #12
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	20002df8 	.word	0x20002df8

08005028 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <prvTraceNextFreeEventBufferSlot+0x4c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8005036:	2300      	movs	r3, #0
 8005038:	e018      	b.n	800506c <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <prvTraceNextFreeEventBufferSlot+0x4c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	23fa      	movs	r3, #250	@ 0xfa
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	429a      	cmp	r2, r3
 8005046:	d305      	bcc.n	8005054 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <prvTraceNextFreeEventBufferSlot+0x50>)
 800504a:	0018      	movs	r0, r3
 800504c:	f000 fa14 	bl	8005478 <prvTraceError>
		return (void*)0;
 8005050:	2300      	movs	r3, #0
 8005052:	e00b      	b.n	800506c <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <prvTraceNextFreeEventBufferSlot+0x4c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	2182      	movs	r1, #130	@ 0x82
 8005062:	00c9      	lsls	r1, r1, #3
 8005064:	468c      	mov	ip, r1
 8005066:	4463      	add	r3, ip
 8005068:	18d3      	adds	r3, r2, r3
 800506a:	3304      	adds	r3, #4
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	20002df8 	.word	0x20002df8
 8005078:	08006c00 	.word	0x08006c00

0800507c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	0002      	movs	r2, r0
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	1dbb      	adds	r3, r7, #6
 800508a:	1c0a      	adds	r2, r1, #0
 800508c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800508e:	1dbb      	adds	r3, r7, #6
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d82e      	bhi.n	80050f4 <uiIndexOfObject+0x78>
 8005096:	1dfb      	adds	r3, r7, #7
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02a      	beq.n	80050f4 <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 800509e:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <uiIndexOfObject+0x8c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	1dbb      	adds	r3, r7, #6
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2150      	movs	r1, #80	@ 0x50
 80050a8:	18d3      	adds	r3, r2, r3
 80050aa:	185b      	adds	r3, r3, r1
 80050ac:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80050ae:	1dfa      	adds	r2, r7, #7
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d81e      	bhi.n	80050f4 <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80050b6:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <uiIndexOfObject+0x8c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	1dbb      	adds	r3, r7, #6
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	3338      	adds	r3, #56	@ 0x38
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	3304      	adds	r3, #4
 80050c6:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80050c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005108 <uiIndexOfObject+0x8c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	1dbb      	adds	r3, r7, #6
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2068      	movs	r0, #104	@ 0x68
 80050d2:	18d3      	adds	r3, r2, r3
 80050d4:	181b      	adds	r3, r3, r0
 80050d6:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80050d8:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4353      	muls	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	200e      	movs	r0, #14
 80050e8:	183b      	adds	r3, r7, r0
 80050ea:	188a      	adds	r2, r1, r2
 80050ec:	801a      	strh	r2, [r3, #0]
		return index;
 80050ee:	183b      	adds	r3, r7, r0
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	e004      	b.n	80050fe <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 80050f4:	4b05      	ldr	r3, [pc, #20]	@ (800510c <uiIndexOfObject+0x90>)
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f9be 	bl	8005478 <prvTraceError>
	return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b004      	add	sp, #16
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	20002df8 	.word	0x20002df8
 800510c:	08006c28 	.word	0x08006c28

08005110 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b089      	sub	sp, #36	@ 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	0002      	movs	r2, r0
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511c:	f3ef 8310 	mrs	r3, PRIMASK
 8005120:	60fb      	str	r3, [r7, #12]
  return(result);
 8005122:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	2301      	movs	r3, #1
 8005128:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	4b4c      	ldr	r3, [pc, #304]	@ (8005264 <prvTraceGetObjectHandle+0x154>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	4b4a      	ldr	r3, [pc, #296]	@ (8005264 <prvTraceGetObjectHandle+0x154>)
 800513a:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800513c:	1dfb      	adds	r3, r7, #7
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	4b49      	ldr	r3, [pc, #292]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005142:	0052      	lsls	r2, r2, #1
 8005144:	5ad3      	ldrh	r3, [r2, r3]
 8005146:	001a      	movs	r2, r3
 8005148:	4b48      	ldr	r3, [pc, #288]	@ (800526c <prvTraceGetObjectHandle+0x15c>)
 800514a:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800514c:	4b47      	ldr	r3, [pc, #284]	@ (800526c <prvTraceGetObjectHandle+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a45      	ldr	r2, [pc, #276]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005152:	2148      	movs	r1, #72	@ 0x48
 8005154:	18d3      	adds	r3, r2, r3
 8005156:	185b      	adds	r3, r3, r1
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d117      	bne.n	800518e <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 800515e:	4b43      	ldr	r3, [pc, #268]	@ (800526c <prvTraceGetObjectHandle+0x15c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8005164:	1dfb      	adds	r3, r7, #7
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	493f      	ldr	r1, [pc, #252]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 800516a:	3308      	adds	r3, #8
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	18cb      	adds	r3, r1, r3
 8005170:	3302      	adds	r3, #2
 8005172:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8005174:	b2db      	uxtb	r3, r3
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 800517a:	4b3c      	ldr	r3, [pc, #240]	@ (800526c <prvTraceGetObjectHandle+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 800517e:	3201      	adds	r2, #1
 8005180:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005182:	4a39      	ldr	r2, [pc, #228]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005184:	2148      	movs	r1, #72	@ 0x48
 8005186:	18d3      	adds	r3, r2, r3
 8005188:	185b      	adds	r3, r3, r1
 800518a:	1c02      	adds	r2, r0, #0
 800518c:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 800518e:	4b37      	ldr	r3, [pc, #220]	@ (800526c <prvTraceGetObjectHandle+0x15c>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	241f      	movs	r4, #31
 8005194:	193b      	adds	r3, r7, r4
 8005196:	4934      	ldr	r1, [pc, #208]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005198:	2048      	movs	r0, #72	@ 0x48
 800519a:	188a      	adds	r2, r1, r2
 800519c:	1812      	adds	r2, r2, r0
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	4b30      	ldr	r3, [pc, #192]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 80051a8:	0052      	lsls	r2, r2, #1
 80051aa:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	492d      	ldr	r1, [pc, #180]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 80051b2:	3310      	adds	r3, #16
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	18cb      	adds	r3, r1, r3
 80051b8:	3304      	adds	r3, #4
 80051ba:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d90c      	bls.n	80051da <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f7fe fe17 	bl	8003df8 <pszTraceGetErrorNotEnoughHandles>
 80051ca:	0003      	movs	r3, r0
 80051cc:	0018      	movs	r0, r3
 80051ce:	f000 f953 	bl	8005478 <prvTraceError>
		handle = 0;
 80051d2:	193b      	adds	r3, r7, r4
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e031      	b.n	800523e <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	4a22      	ldr	r2, [pc, #136]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 80051e0:	0059      	lsls	r1, r3, #1
 80051e2:	5a8a      	ldrh	r2, [r1, r2]
 80051e4:	3201      	adds	r2, #1
 80051e6:	b291      	uxth	r1, r2
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	5ad3      	ldrh	r3, [r2, r3]
 80051f8:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80051fa:	1dfb      	adds	r3, r7, #7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005200:	3308      	adds	r3, #8
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	18d3      	adds	r3, r2, r3
 8005206:	3302      	adds	r3, #2
 8005208:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800520a:	1acb      	subs	r3, r1, r3
 800520c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800520e:	1dfb      	adds	r3, r7, #7
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005214:	3318      	adds	r3, #24
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	18d3      	adds	r3, r2, r3
 800521a:	3306      	adds	r3, #6
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	001a      	movs	r2, r3
		if (hndCount >
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4293      	cmp	r3, r2
 8005224:	dd0b      	ble.n	800523e <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 800522e:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8005230:	4a0d      	ldr	r2, [pc, #52]	@ (8005268 <prvTraceGetObjectHandle+0x158>)
 8005232:	3318      	adds	r3, #24
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	18d3      	adds	r3, r2, r3
 8005238:	3306      	adds	r3, #6
 800523a:	1c0a      	adds	r2, r1, #0
 800523c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 800523e:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <prvTraceGetObjectHandle+0x154>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <prvTraceGetObjectHandle+0x154>)
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			@ (mov r8, r8)

	return handle;
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	781b      	ldrb	r3, [r3, #0]
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b009      	add	sp, #36	@ 0x24
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	200019b4 	.word	0x200019b4
 8005268:	200019cc 	.word	0x200019cc
 800526c:	20002e00 	.word	0x20002e00

08005270 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	0002      	movs	r2, r0
 8005278:	1dfb      	adds	r3, r7, #7
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	1dbb      	adds	r3, r7, #6
 800527e:	1c0a      	adds	r2, r1, #0
 8005280:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8005282:	250e      	movs	r5, #14
 8005284:	197c      	adds	r4, r7, r5
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f7ff fef3 	bl	800507c <uiIndexOfObject>
 8005296:	0003      	movs	r3, r0
 8005298:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <prvMarkObjectAsUsed+0x44>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	197b      	adds	r3, r7, r5
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	2188      	movs	r1, #136	@ 0x88
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	185b      	adds	r3, r3, r1
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b004      	add	sp, #16
 80052b2:	bdb0      	pop	{r4, r5, r7, pc}
 80052b4:	20002df8 	.word	0x20002df8

080052b8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e010      	b.n	80052ec <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	18d2      	adds	r2, r2, r3
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	18cb      	adds	r3, r1, r3
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	18d3      	adds	r3, r2, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3ea      	bcc.n	80052ca <prvStrncpy+0x12>
			break;
	}
}
 80052f4:	e000      	b.n	80052f8 <prvStrncpy+0x40>
			break;
 80052f6:	46c0      	nop			@ (mov r8, r8)
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b006      	add	sp, #24
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	603a      	str	r2, [r7, #0]
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	1c02      	adds	r2, r0, #0
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	1dbb      	adds	r3, r7, #6
 8005310:	1c0a      	adds	r2, r1, #0
 8005312:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <prvTraceSetObjectName+0x1e>
	{
		name = "";
 800531a:	4b28      	ldr	r3, [pc, #160]	@ (80053bc <prvTraceSetObjectName+0xbc>)
 800531c:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800531e:	1dfb      	adds	r3, r7, #7
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d904      	bls.n	8005330 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005326:	4b26      	ldr	r3, [pc, #152]	@ (80053c0 <prvTraceSetObjectName+0xc0>)
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f8a5 	bl	8005478 <prvTraceError>
		return;
 800532e:	e041      	b.n	80053b4 <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8005338:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <prvTraceSetObjectName+0xc4>)
 800533a:	0018      	movs	r0, r3
 800533c:	f000 f89c 	bl	8005478 <prvTraceError>
		return;
 8005340:	e038      	b.n	80053b4 <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8005342:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <prvTraceSetObjectName+0xc8>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	1dfb      	adds	r3, r7, #7
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2150      	movs	r1, #80	@ 0x50
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	185b      	adds	r3, r3, r1
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	1dba      	adds	r2, r7, #6
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d909      	bls.n	800536e <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800535a:	1dfb      	adds	r3, r7, #7
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	0018      	movs	r0, r3
 8005360:	f7fe fd4a 	bl	8003df8 <pszTraceGetErrorNotEnoughHandles>
 8005364:	0003      	movs	r3, r0
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f886 	bl	8005478 <prvTraceError>
 800536c:	e022      	b.n	80053b4 <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	1dbb      	adds	r3, r7, #6
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	0011      	movs	r1, r2
 8005378:	0018      	movs	r0, r3
 800537a:	f7ff fe7f 	bl	800507c <uiIndexOfObject>
 800537e:	0003      	movs	r3, r0
 8005380:	001a      	movs	r2, r3
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <prvTraceSetObjectName+0xcc>)
 8005384:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8005386:	4b12      	ldr	r3, [pc, #72]	@ (80053d0 <prvTraceSetObjectName+0xd0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d112      	bne.n	80053b4 <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <prvTraceSetObjectName+0xc8>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <prvTraceSetObjectName+0xcc>)
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	3388      	adds	r3, #136	@ 0x88
 8005398:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <prvTraceSetObjectName+0xc8>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	215c      	movs	r1, #92	@ 0x5c
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	185b      	adds	r3, r3, r1
 80053a8:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80053aa:	001a      	movs	r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	0019      	movs	r1, r3
 80053b0:	f7ff ff82 	bl	80052b8 <prvStrncpy>
		}
	}
}
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	08006c98 	.word	0x08006c98
 80053c0:	08006c9c 	.word	0x08006c9c
 80053c4:	08006ccc 	.word	0x08006ccc
 80053c8:	20002df8 	.word	0x20002df8
 80053cc:	20002e04 	.word	0x20002e04
 80053d0:	20001a30 	.word	0x20001a30

080053d4 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b089      	sub	sp, #36	@ 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 80053de:	240b      	movs	r4, #11
 80053e0:	193b      	adds	r3, r7, r4
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
	crc = 0;
 80053e6:	250a      	movs	r5, #10
 80053e8:	197b      	adds	r3, r7, r5
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 80053ee:	193a      	adds	r2, r7, r4
 80053f0:	1979      	adds	r1, r7, r5
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 fb67 	bl	8005ac8 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fa:	f3ef 8310 	mrs	r3, PRIMASK
 80053fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005400:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f383 8810 	msr	PRIMASK, r3
}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <prvTraceOpenSymbol+0xa0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <prvTraceOpenSymbol+0xa0>)
 8005418:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 800541a:	197b      	adds	r3, r7, r5
 800541c:	7819      	ldrb	r1, [r3, #0]
 800541e:	193b      	adds	r3, r7, r4
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f9f1 	bl	800580c <prvTraceLookupSymbolTableEntry>
 800542a:	0002      	movs	r2, r0
 800542c:	261e      	movs	r6, #30
 800542e:	19bb      	adds	r3, r7, r6
 8005430:	801a      	strh	r2, [r3, #0]
	if (!result)
 8005432:	19bb      	adds	r3, r7, r6
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 800543a:	197b      	adds	r3, r7, r5
 800543c:	7819      	ldrb	r1, [r3, #0]
 800543e:	193b      	adds	r3, r7, r4
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa6b 	bl	8005920 <prvTraceCreateSymbolTableEntry>
 800544a:	0002      	movs	r2, r0
 800544c:	19bb      	adds	r3, r7, r6
 800544e:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 8005450:	4b08      	ldr	r3, [pc, #32]	@ (8005474 <prvTraceOpenSymbol+0xa0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <prvTraceOpenSymbol+0xa0>)
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			@ (mov r8, r8)

	return result;
 8005466:	231e      	movs	r3, #30
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	881b      	ldrh	r3, [r3, #0]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b009      	add	sp, #36	@ 0x24
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005474:	200019b4 	.word	0x200019b4

08005478 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8005480:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <prvTraceError+0x54>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <prvTraceError+0x14>
	{
		xTraceDisable();
 8005488:	f7fe fd28 	bl	8003edc <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <prvTraceError+0x58>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d117      	bne.n	80054c4 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8005494:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <prvTraceError+0x58>)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <prvTraceError+0x54>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <prvTraceError+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	22f0      	movs	r2, #240	@ 0xf0
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	1898      	adds	r0, r3, r2
 80054ac:	4b08      	ldr	r3, [pc, #32]	@ (80054d0 <prvTraceError+0x58>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2250      	movs	r2, #80	@ 0x50
 80054b2:	0019      	movs	r1, r3
 80054b4:	f7ff ff00 	bl	80052b8 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80054b8:	4b04      	ldr	r3, [pc, #16]	@ (80054cc <prvTraceError+0x54>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	23ee      	movs	r3, #238	@ 0xee
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	2101      	movs	r1, #1
 80054c2:	50d1      	str	r1, [r2, r3]
		}
	}
}
 80054c4:	46c0      	nop			@ (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20002df8 	.word	0x20002df8
 80054d0:	20001a30 	.word	0x20001a30

080054d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	0002      	movs	r2, r0
 80054dc:	1dfb      	adds	r3, r7, #7
 80054de:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80054e8:	e080      	b.n	80055ec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80054ea:	4b46      	ldr	r3, [pc, #280]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	18d3      	adds	r3, r2, r3
 80054f4:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80054f6:	4b43      	ldr	r3, [pc, #268]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4942      	ldr	r1, [pc, #264]	@ (8005608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	185b      	adds	r3, r3, r1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b98      	cmp	r3, #152	@ 0x98
 8005508:	d931      	bls.n	800556e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800550a:	4b3e      	ldr	r3, [pc, #248]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	493d      	ldr	r1, [pc, #244]	@ (8005608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	185b      	adds	r3, r3, r1
 8005518:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800551a:	2ba7      	cmp	r3, #167	@ 0xa7
 800551c:	d827      	bhi.n	800556e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800551e:	4b39      	ldr	r3, [pc, #228]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4938      	ldr	r1, [pc, #224]	@ (8005608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	185b      	adds	r3, r3, r1
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	210f      	movs	r1, #15
 8005530:	187b      	adds	r3, r7, r1
 8005532:	3268      	adds	r2, #104	@ 0x68
 8005534:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8005536:	187b      	adds	r3, r7, r1
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	18d2      	adds	r2, r2, r3
 800553e:	4b31      	ldr	r3, [pc, #196]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	429a      	cmp	r2, r3
 8005546:	d24d      	bcs.n	80055e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8005548:	4b2e      	ldr	r3, [pc, #184]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	2082      	movs	r0, #130	@ 0x82
 8005552:	00c0      	lsls	r0, r0, #3
 8005554:	4684      	mov	ip, r0
 8005556:	4463      	add	r3, ip
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	1d18      	adds	r0, r3, #4
 800555c:	187b      	adds	r3, r7, r1
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	001a      	movs	r2, r3
 8005566:	2100      	movs	r1, #0
 8005568:	f001 f872 	bl	8006650 <memset>
		{
 800556c:	e03a      	b.n	80055e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800556e:	4b25      	ldr	r3, [pc, #148]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4924      	ldr	r1, [pc, #144]	@ (8005608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8005578:	18d3      	adds	r3, r2, r3
 800557a:	185b      	adds	r3, r3, r1
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d131      	bne.n	80055e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	4b1f      	ldr	r3, [pc, #124]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	d20f      	bcs.n	80055b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8005590:	4b1c      	ldr	r3, [pc, #112]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	2182      	movs	r1, #130	@ 0x82
 800559a:	00c9      	lsls	r1, r1, #3
 800559c:	468c      	mov	ip, r1
 800559e:	4463      	add	r3, ip
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	3304      	adds	r3, #4
 80055a4:	2208      	movs	r2, #8
 80055a6:	2100      	movs	r1, #0
 80055a8:	0018      	movs	r0, r3
 80055aa:	f001 f851 	bl	8006650 <memset>
 80055ae:	e01a      	b.n	80055e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80055b0:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80055b6:	4694      	mov	ip, r2
 80055b8:	4463      	add	r3, ip
 80055ba:	2204      	movs	r2, #4
 80055bc:	2100      	movs	r1, #0
 80055be:	0018      	movs	r0, r3
 80055c0:	f001 f846 	bl	8006650 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80055c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	2182      	movs	r1, #130	@ 0x82
 80055ce:	00c9      	lsls	r1, r1, #3
 80055d0:	468c      	mov	ip, r1
 80055d2:	4463      	add	r3, ip
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	3304      	adds	r3, #4
 80055d8:	2204      	movs	r2, #4
 80055da:	2100      	movs	r1, #0
 80055dc:	0018      	movs	r0, r3
 80055de:	f001 f837 	bl	8006650 <memset>
 80055e2:	e000      	b.n	80055e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 80055e4:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	3301      	adds	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d200      	bcs.n	80055f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 80055f6:	e778      	b.n	80054ea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b006      	add	sp, #24
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	20002df8 	.word	0x20002df8
 8005608:	00000414 	.word	0x00000414

0800560c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8005610:	4b12      	ldr	r3, [pc, #72]	@ (800565c <prvTraceUpdateCounters+0x50>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01c      	beq.n	8005654 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800561a:	4b10      	ldr	r3, [pc, #64]	@ (800565c <prvTraceUpdateCounters+0x50>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	3201      	adds	r2, #1
 8005622:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8005624:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <prvTraceUpdateCounters+0x50>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	3201      	adds	r2, #1
 800562c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800562e:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <prvTraceUpdateCounters+0x50>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	23fa      	movs	r3, #250	@ 0xfa
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d307      	bcc.n	800564c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 800563c:	4b07      	ldr	r3, [pc, #28]	@ (800565c <prvTraceUpdateCounters+0x50>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <prvTraceUpdateCounters+0x50>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2200      	movs	r2, #0
 800564a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800564c:	2001      	movs	r0, #1
 800564e:	f7ff ff41 	bl	80054d4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8005652:	e000      	b.n	8005656 <prvTraceUpdateCounters+0x4a>
		return;
 8005654:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	20002df8 	.word	0x20002df8

08005660 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	0002      	movs	r2, r0
 8005668:	1dbb      	adds	r3, r7, #6
 800566a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8005678:	4b5c      	ldr	r3, [pc, #368]	@ (80057ec <prvTraceGetDTS+0x18c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d116      	bne.n	80056b0 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 8005682:	4b5b      	ldr	r3, [pc, #364]	@ (80057f0 <prvTraceGetDTS+0x190>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d006      	beq.n	8005698 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800568a:	4b59      	ldr	r3, [pc, #356]	@ (80057f0 <prvTraceGetDTS+0x190>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b57      	ldr	r3, [pc, #348]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0892      	lsrs	r2, r2, #2
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24
 8005696:	e00b      	b.n	80056b0 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005698:	4b56      	ldr	r3, [pc, #344]	@ (80057f4 <prvTraceGetDTS+0x194>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b56      	ldr	r3, [pc, #344]	@ (80057f8 <prvTraceGetDTS+0x198>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d005      	beq.n	80056b0 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80056a4:	4b55      	ldr	r3, [pc, #340]	@ (80057fc <prvTraceGetDTS+0x19c>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b50      	ldr	r3, [pc, #320]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0892      	lsrs	r2, r2, #2
 80056ae:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80056b0:	230c      	movs	r3, #12
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 fa39 	bl	8005b2c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4b50      	ldr	r3, [pc, #320]	@ (8005800 <prvTraceGetDTS+0x1a0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005800 <prvTraceGetDTS+0x1a0>)
 80056c8:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 80056ca:	4b48      	ldr	r3, [pc, #288]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d047      	beq.n	8005764 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80056d4:	4b45      	ldr	r3, [pc, #276]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d921      	bls.n	8005724 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80056e0:	4b42      	ldr	r3, [pc, #264]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80056e6:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	0019      	movs	r1, r3
 80056ee:	6938      	ldr	r0, [r7, #16]
 80056f0:	f7fa fd0a 	bl	8000108 <__udivsi3>
 80056f4:	0003      	movs	r3, r0
 80056f6:	001a      	movs	r2, r3
 80056f8:	4b3c      	ldr	r3, [pc, #240]	@ (80057ec <prvTraceGetDTS+0x18c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	18a2      	adds	r2, r4, r2
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005700:	4b3a      	ldr	r3, [pc, #232]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005706:	4b39      	ldr	r3, [pc, #228]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f7fa fd7f 	bl	8000214 <__aeabi_uidivmod>
 8005716:	000b      	movs	r3, r1
 8005718:	001a      	movs	r2, r3
 800571a:	4b34      	ldr	r3, [pc, #208]	@ (80057ec <prvTraceGetDTS+0x18c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	18a2      	adds	r2, r4, r2
 8005720:	629a      	str	r2, [r3, #40]	@ 0x28
 8005722:	e007      	b.n	8005734 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8005724:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800572a:	4b30      	ldr	r3, [pc, #192]	@ (80057ec <prvTraceGetDTS+0x18c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	188a      	adds	r2, r1, r2
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8005734:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800573a:	4b2c      	ldr	r3, [pc, #176]	@ (80057ec <prvTraceGetDTS+0x18c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	429a      	cmp	r2, r3
 8005742:	d313      	bcc.n	800576c <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8005744:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	3201      	adds	r2, #1
 800574c:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800574e:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005754:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <prvTraceGetDTS+0x18c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1a8a      	subs	r2, r1, r2
 8005760:	629a      	str	r2, [r3, #40]	@ 0x28
 8005762:	e003      	b.n	800576c <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005764:	4b21      	ldr	r3, [pc, #132]	@ (80057ec <prvTraceGetDTS+0x18c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800576c:	1dbb      	adds	r3, r7, #6
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	429a      	cmp	r2, r3
 8005774:	d92f      	bls.n	80057d6 <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005776:	f7ff fc57 	bl	8005028 <prvTraceNextFreeEventBufferSlot>
 800577a:	0003      	movs	r3, r0
 800577c:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d028      	beq.n	80057d6 <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 8005784:	1dbb      	adds	r3, r7, #6
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4a1e      	ldr	r2, [pc, #120]	@ (8005804 <prvTraceGetDTS+0x1a4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10b      	bne.n	80057a6 <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	22a9      	movs	r2, #169	@ 0xa9
 8005792:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	b29a      	uxth	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	705a      	strb	r2, [r3, #1]
 80057a4:	e015      	b.n	80057d2 <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 80057a6:	1dbb      	adds	r3, r7, #6
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	2bff      	cmp	r3, #255	@ 0xff
 80057ac:	d10d      	bne.n	80057ca <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	22a8      	movs	r2, #168	@ 0xa8
 80057b2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	0e1b      	lsrs	r3, r3, #24
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	705a      	strb	r2, [r3, #1]
 80057c8:	e003      	b.n	80057d2 <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80057ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <prvTraceGetDTS+0x1a8>)
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7ff fe53 	bl	8005478 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80057d2:	f7ff ff1b 	bl	800560c <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	1dba      	adds	r2, r7, #6
 80057dc:	8812      	ldrh	r2, [r2, #0]
 80057de:	4013      	ands	r3, r2
 80057e0:	b29b      	uxth	r3, r3
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b007      	add	sp, #28
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	20002df8 	.word	0x20002df8
 80057f0:	200019b8 	.word	0x200019b8
 80057f4:	e000e018 	.word	0xe000e018
 80057f8:	200019c4 	.word	0x200019c4
 80057fc:	20000014 	.word	0x20000014
 8005800:	20002e08 	.word	0x20002e08
 8005804:	0000ffff 	.word	0x0000ffff
 8005808:	08006cfc 	.word	0x08006cfc

0800580c <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	0008      	movs	r0, r1
 8005816:	0011      	movs	r1, r2
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	240b      	movs	r4, #11
 800581c:	193b      	adds	r3, r7, r4
 800581e:	1c02      	adds	r2, r0, #0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	230a      	movs	r3, #10
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	1c0a      	adds	r2, r1, #0
 8005828:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 800582a:	4b3c      	ldr	r3, [pc, #240]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	193b      	adds	r3, r7, r4
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	2316      	movs	r3, #22
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	3299      	adds	r2, #153	@ 0x99
 8005838:	32ff      	adds	r2, #255	@ 0xff
 800583a:	0052      	lsls	r2, r2, #1
 800583c:	188a      	adds	r2, r1, r2
 800583e:	3204      	adds	r2, #4
 8005840:	8812      	ldrh	r2, [r2, #0]
 8005842:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8005844:	e05c      	b.n	8005900 <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8005846:	4b35      	ldr	r3, [pc, #212]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	2016      	movs	r0, #22
 800584c:	183b      	adds	r3, r7, r0
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	239b      	movs	r3, #155	@ 0x9b
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	188a      	adds	r2, r1, r2
 8005858:	18d3      	adds	r3, r2, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	22ff      	movs	r2, #255	@ 0xff
 8005862:	4013      	ands	r3, r2
 8005864:	4299      	cmp	r1, r3
 8005866:	d131      	bne.n	80058cc <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8005868:	4b2c      	ldr	r3, [pc, #176]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	183b      	adds	r3, r7, r0
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	1cda      	adds	r2, r3, #3
 8005872:	239b      	movs	r3, #155	@ 0x9b
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	188a      	adds	r2, r1, r2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	001a      	movs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	429a      	cmp	r2, r3
 8005884:	d122      	bne.n	80058cc <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8005886:	4b25      	ldr	r3, [pc, #148]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	183b      	adds	r3, r7, r0
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	240a      	movs	r4, #10
 8005892:	193b      	adds	r3, r7, r4
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	18d2      	adds	r2, r2, r3
 8005898:	239b      	movs	r3, #155	@ 0x9b
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	188a      	adds	r2, r1, r2
 800589e:	18d3      	adds	r3, r2, r3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d112      	bne.n	80058cc <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80058a6:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	183b      	adds	r3, r7, r0
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	3304      	adds	r3, #4
 80058b0:	219a      	movs	r1, #154	@ 0x9a
 80058b2:	0089      	lsls	r1, r1, #2
 80058b4:	468c      	mov	ip, r1
 80058b6:	4463      	add	r3, ip
 80058b8:	18d3      	adds	r3, r2, r3
 80058ba:	1d18      	adds	r0, r3, #4
 80058bc:	193b      	adds	r3, r7, r4
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	0019      	movs	r1, r3
 80058c4:	f000 fecc 	bl	8006660 <strncmp>
 80058c8:	1e03      	subs	r3, r0, #0
 80058ca:	d01f      	beq.n	800590c <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	2416      	movs	r4, #22
 80058d2:	193b      	adds	r3, r7, r4
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	239b      	movs	r3, #155	@ 0x9b
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	188a      	adds	r2, r1, r2
 80058dc:	18d3      	adds	r3, r2, r3
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	0018      	movs	r0, r3
 80058e2:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <prvTraceLookupSymbolTableEntry+0x110>)
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	193b      	adds	r3, r7, r4
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	239b      	movs	r3, #155	@ 0x9b
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	188a      	adds	r2, r1, r2
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	1882      	adds	r2, r0, r2
 80058fe:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 8005900:	2316      	movs	r3, #22
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d19d      	bne.n	8005846 <prvTraceLookupSymbolTableEntry+0x3a>
 800590a:	e000      	b.n	800590e <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 800590c:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 800590e:	2316      	movs	r3, #22
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	881b      	ldrh	r3, [r3, #0]
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b007      	add	sp, #28
 800591a:	bd90      	pop	{r4, r7, pc}
 800591c:	20002df8 	.word	0x20002df8

08005920 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 8005920:	b5b0      	push	{r4, r5, r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	0008      	movs	r0, r1
 800592a:	0011      	movs	r1, r2
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	230b      	movs	r3, #11
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	1c02      	adds	r2, r0, #0
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	200a      	movs	r0, #10
 8005938:	183b      	adds	r3, r7, r0
 800593a:	1c0a      	adds	r2, r1, #0
 800593c:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8005942:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	239a      	movs	r3, #154	@ 0x9a
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	58d2      	ldr	r2, [r2, r3]
 800594c:	183b      	adds	r3, r7, r0
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	18d3      	adds	r3, r2, r3
 8005952:	3304      	adds	r3, #4
 8005954:	2bc7      	cmp	r3, #199	@ 0xc7
 8005956:	d906      	bls.n	8005966 <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8005958:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac4 <prvTraceCreateSymbolTableEntry+0x1a4>)
 800595a:	0018      	movs	r0, r3
 800595c:	f7ff fd8c 	bl	8005478 <prvTraceError>
		ret = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e0a7      	b.n	8005ab6 <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8005966:	4b56      	ldr	r3, [pc, #344]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	250b      	movs	r5, #11
 800596c:	197b      	adds	r3, r7, r5
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	3399      	adds	r3, #153	@ 0x99
 8005972:	33ff      	adds	r3, #255	@ 0xff
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	18d3      	adds	r3, r2, r3
 8005978:	3304      	adds	r3, #4
 800597a:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 800597c:	4b50      	ldr	r3, [pc, #320]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 800597e:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8005980:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	239a      	movs	r3, #154	@ 0x9a
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 800598a:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800598c:	239b      	movs	r3, #155	@ 0x9b
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	188a      	adds	r2, r1, r2
 8005992:	18d3      	adds	r3, r2, r3
 8005994:	1c02      	adds	r2, r0, #0
 8005996:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8005998:	4b49      	ldr	r3, [pc, #292]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	197b      	adds	r3, r7, r5
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	3399      	adds	r3, #153	@ 0x99
 80059a2:	33ff      	adds	r3, #255	@ 0xff
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	18d3      	adds	r3, r2, r3
 80059a8:	3304      	adds	r3, #4
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 80059b0:	4b43      	ldr	r3, [pc, #268]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059b2:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80059b4:	4b42      	ldr	r3, [pc, #264]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	239a      	movs	r3, #154	@ 0x9a
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	58d3      	ldr	r3, [r2, r3]
 80059be:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80059c0:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80059c2:	239b      	movs	r3, #155	@ 0x9b
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	188a      	adds	r2, r1, r2
 80059c8:	18d3      	adds	r3, r2, r3
 80059ca:	1c02      	adds	r2, r0, #0
 80059cc:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 80059ce:	4b3c      	ldr	r3, [pc, #240]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059d0:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80059d2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	239a      	movs	r3, #154	@ 0x9a
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	58d3      	ldr	r3, [r2, r3]
 80059dc:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80059e2:	239b      	movs	r3, #155	@ 0x9b
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	188a      	adds	r2, r1, r2
 80059e8:	18d3      	adds	r3, r2, r3
 80059ea:	1c02      	adds	r2, r0, #0
 80059ec:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 80059f2:	4b33      	ldr	r3, [pc, #204]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059f4:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80059f6:	4b32      	ldr	r3, [pc, #200]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	239a      	movs	r3, #154	@ 0x9a
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	58d3      	ldr	r3, [r2, r3]
 8005a00:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 8005a02:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8005a04:	239b      	movs	r3, #155	@ 0x9b
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	188a      	adds	r2, r1, r2
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	1c02      	adds	r2, r0, #0
 8005a0e:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8005a10:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a12:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8005a14:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a16:	6819      	ldr	r1, [r3, #0]
 8005a18:	239a      	movs	r3, #154	@ 0x9a
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	58cb      	ldr	r3, [r1, r3]
 8005a1e:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8005a20:	219a      	movs	r1, #154	@ 0x9a
 8005a22:	0089      	lsls	r1, r1, #2
 8005a24:	468c      	mov	ip, r1
 8005a26:	4463      	add	r3, ip
 8005a28:	18d3      	adds	r3, r2, r3
 8005a2a:	1d18      	adds	r0, r3, #4
 8005a2c:	240a      	movs	r4, #10
 8005a2e:	193b      	adds	r3, r7, r4
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	0019      	movs	r1, r3
 8005a36:	f7ff fc3f 	bl	80052b8 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8005a3a:	4b21      	ldr	r3, [pc, #132]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a3c:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8005a3e:	4b20      	ldr	r3, [pc, #128]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	239a      	movs	r3, #154	@ 0x9a
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	58d2      	ldr	r2, [r2, r3]
 8005a48:	0020      	movs	r0, r4
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	18d3      	adds	r3, r2, r3
 8005a50:	1d1a      	adds	r2, r3, #4
 8005a52:	239b      	movs	r3, #155	@ 0x9b
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	188a      	adds	r2, r1, r2
 8005a58:	18d3      	adds	r3, r2, r3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005a5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	239a      	movs	r3, #154	@ 0x9a
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8005a68:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005a6c:	197b      	adds	r3, r7, r5
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b289      	uxth	r1, r1
 8005a72:	3399      	adds	r3, #153	@ 0x99
 8005a74:	33ff      	adds	r3, #255	@ 0xff
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	1c0a      	adds	r2, r1, #0
 8005a7e:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	239a      	movs	r3, #154	@ 0x9a
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	58d2      	ldr	r2, [r2, r3]
 8005a8a:	183b      	adds	r3, r7, r0
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	18d1      	adds	r1, r2, r3
 8005a90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	3105      	adds	r1, #5
 8005a96:	239a      	movs	r3, #154	@ 0x9a
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8005a9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	239a      	movs	r3, #154	@ 0x9a
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	183a      	adds	r2, r7, r0
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	3205      	adds	r2, #5
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8005ab6:	697b      	ldr	r3, [r7, #20]
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b006      	add	sp, #24
 8005abe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac0:	20002df8 	.word	0x20002df8
 8005ac4:	08006d20 	.word	0x08006d20

08005ac8 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d014      	beq.n	8005b0c <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8005ae2:	e008      	b.n	8005af6 <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8005ae4:	2317      	movs	r3, #23
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	18d3      	adds	r3, r2, r3
 8005aee:	61bb      	str	r3, [r7, #24]
			length++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	60fa      	str	r2, [r7, #12]
 8005afc:	2117      	movs	r1, #23
 8005afe:	187a      	adds	r2, r7, r1
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	7013      	strb	r3, [r2, #0]
 8005b04:	187b      	adds	r3, r7, r1
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1eb      	bne.n	8005ae4 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	223f      	movs	r2, #63	@ 0x3f
 8005b12:	4013      	ands	r3, r2
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	701a      	strb	r2, [r3, #0]
}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b008      	add	sp, #32
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8005b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf4 <prvTracePortGetTimeStamp+0xc8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d04f      	beq.n	8005bea <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8005b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf8 <prvTracePortGetTimeStamp+0xcc>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
		return;
 8005b52:	e04a      	b.n	8005bea <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8005b54:	4b29      	ldr	r3, [pc, #164]	@ (8005bfc <prvTracePortGetTimeStamp+0xd0>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b29      	ldr	r3, [pc, #164]	@ (8005c00 <prvTracePortGetTimeStamp+0xd4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8005b62:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <prvTracePortGetTimeStamp+0xd8>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b28      	ldr	r3, [pc, #160]	@ (8005c08 <prvTracePortGetTimeStamp+0xdc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	db03      	blt.n	8005b7a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8005b72:	4b24      	ldr	r3, [pc, #144]	@ (8005c04 <prvTracePortGetTimeStamp+0xd8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e002      	b.n	8005b80 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8005b7a:	4b23      	ldr	r3, [pc, #140]	@ (8005c08 <prvTracePortGetTimeStamp+0xdc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8005b80:	4b20      	ldr	r3, [pc, #128]	@ (8005c04 <prvTracePortGetTimeStamp+0xd8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d107      	bne.n	8005b9a <prvTracePortGetTimeStamp+0x6e>
 8005b8a:	4b20      	ldr	r3, [pc, #128]	@ (8005c0c <prvTracePortGetTimeStamp+0xe0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d202      	bcs.n	8005b9a <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d016      	beq.n	8005bce <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8005ba0:	4b16      	ldr	r3, [pc, #88]	@ (8005bfc <prvTracePortGetTimeStamp+0xd0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	435a      	muls	r2, r3
 8005bac:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <prvTracePortGetTimeStamp+0xcc>)
 8005bae:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8005bb0:	4b12      	ldr	r3, [pc, #72]	@ (8005bfc <prvTracePortGetTimeStamp+0xd0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	435a      	muls	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	089a      	lsrs	r2, r3, #2
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <prvTracePortGetTimeStamp+0xcc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	18d2      	adds	r2, r2, r3
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <prvTracePortGetTimeStamp+0xcc>)
 8005bcc:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <prvTracePortGetTimeStamp+0xd8>)
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8005bda:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <prvTracePortGetTimeStamp+0xcc>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <prvTracePortGetTimeStamp+0xe0>)
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e000      	b.n	8005bec <prvTracePortGetTimeStamp+0xc0>
		return;
 8005bea:	46c0      	nop			@ (mov r8, r8)
}
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b004      	add	sp, #16
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	200019a8 	.word	0x200019a8
 8005bf8:	200019ac 	.word	0x200019ac
 8005bfc:	e000e014 	.word	0xe000e014
 8005c00:	e000e018 	.word	0xe000e018
 8005c04:	20002e0c 	.word	0x20002e0c
 8005c08:	200019a4 	.word	0x200019a4
 8005c0c:	20002e10 	.word	0x20002e10

08005c10 <main>:
                         UBaseType_t                  uxPriority,
                         TaskHandle_t * const         pxCreatedTask );

// Main function
int main()
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8005c16:	f000 f85b 	bl	8005cd0 <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 8005c1a:	f000 fb69 	bl	80062f0 <BSP_LED_Init>
	BSP_PB_Init();
 8005c1e:	f000 fbc1 	bl	80063a4 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8005c22:	f000 fbfd 	bl	8006420 <BSP_Console_Init>
	my_printf("Console ready!\r\n");
 8005c26:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca4 <main+0x94>)
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 fb43 	bl	80062b4 <my_printf>

	// Start Trace Recording
	xTraceEnable(TRC_START);
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f7fe f91e 	bl	8003e70 <xTraceEnable>
	// Create Semaphore object (this is not a 'give')
	xSem = xSemaphoreCreateBinary();
 8005c34:	2203      	movs	r2, #3
 8005c36:	2100      	movs	r1, #0
 8005c38:	2001      	movs	r0, #1
 8005c3a:	f7fb f97f 	bl	8000f3c <xQueueGenericCreate>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	4b19      	ldr	r3, [pc, #100]	@ (8005ca8 <main+0x98>)
 8005c42:	601a      	str	r2, [r3, #0]
	// Give a nice name to the Semaphore in the trace recorder
	vTraceSetSemaphoreName(xSem, "xSEM");
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <main+0x98>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <main+0x9c>)
 8005c4a:	0011      	movs	r1, r2
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7fd ff55 	bl	8003afc <vTraceSetSemaphoreName>

	// Create Tasks
	xTaskCreate(vTask1, "Task_1", 256, NULL, 2, NULL);
 8005c52:	2380      	movs	r3, #128	@ 0x80
 8005c54:	005a      	lsls	r2, r3, #1
 8005c56:	4916      	ldr	r1, [pc, #88]	@ (8005cb0 <main+0xa0>)
 8005c58:	4816      	ldr	r0, [pc, #88]	@ (8005cb4 <main+0xa4>)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	2302      	movs	r3, #2
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	2300      	movs	r3, #0
 8005c64:	f7fc f9ff 	bl	8002066 <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 1, NULL);
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	005a      	lsls	r2, r3, #1
 8005c6c:	4912      	ldr	r1, [pc, #72]	@ (8005cb8 <main+0xa8>)
 8005c6e:	4813      	ldr	r0, [pc, #76]	@ (8005cbc <main+0xac>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	2301      	movs	r3, #1
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f7fc f9f4 	bl	8002066 <xTaskCreate>

	// Register the Trace User Event Channels
	 ue1 = xTraceRegisterString("count");
 8005c7e:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <main+0xb0>)
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7fe fd5d 	bl	8004740 <xTraceRegisterString>
 8005c86:	0002      	movs	r2, r0
 8005c88:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <main+0xb4>)
 8005c8a:	601a      	str	r2, [r3, #0]
	 ue2 = xTraceRegisterString("msg");
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc8 <main+0xb8>)
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7fe fd56 	bl	8004740 <xTraceRegisterString>
 8005c94:	0002      	movs	r2, r0
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <main+0xbc>)
 8005c98:	601a      	str	r2, [r3, #0]

	 // Start the Scheduler
	vTaskStartScheduler();
 8005c9a:	f7fc fc59 	bl	8002550 <vTaskStartScheduler>

	while(1)
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	e7fd      	b.n	8005c9e <main+0x8e>
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	08006d68 	.word	0x08006d68
 8005ca8:	20002e14 	.word	0x20002e14
 8005cac:	08006d7c 	.word	0x08006d7c
 8005cb0:	08006d84 	.word	0x08006d84
 8005cb4:	08005e05 	.word	0x08005e05
 8005cb8:	08006d8c 	.word	0x08006d8c
 8005cbc:	08005e81 	.word	0x08005e81
 8005cc0:	08006d94 	.word	0x08006d94
 8005cc4:	20002e18 	.word	0x20002e18
 8005cc8:	08006d9c 	.word	0x08006d9c
 8005ccc:	20002e1c 	.word	0x20002e1c

08005cd0 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8005cda:	4b44      	ldr	r3, [pc, #272]	@ (8005dec <SystemClock_Config+0x11c>)
 8005cdc:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8005cde:	4b44      	ldr	r3, [pc, #272]	@ (8005df0 <SystemClock_Config+0x120>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b43      	ldr	r3, [pc, #268]	@ (8005df0 <SystemClock_Config+0x120>)
 8005ce4:	2180      	movs	r1, #128	@ 0x80
 8005ce6:	02c9      	lsls	r1, r1, #11
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8005cec:	4b40      	ldr	r3, [pc, #256]	@ (8005df0 <SystemClock_Config+0x120>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <SystemClock_Config+0x120>)
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	0249      	lsls	r1, r1, #9
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8005df0 <SystemClock_Config+0x120>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	4013      	ands	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]
		timeout--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <SystemClock_Config+0x48>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8005d18:	4b35      	ldr	r3, [pc, #212]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b34      	ldr	r3, [pc, #208]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d1e:	4935      	ldr	r1, [pc, #212]	@ (8005df4 <SystemClock_Config+0x124>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8005d24:	4b32      	ldr	r3, [pc, #200]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4b31      	ldr	r3, [pc, #196]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d2a:	2180      	movs	r1, #128	@ 0x80
 8005d2c:	0249      	lsls	r1, r1, #9
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8005d32:	4b2f      	ldr	r3, [pc, #188]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8005d38:	4b2d      	ldr	r3, [pc, #180]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d3e:	492e      	ldr	r1, [pc, #184]	@ (8005df8 <SystemClock_Config+0x128>)
 8005d40:	400a      	ands	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8005d44:	4b2a      	ldr	r3, [pc, #168]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	0349      	lsls	r1, r1, #13
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8005d52:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b26      	ldr	r3, [pc, #152]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d58:	2180      	movs	r1, #128	@ 0x80
 8005d5a:	0449      	lsls	r1, r1, #17
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8005d60:	4b23      	ldr	r3, [pc, #140]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	2380      	movs	r3, #128	@ 0x80
 8005d66:	049b      	lsls	r3, r3, #18
 8005d68:	4013      	ands	r3, r2
 8005d6a:	607b      	str	r3, [r7, #4]
		timeout--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <SystemClock_Config+0xae>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d84:	21f0      	movs	r1, #240	@ 0xf0
 8005d86:	438a      	bics	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005d8a:	4a19      	ldr	r2, [pc, #100]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8005d92:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b16      	ldr	r3, [pc, #88]	@ (8005df0 <SystemClock_Config+0x120>)
 8005d98:	4918      	ldr	r1, [pc, #96]	@ (8005dfc <SystemClock_Config+0x12c>)
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8005d9e:	4a14      	ldr	r2, [pc, #80]	@ (8005df0 <SystemClock_Config+0x120>)
 8005da0:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <SystemClock_Config+0x120>)
 8005da2:	6852      	ldr	r2, [r2, #4]
 8005da4:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8005da6:	4b16      	ldr	r3, [pc, #88]	@ (8005e00 <SystemClock_Config+0x130>)
 8005da8:	2211      	movs	r2, #17
 8005daa:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8005dac:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <SystemClock_Config+0x120>)
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <SystemClock_Config+0x120>)
 8005db2:	2103      	movs	r1, #3
 8005db4:	438a      	bics	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005db8:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <SystemClock_Config+0x120>)
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <SystemClock_Config+0x120>)
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <SystemClock_Config+0x120>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	220c      	movs	r2, #12
 8005dca:	4013      	ands	r3, r2
 8005dcc:	603b      	str	r3, [r7, #0]
		timeout--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d002      	beq.n	8005de0 <SystemClock_Config+0x110>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f1      	bne.n	8005dc4 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8005de0:	f000 fbb0 	bl	8006544 <SystemCoreClockUpdate>
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b004      	add	sp, #16
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	000f4240 	.word	0x000f4240
 8005df0:	40021000 	.word	0x40021000
 8005df4:	fffe7fff 	.word	0xfffe7fff
 8005df8:	ffc3ffff 	.word	0xffc3ffff
 8005dfc:	fffff8ff 	.word	0xfffff8ff
 8005e00:	40022000 	.word	0x40022000

08005e04 <vTask1>:

/*
 *	Task_1 toggles LED every 10ms
 */
void vTask1 (void *pvParameters)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	portTickType  xLastWakeTime;
	uint16_t      count = 0;
 8005e0c:	230e      	movs	r3, #14
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	2200      	movs	r2, #0
 8005e12:	801a      	strh	r2, [r3, #0]

	// Initialize timing
	xLastWakeTime = xTaskGetTickCount();
 8005e14:	f7fc fd0c 	bl	8002830 <xTaskGetTickCount>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		// Toggle LED only if button is released
		if (!BSP_PB_GetState())
 8005e1c:	f000 fae4 	bl	80063e8 <BSP_PB_GetState>
 8005e20:	1e03      	subs	r3, r0, #0
 8005e22:	d107      	bne.n	8005e34 <vTask1+0x30>
		{
			BSP_LED_Toggle();
 8005e24:	f000 fab0 	bl	8006388 <BSP_LED_Toggle>
			count++;
 8005e28:	210e      	movs	r1, #14
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	3201      	adds	r2, #1
 8005e32:	801a      	strh	r2, [r3, #0]
		}

		// Release semaphore every 10 count
		if (count == 10)
 8005e34:	240e      	movs	r4, #14
 8005e36:	193b      	adds	r3, r7, r4
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	2b0a      	cmp	r3, #10
 8005e3c:	d109      	bne.n	8005e52 <vTask1+0x4e>
		{
			xSemaphoreGive(xSem);
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <vTask1+0x70>)
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	2200      	movs	r2, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	f7fb f99e 	bl	8001188 <xQueueGenericSend>
			count = 0;
 8005e4c:	193b      	adds	r3, r7, r4
 8005e4e:	2200      	movs	r2, #0
 8005e50:	801a      	strh	r2, [r3, #0]
		}

		// Send count value into trace UEC
		vTracePrintF(ue1, "%d", count);
 8005e52:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <vTask1+0x74>)
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	230e      	movs	r3, #14
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <vTask1+0x78>)
 8005e5e:	0019      	movs	r1, r3
 8005e60:	f7fe fb1a 	bl	8004498 <xTracePrintF>

		// Wait here for 10ms since last wakeup
		vTaskDelayUntil (&xLastWakeTime, (10/portTICK_RATE_MS));
 8005e64:	2308      	movs	r3, #8
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	210a      	movs	r1, #10
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7fc fad8 	bl	8002420 <xTaskDelayUntil>
		if (!BSP_PB_GetState())
 8005e70:	e7d4      	b.n	8005e1c <vTask1+0x18>
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	20002e14 	.word	0x20002e14
 8005e78:	20002e18 	.word	0x20002e18
 8005e7c:	08006da0 	.word	0x08006da0

08005e80 <vTask2>:

/*
 *	Task_2 sends a message to console when xSem semaphore is given
 */
void vTask2 (void *pvParameters)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	portBASE_TYPE  xStatus;
	uint16_t       count = 0;
 8005e88:	230e      	movs	r3, #14
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	801a      	strh	r2, [r3, #0]

	// Take the semaphore once to make sure it is empty
	xSemaphoreTake(xSem, 0);
 8005e90:	4b16      	ldr	r3, [pc, #88]	@ (8005eec <vTask2+0x6c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2100      	movs	r1, #0
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7fb fd4a 	bl	8001930 <xQueueSemaphoreTake>

	while(1)
	{
		// Wait here for Semaphore with 2s timeout
		xStatus = xSemaphoreTake(xSem, 2000);
 8005e9c:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <vTask2+0x6c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	22fa      	movs	r2, #250	@ 0xfa
 8005ea2:	00d2      	lsls	r2, r2, #3
 8005ea4:	0011      	movs	r1, r2
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fb fd42 	bl	8001930 <xQueueSemaphoreTake>
 8005eac:	0003      	movs	r3, r0
 8005eae:	60bb      	str	r3, [r7, #8]

		// Test the result of the take attempt
		if (xStatus == pdPASS)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d115      	bne.n	8005ee2 <vTask2+0x62>
		{
			// The semaphore was taken as expected
			vTracePrint(ue2, "Yep!");
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <vTask2+0x70>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a0e      	ldr	r2, [pc, #56]	@ (8005ef4 <vTask2+0x74>)
 8005ebc:	0011      	movs	r1, r2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fe fbd6 	bl	8004670 <xTracePrint>

			// Display console message
			my_printf("Hello %2d from task2\r\n", count);
 8005ec4:	240e      	movs	r4, #14
 8005ec6:	193b      	adds	r3, r7, r4
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <vTask2+0x78>)
 8005ecc:	0011      	movs	r1, r2
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 f9f0 	bl	80062b4 <my_printf>
			count++;
 8005ed4:	0021      	movs	r1, r4
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	3201      	adds	r2, #1
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e7dc      	b.n	8005e9c <vTask2+0x1c>

		else
		{
			// The 2s timeout elapsed without Semaphore being taken
			// Display another message
			my_printf("Hey! Where is my semaphore?\r\n");
 8005ee2:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <vTask2+0x7c>)
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 f9e5 	bl	80062b4 <my_printf>
		xStatus = xSemaphoreTake(xSem, 2000);
 8005eea:	e7d7      	b.n	8005e9c <vTask2+0x1c>
 8005eec:	20002e14 	.word	0x20002e14
 8005ef0:	20002e1c 	.word	0x20002e1c
 8005ef4:	08006da4 	.word	0x08006da4
 8005ef8:	08006dac 	.word	0x08006dac
 8005efc:	08006dc4 	.word	0x08006dc4

08005f00 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	if (str) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <printchar+0x26>
		**str = c;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
		++(*str);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8005f24:	e00a      	b.n	8005f3c <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <printchar+0x44>)
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2240      	movs	r2, #64	@ 0x40
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d1f9      	bne.n	8005f28 <printchar+0x28>
		USART2->TDR = c;
 8005f34:	4b03      	ldr	r3, [pc, #12]	@ (8005f44 <printchar+0x44>)
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8005f3c:	46c0      	nop			@ (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b002      	add	sp, #8
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40004400 	.word	0x40004400

08005f48 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	46c6      	mov	lr, r8
 8005f4c:	b500      	push	{lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	4698      	mov	r8, r3

	if (width > 0) {
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd16      	ble.n	8005f94 <prints+0x4c>
		register int len = 0;
 8005f66:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8005f68:	68be      	ldr	r6, [r7, #8]
 8005f6a:	e001      	b.n	8005f70 <prints+0x28>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	3601      	adds	r6, #1
 8005f70:	7833      	ldrb	r3, [r6, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1fa      	bne.n	8005f6c <prints+0x24>
		if (len >= width) width = 0;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	429d      	cmp	r5, r3
 8005f7a:	db02      	blt.n	8005f82 <prints+0x3a>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	e002      	b.n	8005f88 <prints+0x40>
		else width -= len;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	1b5b      	subs	r3, r3, r5
 8005f86:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d001      	beq.n	8005f94 <prints+0x4c>
 8005f90:	2330      	movs	r3, #48	@ 0x30
 8005f92:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d119      	bne.n	8005fd0 <prints+0x88>
		for ( ; width > 0; --width) {
 8005f9c:	e008      	b.n	8005fb0 <prints+0x68>
			printchar (out, padchar);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff ffac 	bl	8005f00 <printchar>
			++pc;
 8005fa8:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dcf3      	bgt.n	8005f9e <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8005fb6:	e00b      	b.n	8005fd0 <prints+0x88>
		printchar (out, *string);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7ff ff9c 	bl	8005f00 <printchar>
		++pc;
 8005fc8:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ef      	bne.n	8005fb8 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8005fd8:	e008      	b.n	8005fec <prints+0xa4>
		printchar (out, padchar);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4641      	mov	r1, r8
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7ff ff8e 	bl	8005f00 <printchar>
		++pc;
 8005fe4:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dcf3      	bgt.n	8005fda <prints+0x92>
	}

	return pc;
 8005ff2:	0023      	movs	r3, r4
}
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b004      	add	sp, #16
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	46b8      	mov	r8, r7
 8005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006000 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8006000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006002:	46ce      	mov	lr, r9
 8006004:	4647      	mov	r7, r8
 8006006:	b580      	push	{r7, lr}
 8006008:	b089      	sub	sp, #36	@ 0x24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	4699      	mov	r9, r3
 8006018:	2600      	movs	r6, #0
	register unsigned int u = i;
 800601a:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10e      	bne.n	8006040 <printi+0x40>
		print_buf[0] = '0';
 8006022:	2114      	movs	r1, #20
 8006024:	187b      	adds	r3, r7, r1
 8006026:	2230      	movs	r2, #48	@ 0x30
 8006028:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 800602a:	187b      	adds	r3, r7, r1
 800602c:	2200      	movs	r2, #0
 800602e:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8006030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006034:	1879      	adds	r1, r7, r1
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff ff86 	bl	8005f48 <prints>
 800603c:	0003      	movs	r3, r0
 800603e:	e04e      	b.n	80060de <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <printi+0x5c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b0a      	cmp	r3, #10
 800604a:	d107      	bne.n	800605c <printi+0x5c>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da04      	bge.n	800605c <printi+0x5c>
		neg = 1;
 8006052:	2301      	movs	r3, #1
 8006054:	4699      	mov	r9, r3
		u = -i;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	425b      	negs	r3, r3
 800605a:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 800605c:	2314      	movs	r3, #20
 800605e:	18fc      	adds	r4, r7, r3
 8006060:	340b      	adds	r4, #11
	*s = '\0';
 8006062:	2300      	movs	r3, #0
 8006064:	7023      	strb	r3, [r4, #0]

	while (u) {
 8006066:	e019      	b.n	800609c <printi+0x9c>
		t = u % b;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0019      	movs	r1, r3
 800606c:	0028      	movs	r0, r5
 800606e:	f7fa f8d1 	bl	8000214 <__aeabi_uidivmod>
 8006072:	000b      	movs	r3, r1
 8006074:	4698      	mov	r8, r3
		if( t >= 10 )
 8006076:	4643      	mov	r3, r8
 8006078:	2b09      	cmp	r3, #9
 800607a:	dd02      	ble.n	8006082 <printi+0x82>
			t += letbase - '0' - 10;
 800607c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607e:	3b3a      	subs	r3, #58	@ 0x3a
 8006080:	4498      	add	r8, r3
		*--s = t + '0';
 8006082:	4643      	mov	r3, r8
 8006084:	b2db      	uxtb	r3, r3
 8006086:	3c01      	subs	r4, #1
 8006088:	3330      	adds	r3, #48	@ 0x30
 800608a:	b2db      	uxtb	r3, r3
 800608c:	7023      	strb	r3, [r4, #0]
		u /= b;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0019      	movs	r1, r3
 8006092:	0028      	movs	r0, r5
 8006094:	f7fa f838 	bl	8000108 <__udivsi3>
 8006098:	0003      	movs	r3, r0
 800609a:	001d      	movs	r5, r3
	while (u) {
 800609c:	2d00      	cmp	r5, #0
 800609e:	d1e3      	bne.n	8006068 <printi+0x68>
	}

	if (neg) {
 80060a0:	464b      	mov	r3, r9
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d013      	beq.n	80060ce <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 80060a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <printi+0xc8>
 80060ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ae:	2202      	movs	r2, #2
 80060b0:	4013      	ands	r3, r2
 80060b2:	d009      	beq.n	80060c8 <printi+0xc8>
			printchar (out, '-');
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	212d      	movs	r1, #45	@ 0x2d
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff ff21 	bl	8005f00 <printchar>
			++pc;
 80060be:	3601      	adds	r6, #1
			--width;
 80060c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c2:	3b01      	subs	r3, #1
 80060c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c6:	e002      	b.n	80060ce <printi+0xce>
		}
		else {
			*--s = '-';
 80060c8:	3c01      	subs	r4, #1
 80060ca:	232d      	movs	r3, #45	@ 0x2d
 80060cc:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80060ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	0021      	movs	r1, r4
 80060d6:	f7ff ff37 	bl	8005f48 <prints>
 80060da:	0003      	movs	r3, r0
 80060dc:	18f3      	adds	r3, r6, r3
}
 80060de:	0018      	movs	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b009      	add	sp, #36	@ 0x24
 80060e4:	bcc0      	pop	{r6, r7}
 80060e6:	46b9      	mov	r9, r7
 80060e8:	46b0      	mov	r8, r6
 80060ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ec <print>:

static int print(char **out, const char *format, va_list args )
{
 80060ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ee:	b08b      	sub	sp, #44	@ 0x2c
 80060f0:	af04      	add	r7, sp, #16
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80060f8:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80060fa:	e0c6      	b.n	800628a <print+0x19e>
		if (*format == '%') {
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b25      	cmp	r3, #37	@ 0x25
 8006102:	d000      	beq.n	8006106 <print+0x1a>
 8006104:	e0b2      	b.n	800626c <print+0x180>
			++format;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	3301      	adds	r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 800610c:	2600      	movs	r6, #0
 800610e:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d100      	bne.n	800611a <print+0x2e>
 8006118:	e0bd      	b.n	8006296 <print+0x1aa>
			if (*format == '%') goto out;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b25      	cmp	r3, #37	@ 0x25
 8006120:	d100      	bne.n	8006124 <print+0x38>
 8006122:	e0a5      	b.n	8006270 <print+0x184>
			if (*format == '-') {
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b2d      	cmp	r3, #45	@ 0x2d
 800612a:	d10a      	bne.n	8006142 <print+0x56>
				++format;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3301      	adds	r3, #1
 8006130:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8006132:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8006134:	e005      	b.n	8006142 <print+0x56>
				++format;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3301      	adds	r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 800613c:	2302      	movs	r3, #2
 800613e:	4333      	orrs	r3, r6
 8006140:	001e      	movs	r6, r3
			while (*format == '0') {
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b30      	cmp	r3, #48	@ 0x30
 8006148:	d0f5      	beq.n	8006136 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800614a:	e00b      	b.n	8006164 <print+0x78>
				width *= 10;
 800614c:	002b      	movs	r3, r5
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	195b      	adds	r3, r3, r5
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	001d      	movs	r5, r3
				width += *format - '0';
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	3b30      	subs	r3, #48	@ 0x30
 800615c:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	3301      	adds	r3, #1
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b2f      	cmp	r3, #47	@ 0x2f
 800616a:	d903      	bls.n	8006174 <print+0x88>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b39      	cmp	r3, #57	@ 0x39
 8006172:	d9eb      	bls.n	800614c <print+0x60>
			}
			if( *format == 's' ) {
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b73      	cmp	r3, #115	@ 0x73
 800617a:	d10f      	bne.n	800619c <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8006186:	d000      	beq.n	800618a <print+0x9e>
 8006188:	e000      	b.n	800618c <print+0xa0>
 800618a:	4949      	ldr	r1, [pc, #292]	@ (80062b0 <print+0x1c4>)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	0033      	movs	r3, r6
 8006190:	002a      	movs	r2, r5
 8006192:	f7ff fed9 	bl	8005f48 <prints>
 8006196:	0003      	movs	r3, r0
 8006198:	18e4      	adds	r4, r4, r3
				continue;
 800619a:	e073      	b.n	8006284 <print+0x198>
			}
			if( *format == 'd' ) {
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b64      	cmp	r3, #100	@ 0x64
 80061a2:	d10f      	bne.n	80061c4 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	2361      	movs	r3, #97	@ 0x61
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	9601      	str	r6, [sp, #4]
 80061b4:	9500      	str	r5, [sp, #0]
 80061b6:	2301      	movs	r3, #1
 80061b8:	220a      	movs	r2, #10
 80061ba:	f7ff ff21 	bl	8006000 <printi>
 80061be:	0003      	movs	r3, r0
 80061c0:	18e4      	adds	r4, r4, r3
				continue;
 80061c2:	e05f      	b.n	8006284 <print+0x198>
			}
			if( *format == 'x' ) {
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b78      	cmp	r3, #120	@ 0x78
 80061ca:	d10f      	bne.n	80061ec <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	2361      	movs	r3, #97	@ 0x61
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	9601      	str	r6, [sp, #4]
 80061dc:	9500      	str	r5, [sp, #0]
 80061de:	2300      	movs	r3, #0
 80061e0:	2210      	movs	r2, #16
 80061e2:	f7ff ff0d 	bl	8006000 <printi>
 80061e6:	0003      	movs	r3, r0
 80061e8:	18e4      	adds	r4, r4, r3
				continue;
 80061ea:	e04b      	b.n	8006284 <print+0x198>
			}
			if( *format == 'X' ) {
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b58      	cmp	r3, #88	@ 0x58
 80061f2:	d10f      	bne.n	8006214 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	2341      	movs	r3, #65	@ 0x41
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	9601      	str	r6, [sp, #4]
 8006204:	9500      	str	r5, [sp, #0]
 8006206:	2300      	movs	r3, #0
 8006208:	2210      	movs	r2, #16
 800620a:	f7ff fef9 	bl	8006000 <printi>
 800620e:	0003      	movs	r3, r0
 8006210:	18e4      	adds	r4, r4, r3
				continue;
 8006212:	e037      	b.n	8006284 <print+0x198>
			}
			if( *format == 'u' ) {
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b75      	cmp	r3, #117	@ 0x75
 800621a:	d10f      	bne.n	800623c <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	2361      	movs	r3, #97	@ 0x61
 8006228:	9302      	str	r3, [sp, #8]
 800622a:	9601      	str	r6, [sp, #4]
 800622c:	9500      	str	r5, [sp, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	220a      	movs	r2, #10
 8006232:	f7ff fee5 	bl	8006000 <printi>
 8006236:	0003      	movs	r3, r0
 8006238:	18e4      	adds	r4, r4, r3
				continue;
 800623a:	e023      	b.n	8006284 <print+0x198>
			}
			if( *format == 'c' ) {
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b63      	cmp	r3, #99	@ 0x63
 8006242:	d11f      	bne.n	8006284 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	1d1a      	adds	r2, r3, #4
 8006248:	607a      	str	r2, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	2114      	movs	r1, #20
 8006250:	187b      	adds	r3, r7, r1
 8006252:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8006254:	187b      	adds	r3, r7, r1
 8006256:	2200      	movs	r2, #0
 8006258:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 800625a:	1879      	adds	r1, r7, r1
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	0033      	movs	r3, r6
 8006260:	002a      	movs	r2, r5
 8006262:	f7ff fe71 	bl	8005f48 <prints>
 8006266:	0003      	movs	r3, r0
 8006268:	18e4      	adds	r4, r4, r3
				continue;
 800626a:	e00b      	b.n	8006284 <print+0x198>
			}
		}
		else {
		out:
 800626c:	46c0      	nop			@ (mov r8, r8)
 800626e:	e000      	b.n	8006272 <print+0x186>
			if (*format == '%') goto out;
 8006270:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	001a      	movs	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	0011      	movs	r1, r2
 800627c:	0018      	movs	r0, r3
 800627e:	f7ff fe3f 	bl	8005f00 <printchar>
			++pc;
 8006282:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	3301      	adds	r3, #1
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d000      	beq.n	8006294 <print+0x1a8>
 8006292:	e733      	b.n	80060fc <print+0x10>
 8006294:	e000      	b.n	8006298 <print+0x1ac>
			if (*format == '\0') break;
 8006296:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <print+0x1ba>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80062a6:	0023      	movs	r3, r4
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b007      	add	sp, #28
 80062ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b0:	08006de4 	.word	0x08006de4

080062b4 <my_printf>:

int my_printf(const char *format, ...)
{
 80062b4:	b40f      	push	{r0, r1, r2, r3}
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 80062bc:	2314      	movs	r3, #20
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	0019      	movs	r1, r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7ff ff0f 	bl	80060ec <print>
 80062ce:	0003      	movs	r3, r0
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bc80      	pop	{r7}
 80062d8:	bc08      	pop	{r3}
 80062da:	b004      	add	sp, #16
 80062dc:	4718      	bx	r3

080062de <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	af00      	add	r7, sp, #0
}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80062ec:	46c0      	nop			@ (mov r8, r8)
 80062ee:	e7fd      	b.n	80062ec <HardFault_Handler+0x4>

080062f0 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80062f4:	4b22      	ldr	r3, [pc, #136]	@ (8006380 <BSP_LED_Init+0x90>)
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	4b21      	ldr	r3, [pc, #132]	@ (8006380 <BSP_LED_Init+0x90>)
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	0289      	lsls	r1, r1, #10
 80062fe:	430a      	orrs	r2, r1
 8006300:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8006302:	2390      	movs	r3, #144	@ 0x90
 8006304:	05db      	lsls	r3, r3, #23
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	2390      	movs	r3, #144	@ 0x90
 800630a:	05db      	lsls	r3, r3, #23
 800630c:	491d      	ldr	r1, [pc, #116]	@ (8006384 <BSP_LED_Init+0x94>)
 800630e:	400a      	ands	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8006312:	2390      	movs	r3, #144	@ 0x90
 8006314:	05db      	lsls	r3, r3, #23
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	2390      	movs	r3, #144	@ 0x90
 800631a:	05db      	lsls	r3, r3, #23
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	00c9      	lsls	r1, r1, #3
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8006324:	2390      	movs	r3, #144	@ 0x90
 8006326:	05db      	lsls	r3, r3, #23
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	2390      	movs	r3, #144	@ 0x90
 800632c:	05db      	lsls	r3, r3, #23
 800632e:	2120      	movs	r1, #32
 8006330:	438a      	bics	r2, r1
 8006332:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8006334:	2390      	movs	r3, #144	@ 0x90
 8006336:	05db      	lsls	r3, r3, #23
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	2390      	movs	r3, #144	@ 0x90
 800633c:	05db      	lsls	r3, r3, #23
 800633e:	4911      	ldr	r1, [pc, #68]	@ (8006384 <BSP_LED_Init+0x94>)
 8006340:	400a      	ands	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8006344:	2390      	movs	r3, #144	@ 0x90
 8006346:	05db      	lsls	r3, r3, #23
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	2390      	movs	r3, #144	@ 0x90
 800634c:	05db      	lsls	r3, r3, #23
 800634e:	21c0      	movs	r1, #192	@ 0xc0
 8006350:	0109      	lsls	r1, r1, #4
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8006356:	2390      	movs	r3, #144	@ 0x90
 8006358:	05db      	lsls	r3, r3, #23
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	2390      	movs	r3, #144	@ 0x90
 800635e:	05db      	lsls	r3, r3, #23
 8006360:	4908      	ldr	r1, [pc, #32]	@ (8006384 <BSP_LED_Init+0x94>)
 8006362:	400a      	ands	r2, r1
 8006364:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8006366:	2390      	movs	r3, #144	@ 0x90
 8006368:	05db      	lsls	r3, r3, #23
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	2390      	movs	r3, #144	@ 0x90
 800636e:	05db      	lsls	r3, r3, #23
 8006370:	2180      	movs	r1, #128	@ 0x80
 8006372:	0389      	lsls	r1, r1, #14
 8006374:	430a      	orrs	r2, r1
 8006376:	619a      	str	r2, [r3, #24]
}
 8006378:	46c0      	nop			@ (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	40021000 	.word	0x40021000
 8006384:	fffff3ff 	.word	0xfffff3ff

08006388 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 800638c:	2390      	movs	r3, #144	@ 0x90
 800638e:	05db      	lsls	r3, r3, #23
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	2390      	movs	r3, #144	@ 0x90
 8006394:	05db      	lsls	r3, r3, #23
 8006396:	2120      	movs	r1, #32
 8006398:	404a      	eors	r2, r1
 800639a:	615a      	str	r2, [r3, #20]
}
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <BSP_PB_Init>:

void BSP_PB_Init()
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <BSP_PB_Init+0x38>)
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <BSP_PB_Init+0x38>)
 80063ae:	2180      	movs	r1, #128	@ 0x80
 80063b0:	0309      	lsls	r1, r1, #12
 80063b2:	430a      	orrs	r2, r1
 80063b4:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80063b6:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063bc:	4909      	ldr	r1, [pc, #36]	@ (80063e4 <BSP_PB_Init+0x40>)
 80063be:	400a      	ands	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80063c2:	4a07      	ldr	r2, [pc, #28]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063c4:	4b06      	ldr	r3, [pc, #24]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80063ca:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <BSP_PB_Init+0x3c>)
 80063d0:	4904      	ldr	r1, [pc, #16]	@ (80063e4 <BSP_PB_Init+0x40>)
 80063d2:	400a      	ands	r2, r1
 80063d4:	60da      	str	r2, [r3, #12]
}
 80063d6:	46c0      	nop			@ (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000
 80063e0:	48000800 	.word	0x48000800
 80063e4:	f3ffffff 	.word	0xf3ffffff

080063e8 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	uint8_t state;
	if ((GPIOC->IDR & GPIO_IDR_13) == GPIO_IDR_13)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <BSP_PB_GetState+0x34>)
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	2380      	movs	r3, #128	@ 0x80
 80063f4:	019b      	lsls	r3, r3, #6
 80063f6:	401a      	ands	r2, r3
 80063f8:	2380      	movs	r3, #128	@ 0x80
 80063fa:	019b      	lsls	r3, r3, #6
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d103      	bne.n	8006408 <BSP_PB_GetState+0x20>
	{
		state = 0;
 8006400:	1dfb      	adds	r3, r7, #7
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e002      	b.n	800640e <BSP_PB_GetState+0x26>
	}
	else
	{
		state = 1;
 8006408:	1dfb      	adds	r3, r7, #7
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
	}
	return state;
 800640e:	1dfb      	adds	r3, r7, #7
 8006410:	781b      	ldrb	r3, [r3, #0]
}
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	b002      	add	sp, #8
 8006418:	bd80      	pop	{r7, pc}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	48000800 	.word	0x48000800

08006420 <BSP_Console_Init>:

void BSP_Console_Init()
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006424:	4b2b      	ldr	r3, [pc, #172]	@ (80064d4 <BSP_Console_Init+0xb4>)
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	4b2a      	ldr	r3, [pc, #168]	@ (80064d4 <BSP_Console_Init+0xb4>)
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	0289      	lsls	r1, r1, #10
 800642e:	430a      	orrs	r2, r1
 8006430:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006432:	2390      	movs	r3, #144	@ 0x90
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	2390      	movs	r3, #144	@ 0x90
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	21f0      	movs	r1, #240	@ 0xf0
 800643e:	438a      	bics	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006442:	2390      	movs	r3, #144	@ 0x90
 8006444:	05db      	lsls	r3, r3, #23
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	2390      	movs	r3, #144	@ 0x90
 800644a:	05db      	lsls	r3, r3, #23
 800644c:	21a0      	movs	r1, #160	@ 0xa0
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006452:	2390      	movs	r3, #144	@ 0x90
 8006454:	05db      	lsls	r3, r3, #23
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	2390      	movs	r3, #144	@ 0x90
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	491e      	ldr	r1, [pc, #120]	@ (80064d8 <BSP_Console_Init+0xb8>)
 800645e:	400a      	ands	r2, r1
 8006460:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006462:	2390      	movs	r3, #144	@ 0x90
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	2390      	movs	r3, #144	@ 0x90
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	2188      	movs	r1, #136	@ 0x88
 800646e:	0149      	lsls	r1, r1, #5
 8006470:	430a      	orrs	r2, r1
 8006472:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <BSP_Console_Init+0xb4>)
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <BSP_Console_Init+0xb4>)
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	0289      	lsls	r1, r1, #10
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006482:	4b16      	ldr	r3, [pc, #88]	@ (80064dc <BSP_Console_Init+0xbc>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006488:	4b14      	ldr	r3, [pc, #80]	@ (80064dc <BSP_Console_Init+0xbc>)
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800648e:	4b13      	ldr	r3, [pc, #76]	@ (80064dc <BSP_Console_Init+0xbc>)
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8006494:	4b0f      	ldr	r3, [pc, #60]	@ (80064d4 <BSP_Console_Init+0xb4>)
 8006496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006498:	4b0e      	ldr	r3, [pc, #56]	@ (80064d4 <BSP_Console_Init+0xb4>)
 800649a:	4911      	ldr	r1, [pc, #68]	@ (80064e0 <BSP_Console_Init+0xc0>)
 800649c:	400a      	ands	r2, r1
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 80064a0:	4b0e      	ldr	r3, [pc, #56]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064a6:	2180      	movs	r1, #128	@ 0x80
 80064a8:	0209      	lsls	r1, r1, #8
 80064aa:	430a      	orrs	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 80064ae:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064b0:	4a0c      	ldr	r2, [pc, #48]	@ (80064e4 <BSP_Console_Init+0xc4>)
 80064b2:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80064b4:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	4b08      	ldr	r3, [pc, #32]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064ba:	210c      	movs	r1, #12
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80064c0:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <BSP_Console_Init+0xbc>)
 80064c6:	2101      	movs	r1, #1
 80064c8:	430a      	orrs	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	46c0      	nop			@ (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	40021000 	.word	0x40021000
 80064d8:	ffff00ff 	.word	0xffff00ff
 80064dc:	40004400 	.word	0x40004400
 80064e0:	fffcffff 	.word	0xfffcffff
 80064e4:	00000341 	.word	0x00000341

080064e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80064e8:	480d      	ldr	r0, [pc, #52]	@ (8006520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80064ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80064ec:	f000 f825 	bl	800653a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064f0:	480c      	ldr	r0, [pc, #48]	@ (8006524 <LoopForever+0x6>)
  ldr r1, =_edata
 80064f2:	490d      	ldr	r1, [pc, #52]	@ (8006528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80064f4:	4a0d      	ldr	r2, [pc, #52]	@ (800652c <LoopForever+0xe>)
  movs r3, #0
 80064f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064f8:	e002      	b.n	8006500 <LoopCopyDataInit>

080064fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064fe:	3304      	adds	r3, #4

08006500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006504:	d3f9      	bcc.n	80064fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006506:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006508:	4c0a      	ldr	r4, [pc, #40]	@ (8006534 <LoopForever+0x16>)
  movs r3, #0
 800650a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800650c:	e001      	b.n	8006512 <LoopFillZerobss>

0800650e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800650e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006510:	3204      	adds	r2, #4

08006512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006514:	d3fb      	bcc.n	800650e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006516:	f000 f8b5 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800651a:	f7ff fb79 	bl	8005c10 <main>

0800651e <LoopForever>:

LoopForever:
    b LoopForever
 800651e:	e7fe      	b.n	800651e <LoopForever>
  ldr   r0, =_estack
 8006520:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006528:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800652c:	08006ed4 	.word	0x08006ed4
  ldr r2, =_sbss
 8006530:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8006534:	20002e20 	.word	0x20002e20

08006538 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006538:	e7fe      	b.n	8006538 <ADC1_COMP_IRQHandler>

0800653a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	2300      	movs	r3, #0
 8006558:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800655a:	4b38      	ldr	r3, [pc, #224]	@ (800663c <SystemCoreClockUpdate+0xf8>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	220c      	movs	r2, #12
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b08      	cmp	r3, #8
 8006568:	d011      	beq.n	800658e <SystemCoreClockUpdate+0x4a>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d84f      	bhi.n	8006610 <SystemCoreClockUpdate+0xcc>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <SystemCoreClockUpdate+0x3a>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b04      	cmp	r3, #4
 800657a:	d004      	beq.n	8006586 <SystemCoreClockUpdate+0x42>
 800657c:	e048      	b.n	8006610 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800657e:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 8006580:	4a30      	ldr	r2, [pc, #192]	@ (8006644 <SystemCoreClockUpdate+0x100>)
 8006582:	601a      	str	r2, [r3, #0]
      break;
 8006584:	e048      	b.n	8006618 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006586:	4b2e      	ldr	r3, [pc, #184]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 8006588:	4a2e      	ldr	r2, [pc, #184]	@ (8006644 <SystemCoreClockUpdate+0x100>)
 800658a:	601a      	str	r2, [r3, #0]
      break;
 800658c:	e044      	b.n	8006618 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800658e:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <SystemCoreClockUpdate+0xf8>)
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	23f0      	movs	r3, #240	@ 0xf0
 8006594:	039b      	lsls	r3, r3, #14
 8006596:	4013      	ands	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800659a:	4b28      	ldr	r3, [pc, #160]	@ (800663c <SystemCoreClockUpdate+0xf8>)
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	23c0      	movs	r3, #192	@ 0xc0
 80065a0:	025b      	lsls	r3, r3, #9
 80065a2:	4013      	ands	r3, r2
 80065a4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	0c9b      	lsrs	r3, r3, #18
 80065aa:	3302      	adds	r3, #2
 80065ac:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80065ae:	4b23      	ldr	r3, [pc, #140]	@ (800663c <SystemCoreClockUpdate+0xf8>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	220f      	movs	r2, #15
 80065b4:	4013      	ands	r3, r2
 80065b6:	3301      	adds	r3, #1
 80065b8:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	025b      	lsls	r3, r3, #9
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d10a      	bne.n	80065da <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	481f      	ldr	r0, [pc, #124]	@ (8006644 <SystemCoreClockUpdate+0x100>)
 80065c8:	f7f9 fd9e 	bl	8000108 <__udivsi3>
 80065cc:	0003      	movs	r3, r0
 80065ce:	001a      	movs	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	435a      	muls	r2, r3
 80065d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 80065d6:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80065d8:	e01e      	b.n	8006618 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	23c0      	movs	r3, #192	@ 0xc0
 80065de:	025b      	lsls	r3, r3, #9
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d10a      	bne.n	80065fa <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4818      	ldr	r0, [pc, #96]	@ (8006648 <SystemCoreClockUpdate+0x104>)
 80065e8:	f7f9 fd8e 	bl	8000108 <__udivsi3>
 80065ec:	0003      	movs	r3, r0
 80065ee:	001a      	movs	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	435a      	muls	r2, r3
 80065f4:	4b12      	ldr	r3, [pc, #72]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 80065f6:	601a      	str	r2, [r3, #0]
      break;
 80065f8:	e00e      	b.n	8006618 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	4811      	ldr	r0, [pc, #68]	@ (8006644 <SystemCoreClockUpdate+0x100>)
 80065fe:	f7f9 fd83 	bl	8000108 <__udivsi3>
 8006602:	0003      	movs	r3, r0
 8006604:	001a      	movs	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	435a      	muls	r2, r3
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 800660c:	601a      	str	r2, [r3, #0]
      break;
 800660e:	e003      	b.n	8006618 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006610:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 8006612:	4a0c      	ldr	r2, [pc, #48]	@ (8006644 <SystemCoreClockUpdate+0x100>)
 8006614:	601a      	str	r2, [r3, #0]
      break;
 8006616:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006618:	4b08      	ldr	r3, [pc, #32]	@ (800663c <SystemCoreClockUpdate+0xf8>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	220f      	movs	r2, #15
 8006620:	4013      	ands	r3, r2
 8006622:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <SystemCoreClockUpdate+0x108>)
 8006624:	5cd3      	ldrb	r3, [r2, r3]
 8006626:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006628:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	40da      	lsrs	r2, r3
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <SystemCoreClockUpdate+0xfc>)
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	46c0      	nop			@ (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b004      	add	sp, #16
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021000 	.word	0x40021000
 8006640:	20000014 	.word	0x20000014
 8006644:	007a1200 	.word	0x007a1200
 8006648:	02dc6c00 	.word	0x02dc6c00
 800664c:	08006ebc 	.word	0x08006ebc

08006650 <memset>:
 8006650:	0003      	movs	r3, r0
 8006652:	1882      	adds	r2, r0, r2
 8006654:	4293      	cmp	r3, r2
 8006656:	d100      	bne.n	800665a <memset+0xa>
 8006658:	4770      	bx	lr
 800665a:	7019      	strb	r1, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	e7f9      	b.n	8006654 <memset+0x4>

08006660 <strncmp>:
 8006660:	b530      	push	{r4, r5, lr}
 8006662:	0005      	movs	r5, r0
 8006664:	1e10      	subs	r0, r2, #0
 8006666:	d00b      	beq.n	8006680 <strncmp+0x20>
 8006668:	2400      	movs	r4, #0
 800666a:	3a01      	subs	r2, #1
 800666c:	5d2b      	ldrb	r3, [r5, r4]
 800666e:	5d08      	ldrb	r0, [r1, r4]
 8006670:	4283      	cmp	r3, r0
 8006672:	d104      	bne.n	800667e <strncmp+0x1e>
 8006674:	42a2      	cmp	r2, r4
 8006676:	d002      	beq.n	800667e <strncmp+0x1e>
 8006678:	3401      	adds	r4, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f6      	bne.n	800666c <strncmp+0xc>
 800667e:	1a18      	subs	r0, r3, r0
 8006680:	bd30      	pop	{r4, r5, pc}
	...

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	2600      	movs	r6, #0
 8006688:	4c0c      	ldr	r4, [pc, #48]	@ (80066bc <__libc_init_array+0x38>)
 800668a:	4d0d      	ldr	r5, [pc, #52]	@ (80066c0 <__libc_init_array+0x3c>)
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	2600      	movs	r6, #0
 8006696:	f000 f823 	bl	80066e0 <_init>
 800669a:	4c0a      	ldr	r4, [pc, #40]	@ (80066c4 <__libc_init_array+0x40>)
 800669c:	4d0a      	ldr	r5, [pc, #40]	@ (80066c8 <__libc_init_array+0x44>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	00b3      	lsls	r3, r6, #2
 80066aa:	58eb      	ldr	r3, [r5, r3]
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	00b3      	lsls	r3, r6, #2
 80066b4:	58eb      	ldr	r3, [r5, r3]
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08006ecc 	.word	0x08006ecc
 80066c0:	08006ecc 	.word	0x08006ecc
 80066c4:	08006ed0 	.word	0x08006ed0
 80066c8:	08006ecc 	.word	0x08006ecc

080066cc <memcpy>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b510      	push	{r4, lr}
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d100      	bne.n	80066d6 <memcpy+0xa>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	5ccc      	ldrb	r4, [r1, r3]
 80066d8:	54c4      	strb	r4, [r0, r3]
 80066da:	3301      	adds	r3, #1
 80066dc:	e7f8      	b.n	80066d0 <memcpy+0x4>
	...

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
