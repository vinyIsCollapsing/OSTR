
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006c24  08006c24  00007c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006c28  08006c28  00007c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08006c2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000030bc  2000000c  08006c38  0000800c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200030c8  08006c38  000080c8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e6e4  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000378f  00000000  00000000  00016718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d18  00000000  00000000  00019ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000009a9  00000000  00000000  0001abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00007991  00000000  00000000  0001b569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bc4f  00000000  00000000  00022efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000784ac  00000000  00000000  0003eb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000b6ff5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a34  00000000  00000000  000b7038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  000b9a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006778 	.word	0x08006778

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006778 	.word	0x08006778

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800033a:	2301      	movs	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d106      	bne.n	8000356 <xQueueGenericReset+0x26>
 8000348:	2397      	movs	r3, #151	@ 0x97
 800034a:	005a      	lsls	r2, r3, #1
 800034c:	4b42      	ldr	r3, [pc, #264]	@ (8000458 <xQueueGenericReset+0x128>)
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f005 f8eb 	bl	800552c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <xQueueGenericReset+0x2e>
 800035c:	e06a      	b.n	8000434 <xQueueGenericReset+0x104>
        ( pxQueue->uxLength >= 1U ) &&
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000362:	2b00      	cmp	r3, #0
 8000364:	d066      	beq.n	8000434 <xQueueGenericReset+0x104>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800036e:	2400      	movs	r4, #0
 8000370:	0c15      	lsrs	r5, r2, #16
 8000372:	0c19      	lsrs	r1, r3, #16
 8000374:	b2a8      	uxth	r0, r5
 8000376:	2800      	cmp	r0, #0
 8000378:	d104      	bne.n	8000384 <xQueueGenericReset+0x54>
 800037a:	b288      	uxth	r0, r1
 800037c:	2800      	cmp	r0, #0
 800037e:	d013      	beq.n	80003a8 <xQueueGenericReset+0x78>
 8000380:	1c10      	adds	r0, r2, #0
 8000382:	e004      	b.n	800038e <xQueueGenericReset+0x5e>
 8000384:	b289      	uxth	r1, r1
 8000386:	2900      	cmp	r1, #0
 8000388:	d10d      	bne.n	80003a6 <xQueueGenericReset+0x76>
 800038a:	1c29      	adds	r1, r5, #0
 800038c:	1c18      	adds	r0, r3, #0
 800038e:	b292      	uxth	r2, r2
 8000390:	b29b      	uxth	r3, r3
 8000392:	435a      	muls	r2, r3
 8000394:	b283      	uxth	r3, r0
 8000396:	b289      	uxth	r1, r1
 8000398:	434b      	muls	r3, r1
 800039a:	0c12      	lsrs	r2, r2, #16
 800039c:	189b      	adds	r3, r3, r2
 800039e:	141b      	asrs	r3, r3, #16
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d000      	beq.n	80003a8 <xQueueGenericReset+0x78>
 80003a6:	2401      	movs	r4, #1
 80003a8:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003aa:	d143      	bne.n	8000434 <xQueueGenericReset+0x104>
    {
        taskENTER_CRITICAL();
 80003ac:	f002 fd68 	bl	8002e80 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	434b      	muls	r3, r1
 80003be:	18d2      	adds	r2, r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	2200      	movs	r2, #0
 80003c8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003da:	1e59      	subs	r1, r3, #1
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	434b      	muls	r3, r1
 80003e2:	18d2      	adds	r2, r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2244      	movs	r2, #68	@ 0x44
 80003ec:	21ff      	movs	r1, #255	@ 0xff
 80003ee:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2245      	movs	r2, #69	@ 0x45
 80003f4:	21ff      	movs	r1, #255	@ 0xff
 80003f6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10d      	bne.n	800041a <xQueueGenericReset+0xea>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d013      	beq.n	800042e <xQueueGenericReset+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	3310      	adds	r3, #16
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fe02 	bl	8002014 <xTaskRemoveFromEventList>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d00c      	beq.n	800042e <xQueueGenericReset+0xfe>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000414:	f002 fd24 	bl	8002e60 <vPortYield>
 8000418:	e009      	b.n	800042e <xQueueGenericReset+0xfe>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3310      	adds	r3, #16
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	3324      	adds	r3, #36	@ 0x24
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef9 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800042e:	f002 fd39 	bl	8002ea4 <vPortExitCritical>
 8000432:	e001      	b.n	8000438 <xQueueGenericReset+0x108>
    }
    else
    {
        xReturn = pdFAIL;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d107      	bne.n	800044e <xQueueGenericReset+0x11e>
 800043e:	2364      	movs	r3, #100	@ 0x64
 8000440:	33ff      	adds	r3, #255	@ 0xff
 8000442:	001a      	movs	r2, r3
 8000444:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <xQueueGenericReset+0x128>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f005 f86f 	bl	800552c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}
 8000458:	08006790 	.word	0x08006790

0800045c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af02      	add	r7, sp, #8
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d100      	bne.n	8000476 <xQueueGenericCreate+0x1a>
 8000474:	e06d      	b.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000476:	2000      	movs	r0, #0
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0c19      	lsrs	r1, r3, #16
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c1e      	adds	r6, r3, #0
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	0c1b      	lsrs	r3, r3, #16
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	1c15      	adds	r5, r2, #0
 8000488:	b28a      	uxth	r2, r1
 800048a:	2a00      	cmp	r2, #0
 800048c:	d105      	bne.n	800049a <xQueueGenericCreate+0x3e>
 800048e:	b29a      	uxth	r2, r3
 8000490:	2a00      	cmp	r2, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericCreate+0x60>
 8000494:	1c19      	adds	r1, r3, #0
 8000496:	1c34      	adds	r4, r6, #0
 8000498:	e003      	b.n	80004a2 <xQueueGenericCreate+0x46>
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10c      	bne.n	80004ba <xQueueGenericCreate+0x5e>
 80004a0:	1c2c      	adds	r4, r5, #0
 80004a2:	b2b3      	uxth	r3, r6
 80004a4:	b2aa      	uxth	r2, r5
 80004a6:	435a      	muls	r2, r3
 80004a8:	b2a3      	uxth	r3, r4
 80004aa:	b289      	uxth	r1, r1
 80004ac:	434b      	muls	r3, r1
 80004ae:	0c12      	lsrs	r2, r2, #16
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	141b      	asrs	r3, r3, #16
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d000      	beq.n	80004bc <xQueueGenericCreate+0x60>
 80004ba:	2001      	movs	r0, #1
 80004bc:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004be:	d148      	bne.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004c6:	3351      	adds	r3, #81	@ 0x51
 80004c8:	d843      	bhi.n	8000552 <xQueueGenericCreate+0xf6>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4353      	muls	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004d2:	69bb      	ldr	r3, [r7, #24]
 80004d4:	3350      	adds	r3, #80	@ 0x50
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fd72 	bl	8002fc0 <pvPortMalloc>
 80004dc:	0003      	movs	r3, r0
 80004de:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00f      	beq.n	8000506 <xQueueGenericCreate+0xaa>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3350      	adds	r3, #80	@ 0x50
 80004ee:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	781c      	ldrb	r4, [r3, #0]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	0023      	movs	r3, r4
 8000500:	f000 f83a 	bl	8000578 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000504:	e030      	b.n	8000568 <xQueueGenericCreate+0x10c>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d01b      	beq.n	8000546 <xQueueGenericCreate+0xea>
 800050e:	dc2b      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000510:	2b03      	cmp	r3, #3
 8000512:	d00c      	beq.n	800052e <xQueueGenericCreate+0xd2>
 8000514:	dc28      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <xQueueGenericCreate+0xc4>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d00d      	beq.n	800053a <xQueueGenericCreate+0xde>
            if( pxNewQueue != NULL )
 800051e:	e023      	b.n	8000568 <xQueueGenericCreate+0x10c>
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	2041      	movs	r0, #65	@ 0x41
 8000528:	f003 fd22 	bl	8003f70 <xTraceEventCreate2>
 800052c:	e010      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2042      	movs	r0, #66	@ 0x42
 8000534:	f003 fd1c 	bl	8003f70 <xTraceEventCreate2>
 8000538:	e00a      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2043      	movs	r0, #67	@ 0x43
 8000540:	f003 fd16 	bl	8003f70 <xTraceEventCreate2>
 8000544:	e004      	b.n	8000550 <xQueueGenericCreate+0xf4>
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2047      	movs	r0, #71	@ 0x47
 800054c:	f003 fd10 	bl	8003f70 <xTraceEventCreate2>
            if( pxNewQueue != NULL )
 8000550:	e00a      	b.n	8000568 <xQueueGenericCreate+0x10c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d108      	bne.n	800056a <xQueueGenericCreate+0x10e>
 8000558:	23f2      	movs	r3, #242	@ 0xf2
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <xQueueGenericCreate+0x118>)
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f004 ffe3 	bl	800552c <vAssertCalled>
 8000566:	e000      	b.n	800056a <xQueueGenericCreate+0x10e>
            if( pxNewQueue != NULL )
 8000568:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800056a:	69fb      	ldr	r3, [r7, #28]
    }
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	08006790 	.word	0x08006790

08000578 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	001a      	movs	r2, r3
 8000586:	1cfb      	adds	r3, r7, #3
 8000588:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d103      	bne.n	8000598 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e002      	b.n	800059e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff febe 	bl	8000330 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	214c      	movs	r1, #76	@ 0x4c
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	224c      	movs	r2, #76	@ 0x4c
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d01d      	beq.n	8000604 <prvInitialiseNewQueue+0x8c>
 80005c8:	dc22      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d00c      	beq.n	80005e8 <prvInitialiseNewQueue+0x70>
 80005ce:	dc1f      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <prvInitialiseNewQueue+0x62>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00e      	beq.n	80005f6 <prvInitialiseNewQueue+0x7e>
}
 80005d8:	e01a      	b.n	8000610 <prvInitialiseNewQueue+0x98>
    traceQUEUE_CREATE( pxNewQueue );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005de:	69b9      	ldr	r1, [r7, #24]
 80005e0:	2011      	movs	r0, #17
 80005e2:	f004 f9bd 	bl	8004960 <xTraceObjectRegisterWithoutHandle>
 80005e6:	e013      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005ea:	69b9      	ldr	r1, [r7, #24]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2012      	movs	r0, #18
 80005f0:	f004 f9b6 	bl	8004960 <xTraceObjectRegisterWithoutHandle>
 80005f4:	e00c      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2013      	movs	r0, #19
 80005fe:	f004 f9af 	bl	8004960 <xTraceObjectRegisterWithoutHandle>
 8000602:	e005      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 8000606:	69b9      	ldr	r1, [r7, #24]
 8000608:	2300      	movs	r3, #0
 800060a:	2017      	movs	r0, #23
 800060c:	f004 f9a8 	bl	8004960 <xTraceObjectRegisterWithoutHandle>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080067a4 	.word	0x080067a4

0800061c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00e      	beq.n	8000648 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	2300      	movs	r3, #0
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	f000 f820 	bl	8000688 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	0002      	movs	r2, r0
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	6939      	ldr	r1, [r7, #16]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff fef5 	bl	800045c <xQueueGenericCreate>
 8000672:	0003      	movs	r3, r0
 8000674:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ffcf 	bl	800061c <prvInitialiseMutex>

        return xNewQueue;
 800067e:	68fb      	ldr	r3, [r7, #12]
    }
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b006      	add	sp, #24
 8000686:	bd80      	pop	{r7, pc}

08000688 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <xQueueGenericSend+0x2a>
 80006a4:	23d3      	movs	r3, #211	@ 0xd3
 80006a6:	009a      	lsls	r2, r3, #2
 80006a8:	4bb3      	ldr	r3, [pc, #716]	@ (8000978 <xQueueGenericSend+0x2f0>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f004 ff3d 	bl	800552c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d103      	bne.n	80006c0 <xQueueGenericSend+0x38>
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <xQueueGenericSend+0x3c>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <xQueueGenericSend+0x3e>
 80006c4:	2300      	movs	r3, #0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d105      	bne.n	80006d6 <xQueueGenericSend+0x4e>
 80006ca:	4aac      	ldr	r2, [pc, #688]	@ (800097c <xQueueGenericSend+0x2f4>)
 80006cc:	4baa      	ldr	r3, [pc, #680]	@ (8000978 <xQueueGenericSend+0x2f0>)
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f004 ff2b 	bl	800552c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d103      	bne.n	80006e4 <xQueueGenericSend+0x5c>
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d101      	bne.n	80006e8 <xQueueGenericSend+0x60>
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <xQueueGenericSend+0x62>
 80006e8:	2300      	movs	r3, #0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d105      	bne.n	80006fa <xQueueGenericSend+0x72>
 80006ee:	4aa4      	ldr	r2, [pc, #656]	@ (8000980 <xQueueGenericSend+0x2f8>)
 80006f0:	4ba1      	ldr	r3, [pc, #644]	@ (8000978 <xQueueGenericSend+0x2f0>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f004 ff19 	bl	800552c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006fa:	f001 fe43 	bl	8002384 <xTaskGetSchedulerState>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d102      	bne.n	8000708 <xQueueGenericSend+0x80>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <xQueueGenericSend+0x84>
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <xQueueGenericSend+0x86>
 800070c:	2300      	movs	r3, #0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <xQueueGenericSend+0x96>
 8000712:	4a9c      	ldr	r2, [pc, #624]	@ (8000984 <xQueueGenericSend+0x2fc>)
 8000714:	4b98      	ldr	r3, [pc, #608]	@ (8000978 <xQueueGenericSend+0x2f0>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f004 ff07 	bl	800552c <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800071e:	f002 fbaf 	bl	8002e80 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800072a:	429a      	cmp	r2, r3
 800072c:	d302      	bcc.n	8000734 <xQueueGenericSend+0xac>
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d14f      	bne.n	80007d4 <xQueueGenericSend+0x14c>
            {
                traceQUEUE_SEND( pxQueue );
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	224c      	movs	r2, #76	@ 0x4c
 8000738:	5c9b      	ldrb	r3, [r3, r2]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d026      	beq.n	800078c <xQueueGenericSend+0x104>
 800073e:	dc2a      	bgt.n	8000796 <xQueueGenericSend+0x10e>
 8000740:	2b03      	cmp	r3, #3
 8000742:	dc28      	bgt.n	8000796 <xQueueGenericSend+0x10e>
 8000744:	2b02      	cmp	r3, #2
 8000746:	da12      	bge.n	800076e <xQueueGenericSend+0xe6>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <xQueueGenericSend+0xca>
 800074c:	2b01      	cmp	r3, #1
 800074e:	d017      	beq.n	8000780 <xQueueGenericSend+0xf8>
 8000750:	e021      	b.n	8000796 <xQueueGenericSend+0x10e>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <xQueueGenericSend+0xd4>
 8000758:	2050      	movs	r0, #80	@ 0x50
 800075a:	e000      	b.n	800075e <xQueueGenericSend+0xd6>
 800075c:	20c0      	movs	r0, #192	@ 0xc0
 800075e:	6a39      	ldr	r1, [r7, #32]
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000764:	3301      	adds	r3, #1
 8000766:	001a      	movs	r2, r3
 8000768:	f003 fc02 	bl	8003f70 <xTraceEventCreate2>
 800076c:	e013      	b.n	8000796 <xQueueGenericSend+0x10e>
 800076e:	6a39      	ldr	r1, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000774:	3301      	adds	r3, #1
 8000776:	001a      	movs	r2, r3
 8000778:	2051      	movs	r0, #81	@ 0x51
 800077a:	f003 fbf9 	bl	8003f70 <xTraceEventCreate2>
 800077e:	e00a      	b.n	8000796 <xQueueGenericSend+0x10e>
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	0019      	movs	r1, r3
 8000784:	2052      	movs	r0, #82	@ 0x52
 8000786:	f003 fb7b 	bl	8003e80 <xTraceEventCreate1>
 800078a:	e004      	b.n	8000796 <xQueueGenericSend+0x10e>
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	0019      	movs	r1, r3
 8000790:	20c5      	movs	r0, #197	@ 0xc5
 8000792:	f003 fb75 	bl	8003e80 <xTraceEventCreate1>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fd0d 	bl	80011bc <prvCopyDataToQueue>
 80007a2:	0003      	movs	r3, r0
 80007a4:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d009      	beq.n	80007c2 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	3324      	adds	r3, #36	@ 0x24
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fc2e 	bl	8002014 <xTaskRemoveFromEventList>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d007      	beq.n	80007cc <xQueueGenericSend+0x144>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80007bc:	f002 fb50 	bl	8002e60 <vPortYield>
 80007c0:	e004      	b.n	80007cc <xQueueGenericSend+0x144>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <xQueueGenericSend+0x144>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80007c8:	f002 fb4a 	bl	8002e60 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80007cc:	f002 fb6a 	bl	8002ea4 <vPortExitCritical>
                return pdPASS;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e0df      	b.n	8000994 <xQueueGenericSend+0x30c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12c      	bne.n	8000834 <xQueueGenericSend+0x1ac>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80007da:	f002 fb63 	bl	8002ea4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	224c      	movs	r2, #76	@ 0x4c
 80007e2:	5c9b      	ldrb	r3, [r3, r2]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d01e      	beq.n	8000826 <xQueueGenericSend+0x19e>
 80007e8:	dc22      	bgt.n	8000830 <xQueueGenericSend+0x1a8>
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	dc20      	bgt.n	8000830 <xQueueGenericSend+0x1a8>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	da11      	bge.n	8000816 <xQueueGenericSend+0x18e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <xQueueGenericSend+0x174>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d015      	beq.n	8000826 <xQueueGenericSend+0x19e>
 80007fa:	e019      	b.n	8000830 <xQueueGenericSend+0x1a8>
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <xQueueGenericSend+0x17e>
 8000802:	2053      	movs	r0, #83	@ 0x53
 8000804:	e000      	b.n	8000808 <xQueueGenericSend+0x180>
 8000806:	20c1      	movs	r0, #193	@ 0xc1
 8000808:	6a39      	ldr	r1, [r7, #32]
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800080e:	001a      	movs	r2, r3
 8000810:	f003 fbae 	bl	8003f70 <xTraceEventCreate2>
 8000814:	e00c      	b.n	8000830 <xQueueGenericSend+0x1a8>
 8000816:	6a39      	ldr	r1, [r7, #32]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800081c:	001a      	movs	r2, r3
 800081e:	2054      	movs	r0, #84	@ 0x54
 8000820:	f003 fba6 	bl	8003f70 <xTraceEventCreate2>
 8000824:	e004      	b.n	8000830 <xQueueGenericSend+0x1a8>
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	0019      	movs	r1, r3
 800082a:	2055      	movs	r0, #85	@ 0x55
 800082c:	f003 fb28 	bl	8003e80 <xTraceEventCreate1>
                    return errQUEUE_FULL;
 8000830:	2300      	movs	r3, #0
 8000832:	e0af      	b.n	8000994 <xQueueGenericSend+0x30c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000836:	2b00      	cmp	r3, #0
 8000838:	d106      	bne.n	8000848 <xQueueGenericSend+0x1c0>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800083a:	2314      	movs	r3, #20
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fcc0 	bl	80021c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000848:	f002 fb2c 	bl	8002ea4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800084c:	f001 f8d4 	bl	80019f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000850:	f002 fb16 	bl	8002e80 <vPortEnterCritical>
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	2244      	movs	r2, #68	@ 0x44
 8000858:	5c9b      	ldrb	r3, [r3, r2]
 800085a:	b25b      	sxtb	r3, r3
 800085c:	3301      	adds	r3, #1
 800085e:	d103      	bne.n	8000868 <xQueueGenericSend+0x1e0>
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	2100      	movs	r1, #0
 8000866:	5499      	strb	r1, [r3, r2]
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	2245      	movs	r2, #69	@ 0x45
 800086c:	5c9b      	ldrb	r3, [r3, r2]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	3301      	adds	r3, #1
 8000872:	d103      	bne.n	800087c <xQueueGenericSend+0x1f4>
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	2245      	movs	r2, #69	@ 0x45
 8000878:	2100      	movs	r1, #0
 800087a:	5499      	strb	r1, [r3, r2]
 800087c:	f002 fb12 	bl	8002ea4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000880:	1d3a      	adds	r2, r7, #4
 8000882:	2314      	movs	r3, #20
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fcaf 	bl	80021ec <xTaskCheckForTimeOut>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d148      	bne.n	8000924 <xQueueGenericSend+0x29c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fd96 	bl	80013c6 <prvIsQueueFull>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d03b      	beq.n	8000916 <xQueueGenericSend+0x28e>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	224c      	movs	r2, #76	@ 0x4c
 80008a2:	5c9b      	ldrb	r3, [r3, r2]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d01e      	beq.n	80008e6 <xQueueGenericSend+0x25e>
 80008a8:	dc22      	bgt.n	80008f0 <xQueueGenericSend+0x268>
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dc20      	bgt.n	80008f0 <xQueueGenericSend+0x268>
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	da11      	bge.n	80008d6 <xQueueGenericSend+0x24e>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <xQueueGenericSend+0x234>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d015      	beq.n	80008e6 <xQueueGenericSend+0x25e>
 80008ba:	e019      	b.n	80008f0 <xQueueGenericSend+0x268>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <xQueueGenericSend+0x23e>
 80008c2:	2056      	movs	r0, #86	@ 0x56
 80008c4:	e000      	b.n	80008c8 <xQueueGenericSend+0x240>
 80008c6:	20c2      	movs	r0, #194	@ 0xc2
 80008c8:	6a39      	ldr	r1, [r7, #32]
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008ce:	001a      	movs	r2, r3
 80008d0:	f003 fb4e 	bl	8003f70 <xTraceEventCreate2>
 80008d4:	e00c      	b.n	80008f0 <xQueueGenericSend+0x268>
 80008d6:	6a39      	ldr	r1, [r7, #32]
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008dc:	001a      	movs	r2, r3
 80008de:	2057      	movs	r0, #87	@ 0x57
 80008e0:	f003 fb46 	bl	8003f70 <xTraceEventCreate2>
 80008e4:	e004      	b.n	80008f0 <xQueueGenericSend+0x268>
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	0019      	movs	r1, r3
 80008ea:	2058      	movs	r0, #88	@ 0x58
 80008ec:	f003 fac8 	bl	8003e80 <xTraceEventCreate1>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	3310      	adds	r3, #16
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fb15 	bl	8001f28 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fcec 	bl	80012de <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000906:	f001 f883 	bl	8001a10 <xTaskResumeAll>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d000      	beq.n	8000910 <xQueueGenericSend+0x288>
 800090e:	e706      	b.n	800071e <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 8000910:	f002 faa6 	bl	8002e60 <vPortYield>
 8000914:	e703      	b.n	800071e <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fce0 	bl	80012de <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800091e:	f001 f877 	bl	8001a10 <xTaskResumeAll>
 8000922:	e6fc      	b.n	800071e <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fcd9 	bl	80012de <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800092c:	f001 f870 	bl	8001a10 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	224c      	movs	r2, #76	@ 0x4c
 8000934:	5c9b      	ldrb	r3, [r3, r2]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d026      	beq.n	8000988 <xQueueGenericSend+0x300>
 800093a:	dc2a      	bgt.n	8000992 <xQueueGenericSend+0x30a>
 800093c:	2b03      	cmp	r3, #3
 800093e:	dc28      	bgt.n	8000992 <xQueueGenericSend+0x30a>
 8000940:	2b02      	cmp	r3, #2
 8000942:	da11      	bge.n	8000968 <xQueueGenericSend+0x2e0>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <xQueueGenericSend+0x2c6>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d01d      	beq.n	8000988 <xQueueGenericSend+0x300>
 800094c:	e021      	b.n	8000992 <xQueueGenericSend+0x30a>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <xQueueGenericSend+0x2d0>
 8000954:	2053      	movs	r0, #83	@ 0x53
 8000956:	e000      	b.n	800095a <xQueueGenericSend+0x2d2>
 8000958:	20c1      	movs	r0, #193	@ 0xc1
 800095a:	6a39      	ldr	r1, [r7, #32]
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000960:	001a      	movs	r2, r3
 8000962:	f003 fb05 	bl	8003f70 <xTraceEventCreate2>
 8000966:	e014      	b.n	8000992 <xQueueGenericSend+0x30a>
 8000968:	6a39      	ldr	r1, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800096e:	001a      	movs	r2, r3
 8000970:	2054      	movs	r0, #84	@ 0x54
 8000972:	f003 fafd 	bl	8003f70 <xTraceEventCreate2>
 8000976:	e00c      	b.n	8000992 <xQueueGenericSend+0x30a>
 8000978:	08006790 	.word	0x08006790
 800097c:	0000034d 	.word	0x0000034d
 8000980:	0000034e 	.word	0x0000034e
 8000984:	00000351 	.word	0x00000351
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	0019      	movs	r1, r3
 800098c:	2055      	movs	r0, #85	@ 0x55
 800098e:	f003 fa77 	bl	8003e80 <xTraceEventCreate1>
            return errQUEUE_FULL;
 8000992:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b00a      	add	sp, #40	@ 0x28
 800099a:	bd80      	pop	{r7, pc}

0800099c <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	6839      	ldr	r1, [r7, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 f805 	bl	80009bc <MyWrapper_xQueueGiveFromISR>
 80009b2:	0003      	movs	r3, r0
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}

080009bc <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d105      	bne.n	80009de <MyWrapper_xQueueGiveFromISR+0x22>
 80009d2:	4a5e      	ldr	r2, [pc, #376]	@ (8000b4c <MyWrapper_xQueueGiveFromISR+0x190>)
 80009d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b50 <MyWrapper_xQueueGiveFromISR+0x194>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f004 fda7 	bl	800552c <vAssertCalled>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <MyWrapper_xQueueGiveFromISR+0x36>
 80009e6:	4a5b      	ldr	r2, [pc, #364]	@ (8000b54 <MyWrapper_xQueueGiveFromISR+0x198>)
 80009e8:	4b59      	ldr	r3, [pc, #356]	@ (8000b50 <MyWrapper_xQueueGiveFromISR+0x194>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f004 fd9d 	bl	800552c <vAssertCalled>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <MyWrapper_xQueueGiveFromISR+0x46>
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <MyWrapper_xQueueGiveFromISR+0x4a>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MyWrapper_xQueueGiveFromISR+0x4c>
 8000a06:	2300      	movs	r3, #0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d105      	bne.n	8000a18 <MyWrapper_xQueueGiveFromISR+0x5c>
 8000a0c:	4a52      	ldr	r2, [pc, #328]	@ (8000b58 <MyWrapper_xQueueGiveFromISR+0x19c>)
 8000a0e:	4b50      	ldr	r3, [pc, #320]	@ (8000b50 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f004 fd8a 	bl	800552c <vAssertCalled>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a18:	f002 fa64 	bl	8002ee4 <ulSetInterruptMaskFromISR>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a24:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d263      	bcs.n	8000af8 <MyWrapper_xQueueGiveFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000a30:	2317      	movs	r3, #23
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	6a3a      	ldr	r2, [r7, #32]
 8000a36:	2145      	movs	r1, #69	@ 0x45
 8000a38:	5c52      	ldrb	r2, [r2, r1]
 8000a3a:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	224c      	movs	r2, #76	@ 0x4c
 8000a40:	5c9b      	ldrb	r3, [r3, r2]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <MyWrapper_xQueueGiveFromISR+0x94>
 8000a46:	db19      	blt.n	8000a7c <MyWrapper_xQueueGiveFromISR+0xc0>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d816      	bhi.n	8000a7c <MyWrapper_xQueueGiveFromISR+0xc0>
 8000a4e:	e00d      	b.n	8000a6c <MyWrapper_xQueueGiveFromISR+0xb0>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <MyWrapper_xQueueGiveFromISR+0x9e>
 8000a56:	2059      	movs	r0, #89	@ 0x59
 8000a58:	e000      	b.n	8000a5c <MyWrapper_xQueueGiveFromISR+0xa0>
 8000a5a:	20c3      	movs	r0, #195	@ 0xc3
 8000a5c:	6a39      	ldr	r1, [r7, #32]
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a62:	3301      	adds	r3, #1
 8000a64:	001a      	movs	r2, r3
 8000a66:	f003 fa83 	bl	8003f70 <xTraceEventCreate2>
 8000a6a:	e007      	b.n	8000a7c <MyWrapper_xQueueGiveFromISR+0xc0>
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a72:	3301      	adds	r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	205a      	movs	r0, #90	@ 0x5a
 8000a78:	f003 fa7a 	bl	8003f70 <xTraceEventCreate2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000a84:	2317      	movs	r3, #23
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	d111      	bne.n	8000ab4 <MyWrapper_xQueueGiveFromISR+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d02c      	beq.n	8000af2 <MyWrapper_xQueueGiveFromISR+0x136>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	3324      	adds	r3, #36	@ 0x24
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f001 fab9 	bl	8002014 <xTaskRemoveFromEventList>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d025      	beq.n	8000af2 <MyWrapper_xQueueGiveFromISR+0x136>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d022      	beq.n	8000af2 <MyWrapper_xQueueGiveFromISR+0x136>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e01e      	b.n	8000af2 <MyWrapper_xQueueGiveFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000ab4:	f001 f8b0 	bl	8001c18 <uxTaskGetNumberOfTasks>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	2117      	movs	r1, #23
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d913      	bls.n	8000af2 <MyWrapper_xQueueGiveFromISR+0x136>
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad2:	d105      	bne.n	8000ae0 <MyWrapper_xQueueGiveFromISR+0x124>
 8000ad4:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <MyWrapper_xQueueGiveFromISR+0x1a0>)
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f004 fd26 	bl	800552c <vAssertCalled>
 8000ae0:	2317      	movs	r3, #23
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b259      	sxtb	r1, r3
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	2245      	movs	r2, #69	@ 0x45
 8000af0:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000af2:	2301      	movs	r3, #1
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af6:	e01f      	b.n	8000b38 <MyWrapper_xQueueGiveFromISR+0x17c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <MyWrapper_xQueueGiveFromISR+0x150>
 8000b02:	db17      	blt.n	8000b34 <MyWrapper_xQueueGiveFromISR+0x178>
 8000b04:	3b02      	subs	r3, #2
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d814      	bhi.n	8000b34 <MyWrapper_xQueueGiveFromISR+0x178>
 8000b0a:	e00c      	b.n	8000b26 <MyWrapper_xQueueGiveFromISR+0x16a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <MyWrapper_xQueueGiveFromISR+0x15a>
 8000b12:	205c      	movs	r0, #92	@ 0x5c
 8000b14:	e000      	b.n	8000b18 <MyWrapper_xQueueGiveFromISR+0x15c>
 8000b16:	20c4      	movs	r0, #196	@ 0xc4
 8000b18:	6a39      	ldr	r1, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b1e:	001a      	movs	r2, r3
 8000b20:	f003 fa26 	bl	8003f70 <xTraceEventCreate2>
 8000b24:	e006      	b.n	8000b34 <MyWrapper_xQueueGiveFromISR+0x178>
 8000b26:	6a39      	ldr	r1, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	205d      	movs	r0, #93	@ 0x5d
 8000b30:	f003 fa1e 	bl	8003f70 <xTraceEventCreate2>
            xReturn = errQUEUE_FULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 f9d8 	bl	8002ef0 <vClearInterruptMaskFromISR>

    return xReturn;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b00a      	add	sp, #40	@ 0x28
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	000004c9 	.word	0x000004c9
 8000b50:	08006790 	.word	0x08006790
 8000b54:	000004cd 	.word	0x000004cd
 8000b58:	000004d2 	.word	0x000004d2
 8000b5c:	00000551 	.word	0x00000551

08000b60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d105      	bne.n	8000b86 <xQueueReceive+0x26>
 8000b7a:	4ab3      	ldr	r2, [pc, #716]	@ (8000e48 <xQueueReceive+0x2e8>)
 8000b7c:	4bb3      	ldr	r3, [pc, #716]	@ (8000e4c <xQueueReceive+0x2ec>)
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f004 fcd3 	bl	800552c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d103      	bne.n	8000b94 <xQueueReceive+0x34>
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <xQueueReceive+0x38>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <xQueueReceive+0x3a>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <xQueueReceive+0x4a>
 8000b9e:	4aac      	ldr	r2, [pc, #688]	@ (8000e50 <xQueueReceive+0x2f0>)
 8000ba0:	4baa      	ldr	r3, [pc, #680]	@ (8000e4c <xQueueReceive+0x2ec>)
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f004 fcc1 	bl	800552c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000baa:	f001 fbeb 	bl	8002384 <xTaskGetSchedulerState>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d102      	bne.n	8000bb8 <xQueueReceive+0x58>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <xQueueReceive+0x5c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <xQueueReceive+0x5e>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d105      	bne.n	8000bce <xQueueReceive+0x6e>
 8000bc2:	4aa4      	ldr	r2, [pc, #656]	@ (8000e54 <xQueueReceive+0x2f4>)
 8000bc4:	4ba1      	ldr	r3, [pc, #644]	@ (8000e4c <xQueueReceive+0x2ec>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f004 fcaf 	bl	800552c <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bce:	f002 f957 	bl	8002e80 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d048      	beq.n	8000c70 <xQueueReceive+0x110>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fb54 	bl	8001292 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	224c      	movs	r2, #76	@ 0x4c
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d022      	beq.n	8000c3a <xQueueReceive+0xda>
 8000bf4:	dc27      	bgt.n	8000c46 <xQueueReceive+0xe6>
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	dc25      	bgt.n	8000c46 <xQueueReceive+0xe6>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	da0d      	bge.n	8000c1a <xQueueReceive+0xba>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <xQueueReceive+0xa8>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d012      	beq.n	8000c2c <xQueueReceive+0xcc>
 8000c06:	e01e      	b.n	8000c46 <xQueueReceive+0xe6>
 8000c08:	6a39      	ldr	r1, [r7, #32]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c10:	3b01      	subs	r3, #1
 8000c12:	2060      	movs	r0, #96	@ 0x60
 8000c14:	f003 fa28 	bl	8004068 <xTraceEventCreate3>
 8000c18:	e015      	b.n	8000c46 <xQueueReceive+0xe6>
 8000c1a:	6a39      	ldr	r1, [r7, #32]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c22:	3b01      	subs	r3, #1
 8000c24:	2061      	movs	r0, #97	@ 0x61
 8000c26:	f003 fa1f 	bl	8004068 <xTraceEventCreate3>
 8000c2a:	e00c      	b.n	8000c46 <xQueueReceive+0xe6>
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	0019      	movs	r1, r3
 8000c32:	2062      	movs	r0, #98	@ 0x62
 8000c34:	f003 f99c 	bl	8003f70 <xTraceEventCreate2>
 8000c38:	e005      	b.n	8000c46 <xQueueReceive+0xe6>
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	20c7      	movs	r0, #199	@ 0xc7
 8000c42:	f003 f995 	bl	8003f70 <xTraceEventCreate2>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d008      	beq.n	8000c68 <xQueueReceive+0x108>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	3310      	adds	r3, #16
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 f9da 	bl	8002014 <xTaskRemoveFromEventList>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <xQueueReceive+0x108>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c64:	f002 f8fc 	bl	8002e60 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c68:	f002 f91c 	bl	8002ea4 <vPortExitCritical>
                return pdPASS;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e0e7      	b.n	8000e40 <xQueueReceive+0x2e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d12f      	bne.n	8000cd6 <xQueueReceive+0x176>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c76:	f002 f915 	bl	8002ea4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	224c      	movs	r2, #76	@ 0x4c
 8000c7e:	5c9b      	ldrb	r3, [r3, r2]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d020      	beq.n	8000cc6 <xQueueReceive+0x166>
 8000c84:	dc25      	bgt.n	8000cd2 <xQueueReceive+0x172>
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	dc23      	bgt.n	8000cd2 <xQueueReceive+0x172>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	da0c      	bge.n	8000ca8 <xQueueReceive+0x148>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <xQueueReceive+0x138>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d010      	beq.n	8000cb8 <xQueueReceive+0x158>
 8000c96:	e01c      	b.n	8000cd2 <xQueueReceive+0x172>
 8000c98:	6a39      	ldr	r1, [r7, #32]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ca0:	2063      	movs	r0, #99	@ 0x63
 8000ca2:	f003 f9e1 	bl	8004068 <xTraceEventCreate3>
 8000ca6:	e014      	b.n	8000cd2 <xQueueReceive+0x172>
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cb0:	2064      	movs	r0, #100	@ 0x64
 8000cb2:	f003 f9d9 	bl	8004068 <xTraceEventCreate3>
 8000cb6:	e00c      	b.n	8000cd2 <xQueueReceive+0x172>
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	2065      	movs	r0, #101	@ 0x65
 8000cc0:	f003 f956 	bl	8003f70 <xTraceEventCreate2>
 8000cc4:	e005      	b.n	8000cd2 <xQueueReceive+0x172>
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	0019      	movs	r1, r3
 8000ccc:	20c8      	movs	r0, #200	@ 0xc8
 8000cce:	f003 f94f 	bl	8003f70 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e0b4      	b.n	8000e40 <xQueueReceive+0x2e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d106      	bne.n	8000cea <xQueueReceive+0x18a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cdc:	2314      	movs	r3, #20
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fa6f 	bl	80021c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cea:	f002 f8db 	bl	8002ea4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cee:	f000 fe83 	bl	80019f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cf2:	f002 f8c5 	bl	8002e80 <vPortEnterCritical>
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	2244      	movs	r2, #68	@ 0x44
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d103      	bne.n	8000d0a <xQueueReceive+0x1aa>
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	2244      	movs	r2, #68	@ 0x44
 8000d06:	2100      	movs	r1, #0
 8000d08:	5499      	strb	r1, [r3, r2]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	2245      	movs	r2, #69	@ 0x45
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	d103      	bne.n	8000d1e <xQueueReceive+0x1be>
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	2245      	movs	r2, #69	@ 0x45
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	5499      	strb	r1, [r3, r2]
 8000d1e:	f002 f8c1 	bl	8002ea4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d22:	1d3a      	adds	r2, r7, #4
 8000d24:	2314      	movs	r3, #20
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 fa5e 	bl	80021ec <xTaskCheckForTimeOut>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d14b      	bne.n	8000dcc <xQueueReceive+0x26c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fb2f 	bl	800139a <prvIsQueueEmpty>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d03e      	beq.n	8000dbe <xQueueReceive+0x25e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	224c      	movs	r2, #76	@ 0x4c
 8000d44:	5c9b      	ldrb	r3, [r3, r2]
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d020      	beq.n	8000d8c <xQueueReceive+0x22c>
 8000d4a:	dc25      	bgt.n	8000d98 <xQueueReceive+0x238>
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dc23      	bgt.n	8000d98 <xQueueReceive+0x238>
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	da0c      	bge.n	8000d6e <xQueueReceive+0x20e>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <xQueueReceive+0x1fe>
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d010      	beq.n	8000d7e <xQueueReceive+0x21e>
 8000d5c:	e01c      	b.n	8000d98 <xQueueReceive+0x238>
 8000d5e:	6a39      	ldr	r1, [r7, #32]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d66:	2066      	movs	r0, #102	@ 0x66
 8000d68:	f003 f97e 	bl	8004068 <xTraceEventCreate3>
 8000d6c:	e014      	b.n	8000d98 <xQueueReceive+0x238>
 8000d6e:	6a39      	ldr	r1, [r7, #32]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d76:	2067      	movs	r0, #103	@ 0x67
 8000d78:	f003 f976 	bl	8004068 <xTraceEventCreate3>
 8000d7c:	e00c      	b.n	8000d98 <xQueueReceive+0x238>
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	0019      	movs	r1, r3
 8000d84:	2068      	movs	r0, #104	@ 0x68
 8000d86:	f003 f8f3 	bl	8003f70 <xTraceEventCreate2>
 8000d8a:	e005      	b.n	8000d98 <xQueueReceive+0x238>
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	0019      	movs	r1, r3
 8000d92:	20f6      	movs	r0, #246	@ 0xf6
 8000d94:	f003 f8ec 	bl	8003f70 <xTraceEventCreate2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	3324      	adds	r3, #36	@ 0x24
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 f8c1 	bl	8001f28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fa98 	bl	80012de <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000dae:	f000 fe2f 	bl	8001a10 <xTaskResumeAll>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d000      	beq.n	8000db8 <xQueueReceive+0x258>
 8000db6:	e70a      	b.n	8000bce <xQueueReceive+0x6e>
                {
                    portYIELD_WITHIN_API();
 8000db8:	f002 f852 	bl	8002e60 <vPortYield>
 8000dbc:	e707      	b.n	8000bce <xQueueReceive+0x6e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fa8c 	bl	80012de <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dc6:	f000 fe23 	bl	8001a10 <xTaskResumeAll>
 8000dca:	e700      	b.n	8000bce <xQueueReceive+0x6e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 fa85 	bl	80012de <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dd4:	f000 fe1c 	bl	8001a10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fadd 	bl	800139a <prvIsQueueEmpty>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d100      	bne.n	8000de6 <xQueueReceive+0x286>
 8000de4:	e6f3      	b.n	8000bce <xQueueReceive+0x6e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	224c      	movs	r2, #76	@ 0x4c
 8000dea:	5c9b      	ldrb	r3, [r3, r2]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d020      	beq.n	8000e32 <xQueueReceive+0x2d2>
 8000df0:	dc25      	bgt.n	8000e3e <xQueueReceive+0x2de>
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	dc23      	bgt.n	8000e3e <xQueueReceive+0x2de>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	da0c      	bge.n	8000e14 <xQueueReceive+0x2b4>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <xQueueReceive+0x2a4>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d010      	beq.n	8000e24 <xQueueReceive+0x2c4>
 8000e02:	e01c      	b.n	8000e3e <xQueueReceive+0x2de>
 8000e04:	6a39      	ldr	r1, [r7, #32]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0c:	2063      	movs	r0, #99	@ 0x63
 8000e0e:	f003 f92b 	bl	8004068 <xTraceEventCreate3>
 8000e12:	e014      	b.n	8000e3e <xQueueReceive+0x2de>
 8000e14:	6a39      	ldr	r1, [r7, #32]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f003 f923 	bl	8004068 <xTraceEventCreate3>
 8000e22:	e00c      	b.n	8000e3e <xQueueReceive+0x2de>
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	2065      	movs	r0, #101	@ 0x65
 8000e2c:	f003 f8a0 	bl	8003f70 <xTraceEventCreate2>
 8000e30:	e005      	b.n	8000e3e <xQueueReceive+0x2de>
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	0019      	movs	r1, r3
 8000e38:	20c8      	movs	r0, #200	@ 0xc8
 8000e3a:	f003 f899 	bl	8003f70 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000e3e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b00a      	add	sp, #40	@ 0x28
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	0000056b 	.word	0x0000056b
 8000e4c:	08006790 	.word	0x08006790
 8000e50:	0000056f 	.word	0x0000056f
 8000e54:	00000574 	.word	0x00000574

08000e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d105      	bne.n	8000e80 <xQueueSemaphoreTake+0x28>
 8000e74:	4abc      	ldr	r2, [pc, #752]	@ (8001168 <xQueueSemaphoreTake+0x310>)
 8000e76:	4bbd      	ldr	r3, [pc, #756]	@ (800116c <xQueueSemaphoreTake+0x314>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f004 fb56 	bl	800552c <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <xQueueSemaphoreTake+0x3c>
 8000e88:	4ab9      	ldr	r2, [pc, #740]	@ (8001170 <xQueueSemaphoreTake+0x318>)
 8000e8a:	4bb8      	ldr	r3, [pc, #736]	@ (800116c <xQueueSemaphoreTake+0x314>)
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f004 fb4c 	bl	800552c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e94:	f001 fa76 	bl	8002384 <xTaskGetSchedulerState>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d102      	bne.n	8000ea2 <xQueueSemaphoreTake+0x4a>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <xQueueSemaphoreTake+0x4e>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <xQueueSemaphoreTake+0x50>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <xQueueSemaphoreTake+0x60>
 8000eac:	4ab1      	ldr	r2, [pc, #708]	@ (8001174 <xQueueSemaphoreTake+0x31c>)
 8000eae:	4baf      	ldr	r3, [pc, #700]	@ (800116c <xQueueSemaphoreTake+0x314>)
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f004 fb3a 	bl	800552c <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000eb8:	f001 ffe2 	bl	8002e80 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec0:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d04b      	beq.n	8000f60 <xQueueSemaphoreTake+0x108>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	224c      	movs	r2, #76	@ 0x4c
 8000ecc:	5c9b      	ldrb	r3, [r3, r2]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d022      	beq.n	8000f18 <xQueueSemaphoreTake+0xc0>
 8000ed2:	dc27      	bgt.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	dc25      	bgt.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	da0d      	bge.n	8000ef8 <xQueueSemaphoreTake+0xa0>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <xQueueSemaphoreTake+0x8e>
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d012      	beq.n	8000f0a <xQueueSemaphoreTake+0xb2>
 8000ee4:	e01e      	b.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000ee6:	69f9      	ldr	r1, [r7, #28]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	2060      	movs	r0, #96	@ 0x60
 8000ef2:	f003 f8b9 	bl	8004068 <xTraceEventCreate3>
 8000ef6:	e015      	b.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000ef8:	69f9      	ldr	r1, [r7, #28]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f00:	3b01      	subs	r3, #1
 8000f02:	2061      	movs	r0, #97	@ 0x61
 8000f04:	f003 f8b0 	bl	8004068 <xTraceEventCreate3>
 8000f08:	e00c      	b.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	2062      	movs	r0, #98	@ 0x62
 8000f12:	f003 f82d 	bl	8003f70 <xTraceEventCreate2>
 8000f16:	e005      	b.n	8000f24 <xQueueSemaphoreTake+0xcc>
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	20c7      	movs	r0, #199	@ 0xc7
 8000f20:	f003 f826 	bl	8003f70 <xTraceEventCreate2>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <xQueueSemaphoreTake+0xe6>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000f34:	f001 fc2a 	bl	800278c <pvTaskIncrementMutexHeldCount>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <xQueueSemaphoreTake+0x100>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3310      	adds	r3, #16
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 f862 	bl	8002014 <xTaskRemoveFromEventList>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <xQueueSemaphoreTake+0x100>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f54:	f001 ff84 	bl	8002e60 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f58:	f001 ffa4 	bl	8002ea4 <vPortExitCritical>
                return pdPASS;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e112      	b.n	8001186 <xQueueSemaphoreTake+0x32e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d12f      	bne.n	8000fc6 <xQueueSemaphoreTake+0x16e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000f66:	f001 ff9d 	bl	8002ea4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	224c      	movs	r2, #76	@ 0x4c
 8000f6e:	5c9b      	ldrb	r3, [r3, r2]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d020      	beq.n	8000fb6 <xQueueSemaphoreTake+0x15e>
 8000f74:	dc25      	bgt.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	dc23      	bgt.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	da0c      	bge.n	8000f98 <xQueueSemaphoreTake+0x140>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <xQueueSemaphoreTake+0x130>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d010      	beq.n	8000fa8 <xQueueSemaphoreTake+0x150>
 8000f86:	e01c      	b.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000f88:	69f9      	ldr	r1, [r7, #28]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f90:	2063      	movs	r0, #99	@ 0x63
 8000f92:	f003 f869 	bl	8004068 <xTraceEventCreate3>
 8000f96:	e014      	b.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000f98:	69f9      	ldr	r1, [r7, #28]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa0:	2064      	movs	r0, #100	@ 0x64
 8000fa2:	f003 f861 	bl	8004068 <xTraceEventCreate3>
 8000fa6:	e00c      	b.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	0019      	movs	r1, r3
 8000fae:	2065      	movs	r0, #101	@ 0x65
 8000fb0:	f002 ffde 	bl	8003f70 <xTraceEventCreate2>
 8000fb4:	e005      	b.n	8000fc2 <xQueueSemaphoreTake+0x16a>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	0019      	movs	r1, r3
 8000fbc:	20c8      	movs	r0, #200	@ 0xc8
 8000fbe:	f002 ffd7 	bl	8003f70 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e0df      	b.n	8001186 <xQueueSemaphoreTake+0x32e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d106      	bne.n	8000fda <xQueueSemaphoreTake+0x182>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fcc:	230c      	movs	r3, #12
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 f8f7 	bl	80021c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000fda:	f001 ff63 	bl	8002ea4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000fde:	f000 fd0b 	bl	80019f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000fe2:	f001 ff4d 	bl	8002e80 <vPortEnterCritical>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2244      	movs	r2, #68	@ 0x44
 8000fea:	5c9b      	ldrb	r3, [r3, r2]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <xQueueSemaphoreTake+0x1a2>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	2244      	movs	r2, #68	@ 0x44
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5499      	strb	r1, [r3, r2]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	2245      	movs	r2, #69	@ 0x45
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	d103      	bne.n	800100e <xQueueSemaphoreTake+0x1b6>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2245      	movs	r2, #69	@ 0x45
 800100a:	2100      	movs	r1, #0
 800100c:	5499      	strb	r1, [r3, r2]
 800100e:	f001 ff49 	bl	8002ea4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001012:	003a      	movs	r2, r7
 8001014:	230c      	movs	r3, #12
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f001 f8e6 	bl	80021ec <xTaskCheckForTimeOut>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d15a      	bne.n	80010da <xQueueSemaphoreTake+0x282>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f9b7 	bl	800139a <prvIsQueueEmpty>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d04d      	beq.n	80010cc <xQueueSemaphoreTake+0x274>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	224c      	movs	r2, #76	@ 0x4c
 8001034:	5c9b      	ldrb	r3, [r3, r2]
 8001036:	2b04      	cmp	r3, #4
 8001038:	d020      	beq.n	800107c <xQueueSemaphoreTake+0x224>
 800103a:	dc25      	bgt.n	8001088 <xQueueSemaphoreTake+0x230>
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc23      	bgt.n	8001088 <xQueueSemaphoreTake+0x230>
 8001040:	2b02      	cmp	r3, #2
 8001042:	da0c      	bge.n	800105e <xQueueSemaphoreTake+0x206>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <xQueueSemaphoreTake+0x1f6>
 8001048:	2b01      	cmp	r3, #1
 800104a:	d010      	beq.n	800106e <xQueueSemaphoreTake+0x216>
 800104c:	e01c      	b.n	8001088 <xQueueSemaphoreTake+0x230>
 800104e:	69f9      	ldr	r1, [r7, #28]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	2066      	movs	r0, #102	@ 0x66
 8001058:	f003 f806 	bl	8004068 <xTraceEventCreate3>
 800105c:	e014      	b.n	8001088 <xQueueSemaphoreTake+0x230>
 800105e:	69f9      	ldr	r1, [r7, #28]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	2067      	movs	r0, #103	@ 0x67
 8001068:	f002 fffe 	bl	8004068 <xTraceEventCreate3>
 800106c:	e00c      	b.n	8001088 <xQueueSemaphoreTake+0x230>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	0019      	movs	r1, r3
 8001074:	2068      	movs	r0, #104	@ 0x68
 8001076:	f002 ff7b 	bl	8003f70 <xTraceEventCreate2>
 800107a:	e005      	b.n	8001088 <xQueueSemaphoreTake+0x230>
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	0019      	movs	r1, r3
 8001082:	20f6      	movs	r0, #246	@ 0xf6
 8001084:	f002 ff74 	bl	8003f70 <xTraceEventCreate2>

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10a      	bne.n	80010a6 <xQueueSemaphoreTake+0x24e>
                    {
                        taskENTER_CRITICAL();
 8001090:	f001 fef6 	bl	8002e80 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	0018      	movs	r0, r3
 800109a:	f001 f98f 	bl	80023bc <xTaskPriorityInherit>
 800109e:	0003      	movs	r3, r0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                        taskEXIT_CRITICAL();
 80010a2:	f001 feff 	bl	8002ea4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3324      	adds	r3, #36	@ 0x24
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 ff3a 	bl	8001f28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 f911 	bl	80012de <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80010bc:	f000 fca8 	bl	8001a10 <xTaskResumeAll>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d000      	beq.n	80010c6 <xQueueSemaphoreTake+0x26e>
 80010c4:	e6f8      	b.n	8000eb8 <xQueueSemaphoreTake+0x60>
                {
                    portYIELD_WITHIN_API();
 80010c6:	f001 fecb 	bl	8002e60 <vPortYield>
 80010ca:	e6f5      	b.n	8000eb8 <xQueueSemaphoreTake+0x60>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f905 	bl	80012de <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80010d4:	f000 fc9c 	bl	8001a10 <xTaskResumeAll>
 80010d8:	e6ee      	b.n	8000eb8 <xQueueSemaphoreTake+0x60>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 f8fe 	bl	80012de <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80010e2:	f000 fc95 	bl	8001a10 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 f956 	bl	800139a <prvIsQueueEmpty>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d100      	bne.n	80010f4 <xQueueSemaphoreTake+0x29c>
 80010f2:	e6e1      	b.n	8000eb8 <xQueueSemaphoreTake+0x60>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d010      	beq.n	800111c <xQueueSemaphoreTake+0x2c4>
                    {
                        taskENTER_CRITICAL();
 80010fa:	f001 fec1 	bl	8002e80 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	0018      	movs	r0, r3
 8001102:	f000 f845 	bl	8001190 <prvGetDisinheritPriorityAfterTimeout>
 8001106:	0003      	movs	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fa8a 	bl	800262c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001118:	f001 fec4 	bl	8002ea4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	224c      	movs	r2, #76	@ 0x4c
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	2b04      	cmp	r3, #4
 8001124:	d028      	beq.n	8001178 <xQueueSemaphoreTake+0x320>
 8001126:	dc2d      	bgt.n	8001184 <xQueueSemaphoreTake+0x32c>
 8001128:	2b03      	cmp	r3, #3
 800112a:	dc2b      	bgt.n	8001184 <xQueueSemaphoreTake+0x32c>
 800112c:	2b02      	cmp	r3, #2
 800112e:	da0c      	bge.n	800114a <xQueueSemaphoreTake+0x2f2>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <xQueueSemaphoreTake+0x2e2>
 8001134:	2b01      	cmp	r3, #1
 8001136:	d010      	beq.n	800115a <xQueueSemaphoreTake+0x302>
 8001138:	e024      	b.n	8001184 <xQueueSemaphoreTake+0x32c>
 800113a:	69f9      	ldr	r1, [r7, #28]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001142:	2063      	movs	r0, #99	@ 0x63
 8001144:	f002 ff90 	bl	8004068 <xTraceEventCreate3>
 8001148:	e01c      	b.n	8001184 <xQueueSemaphoreTake+0x32c>
 800114a:	69f9      	ldr	r1, [r7, #28]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001152:	2064      	movs	r0, #100	@ 0x64
 8001154:	f002 ff88 	bl	8004068 <xTraceEventCreate3>
 8001158:	e014      	b.n	8001184 <xQueueSemaphoreTake+0x32c>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	0019      	movs	r1, r3
 8001160:	2065      	movs	r0, #101	@ 0x65
 8001162:	f002 ff05 	bl	8003f70 <xTraceEventCreate2>
 8001166:	e00d      	b.n	8001184 <xQueueSemaphoreTake+0x32c>
 8001168:	000005fd 	.word	0x000005fd
 800116c:	08006790 	.word	0x08006790
 8001170:	00000601 	.word	0x00000601
 8001174:	00000606 	.word	0x00000606
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	0019      	movs	r1, r3
 800117e:	20c8      	movs	r0, #200	@ 0xc8
 8001180:	f002 fef6 	bl	8003f70 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8001184:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b00a      	add	sp, #40	@ 0x28
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)

08001190 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2205      	movs	r2, #5
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e001      	b.n	80011b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80011b2:	68fb      	ldr	r3, [r7, #12]
    }
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b004      	add	sp, #16
 80011ba:	bd80      	pop	{r7, pc}

080011bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10e      	bne.n	80011f8 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d14e      	bne.n	8001280 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f984 	bl	80024f4 <xTaskPriorityDisinherit>
 80011ec:	0003      	movs	r3, r0
 80011ee:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e043      	b.n	8001280 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6858      	ldr	r0, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	0019      	movs	r1, r3
 800120a:	f005 faab 	bl	8006764 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	429a      	cmp	r2, r3
 8001226:	d32b      	bcc.n	8001280 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	e026      	b.n	8001280 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68d8      	ldr	r0, [r3, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0019      	movs	r1, r3
 800123e:	f005 fa91 	bl	8006764 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	425b      	negs	r3, r3
 800124c:	18d2      	adds	r2, r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d207      	bcs.n	800126e <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	425b      	negs	r3, r3
 8001268:	18d2      	adds	r2, r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d105      	bne.n	8001280 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	3b01      	subs	r3, #1
 800127e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8001288:	697b      	ldr	r3, [r7, #20]
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b006      	add	sp, #24
 8001290:	bd80      	pop	{r7, pc}

08001292 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d018      	beq.n	80012d6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	18d2      	adds	r2, r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d303      	bcc.n	80012c6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f005 fa47 	bl	8006764 <memcpy>
    }
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80012e6:	f001 fdcb 	bl	8002e80 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80012ea:	230f      	movs	r3, #15
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	2145      	movs	r1, #69	@ 0x45
 80012f2:	5c52      	ldrb	r2, [r2, r1]
 80012f4:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80012f6:	e013      	b.n	8001320 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d016      	beq.n	800132e <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3324      	adds	r3, #36	@ 0x24
 8001304:	0018      	movs	r0, r3
 8001306:	f000 fe85 	bl	8002014 <xTaskRemoveFromEventList>
 800130a:	1e03      	subs	r3, r0, #0
 800130c:	d001      	beq.n	8001312 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800130e:	f000 ffc7 	bl	80022a0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001312:	210f      	movs	r1, #15
 8001314:	187b      	adds	r3, r7, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	187b      	adds	r3, r7, r1
 800131e:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001320:	230f      	movs	r3, #15
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	dce5      	bgt.n	80012f8 <prvUnlockQueue+0x1a>
 800132c:	e000      	b.n	8001330 <prvUnlockQueue+0x52>
                    break;
 800132e:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2245      	movs	r2, #69	@ 0x45
 8001334:	21ff      	movs	r1, #255	@ 0xff
 8001336:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001338:	f001 fdb4 	bl	8002ea4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800133c:	f001 fda0 	bl	8002e80 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001340:	230e      	movs	r3, #14
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	2144      	movs	r1, #68	@ 0x44
 8001348:	5c52      	ldrb	r2, [r2, r1]
 800134a:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800134c:	e013      	b.n	8001376 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d016      	beq.n	8001384 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3310      	adds	r3, #16
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fe5a 	bl	8002014 <xTaskRemoveFromEventList>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001364:	f000 ff9c 	bl	80022a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001368:	210e      	movs	r1, #14
 800136a:	187b      	adds	r3, r7, r1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3b01      	subs	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	187b      	adds	r3, r7, r1
 8001374:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001376:	230e      	movs	r3, #14
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	dce5      	bgt.n	800134e <prvUnlockQueue+0x70>
 8001382:	e000      	b.n	8001386 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001384:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2244      	movs	r2, #68	@ 0x44
 800138a:	21ff      	movs	r1, #255	@ 0xff
 800138c:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800138e:	f001 fd89 	bl	8002ea4 <vPortExitCritical>
}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}

0800139a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80013a2:	f001 fd6d 	bl	8002e80 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e001      	b.n	80013b8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80013b8:	f001 fd74 	bl	8002ea4 <vPortExitCritical>

    return xReturn;
 80013bc:	68fb      	ldr	r3, [r7, #12]
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80013ce:	f001 fd57 	bl	8002e80 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013da:	429a      	cmp	r2, r3
 80013dc:	d102      	bne.n	80013e4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	e001      	b.n	80013e8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80013e8:	f001 fd5c 	bl	8002ea4 <vPortExitCritical>

    return xReturn;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <vQueueAddToRegistry+0x20>
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <vQueueAddToRegistry+0x98>)
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <vQueueAddToRegistry+0x9c>)
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f004 f88a 	bl	800552c <vAssertCalled>

        if( pcQueueName != NULL )
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d025      	beq.n	800146a <vQueueAddToRegistry+0x72>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e01f      	b.n	8001464 <vQueueAddToRegistry+0x6c>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001424:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <vQueueAddToRegistry+0xa0>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	3304      	adds	r3, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d105      	bne.n	8001442 <vQueueAddToRegistry+0x4a>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	00da      	lsls	r2, r3, #3
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <vQueueAddToRegistry+0xa0>)
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	60bb      	str	r3, [r7, #8]
                    break;
 8001440:	e013      	b.n	800146a <vQueueAddToRegistry+0x72>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10a      	bne.n	800145e <vQueueAddToRegistry+0x66>
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <vQueueAddToRegistry+0xa0>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	58d3      	ldr	r3, [r2, r3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d104      	bne.n	800145e <vQueueAddToRegistry+0x66>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	00da      	lsls	r2, r3, #3
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <vQueueAddToRegistry+0xa0>)
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b09      	cmp	r3, #9
 8001468:	d9dc      	bls.n	8001424 <vQueueAddToRegistry+0x2c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0011      	movs	r1, r2
 8001482:	0018      	movs	r0, r3
 8001484:	f003 fa85 	bl	8004992 <xTraceObjectSetNameWithoutHandle>
        }
    }
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}
 8001490:	00000ad8 	.word	0x00000ad8
 8001494:	08006790 	.word	0x08006790
 8001498:	20000028 	.word	0x20000028

0800149c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80014ac:	f001 fce8 	bl	8002e80 <vPortEnterCritical>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2244      	movs	r2, #68	@ 0x44
 80014b4:	5c9b      	ldrb	r3, [r3, r2]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	d103      	bne.n	80014c4 <vQueueWaitForMessageRestricted+0x28>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2244      	movs	r2, #68	@ 0x44
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2245      	movs	r2, #69	@ 0x45
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	d103      	bne.n	80014d8 <vQueueWaitForMessageRestricted+0x3c>
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2245      	movs	r2, #69	@ 0x45
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]
 80014d8:	f001 fce4 	bl	8002ea4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d106      	bne.n	80014f2 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3324      	adds	r3, #36	@ 0x24
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 fd41 	bl	8001f74 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fef2 	bl	80012de <prvUnlockQueue>
    }
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b006      	add	sp, #24
 8001500:	bd80      	pop	{r7, pc}

08001502 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001502:	b590      	push	{r4, r7, lr}
 8001504:	b08d      	sub	sp, #52	@ 0x34
 8001506:	af04      	add	r7, sp, #16
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001512:	1dbb      	adds	r3, r7, #6
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fd51 	bl	8002fc0 <pvPortMalloc>
 800151e:	0003      	movs	r3, r0
 8001520:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d016      	beq.n	8001556 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001528:	2060      	movs	r0, #96	@ 0x60
 800152a:	f001 fd49 	bl	8002fc0 <pvPortMalloc>
 800152e:	0003      	movs	r3, r0
 8001530:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2260      	movs	r2, #96	@ 0x60
 800153c:	2100      	movs	r1, #0
 800153e:	0018      	movs	r0, r3
 8001540:	f005 f8e4 	bl	800670c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30
 800154a:	e006      	b.n	800155a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	0018      	movs	r0, r3
 8001550:	f001 fd9e 	bl	8003090 <vPortFree>
 8001554:	e001      	b.n	800155a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d016      	beq.n	800158e <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	683c      	ldr	r4, [r7, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	9303      	str	r3, [sp, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	0023      	movs	r3, r4
 800157c:	f000 f810 	bl	80015a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	0018      	movs	r0, r3
 8001584:	f000 f89a 	bl	80016bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	e002      	b.n	8001594 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800158e:	2301      	movs	r3, #1
 8001590:	425b      	negs	r3, r3
 8001592:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001594:	69bb      	ldr	r3, [r7, #24]
    }
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b009      	add	sp, #36	@ 0x24
 800159c:	bd90      	pop	{r4, r7, pc}
	...

080015a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	001a      	movs	r2, r3
 80015b8:	21a5      	movs	r1, #165	@ 0xa5
 80015ba:	f005 f8a7 	bl	800670c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4939      	ldr	r1, [pc, #228]	@ (80016ac <prvInitialiseNewTask+0x10c>)
 80015c6:	468c      	mov	ip, r1
 80015c8:	4463      	add	r3, ip
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4393      	bics	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2207      	movs	r2, #7
 80015dc:	4013      	ands	r3, r2
 80015de:	d005      	beq.n	80015ec <prvInitialiseNewTask+0x4c>
 80015e0:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <prvInitialiseNewTask+0x110>)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <prvInitialiseNewTask+0x114>)
 80015e4:	0011      	movs	r1, r2
 80015e6:	0018      	movs	r0, r3
 80015e8:	f003 ffa0 	bl	800552c <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01f      	beq.n	8001632 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e013      	b.n	8001620 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	7818      	ldrb	r0, [r3, #0]
 8001600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001602:	2134      	movs	r1, #52	@ 0x34
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	18d3      	adds	r3, r2, r3
 8001608:	185b      	adds	r3, r3, r1
 800160a:	1c02      	adds	r2, r0, #0
 800160c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	18d3      	adds	r3, r2, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d9e8      	bls.n	80015f8 <prvInitialiseNewTask+0x58>
 8001626:	e000      	b.n	800162a <prvInitialiseNewTask+0x8a>
            {
                break;
 8001628:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	2243      	movs	r2, #67	@ 0x43
 800162e:	2100      	movs	r1, #0
 8001630:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d905      	bls.n	8001644 <prvInitialiseNewTask+0xa4>
 8001638:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <prvInitialiseNewTask+0x118>)
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <prvInitialiseNewTask+0x114>)
 800163c:	0011      	movs	r1, r2
 800163e:	0018      	movs	r0, r3
 8001640:	f003 ff74 	bl	800552c <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2b04      	cmp	r3, #4
 8001648:	d901      	bls.n	800164e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800164a:	2304      	movs	r3, #4
 800164c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	6a3a      	ldr	r2, [r7, #32]
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800165a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165c:	3304      	adds	r3, #4
 800165e:	0018      	movs	r0, r3
 8001660:	f7fe fdfc 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001666:	3318      	adds	r3, #24
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fdf7 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001672:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	2205      	movs	r2, #5
 8001678:	1ad2      	subs	r2, r2, r3
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fb56 	bl	8002d3c <pxPortInitialiseStack>
 8001690:	0002      	movs	r2, r0
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <prvInitialiseNewTask+0x102>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b006      	add	sp, #24
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	3fffffff 	.word	0x3fffffff
 80016b0:	0000035d 	.word	0x0000035d
 80016b4:	080067a8 	.word	0x080067a8
 80016b8:	00000392 	.word	0x00000392

080016bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80016c4:	f001 fbdc 	bl	8002e80 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80016c8:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <prvAddNewTaskToReadyList+0x12c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <prvAddNewTaskToReadyList+0x12c>)
 80016d0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80016d2:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <prvAddNewTaskToReadyList+0x130>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80016da:	4b44      	ldr	r3, [pc, #272]	@ (80017ec <prvAddNewTaskToReadyList+0x130>)
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016e0:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <prvAddNewTaskToReadyList+0x12c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d110      	bne.n	800170a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80016e8:	f000 fdf4 	bl	80022d4 <prvInitialiseTaskLists>
 80016ec:	e00d      	b.n	800170a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80016ee:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <prvAddNewTaskToReadyList+0x134>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016f6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <prvAddNewTaskToReadyList+0x130>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	429a      	cmp	r2, r3
 8001702:	d802      	bhi.n	800170a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001704:	4b39      	ldr	r3, [pc, #228]	@ (80017ec <prvAddNewTaskToReadyList+0x130>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800170a:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <prvAddNewTaskToReadyList+0x138>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <prvAddNewTaskToReadyList+0x138>)
 8001712:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001714:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <prvAddNewTaskToReadyList+0x138>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <prvAddNewTaskToReadyList+0x7e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <prvAddNewTaskToReadyList+0x7e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3334      	adds	r3, #52	@ 0x34
 800172c:	001a      	movs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	2010      	movs	r0, #16
 8001736:	f003 f913 	bl	8004960 <xTraceObjectRegisterWithoutHandle>

        prvAddTaskToReadyList( pxNewTCB );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0019      	movs	r1, r3
 800173e:	2030      	movs	r0, #48	@ 0x30
 8001740:	f002 fb9e 	bl	8003e80 <xTraceEventCreate1>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <prvAddNewTaskToReadyList+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d903      	bls.n	8001758 <prvAddNewTaskToReadyList+0x9c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <prvAddNewTaskToReadyList+0x13c>)
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800175c:	4927      	ldr	r1, [pc, #156]	@ (80017fc <prvAddNewTaskToReadyList+0x140>)
 800175e:	0013      	movs	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	189b      	adds	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	18cb      	adds	r3, r1, r3
 8001768:	3304      	adds	r3, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	3204      	adds	r2, #4
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	1d1a      	adds	r2, r3, #4
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001792:	0013      	movs	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	189b      	adds	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <prvAddNewTaskToReadyList+0x140>)
 800179c:	189a      	adds	r2, r3, r2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a6:	4915      	ldr	r1, [pc, #84]	@ (80017fc <prvAddNewTaskToReadyList+0x140>)
 80017a8:	0013      	movs	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	189b      	adds	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	585b      	ldr	r3, [r3, r1]
 80017b2:	1c58      	adds	r0, r3, #1
 80017b4:	4911      	ldr	r1, [pc, #68]	@ (80017fc <prvAddNewTaskToReadyList+0x140>)
 80017b6:	0013      	movs	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80017c0:	f001 fb70 	bl	8002ea4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <prvAddNewTaskToReadyList+0x134>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <prvAddNewTaskToReadyList+0x122>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <prvAddNewTaskToReadyList+0x130>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d201      	bcs.n	80017de <prvAddNewTaskToReadyList+0x122>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80017da:	f001 fb41 	bl	8002e60 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	20000124 	.word	0x20000124
 80017ec:	20000078 	.word	0x20000078
 80017f0:	20000130 	.word	0x20000130
 80017f4:	20000140 	.word	0x20000140
 80017f8:	2000012c 	.word	0x2000012c
 80017fc:	2000007c 	.word	0x2000007c

08001800 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <xTaskDelayUntil+0x20>
 8001814:	4a2f      	ldr	r2, [pc, #188]	@ (80018d4 <xTaskDelayUntil+0xd4>)
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <xTaskDelayUntil+0xd8>)
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f003 fe86 	bl	800552c <vAssertCalled>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <xTaskDelayUntil+0x32>
 8001826:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <xTaskDelayUntil+0xdc>)
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <xTaskDelayUntil+0xd8>)
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f003 fe7d 	bl	800552c <vAssertCalled>
        configASSERT( uxSchedulerSuspended == 0 );
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <xTaskDelayUntil+0xe0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <xTaskDelayUntil+0x46>
 800183a:	4a2a      	ldr	r2, [pc, #168]	@ (80018e4 <xTaskDelayUntil+0xe4>)
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <xTaskDelayUntil+0xd8>)
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f003 fe73 	bl	800552c <vAssertCalled>

        vTaskSuspendAll();
 8001846:	f000 f8d7 	bl	80019f8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <xTaskDelayUntil+0xe8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	18d3      	adds	r3, r2, r3
 8001858:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d20b      	bcs.n	800187c <xTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	429a      	cmp	r2, r3
 800186c:	d211      	bcs.n	8001892 <xTaskDelayUntil+0x92>
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	429a      	cmp	r2, r3
 8001874:	d90d      	bls.n	8001892 <xTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e00a      	b.n	8001892 <xTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d303      	bcc.n	800188e <xTaskDelayUntil+0x8e>
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	429a      	cmp	r2, r3
 800188c:	d901      	bls.n	8001892 <xTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <xTaskDelayUntil+0xb6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0019      	movs	r1, r3
 80018a2:	2079      	movs	r0, #121	@ 0x79
 80018a4:	f002 faec 	bl	8003e80 <xTraceEventCreate1>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 ff7d 	bl	80027b0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80018b6:	f000 f8ab 	bl	8001a10 <xTaskResumeAll>
 80018ba:	0003      	movs	r3, r0
 80018bc:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <xTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80018c4:	f001 facc 	bl	8002e60 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80018c8:	697b      	ldr	r3, [r7, #20]
    }
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b006      	add	sp, #24
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	000004c4 	.word	0x000004c4
 80018d8:	080067a8 	.word	0x080067a8
 80018dc:	000004c5 	.word	0x000004c5
 80018e0:	2000014c 	.word	0x2000014c
 80018e4:	000004c6 	.word	0x000004c6
 80018e8:	20000128 	.word	0x20000128

080018ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d019      	beq.n	8001932 <vTaskDelay+0x46>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <vTaskDelay+0x58>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <vTaskDelay+0x26>
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <vTaskDelay+0x5c>)
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <vTaskDelay+0x60>)
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f003 fe0d 	bl	800552c <vAssertCalled>
            vTaskSuspendAll();
 8001912:	f000 f871 	bl	80019f8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0019      	movs	r1, r3
 800191a:	207a      	movs	r0, #122	@ 0x7a
 800191c:	f002 fab0 	bl	8003e80 <xTraceEventCreate1>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2100      	movs	r1, #0
 8001924:	0018      	movs	r0, r3
 8001926:	f000 ff43 	bl	80027b0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800192a:	f000 f871 	bl	8001a10 <xTaskResumeAll>
 800192e:	0003      	movs	r3, r0
 8001930:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <vTaskDelay+0x50>
        {
            portYIELD_WITHIN_API();
 8001938:	f001 fa92 	bl	8002e60 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000014c 	.word	0x2000014c
 8001948:	0000051c 	.word	0x0000051c
 800194c:	080067a8 	.word	0x080067a8

08001950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001956:	491e      	ldr	r1, [pc, #120]	@ (80019d0 <vTaskStartScheduler+0x80>)
 8001958:	481e      	ldr	r0, [pc, #120]	@ (80019d4 <vTaskStartScheduler+0x84>)
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <vTaskStartScheduler+0x88>)
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	f7ff fdcc 	bl	8001502 <xTaskCreate>
 800196a:	0003      	movs	r3, r0
 800196c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d103      	bne.n	800197c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001974:	f000 ff60 	bl	8002838 <xTimerCreateTimerTask>
 8001978:	0003      	movs	r3, r0
 800197a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d116      	bne.n	80019b0 <vTaskStartScheduler+0x60>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001982:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <vTaskStartScheduler+0x8c>)
 8001986:	2201      	movs	r2, #1
 8001988:	4252      	negs	r2, r2
 800198a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <vTaskStartScheduler+0x90>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <vTaskStartScheduler+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <vTaskStartScheduler+0x98>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <vTaskStartScheduler+0x98>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	0019      	movs	r1, r3
 80019a4:	0010      	movs	r0, r2
 80019a6:	f003 fc6f 	bl	8005288 <xTraceTaskSwitch>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80019aa:	f001 fa35 	bl	8002e18 <xPortStartScheduler>
 80019ae:	e008      	b.n	80019c2 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	d105      	bne.n	80019c2 <vTaskStartScheduler+0x72>
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <vTaskStartScheduler+0x9c>)
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <vTaskStartScheduler+0xa0>)
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f003 fdb5 	bl	800552c <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <vTaskStartScheduler+0xa4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	080067bc 	.word	0x080067bc
 80019d4:	080022b5 	.word	0x080022b5
 80019d8:	20000148 	.word	0x20000148
 80019dc:	20000144 	.word	0x20000144
 80019e0:	20000130 	.word	0x20000130
 80019e4:	20000128 	.word	0x20000128
 80019e8:	20000078 	.word	0x20000078
 80019ec:	00000812 	.word	0x00000812
 80019f0:	080067a8 	.word	0x080067a8
 80019f4:	20000000 	.word	0x20000000

080019f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <vTaskSuspendAll+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4b02      	ldr	r3, [pc, #8]	@ (8001a0c <vTaskSuspendAll+0x14>)
 8001a04:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000014c 	.word	0x2000014c

08001a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <xTaskResumeAll+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <xTaskResumeAll+0x22>
 8001a26:	4a6c      	ldr	r2, [pc, #432]	@ (8001bd8 <xTaskResumeAll+0x1c8>)
 8001a28:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <xTaskResumeAll+0x1cc>)
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f003 fd7d 	bl	800552c <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001a32:	f001 fa25 	bl	8002e80 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <xTaskResumeAll+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	4b65      	ldr	r3, [pc, #404]	@ (8001bd4 <xTaskResumeAll+0x1c4>)
 8001a3e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a40:	4b64      	ldr	r3, [pc, #400]	@ (8001bd4 <xTaskResumeAll+0x1c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d000      	beq.n	8001a4a <xTaskResumeAll+0x3a>
 8001a48:	e0bc      	b.n	8001bc4 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a4a:	4b65      	ldr	r3, [pc, #404]	@ (8001be0 <xTaskResumeAll+0x1d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d100      	bne.n	8001a54 <xTaskResumeAll+0x44>
 8001a52:	e0b7      	b.n	8001bc4 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a54:	e08e      	b.n	8001b74 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <xTaskResumeAll+0x1d4>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6a12      	ldr	r2, [r2, #32]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	69d2      	ldr	r2, [r2, #28]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3318      	adds	r3, #24
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d103      	bne.n	8001a8c <xTaskResumeAll+0x7c>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	6892      	ldr	r2, [r2, #8]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3304      	adds	r3, #4
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d103      	bne.n	8001aca <xTaskResumeAll+0xba>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	0019      	movs	r1, r3
 8001ade:	2030      	movs	r0, #48	@ 0x30
 8001ae0:	f002 f9ce 	bl	8003e80 <xTraceEventCreate1>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8001be8 <xTaskResumeAll+0x1d8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d903      	bls.n	8001af8 <xTaskResumeAll+0xe8>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af4:	4b3c      	ldr	r3, [pc, #240]	@ (8001be8 <xTaskResumeAll+0x1d8>)
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001afc:	493b      	ldr	r1, [pc, #236]	@ (8001bec <xTaskResumeAll+0x1dc>)
 8001afe:	0013      	movs	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	189b      	adds	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	18cb      	adds	r3, r1, r3
 8001b08:	3304      	adds	r3, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	3204      	adds	r2, #4
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b32:	0013      	movs	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <xTaskResumeAll+0x1dc>)
 8001b3c:	189a      	adds	r2, r3, r2
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b46:	4929      	ldr	r1, [pc, #164]	@ (8001bec <xTaskResumeAll+0x1dc>)
 8001b48:	0013      	movs	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	189b      	adds	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	585b      	ldr	r3, [r3, r1]
 8001b52:	1c58      	adds	r0, r3, #1
 8001b54:	4925      	ldr	r1, [pc, #148]	@ (8001bec <xTaskResumeAll+0x1dc>)
 8001b56:	0013      	movs	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <xTaskResumeAll+0x1e0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <xTaskResumeAll+0x1e4>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <xTaskResumeAll+0x1d4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d000      	beq.n	8001b7e <xTaskResumeAll+0x16e>
 8001b7c:	e76b      	b.n	8001a56 <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001b84:	f000 fbe4 	bl	8002350 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <xTaskResumeAll+0x1e8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <xTaskResumeAll+0x1a4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001b94:	f000 f84a 	bl	8001c2c <xTaskIncrementTick>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d002      	beq.n	8001ba2 <xTaskResumeAll+0x192>
                            {
                                xYieldPending = pdTRUE;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <xTaskResumeAll+0x1e4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f2      	bne.n	8001b94 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <xTaskResumeAll+0x1e8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <xTaskResumeAll+0x1e4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <xTaskResumeAll+0x1b4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001bc0:	f001 f94e 	bl	8002e60 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001bc4:	f001 f96e 	bl	8002ea4 <vPortExitCritical>

    return xAlreadyYielded;
 8001bc8:	693b      	ldr	r3, [r7, #16]
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	2000014c 	.word	0x2000014c
 8001bd8:	00000885 	.word	0x00000885
 8001bdc:	080067a8 	.word	0x080067a8
 8001be0:	20000124 	.word	0x20000124
 8001be4:	20000110 	.word	0x20000110
 8001be8:	2000012c 	.word	0x2000012c
 8001bec:	2000007c 	.word	0x2000007c
 8001bf0:	20000078 	.word	0x20000078
 8001bf4:	20000138 	.word	0x20000138
 8001bf8:	20000134 	.word	0x20000134

08001bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <xTaskGetTickCount+0x18>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	20000128 	.word	0x20000128

08001c18 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <uxTaskGetNumberOfTasks+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	20000124 	.word	0x20000124

08001c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8001c36:	4b7d      	ldr	r3, [pc, #500]	@ (8001e2c <xTaskIncrementTick+0x200>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d003      	beq.n	8001c46 <xTaskIncrementTick+0x1a>
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e30 <xTaskIncrementTick+0x204>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <xTaskIncrementTick+0x26>
 8001c46:	4b7b      	ldr	r3, [pc, #492]	@ (8001e34 <xTaskIncrementTick+0x208>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e38 <xTaskIncrementTick+0x20c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3201      	adds	r2, #1
 8001c50:	619a      	str	r2, [r3, #24]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c52:	4b76      	ldr	r3, [pc, #472]	@ (8001e2c <xTaskIncrementTick+0x200>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d000      	beq.n	8001c5c <xTaskIncrementTick+0x30>
 8001c5a:	e0dc      	b.n	8001e16 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c5c:	4b75      	ldr	r3, [pc, #468]	@ (8001e34 <xTaskIncrementTick+0x208>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c64:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <xTaskIncrementTick+0x208>)
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11b      	bne.n	8001ca8 <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c70:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <xTaskIncrementTick+0x210>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <xTaskIncrementTick+0x5a>
 8001c7a:	4a71      	ldr	r2, [pc, #452]	@ (8001e40 <xTaskIncrementTick+0x214>)
 8001c7c:	4b71      	ldr	r3, [pc, #452]	@ (8001e44 <xTaskIncrementTick+0x218>)
 8001c7e:	0011      	movs	r1, r2
 8001c80:	0018      	movs	r0, r3
 8001c82:	f003 fc53 	bl	800552c <vAssertCalled>
 8001c86:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <xTaskIncrementTick+0x210>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <xTaskIncrementTick+0x21c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <xTaskIncrementTick+0x210>)
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4b6c      	ldr	r3, [pc, #432]	@ (8001e48 <xTaskIncrementTick+0x21c>)
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e4c <xTaskIncrementTick+0x220>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <xTaskIncrementTick+0x220>)
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f000 fb54 	bl	8002350 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001ca8:	4b69      	ldr	r3, [pc, #420]	@ (8001e50 <xTaskIncrementTick+0x224>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d200      	bcs.n	8001cb4 <xTaskIncrementTick+0x88>
 8001cb2:	e0a9      	b.n	8001e08 <xTaskIncrementTick+0x1dc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <xTaskIncrementTick+0x210>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d104      	bne.n	8001cc8 <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cbe:	4b64      	ldr	r3, [pc, #400]	@ (8001e50 <xTaskIncrementTick+0x224>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4252      	negs	r2, r2
 8001cc4:	601a      	str	r2, [r3, #0]
                    break;
 8001cc6:	e09f      	b.n	8001e08 <xTaskIncrementTick+0x1dc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <xTaskIncrementTick+0x210>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d203      	bcs.n	8001ce8 <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <xTaskIncrementTick+0x224>)
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ce6:	e08f      	b.n	8001e08 <xTaskIncrementTick+0x1dc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68d2      	ldr	r2, [r2, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	6892      	ldr	r2, [r2, #8]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d103      	bne.n	8001d16 <xTaskIncrementTick+0xea>
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01e      	beq.n	8001d6c <xTaskIncrementTick+0x140>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	6a12      	ldr	r2, [r2, #32]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	69d2      	ldr	r2, [r2, #28]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	3318      	adds	r3, #24
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d103      	bne.n	8001d5c <xTaskIncrementTick+0x130>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	0019      	movs	r1, r3
 8001d70:	2030      	movs	r0, #48	@ 0x30
 8001d72:	f002 f885 	bl	8003e80 <xTraceEventCreate1>
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <xTaskIncrementTick+0x228>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d903      	bls.n	8001d8a <xTaskIncrementTick+0x15e>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d86:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <xTaskIncrementTick+0x228>)
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d8e:	4932      	ldr	r1, [pc, #200]	@ (8001e58 <xTaskIncrementTick+0x22c>)
 8001d90:	0013      	movs	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	18cb      	adds	r3, r1, r3
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	3204      	adds	r2, #4
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1d1a      	adds	r2, r3, #4
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	189b      	adds	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <xTaskIncrementTick+0x22c>)
 8001dce:	189a      	adds	r2, r3, r2
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd8:	491f      	ldr	r1, [pc, #124]	@ (8001e58 <xTaskIncrementTick+0x22c>)
 8001dda:	0013      	movs	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	189b      	adds	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	585b      	ldr	r3, [r3, r1]
 8001de4:	1c58      	adds	r0, r3, #1
 8001de6:	491c      	ldr	r1, [pc, #112]	@ (8001e58 <xTaskIncrementTick+0x22c>)
 8001de8:	0013      	movs	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	189b      	adds	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <xTaskIncrementTick+0x230>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d800      	bhi.n	8001e02 <xTaskIncrementTick+0x1d6>
 8001e00:	e758      	b.n	8001cb4 <xTaskIncrementTick+0x88>
                        {
                            xSwitchRequired = pdTRUE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e06:	e755      	b.n	8001cb4 <xTaskIncrementTick+0x88>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <xTaskIncrementTick+0x234>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e004      	b.n	8001e20 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <xTaskIncrementTick+0x204>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <xTaskIncrementTick+0x204>)
 8001e1e:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001e20:	69fb      	ldr	r3, [r7, #28]
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b008      	add	sp, #32
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	2000014c 	.word	0x2000014c
 8001e30:	20000134 	.word	0x20000134
 8001e34:	20000128 	.word	0x20000128
 8001e38:	20003008 	.word	0x20003008
 8001e3c:	20000108 	.word	0x20000108
 8001e40:	00000ab7 	.word	0x00000ab7
 8001e44:	080067a8 	.word	0x080067a8
 8001e48:	2000010c 	.word	0x2000010c
 8001e4c:	2000013c 	.word	0x2000013c
 8001e50:	20000144 	.word	0x20000144
 8001e54:	2000012c 	.word	0x2000012c
 8001e58:	2000007c 	.word	0x2000007c
 8001e5c:	20000078 	.word	0x20000078
 8001e60:	20000138 	.word	0x20000138

08001e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <vTaskSwitchContext+0xa8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <vTaskSwitchContext+0xac>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001e78:	e044      	b.n	8001f04 <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <vTaskSwitchContext+0xac>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <vTaskSwitchContext+0xb0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e00b      	b.n	8001ea0 <vTaskSwitchContext+0x3c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <vTaskSwitchContext+0x36>
 8001e8e:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <vTaskSwitchContext+0xb4>)
 8001e90:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <vTaskSwitchContext+0xb8>)
 8001e92:	0011      	movs	r1, r2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f003 fb49 	bl	800552c <vAssertCalled>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	491f      	ldr	r1, [pc, #124]	@ (8001f20 <vTaskSwitchContext+0xbc>)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	189b      	adds	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	585b      	ldr	r3, [r3, r1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ea      	beq.n	8001e88 <vTaskSwitchContext+0x24>
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	189b      	adds	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <vTaskSwitchContext+0xbc>)
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d104      	bne.n	8001ee2 <vTaskSwitchContext+0x7e>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <vTaskSwitchContext+0xc0>)
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <vTaskSwitchContext+0xb0>)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <vTaskSwitchContext+0xc0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <vTaskSwitchContext+0xc0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	0019      	movs	r1, r3
 8001efe:	0010      	movs	r0, r2
 8001f00:	f003 f9c2 	bl	8005288 <xTraceTaskSwitch>
}
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000014c 	.word	0x2000014c
 8001f10:	20000138 	.word	0x20000138
 8001f14:	2000012c 	.word	0x2000012c
 8001f18:	00000bf6 	.word	0x00000bf6
 8001f1c:	080067a8 	.word	0x080067a8
 8001f20:	2000007c 	.word	0x2000007c
 8001f24:	20000078 	.word	0x20000078

08001f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <vTaskPlaceOnEventList+0x1c>
 8001f38:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <vTaskPlaceOnEventList+0x40>)
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <vTaskPlaceOnEventList+0x44>)
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f003 faf4 	bl	800552c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <vTaskPlaceOnEventList+0x48>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7fe f98e 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 fc28 	bl	80027b0 <prvAddCurrentTaskToDelayedList>
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	00000c0e 	.word	0x00000c0e
 8001f6c:	080067a8 	.word	0x080067a8
 8001f70:	20000078 	.word	0x20000078

08001f74 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <vTaskPlaceOnEventListRestricted+0x1e>
 8001f86:	4a1f      	ldr	r2, [pc, #124]	@ (8002004 <vTaskPlaceOnEventListRestricted+0x90>)
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <vTaskPlaceOnEventListRestricted+0x94>)
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f003 facd 	bl	800552c <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <vTaskPlaceOnEventListRestricted+0x98>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	61da      	str	r2, [r3, #28]
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <vTaskPlaceOnEventListRestricted+0x98>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	6892      	ldr	r2, [r2, #8]
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <vTaskPlaceOnEventListRestricted+0x98>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	3218      	adds	r2, #24
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <vTaskPlaceOnEventListRestricted+0x98>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3318      	adds	r3, #24
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <vTaskPlaceOnEventListRestricted+0x98>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <vTaskPlaceOnEventListRestricted+0x6c>
        {
            xTicksToWait = portMAX_DELAY;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	425b      	negs	r3, r3
 8001fde:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <vTaskPlaceOnEventListRestricted+0x9c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	0019      	movs	r1, r3
 8001fea:	2079      	movs	r0, #121	@ 0x79
 8001fec:	f001 ff48 	bl	8003e80 <xTraceEventCreate1>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 fbda 	bl	80027b0 <prvAddCurrentTaskToDelayedList>
    }
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b006      	add	sp, #24
 8002002:	bd80      	pop	{r7, pc}
 8002004:	00000c44 	.word	0x00000c44
 8002008:	080067a8 	.word	0x080067a8
 800200c:	20000078 	.word	0x20000078
 8002010:	20000128 	.word	0x20000128

08002014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <xTaskRemoveFromEventList+0x22>
 800202a:	4a5e      	ldr	r2, [pc, #376]	@ (80021a4 <xTaskRemoveFromEventList+0x190>)
 800202c:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <xTaskRemoveFromEventList+0x194>)
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f003 fa7b 	bl	800552c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	6a12      	ldr	r2, [r2, #32]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	69d2      	ldr	r2, [r2, #28]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3318      	adds	r3, #24
 8002058:	429a      	cmp	r2, r3
 800205a:	d103      	bne.n	8002064 <xTaskRemoveFromEventList+0x50>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6a1a      	ldr	r2, [r3, #32]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	@ 0x28
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002074:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <xTaskRemoveFromEventList+0x198>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d162      	bne.n	8002142 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	6892      	ldr	r2, [r2, #8]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	3304      	adds	r3, #4
 800209e:	429a      	cmp	r2, r3
 80020a0:	d103      	bne.n	80020aa <xTaskRemoveFromEventList+0x96>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	0019      	movs	r1, r3
 80020be:	2030      	movs	r0, #48	@ 0x30
 80020c0:	f001 fede 	bl	8003e80 <xTraceEventCreate1>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c8:	4b39      	ldr	r3, [pc, #228]	@ (80021b0 <xTaskRemoveFromEventList+0x19c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d903      	bls.n	80020d8 <xTaskRemoveFromEventList+0xc4>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d4:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <xTaskRemoveFromEventList+0x19c>)
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020dc:	4935      	ldr	r1, [pc, #212]	@ (80021b4 <xTaskRemoveFromEventList+0x1a0>)
 80020de:	0013      	movs	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	18cb      	adds	r3, r1, r3
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	3204      	adds	r2, #4
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1d1a      	adds	r2, r3, #4
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002112:	0013      	movs	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	189b      	adds	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <xTaskRemoveFromEventList+0x1a0>)
 800211c:	189a      	adds	r2, r3, r2
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002126:	4923      	ldr	r1, [pc, #140]	@ (80021b4 <xTaskRemoveFromEventList+0x1a0>)
 8002128:	0013      	movs	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	189b      	adds	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	585b      	ldr	r3, [r3, r1]
 8002132:	1c58      	adds	r0, r3, #1
 8002134:	491f      	ldr	r1, [pc, #124]	@ (80021b4 <xTaskRemoveFromEventList+0x1a0>)
 8002136:	0013      	movs	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	189b      	adds	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	5058      	str	r0, [r3, r1]
 8002140:	e01b      	b.n	800217a <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <xTaskRemoveFromEventList+0x1a4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	61da      	str	r2, [r3, #28]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	621a      	str	r2, [r3, #32]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	3218      	adds	r2, #24
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3318      	adds	r3, #24
 8002164:	001a      	movs	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <xTaskRemoveFromEventList+0x1a4>)
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <xTaskRemoveFromEventList+0x1a4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <xTaskRemoveFromEventList+0x1a4>)
 8002178:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <xTaskRemoveFromEventList+0x1a8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	429a      	cmp	r2, r3
 8002186:	d905      	bls.n	8002194 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002188:	2301      	movs	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <xTaskRemoveFromEventList+0x1ac>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e001      	b.n	8002198 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002198:	69fb      	ldr	r3, [r7, #28]
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b008      	add	sp, #32
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	00000c74 	.word	0x00000c74
 80021a8:	080067a8 	.word	0x080067a8
 80021ac:	2000014c 	.word	0x2000014c
 80021b0:	2000012c 	.word	0x2000012c
 80021b4:	2000007c 	.word	0x2000007c
 80021b8:	20000110 	.word	0x20000110
 80021bc:	20000078 	.word	0x20000078
 80021c0:	20000138 	.word	0x20000138

080021c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <vTaskInternalSetTimeOutState+0x20>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <vTaskInternalSetTimeOutState+0x24>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000013c 	.word	0x2000013c
 80021e8:	20000128 	.word	0x20000128

080021ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <xTaskCheckForTimeOut+0x1c>
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <xTaskCheckForTimeOut+0xa4>)
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <xTaskCheckForTimeOut+0xa8>)
 8002200:	0011      	movs	r1, r2
 8002202:	0018      	movs	r0, r3
 8002204:	f003 f992 	bl	800552c <vAssertCalled>
    configASSERT( pxTicksToWait );
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <xTaskCheckForTimeOut+0x30>
 800220e:	23cf      	movs	r3, #207	@ 0xcf
 8002210:	011a      	lsls	r2, r3, #4
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <xTaskCheckForTimeOut+0xa8>)
 8002214:	0011      	movs	r1, r2
 8002216:	0018      	movs	r0, r3
 8002218:	f003 f988 	bl	800552c <vAssertCalled>

    taskENTER_CRITICAL();
 800221c:	f000 fe30 	bl	8002e80 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <xTaskCheckForTimeOut+0xac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <xTaskCheckForTimeOut+0xb0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d00a      	beq.n	8002252 <xTaskCheckForTimeOut+0x66>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	429a      	cmp	r2, r3
 8002244:	d305      	bcc.n	8002252 <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e016      	b.n	8002280 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d20c      	bcs.n	8002276 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad2      	subs	r2, r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff ffaa 	bl	80021c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e004      	b.n	8002280 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800227c:	2301      	movs	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002280:	f000 fe10 	bl	8002ea4 <vPortExitCritical>

    return xReturn;
 8002284:	697b      	ldr	r3, [r7, #20]
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b006      	add	sp, #24
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	00000cef 	.word	0x00000cef
 8002294:	080067a8 	.word	0x080067a8
 8002298:	20000128 	.word	0x20000128
 800229c:	2000013c 	.word	0x2000013c

080022a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80022a4:	4b02      	ldr	r3, [pc, #8]	@ (80022b0 <vTaskMissedYield+0x10>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000138 	.word	0x20000138

080022b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80022bc:	f000 f842 	bl	8002344 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <prvIdleTask+0x1c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d9f9      	bls.n	80022bc <prvIdleTask+0x8>
            {
                taskYIELD();
 80022c8:	f000 fdca 	bl	8002e60 <vPortYield>
        prvCheckTasksWaitingTermination();
 80022cc:	e7f6      	b.n	80022bc <prvIdleTask+0x8>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	2000007c 	.word	0x2000007c

080022d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	e00c      	b.n	80022fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	0013      	movs	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <prvInitialiseTaskLists+0x58>)
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fd ff96 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d9ef      	bls.n	80022e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <prvInitialiseTaskLists+0x5c>)
 8002302:	0018      	movs	r0, r3
 8002304:	f7fd ff8c 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <prvInitialiseTaskLists+0x60>)
 800230a:	0018      	movs	r0, r3
 800230c:	f7fd ff88 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <prvInitialiseTaskLists+0x64>)
 8002312:	0018      	movs	r0, r3
 8002314:	f7fd ff84 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <prvInitialiseTaskLists+0x68>)
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <prvInitialiseTaskLists+0x5c>)
 800231c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800231e:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <prvInitialiseTaskLists+0x6c>)
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <prvInitialiseTaskLists+0x60>)
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000007c 	.word	0x2000007c
 8002330:	200000e0 	.word	0x200000e0
 8002334:	200000f4 	.word	0x200000f4
 8002338:	20000110 	.word	0x20000110
 800233c:	20000108 	.word	0x20000108
 8002340:	2000010c 	.word	0x2000010c

08002344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <prvResetNextTaskUnblockTime+0x2c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <prvResetNextTaskUnblockTime+0x30>)
 8002360:	2201      	movs	r2, #1
 8002362:	4252      	negs	r2, r2
 8002364:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002366:	e005      	b.n	8002374 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002368:	4b04      	ldr	r3, [pc, #16]	@ (800237c <prvResetNextTaskUnblockTime+0x2c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <prvResetNextTaskUnblockTime+0x30>)
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	20000108 	.word	0x20000108
 8002380:	20000144 	.word	0x20000144

08002384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <xTaskGetSchedulerState+0x30>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002392:	2301      	movs	r3, #1
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	e008      	b.n	80023aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <xTaskGetSchedulerState+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80023a0:	2302      	movs	r3, #2
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	e001      	b.n	80023aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80023aa:	687b      	ldr	r3, [r7, #4]
    }
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000130 	.word	0x20000130
 80023b8:	2000014c 	.word	0x2000014c

080023bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d100      	bne.n	80023d4 <xTaskPriorityInherit+0x18>
 80023d2:	e084      	b.n	80024de <xTaskPriorityInherit+0x122>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d8:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d274      	bcs.n	80024cc <xTaskPriorityInherit+0x110>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db06      	blt.n	80023f8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	2205      	movs	r2, #5
 80023f2:	1ad2      	subs	r2, r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6959      	ldr	r1, [r3, #20]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002400:	0013      	movs	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	189b      	adds	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4a38      	ldr	r2, [pc, #224]	@ (80024ec <xTaskPriorityInherit+0x130>)
 800240a:	189b      	adds	r3, r3, r2
 800240c:	4299      	cmp	r1, r3
 800240e:	d14d      	bne.n	80024ac <xTaskPriorityInherit+0xf0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	3304      	adds	r3, #4
 8002414:	0018      	movs	r0, r3
 8002416:	f7fd ff62 	bl	80002de <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800241a:	4b33      	ldr	r3, [pc, #204]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	0019      	movs	r1, r3
 8002428:	2030      	movs	r0, #48	@ 0x30
 800242a:	f001 fd29 	bl	8003e80 <xTraceEventCreate1>
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <xTaskPriorityInherit+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d903      	bls.n	8002442 <xTaskPriorityInherit+0x86>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243e:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <xTaskPriorityInherit+0x134>)
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002446:	4929      	ldr	r1, [pc, #164]	@ (80024ec <xTaskPriorityInherit+0x130>)
 8002448:	0013      	movs	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	189b      	adds	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	18cb      	adds	r3, r1, r3
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	3204      	adds	r2, #4
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247c:	0013      	movs	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	189b      	adds	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <xTaskPriorityInherit+0x130>)
 8002486:	189a      	adds	r2, r3, r2
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002490:	4916      	ldr	r1, [pc, #88]	@ (80024ec <xTaskPriorityInherit+0x130>)
 8002492:	0013      	movs	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	189b      	adds	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	585b      	ldr	r3, [r3, r1]
 800249c:	1c58      	adds	r0, r3, #1
 800249e:	4913      	ldr	r1, [pc, #76]	@ (80024ec <xTaskPriorityInherit+0x130>)
 80024a0:	0013      	movs	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	189b      	adds	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	5058      	str	r0, [r3, r1]
 80024aa:	e004      	b.n	80024b6 <xTaskPriorityInherit+0xfa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80024b6:	6939      	ldr	r1, [r7, #16]
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	001a      	movs	r2, r3
 80024c0:	2005      	movs	r0, #5
 80024c2:	f001 fd55 	bl	8003f70 <xTraceEventCreate2>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e008      	b.n	80024de <xTaskPriorityInherit+0x122>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <xTaskPriorityInherit+0x12c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d201      	bcs.n	80024de <xTaskPriorityInherit+0x122>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024de:	697b      	ldr	r3, [r7, #20]
    }
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b006      	add	sp, #24
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000078 	.word	0x20000078
 80024ec:	2000007c 	.word	0x2000007c
 80024f0:	2000012c 	.word	0x2000012c

080024f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <xTaskPriorityDisinherit+0x18>
 800250a:	e07e      	b.n	800260a <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800250c:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <xTaskPriorityDisinherit+0x120>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d005      	beq.n	8002522 <xTaskPriorityDisinherit+0x2e>
 8002516:	4a40      	ldr	r2, [pc, #256]	@ (8002618 <xTaskPriorityDisinherit+0x124>)
 8002518:	4b40      	ldr	r3, [pc, #256]	@ (800261c <xTaskPriorityDisinherit+0x128>)
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f003 f805 	bl	800552c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <xTaskPriorityDisinherit+0x42>
 800252a:	4a3d      	ldr	r2, [pc, #244]	@ (8002620 <xTaskPriorityDisinherit+0x12c>)
 800252c:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <xTaskPriorityDisinherit+0x128>)
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f002 fffb 	bl	800552c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	429a      	cmp	r2, r3
 800254a:	d05e      	beq.n	800260a <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002550:	2b00      	cmp	r3, #0
 8002552:	d15a      	bne.n	800260a <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3304      	adds	r3, #4
 8002558:	0018      	movs	r0, r3
 800255a:	f7fd fec0 	bl	80002de <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800255e:	6939      	ldr	r1, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002564:	001a      	movs	r2, r3
 8002566:	2006      	movs	r0, #6
 8002568:	f001 fd02 	bl	8003f70 <xTraceEventCreate2>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	2205      	movs	r2, #5
 800257a:	1ad2      	subs	r2, r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	0019      	movs	r1, r3
 8002584:	2030      	movs	r0, #48	@ 0x30
 8002586:	f001 fc7b 	bl	8003e80 <xTraceEventCreate1>
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <xTaskPriorityDisinherit+0x130>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d903      	bls.n	800259e <xTaskPriorityDisinherit+0xaa>
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259a:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <xTaskPriorityDisinherit+0x130>)
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a2:	4921      	ldr	r1, [pc, #132]	@ (8002628 <xTaskPriorityDisinherit+0x134>)
 80025a4:	0013      	movs	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	18cb      	adds	r3, r1, r3
 80025ae:	3304      	adds	r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	3204      	adds	r2, #4
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	0013      	movs	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4a11      	ldr	r2, [pc, #68]	@ (8002628 <xTaskPriorityDisinherit+0x134>)
 80025e2:	189a      	adds	r2, r3, r2
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	615a      	str	r2, [r3, #20]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	490e      	ldr	r1, [pc, #56]	@ (8002628 <xTaskPriorityDisinherit+0x134>)
 80025ee:	0013      	movs	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	585b      	ldr	r3, [r3, r1]
 80025f8:	1c58      	adds	r0, r3, #1
 80025fa:	490b      	ldr	r1, [pc, #44]	@ (8002628 <xTaskPriorityDisinherit+0x134>)
 80025fc:	0013      	movs	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	189b      	adds	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002606:	2301      	movs	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800260a:	697b      	ldr	r3, [r7, #20]
    }
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000078 	.word	0x20000078
 8002618:	00001048 	.word	0x00001048
 800261c:	080067a8 	.word	0x080067a8
 8002620:	00001049 	.word	0x00001049
 8002624:	2000012c 	.word	0x2000012c
 8002628:	2000007c 	.word	0x2000007c

0800262c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800263a:	2301      	movs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d100      	bne.n	8002646 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8002644:	e092      	b.n	800276c <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <vTaskPriorityDisinheritAfterTimeout+0x2e>
 800264e:	4a49      	ldr	r2, [pc, #292]	@ (8002774 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8002650:	4b49      	ldr	r3, [pc, #292]	@ (8002778 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f002 ff69 	bl	800552c <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d902      	bls.n	800266a <vTaskPriorityDisinheritAfterTimeout+0x3e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	e002      	b.n	8002670 <vTaskPriorityDisinheritAfterTimeout+0x44>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	429a      	cmp	r2, r3
 8002678:	d100      	bne.n	800267c <vTaskPriorityDisinheritAfterTimeout+0x50>
 800267a:	e077      	b.n	800276c <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d172      	bne.n	800276c <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	429a      	cmp	r2, r3
 800268e:	d105      	bne.n	800269c <vTaskPriorityDisinheritAfterTimeout+0x70>
 8002690:	4a3b      	ldr	r2, [pc, #236]	@ (8002780 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8002692:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002694:	0011      	movs	r1, r2
 8002696:	0018      	movs	r0, r3
 8002698:	f002 ff48 	bl	800552c <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	0019      	movs	r1, r3
 80026a2:	2006      	movs	r0, #6
 80026a4:	f001 fc64 	bl	8003f70 <xTraceEventCreate2>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db04      	blt.n	80026c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2205      	movs	r2, #5
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6959      	ldr	r1, [r3, #20]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	0013      	movs	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	189b      	adds	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002784 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	4299      	cmp	r1, r3
 80026da:	d147      	bne.n	800276c <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	3304      	adds	r3, #4
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fd fdfc 	bl	80002de <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	0019      	movs	r1, r3
 80026ea:	2030      	movs	r0, #48	@ 0x30
 80026ec:	f001 fbc8 	bl	8003e80 <xTraceEventCreate1>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d903      	bls.n	8002704 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002708:	491e      	ldr	r1, [pc, #120]	@ (8002784 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800270a:	0013      	movs	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	189b      	adds	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	18cb      	adds	r3, r1, r3
 8002714:	3304      	adds	r3, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	3204      	adds	r2, #4
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1d1a      	adds	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273e:	0013      	movs	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	189b      	adds	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002748:	189a      	adds	r2, r3, r2
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	615a      	str	r2, [r3, #20]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	490c      	ldr	r1, [pc, #48]	@ (8002784 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002754:	0013      	movs	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	189b      	adds	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	585b      	ldr	r3, [r3, r1]
 800275e:	1c58      	adds	r0, r3, #1
 8002760:	4908      	ldr	r1, [pc, #32]	@ (8002784 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002762:	0013      	movs	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	189b      	adds	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b008      	add	sp, #32
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00001098 	.word	0x00001098
 8002778:	080067a8 	.word	0x080067a8
 800277c:	20000078 	.word	0x20000078
 8002780:	000010b3 	.word	0x000010b3
 8002784:	2000007c 	.word	0x2000007c
 8002788:	2000012c 	.word	0x2000012c

0800278c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <pvTaskIncrementMutexHeldCount+0x20>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <pvTaskIncrementMutexHeldCount+0x20>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800279e:	3201      	adds	r2, #1
 80027a0:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80027a2:	4b02      	ldr	r3, [pc, #8]	@ (80027ac <pvTaskIncrementMutexHeldCount+0x20>)
 80027a4:	681b      	ldr	r3, [r3, #0]
    }
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000078 	.word	0x20000078

080027b0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <prvAddCurrentTaskToDelayedList+0x74>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <prvAddCurrentTaskToDelayedList+0x78>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3304      	adds	r3, #4
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fd fd89 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	18d3      	adds	r3, r2, r3
 80027d2:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <prvAddCurrentTaskToDelayedList+0x78>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d209      	bcs.n	80027f8 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <prvAddCurrentTaskToDelayedList+0x7c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <prvAddCurrentTaskToDelayedList+0x78>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3304      	adds	r3, #4
 80027ee:	0019      	movs	r1, r3
 80027f0:	0010      	movs	r0, r2
 80027f2:	f7fd fd3e 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80027f6:	e010      	b.n	800281a <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <prvAddCurrentTaskToDelayedList+0x80>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <prvAddCurrentTaskToDelayedList+0x78>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3304      	adds	r3, #4
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f7fd fd34 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <prvAddCurrentTaskToDelayedList+0x84>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d202      	bcs.n	800281a <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <prvAddCurrentTaskToDelayedList+0x84>)
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	20000128 	.word	0x20000128
 8002828:	20000078 	.word	0x20000078
 800282c:	2000010c 	.word	0x2000010c
 8002830:	20000108 	.word	0x20000108
 8002834:	20000144 	.word	0x20000144

08002838 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002842:	f000 fa41 	bl	8002cc8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <xTimerCreateTimerTask+0x50>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800284e:	490f      	ldr	r1, [pc, #60]	@ (800288c <xTimerCreateTimerTask+0x54>)
 8002850:	480f      	ldr	r0, [pc, #60]	@ (8002890 <xTimerCreateTimerTask+0x58>)
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <xTimerCreateTimerTask+0x5c>)
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2303      	movs	r3, #3
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	2280      	movs	r2, #128	@ 0x80
 800285e:	f7fe fe50 	bl	8001502 <xTaskCreate>
 8002862:	0003      	movs	r3, r0
 8002864:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <xTimerCreateTimerTask+0x44>
 800286c:	231a      	movs	r3, #26
 800286e:	33ff      	adds	r3, #255	@ 0xff
 8002870:	001a      	movs	r2, r3
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <xTimerCreateTimerTask+0x60>)
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f002 fe58 	bl	800552c <vAssertCalled>
        return xReturn;
 800287c:	687b      	ldr	r3, [r7, #4]
    }
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	20000180 	.word	0x20000180
 800288c:	080067c4 	.word	0x080067c4
 8002890:	08002945 	.word	0x08002945
 8002894:	20000184 	.word	0x20000184
 8002898:	080067cc 	.word	0x080067cc

0800289c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80028a8:	e009      	b.n	80028be <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	18d3      	adds	r3, r2, r3
 80028b2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	0010      	movs	r0, r2
 80028bc:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	18d1      	adds	r1, r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8da 	bl	8002a84 <prvInsertTimerInActiveList>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d1ea      	bne.n	80028aa <prvReloadTimer+0xe>
        }
    }
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <prvProcessExpiredTimer+0x60>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3304      	adds	r3, #4
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fd fcf0 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2228      	movs	r2, #40	@ 0x28
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	001a      	movs	r2, r3
 8002906:	2304      	movs	r3, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d006      	beq.n	800291a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff ffc2 	bl	800289c <prvReloadTimer>
 8002918:	e008      	b.n	800292c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2228      	movs	r2, #40	@ 0x28
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	2201      	movs	r2, #1
 8002922:	4393      	bics	r3, r2
 8002924:	b2d9      	uxtb	r1, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2228      	movs	r2, #40	@ 0x28
 800292a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	0010      	movs	r0, r2
 8002934:	4798      	blx	r3
    }
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	20000178 	.word	0x20000178

08002944 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800294c:	2308      	movs	r3, #8
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	0018      	movs	r0, r3
 8002952:	f000 f855 	bl	8002a00 <prvGetNextExpireTime>
 8002956:	0003      	movs	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f805 	bl	8002970 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002966:	f000 f8cf 	bl	8002b08 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	e7ee      	b.n	800294c <prvTimerTask+0x8>
	...

08002970 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800297a:	f7ff f83d 	bl	80019f8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800297e:	2308      	movs	r3, #8
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f85e 	bl	8002a44 <prvSampleTimeNow>
 8002988:	0003      	movs	r3, r0
 800298a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12b      	bne.n	80029ea <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10c      	bne.n	80029b2 <prvProcessTimerOrBlockTask+0x42>
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d808      	bhi.n	80029b2 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80029a0:	f7ff f836 	bl	8001a10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0011      	movs	r1, r2
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff ff98 	bl	80028e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80029b0:	e01d      	b.n	80029ee <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <prvProcessTimerOrBlockTask+0x88>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <prvProcessTimerOrBlockTask+0x56>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <prvProcessTimerOrBlockTask+0x58>
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <prvProcessTimerOrBlockTask+0x8c>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	0019      	movs	r1, r3
 80029d8:	f7fe fd60 	bl	800149c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80029dc:	f7ff f818 	bl	8001a10 <xTaskResumeAll>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d104      	bne.n	80029ee <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80029e4:	f000 fa3c 	bl	8002e60 <vPortYield>
    }
 80029e8:	e001      	b.n	80029ee <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80029ea:	f7ff f811 	bl	8001a10 <xTaskResumeAll>
    }
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	2000017c 	.word	0x2000017c
 80029fc:	20000180 	.word	0x20000180

08002a00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <prvGetNextExpireTime+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <prvGetNextExpireTime+0x16>
 8002a12:	2201      	movs	r2, #1
 8002a14:	e000      	b.n	8002a18 <prvGetNextExpireTime+0x18>
 8002a16:	2200      	movs	r2, #0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <prvGetNextExpireTime+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e001      	b.n	8002a34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002a34:	68fb      	ldr	r3, [r7, #12]
    }
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b004      	add	sp, #16
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	20000178 	.word	0x20000178

08002a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002a4c:	f7ff f8d6 	bl	8001bfc <xTaskGetTickCount>
 8002a50:	0003      	movs	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <prvSampleTimeNow+0x3c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d205      	bcs.n	8002a6a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002a5e:	f000 f90b 	bl	8002c78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e002      	b.n	8002a70 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002a70:	4b03      	ldr	r3, [pc, #12]	@ (8002a80 <prvSampleTimeNow+0x3c>)
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002a76:	68fb      	ldr	r3, [r7, #12]
    }
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b004      	add	sp, #16
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000188 	.word	0x20000188

08002a84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d812      	bhi.n	8002ad0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e01b      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <prvInsertTimerInActiveList+0x7c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f7fd fbd2 	bl	8000272 <vListInsert>
 8002ace:	e012      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d206      	bcs.n	8002ae6 <prvInsertTimerInActiveList+0x62>
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e007      	b.n	8002af6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <prvInsertTimerInActiveList+0x80>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	0019      	movs	r1, r3
 8002af0:	0010      	movs	r0, r2
 8002af2:	f7fd fbbe 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002af6:	697b      	ldr	r3, [r7, #20]
    }
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b006      	add	sp, #24
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000017c 	.word	0x2000017c
 8002b04:	20000178 	.word	0x20000178

08002b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b0e:	e09b      	b.n	8002c48 <prvProcessReceivedCommands+0x140>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da00      	bge.n	8002b1a <prvProcessReceivedCommands+0x12>
 8002b18:	e096      	b.n	8002c48 <prvProcessReceivedCommands+0x140>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd fbd6 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b32:	003b      	movs	r3, r7
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ff85 	bl	8002a44 <prvSampleTimeNow>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b09      	cmp	r3, #9
 8002b44:	d900      	bls.n	8002b48 <prvProcessReceivedCommands+0x40>
 8002b46:	e07c      	b.n	8002c42 <prvProcessReceivedCommands+0x13a>
 8002b48:	009a      	lsls	r2, r3, #2
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <prvProcessReceivedCommands+0x160>)
 8002b4c:	18d3      	adds	r3, r2, r3
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2228      	movs	r2, #40	@ 0x28
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b2d9      	uxtb	r1, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2228      	movs	r2, #40	@ 0x28
 8002b62:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	18d1      	adds	r1, r2, r3
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f7ff ff85 	bl	8002a84 <prvInsertTimerInActiveList>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d063      	beq.n	8002c46 <prvProcessReceivedCommands+0x13e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2228      	movs	r2, #40	@ 0x28
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	001a      	movs	r2, r3
 8002b86:	2304      	movs	r3, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00a      	beq.n	8002ba2 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	18d1      	adds	r1, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff fe7e 	bl	800289c <prvReloadTimer>
 8002ba0:	e008      	b.n	8002bb4 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2228      	movs	r2, #40	@ 0x28
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4393      	bics	r3, r2
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2228      	movs	r2, #40	@ 0x28
 8002bb2:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	0010      	movs	r0, r2
 8002bbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002bbe:	e042      	b.n	8002c46 <prvProcessReceivedCommands+0x13e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2228      	movs	r2, #40	@ 0x28
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4393      	bics	r3, r2
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2228      	movs	r2, #40	@ 0x28
 8002bd0:	5499      	strb	r1, [r3, r2]
                        break;
 8002bd2:	e039      	b.n	8002c48 <prvProcessReceivedCommands+0x140>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b2d9      	uxtb	r1, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2228      	movs	r2, #40	@ 0x28
 8002be4:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <prvProcessReceivedCommands+0xfa>
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <prvProcessReceivedCommands+0x164>)
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <prvProcessReceivedCommands+0x168>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f002 fc95 	bl	800552c <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	18d1      	adds	r1, r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff38 	bl	8002a84 <prvInsertTimerInActiveList>
                        break;
 8002c14:	e018      	b.n	8002c48 <prvProcessReceivedCommands+0x140>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2228      	movs	r2, #40	@ 0x28
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	2302      	movs	r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d104      	bne.n	8002c2e <prvProcessReceivedCommands+0x126>
                            {
                                vPortFree( pxTimer );
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fa32 	bl	8003090 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002c2c:	e00c      	b.n	8002c48 <prvProcessReceivedCommands+0x140>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2228      	movs	r2, #40	@ 0x28
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4393      	bics	r3, r2
 8002c38:	b2d9      	uxtb	r1, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2228      	movs	r2, #40	@ 0x28
 8002c3e:	5499      	strb	r1, [r3, r2]
                        break;
 8002c40:	e002      	b.n	8002c48 <prvProcessReceivedCommands+0x140>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	e000      	b.n	8002c48 <prvProcessReceivedCommands+0x140>
                        break;
 8002c46:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <prvProcessReceivedCommands+0x16c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1d39      	adds	r1, r7, #4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fd ff85 	bl	8000b60 <xQueueReceive>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d000      	beq.n	8002c5c <prvProcessReceivedCommands+0x154>
 8002c5a:	e759      	b.n	8002b10 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b006      	add	sp, #24
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	08006b9c 	.word	0x08006b9c
 8002c6c:	0000035e 	.word	0x0000035e
 8002c70:	080067cc 	.word	0x080067cc
 8002c74:	20000180 	.word	0x20000180

08002c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c7e:	e00b      	b.n	8002c98 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <prvSwitchTimerLists+0x48>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	425a      	negs	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff fe24 	bl	80028e0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <prvSwitchTimerLists+0x48>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ee      	bne.n	8002c80 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <prvSwitchTimerLists+0x48>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <prvSwitchTimerLists+0x4c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <prvSwitchTimerLists+0x48>)
 8002cae:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <prvSwitchTimerLists+0x4c>)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
    }
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	20000178 	.word	0x20000178
 8002cc4:	2000017c 	.word	0x2000017c

08002cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ccc:	f000 f8d8 	bl	8002e80 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <prvCheckForValidListAndQueue+0x5c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d120      	bne.n	8002d1a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <prvCheckForValidListAndQueue+0x60>)
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fd faa0 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <prvCheckForValidListAndQueue+0x64>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7fd fa9c 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <prvCheckForValidListAndQueue+0x68>)
 8002cea:	4a0f      	ldr	r2, [pc, #60]	@ (8002d28 <prvCheckForValidListAndQueue+0x60>)
 8002cec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <prvCheckForValidListAndQueue+0x6c>)
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8002d2c <prvCheckForValidListAndQueue+0x64>)
 8002cf2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	210c      	movs	r1, #12
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f7fd fbaf 	bl	800045c <xQueueGenericCreate>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <prvCheckForValidListAndQueue+0x5c>)
 8002d02:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <prvCheckForValidListAndQueue+0x5c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <prvCheckForValidListAndQueue+0x5c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <prvCheckForValidListAndQueue+0x70>)
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fe fb6f 	bl	80013f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d1a:	f000 f8c3 	bl	8002ea4 <vPortExitCritical>
    }
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000180 	.word	0x20000180
 8002d28:	20000150 	.word	0x20000150
 8002d2c:	20000164 	.word	0x20000164
 8002d30:	20000178 	.word	0x20000178
 8002d34:	2000017c 	.word	0x2000017c
 8002d38:	080067e4 	.word	0x080067e4

08002d3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	0452      	lsls	r2, r2, #17
 8002d54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3b04      	subs	r3, #4
 8002d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002d68:	4a08      	ldr	r2, [pc, #32]	@ (8002d8c <pxPortInitialiseStack+0x50>)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b14      	subs	r3, #20
 8002d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3b20      	subs	r3, #32
 8002d7e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b004      	add	sp, #16
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	08002d91 	.word	0x08002d91

08002d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <prvTaskExitError+0x30>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	d004      	beq.n	8002dac <prvTaskExitError+0x1c>
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <prvTaskExitError+0x34>)
 8002da4:	21b2      	movs	r1, #178	@ 0xb2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f002 fbc0 	bl	800552c <vAssertCalled>
    portDISABLE_INTERRUPTS();
 8002dac:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0fc      	beq.n	8002db0 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	080067ec 	.word	0x080067ec

08002dc8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002de0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002de0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <pxCurrentTCBConst2>)
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	3020      	adds	r0, #32
 8002de8:	f380 8809 	msr	PSP, r0
 8002dec:	2002      	movs	r0, #2
 8002dee:	f380 8814 	msr	CONTROL, r0
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002df8:	46ae      	mov	lr, r5
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	bc04      	pop	{r2}
 8002dfe:	b662      	cpsie	i
 8002e00:	4718      	bx	r3
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	46c0      	nop			@ (mov r8, r8)
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46c0      	nop			@ (mov r8, r8)

08002e10 <pxCurrentTCBConst2>:
 8002e10:	20000078 	.word	0x20000078
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	46c0      	nop			@ (mov r8, r8)

08002e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <xPortStartScheduler+0x40>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <xPortStartScheduler+0x40>)
 8002e22:	21ff      	movs	r1, #255	@ 0xff
 8002e24:	0409      	lsls	r1, r1, #16
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <xPortStartScheduler+0x40>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <xPortStartScheduler+0x40>)
 8002e30:	21ff      	movs	r1, #255	@ 0xff
 8002e32:	0609      	lsls	r1, r1, #24
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e38:	f000 f8a0 	bl	8002f7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <xPortStartScheduler+0x44>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002e42:	f7ff ffcd 	bl	8002de0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e46:	f7ff f80d 	bl	8001e64 <vTaskSwitchContext>
    prvTaskExitError();
 8002e4a:	f7ff ffa1 	bl	8002d90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	e000ed20 	.word	0xe000ed20
 8002e5c:	20000004 	.word	0x20000004

08002e60 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <vPortYield+0x1c>)
 8002e66:	2280      	movs	r2, #128	@ 0x80
 8002e68:	0552      	lsls	r2, r2, #21
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002e6c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002e70:	f3bf 8f6f 	isb	sy
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002e84:	b672      	cpsid	i
    uxCriticalNesting++;
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <vPortEnterCritical+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <vPortEnterCritical+0x20>)
 8002e8e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002e90:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002e94:	f3bf 8f6f 	isb	sy
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <vPortExitCritical+0x38>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <vPortExitCritical+0x1c>
 8002eb0:	2326      	movs	r3, #38	@ 0x26
 8002eb2:	33ff      	adds	r3, #255	@ 0xff
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <vPortExitCritical+0x3c>)
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f002 fb36 	bl	800552c <vAssertCalled>
    uxCriticalNesting--;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <vPortExitCritical+0x38>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <vPortExitCritical+0x38>)
 8002ec8:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <vPortExitCritical+0x38>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d100      	bne.n	8002ed4 <vPortExitCritical+0x30>
    {
        portENABLE_INTERRUPTS();
 8002ed2:	b662      	cpsie	i
    }
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	080067ec 	.word	0x080067ec

08002ee4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002ee4:	f3ef 8010 	mrs	r0, PRIMASK
 8002ee8:	b672      	cpsid	i
 8002eea:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	0018      	movs	r0, r3

08002ef0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002ef0:	f380 8810 	msr	PRIMASK, r0
 8002ef4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
	...

08002f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f00:	f3ef 8009 	mrs	r0, PSP
 8002f04:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <pxCurrentTCBConst>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	3820      	subs	r0, #32
 8002f0a:	6010      	str	r0, [r2, #0]
 8002f0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f0e:	4644      	mov	r4, r8
 8002f10:	464d      	mov	r5, r9
 8002f12:	4656      	mov	r6, sl
 8002f14:	465f      	mov	r7, fp
 8002f16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f18:	b508      	push	{r3, lr}
 8002f1a:	b672      	cpsid	i
 8002f1c:	f7fe ffa2 	bl	8001e64 <vTaskSwitchContext>
 8002f20:	b662      	cpsie	i
 8002f22:	bc0c      	pop	{r2, r3}
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	6808      	ldr	r0, [r1, #0]
 8002f28:	3010      	adds	r0, #16
 8002f2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f2c:	46a0      	mov	r8, r4
 8002f2e:	46a9      	mov	r9, r5
 8002f30:	46b2      	mov	sl, r6
 8002f32:	46bb      	mov	fp, r7
 8002f34:	f380 8809 	msr	PSP, r0
 8002f38:	3820      	subs	r0, #32
 8002f3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f3c:	4718      	bx	r3
 8002f3e:	46c0      	nop			@ (mov r8, r8)

08002f40 <pxCurrentTCBConst>:
 8002f40:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46c0      	nop			@ (mov r8, r8)

08002f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f4e:	f7ff ffc9 	bl	8002ee4 <ulSetInterruptMaskFromISR>
 8002f52:	0003      	movs	r3, r0
 8002f54:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f56:	f7fe fe69 	bl	8001c2c <xTaskIncrementTick>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d003      	beq.n	8002f66 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <SysTick_Handler+0x30>)
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	0552      	lsls	r2, r2, #21
 8002f64:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff ffc1 	bl	8002ef0 <vClearInterruptMaskFromISR>
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <vPortSetupTimerInterrupt+0x34>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <vPortSetupTimerInterrupt+0x38>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <vPortSetupTimerInterrupt+0x3c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2164      	movs	r1, #100	@ 0x64
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7fd f8b8 	bl	8000108 <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <vPortSetupTimerInterrupt+0x40>)
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fa2:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <vPortSetupTimerInterrupt+0x34>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	e000e010 	.word	0xe000e010
 8002fb4:	e000e018 	.word	0xe000e018
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	e000e014 	.word	0xe000e014

08002fc0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2207      	movs	r2, #7
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4393      	bics	r3, r2
 8002fda:	3308      	adds	r3, #8
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d205      	bcs.n	8002fee <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	4393      	bics	r3, r2
 8002fe8:	3308      	adds	r3, #8
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	e001      	b.n	8002ff2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002ff2:	f7fe fd01 	bl	80019f8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002ff6:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <pvPortMalloc+0xb8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <pvPortMalloc+0xbc>)
 8003000:	2207      	movs	r2, #7
 8003002:	4393      	bics	r3, r2
 8003004:	001a      	movs	r2, r3
 8003006:	4b1c      	ldr	r3, [pc, #112]	@ (8003078 <pvPortMalloc+0xb8>)
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01a      	beq.n	8003046 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <pvPortMalloc+0xc0>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <pvPortMalloc+0xc4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d813      	bhi.n	8003046 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <pvPortMalloc+0xc0>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <pvPortMalloc+0xc0>)
 8003028:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800302a:	429a      	cmp	r2, r3
 800302c:	d90b      	bls.n	8003046 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <pvPortMalloc+0xb8>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <pvPortMalloc+0xc0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	18d3      	adds	r3, r2, r3
 8003038:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <pvPortMalloc+0xc0>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <pvPortMalloc+0xc0>)
 8003044:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <pvPortMalloc+0xc8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d00b      	beq.n	8003068 <pvPortMalloc+0xa8>
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <pvPortMalloc+0xcc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <pvPortMalloc+0xa8>
 800305a:	f001 fb87 	bl	800476c <xTraceKernelPortGetSystemHeapHandle>
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	0019      	movs	r1, r3
 8003064:	f001 fa9f 	bl	80045a6 <xTraceHeapAlloc>
    }
    ( void ) xTaskResumeAll();
 8003068:	f7fe fcd2 	bl	8001a10 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800306c:	68fb      	ldr	r3, [r7, #12]
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	20001d90 	.word	0x20001d90
 800307c:	20000193 	.word	0x20000193
 8003080:	20001d8c 	.word	0x20001d8c
 8003084:	00001bf7 	.word	0x00001bf7
 8003088:	20003000 	.word	0x20003000
 800308c:	20002ff8 	.word	0x20002ff8

08003090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <vPortFree+0x18>
 800309e:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <vPortFree+0x20>)
 80030a0:	218a      	movs	r1, #138	@ 0x8a
 80030a2:	0018      	movs	r0, r3
 80030a4:	f002 fa42 	bl	800552c <vAssertCalled>
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08006814 	.word	0x08006814

080030b4 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <xPortGetFreeHeapSize+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a03      	ldr	r2, [pc, #12]	@ (80030cc <xPortGetFreeHeapSize+0x18>)
 80030be:	1ad3      	subs	r3, r2, r3
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	20001d8c 	.word	0x20001d8c
 80030cc:	00001bf8 	.word	0x00001bf8

080030d0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80030d6:	4b25      	ldr	r3, [pc, #148]	@ (800316c <_DoInit+0x9c>)
 80030d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	22a8      	movs	r2, #168	@ 0xa8
 80030de:	2100      	movs	r1, #0
 80030e0:	0018      	movs	r0, r3
 80030e2:	f003 fb13 	bl	800670c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2203      	movs	r2, #3
 80030ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2203      	movs	r2, #3
 80030f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <_DoInit+0xa0>)
 80030f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003174 <_DoInit+0xa4>)
 80030fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	00d2      	lsls	r2, r2, #3
 8003104:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <_DoInit+0xa0>)
 800311c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <_DoInit+0xa8>)
 8003122:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2210      	movs	r2, #16
 8003128:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2200      	movs	r2, #0
 800312e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	e00c      	b.n	800315c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	220f      	movs	r2, #15
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <_DoInit+0xac>)
 800314a:	5cd1      	ldrb	r1, [r2, r3]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	1c0a      	adds	r2, r1, #0
 8003154:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3301      	adds	r3, #1
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d9ef      	bls.n	8003142 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20001d94 	.word	0x20001d94
 8003170:	0800683c 	.word	0x0800683c
 8003174:	20001e3c 	.word	0x20001e3c
 8003178:	2000223c 	.word	0x2000223c
 800317c:	08006bc4 	.word	0x08006bc4

08003180 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d905      	bls.n	80031b0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ae:	e007      	b.n	80031c0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	1acb      	subs	r3, r1, r3
 80031ba:	18d3      	adds	r3, r2, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	1ad2      	subs	r2, r2, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d900      	bls.n	80031d0 <_WriteBlocking+0x50>
 80031ce:	0013      	movs	r3, r2
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d900      	bls.n	80031dc <_WriteBlocking+0x5c>
 80031da:	0013      	movs	r3, r2
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80031e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f003 fab8 	bl	8006764 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	18d3      	adds	r3, r2, r3
 8003202:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	429a      	cmp	r2, r3
 800321c:	d101      	bne.n	8003222 <_WriteBlocking+0xa2>
      WrOff = 0u;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1b3      	bne.n	8003196 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800322e:	6a3b      	ldr	r3, [r7, #32]
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b00a      	add	sp, #40	@ 0x28
 8003236:	bd80      	pop	{r7, pc}

08003238 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d910      	bls.n	800327e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	0018      	movs	r0, r3
 800326e:	f003 fa79 	bl	8006764 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	18d2      	adds	r2, r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800327c:	e01e      	b.n	80032bc <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	0018      	movs	r0, r3
 8003294:	f003 fa66 	bl	8006764 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	18d1      	adds	r1, r2, r3
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f003 fa57 	bl	8006764 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	60da      	str	r2, [r3, #12]
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b008      	add	sp, #32
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d808      	bhi.n	80032f2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e004      	b.n	80032fc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  }
  return r;
 80032fc:	697b      	ldr	r3, [r7, #20]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	@ 0x30
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003314:	4b40      	ldr	r3, [pc, #256]	@ (8003418 <SEGGER_RTT_ReadNoLock+0x110>)
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b53      	cmp	r3, #83	@ 0x53
 8003320:	d001      	beq.n	8003326 <SEGGER_RTT_ReadNoLock+0x1e>
 8003322:	f7ff fed5 	bl	80030d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	0013      	movs	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	189b      	adds	r3, r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	3360      	adds	r3, #96	@ 0x60
 8003332:	001a      	movs	r2, r3
 8003334:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <SEGGER_RTT_ReadNoLock+0x110>)
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800334e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	429a      	cmp	r2, r3
 8003354:	d92c      	bls.n	80033b0 <SEGGER_RTT_ReadNoLock+0xa8>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4293      	cmp	r3, r2
 8003366:	d900      	bls.n	800336a <SEGGER_RTT_ReadNoLock+0x62>
 8003368:	0013      	movs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	18d3      	adds	r3, r2, r3
 8003374:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6939      	ldr	r1, [r7, #16]
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	0018      	movs	r0, r3
 800337e:	f003 f9f1 	bl	8006764 <memcpy>
    NumBytesRead += NumBytesRem;
 8003382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	18d3      	adds	r3, r2, r3
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800339a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d101      	bne.n	80033b0 <SEGGER_RTT_ReadNoLock+0xa8>
      RdOff = 0u;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4293      	cmp	r3, r2
 80033be:	d900      	bls.n	80033c2 <SEGGER_RTT_ReadNoLock+0xba>
 80033c0:	0013      	movs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01a      	beq.n	8003400 <SEGGER_RTT_ReadNoLock+0xf8>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6939      	ldr	r1, [r7, #16]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	0018      	movs	r0, r3
 80033dc:	f003 f9c2 	bl	8006764 <memcpy>
    NumBytesRead += NumBytesRem;
 80033e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80033e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80033f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <SEGGER_RTT_ReadNoLock+0x104>
    pRing->RdOff = RdOff;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b00c      	add	sp, #48	@ 0x30
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	20001d94 	.word	0x20001d94

0800341c <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 8003428:	f3ef 8310 	mrs	r3, PRIMASK
 800342c:	2101      	movs	r1, #1
 800342e:	f381 8810 	msr	PRIMASK, r1
 8003432:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff ff64 	bl	8003308 <SEGGER_RTT_ReadNoLock>
 8003440:	0003      	movs	r3, r0
 8003442:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f383 8810 	msr	PRIMASK, r3
  //
  return NumBytesRead;
 800344a:	693b      	ldr	r3, [r7, #16]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b006      	add	sp, #24
 8003452:	bd80      	pop	{r7, pc}

08003454 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	0013      	movs	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	189b      	adds	r3, r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4a23      	ldr	r2, [pc, #140]	@ (8003500 <SEGGER_RTT_WriteNoLock+0xac>)
 8003472:	189b      	adds	r3, r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d02e      	beq.n	80034dc <SEGGER_RTT_WriteNoLock+0x88>
 800347e:	d836      	bhi.n	80034ee <SEGGER_RTT_WriteNoLock+0x9a>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <SEGGER_RTT_WriteNoLock+0x36>
 8003484:	2b01      	cmp	r3, #1
 8003486:	d016      	beq.n	80034b6 <SEGGER_RTT_WriteNoLock+0x62>
 8003488:	e031      	b.n	80034ee <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff19 	bl	80032c4 <_GetAvailWriteSpace>
 8003492:	0003      	movs	r3, r0
 8003494:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d202      	bcs.n	80034a4 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80034a2:	e027      	b.n	80034f4 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7ff fec2 	bl	8003238 <_WriteNoCheck>
    break;
 80034b4:	e01e      	b.n	80034f4 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ff03 	bl	80032c4 <_GetAvailWriteSpace>
 80034be:	0003      	movs	r3, r0
 80034c0:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d900      	bls.n	80034cc <SEGGER_RTT_WriteNoLock+0x78>
 80034ca:	0013      	movs	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff feaf 	bl	8003238 <_WriteNoCheck>
    break;
 80034da:	e00b      	b.n	80034f4 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fe4c 	bl	8003180 <_WriteBlocking>
 80034e8:	0003      	movs	r3, r0
 80034ea:	61fb      	str	r3, [r7, #28]
    break;
 80034ec:	e002      	b.n	80034f4 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    break;
 80034f2:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 80034f4:	69fb      	ldr	r3, [r7, #28]
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b008      	add	sp, #32
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	20001d94 	.word	0x20001d94

08003504 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <SEGGER_RTT_Write+0x4c>)
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b53      	cmp	r3, #83	@ 0x53
 800351c:	d001      	beq.n	8003522 <SEGGER_RTT_Write+0x1e>
 800351e:	f7ff fdd7 	bl	80030d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003522:	f3ef 8310 	mrs	r3, PRIMASK
 8003526:	2101      	movs	r1, #1
 8003528:	f381 8810 	msr	PRIMASK, r1
 800352c:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff ff8d 	bl	8003454 <SEGGER_RTT_WriteNoLock>
 800353a:	0003      	movs	r3, r0
 800353c:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8003544:	697b      	ldr	r3, [r7, #20]
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b008      	add	sp, #32
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	20001d94 	.word	0x20001d94

08003554 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b53      	cmp	r3, #83	@ 0x53
 800356e:	d001      	beq.n	8003574 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8003570:	f7ff fdae 	bl	80030d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003574:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8003576:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d829      	bhi.n	80035d2 <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	2101      	movs	r1, #1
 8003584:	f381 8810 	msr	PRIMASK, r1
 8003588:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	0013      	movs	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	189b      	adds	r3, r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	18d3      	adds	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c4:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d0:	e002      	b.n	80035d8 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	425b      	negs	r3, r3
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b00a      	add	sp, #40	@ 0x28
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	20001d94 	.word	0x20001d94

080035e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80035f6:	4b20      	ldr	r3, [pc, #128]	@ (8003678 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b53      	cmp	r3, #83	@ 0x53
 8003602:	d001      	beq.n	8003608 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003604:	f7ff fd64 	bl	80030d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800360a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d829      	bhi.n	8003666 <SEGGER_RTT_ConfigDownBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8003612:	f3ef 8310 	mrs	r3, PRIMASK
 8003616:	2101      	movs	r1, #1
 8003618:	f381 8810 	msr	PRIMASK, r1
 800361c:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	0013      	movs	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	189b      	adds	r3, r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	3360      	adds	r3, #96	@ 0x60
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <SEGGER_RTT_ConfigDownBuffer+0x6c>
      pDown->sName        = sName;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003658:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
 8003664:	e002      	b.n	800366c <SEGGER_RTT_ConfigDownBuffer+0x84>
  } else {
    r = -1;
 8003666:	2301      	movs	r3, #1
 8003668:	425b      	negs	r3, r3
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b00a      	add	sp, #40	@ 0x28
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	20001d94 	.word	0x20001d94

0800367c <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 800368a:	2301      	movs	r3, #1
 800368c:	e003      	b.n	8003696 <xTraceStreamPortInitialize+0x1a>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <xTraceStreamPortInitialize+0x24>)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
#else
	return TRC_SUCCESS;
 8003694:	2300      	movs	r3, #0
#endif
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	2000224c 	.word	0x2000224c

080036a4 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <xTraceStreamPortOnEnable+0x54>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0018      	movs	r0, r3
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4911      	ldr	r1, [pc, #68]	@ (80036fc <xTraceStreamPortOnEnable+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	9200      	str	r2, [sp, #0]
 80036bc:	0002      	movs	r2, r0
 80036be:	2001      	movs	r0, #1
 80036c0:	f7ff ff48 	bl	8003554 <SEGGER_RTT_ConfigUpBuffer>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	da01      	bge.n	80036cc <xTraceStreamPortOnEnable+0x28>
	{
		return TRC_FAIL;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e010      	b.n	80036ee <xTraceStreamPortOnEnable+0x4a>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 80036cc:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <xTraceStreamPortOnEnable+0x54>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	189a      	adds	r2, r3, r2
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <xTraceStreamPortOnEnable+0x5c>)
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2320      	movs	r3, #32
 80036de:	2001      	movs	r0, #1
 80036e0:	f7ff ff82 	bl	80035e8 <SEGGER_RTT_ConfigDownBuffer>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	da01      	bge.n	80036ec <xTraceStreamPortOnEnable+0x48>
	{
		return TRC_FAIL;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <xTraceStreamPortOnEnable+0x4a>
	}

	return TRC_SUCCESS;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	2000224c 	.word	0x2000224c
 80036fc:	08006848 	.word	0x08006848
 8003700:	08006850 	.word	0x08006850

08003704 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <xTraceCounterInitialize+0x30>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
	
	pxCounterData->xCallbackFunction = 0;
 8003712:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <xTraceCounterInitialize+0x30>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <xTraceCounterInitialize+0x34>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2280      	movs	r2, #128	@ 0x80
 8003720:	03d2      	lsls	r2, r2, #15
 8003722:	431a      	orrs	r2, r3
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <xTraceCounterInitialize+0x34>)
 8003726:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	20002250 	.word	0x20002250
 8003738:	20003000 	.word	0x20003000

0800373c <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8003744:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <xTraceDiagnosticsInitialize+0x44>)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e008      	b.n	8003762 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <xTraceDiagnosticsInitialize+0x44>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	2100      	movs	r1, #0
 800375a:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d9f3      	bls.n	8003750 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <xTraceDiagnosticsInitialize+0x48>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	431a      	orrs	r2, r3
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <xTraceDiagnosticsInitialize+0x48>)
 8003772:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	20002254 	.word	0x20002254
 8003784:	20003000 	.word	0x20003000

08003788 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	0002      	movs	r2, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <xTraceDiagnosticsAdd+0x34>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1dfa      	adds	r2, r7, #7
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	58d0      	ldr	r0, [r2, r3]
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <xTraceDiagnosticsAdd+0x34>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1dfa      	adds	r2, r7, #7
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	1841      	adds	r1, r0, r1
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	50d1      	str	r1, [r2, r3]

	return TRC_SUCCESS;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20002254 	.word	0x20002254

080037c0 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	0002      	movs	r2, r0
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	701a      	strb	r2, [r3, #0]
	return xTraceDiagnosticsAdd(xType, 1);
 80037cc:	1dfb      	adds	r3, r7, #7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff ffd8 	bl	8003788 <xTraceDiagnosticsAdd>
 80037d8:	0003      	movs	r3, r0
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	0002      	movs	r2, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <xTraceDiagnosticsSetIfHigher+0x38>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1dfa      	adds	r2, r7, #7
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	0092      	lsls	r2, r2, #2
 80037fc:	58d3      	ldr	r3, [r2, r3]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	dd06      	ble.n	8003812 <xTraceDiagnosticsSetIfHigher+0x2e>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <xTraceDiagnosticsSetIfHigher+0x38>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1dfa      	adds	r2, r7, #7
 800380a:	7812      	ldrb	r2, [r2, #0]
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	50d1      	str	r1, [r2, r3]
	}

	return TRC_SUCCESS;
 8003812:	2300      	movs	r3, #0
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20002254 	.word	0x20002254

08003820 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <xTraceDiagnosticsCheckStatus+0x7c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	4013      	ands	r3, r2
 800382c:	d101      	bne.n	8003832 <xTraceDiagnosticsCheckStatus+0x12>
	{
		return TRC_FAIL;
 800382e:	2301      	movs	r3, #1
 8003830:	e030      	b.n	8003894 <xTraceDiagnosticsCheckStatus+0x74>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	dd06      	ble.n	800384a <xTraceDiagnosticsCheckStatus+0x2a>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 800383c:	2008      	movs	r0, #8
 800383e:	f000 f9ef 	bl	8003c20 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8003842:	4b17      	ldr	r3, [pc, #92]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b0e      	cmp	r3, #14
 8003852:	dd06      	ble.n	8003862 <xTraceDiagnosticsCheckStatus+0x42>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 8003854:	2009      	movs	r0, #9
 8003856:	f000 f9e3 	bl	8003c20 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 800385a:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8003862:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dd06      	ble.n	800387a <xTraceDiagnosticsCheckStatus+0x5a>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 800386c:	200a      	movs	r0, #10
 800386e:	f000 f9d7 	bl	8003c20 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	dd06      	ble.n	8003892 <xTraceDiagnosticsCheckStatus+0x72>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8003884:	200e      	movs	r0, #14
 8003886:	f000 f9cb 	bl	8003c20 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <xTraceDiagnosticsCheckStatus+0x80>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8003892:	2300      	movs	r3, #0
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	20003000 	.word	0x20003000
 80038a0:	20002254 	.word	0x20002254

080038a4 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <xTraceEntryIndexTableInitialize+0x1c>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	
	return prvEntryIndexInitialize();
 80038b2:	f000 f941 	bl	8003b38 <prvEntryIndexInitialize>
 80038b6:	0003      	movs	r3, r0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	2000225c 	.word	0x2000225c

080038c4 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 80038cc:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 80038d2:	4b27      	ldr	r3, [pc, #156]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2210      	movs	r2, #16
 80038d8:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 80038e2:	4b23      	ldr	r3, [pc, #140]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2203      	movs	r2, #3
 80038e8:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e030      	b.n	8003952 <xTraceEntryTableInitialize+0x8e>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 80038f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	0013      	movs	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	18cb      	adds	r3, r1, r3
 8003900:	330c      	adds	r3, #12
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	e010      	b.n	800392e <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	0013      	movs	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	189b      	adds	r3, r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	189b      	adds	r3, r3, r2
 800391c:	3302      	adds	r3, #2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18cb      	adds	r3, r1, r3
 8003922:	3308      	adds	r3, #8
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d9eb      	bls.n	800390c <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003934:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <xTraceEntryTableInitialize+0xac>)
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	2020      	movs	r0, #32
 800393c:	0013      	movs	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	189b      	adds	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	18cb      	adds	r3, r1, r3
 8003946:	181b      	adds	r3, r3, r0
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d9cb      	bls.n	80038f0 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <xTraceEntryTableInitialize+0xb0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2210      	movs	r2, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <xTraceEntryTableInitialize+0xb0>)
 8003962:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	20002258 	.word	0x20002258
 8003974:	20003000 	.word	0x20003000

08003978 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8003980:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <xTraceEntryCreate+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d101      	bne.n	800398e <xTraceEntryCreate+0x16>
	{
		return TRC_FAIL;
 800398a:	2301      	movs	r3, #1
 800398c:	e04d      	b.n	8003a2a <xTraceEntryCreate+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398e:	f3ef 8310 	mrs	r3, PRIMASK
 8003992:	617b      	str	r3, [r7, #20]
  return(result);
 8003994:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	2301      	movs	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f383 8810 	msr	PRIMASK, r3
}
 80039a2:	46c0      	nop			@ (mov r8, r8)

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 80039a4:	230b      	movs	r3, #11
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f8e5 	bl	8003b78 <prvEntryIndexTake>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d00a      	beq.n	80039c8 <xTraceEntryCreate+0x50>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7ff ff04 	bl	80037c0 <xTraceDiagnosticsIncrease>
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			@ (mov r8, r8)

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e030      	b.n	8003a2a <xTraceEntryCreate+0xb2>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <xTraceEntryCreate+0xc0>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	230b      	movs	r3, #11
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	0019      	movs	r1, r3
 80039d4:	000b      	movs	r3, r1
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	185b      	adds	r3, r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	3308      	adds	r3, #8
 80039de:	18d3      	adds	r3, r2, r3
 80039e0:	3304      	adds	r3, #4
 80039e2:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ee:	e009      	b.n	8003a04 <xTraceEntryCreate+0x8c>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	18d3      	adds	r3, r2, r3
 80039f8:	3304      	adds	r3, #4
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	3301      	adds	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d9f2      	bls.n	80039f0 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2200      	movs	r2, #0
 8003a14:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b00a      	add	sp, #40	@ 0x28
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	20003000 	.word	0x20003000
 8003a38:	20002258 	.word	0x20002258

08003a3c <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e017      	b.n	8003a7c <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <xTraceEntryFind+0x50>)
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	0013      	movs	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	18cb      	adds	r3, r1, r3
 8003a5e:	3304      	adds	r3, #4
 8003a60:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d104      	bne.n	8003a76 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e006      	b.n	8003a84 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b0f      	cmp	r3, #15
 8003a80:	d9e4      	bls.n	8003a4c <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20002258 	.word	0x20002258

08003a90 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <xTraceEntrySetSymbol+0x50>)
 8003aa4:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0019      	movs	r1, r3
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7ff fe98 	bl	80037e4 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b0d      	cmp	r3, #13
 8003ab8:	d902      	bls.n	8003ac0 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003aba:	230e      	movs	r3, #14
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	e002      	b.n	8003ac6 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f002 fe48 	bl	8006764 <memcpy>

	return TRC_SUCCESS;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	08006858 	.word	0x08006858

08003ae4 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <xTraceEntryGetCount+0x20>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2210      	movs	r2, #16
 8003af4:	1ad2      	subs	r2, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	2000225c 	.word	0x2000225c

08003b08 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <xTraceEntryGetAtIndex+0x2c>)
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	0013      	movs	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	189b      	adds	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	3308      	adds	r3, #8
 8003b22:	18cb      	adds	r3, r1, r3
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20002258 	.word	0x20002258

08003b38 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e00a      	b.n	8003b5a <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <prvEntryIndexInitialize+0x3c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	b2d9      	uxtb	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	18d3      	adds	r3, r2, r3
 8003b50:	1c0a      	adds	r2, r1, #0
 8003b52:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d9f1      	bls.n	8003b44 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 8003b60:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <prvEntryIndexInitialize+0x3c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2210      	movs	r2, #16
 8003b66:	611a      	str	r2, [r3, #16]

	return TRC_SUCCESS;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b002      	add	sp, #8
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	2000225c 	.word	0x2000225c

08003b78 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8003b80:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01f      	b.n	8003bce <prvEntryIndexTake+0x56>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	200f      	movs	r0, #15
 8003b94:	183b      	adds	r3, r7, r0
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
	pxIndexTable->uiFreeIndexCount--;
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	611a      	str	r2, [r3, #16]

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	5c8a      	ldrb	r2, [r1, r2]
 8003bb4:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8003bb6:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <prvEntryIndexTake+0x60>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	21ff      	movs	r1, #255	@ 0xff
 8003bc2:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	183a      	adds	r2, r7, r0
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	2000225c 	.word	0x2000225c

08003bdc <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <xTraceErrorInitialize+0x3c>)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <xTraceErrorInitialize+0x3c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 8003bf2:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <xTraceErrorInitialize+0x3c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <xTraceErrorInitialize+0x3c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <xTraceErrorInitialize+0x40>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2220      	movs	r2, #32
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <xTraceErrorInitialize+0x40>)
 8003c0c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20002260 	.word	0x20002260
 8003c1c:	20003000 	.word	0x20003000

08003c20 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003c28:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <xTraceWarning+0x54>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d101      	bne.n	8003c36 <xTraceWarning+0x16>
	{
		/* If not initialized */
		return TRC_FAIL;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e019      	b.n	8003c6a <xTraceWarning+0x4a>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <xTraceWarning+0x58>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	40da      	lsrs	r2, r3
 8003c42:	0013      	movs	r3, r2
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	d10e      	bne.n	8003c68 <xTraceWarning+0x48>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <xTraceWarning+0x58>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <xTraceWarning+0x58>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 f840 	bl	8003ce8 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	20003000 	.word	0x20003000
 8003c78:	20002260 	.word	0x20002260

08003c7c <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003c84:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <xTraceError+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <xTraceError+0x16>
	{
		return TRC_FAIL;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e021      	b.n	8003cd6 <xTraceError+0x5a>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <xTraceError+0x68>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11b      	bne.n	8003cd4 <xTraceError+0x58>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <xTraceError+0x68>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <xTraceError+0x68>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <xTraceError+0x68>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 f813 	bl	8003ce8 <prvTraceErrorPrint>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d103      	bne.n	8003cd0 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 8003cc8:	f001 f8c2 	bl	8004e50 <xTraceDisable>
			
			return TRC_FAIL;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e002      	b.n	8003cd6 <xTraceError+0x5a>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
		(void)xTraceDisable();
 8003cd0:	f001 f8be 	bl	8004e50 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	20003000 	.word	0x20003000
 8003ce4:	20002260 	.word	0x20002260

08003ce8 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8003cf0:	4b16      	ldr	r3, [pc, #88]	@ (8003d4c <prvTraceErrorPrint+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <prvTraceErrorPrint+0x2e>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8003cfa:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <prvTraceErrorPrint+0x64>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	001a      	movs	r2, r3
 8003d02:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <prvTraceErrorPrint+0x68>)
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f001 fa60 	bl	80051cc <xTraceStringRegister>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <prvTraceErrorPrint+0x2e>
		{
			return TRC_FAIL;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e016      	b.n	8003d44 <prvTraceErrorPrint+0x5c>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8003d16:	2314      	movs	r3, #20
 8003d18:	18fa      	adds	r2, r7, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 f818 	bl	8003d54 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d009      	beq.n	8003d3e <prvTraceErrorPrint+0x56>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <prvTraceErrorPrint+0x5a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b02      	subs	r3, #2
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d804      	bhi.n	8003d42 <prvTraceErrorPrint+0x5a>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
		break;
 8003d38:	46c0      	nop			@ (mov r8, r8)
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e002      	b.n	8003d44 <prvTraceErrorPrint+0x5c>
			return TRC_FAIL;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <prvTraceErrorPrint+0x5c>
		return TRC_FAIL;
 8003d42:	2301      	movs	r3, #1
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20002260 	.word	0x20002260
 8003d50:	0800685c 	.word	0x0800685c

08003d54 <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0e      	cmp	r3, #14
 8003d62:	d83f      	bhi.n	8003de4 <prvTraceErrorGetDescription+0x90>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	009a      	lsls	r2, r3, #2
 8003d68:	4b23      	ldr	r3, [pc, #140]	@ (8003df8 <prvTraceErrorGetDescription+0xa4>)
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	469f      	mov	pc, r3
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e03c      	b.n	8003dee <prvTraceErrorGetDescription+0x9a>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	@ (8003dfc <prvTraceErrorGetDescription+0xa8>)
 8003d78:	601a      	str	r2, [r3, #0]
		break;
 8003d7a:	e037      	b.n	8003dec <prvTraceErrorGetDescription+0x98>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <prvTraceErrorGetDescription+0xac>)
 8003d80:	601a      	str	r2, [r3, #0]
		break;
 8003d82:	e033      	b.n	8003dec <prvTraceErrorGetDescription+0x98>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <prvTraceErrorGetDescription+0xb0>)
 8003d88:	601a      	str	r2, [r3, #0]
		break;
 8003d8a:	e02f      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <prvTraceErrorGetDescription+0xb4>)
 8003d90:	601a      	str	r2, [r3, #0]
		break;
 8003d92:	e02b      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <prvTraceErrorGetDescription+0xb8>)
 8003d98:	601a      	str	r2, [r3, #0]
		break;
 8003d9a:	e027      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <prvTraceErrorGetDescription+0xbc>)
 8003da0:	601a      	str	r2, [r3, #0]
		break;
 8003da2:	e023      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <prvTraceErrorGetDescription+0xc0>)
 8003da8:	601a      	str	r2, [r3, #0]
		break;
 8003daa:	e01f      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <prvTraceErrorGetDescription+0xb8>)
 8003db0:	601a      	str	r2, [r3, #0]
		break;
 8003db2:	e01b      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <prvTraceErrorGetDescription+0xc4>)
 8003db8:	601a      	str	r2, [r3, #0]
		break;
 8003dba:	e017      	b.n	8003dec <prvTraceErrorGetDescription+0x98>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <prvTraceErrorGetDescription+0xc8>)
 8003dc0:	601a      	str	r2, [r3, #0]
		break;
 8003dc2:	e013      	b.n	8003dec <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <prvTraceErrorGetDescription+0xcc>)
 8003dc8:	601a      	str	r2, [r3, #0]
		break;
 8003dca:	e00f      	b.n	8003dec <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <prvTraceErrorGetDescription+0xd0>)
 8003dd0:	601a      	str	r2, [r3, #0]
		break;
 8003dd2:	e00b      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <prvTraceErrorGetDescription+0xd4>)
 8003dd8:	601a      	str	r2, [r3, #0]
		break;
 8003dda:	e007      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <prvTraceErrorGetDescription+0xd8>)
 8003de0:	601a      	str	r2, [r3, #0]
		break;
 8003de2:	e003      	b.n	8003dec <prvTraceErrorGetDescription+0x98>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <prvTraceErrorGetDescription+0xdc>)
 8003de8:	601a      	str	r2, [r3, #0]
		break;
 8003dea:	46c0      	nop			@ (mov r8, r8)
	}

	return TRC_SUCCESS;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	08006bd8 	.word	0x08006bd8
 8003dfc:	08006864 	.word	0x08006864
 8003e00:	08006884 	.word	0x08006884
 8003e04:	080068b0 	.word	0x080068b0
 8003e08:	080068c4 	.word	0x080068c4
 8003e0c:	080068f0 	.word	0x080068f0
 8003e10:	0800691c 	.word	0x0800691c
 8003e14:	08006938 	.word	0x08006938
 8003e18:	08006958 	.word	0x08006958
 8003e1c:	0800696c 	.word	0x0800696c
 8003e20:	08006984 	.word	0x08006984
 8003e24:	08006998 	.word	0x08006998
 8003e28:	080069b4 	.word	0x080069b4
 8003e2c:	080069cc 	.word	0x080069cc
 8003e30:	080069dc 	.word	0x080069dc

08003e34 <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <xTraceEventInitialize+0x44>)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e008      	b.n	8003e5a <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <xTraceEventInitialize+0x44>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	00d2      	lsls	r2, r2, #3
 8003e50:	2100      	movs	r1, #0
 8003e52:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f3      	beq.n	8003e48 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <xTraceEventInitialize+0x48>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2240      	movs	r2, #64	@ 0x40
 8003e66:	431a      	orrs	r2, r3
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <xTraceEventInitialize+0x48>)
 8003e6a:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	20002264 	.word	0x20002264
 8003e7c:	20003000 	.word	0x20003000

08003e80 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8003e92:	4b30      	ldr	r3, [pc, #192]	@ (8003f54 <xTraceEventCreate1+0xd4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <xTraceEventCreate1+0x26>
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f58 <xTraceEventCreate1+0xd8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <xTraceEventCreate1+0x2a>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e050      	b.n	8003f4c <xTraceEventCreate1+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	617b      	str	r3, [r7, #20]
  return(result);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	4b26      	ldr	r3, [pc, #152]	@ (8003f5c <xTraceEventCreate1+0xdc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	3201      	adds	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4b25      	ldr	r3, [pc, #148]	@ (8003f60 <xTraceEventCreate1+0xe0>)
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	4b25      	ldr	r3, [pc, #148]	@ (8003f64 <xTraceEventCreate1+0xe4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	0192      	lsls	r2, r2, #6
 8003edc:	188a      	adds	r2, r1, r2
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	0149      	lsls	r1, r1, #5
 8003eea:	430a      	orrs	r2, r1
 8003eec:	b292      	uxth	r2, r2
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <xTraceEventCreate1+0xdc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	805a      	strh	r2, [r3, #2]
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <xTraceEventCreate1+0xe8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	0a19      	lsrs	r1, r3, #8
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <xTraceEventCreate1+0xec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	061a      	lsls	r2, r3, #24
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	188a      	adds	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <xTraceEventCreate1+0xec>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <xTraceEventCreate1+0xec>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6992      	ldr	r2, [r2, #24]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <xTraceEventCreate1+0xec>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6852      	ldr	r2, [r2, #4]
 8003f26:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	220c      	movs	r2, #12
 8003f32:	0019      	movs	r1, r3
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7ff fae5 	bl	8003504 <SEGGER_RTT_Write>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f383 8810 	msr	PRIMASK, r3
}
 8003f48:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b008      	add	sp, #32
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20003000 	.word	0x20003000
 8003f58:	20002ff8 	.word	0x20002ff8
 8003f5c:	20002264 	.word	0x20002264
 8003f60:	20002274 	.word	0x20002274
 8003f64:	2000226c 	.word	0x2000226c
 8003f68:	e000e018 	.word	0xe000e018
 8003f6c:	20003008 	.word	0x20003008

08003f70 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8003f84:	4b31      	ldr	r3, [pc, #196]	@ (800404c <xTraceEventCreate2+0xdc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <xTraceEventCreate2+0x28>
 8003f8e:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <xTraceEventCreate2+0xe0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <xTraceEventCreate2+0x2c>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e053      	b.n	8004044 <xTraceEventCreate2+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	4b28      	ldr	r3, [pc, #160]	@ (8004054 <xTraceEventCreate2+0xe4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	3201      	adds	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <xTraceEventCreate2+0xe8>)
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	4b26      	ldr	r3, [pc, #152]	@ (800405c <xTraceEventCreate2+0xec>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	2314      	movs	r3, #20
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	0192      	lsls	r2, r2, #6
 8003fce:	188a      	adds	r2, r1, r2
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2180      	movs	r1, #128	@ 0x80
 8003fda:	0189      	lsls	r1, r1, #6
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <xTraceEventCreate2+0xe4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	b292      	uxth	r2, r2
 8003fec:	805a      	strh	r2, [r3, #2]
 8003fee:	4b1c      	ldr	r3, [pc, #112]	@ (8004060 <xTraceEventCreate2+0xf0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	0a19      	lsrs	r1, r3, #8
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8004064 <xTraceEventCreate2+0xf4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	061a      	lsls	r2, r3, #24
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	188a      	adds	r2, r1, r2
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	4b17      	ldr	r3, [pc, #92]	@ (8004064 <xTraceEventCreate2+0xf4>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b16      	ldr	r3, [pc, #88]	@ (8004064 <xTraceEventCreate2+0xf4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6992      	ldr	r2, [r2, #24]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <xTraceEventCreate2+0xf4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6852      	ldr	r2, [r2, #4]
 8004018:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2210      	movs	r2, #16
 800402a:	0019      	movs	r1, r3
 800402c:	2001      	movs	r0, #1
 800402e:	f7ff fa69 	bl	8003504 <SEGGER_RTT_Write>
 8004032:	0003      	movs	r3, r0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f383 8810 	msr	PRIMASK, r3
}
 8004040:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b00a      	add	sp, #40	@ 0x28
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20003000 	.word	0x20003000
 8004050:	20002ff8 	.word	0x20002ff8
 8004054:	20002264 	.word	0x20002264
 8004058:	20002274 	.word	0x20002274
 800405c:	2000226c 	.word	0x2000226c
 8004060:	e000e018 	.word	0xe000e018
 8004064:	20003008 	.word	0x20003008

08004068 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	@ 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 800407e:	4b33      	ldr	r3, [pc, #204]	@ (800414c <xTraceEventCreate3+0xe4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4013      	ands	r3, r2
 8004086:	d004      	beq.n	8004092 <xTraceEventCreate3+0x2a>
 8004088:	4b31      	ldr	r3, [pc, #196]	@ (8004150 <xTraceEventCreate3+0xe8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <xTraceEventCreate3+0x2e>
 8004092:	2301      	movs	r3, #1
 8004094:	e056      	b.n	8004144 <xTraceEventCreate3+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	61fb      	str	r3, [r7, #28]
  return(result);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a0:	2301      	movs	r3, #1
 80040a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	f383 8810 	msr	PRIMASK, r3
}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	4b29      	ldr	r3, [pc, #164]	@ (8004154 <xTraceEventCreate3+0xec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	3201      	adds	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <xTraceEventCreate3+0xf0>)
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	4b28      	ldr	r3, [pc, #160]	@ (800415c <xTraceEventCreate3+0xf4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	2314      	movs	r3, #20
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	0192      	lsls	r2, r2, #6
 80040c8:	188a      	adds	r2, r1, r2
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	21c0      	movs	r1, #192	@ 0xc0
 80040d4:	0189      	lsls	r1, r1, #6
 80040d6:	430a      	orrs	r2, r1
 80040d8:	b292      	uxth	r2, r2
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <xTraceEventCreate3+0xec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	b292      	uxth	r2, r2
 80040e6:	805a      	strh	r2, [r3, #2]
 80040e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <xTraceEventCreate3+0xf8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	0a19      	lsrs	r1, r3, #8
 80040f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004164 <xTraceEventCreate3+0xfc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	061a      	lsls	r2, r3, #24
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	188a      	adds	r2, r1, r2
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <xTraceEventCreate3+0xfc>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <xTraceEventCreate3+0xfc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6992      	ldr	r2, [r2, #24]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <xTraceEventCreate3+0xfc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6852      	ldr	r2, [r2, #4]
 8004112:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2214      	movs	r2, #20
 800412a:	0019      	movs	r1, r3
 800412c:	2001      	movs	r0, #1
 800412e:	f7ff f9e9 	bl	8003504 <SEGGER_RTT_Write>
 8004132:	0003      	movs	r3, r0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b00a      	add	sp, #40	@ 0x28
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20003000 	.word	0x20003000
 8004150:	20002ff8 	.word	0x20002ff8
 8004154:	20002264 	.word	0x20002264
 8004158:	20002274 	.word	0x20002274
 800415c:	2000226c 	.word	0x2000226c
 8004160:	e000e018 	.word	0xe000e018
 8004164:	20003008 	.word	0x20003008

08004168 <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 800417e:	4b35      	ldr	r3, [pc, #212]	@ (8004254 <xTraceEventCreate4+0xec>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	d004      	beq.n	8004192 <xTraceEventCreate4+0x2a>
 8004188:	4b33      	ldr	r3, [pc, #204]	@ (8004258 <xTraceEventCreate4+0xf0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <xTraceEventCreate4+0x2e>
 8004192:	2301      	movs	r3, #1
 8004194:	e059      	b.n	800424a <xTraceEventCreate4+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	61fb      	str	r3, [r7, #28]
  return(result);
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a0:	2301      	movs	r3, #1
 80041a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <xTraceEventCreate4+0xf4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	3201      	adds	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <xTraceEventCreate4+0xf8>)
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004264 <xTraceEventCreate4+0xfc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	2314      	movs	r3, #20
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	0192      	lsls	r2, r2, #6
 80041c8:	188a      	adds	r2, r1, r2
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2180      	movs	r1, #128	@ 0x80
 80041d4:	01c9      	lsls	r1, r1, #7
 80041d6:	430a      	orrs	r2, r1
 80041d8:	b292      	uxth	r2, r2
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <xTraceEventCreate4+0xf4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	b292      	uxth	r2, r2
 80041e6:	805a      	strh	r2, [r3, #2]
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <xTraceEventCreate4+0x100>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	0a19      	lsrs	r1, r3, #8
 80041f0:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <xTraceEventCreate4+0x104>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	061a      	lsls	r2, r3, #24
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	188a      	adds	r2, r1, r2
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <xTraceEventCreate4+0x104>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <xTraceEventCreate4+0x104>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6992      	ldr	r2, [r2, #24]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4b17      	ldr	r3, [pc, #92]	@ (800426c <xTraceEventCreate4+0x104>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6852      	ldr	r2, [r2, #4]
 8004212:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2218      	movs	r2, #24
 8004230:	0019      	movs	r1, r3
 8004232:	2001      	movs	r0, #1
 8004234:	f7ff f966 	bl	8003504 <SEGGER_RTT_Write>
 8004238:	0003      	movs	r3, r0
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004248:	2300      	movs	r3, #0
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b00a      	add	sp, #40	@ 0x28
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	20003000 	.word	0x20003000
 8004258:	20002ff8 	.word	0x20002ff8
 800425c:	20002264 	.word	0x20002264
 8004260:	20002274 	.word	0x20002274
 8004264:	2000226c 	.word	0x2000226c
 8004268:	e000e018 	.word	0xe000e018
 800426c:	20003008 	.word	0x20003008

08004270 <xTraceEventCreateRawBlocking>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateRawBlocking(const void* pxSource, uint32_t ulSize)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	int32_t iBytesCommitted = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
	void* pxBuffer = (void*)0;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	ulSize = TRC_ALIGN_CEIL(ulSize, sizeof(TraceUnsignedBaseType_t));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	3303      	adds	r3, #3
 8004286:	2203      	movs	r2, #3
 8004288:	4393      	bics	r3, r2
 800428a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428c:	f3ef 8310 	mrs	r3, PRIMASK
 8004290:	617b      	str	r3, [r7, #20]
  return(result);
 8004292:	697b      	ldr	r3, [r7, #20]

	TRACE_ENTER_CRITICAL_SECTION();
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			@ (mov r8, r8)

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 80042a2:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <xTraceEventCreateRawBlocking+0x8c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	3201      	adds	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
	while (xTraceStreamPortAllocate(ulSize, (void**)&pxBuffer) == TRC_FAIL) {}
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	4b14      	ldr	r3, [pc, #80]	@ (8004300 <xTraceEventCreateRawBlocking+0x90>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <xTraceEventCreateRawBlocking+0x94>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	3301      	adds	r3, #1
 80042ba:	019b      	lsls	r3, r3, #6
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	60bb      	str	r3, [r7, #8]

	memcpy(pxBuffer, pxSource, ulSize);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f002 fa4c 	bl	8006764 <memcpy>
	while (xTraceStreamPortCommit(pxBuffer, ulSize, &iBytesCommitted) == TRC_FAIL) {}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	0019      	movs	r1, r3
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7ff f915 	bl	8003504 <SEGGER_RTT_Write>
 80042da:	0003      	movs	r3, r0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	2300      	movs	r3, #0
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d0f4      	beq.n	80042ce <xTraceEventCreateRawBlocking+0x5e>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
	(void)iBytesCommitted;

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b008      	add	sp, #32
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	20002264 	.word	0x20002264
 8004300:	20002274 	.word	0x20002274
 8004304:	2000226c 	.word	0x2000226c

08004308 <xTraceEventCreateDataOffline0>:

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3303      	adds	r3, #3
 8004320:	2203      	movs	r2, #3
 8004322:	4393      	bics	r3, r2
 8004324:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3308      	adds	r3, #8
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d901      	bls.n	8004332 <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 800432e:	2338      	movs	r3, #56	@ 0x38
 8004330:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	61fb      	str	r3, [r7, #28]
  return(result);
 8004338:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
 800433c:	2301      	movs	r3, #1
 800433e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <xTraceEventCreateDataOffline0+0xe8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	3201      	adds	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	4b28      	ldr	r3, [pc, #160]	@ (80043f4 <xTraceEventCreateDataOffline0+0xec>)
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	4b28      	ldr	r3, [pc, #160]	@ (80043f8 <xTraceEventCreateDataOffline0+0xf0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	2314      	movs	r3, #20
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	0192      	lsls	r2, r2, #6
 8004364:	188a      	adds	r2, r1, r2
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	b21a      	sxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	b29b      	uxth	r3, r3
 8004372:	031b      	lsls	r3, r3, #12
 8004374:	b21b      	sxth	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	b21a      	sxth	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	b292      	uxth	r2, r2
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <xTraceEventCreateDataOffline0+0xe8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	b292      	uxth	r2, r2
 800438a:	805a      	strh	r2, [r3, #2]
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <xTraceEventCreateDataOffline0+0xf4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	0a19      	lsrs	r1, r3, #8
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <xTraceEventCreateDataOffline0+0xf8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	188a      	adds	r2, r1, r2
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <xTraceEventCreateDataOffline0+0xf8>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <xTraceEventCreateDataOffline0+0xf8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6992      	ldr	r2, [r2, #24]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <xTraceEventCreateDataOffline0+0xf8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3308      	adds	r3, #8
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f002 f9cf 	bl	8006764 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3308      	adds	r3, #8
 80043cc:	001a      	movs	r2, r3
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7ff f898 	bl	8003504 <SEGGER_RTT_Write>
 80043d4:	0003      	movs	r3, r0
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b00a      	add	sp, #40	@ 0x28
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	20002264 	.word	0x20002264
 80043f4:	20002274 	.word	0x20002274
 80043f8:	2000226c 	.word	0x2000226c
 80043fc:	e000e018 	.word	0xe000e018
 8004400:	20003008 	.word	0x20003008

08004404 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3303      	adds	r3, #3
 800441e:	2203      	movs	r2, #3
 8004420:	4393      	bics	r3, r2
 8004422:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	2b40      	cmp	r3, #64	@ 0x40
 800442a:	d901      	bls.n	8004430 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 800442c:	2334      	movs	r3, #52	@ 0x34
 800442e:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8004430:	4b36      	ldr	r3, [pc, #216]	@ (800450c <xTraceEventCreateData1+0x108>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2201      	movs	r2, #1
 8004436:	4013      	ands	r3, r2
 8004438:	d004      	beq.n	8004444 <xTraceEventCreateData1+0x40>
 800443a:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <xTraceEventCreateData1+0x10c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <xTraceEventCreateData1+0x44>
 8004444:	2301      	movs	r3, #1
 8004446:	e05d      	b.n	8004504 <xTraceEventCreateData1+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	61fb      	str	r3, [r7, #28]
  return(result);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
 8004452:	2301      	movs	r3, #1
 8004454:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <xTraceEventCreateData1+0x110>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	3201      	adds	r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	4b2b      	ldr	r3, [pc, #172]	@ (8004518 <xTraceEventCreateData1+0x114>)
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <xTraceEventCreateData1+0x118>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2314      	movs	r3, #20
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	0192      	lsls	r2, r2, #6
 800447a:	188a      	adds	r2, r1, r2
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	b21a      	sxth	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	3304      	adds	r3, #4
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	b29b      	uxth	r3, r3
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	b21b      	sxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b21a      	sxth	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	b292      	uxth	r2, r2
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <xTraceEventCreateData1+0x110>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	b292      	uxth	r2, r2
 80044a2:	805a      	strh	r2, [r3, #2]
 80044a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <xTraceEventCreateData1+0x11c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	0a19      	lsrs	r1, r3, #8
 80044ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <xTraceEventCreateData1+0x120>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	188a      	adds	r2, r1, r2
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <xTraceEventCreateData1+0x120>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <xTraceEventCreateData1+0x120>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6992      	ldr	r2, [r2, #24]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <xTraceEventCreateData1+0x120>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6852      	ldr	r2, [r2, #4]
 80044ce:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	330c      	adds	r3, #12
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	0018      	movs	r0, r3
 80044e0:	f002 f940 	bl	8006764 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 80044e4:	6979      	ldr	r1, [r7, #20]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	001a      	movs	r2, r3
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7ff f809 	bl	8003504 <SEGGER_RTT_Write>
 80044f2:	0003      	movs	r3, r0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f383 8810 	msr	PRIMASK, r3
}
 8004500:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b00a      	add	sp, #40	@ 0x28
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20003000 	.word	0x20003000
 8004510:	20002ff8 	.word	0x20002ff8
 8004514:	20002264 	.word	0x20002264
 8004518:	20002274 	.word	0x20002274
 800451c:	2000226c 	.word	0x2000226c
 8004520:	e000e018 	.word	0xe000e018
 8004524:	20003008 	.word	0x20003008

08004528 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 8004530:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <xTraceExtensionInitialize+0x30>)
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 8004536:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <xTraceExtensionInitialize+0x30>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	22fd      	movs	r2, #253	@ 0xfd
 800453c:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 800453e:	4b07      	ldr	r3, [pc, #28]	@ (800455c <xTraceExtensionInitialize+0x34>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	0052      	lsls	r2, r2, #1
 8004546:	431a      	orrs	r2, r3
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <xTraceExtensionInitialize+0x34>)
 800454a:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 800454c:	2300      	movs	r3, #0
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b002      	add	sp, #8
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	20002268 	.word	0x20002268
 800455c:	20003000 	.word	0x20003000

08004560 <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	@ 0x30
 8004564:	af04      	add	r7, sp, #16
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 800456e:	2114      	movs	r1, #20
 8004570:	187b      	adds	r3, r7, r1
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	601a      	str	r2, [r3, #0]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 8004576:	187b      	adds	r3, r7, r1
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 800457c:	187b      	adds	r3, r7, r1
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	609a      	str	r2, [r3, #8]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	2380      	movs	r3, #128	@ 0x80
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	187b      	adds	r3, r7, r1
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2303      	movs	r3, #3
 8004594:	2100      	movs	r1, #0
 8004596:	20f2      	movs	r0, #242	@ 0xf2
 8004598:	f000 f8f2 	bl	8004780 <xTraceObjectRegisterInternal>
 800459c:	0003      	movs	r3, r0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b008      	add	sp, #32
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e024      	b.n	8004606 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d904      	bls.n	80045e8 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <xTraceHeapAlloc+0x52>
 80045f4:	2338      	movs	r3, #56	@ 0x38
 80045f6:	e000      	b.n	80045fa <xTraceHeapAlloc+0x54>
 80045f8:	23e9      	movs	r3, #233	@ 0xe9
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff fcb6 	bl	8003f70 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8004604:	2300      	movs	r3, #0
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b006      	add	sp, #24
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8004618:	4b1a      	ldr	r3, [pc, #104]	@ (8004684 <xTraceISRInitialize+0x74>)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e020      	b.n	8004666 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8004624:	4b17      	ldr	r3, [pc, #92]	@ (8004684 <xTraceISRInitialize+0x74>)
 8004626:	6819      	ldr	r1, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	0013      	movs	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	189b      	adds	r3, r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	18cb      	adds	r3, r1, r3
 8004634:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e007      	b.n	800464c <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	2100      	movs	r1, #0
 8004644:	50d1      	str	r1, [r2, r3]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3301      	adds	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b07      	cmp	r3, #7
 8004650:	d9f4      	bls.n	800463c <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	4252      	negs	r2, r2
 8004658:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3301      	adds	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0db      	beq.n	8004624 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <xTraceISRInitialize+0x78>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2280      	movs	r2, #128	@ 0x80
 8004672:	0152      	lsls	r2, r2, #5
 8004674:	431a      	orrs	r2, r3
 8004676:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <xTraceISRInitialize+0x78>)
 8004678:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b006      	add	sp, #24
 8004682:	bd80      	pop	{r7, pc}
 8004684:	2000226c 	.word	0x2000226c
 8004688:	20003000 	.word	0x20003000

0800468c <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 800469a:	2301      	movs	r3, #1
 800469c:	e00b      	b.n	80046b6 <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 800469e:	4b08      	ldr	r3, [pc, #32]	@ (80046c0 <xTraceKernelPortInitialize+0x34>)
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <xTraceKernelPortInitialize+0x34>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 80046ac:	4b04      	ldr	r3, [pc, #16]	@ (80046c0 <xTraceKernelPortInitialize+0x34>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2200      	movs	r2, #0
 80046b2:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b002      	add	sp, #8
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	20002270 	.word	0x20002270

080046c4 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <xTraceKernelPortEnable+0x64>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <xTraceKernelPortEnable+0x26>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 80046d4:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <xTraceKernelPortEnable+0x64>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	001a      	movs	r2, r3
 80046da:	23e0      	movs	r3, #224	@ 0xe0
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	4813      	ldr	r0, [pc, #76]	@ (800472c <xTraceKernelPortEnable+0x68>)
 80046e0:	9200      	str	r2, [sp, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2100      	movs	r1, #0
 80046e6:	f7ff ff3b 	bl	8004560 <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 80046ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004728 <xTraceKernelPortEnable+0x64>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d115      	bne.n	8004720 <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <xTraceKernelPortEnable+0x64>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	490d      	ldr	r1, [pc, #52]	@ (8004730 <xTraceKernelPortEnable+0x6c>)
 80046fc:	480d      	ldr	r0, [pc, #52]	@ (8004734 <xTraceKernelPortEnable+0x70>)
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	2301      	movs	r3, #1
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	2280      	movs	r2, #128	@ 0x80
 8004708:	f7fc fefb 	bl	8001502 <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <xTraceKernelPortEnable+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8004716:	2006      	movs	r0, #6
 8004718:	f7ff fab0 	bl	8003c7c <xTraceError>

			return TRC_FAIL;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20002270 	.word	0x20002270
 800472c:	080069f8 	.word	0x080069f8
 8004730:	08006a04 	.word	0x08006a04
 8004734:	08004739 	.word	0x08004739

08004738 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8004740:	f000 fb8e 	bl	8004e60 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8004744:	2032      	movs	r0, #50	@ 0x32
 8004746:	f7fd f8d1 	bl	80018ec <vTaskDelay>
		xTraceTzCtrl();
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	e7f8      	b.n	8004740 <TzCtrl+0x8>

0800474e <vTraceSetSemaphoreName>:
{
	xTraceObjectSetNameWithoutHandle(pvQueue, szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
	xTraceObjectSetNameWithoutHandle(pvSemaphore, szName);
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f000 f917 	bl	8004992 <xTraceObjectSetNameWithoutHandle>
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b002      	add	sp, #8
 800476a:	bd80      	pop	{r7, pc}

0800476c <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 8004770:	4b02      	ldr	r3, [pc, #8]	@ (800477c <xTraceKernelPortGetSystemHeapHandle+0x10>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20002270 	.word	0x20002270

08004780 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b091      	sub	sp, #68	@ 0x44
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 8004796:	633b      	str	r3, [r7, #48]	@ 0x30
 8004798:	2301      	movs	r3, #1
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)

	if (pvObject != (void*)0)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d019      	beq.n	80047de <xTraceObjectRegisterInternal+0x5e>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 80047aa:	2318      	movs	r3, #24
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff f8e2 	bl	8003978 <xTraceEntryCreate>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d104      	bne.n	80047c2 <xTraceObjectRegisterInternal+0x42>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	e000      	b.n	80047c4 <xTraceObjectRegisterInternal+0x44>
 80047c2:	2301      	movs	r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <xTraceObjectRegisterInternal+0x58>
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e089      	b.n	80048ec <xTraceObjectRegisterInternal+0x16c>
		}
		
		pvAddress = pvObject;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e012      	b.n	8004804 <xTraceObjectRegisterInternal+0x84>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 80047de:	2318      	movs	r3, #24
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	0018      	movs	r0, r3
 80047e4:	f7ff f8c8 	bl	8003978 <xTraceEntryCreate>
 80047e8:	0003      	movs	r3, r0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <xTraceObjectRegisterInternal+0x7e>
 80047ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e076      	b.n	80048ec <xTraceObjectRegisterInternal+0x16c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
 8004808:	e00d      	b.n	8004826 <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 800480a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004810:	18d3      	adds	r3, r2, r3
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	18cb      	adds	r3, r1, r3
 800481c:	3304      	adds	r3, #4
 800481e:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < uxStateCount; i++)
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	3301      	adds	r3, #1
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
 8004826:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d3ed      	bcc.n	800480a <xTraceObjectRegisterInternal+0x8a>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	6919      	ldr	r1, [r3, #16]
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004836:	430a      	orrs	r2, r1
 8004838:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <xTraceObjectRegisterInternal+0xe6>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <xTraceObjectRegisterInternal+0xe6>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	0011      	movs	r1, r2
 8004860:	0018      	movs	r0, r3
 8004862:	f000 f847 	bl	80048f4 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d02b      	beq.n	80048c4 <xTraceObjectRegisterInternal+0x144>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d839      	bhi.n	80048e6 <xTraceObjectRegisterInternal+0x166>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d01a      	beq.n	80048ae <xTraceObjectRegisterInternal+0x12e>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d833      	bhi.n	80048e6 <xTraceObjectRegisterInternal+0x166>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <xTraceObjectRegisterInternal+0x10c>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d008      	beq.n	800489c <xTraceObjectRegisterInternal+0x11c>
 800488a:	e02c      	b.n	80048e6 <xTraceObjectRegisterInternal+0x166>
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	001a      	movs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0011      	movs	r1, r2
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff faf3 	bl	8003e80 <xTraceEventCreate1>
			break;
 800489a:	e026      	b.n	80048ea <xTraceObjectRegisterInternal+0x16a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	0019      	movs	r1, r3
 80048a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff fb62 	bl	8003f70 <xTraceEventCreate2>
			break;
 80048ac:	e01d      	b.n	80048ea <xTraceObjectRegisterInternal+0x16a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	0019      	movs	r1, r3
 80048b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b8:	3304      	adds	r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fbd3 	bl	8004068 <xTraceEventCreate3>
			break;
 80048c2:	e012      	b.n	80048ea <xTraceObjectRegisterInternal+0x16a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	001c      	movs	r4, r3
 80048c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ce:	3304      	adds	r3, #4
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d4:	3308      	adds	r3, #8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	000b      	movs	r3, r1
 80048de:	0021      	movs	r1, r4
 80048e0:	f7ff fc42 	bl	8004168 <xTraceEventCreate4>
			break;
 80048e4:	e001      	b.n	80048ea <xTraceObjectRegisterInternal+0x16a>
		default:
			return TRC_FAIL;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xTraceObjectRegisterInternal+0x16c>
			break;
	}

	return TRC_SUCCESS;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b00f      	add	sp, #60	@ 0x3c
 80048f2:	bd90      	pop	{r4, r7, pc}

080048f4 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004908:	4b14      	ldr	r3, [pc, #80]	@ (800495c <xTraceObjectSetName+0x68>)
 800490a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e002      	b.n	800491e <xTraceObjectSetName+0x2a>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3301      	adds	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	18d3      	adds	r3, r2, r3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <xTraceObjectSetName+0x3c>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b7f      	cmp	r3, #127	@ 0x7f
 800492e:	d9f3      	bls.n	8004918 <xTraceObjectSetName+0x24>

	uiLength = i;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0019      	movs	r1, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3301      	adds	r3, #1
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	2003      	movs	r0, #3
 8004940:	f7ff fd60 	bl	8004404 <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff f8a0 	bl	8003a90 <xTraceEntrySetSymbol>
 8004950:	0003      	movs	r3, r0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	08006a0c 	.word	0x08006a0c

08004960 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af04      	add	r7, sp, #16
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	2314      	movs	r3, #20
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	2300      	movs	r3, #0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	003b      	movs	r3, r7
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2301      	movs	r3, #1
 8004984:	f7ff fefc 	bl	8004780 <xTraceObjectRegisterInternal>
 8004988:	0003      	movs	r3, r0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b006      	add	sp, #24
 8004990:	bd80      	pop	{r7, pc}

08004992 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 8004992:	b590      	push	{r4, r7, lr}
 8004994:	b08b      	sub	sp, #44	@ 0x2c
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8310 	mrs	r3, PRIMASK
 80049a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80049a2:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a6:	2301      	movs	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f383 8810 	msr	PRIMASK, r3
}
 80049b0:	46c0      	nop			@ (mov r8, r8)

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 80049b2:	240c      	movs	r4, #12
 80049b4:	193a      	adds	r2, r7, r4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f83e 	bl	8003a3c <xTraceEntryFind>
 80049c0:	0003      	movs	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d115      	bne.n	80049f2 <xTraceObjectSetNameWithoutHandle+0x60>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 80049c6:	193b      	adds	r3, r7, r4
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fe ffd5 	bl	8003978 <xTraceEntryCreate>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d104      	bne.n	80049dc <xTraceObjectSetNameWithoutHandle+0x4a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <xTraceObjectSetNameWithoutHandle+0x4c>
 80049dc:	2301      	movs	r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <xTraceObjectSetNameWithoutHandle+0x60>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00e      	b.n	8004a10 <xTraceObjectSetNameWithoutHandle+0x7e>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	0011      	movs	r1, r2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7ff ff7b 	bl	80048f4 <xTraceObjectSetName>
 80049fe:	0003      	movs	r3, r0
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f383 8810 	msr	PRIMASK, r3
}
 8004a0c:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b00b      	add	sp, #44	@ 0x2c
 8004a16:	bd90      	pop	{r4, r7, pc}

08004a18 <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <xTraceStaticBufferInitialize+0x28>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 8004a26:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <xTraceStaticBufferInitialize+0x2c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2280      	movs	r2, #128	@ 0x80
 8004a2c:	02d2      	lsls	r2, r2, #11
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <xTraceStaticBufferInitialize+0x2c>)
 8004a32:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b002      	add	sp, #8
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	20002274 	.word	0x20002274
 8004a44:	20003000 	.word	0x20003000

08004a48 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 8004a4e:	4b74      	ldr	r3, [pc, #464]	@ (8004c20 <xTraceInitialize+0x1d8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e0de      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	TRC_PORT_SPECIFIC_INIT();
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 8004a5a:	4b72      	ldr	r3, [pc, #456]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004a5c:	4a72      	ldr	r2, [pc, #456]	@ (8004c28 <xTraceInitialize+0x1e0>)
 8004a5e:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 8004a60:	4b70      	ldr	r3, [pc, #448]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8004a68:	4b6e      	ldr	r3, [pc, #440]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e009      	b.n	8004a8a <xTraceInitialize+0x42>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 8004a76:	4b6b      	ldr	r3, [pc, #428]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	3202      	adds	r2, #2
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	2100      	movs	r1, #0
 8004a82:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3301      	adds	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f2      	beq.n	8004a76 <xTraceInitialize+0x2e>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 8004a90:	4b64      	ldr	r3, [pc, #400]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fe ff04 	bl	80038a4 <xTraceEntryIndexTableInitialize>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <xTraceInitialize+0x5e>
	{
		return TRC_FAIL;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0b8      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	332c      	adds	r3, #44	@ 0x2c
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 f8cd 	bl	8004c4c <xTraceHeaderInitialize>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <xTraceInitialize+0x74>
	{
		return TRC_FAIL;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0ad      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 8004abc:	4b59      	ldr	r3, [pc, #356]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	334c      	adds	r3, #76	@ 0x4c
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7fe fefe 	bl	80038c4 <xTraceEntryTableInitialize>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <xTraceInitialize+0x8a>
	{
		return TRC_FAIL;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0a2      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 8004ad2:	4b54      	ldr	r3, [pc, #336]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	22a6      	movs	r2, #166	@ 0xa6
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	4694      	mov	ip, r2
 8004adc:	4463      	add	r3, ip
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 fc20 	bl	8005324 <xTraceTimestampInitialize>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e094      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 8004aee:	4b4d      	ldr	r3, [pc, #308]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4e      	ldr	r2, [pc, #312]	@ (8004c2c <xTraceInitialize+0x1e4>)
 8004af4:	4694      	mov	ip, r2
 8004af6:	4463      	add	r3, ip
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fe fe03 	bl	8003704 <xTraceCounterInitialize>
 8004afe:	0003      	movs	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <xTraceInitialize+0xc0>
	{
		return TRC_FAIL;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e087      	b.n	8004c18 <xTraceInitialize+0x1d0>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 8004b08:	4b46      	ldr	r3, [pc, #280]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	22ad      	movs	r2, #173	@ 0xad
 8004b0e:	0092      	lsls	r2, r2, #2
 8004b10:	4694      	mov	ip, r2
 8004b12:	4463      	add	r3, ip
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7fe fdb1 	bl	800367c <xTraceStreamPortInitialize>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <xTraceInitialize+0xdc>
	{
		return TRC_FAIL;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e079      	b.n	8004c18 <xTraceInitialize+0x1d0>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 8004b24:	4b3f      	ldr	r3, [pc, #252]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a41      	ldr	r2, [pc, #260]	@ (8004c30 <xTraceInitialize+0x1e8>)
 8004b2a:	4694      	mov	ip, r2
 8004b2c:	4463      	add	r3, ip
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe fe04 	bl	800373c <xTraceDiagnosticsInitialize>
 8004b34:	0003      	movs	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <xTraceInitialize+0xf6>
	{
		return TRC_FAIL;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06c      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3c      	ldr	r2, [pc, #240]	@ (8004c34 <xTraceInitialize+0x1ec>)
 8004b44:	4694      	mov	ip, r2
 8004b46:	4463      	add	r3, ip
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff fced 	bl	8004528 <xTraceExtensionInitialize>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <xTraceInitialize+0x110>
	{
		return TRC_FAIL;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e05f      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 8004b58:	4b32      	ldr	r3, [pc, #200]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a36      	ldr	r2, [pc, #216]	@ (8004c38 <xTraceInitialize+0x1f0>)
 8004b5e:	4694      	mov	ip, r2
 8004b60:	4463      	add	r3, ip
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff ff58 	bl	8004a18 <xTraceStaticBufferInitialize>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <xTraceInitialize+0x12a>
	{
		return TRC_FAIL;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e052      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8004b72:	4b2c      	ldr	r3, [pc, #176]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a31      	ldr	r2, [pc, #196]	@ (8004c3c <xTraceInitialize+0x1f4>)
 8004b78:	4694      	mov	ip, r2
 8004b7a:	4463      	add	r3, ip
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7ff f959 	bl	8003e34 <xTraceEventInitialize>
 8004b82:	0003      	movs	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <xTraceInitialize+0x144>
	{
		return TRC_FAIL;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e045      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <xTraceInitialize+0x14e>
	{
		return TRC_FAIL;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e040      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8004b96:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22d2      	movs	r2, #210	@ 0xd2
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	4694      	mov	ip, r2
 8004ba0:	4463      	add	r3, ip
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7ff f81a 	bl	8003bdc <xTraceErrorInitialize>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <xTraceInitialize+0x16a>
	{
		return TRC_FAIL;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e032      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a22      	ldr	r2, [pc, #136]	@ (8004c40 <xTraceInitialize+0x1f8>)
 8004bb8:	4694      	mov	ip, r2
 8004bba:	4463      	add	r3, ip
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7ff fd27 	bl	8004610 <xTraceISRInitialize>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <xTraceInitialize+0x184>
	{
		return TRC_FAIL;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e025      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 8004bcc:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c44 <xTraceInitialize+0x1fc>)
 8004bd2:	4694      	mov	ip, r2
 8004bd4:	4463      	add	r3, ip
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fb30 	bl	800523c <xTraceTaskInitialize>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <xTraceInitialize+0x19e>
	{
		return TRC_FAIL;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e018      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	@ (8004c48 <xTraceInitialize+0x200>)
 8004bec:	4694      	mov	ip, r2
 8004bee:	4463      	add	r3, ip
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7ff fd4b 	bl	800468c <xTraceKernelPortInitialize>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <xTraceInitialize+0x1b8>
	{
		return TRC_FAIL;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e00b      	b.n	8004c18 <xTraceInitialize+0x1d0>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 8004c00:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <xTraceInitialize+0x1dc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4252      	negs	r2, r2
 8004c08:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <xTraceInitialize+0x1d8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	431a      	orrs	r2, r3
 8004c12:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <xTraceInitialize+0x1d8>)
 8004c14:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20003000 	.word	0x20003000
 8004c24:	20002ff8 	.word	0x20002ff8
 8004c28:	20002278 	.word	0x20002278
 8004c2c:	00000d7c 	.word	0x00000d7c
 8004c30:	00000d64 	.word	0x00000d64
 8004c34:	00000d78 	.word	0x00000d78
 8004c38:	00000ad4 	.word	0x00000ad4
 8004c3c:	00000d14 	.word	0x00000d14
 8004c40:	00000d2c 	.word	0x00000d2c
 8004c44:	00000d5c 	.word	0x00000d5c
 8004c48:	00000d54 	.word	0x00000d54

08004c4c <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8004c54:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <xTraceHeaderInitialize+0x110>)
 8004c56:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e078      	b.n	8004d54 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 8004c62:	2382      	movs	r3, #130	@ 0x82
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 faa2 	bl	80051b0 <prvVerifySizeAlignment>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <xTraceHeaderInitialize+0x2a>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06e      	b.n	8004d54 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 8004c76:	2008      	movs	r0, #8
 8004c78:	f000 fa9a 	bl	80051b0 <prvVerifySizeAlignment>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <xTraceHeaderInitialize+0x3a>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e066      	b.n	8004d54 <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 8004c86:	2008      	movs	r0, #8
 8004c88:	f000 fa92 	bl	80051b0 <prvVerifySizeAlignment>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <xTraceHeaderInitialize+0x4a>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e05e      	b.n	8004d54 <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8004c96:	4b32      	ldr	r3, [pc, #200]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 8004c9c:	4b30      	ldr	r3, [pc, #192]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a30      	ldr	r2, [pc, #192]	@ (8004d64 <xTraceHeaderInitialize+0x118>)
 8004ca2:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	220e      	movs	r2, #14
 8004caa:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 8004cac:	4b2c      	ldr	r3, [pc, #176]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <xTraceHeaderInitialize+0x11c>)
 8004cb2:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e013      	b.n	8004ce2 <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	18d1      	adds	r1, r2, r3
 8004cc0:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	7809      	ldrb	r1, [r1, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	3318      	adds	r3, #24
 8004ccc:	1c0a      	adds	r2, r1, #0
 8004cce:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d9e8      	bls.n	8004cba <xTraceHeaderInitialize+0x6e>
 8004ce8:	e000      	b.n	8004cec <xTraceHeaderInitialize+0xa0>
		{
			break;
 8004cea:	46c0      	nop			@ (mov r8, r8)
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 8004cec:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 8004cfc:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 8004d0c:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	21c0      	movs	r1, #192	@ 0xc0
 8004d18:	0089      	lsls	r1, r1, #2
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6892      	ldr	r2, [r2, #8]
 8004d38:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 8004d3a:	f000 f8e1 	bl	8004f00 <prvIs64bit>
 8004d3e:	1e03      	subs	r3, r0, #0
 8004d40:	d007      	beq.n	8004d52 <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <xTraceHeaderInitialize+0x114>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	0018      	movs	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b004      	add	sp, #16
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	08006a10 	.word	0x08006a10
 8004d60:	20002ffc 	.word	0x20002ffc
 8004d64:	50534600 	.word	0x50534600
 8004d68:	00001aa1 	.word	0x00001aa1

08004d6c <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 8004d74:	2310      	movs	r3, #16
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	0018      	movs	r0, r3
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	2100      	movs	r1, #0
 8004d80:	f001 fcc4 	bl	800670c <memset>
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 8004d84:	f7ff fe60 	bl	8004a48 <xTraceInitialize>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <xTraceEnable+0x26>
	{
		return TRC_FAIL;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e056      	b.n	8004e40 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fe fc85 	bl	80036a4 <xTraceStreamPortOnEnable>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e04d      	b.n	8004e40 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 8004da4:	f7ff fc8e 	bl	80046c4 <xTraceKernelPortEnable>
 8004da8:	0003      	movs	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <xTraceEnable+0x46>
	{
		return TRC_FAIL;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e046      	b.n	8004e40 <xTraceEnable+0xd4>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d12e      	bne.n	8004e16 <xTraceEnable+0xaa>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 8004dbc:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <xTraceEnable+0xdc>)
 8004dbe:	2284      	movs	r2, #132	@ 0x84
 8004dc0:	589a      	ldr	r2, [r3, r2]
 8004dc2:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <xTraceEnable+0xdc>)
 8004dc4:	2188      	movs	r1, #136	@ 0x88
 8004dc6:	585b      	ldr	r3, [r3, r1]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00a      	beq.n	8004de2 <xTraceEnable+0x76>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7fe fb21 	bl	800341c <SEGGER_RTT_Read>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <xTraceEnable+0x78>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <xTraceEnable+0x82>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8004de8:	200b      	movs	r0, #11
 8004dea:	f7fe ff19 	bl	8003c20 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d10a      	bne.n	8004e0a <xTraceEnable+0x9e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 8004df4:	2410      	movs	r4, #16
 8004df6:	193b      	adds	r3, r7, r4
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 f983 	bl	8005104 <prvIsValidCommand>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d003      	beq.n	8004e0a <xTraceEnable+0x9e>
				{
					prvProcessCommand(&xCommand);
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	0018      	movs	r0, r3
 8004e06:	f000 f9bc 	bl	8005182 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 8004e0a:	4b10      	ldr	r3, [pc, #64]	@ (8004e4c <xTraceEnable+0xe0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0d1      	beq.n	8004db8 <xTraceEnable+0x4c>
 8004e14:	e013      	b.n	8004e3e <xTraceEnable+0xd2>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d10b      	bne.n	8004e34 <xTraceEnable+0xc8>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
		xCommand.param1 = 1u;
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	2201      	movs	r2, #1
 8004e28:	705a      	strb	r2, [r3, #1]
		prvProcessCommand(&xCommand);
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 f9a8 	bl	8005182 <prvProcessCommand>
 8004e32:	e004      	b.n	8004e3e <xTraceEnable+0xd2>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <xTraceEnable+0xd2>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xTraceEnable+0xd4>
	}

	return TRC_SUCCESS;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	0018      	movs	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b007      	add	sp, #28
 8004e46:	bd90      	pop	{r4, r7, pc}
 8004e48:	20001d94 	.word	0x20001d94
 8004e4c:	20002ff8 	.word	0x20002ff8

08004e50 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 8004e54:	f000 f8ae 	bl	8004fb4 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 8004e66:	2308      	movs	r3, #8
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	001a      	movs	r2, r3
 8004e70:	2100      	movs	r1, #0
 8004e72:	f001 fc4b 	bl	800670c <memset>
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <xTraceTzCtrl+0x94>)
 8004e7c:	2284      	movs	r2, #132	@ 0x84
 8004e7e:	589a      	ldr	r2, [r3, r2]
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <xTraceTzCtrl+0x94>)
 8004e82:	2188      	movs	r1, #136	@ 0x88
 8004e84:	585b      	ldr	r3, [r3, r1]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d00a      	beq.n	8004ea0 <xTraceTzCtrl+0x40>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	2208      	movs	r2, #8
 8004e90:	0019      	movs	r1, r3
 8004e92:	2001      	movs	r0, #1
 8004e94:	f7fe fac2 	bl	800341c <SEGGER_RTT_Read>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e000      	b.n	8004ea2 <xTraceTzCtrl+0x42>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <xTraceTzCtrl+0x4e>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 8004ea6:	f7ff ffd3 	bl	8004e50 <xTraceDisable>

			return TRC_FAIL;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e01d      	b.n	8004eea <xTraceTzCtrl+0x8a>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d10a      	bne.n	8004eca <xTraceTzCtrl+0x6a>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 8004eb4:	2408      	movs	r4, #8
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f923 	bl	8005104 <prvIsValidCommand>
 8004ebe:	1e03      	subs	r3, r0, #0
 8004ec0:	d003      	beq.n	8004eca <xTraceTzCtrl+0x6a>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 8004ec2:	193b      	adds	r3, r7, r4
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f95c 	bl	8005182 <prvProcessCommand>
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dcd2      	bgt.n	8004e76 <xTraceTzCtrl+0x16>

	if (xTraceIsRecorderEnabled())
 8004ed0:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <xTraceTzCtrl+0x98>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d006      	beq.n	8004ee8 <xTraceTzCtrl+0x88>
 8004eda:	4b08      	ldr	r3, [pc, #32]	@ (8004efc <xTraceTzCtrl+0x9c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <xTraceTzCtrl+0x88>
	{
		(void)xTraceDiagnosticsCheckStatus();
 8004ee4:	f7fe fc9c 	bl	8003820 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
	}

	return TRC_SUCCESS;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b005      	add	sp, #20
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	20001d94 	.word	0x20001d94
 8004ef8:	20003000 	.word	0x20003000
 8004efc:	20002ff8 	.word	0x20002ff8

08004f00 <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 8004f16:	2300      	movs	r3, #0
 8004f18:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 8004f1a:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <prvSetRecorderEnabled+0x98>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d03a      	beq.n	8004f9a <prvSetRecorderEnabled+0x8e>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 8004f24:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <prvSetRecorderEnabled+0x9c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <prvSetRecorderEnabled+0x9c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <prvSetRecorderEnabled+0xa0>)
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <prvSetRecorderEnabled+0x9c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <prvSetRecorderEnabled+0x4a>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 8004f4a:	4b19      	ldr	r3, [pc, #100]	@ (8004fb0 <prvSetRecorderEnabled+0xa4>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <prvSetRecorderEnabled+0x9c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3201      	adds	r2, #1
 8004f54:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	2301      	movs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 8004f6c:	f000 f846 	bl	8004ffc <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 8004f70:	f000 f852 	bl	8005018 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 8004f74:	f000 f862 	bl	800503c <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 8004f78:	f000 f89a 	bl	80050b0 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <prvSetRecorderEnabled+0x98>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	3201      	adds	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <prvSetRecorderEnabled+0x98>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	e000      	b.n	8004f9c <prvSetRecorderEnabled+0x90>
		return;
 8004f9a:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();
}
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b006      	add	sp, #24
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	20002ff8 	.word	0x20002ff8
 8004fa8:	20003008 	.word	0x20003008
 8004fac:	20000008 	.word	0x20000008
 8004fb0:	e000e014 	.word	0xe000e014

08004fb4 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 8004fba:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <prvSetRecorderDisabled+0x44>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d014      	beq.n	8004fee <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc8:	603b      	str	r3, [r7, #0]
  return(result);
 8004fca:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	2301      	movs	r3, #1
 8004fd0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f383 8810 	msr	PRIMASK, r3
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8004fda:	4b07      	ldr	r3, [pc, #28]	@ (8004ff8 <prvSetRecorderDisabled+0x44>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	e000      	b.n	8004ff0 <prvSetRecorderDisabled+0x3c>
		return;
 8004fee:	46c0      	nop			@ (mov r8, r8)

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b004      	add	sp, #16
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	20002ff8 	.word	0x20002ff8

08004ffc <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t));
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <prvTraceStoreHeader+0x18>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2120      	movs	r1, #32
 8005006:	0018      	movs	r0, r3
 8005008:	f7ff f932 	bl	8004270 <xTraceEventCreateRawBlocking>
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	20002ffc 	.word	0x20002ffc

08005018 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer,sizeof(TraceTimestampData_t));
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <prvTraceStoreTimestampInfo+0x20>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	22a6      	movs	r2, #166	@ 0xa6
 8005022:	0092      	lsls	r2, r2, #2
 8005024:	4694      	mov	ip, r2
 8005026:	4463      	add	r3, ip
 8005028:	211c      	movs	r1, #28
 800502a:	0018      	movs	r0, r3
 800502c:	f7ff f920 	bl	8004270 <xTraceEventCreateRawBlocking>
}
 8005030:	46c0      	nop			@ (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	20002ff8 	.word	0x20002ff8

0800503c <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	TraceUnsignedBaseType_t xHeaderData[3];
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 8005046:	2314      	movs	r3, #20
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	0018      	movs	r0, r3
 800504c:	f7fe fd4a 	bl	8003ae4 <xTraceEntryGetCount>

	xHeaderData[0] = (TraceUnsignedBaseType_t)uiEntryCount;
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	2108      	movs	r1, #8
 8005054:	187b      	adds	r3, r7, r1
 8005056:	601a      	str	r2, [r3, #0]
	xHeaderData[1] = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 8005058:	187b      	adds	r3, r7, r1
 800505a:	2210      	movs	r2, #16
 800505c:	605a      	str	r2, [r3, #4]
	xHeaderData[2] = TRC_ENTRY_TABLE_STATE_COUNT;
 800505e:	187b      	adds	r3, r7, r1
 8005060:	2203      	movs	r2, #3
 8005062:	609a      	str	r2, [r3, #8]

	xTraceEventCreateRawBlocking(xHeaderData, sizeof(xHeaderData));
 8005064:	187b      	adds	r3, r7, r1
 8005066:	210c      	movs	r1, #12
 8005068:	0018      	movs	r0, r3
 800506a:	f7ff f901 	bl	8004270 <xTraceEventCreateRawBlocking>

	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e014      	b.n	800509e <prvTraceStoreEntryTable+0x62>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 8005074:	2318      	movs	r3, #24
 8005076:	18fa      	adds	r2, r7, r3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f7fe fd43 	bl	8003b08 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	607b      	str	r3, [r7, #4]

		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <prvTraceStoreEntryTable+0x5c>
		{
			xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t *) xEntryHandle, sizeof(TraceEntry_t));
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2124      	movs	r1, #36	@ 0x24
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff f8ec 	bl	8004270 <xTraceEventCreateRawBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b0f      	cmp	r3, #15
 80050a2:	d9e7      	bls.n	8005074 <prvTraceStoreEntryTable+0x38>
		}
	}

}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b008      	add	sp, #32
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e011      	b.n	80050e4 <prvTraceStoreStartEvent+0x34>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 80050c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <prvTraceStoreStartEvent+0x50>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	58d3      	ldr	r3, [r2, r3]
 80050ca:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	001a      	movs	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	2110      	movs	r1, #16
 80050d6:	185b      	adds	r3, r3, r1
 80050d8:	19db      	adds	r3, r3, r7
 80050da:	3b0c      	subs	r3, #12
 80050dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ea      	beq.n	80050c0 <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	2204      	movs	r2, #4
 80050ee:	0019      	movs	r1, r3
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7ff f909 	bl	8004308 <xTraceEventCreateDataOffline0>
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	20003004 	.word	0x20003004

08005104 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005114:	18d3      	adds	r3, r2, r3
 8005116:	b2da      	uxtb	r2, r3
												cmd->param2 +
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	b2da      	uxtb	r2, r3
												cmd->param3 +
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	b2da      	uxtb	r2, r3
												cmd->param5);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005134:	18d3      	adds	r3, r2, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	001a      	movs	r2, r3
 800513a:	210e      	movs	r1, #14
 800513c:	187b      	adds	r3, r7, r1
 800513e:	43d2      	mvns	r2, r2
 8005140:	801a      	strh	r2, [r3, #0]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	79da      	ldrb	r2, [r3, #7]
 8005146:	187b      	adds	r3, r7, r1
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	b29b      	uxth	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <prvIsValidCommand+0x54>
	{
		return 0;
 8005154:	2300      	movs	r3, #0
 8005156:	e010      	b.n	800517a <prvIsValidCommand+0x76>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	799a      	ldrb	r2, [r3, #6]
 800515c:	230e      	movs	r3, #14
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <prvIsValidCommand+0x68>
	{
		return 0;
 8005168:	2300      	movs	r3, #0
 800516a:	e006      	b.n	800517a <prvIsValidCommand+0x76>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d901      	bls.n	8005178 <prvIsValidCommand+0x74>
	{
		return 0;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <prvIsValidCommand+0x76>
	}

	return 1;
 8005178:	2301      	movs	r3, #1
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}

08005182 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d109      	bne.n	80051a6 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 800519a:	f7ff feb7 	bl	8004f0c <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 800519e:	e003      	b.n	80051a8 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 80051a0:	f7ff ff08 	bl	8004fb4 <prvSetRecorderDisabled>
		  	break;
 80051a4:	e000      	b.n	80051a8 <prvProcessCommand+0x26>
		default:
		  	break;
 80051a6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b002      	add	sp, #8
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
static traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2203      	movs	r2, #3
 80051bc:	4013      	ands	r3, r2
 80051be:	1e5a      	subs	r2, r3, #1
 80051c0:	4193      	sbcs	r3, r2
 80051c2:	b2db      	uxtb	r3, r3
}
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}

080051cc <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 80051da:	230c      	movs	r3, #12
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fe fbca 	bl	8003978 <xTraceEntryCreate>
 80051e4:	0003      	movs	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e022      	b.n	8005234 <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e002      	b.n	80051fa <xTraceStringRegister+0x2e>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <xTraceStringRegister+0x40>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	ddf3      	ble.n	80051f4 <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f7fe fc3a 	bl	8003a90 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0019      	movs	r1, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	2003      	movs	r0, #3
 800522e:	f7ff f8e9 	bl	8004404 <xTraceEventCreateData1>
 8005232:	0003      	movs	r3, r0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b006      	add	sp, #24
 800523a:	bd80      	pop	{r7, pc}

0800523c <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8005244:	4b0e      	ldr	r3, [pc, #56]	@ (8005280 <xTraceTaskInitialize+0x44>)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e008      	b.n	8005262 <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <xTraceTaskInitialize+0x44>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	2102      	movs	r1, #2
 800525a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	ddf3      	ble.n	8005250 <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8005268:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <xTraceTaskInitialize+0x48>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	@ 0x80
 800526e:	0352      	lsls	r2, r2, #13
 8005270:	431a      	orrs	r2, r3
 8005272:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <xTraceTaskInitialize+0x48>)
 8005274:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005276:	2300      	movs	r3, #0
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b004      	add	sp, #16
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20003004 	.word	0x20003004
 8005284:	20003000 	.word	0x20003000

08005288 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8005292:	2301      	movs	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8005296:	4b20      	ldr	r3, [pc, #128]	@ (8005318 <xTraceTaskSwitch+0x90>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d101      	bne.n	80052a4 <xTraceTaskSwitch+0x1c>
	{
		return xResult;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	e035      	b.n	8005310 <xTraceTaskSwitch+0x88>
	}

	if (!xTraceIsRecorderEnabled())
 80052a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005318 <xTraceTaskSwitch+0x90>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4013      	ands	r3, r2
 80052ac:	d004      	beq.n	80052b8 <xTraceTaskSwitch+0x30>
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <xTraceTaskSwitch+0x94>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <xTraceTaskSwitch+0x3c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <xTraceTaskSwitch+0x98>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]

		return xResult;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	e025      	b.n	8005310 <xTraceTaskSwitch+0x88>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 80052c4:	4b15      	ldr	r3, [pc, #84]	@ (800531c <xTraceTaskSwitch+0x94>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052cc:	f3ef 8310 	mrs	r3, PRIMASK
 80052d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052d2:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	2301      	movs	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f383 8810 	msr	PRIMASK, r3
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 80052e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <xTraceTaskSwitch+0x98>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	0019      	movs	r1, r3
 80052f0:	2037      	movs	r0, #55	@ 0x37
 80052f2:	f7fe fe3d 	bl	8003f70 <xTraceEventCreate2>
 80052f6:	0003      	movs	r3, r0
 80052f8:	61fb      	str	r3, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 80052fa:	4b08      	ldr	r3, [pc, #32]	@ (800531c <xTraceTaskSwitch+0x94>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2202      	movs	r2, #2
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 800530e:	69fb      	ldr	r3, [r7, #28]
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b008      	add	sp, #32
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20003000 	.word	0x20003000
 800531c:	20002ff8 	.word	0x20002ff8
 8005320:	20003004 	.word	0x20003004

08005324 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 800532c:	4b16      	ldr	r3, [pc, #88]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 8005332:	4b15      	ldr	r3, [pc, #84]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 800533a:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8005342:	4b11      	ldr	r3, [pc, #68]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2264      	movs	r2, #100	@ 0x64
 8005348:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 800534a:	4b0f      	ldr	r3, [pc, #60]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2204      	movs	r2, #4
 8005360:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
 8005362:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <xTraceTimestampInitialize+0x64>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3a01      	subs	r2, #1
 800536e:	615a      	str	r2, [r3, #20]
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <xTraceTimestampInitialize+0x68>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	0392      	lsls	r2, r2, #14
 8005378:	431a      	orrs	r2, r3
 800537a:	4b04      	ldr	r3, [pc, #16]	@ (800538c <xTraceTimestampInitialize+0x68>)
 800537c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20003008 	.word	0x20003008
 800538c:	20003000 	.word	0x20003000

08005390 <main>:
// Kernel objects
xSemaphoreHandle xSem;

// Main function
int main()
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8005396:	f000 f8e7 	bl	8005568 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 800539a:	f000 ffa7 	bl	80062ec <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 800539e:	f000 fff1 	bl	8006384 <BSP_PB_Init>

    // Initialize NVIC
    BSP_NVIC_Init();
 80053a2:	f001 f8eb 	bl	800657c <BSP_NVIC_Init>

    myPrintfInit();
 80053a6:	f000 f979 	bl	800569c <myPrintfInit>
	// Initialize Debug Console
	BSP_Console_Init();
 80053aa:	f001 f839 	bl	8006420 <BSP_Console_Init>
	// my_printf("Console Ready!\r\n");


	// Start Trace Recording
	xTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7ff fcdc 	bl	8004d6c <xTraceEnable>

	// Create Semaphore
	// my_printf("\r\nNow creating Binary Semaphore...\r\n");
    xSem = xSemaphoreCreateBinary();
 80053b4:	2203      	movs	r2, #3
 80053b6:	2100      	movs	r1, #0
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7fb f84f 	bl	800045c <xQueueGenericCreate>
 80053be:	0002      	movs	r2, r0
 80053c0:	4b16      	ldr	r3, [pc, #88]	@ (800541c <main+0x8c>)
 80053c2:	601a      	str	r2, [r3, #0]
    vTraceSetSemaphoreName(xSem, "xSem");
 80053c4:	4b15      	ldr	r3, [pc, #84]	@ (800541c <main+0x8c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a15      	ldr	r2, [pc, #84]	@ (8005420 <main+0x90>)
 80053ca:	0011      	movs	r1, r2
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7ff f9be 	bl	800474e <vTraceSetSemaphoreName>
    // xSem2 = xSemaphoreCreateBinary();
    // vTraceSetSemaphoreName(xSem2, "xSem2");

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 80053d2:	f7fd fe6f 	bl	80030b4 <xPortGetFreeHeapSize>
 80053d6:	0003      	movs	r3, r0
 80053d8:	607b      	str	r3, [r7, #4]
	// my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);

	// Create Tasks
	// my_printf("Creating Tasks...");
    xTaskCreate(vTask1, "Task_1", 128, NULL, 1, &vTask1_handle);
 80053da:	4912      	ldr	r1, [pc, #72]	@ (8005424 <main+0x94>)
 80053dc:	4812      	ldr	r0, [pc, #72]	@ (8005428 <main+0x98>)
 80053de:	4b13      	ldr	r3, [pc, #76]	@ (800542c <main+0x9c>)
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	2301      	movs	r3, #1
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	2280      	movs	r2, #128	@ 0x80
 80053ea:	f7fc f88a 	bl	8001502 <xTaskCreate>
    xTaskCreate(vTask2, "Task_2", 128, NULL, 1, &vTask2_handle);
 80053ee:	4910      	ldr	r1, [pc, #64]	@ (8005430 <main+0xa0>)
 80053f0:	4810      	ldr	r0, [pc, #64]	@ (8005434 <main+0xa4>)
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <main+0xa8>)
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	2301      	movs	r3, #1
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	2280      	movs	r2, #128	@ 0x80
 80053fe:	f7fc f880 	bl	8001502 <xTaskCreate>
    vTaskPubInit();
 8005402:	f000 fb91 	bl	8005b28 <vTaskPubInit>
    writeTaskInit();
 8005406:	f000 fe5f 	bl	80060c8 <writeTaskInit>
	// my_printf("OK\r\n");

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 800540a:	f7fd fe53 	bl	80030b4 <xPortGetFreeHeapSize>
 800540e:	0003      	movs	r3, r0
 8005410:	607b      	str	r3, [r7, #4]
	// my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);

	// Start the Scheduler
	// my_printf("Now Starting Scheduler...\r\n");
	vTaskStartScheduler();
 8005412:	f7fc fa9d 	bl	8001950 <vTaskStartScheduler>
	while(1)
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	e7fd      	b.n	8005416 <main+0x86>
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	20003014 	.word	0x20003014
 8005420:	08006a1c 	.word	0x08006a1c
 8005424:	08006a24 	.word	0x08006a24
 8005428:	0800543d 	.word	0x0800543d
 800542c:	2000300c 	.word	0x2000300c
 8005430:	08006a2c 	.word	0x08006a2c
 8005434:	080054b5 	.word	0x080054b5
 8005438:	20003010 	.word	0x20003010

0800543c <vTask1>:
 */

/*
 * Task_1
 */
void vTask1(void *pvParameters) {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    	/*
    	my_sprintf((char *) msgTask1, "Arthour ! Pas changer assiette pour fromage !\r\n");
    	sendMessage(&msgTask1);
		vTaskDelay(100 / portTICK_PERIOD_MS);
		*/
    	subscribe(1,1,1);
 8005444:	2201      	movs	r2, #1
 8005446:	2101      	movs	r1, #1
 8005448:	2001      	movs	r0, #1
 800544a:	f000 fc29 	bl	8005ca0 <subscribe>
    	xSemaphoreTake(sems[1], portMAX_DELAY);
 800544e:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <vTask1+0x6c>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	4252      	negs	r2, r2
 8005456:	0011      	movs	r1, r2
 8005458:	0018      	movs	r0, r3
 800545a:	f7fb fcfd 	bl	8000e58 <xQueueSemaphoreTake>
    	my_sprintf((char *) msgTask1, "Task_1 (1, 1, 0)\r\n");
 800545e:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <vTask1+0x70>)
 8005460:	2408      	movs	r4, #8
 8005462:	193b      	adds	r3, r7, r4
 8005464:	0011      	movs	r1, r2
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fb47 	bl	8005afa <my_sprintf>
    	sendMessage(&msgTask1);
 800546c:	193b      	adds	r3, r7, r4
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fe4c 	bl	800610c <sendMessage>
    	BSP_LED_On();
    	vTaskDelay(100 / portTICK_PERIOD_MS);
    	BSP_LED_Off();
    	xSemaphoreGive(ledMutex);
    	 */
    	subscribe(1, 1, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2101      	movs	r1, #1
 8005478:	2001      	movs	r0, #1
 800547a:	f000 fc11 	bl	8005ca0 <subscribe>
    	xSemaphoreTake(sems[1], portMAX_DELAY);
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <vTask1+0x6c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	4252      	negs	r2, r2
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f7fb fce5 	bl	8000e58 <xQueueSemaphoreTake>
    	my_sprintf((char *) msgTask1, "Task_1 (1, 1, 1)\r\n");
 800548e:	4a08      	ldr	r2, [pc, #32]	@ (80054b0 <vTask1+0x74>)
 8005490:	193b      	adds	r3, r7, r4
 8005492:	0011      	movs	r1, r2
 8005494:	0018      	movs	r0, r3
 8005496:	f000 fb30 	bl	8005afa <my_sprintf>
    	sendMessage(&msgTask1);
 800549a:	193b      	adds	r3, r7, r4
 800549c:	0018      	movs	r0, r3
 800549e:	f000 fe35 	bl	800610c <sendMessage>
    	subscribe(1,1,1);
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	e7ce      	b.n	8005444 <vTask1+0x8>
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	20003030 	.word	0x20003030
 80054ac:	08006a34 	.word	0x08006a34
 80054b0:	08006a48 	.word	0x08006a48

080054b4 <vTask2>:
}

/*
 * Task_2
 */
void vTask2(void *pvParameters) {
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
    	my_sprintf((char *) msgTask2, "Arthour ! Couhillere !\r\n");
    	sendMessage(&msgTask2);
    	vTaskDelay(100 / portTICK_PERIOD_MS);
    	*/

    	subscribe(2, 2, 1);
 80054bc:	2201      	movs	r2, #1
 80054be:	2102      	movs	r1, #2
 80054c0:	2002      	movs	r0, #2
 80054c2:	f000 fbed 	bl	8005ca0 <subscribe>
    	xSemaphoreTake(sems[2], portMAX_DELAY);
 80054c6:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <vTask2+0x6c>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2201      	movs	r2, #1
 80054cc:	4252      	negs	r2, r2
 80054ce:	0011      	movs	r1, r2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7fb fcc1 	bl	8000e58 <xQueueSemaphoreTake>
    	my_sprintf((char *) msgTask2, "Task_2 (2, 2, 0)\r\n");
 80054d6:	4a13      	ldr	r2, [pc, #76]	@ (8005524 <vTask2+0x70>)
 80054d8:	2408      	movs	r4, #8
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	0011      	movs	r1, r2
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 fb0b 	bl	8005afa <my_sprintf>
    	sendMessage(&msgTask2);
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 fe10 	bl	800610c <sendMessage>
    	vTaskDelay(200 / portTICK_PERIOD_MS);
    	BSP_LED_Off();
    	xSemaphoreGive(ledMutex);
    	*/

    	subscribe(2, 2, 0);
 80054ec:	2200      	movs	r2, #0
 80054ee:	2102      	movs	r1, #2
 80054f0:	2002      	movs	r0, #2
 80054f2:	f000 fbd5 	bl	8005ca0 <subscribe>
    	xSemaphoreTake(sems[2], portMAX_DELAY);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <vTask2+0x6c>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2201      	movs	r2, #1
 80054fc:	4252      	negs	r2, r2
 80054fe:	0011      	movs	r1, r2
 8005500:	0018      	movs	r0, r3
 8005502:	f7fb fca9 	bl	8000e58 <xQueueSemaphoreTake>
    	my_sprintf((char *) msgTask2, "Task_2 (2, 2, 1)\r\n");
 8005506:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <vTask2+0x74>)
 8005508:	193b      	adds	r3, r7, r4
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f000 faf4 	bl	8005afa <my_sprintf>
    	sendMessage(&msgTask2);
 8005512:	193b      	adds	r3, r7, r4
 8005514:	0018      	movs	r0, r3
 8005516:	f000 fdf9 	bl	800610c <sendMessage>
    	subscribe(2, 2, 1);
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	e7ce      	b.n	80054bc <vTask2+0x8>
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	20003030 	.word	0x20003030
 8005524:	08006a5c 	.word	0x08006a5c
 8005528:	08006a70 	.word	0x08006a70

0800552c <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 8005536:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 8005538:	4b08      	ldr	r3, [pc, #32]	@ (800555c <vAssertCalled+0x30>)
 800553a:	0018      	movs	r0, r3
 800553c:	f000 fac8 	bl	8005ad0 <my_printf>
	my_printf("File %s\r\n", file);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <vAssertCalled+0x34>)
 8005544:	0011      	movs	r1, r2
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fac2 	bl	8005ad0 <my_printf>
	my_printf("Line %d\r\n", line);
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <vAssertCalled+0x38>)
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f000 fabc 	bl	8005ad0 <my_printf>

	while(1);
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	e7fd      	b.n	8005558 <vAssertCalled+0x2c>
 800555c:	08006a84 	.word	0x08006a84
 8005560:	08006a98 	.word	0x08006a98
 8005564:	08006aa4 	.word	0x08006aa4

08005568 <SystemClock_Config>:
{
	while(1);
}

static void SystemClock_Config()
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8005572:	4b44      	ldr	r3, [pc, #272]	@ (8005684 <SystemClock_Config+0x11c>)
 8005574:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8005576:	4b44      	ldr	r3, [pc, #272]	@ (8005688 <SystemClock_Config+0x120>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b43      	ldr	r3, [pc, #268]	@ (8005688 <SystemClock_Config+0x120>)
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	02c9      	lsls	r1, r1, #11
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8005584:	4b40      	ldr	r3, [pc, #256]	@ (8005688 <SystemClock_Config+0x120>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b3f      	ldr	r3, [pc, #252]	@ (8005688 <SystemClock_Config+0x120>)
 800558a:	2180      	movs	r1, #128	@ 0x80
 800558c:	0249      	lsls	r1, r1, #9
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8005592:	4b3d      	ldr	r3, [pc, #244]	@ (8005688 <SystemClock_Config+0x120>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	2380      	movs	r3, #128	@ 0x80
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	4013      	ands	r3, r2
 800559c:	60bb      	str	r3, [r7, #8]
		timeout--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <SystemClock_Config+0x48>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80055b0:	4b35      	ldr	r3, [pc, #212]	@ (8005688 <SystemClock_Config+0x120>)
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <SystemClock_Config+0x120>)
 80055b6:	4935      	ldr	r1, [pc, #212]	@ (800568c <SystemClock_Config+0x124>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80055bc:	4b32      	ldr	r3, [pc, #200]	@ (8005688 <SystemClock_Config+0x120>)
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <SystemClock_Config+0x120>)
 80055c2:	2180      	movs	r1, #128	@ 0x80
 80055c4:	0249      	lsls	r1, r1, #9
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80055ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <SystemClock_Config+0x120>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80055d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005688 <SystemClock_Config+0x120>)
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <SystemClock_Config+0x120>)
 80055d6:	492e      	ldr	r1, [pc, #184]	@ (8005690 <SystemClock_Config+0x128>)
 80055d8:	400a      	ands	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80055dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <SystemClock_Config+0x120>)
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	4b29      	ldr	r3, [pc, #164]	@ (8005688 <SystemClock_Config+0x120>)
 80055e2:	2180      	movs	r1, #128	@ 0x80
 80055e4:	0349      	lsls	r1, r1, #13
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <SystemClock_Config+0x120>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b26      	ldr	r3, [pc, #152]	@ (8005688 <SystemClock_Config+0x120>)
 80055f0:	2180      	movs	r1, #128	@ 0x80
 80055f2:	0449      	lsls	r1, r1, #17
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80055f8:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <SystemClock_Config+0x120>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	@ 0x80
 80055fe:	049b      	lsls	r3, r3, #18
 8005600:	4013      	ands	r3, r2
 8005602:	607b      	str	r3, [r7, #4]
		timeout--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <SystemClock_Config+0xae>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8005616:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <SystemClock_Config+0x120>)
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <SystemClock_Config+0x120>)
 800561c:	21f0      	movs	r1, #240	@ 0xf0
 800561e:	438a      	bics	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005622:	4a19      	ldr	r2, [pc, #100]	@ (8005688 <SystemClock_Config+0x120>)
 8005624:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <SystemClock_Config+0x120>)
 8005626:	6852      	ldr	r2, [r2, #4]
 8005628:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 800562a:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <SystemClock_Config+0x120>)
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4b16      	ldr	r3, [pc, #88]	@ (8005688 <SystemClock_Config+0x120>)
 8005630:	4918      	ldr	r1, [pc, #96]	@ (8005694 <SystemClock_Config+0x12c>)
 8005632:	400a      	ands	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8005636:	4a14      	ldr	r2, [pc, #80]	@ (8005688 <SystemClock_Config+0x120>)
 8005638:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <SystemClock_Config+0x120>)
 800563a:	6852      	ldr	r2, [r2, #4]
 800563c:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800563e:	4b16      	ldr	r3, [pc, #88]	@ (8005698 <SystemClock_Config+0x130>)
 8005640:	2211      	movs	r2, #17
 8005642:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8005644:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <SystemClock_Config+0x120>)
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <SystemClock_Config+0x120>)
 800564a:	2103      	movs	r1, #3
 800564c:	438a      	bics	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005650:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <SystemClock_Config+0x120>)
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <SystemClock_Config+0x120>)
 8005656:	2102      	movs	r1, #2
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <SystemClock_Config+0x120>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	220c      	movs	r2, #12
 8005662:	4013      	ands	r3, r2
 8005664:	603b      	str	r3, [r7, #0]
		timeout--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b01      	subs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b08      	cmp	r3, #8
 8005670:	d002      	beq.n	8005678 <SystemClock_Config+0x110>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f1      	bne.n	800565c <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8005678:	f000 ffc2 	bl	8006600 <SystemCoreClockUpdate>
}
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b004      	add	sp, #16
 8005682:	bd80      	pop	{r7, pc}
 8005684:	000f4240 	.word	0x000f4240
 8005688:	40021000 	.word	0x40021000
 800568c:	fffe7fff 	.word	0xfffe7fff
 8005690:	ffc3ffff 	.word	0xffc3ffff
 8005694:	fffff8ff 	.word	0xfffff8ff
 8005698:	40022000 	.word	0x40022000

0800569c <myPrintfInit>:
xSemaphoreHandle xSem_UART_TC;
xSemaphoreHandle xSem_DMA_TC;
xSemaphoreHandle uartMutex;


BaseType_t myPrintfInit(){
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
	 xSem_UART_TC = xSemaphoreCreateBinary();
 80056a0:	2203      	movs	r2, #3
 80056a2:	2100      	movs	r1, #0
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7fa fed9 	bl	800045c <xQueueGenericCreate>
 80056aa:	0002      	movs	r2, r0
 80056ac:	4b0f      	ldr	r3, [pc, #60]	@ (80056ec <myPrintfInit+0x50>)
 80056ae:	601a      	str	r2, [r3, #0]
	 xSem_DMA_TC = xSemaphoreCreateBinary();
 80056b0:	2203      	movs	r2, #3
 80056b2:	2100      	movs	r1, #0
 80056b4:	2001      	movs	r0, #1
 80056b6:	f7fa fed1 	bl	800045c <xQueueGenericCreate>
 80056ba:	0002      	movs	r2, r0
 80056bc:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <myPrintfInit+0x54>)
 80056be:	601a      	str	r2, [r3, #0]
	 uartMutex = xSemaphoreCreateMutex();
 80056c0:	2001      	movs	r0, #1
 80056c2:	f7fa ffc5 	bl	8000650 <xQueueCreateMutex>
 80056c6:	0002      	movs	r2, r0
 80056c8:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <myPrintfInit+0x58>)
 80056ca:	601a      	str	r2, [r3, #0]

	 if (xSem_UART_TC == NULL) {
 80056cc:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <myPrintfInit+0x50>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <myPrintfInit+0x3c>
		 return pdFAIL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e006      	b.n	80056e6 <myPrintfInit+0x4a>
	 }
	 if (xSem_DMA_TC == NULL) {
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <myPrintfInit+0x54>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <myPrintfInit+0x48>
		 return pdFAIL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <myPrintfInit+0x4a>
	 }

	 return pdPASS;
 80056e4:	2301      	movs	r3, #1
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20003018 	.word	0x20003018
 80056f0:	2000301c 	.word	0x2000301c
 80056f4:	20003020 	.word	0x20003020

080056f8 <printchar>:


static void printchar(char **str, int c){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	// portBASE_TYPE xStatus;

	if (str) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <printchar+0x26>
		**str = c;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
		++(*str);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;

		xSemaphoreGive(uartMutex);
	}
}
 800571c:	e019      	b.n	8005752 <printchar+0x5a>
		xSemaphoreTake(uartMutex, portMAX_DELAY);
 800571e:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <printchar+0x64>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	4252      	negs	r2, r2
 8005726:	0011      	movs	r1, r2
 8005728:	0018      	movs	r0, r3
 800572a:	f7fb fb95 	bl	8000e58 <xQueueSemaphoreTake>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <printchar+0x68>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	2240      	movs	r2, #64	@ 0x40
 8005736:	4013      	ands	r3, r2
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d1f9      	bne.n	8005730 <printchar+0x38>
		USART2->TDR = c;
 800573c:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <printchar+0x68>)
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	b292      	uxth	r2, r2
 8005742:	851a      	strh	r2, [r3, #40]	@ 0x28
		xSemaphoreGive(uartMutex);
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <printchar+0x64>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	f7fa ff9b 	bl	8000688 <xQueueGenericSend>
}
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	46bd      	mov	sp, r7
 8005756:	b002      	add	sp, #8
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	20003020 	.word	0x20003020
 8005760:	40004400 	.word	0x40004400

08005764 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	46c6      	mov	lr, r8
 8005768:	b500      	push	{lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8005776:	2400      	movs	r4, #0
 8005778:	2320      	movs	r3, #32
 800577a:	4698      	mov	r8, r3

	if (width > 0) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	dd16      	ble.n	80057b0 <prints+0x4c>
		register int len = 0;
 8005782:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8005784:	68be      	ldr	r6, [r7, #8]
 8005786:	e001      	b.n	800578c <prints+0x28>
 8005788:	3501      	adds	r5, #1
 800578a:	3601      	adds	r6, #1
 800578c:	7833      	ldrb	r3, [r6, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1fa      	bne.n	8005788 <prints+0x24>
		if (len >= width) width = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429d      	cmp	r5, r3
 8005796:	db02      	blt.n	800579e <prints+0x3a>
 8005798:	2300      	movs	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e002      	b.n	80057a4 <prints+0x40>
		else width -= len;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	1b5b      	subs	r3, r3, r5
 80057a2:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	4013      	ands	r3, r2
 80057aa:	d001      	beq.n	80057b0 <prints+0x4c>
 80057ac:	2330      	movs	r3, #48	@ 0x30
 80057ae:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	4013      	ands	r3, r2
 80057b6:	d119      	bne.n	80057ec <prints+0x88>
		for ( ; width > 0; --width) {
 80057b8:	e008      	b.n	80057cc <prints+0x68>
			printchar (out, padchar);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4641      	mov	r1, r8
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff ff9a 	bl	80056f8 <printchar>
			++pc;
 80057c4:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dcf3      	bgt.n	80057ba <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 80057d2:	e00b      	b.n	80057ec <prints+0x88>
		printchar (out, *string);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	001a      	movs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	0011      	movs	r1, r2
 80057de:	0018      	movs	r0, r3
 80057e0:	f7ff ff8a 	bl	80056f8 <printchar>
		++pc;
 80057e4:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3301      	adds	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ef      	bne.n	80057d4 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 80057f4:	e008      	b.n	8005808 <prints+0xa4>
		printchar (out, padchar);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4641      	mov	r1, r8
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7ff ff7c 	bl	80056f8 <printchar>
		++pc;
 8005800:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dcf3      	bgt.n	80057f6 <prints+0x92>
	}

	return pc;
 800580e:	0023      	movs	r3, r4
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b004      	add	sp, #16
 8005816:	bc80      	pop	{r7}
 8005818:	46b8      	mov	r8, r7
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800581c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800581c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581e:	46ce      	mov	lr, r9
 8005820:	4647      	mov	r7, r8
 8005822:	b580      	push	{r7, lr}
 8005824:	b089      	sub	sp, #36	@ 0x24
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	4699      	mov	r9, r3
 8005834:	2600      	movs	r6, #0
	register unsigned int u = i;
 8005836:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10e      	bne.n	800585c <printi+0x40>
		print_buf[0] = '0';
 800583e:	2114      	movs	r1, #20
 8005840:	187b      	adds	r3, r7, r1
 8005842:	2230      	movs	r2, #48	@ 0x30
 8005844:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8005846:	187b      	adds	r3, r7, r1
 8005848:	2200      	movs	r2, #0
 800584a:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 800584c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005850:	1879      	adds	r1, r7, r1
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff ff86 	bl	8005764 <prints>
 8005858:	0003      	movs	r3, r0
 800585a:	e04e      	b.n	80058fa <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <printi+0x5c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b0a      	cmp	r3, #10
 8005866:	d107      	bne.n	8005878 <printi+0x5c>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da04      	bge.n	8005878 <printi+0x5c>
		neg = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	4699      	mov	r9, r3
		u = -i;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	425b      	negs	r3, r3
 8005876:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8005878:	2314      	movs	r3, #20
 800587a:	18fc      	adds	r4, r7, r3
 800587c:	340b      	adds	r4, #11
	*s = '\0';
 800587e:	2300      	movs	r3, #0
 8005880:	7023      	strb	r3, [r4, #0]

	while (u) {
 8005882:	e019      	b.n	80058b8 <printi+0x9c>
		t = u % b;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0019      	movs	r1, r3
 8005888:	0028      	movs	r0, r5
 800588a:	f7fa fcc3 	bl	8000214 <__aeabi_uidivmod>
 800588e:	000b      	movs	r3, r1
 8005890:	4698      	mov	r8, r3
		if( t >= 10 )
 8005892:	4643      	mov	r3, r8
 8005894:	2b09      	cmp	r3, #9
 8005896:	dd02      	ble.n	800589e <printi+0x82>
			t += letbase - '0' - 10;
 8005898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589a:	3b3a      	subs	r3, #58	@ 0x3a
 800589c:	4498      	add	r8, r3
		*--s = t + '0';
 800589e:	4643      	mov	r3, r8
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	3c01      	subs	r4, #1
 80058a4:	3330      	adds	r3, #48	@ 0x30
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	7023      	strb	r3, [r4, #0]
		u /= b;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0019      	movs	r1, r3
 80058ae:	0028      	movs	r0, r5
 80058b0:	f7fa fc2a 	bl	8000108 <__udivsi3>
 80058b4:	0003      	movs	r3, r0
 80058b6:	001d      	movs	r5, r3
	while (u) {
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d1e3      	bne.n	8005884 <printi+0x68>
	}

	if (neg) {
 80058bc:	464b      	mov	r3, r9
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 80058c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <printi+0xc8>
 80058c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ca:	2202      	movs	r2, #2
 80058cc:	4013      	ands	r3, r2
 80058ce:	d009      	beq.n	80058e4 <printi+0xc8>
			printchar (out, '-');
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	212d      	movs	r1, #45	@ 0x2d
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff ff0f 	bl	80056f8 <printchar>
			++pc;
 80058da:	3601      	adds	r6, #1
			--width;
 80058dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058de:	3b01      	subs	r3, #1
 80058e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e2:	e002      	b.n	80058ea <printi+0xce>
		}
		else {
			*--s = '-';
 80058e4:	3c01      	subs	r4, #1
 80058e6:	232d      	movs	r3, #45	@ 0x2d
 80058e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80058ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	0021      	movs	r1, r4
 80058f2:	f7ff ff37 	bl	8005764 <prints>
 80058f6:	0003      	movs	r3, r0
 80058f8:	18f3      	adds	r3, r6, r3
}
 80058fa:	0018      	movs	r0, r3
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b009      	add	sp, #36	@ 0x24
 8005900:	bcc0      	pop	{r6, r7}
 8005902:	46b9      	mov	r9, r7
 8005904:	46b0      	mov	r8, r6
 8005906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005908 <print>:

static int print(char **out, const char *format, va_list args )
{
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	b08b      	sub	sp, #44	@ 0x2c
 800590c:	af04      	add	r7, sp, #16
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8005914:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8005916:	e0c6      	b.n	8005aa6 <print+0x19e>
		if (*format == '%') {
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b25      	cmp	r3, #37	@ 0x25
 800591e:	d000      	beq.n	8005922 <print+0x1a>
 8005920:	e0b2      	b.n	8005a88 <print+0x180>
			++format;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3301      	adds	r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8005928:	2600      	movs	r6, #0
 800592a:	0035      	movs	r5, r6
			if (*format == '\0') break;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d100      	bne.n	8005936 <print+0x2e>
 8005934:	e0bd      	b.n	8005ab2 <print+0x1aa>
			if (*format == '%') goto out;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b25      	cmp	r3, #37	@ 0x25
 800593c:	d100      	bne.n	8005940 <print+0x38>
 800593e:	e0a5      	b.n	8005a8c <print+0x184>
			if (*format == '-') {
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b2d      	cmp	r3, #45	@ 0x2d
 8005946:	d10a      	bne.n	800595e <print+0x56>
				++format;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3301      	adds	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800594e:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8005950:	e005      	b.n	800595e <print+0x56>
				++format;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3301      	adds	r3, #1
 8005956:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8005958:	2302      	movs	r3, #2
 800595a:	4333      	orrs	r3, r6
 800595c:	001e      	movs	r6, r3
			while (*format == '0') {
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b30      	cmp	r3, #48	@ 0x30
 8005964:	d0f5      	beq.n	8005952 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005966:	e00b      	b.n	8005980 <print+0x78>
				width *= 10;
 8005968:	002b      	movs	r3, r5
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	195b      	adds	r3, r3, r5
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	001d      	movs	r5, r3
				width += *format - '0';
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	3b30      	subs	r3, #48	@ 0x30
 8005978:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3301      	adds	r3, #1
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b2f      	cmp	r3, #47	@ 0x2f
 8005986:	d903      	bls.n	8005990 <print+0x88>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b39      	cmp	r3, #57	@ 0x39
 800598e:	d9eb      	bls.n	8005968 <print+0x60>
			}
			if( *format == 's' ) {
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b73      	cmp	r3, #115	@ 0x73
 8005996:	d10f      	bne.n	80059b8 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 80059a2:	d000      	beq.n	80059a6 <print+0x9e>
 80059a4:	e000      	b.n	80059a8 <print+0xa0>
 80059a6:	4949      	ldr	r1, [pc, #292]	@ (8005acc <print+0x1c4>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	0033      	movs	r3, r6
 80059ac:	002a      	movs	r2, r5
 80059ae:	f7ff fed9 	bl	8005764 <prints>
 80059b2:	0003      	movs	r3, r0
 80059b4:	18e4      	adds	r4, r4, r3
				continue;
 80059b6:	e073      	b.n	8005aa0 <print+0x198>
			}
			if( *format == 'd' ) {
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b64      	cmp	r3, #100	@ 0x64
 80059be:	d10f      	bne.n	80059e0 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	2361      	movs	r3, #97	@ 0x61
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	9601      	str	r6, [sp, #4]
 80059d0:	9500      	str	r5, [sp, #0]
 80059d2:	2301      	movs	r3, #1
 80059d4:	220a      	movs	r2, #10
 80059d6:	f7ff ff21 	bl	800581c <printi>
 80059da:	0003      	movs	r3, r0
 80059dc:	18e4      	adds	r4, r4, r3
				continue;
 80059de:	e05f      	b.n	8005aa0 <print+0x198>
			}
			if( *format == 'x' ) {
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b78      	cmp	r3, #120	@ 0x78
 80059e6:	d10f      	bne.n	8005a08 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	2361      	movs	r3, #97	@ 0x61
 80059f4:	9302      	str	r3, [sp, #8]
 80059f6:	9601      	str	r6, [sp, #4]
 80059f8:	9500      	str	r5, [sp, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	2210      	movs	r2, #16
 80059fe:	f7ff ff0d 	bl	800581c <printi>
 8005a02:	0003      	movs	r3, r0
 8005a04:	18e4      	adds	r4, r4, r3
				continue;
 8005a06:	e04b      	b.n	8005aa0 <print+0x198>
			}
			if( *format == 'X' ) {
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b58      	cmp	r3, #88	@ 0x58
 8005a0e:	d10f      	bne.n	8005a30 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	6819      	ldr	r1, [r3, #0]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	2341      	movs	r3, #65	@ 0x41
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	9601      	str	r6, [sp, #4]
 8005a20:	9500      	str	r5, [sp, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	2210      	movs	r2, #16
 8005a26:	f7ff fef9 	bl	800581c <printi>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	18e4      	adds	r4, r4, r3
				continue;
 8005a2e:	e037      	b.n	8005aa0 <print+0x198>
			}
			if( *format == 'u' ) {
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b75      	cmp	r3, #117	@ 0x75
 8005a36:	d10f      	bne.n	8005a58 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1d1a      	adds	r2, r3, #4
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	2361      	movs	r3, #97	@ 0x61
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	9601      	str	r6, [sp, #4]
 8005a48:	9500      	str	r5, [sp, #0]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	f7ff fee5 	bl	800581c <printi>
 8005a52:	0003      	movs	r3, r0
 8005a54:	18e4      	adds	r4, r4, r3
				continue;
 8005a56:	e023      	b.n	8005aa0 <print+0x198>
			}
			if( *format == 'c' ) {
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b63      	cmp	r3, #99	@ 0x63
 8005a5e:	d11f      	bne.n	8005aa0 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	2114      	movs	r1, #20
 8005a6c:	187b      	adds	r3, r7, r1
 8005a6e:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	2200      	movs	r2, #0
 8005a74:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8005a76:	1879      	adds	r1, r7, r1
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	0033      	movs	r3, r6
 8005a7c:	002a      	movs	r2, r5
 8005a7e:	f7ff fe71 	bl	8005764 <prints>
 8005a82:	0003      	movs	r3, r0
 8005a84:	18e4      	adds	r4, r4, r3
				continue;
 8005a86:	e00b      	b.n	8005aa0 <print+0x198>
			}
		}
		else {
		out:
 8005a88:	46c0      	nop			@ (mov r8, r8)
 8005a8a:	e000      	b.n	8005a8e <print+0x186>
			if (*format == '%') goto out;
 8005a8c:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	001a      	movs	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0011      	movs	r1, r2
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7ff fe2d 	bl	80056f8 <printchar>
			++pc;
 8005a9e:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d000      	beq.n	8005ab0 <print+0x1a8>
 8005aae:	e733      	b.n	8005918 <print+0x10>
 8005ab0:	e000      	b.n	8005ab4 <print+0x1ac>
			if (*format == '\0') break;
 8005ab2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <print+0x1ba>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8005ac2:	0023      	movs	r3, r4
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b007      	add	sp, #28
 8005aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005acc:	08006ab0 	.word	0x08006ab0

08005ad0 <my_printf>:

int my_printf(const char *format, ...)
{
 8005ad0:	b40f      	push	{r0, r1, r2, r3}
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8005ad8:	2314      	movs	r3, #20
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7ff ff0f 	bl	8005908 <print>
 8005aea:	0003      	movs	r3, r0
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bc80      	pop	{r7}
 8005af4:	bc08      	pop	{r3}
 8005af6:	b004      	add	sp, #16
 8005af8:	4718      	bx	r3

08005afa <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 8005afa:	b40e      	push	{r1, r2, r3}
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
        va_list args;
        va_start( args, format );
 8005b04:	2320      	movs	r3, #32
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7ff fef9 	bl	8005908 <print>
 8005b16:	0003      	movs	r3, r0
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b005      	add	sp, #20
 8005b1e:	bc80      	pop	{r7}
 8005b20:	bc08      	pop	{r3}
 8005b22:	b003      	add	sp, #12
 8005b24:	4718      	bx	r3
	...

08005b28 <vTaskPubInit>:
static void updateSubs(subscribe_message_t *subs, subscribe_message_t *new_sub);
static void print_subscription_table(subscribe_message_t *subs);
static void uartSensor(uint8_t *sensors);
static void publish(subscribe_message_t *subs, uint8_t *sensors);

BaseType_t vTaskPubInit(){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af02      	add	r7, sp, #8
	size_t i;

    // Create the subscription queue
    xSubscribeQueue = xQueueCreate(QUEUE_LENGTH, sizeof(subscribe_message_t));
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2103      	movs	r1, #3
 8005b32:	200a      	movs	r0, #10
 8005b34:	f7fa fc92 	bl	800045c <xQueueGenericCreate>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <vTaskPubInit+0x70>)
 8005b3c:	601a      	str	r2, [r3, #0]

	ledMutex = xSemaphoreCreateMutex();
 8005b3e:	2001      	movs	r0, #1
 8005b40:	f7fa fd86 	bl	8000650 <xQueueCreateMutex>
 8005b44:	0002      	movs	r2, r0
 8005b46:	4b15      	ldr	r3, [pc, #84]	@ (8005b9c <vTaskPubInit+0x74>)
 8005b48:	601a      	str	r2, [r3, #0]
	for(i = 0; i < MAX_SEMAPHORE; i++) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	e00c      	b.n	8005b6a <vTaskPubInit+0x42>
		sems[i] = xSemaphoreCreateBinary();
 8005b50:	2203      	movs	r2, #3
 8005b52:	2100      	movs	r1, #0
 8005b54:	2001      	movs	r0, #1
 8005b56:	f7fa fc81 	bl	800045c <xQueueGenericCreate>
 8005b5a:	0001      	movs	r1, r0
 8005b5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <vTaskPubInit+0x78>)
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	0092      	lsls	r2, r2, #2
 8005b62:	50d1      	str	r1, [r2, r3]
	for(i = 0; i < MAX_SEMAPHORE; i++) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3301      	adds	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d9ef      	bls.n	8005b50 <vTaskPubInit+0x28>
	}

    xTaskCreate(vTask_Pub, "vTask_Pub", 128, NULL, 1, &vTaskPub_handle);
 8005b70:	490c      	ldr	r1, [pc, #48]	@ (8005ba4 <vTaskPubInit+0x7c>)
 8005b72:	480d      	ldr	r0, [pc, #52]	@ (8005ba8 <vTaskPubInit+0x80>)
 8005b74:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <vTaskPubInit+0x84>)
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2280      	movs	r2, #128	@ 0x80
 8005b80:	f7fb fcbf 	bl	8001502 <xTaskCreate>

    my_printf("READ TASK DEFINED\r\n");
 8005b84:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <vTaskPubInit+0x88>)
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff ffa2 	bl	8005ad0 <my_printf>


    return pdPASS;
 8005b8c:	2301      	movs	r3, #1
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b002      	add	sp, #8
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	20003028 	.word	0x20003028
 8005b9c:	2000302c 	.word	0x2000302c
 8005ba0:	20003030 	.word	0x20003030
 8005ba4:	08006ab8 	.word	0x08006ab8
 8005ba8:	08005bb5 	.word	0x08005bb5
 8005bac:	20003024 	.word	0x20003024
 8005bb0:	08006ac4 	.word	0x08006ac4

08005bb4 <vTask_Pub>:
	vTaskDelay(200 / portTICK_PERIOD_MS);
	BSP_LED_Off();
	xSemaphoreGive(ledMutex);
}

void vTask_Pub(void *pvParameters){
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b08b      	sub	sp, #44	@ 0x2c
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200 / portTICK_PERIOD_MS;
 8005bbc:	2314      	movs	r3, #20
 8005bbe:	623b      	str	r3, [r7, #32]

	xLastWakeTime = xTaskGetTickCount();
 8005bc0:	f7fc f81c 	bl	8001bfc <xTaskGetTickCount>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	61fb      	str	r3, [r7, #28]

	subscribe_message_t subscription_table[MAX_SUBSCRIBERS] = {0};
 8005bc8:	2310      	movs	r3, #16
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	0018      	movs	r0, r3
 8005bce:	230c      	movs	r3, #12
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f000 fd9a 	bl	800670c <memset>
	subscribe_message_t msg;
	size_t i;
	// char rx_byte;

	// Reseting the message
	for(i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bdc:	e01c      	b.n	8005c18 <vTask_Pub+0x64>
	 	subscription_table[i].sem_id = 0;
 8005bde:	2010      	movs	r0, #16
 8005be0:	1839      	adds	r1, r7, r0
 8005be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be4:	0013      	movs	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	2200      	movs	r2, #0
 8005bec:	545a      	strb	r2, [r3, r1]
	   	subscription_table[i].sensor_id = 0;
 8005bee:	1839      	adds	r1, r7, r0
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf2:	0013      	movs	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	18cb      	adds	r3, r1, r3
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
	   	subscription_table[i].sensor_state = 0;
 8005c00:	1839      	adds	r1, r7, r0
 8005c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c04:	0013      	movs	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	18cb      	adds	r3, r1, r3
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	3301      	adds	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d9df      	bls.n	8005bde <vTask_Pub+0x2a>
	}

	for(i = 0; i < SENSOR_TABLE_SIZE; i++) {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c22:	e007      	b.n	8005c34 <vTask_Pub+0x80>
		sensor_states[i] = 0;
 8005c24:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <vTask_Pub+0xe0>)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SENSOR_TABLE_SIZE; i++) {
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d9f4      	bls.n	8005c24 <vTask_Pub+0x70>
	}
	// BSP_LED_Toggle();

	while (1) {
	  	if(xQueueReceive(xSubscribeQueue, &msg, 0)){
 8005c3a:	4b17      	ldr	r3, [pc, #92]	@ (8005c98 <vTask_Pub+0xe4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	240c      	movs	r4, #12
 8005c40:	1939      	adds	r1, r7, r4
 8005c42:	2200      	movs	r2, #0
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fa ff8b 	bl	8000b60 <xQueueReceive>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d00b      	beq.n	8005c66 <vTask_Pub+0xb2>
	  		updateSubs(subscription_table, &msg);
 8005c4e:	193a      	adds	r2, r7, r4
 8005c50:	2410      	movs	r4, #16
 8005c52:	193b      	adds	r3, r7, r4
 8005c54:	0011      	movs	r1, r2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f84c 	bl	8005cf4 <updateSubs>
	   		print_subscription_table(subscription_table);
 8005c5c:	193b      	adds	r3, r7, r4
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 f8b6 	bl	8005dd0 <print_subscription_table>
 8005c64:	e003      	b.n	8005c6e <vTask_Pub+0xba>
	   	} else {
	   		my_printf(".");
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <vTask_Pub+0xe8>)
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff ff31 	bl	8005ad0 <my_printf>
	   	}

	   	uartSensor(sensor_states);
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <vTask_Pub+0xe0>)
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 f8df 	bl	8005e34 <uartSensor>
		publish(subscription_table, sensor_states);
 8005c76:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <vTask_Pub+0xe0>)
 8005c78:	2310      	movs	r3, #16
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f932 	bl	8005ee8 <publish>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	231c      	movs	r3, #28
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	0011      	movs	r1, r2
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7fb fdb7 	bl	8001800 <xTaskDelayUntil>
	  	if(xQueueReceive(xSubscribeQueue, &msg, 0)){
 8005c92:	e7d2      	b.n	8005c3a <vTask_Pub+0x86>
 8005c94:	20003058 	.word	0x20003058
 8005c98:	20003028 	.word	0x20003028
 8005c9c:	08006ad8 	.word	0x08006ad8

08005ca0 <subscribe>:
	}
}

BaseType_t subscribe(uint8_t sem_id, uint8_t sensor_id, uint8_t sensor_state)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	0004      	movs	r4, r0
 8005ca8:	0008      	movs	r0, r1
 8005caa:	0011      	movs	r1, r2
 8005cac:	1dfb      	adds	r3, r7, #7
 8005cae:	1c22      	adds	r2, r4, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	1dbb      	adds	r3, r7, #6
 8005cb4:	1c02      	adds	r2, r0, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	1d7b      	adds	r3, r7, #5
 8005cba:	1c0a      	adds	r2, r1, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
	subscribe_message_t data = {
 8005cbe:	210c      	movs	r1, #12
 8005cc0:	187b      	adds	r3, r7, r1
 8005cc2:	1dfa      	adds	r2, r7, #7
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	187b      	adds	r3, r7, r1
 8005cca:	1dba      	adds	r2, r7, #6
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	705a      	strb	r2, [r3, #1]
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	1d7a      	adds	r2, r7, #5
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	709a      	strb	r2, [r3, #2]
		.sem_id = sem_id,
		.sensor_id = sensor_id,
		.sensor_state = sensor_state
	};

	return xQueueSend(xSubscribeQueue, &data, 0);
 8005cd8:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <subscribe+0x50>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	1879      	adds	r1, r7, r1
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7fa fcd1 	bl	8000688 <xQueueGenericSend>
 8005ce6:	0003      	movs	r3, r0
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b005      	add	sp, #20
 8005cee:	bd90      	pop	{r4, r7, pc}
 8005cf0:	20003028 	.word	0x20003028

08005cf4 <updateSubs>:


static void updateSubs(subscribe_message_t *subs, subscribe_message_t *new_sub) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
    size_t i;

    my_printf("Subscribing...");
 8005cfe:	4b30      	ldr	r3, [pc, #192]	@ (8005dc0 <updateSubs+0xcc>)
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff fee5 	bl	8005ad0 <my_printf>

    // Check for duplicates
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e028      	b.n	8005d5e <updateSubs+0x6a>
        if (subs[i].sem_id == new_sub->sem_id &&
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	0013      	movs	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d11a      	bne.n	8005d58 <updateSubs+0x64>
            subs[i].sensor_id == new_sub->sensor_id &&
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	0013      	movs	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	189b      	adds	r3, r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	18d3      	adds	r3, r2, r3
 8005d2e:	785a      	ldrb	r2, [r3, #1]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
        if (subs[i].sem_id == new_sub->sem_id &&
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d10f      	bne.n	8005d58 <updateSubs+0x64>
            subs[i].sensor_state == new_sub->sensor_state) {
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	789a      	ldrb	r2, [r3, #2]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	789b      	ldrb	r3, [r3, #2]
            subs[i].sensor_id == new_sub->sensor_id &&
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d104      	bne.n	8005d58 <updateSubs+0x64>
            my_printf("Subscription already exists\r\n");
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <updateSubs+0xd0>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff febd 	bl	8005ad0 <my_printf>
            return;
 8005d56:	e02f      	b.n	8005db8 <updateSubs+0xc4>
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d9d3      	bls.n	8005d0c <updateSubs+0x18>
        }
    }

    // Add the new subscription to the first available slot
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e01f      	b.n	8005daa <updateSubs+0xb6>
        if (subs[i].sem_id == 0) {
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	0013      	movs	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	189b      	adds	r3, r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <updateSubs+0xb0>
            subs[i] = *new_sub;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	0013      	movs	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	18d2      	adds	r2, r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	0010      	movs	r0, r2
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	2303      	movs	r3, #3
 8005d90:	001a      	movs	r2, r3
 8005d92:	f000 fce7 	bl	8006764 <memcpy>
            my_printf("Adding subscription in slot [%d]\r\n", i);
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <updateSubs+0xd4>)
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7ff fe97 	bl	8005ad0 <my_printf>
            return;
 8005da2:	e009      	b.n	8005db8 <updateSubs+0xc4>
    for (i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d9dc      	bls.n	8005d6a <updateSubs+0x76>
        }
    }

    // If the table is full
    my_printf("No available slots for new subscription\r\n");
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <updateSubs+0xd8>)
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7ff fe8c 	bl	8005ad0 <my_printf>
}
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b004      	add	sp, #16
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	08006adc 	.word	0x08006adc
 8005dc4:	08006aec 	.word	0x08006aec
 8005dc8:	08006b0c 	.word	0x08006b0c
 8005dcc:	08006b30 	.word	0x08006b30

08005dd0 <print_subscription_table>:

static void print_subscription_table(subscribe_message_t *subs) {
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e020      	b.n	8005e20 <print_subscription_table+0x50>
        my_printf("[%d] %d %d %d\r\n", i, subs[i].sem_id, subs[i].sensor_id, subs[i].sensor_state);
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	0013      	movs	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	189b      	adds	r3, r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	18d3      	adds	r3, r2, r3
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	001c      	movs	r4, r3
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	0013      	movs	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	001d      	movs	r5, r3
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	0013      	movs	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	189b      	adds	r3, r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	18d3      	adds	r3, r2, r3
 8005e0a:	789b      	ldrb	r3, [r3, #2]
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	4808      	ldr	r0, [pc, #32]	@ (8005e30 <print_subscription_table+0x60>)
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	002b      	movs	r3, r5
 8005e14:	0022      	movs	r2, r4
 8005e16:	f7ff fe5b 	bl	8005ad0 <my_printf>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	dddb      	ble.n	8005dde <print_subscription_table+0xe>
    }
}
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e30:	08006b5c 	.word	0x08006b5c

08005e34 <uartSensor>:

static void uartSensor(uint8_t *sensors)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	uint8_t rx;
	size_t i;
	if( (USART2->ISR & USART_ISR_RXNE) != USART_ISR_RXNE ) return;
 8005e3c:	4b26      	ldr	r3, [pc, #152]	@ (8005ed8 <uartSensor+0xa4>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2220      	movs	r2, #32
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d142      	bne.n	8005ece <uartSensor+0x9a>
	rx = USART2->RDR;
 8005e48:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <uartSensor+0xa4>)
 8005e4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	210b      	movs	r1, #11
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	701a      	strb	r2, [r3, #0]
	switch(rx) {
 8005e54:	187b      	adds	r3, r7, r1
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b64      	cmp	r3, #100	@ 0x64
 8005e5a:	d017      	beq.n	8005e8c <uartSensor+0x58>
 8005e5c:	dc1b      	bgt.n	8005e96 <uartSensor+0x62>
 8005e5e:	2b63      	cmp	r3, #99	@ 0x63
 8005e60:	d00f      	beq.n	8005e82 <uartSensor+0x4e>
 8005e62:	dc18      	bgt.n	8005e96 <uartSensor+0x62>
 8005e64:	2b61      	cmp	r3, #97	@ 0x61
 8005e66:	d002      	beq.n	8005e6e <uartSensor+0x3a>
 8005e68:	2b62      	cmp	r3, #98	@ 0x62
 8005e6a:	d005      	beq.n	8005e78 <uartSensor+0x44>
 8005e6c:	e013      	b.n	8005e96 <uartSensor+0x62>
	case 'a': sensors[1] = 0; break;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3301      	adds	r3, #1
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e00e      	b.n	8005e96 <uartSensor+0x62>
	case 'b': sensors[1] = 1; break;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	e009      	b.n	8005e96 <uartSensor+0x62>
	case 'c': sensors[2] = 0; break;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3302      	adds	r3, #2
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e004      	b.n	8005e96 <uartSensor+0x62>
	case 'd': sensors[2] = 1; break;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	46c0      	nop			@ (mov r8, r8)
	}
	my_printf("sensors = [ ");
 8005e96:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <uartSensor+0xa8>)
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7ff fe19 	bl	8005ad0 <my_printf>
	for(i = 1; i <= SENSOR_TABLE_SIZE; i++) {
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e00c      	b.n	8005ebe <uartSensor+0x8a>
		my_printf("%d ", sensors[i]);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	18d3      	adds	r3, r2, r3
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	001a      	movs	r2, r3
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <uartSensor+0xac>)
 8005eb0:	0011      	movs	r1, r2
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7ff fe0c 	bl	8005ad0 <my_printf>
	for(i = 1; i <= SENSOR_TABLE_SIZE; i++) {
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d9ef      	bls.n	8005ea4 <uartSensor+0x70>
	}
	my_printf("]\r\n");
 8005ec4:	4b07      	ldr	r3, [pc, #28]	@ (8005ee4 <uartSensor+0xb0>)
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7ff fe02 	bl	8005ad0 <my_printf>
 8005ecc:	e000      	b.n	8005ed0 <uartSensor+0x9c>
	if( (USART2->ISR & USART_ISR_RXNE) != USART_ISR_RXNE ) return;
 8005ece:	46c0      	nop			@ (mov r8, r8)
}
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	40004400 	.word	0x40004400
 8005edc:	08006b6c 	.word	0x08006b6c
 8005ee0:	08006b7c 	.word	0x08006b7c
 8005ee4:	08006b80 	.word	0x08006b80

08005ee8 <publish>:

static void publish(subscribe_message_t *subs, uint8_t *sensors) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	size_t i;
	uint8_t sensor, sem;

	for(i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e057      	b.n	8005fa8 <publish+0xc0>
		if(subs[i].sem_id == 0) continue;
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	0013      	movs	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d048      	beq.n	8005f9c <publish+0xb4>

		sensor = subs[i].sensor_id;
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	0013      	movs	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	189b      	adds	r3, r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	18d2      	adds	r2, r2, r3
 8005f16:	210b      	movs	r1, #11
 8005f18:	187b      	adds	r3, r7, r1
 8005f1a:	7852      	ldrb	r2, [r2, #1]
 8005f1c:	701a      	strb	r2, [r3, #0]
		sem = subs[i].sem_id;
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	0013      	movs	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	18d2      	adds	r2, r2, r3
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	183b      	adds	r3, r7, r0
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	701a      	strb	r2, [r3, #0]

		if(sensors[sensor] == subs[i].sensor_state) continue;
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	7819      	ldrb	r1, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	0013      	movs	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	18d3      	adds	r3, r2, r3
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	d028      	beq.n	8005fa0 <publish+0xb8>

		xSemaphoreGive(sems[sem]);
 8005f4e:	183b      	adds	r3, r7, r0
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	4b19      	ldr	r3, [pc, #100]	@ (8005fb8 <publish+0xd0>)
 8005f54:	0092      	lsls	r2, r2, #2
 8005f56:	58d0      	ldr	r0, [r2, r3]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f7fa fb93 	bl	8000688 <xQueueGenericSend>

		my_printf("published\r\n");
 8005f62:	4b16      	ldr	r3, [pc, #88]	@ (8005fbc <publish+0xd4>)
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7ff fdb3 	bl	8005ad0 <my_printf>

		subs[i].sem_id = 0;
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	0013      	movs	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	189b      	adds	r3, r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	18d3      	adds	r3, r2, r3
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
		subs[i].sensor_id = 0;
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	0013      	movs	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	189b      	adds	r3, r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	18d3      	adds	r3, r2, r3
 8005f86:	2200      	movs	r2, #0
 8005f88:	705a      	strb	r2, [r3, #1]
		subs[i].sensor_state = 0;
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	18d3      	adds	r3, r2, r3
 8005f96:	2200      	movs	r2, #0
 8005f98:	709a      	strb	r2, [r3, #2]
 8005f9a:	e002      	b.n	8005fa2 <publish+0xba>
		if(subs[i].sem_id == 0) continue;
 8005f9c:	46c0      	nop			@ (mov r8, r8)
 8005f9e:	e000      	b.n	8005fa2 <publish+0xba>
		if(sensors[sensor] == subs[i].sensor_state) continue;
 8005fa0:	46c0      	nop			@ (mov r8, r8)
	for(i = 0; i < MAX_SUBSCRIBERS; i++) {
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d9a4      	bls.n	8005ef8 <publish+0x10>
	}
}
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20003030 	.word	0x20003030
 8005fbc:	08006b84 	.word	0x08006b84

08005fc0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
}
 8005fc4:	46c0      	nop			@ (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005fce:	46c0      	nop			@ (mov r8, r8)
 8005fd0:	e7fd      	b.n	8005fce <HardFault_Handler+0x4>
	...

08005fd4 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */

extern xSemaphoreHandle xSem/*, xSem2*/;

void EXTI4_15_IRQHandler() {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	607b      	str	r3, [r7, #4]

    if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0) {
 8005fde:	4b0e      	ldr	r3, [pc, #56]	@ (8006018 <EXTI4_15_IRQHandler+0x44>)
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	019b      	lsls	r3, r3, #6
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d011      	beq.n	800600e <EXTI4_15_IRQHandler+0x3a>
        EXTI->PR = EXTI_PR_PR13;
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <EXTI4_15_IRQHandler+0x44>)
 8005fec:	2280      	movs	r2, #128	@ 0x80
 8005fee:	0192      	lsls	r2, r2, #6
 8005ff0:	615a      	str	r2, [r3, #20]
        xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <EXTI4_15_IRQHandler+0x48>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1d3a      	adds	r2, r7, #4
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7fa fcce 	bl	800099c <xQueueGiveFromISR>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <EXTI4_15_IRQHandler+0x3a>
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <EXTI4_15_IRQHandler+0x4c>)
 8006008:	2280      	movs	r2, #128	@ 0x80
 800600a:	0552      	lsls	r2, r2, #21
 800600c:	601a      	str	r2, [r3, #0]
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
    }
     *
     */

}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	b002      	add	sp, #8
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			@ (mov r8, r8)
 8006018:	40010400 	.word	0x40010400
 800601c:	20003014 	.word	0x20003014
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <USART2_IRQHandler>:

extern xSemaphoreHandle xSem_UART_TC;

void USART2_IRQHandler(){
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
	// Test for TC pending interrupt
	if ( USART2->ISR & USART_ISR_TC ) {
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <USART2_IRQHandler+0x44>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	2240      	movs	r2, #64	@ 0x40
 8006034:	4013      	ands	r3, r2
 8006036:	d013      	beq.n	8006060 <USART2_IRQHandler+0x3c>
		// Clear pending bit by writing a '1'
		// USART2->CR1 = USART_ISR_TCIE;
		USART2->ICR |= USART_ICR_TCCF;
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <USART2_IRQHandler+0x44>)
 800603a:	6a1a      	ldr	r2, [r3, #32]
 800603c:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <USART2_IRQHandler+0x44>)
 800603e:	2140      	movs	r1, #64	@ 0x40
 8006040:	430a      	orrs	r2, r1
 8006042:	621a      	str	r2, [r3, #32]
		// Release the semaphore
		xSemaphoreGiveFromISR(xSem_UART_TC, &xHigherPriorityTaskWoken);
 8006044:	4b09      	ldr	r3, [pc, #36]	@ (800606c <USART2_IRQHandler+0x48>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1d3a      	adds	r2, r7, #4
 800604a:	0011      	movs	r1, r2
 800604c:	0018      	movs	r0, r3
 800604e:	f7fa fca5 	bl	800099c <xQueueGiveFromISR>
		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <USART2_IRQHandler+0x3c>
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <USART2_IRQHandler+0x4c>)
 800605a:	2280      	movs	r2, #128	@ 0x80
 800605c:	0552      	lsls	r2, r2, #21
 800605e:	601a      	str	r2, [r3, #0]
	}
}
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40004400 	.word	0x40004400
 800606c:	20003018 	.word	0x20003018
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <DMA1_Channel4_5_6_7_IRQHandler>:

extern xSemaphoreHandle	xSem_DMA_TC;
void DMA1_Channel4_5_6_7_IRQHandler()
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
		DMA1->IFCR |= DMA_IFCR_CTCIF5;
		// Set global variable
		xSem_DMA_TC = 2;
	}
	*/
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]
	// Test for TC pending interrupt
	if ( DMA1->ISR & DMA_ISR_TCIF4 ) {
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <DMA1_Channel4_5_6_7_IRQHandler+0x48>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	4013      	ands	r3, r2
 8006088:	d014      	beq.n	80060b4 <DMA1_Channel4_5_6_7_IRQHandler+0x40>
		// Clear pending bit by writing a '1'
		// USART2->CR1 = USART_ISR_TCIE;
		DMA1->IFCR |= DMA_IFCR_CTCIF4;
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <DMA1_Channel4_5_6_7_IRQHandler+0x48>)
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <DMA1_Channel4_5_6_7_IRQHandler+0x48>)
 8006090:	2180      	movs	r1, #128	@ 0x80
 8006092:	0189      	lsls	r1, r1, #6
 8006094:	430a      	orrs	r2, r1
 8006096:	605a      	str	r2, [r3, #4]
		// Release the semaphore
		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);
 8006098:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <DMA1_Channel4_5_6_7_IRQHandler+0x4c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	1d3a      	adds	r2, r7, #4
 800609e:	0011      	movs	r1, r2
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7fa fc7b 	bl	800099c <xQueueGiveFromISR>
		// Perform a context switch to the waiting task
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <DMA1_Channel4_5_6_7_IRQHandler+0x40>
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <DMA1_Channel4_5_6_7_IRQHandler+0x50>)
 80060ae:	2280      	movs	r2, #128	@ 0x80
 80060b0:	0552      	lsls	r2, r2, #21
 80060b2:	601a      	str	r2, [r3, #0]
	}
}
 80060b4:	46c0      	nop			@ (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40020000 	.word	0x40020000
 80060c0:	2000301c 	.word	0x2000301c
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <writeTaskInit>:
static xQueueHandle xWriteQueue;

extern xSemaphoreHandle xSem_DMA_TC;
extern xSemaphoreHandle uartMutex;

void writeTaskInit(void *pvParameters){
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	6078      	str	r0, [r7, #4]
    // Create the subscription queue
    xWriteQueue = xQueueCreate(WRITE_QUEUE_LENGTH, sizeof(command_message_t));
 80060d0:	2200      	movs	r2, #0
 80060d2:	2117      	movs	r1, #23
 80060d4:	2005      	movs	r0, #5
 80060d6:	f7fa f9c1 	bl	800045c <xQueueGenericCreate>
 80060da:	0002      	movs	r2, r0
 80060dc:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <writeTaskInit+0x34>)
 80060de:	601a      	str	r2, [r3, #0]

    xTaskCreate(vTaskWrite, "vTask_Write", 128, NULL, 1, &vTaskWrite_handle);
 80060e0:	4907      	ldr	r1, [pc, #28]	@ (8006100 <writeTaskInit+0x38>)
 80060e2:	4808      	ldr	r0, [pc, #32]	@ (8006104 <writeTaskInit+0x3c>)
 80060e4:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <writeTaskInit+0x40>)
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	2301      	movs	r3, #1
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	f7fb fa07 	bl	8001502 <xTaskCreate>

    // my_printf("WRITE TASK DEFINED\r\n");
}
 80060f4:	46c0      	nop			@ (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20003060 	.word	0x20003060
 8006100:	08006b90 	.word	0x08006b90
 8006104:	08006131 	.word	0x08006131
 8006108:	2000305c 	.word	0x2000305c

0800610c <sendMessage>:

BaseType_t sendMessage(command_message_t *message){
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	return xQueueSendToBack(xWriteQueue, &message, 0);
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <sendMessage+0x20>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	1d39      	adds	r1, r7, #4
 800611a:	2300      	movs	r3, #0
 800611c:	2200      	movs	r2, #0
 800611e:	f7fa fab3 	bl	8000688 <xQueueGenericSend>
 8006122:	0003      	movs	r3, r0
}
 8006124:	0018      	movs	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20003060 	.word	0x20003060

08006130 <vTaskWrite>:

static void vTaskWrite(void *pvParameters){
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	command_message_t *msgQueue;
	char *str;
	size_t i;

	while(1){
		xQueueReceive((xWriteQueue), &msgQueue, portMAX_DELAY);
 8006138:	4b23      	ldr	r3, [pc, #140]	@ (80061c8 <vTaskWrite+0x98>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	4252      	negs	r2, r2
 8006140:	210c      	movs	r1, #12
 8006142:	1879      	adds	r1, r7, r1
 8006144:	0018      	movs	r0, r3
 8006146:	f7fa fd0b 	bl	8000b60 <xQueueReceive>

		str = (char *) msgQueue;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	613b      	str	r3, [r7, #16]
		for(i = 0; str[i] != '\0'; i++) {
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e00b      	b.n	800616c <vTaskWrite+0x3c>
			tx_dma_buffer[i] = str[i];
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	7819      	ldrb	r1, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	@ (80061cc <vTaskWrite+0x9c>)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	1c0a      	adds	r2, r1, #0
 8006164:	701a      	strb	r2, [r3, #0]
		for(i = 0; str[i] != '\0'; i++) {
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	18d3      	adds	r3, r2, r3
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ed      	bne.n	8006154 <vTaskWrite+0x24>
		}

		xSemaphoreTake(uartMutex, portMAX_DELAY);
 8006178:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <vTaskWrite+0xa0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	4252      	negs	r2, r2
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f7fa fe68 	bl	8000e58 <xQueueSemaphoreTake>

		DMA1_Channel4->CNDTR = i;
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <vTaskWrite+0xa4>)
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]
		DMA1_Channel4->CCR |= DMA_CCR_EN;
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <vTaskWrite+0xa4>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <vTaskWrite+0xa4>)
 8006194:	2101      	movs	r1, #1
 8006196:	430a      	orrs	r2, r1
 8006198:	601a      	str	r2, [r3, #0]

		xSemaphoreTake(xSem_DMA_TC, portMAX_DELAY);
 800619a:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <vTaskWrite+0xa8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	4252      	negs	r2, r2
 80061a2:	0011      	movs	r1, r2
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7fa fe57 	bl	8000e58 <xQueueSemaphoreTake>

		DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 80061aa:	4b0a      	ldr	r3, [pc, #40]	@ (80061d4 <vTaskWrite+0xa4>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <vTaskWrite+0xa4>)
 80061b0:	2101      	movs	r1, #1
 80061b2:	438a      	bics	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]

		xSemaphoreGive(uartMutex);
 80061b6:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <vTaskWrite+0xa0>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	f7fa fa62 	bl	8000688 <xQueueGenericSend>
		xQueueReceive((xWriteQueue), &msgQueue, portMAX_DELAY);
 80061c4:	e7b8      	b.n	8006138 <vTaskWrite+0x8>
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	20003060 	.word	0x20003060
 80061cc:	20003064 	.word	0x20003064
 80061d0:	20003020 	.word	0x20003020
 80061d4:	40020044 	.word	0x40020044
 80061d8:	2000301c 	.word	0x2000301c

080061dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	0002      	movs	r2, r0
 80061e4:	1dfb      	adds	r3, r7, #7
 80061e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ee:	d809      	bhi.n	8006204 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	001a      	movs	r2, r3
 80061f6:	231f      	movs	r3, #31
 80061f8:	401a      	ands	r2, r3
 80061fa:	4b04      	ldr	r3, [pc, #16]	@ (800620c <__NVIC_EnableIRQ+0x30>)
 80061fc:	2101      	movs	r1, #1
 80061fe:	4091      	lsls	r1, r2
 8006200:	000a      	movs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]
  }
}
 8006204:	46c0      	nop			@ (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}
 800620c:	e000e100 	.word	0xe000e100

08006210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	0002      	movs	r2, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	1dfb      	adds	r3, r7, #7
 800621c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800621e:	1dfb      	adds	r3, r7, #7
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b7f      	cmp	r3, #127	@ 0x7f
 8006224:	d828      	bhi.n	8006278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006226:	4a2f      	ldr	r2, [pc, #188]	@ (80062e4 <__NVIC_SetPriority+0xd4>)
 8006228:	1dfb      	adds	r3, r7, #7
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b25b      	sxtb	r3, r3
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	33c0      	adds	r3, #192	@ 0xc0
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	589b      	ldr	r3, [r3, r2]
 8006236:	1dfa      	adds	r2, r7, #7
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	0011      	movs	r1, r2
 800623c:	2203      	movs	r2, #3
 800623e:	400a      	ands	r2, r1
 8006240:	00d2      	lsls	r2, r2, #3
 8006242:	21ff      	movs	r1, #255	@ 0xff
 8006244:	4091      	lsls	r1, r2
 8006246:	000a      	movs	r2, r1
 8006248:	43d2      	mvns	r2, r2
 800624a:	401a      	ands	r2, r3
 800624c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	22ff      	movs	r2, #255	@ 0xff
 8006254:	401a      	ands	r2, r3
 8006256:	1dfb      	adds	r3, r7, #7
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	0018      	movs	r0, r3
 800625c:	2303      	movs	r3, #3
 800625e:	4003      	ands	r3, r0
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006264:	481f      	ldr	r0, [pc, #124]	@ (80062e4 <__NVIC_SetPriority+0xd4>)
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	430a      	orrs	r2, r1
 8006270:	33c0      	adds	r3, #192	@ 0xc0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006276:	e031      	b.n	80062dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006278:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <__NVIC_SetPriority+0xd8>)
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	0019      	movs	r1, r3
 8006280:	230f      	movs	r3, #15
 8006282:	400b      	ands	r3, r1
 8006284:	3b08      	subs	r3, #8
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	3306      	adds	r3, #6
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	3304      	adds	r3, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	1dfa      	adds	r2, r7, #7
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	0011      	movs	r1, r2
 8006298:	2203      	movs	r2, #3
 800629a:	400a      	ands	r2, r1
 800629c:	00d2      	lsls	r2, r2, #3
 800629e:	21ff      	movs	r1, #255	@ 0xff
 80062a0:	4091      	lsls	r1, r2
 80062a2:	000a      	movs	r2, r1
 80062a4:	43d2      	mvns	r2, r2
 80062a6:	401a      	ands	r2, r3
 80062a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	22ff      	movs	r2, #255	@ 0xff
 80062b0:	401a      	ands	r2, r3
 80062b2:	1dfb      	adds	r3, r7, #7
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	0018      	movs	r0, r3
 80062b8:	2303      	movs	r3, #3
 80062ba:	4003      	ands	r3, r0
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062c0:	4809      	ldr	r0, [pc, #36]	@ (80062e8 <__NVIC_SetPriority+0xd8>)
 80062c2:	1dfb      	adds	r3, r7, #7
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	001c      	movs	r4, r3
 80062c8:	230f      	movs	r3, #15
 80062ca:	4023      	ands	r3, r4
 80062cc:	3b08      	subs	r3, #8
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	430a      	orrs	r2, r1
 80062d2:	3306      	adds	r3, #6
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	18c3      	adds	r3, r0, r3
 80062d8:	3304      	adds	r3, #4
 80062da:	601a      	str	r2, [r3, #0]
}
 80062dc:	46c0      	nop			@ (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b003      	add	sp, #12
 80062e2:	bd90      	pop	{r4, r7, pc}
 80062e4:	e000e100 	.word	0xe000e100
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80062f0:	4b22      	ldr	r3, [pc, #136]	@ (800637c <BSP_LED_Init+0x90>)
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	4b21      	ldr	r3, [pc, #132]	@ (800637c <BSP_LED_Init+0x90>)
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	0289      	lsls	r1, r1, #10
 80062fa:	430a      	orrs	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80062fe:	2390      	movs	r3, #144	@ 0x90
 8006300:	05db      	lsls	r3, r3, #23
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	2390      	movs	r3, #144	@ 0x90
 8006306:	05db      	lsls	r3, r3, #23
 8006308:	491d      	ldr	r1, [pc, #116]	@ (8006380 <BSP_LED_Init+0x94>)
 800630a:	400a      	ands	r2, r1
 800630c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 800630e:	2390      	movs	r3, #144	@ 0x90
 8006310:	05db      	lsls	r3, r3, #23
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	2390      	movs	r3, #144	@ 0x90
 8006316:	05db      	lsls	r3, r3, #23
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	00c9      	lsls	r1, r1, #3
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8006320:	2390      	movs	r3, #144	@ 0x90
 8006322:	05db      	lsls	r3, r3, #23
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	2390      	movs	r3, #144	@ 0x90
 8006328:	05db      	lsls	r3, r3, #23
 800632a:	2120      	movs	r1, #32
 800632c:	438a      	bics	r2, r1
 800632e:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8006330:	2390      	movs	r3, #144	@ 0x90
 8006332:	05db      	lsls	r3, r3, #23
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	2390      	movs	r3, #144	@ 0x90
 8006338:	05db      	lsls	r3, r3, #23
 800633a:	4911      	ldr	r1, [pc, #68]	@ (8006380 <BSP_LED_Init+0x94>)
 800633c:	400a      	ands	r2, r1
 800633e:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8006340:	2390      	movs	r3, #144	@ 0x90
 8006342:	05db      	lsls	r3, r3, #23
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	2390      	movs	r3, #144	@ 0x90
 8006348:	05db      	lsls	r3, r3, #23
 800634a:	21c0      	movs	r1, #192	@ 0xc0
 800634c:	0109      	lsls	r1, r1, #4
 800634e:	430a      	orrs	r2, r1
 8006350:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8006352:	2390      	movs	r3, #144	@ 0x90
 8006354:	05db      	lsls	r3, r3, #23
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	2390      	movs	r3, #144	@ 0x90
 800635a:	05db      	lsls	r3, r3, #23
 800635c:	4908      	ldr	r1, [pc, #32]	@ (8006380 <BSP_LED_Init+0x94>)
 800635e:	400a      	ands	r2, r1
 8006360:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8006362:	2390      	movs	r3, #144	@ 0x90
 8006364:	05db      	lsls	r3, r3, #23
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	2390      	movs	r3, #144	@ 0x90
 800636a:	05db      	lsls	r3, r3, #23
 800636c:	2180      	movs	r1, #128	@ 0x80
 800636e:	0389      	lsls	r1, r1, #14
 8006370:	430a      	orrs	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
}
 8006374:	46c0      	nop			@ (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	40021000 	.word	0x40021000
 8006380:	fffff3ff 	.word	0xfffff3ff

08006384 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8006388:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <BSP_PB_Init+0x84>)
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	4b1e      	ldr	r3, [pc, #120]	@ (8006408 <BSP_PB_Init+0x84>)
 800638e:	2180      	movs	r1, #128	@ 0x80
 8006390:	0309      	lsls	r1, r1, #12
 8006392:	430a      	orrs	r2, r1
 8006394:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8006396:	4b1d      	ldr	r3, [pc, #116]	@ (800640c <BSP_PB_Init+0x88>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b1c      	ldr	r3, [pc, #112]	@ (800640c <BSP_PB_Init+0x88>)
 800639c:	491c      	ldr	r1, [pc, #112]	@ (8006410 <BSP_PB_Init+0x8c>)
 800639e:	400a      	ands	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80063a2:	4a1a      	ldr	r2, [pc, #104]	@ (800640c <BSP_PB_Init+0x88>)
 80063a4:	4b19      	ldr	r3, [pc, #100]	@ (800640c <BSP_PB_Init+0x88>)
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80063aa:	4b18      	ldr	r3, [pc, #96]	@ (800640c <BSP_PB_Init+0x88>)
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	4b17      	ldr	r3, [pc, #92]	@ (800640c <BSP_PB_Init+0x88>)
 80063b0:	4917      	ldr	r1, [pc, #92]	@ (8006410 <BSP_PB_Init+0x8c>)
 80063b2:	400a      	ands	r2, r1
 80063b4:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <BSP_PB_Init+0x84>)
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <BSP_PB_Init+0x84>)
 80063bc:	2101      	movs	r1, #1
 80063be:	430a      	orrs	r2, r1
 80063c0:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 80063c2:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <BSP_PB_Init+0x90>)
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <BSP_PB_Init+0x90>)
 80063c8:	21f0      	movs	r1, #240	@ 0xf0
 80063ca:	438a      	bics	r2, r1
 80063cc:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <BSP_PB_Init+0x90>)
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <BSP_PB_Init+0x90>)
 80063d4:	2120      	movs	r1, #32
 80063d6:	430a      	orrs	r2, r1
 80063d8:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 80063da:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <BSP_PB_Init+0x94>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <BSP_PB_Init+0x94>)
 80063e0:	2180      	movs	r1, #128	@ 0x80
 80063e2:	0189      	lsls	r1, r1, #6
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 80063e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <BSP_PB_Init+0x94>)
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <BSP_PB_Init+0x94>)
 80063ee:	490b      	ldr	r1, [pc, #44]	@ (800641c <BSP_PB_Init+0x98>)
 80063f0:	400a      	ands	r2, r1
 80063f2:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 80063f4:	4b08      	ldr	r3, [pc, #32]	@ (8006418 <BSP_PB_Init+0x94>)
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <BSP_PB_Init+0x94>)
 80063fa:	2180      	movs	r1, #128	@ 0x80
 80063fc:	0189      	lsls	r1, r1, #6
 80063fe:	430a      	orrs	r2, r1
 8006400:	60da      	str	r2, [r3, #12]
}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000
 800640c:	48000800 	.word	0x48000800
 8006410:	f3ffffff 	.word	0xf3ffffff
 8006414:	40010000 	.word	0x40010000
 8006418:	40010400 	.word	0x40010400
 800641c:	ffffdfff 	.word	0xffffdfff

08006420 <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006424:	4b4c      	ldr	r3, [pc, #304]	@ (8006558 <BSP_Console_Init+0x138>)
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	4b4b      	ldr	r3, [pc, #300]	@ (8006558 <BSP_Console_Init+0x138>)
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	0289      	lsls	r1, r1, #10
 800642e:	430a      	orrs	r2, r1
 8006430:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8006432:	2390      	movs	r3, #144	@ 0x90
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	2390      	movs	r3, #144	@ 0x90
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	21f0      	movs	r1, #240	@ 0xf0
 800643e:	438a      	bics	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8006442:	2390      	movs	r3, #144	@ 0x90
 8006444:	05db      	lsls	r3, r3, #23
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	2390      	movs	r3, #144	@ 0x90
 800644a:	05db      	lsls	r3, r3, #23
 800644c:	21a0      	movs	r1, #160	@ 0xa0
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8006452:	2390      	movs	r3, #144	@ 0x90
 8006454:	05db      	lsls	r3, r3, #23
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	2390      	movs	r3, #144	@ 0x90
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	493f      	ldr	r1, [pc, #252]	@ (800655c <BSP_Console_Init+0x13c>)
 800645e:	400a      	ands	r2, r1
 8006460:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8006462:	2390      	movs	r3, #144	@ 0x90
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	2390      	movs	r3, #144	@ 0x90
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	2188      	movs	r1, #136	@ 0x88
 800646e:	0149      	lsls	r1, r1, #5
 8006470:	430a      	orrs	r2, r1
 8006472:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006474:	4b38      	ldr	r3, [pc, #224]	@ (8006558 <BSP_Console_Init+0x138>)
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	4b37      	ldr	r3, [pc, #220]	@ (8006558 <BSP_Console_Init+0x138>)
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	0289      	lsls	r1, r1, #10
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8006482:	4b37      	ldr	r3, [pc, #220]	@ (8006560 <BSP_Console_Init+0x140>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <BSP_Console_Init+0x140>)
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800648e:	4b34      	ldr	r3, [pc, #208]	@ (8006560 <BSP_Console_Init+0x140>)
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8006494:	4b30      	ldr	r3, [pc, #192]	@ (8006558 <BSP_Console_Init+0x138>)
 8006496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006498:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <BSP_Console_Init+0x138>)
 800649a:	4932      	ldr	r1, [pc, #200]	@ (8006564 <BSP_Console_Init+0x144>)
 800649c:	400a      	ands	r2, r1
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
	// USART2->BRR = 833;

	// Baud Rate = 9600
	// With OVER8=0 and Fck=48MHz, USARTDIV = 48E6/9600 = 5000
	// BRR = 5000
	USART2->CR1 &= ~USART_CR1_OVER8;
 80064a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006560 <BSP_Console_Init+0x140>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006560 <BSP_Console_Init+0x140>)
 80064a6:	4930      	ldr	r1, [pc, #192]	@ (8006568 <BSP_Console_Init+0x148>)
 80064a8:	400a      	ands	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
	USART2->BRR = 5000;
 80064ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006560 <BSP_Console_Init+0x140>)
 80064ae:	4a2f      	ldr	r2, [pc, #188]	@ (800656c <BSP_Console_Init+0x14c>)
 80064b0:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80064b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006560 <BSP_Console_Init+0x140>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006560 <BSP_Console_Init+0x140>)
 80064b8:	210c      	movs	r1, #12
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]

	// Enable TX (TC) interrupt
	USART2->CR1 |= USART_CR1_TCIE;
 80064be:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <BSP_Console_Init+0x140>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <BSP_Console_Init+0x140>)
 80064c4:	2140      	movs	r1, #64	@ 0x40
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80064ca:	4b25      	ldr	r3, [pc, #148]	@ (8006560 <BSP_Console_Init+0x140>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <BSP_Console_Init+0x140>)
 80064d0:	2101      	movs	r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

	// Setup RX on DMA Channel 5
	// Setup TX on DMA Channel 4
	// Start DMA clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80064d6:	4b20      	ldr	r3, [pc, #128]	@ (8006558 <BSP_Console_Init+0x138>)
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	4b1f      	ldr	r3, [pc, #124]	@ (8006558 <BSP_Console_Init+0x138>)
 80064dc:	2101      	movs	r1, #1
 80064de:	430a      	orrs	r2, r1
 80064e0:	615a      	str	r2, [r3, #20]
	// Reset DMA1 Channel 4 configuration
	DMA1_Channel4->CCR = 0x00000000;
 80064e2:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <BSP_Console_Init+0x150>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
	// Set direction Memory -> Peripheral
	DMA1_Channel4->CCR |= DMA_CCR_DIR;
 80064e8:	4b21      	ldr	r3, [pc, #132]	@ (8006570 <BSP_Console_Init+0x150>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b20      	ldr	r3, [pc, #128]	@ (8006570 <BSP_Console_Init+0x150>)
 80064ee:	2110      	movs	r1, #16
 80064f0:	430a      	orrs	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
	// Peripheral is USART2 TDR
	DMA1_Channel4->CPAR = (uint32_t) &USART2->TDR;
 80064f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006570 <BSP_Console_Init+0x150>)
 80064f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006574 <BSP_Console_Init+0x154>)
 80064f8:	609a      	str	r2, [r3, #8]
	// Peripheral data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 80064fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <BSP_Console_Init+0x150>)
 80064fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006570 <BSP_Console_Init+0x150>)
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	601a      	str	r2, [r3, #0]
	// Disable auto-increment Peripheral address
	DMA1_Channel4->CCR &= ~DMA_CCR_PINC;
 8006502:	4b1b      	ldr	r3, [pc, #108]	@ (8006570 <BSP_Console_Init+0x150>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b1a      	ldr	r3, [pc, #104]	@ (8006570 <BSP_Console_Init+0x150>)
 8006508:	2140      	movs	r1, #64	@ 0x40
 800650a:	438a      	bics	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
	// Memory is tx_dma_buffer
	DMA1_Channel4->CMAR = (uint32_t) tx_dma_buffer;
 800650e:	4b18      	ldr	r3, [pc, #96]	@ (8006570 <BSP_Console_Init+0x150>)
 8006510:	4a19      	ldr	r2, [pc, #100]	@ (8006578 <BSP_Console_Init+0x158>)
 8006512:	60da      	str	r2, [r3, #12]
	// Memory data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 8006514:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <BSP_Console_Init+0x150>)
 8006516:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <BSP_Console_Init+0x150>)
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	601a      	str	r2, [r3, #0]
	// Enable auto-increment Memory address
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 800651c:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <BSP_Console_Init+0x150>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <BSP_Console_Init+0x150>)
 8006522:	2180      	movs	r1, #128	@ 0x80
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
	// Set Memory Buffer size
	DMA1_Channel4->CNDTR = 0;
 8006528:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <BSP_Console_Init+0x150>)
 800652a:	2200      	movs	r2, #0
 800652c:	605a      	str	r2, [r3, #4]
	// DMA mode is not circular
	DMA1_Channel4->CCR &= ~DMA_CCR_CIRC;
 800652e:	4b10      	ldr	r3, [pc, #64]	@ (8006570 <BSP_Console_Init+0x150>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <BSP_Console_Init+0x150>)
 8006534:	2120      	movs	r1, #32
 8006536:	438a      	bics	r2, r1
 8006538:	601a      	str	r2, [r3, #0]
	// Enable transfer complete interrupt
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 800653a:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <BSP_Console_Init+0x150>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <BSP_Console_Init+0x150>)
 8006540:	2102      	movs	r1, #2
 8006542:	430a      	orrs	r2, r1
 8006544:	601a      	str	r2, [r3, #0]
	// Enable DMA1 Channel 4
	//DMA1_Channel4->CCR |= DMA_CCR_EN;
	// Enable USART2 DMA Request on TX
	USART2->CR3 |= USART_CR3_DMAT;
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <BSP_Console_Init+0x140>)
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <BSP_Console_Init+0x140>)
 800654c:	2180      	movs	r1, #128	@ 0x80
 800654e:	430a      	orrs	r2, r1
 8006550:	609a      	str	r2, [r3, #8]
}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40021000 	.word	0x40021000
 800655c:	ffff00ff 	.word	0xffff00ff
 8006560:	40004400 	.word	0x40004400
 8006564:	fffcffff 	.word	0xfffcffff
 8006568:	ffff7fff 	.word	0xffff7fff
 800656c:	00001388 	.word	0x00001388
 8006570:	40020044 	.word	0x40020044
 8006574:	40004428 	.word	0x40004428
 8006578:	20003064 	.word	0x20003064

0800657c <BSP_NVIC_Init>:
/*
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */
void BSP_NVIC_Init()
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
    EXTI->IMR |= EXTI_IMR_MR14;                     // Habilita a interrupcao para a linha 14
    EXTI->RTSR |= EXTI_RTSR_TR14;                   // Habilita trigger na borda de subida

	*/
	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn,configMAX_API_CALL_INTERRUPT_PRIORITY + 1);
 8006580:	2106      	movs	r1, #6
 8006582:	2007      	movs	r0, #7
 8006584:	f7ff fe44 	bl	8006210 <__NVIC_SetPriority>

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006588:	2007      	movs	r0, #7
 800658a:	f7ff fe27 	bl	80061dc <__NVIC_EnableIRQ>

	// NVIC_SetPriority(USART2_IRQn, configMAX_API_CALL_INTERRUPT_PRIORITY + 1);
	// NVIC_EnableIRQ(USART2_IRQn);

	NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, configMAX_API_CALL_INTERRUPT_PRIORITY + 1);
 800658e:	2106      	movs	r1, #6
 8006590:	200b      	movs	r0, #11
 8006592:	f7ff fe3d 	bl	8006210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006596:	200b      	movs	r0, #11
 8006598:	f7ff fe20 	bl	80061dc <__NVIC_EnableIRQ>
}
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80065a4:	480d      	ldr	r0, [pc, #52]	@ (80065dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80065a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80065a8:	f000 f825 	bl	80065f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80065ac:	480c      	ldr	r0, [pc, #48]	@ (80065e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80065ae:	490d      	ldr	r1, [pc, #52]	@ (80065e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80065b0:	4a0d      	ldr	r2, [pc, #52]	@ (80065e8 <LoopForever+0xe>)
  movs r3, #0
 80065b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065b4:	e002      	b.n	80065bc <LoopCopyDataInit>

080065b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065ba:	3304      	adds	r3, #4

080065bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065c0:	d3f9      	bcc.n	80065b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065c2:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80065c4:	4c0a      	ldr	r4, [pc, #40]	@ (80065f0 <LoopForever+0x16>)
  movs r3, #0
 80065c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065c8:	e001      	b.n	80065ce <LoopFillZerobss>

080065ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065cc:	3204      	adds	r2, #4

080065ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065d0:	d3fb      	bcc.n	80065ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80065d2:	f000 f8a3 	bl	800671c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80065d6:	f7fe fedb 	bl	8005390 <main>

080065da <LoopForever>:

LoopForever:
    b LoopForever
 80065da:	e7fe      	b.n	80065da <LoopForever>
  ldr   r0, =_estack
 80065dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80065e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80065e8:	08006c2c 	.word	0x08006c2c
  ldr r2, =_sbss
 80065ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80065f0:	200030c8 	.word	0x200030c8

080065f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80065f4:	e7fe      	b.n	80065f4 <ADC1_COMP_IRQHandler>

080065f6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80065fa:	46c0      	nop			@ (mov r8, r8)
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	2300      	movs	r3, #0
 8006614:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006616:	4b38      	ldr	r3, [pc, #224]	@ (80066f8 <SystemCoreClockUpdate+0xf8>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	220c      	movs	r2, #12
 800661c:	4013      	ands	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d011      	beq.n	800664a <SystemCoreClockUpdate+0x4a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d84f      	bhi.n	80066cc <SystemCoreClockUpdate+0xcc>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <SystemCoreClockUpdate+0x3a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b04      	cmp	r3, #4
 8006636:	d004      	beq.n	8006642 <SystemCoreClockUpdate+0x42>
 8006638:	e048      	b.n	80066cc <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800663a:	4b30      	ldr	r3, [pc, #192]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 800663c:	4a30      	ldr	r2, [pc, #192]	@ (8006700 <SystemCoreClockUpdate+0x100>)
 800663e:	601a      	str	r2, [r3, #0]
      break;
 8006640:	e048      	b.n	80066d4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006642:	4b2e      	ldr	r3, [pc, #184]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 8006644:	4a2e      	ldr	r2, [pc, #184]	@ (8006700 <SystemCoreClockUpdate+0x100>)
 8006646:	601a      	str	r2, [r3, #0]
      break;
 8006648:	e044      	b.n	80066d4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800664a:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <SystemCoreClockUpdate+0xf8>)
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	23f0      	movs	r3, #240	@ 0xf0
 8006650:	039b      	lsls	r3, r3, #14
 8006652:	4013      	ands	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006656:	4b28      	ldr	r3, [pc, #160]	@ (80066f8 <SystemCoreClockUpdate+0xf8>)
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	23c0      	movs	r3, #192	@ 0xc0
 800665c:	025b      	lsls	r3, r3, #9
 800665e:	4013      	ands	r3, r2
 8006660:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	0c9b      	lsrs	r3, r3, #18
 8006666:	3302      	adds	r3, #2
 8006668:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800666a:	4b23      	ldr	r3, [pc, #140]	@ (80066f8 <SystemCoreClockUpdate+0xf8>)
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	220f      	movs	r2, #15
 8006670:	4013      	ands	r3, r2
 8006672:	3301      	adds	r3, #1
 8006674:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	2380      	movs	r3, #128	@ 0x80
 800667a:	025b      	lsls	r3, r3, #9
 800667c:	429a      	cmp	r2, r3
 800667e:	d10a      	bne.n	8006696 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	481f      	ldr	r0, [pc, #124]	@ (8006700 <SystemCoreClockUpdate+0x100>)
 8006684:	f7f9 fd40 	bl	8000108 <__udivsi3>
 8006688:	0003      	movs	r3, r0
 800668a:	001a      	movs	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	435a      	muls	r2, r3
 8006690:	4b1a      	ldr	r3, [pc, #104]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 8006692:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8006694:	e01e      	b.n	80066d4 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	23c0      	movs	r3, #192	@ 0xc0
 800669a:	025b      	lsls	r3, r3, #9
 800669c:	429a      	cmp	r2, r3
 800669e:	d10a      	bne.n	80066b6 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	4818      	ldr	r0, [pc, #96]	@ (8006704 <SystemCoreClockUpdate+0x104>)
 80066a4:	f7f9 fd30 	bl	8000108 <__udivsi3>
 80066a8:	0003      	movs	r3, r0
 80066aa:	001a      	movs	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	435a      	muls	r2, r3
 80066b0:	4b12      	ldr	r3, [pc, #72]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 80066b2:	601a      	str	r2, [r3, #0]
      break;
 80066b4:	e00e      	b.n	80066d4 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	4811      	ldr	r0, [pc, #68]	@ (8006700 <SystemCoreClockUpdate+0x100>)
 80066ba:	f7f9 fd25 	bl	8000108 <__udivsi3>
 80066be:	0003      	movs	r3, r0
 80066c0:	001a      	movs	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	435a      	muls	r2, r3
 80066c6:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 80066c8:	601a      	str	r2, [r3, #0]
      break;
 80066ca:	e003      	b.n	80066d4 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80066cc:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 80066ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006700 <SystemCoreClockUpdate+0x100>)
 80066d0:	601a      	str	r2, [r3, #0]
      break;
 80066d2:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80066d4:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <SystemCoreClockUpdate+0xf8>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	220f      	movs	r2, #15
 80066dc:	4013      	ands	r3, r2
 80066de:	4a0a      	ldr	r2, [pc, #40]	@ (8006708 <SystemCoreClockUpdate+0x108>)
 80066e0:	5cd3      	ldrb	r3, [r2, r3]
 80066e2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	40da      	lsrs	r2, r3
 80066ec:	4b03      	ldr	r3, [pc, #12]	@ (80066fc <SystemCoreClockUpdate+0xfc>)
 80066ee:	601a      	str	r2, [r3, #0]
}
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021000 	.word	0x40021000
 80066fc:	20000008 	.word	0x20000008
 8006700:	007a1200 	.word	0x007a1200
 8006704:	02dc6c00 	.word	0x02dc6c00
 8006708:	08006c14 	.word	0x08006c14

0800670c <memset>:
 800670c:	0003      	movs	r3, r0
 800670e:	1882      	adds	r2, r0, r2
 8006710:	4293      	cmp	r3, r2
 8006712:	d100      	bne.n	8006716 <memset+0xa>
 8006714:	4770      	bx	lr
 8006716:	7019      	strb	r1, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	e7f9      	b.n	8006710 <memset+0x4>

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	2600      	movs	r6, #0
 8006720:	4c0c      	ldr	r4, [pc, #48]	@ (8006754 <__libc_init_array+0x38>)
 8006722:	4d0d      	ldr	r5, [pc, #52]	@ (8006758 <__libc_init_array+0x3c>)
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	2600      	movs	r6, #0
 800672e:	f000 f823 	bl	8006778 <_init>
 8006732:	4c0a      	ldr	r4, [pc, #40]	@ (800675c <__libc_init_array+0x40>)
 8006734:	4d0a      	ldr	r5, [pc, #40]	@ (8006760 <__libc_init_array+0x44>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	00b3      	lsls	r3, r6, #2
 8006742:	58eb      	ldr	r3, [r5, r3]
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	00b3      	lsls	r3, r6, #2
 800674c:	58eb      	ldr	r3, [r5, r3]
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	08006c24 	.word	0x08006c24
 8006758:	08006c24 	.word	0x08006c24
 800675c:	08006c28 	.word	0x08006c28
 8006760:	08006c24 	.word	0x08006c24

08006764 <memcpy>:
 8006764:	2300      	movs	r3, #0
 8006766:	b510      	push	{r4, lr}
 8006768:	429a      	cmp	r2, r3
 800676a:	d100      	bne.n	800676e <memcpy+0xa>
 800676c:	bd10      	pop	{r4, pc}
 800676e:	5ccc      	ldrb	r4, [r1, r3]
 8006770:	54c4      	strb	r4, [r0, r3]
 8006772:	3301      	adds	r3, #1
 8006774:	e7f8      	b.n	8006768 <memcpy+0x4>
	...

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
