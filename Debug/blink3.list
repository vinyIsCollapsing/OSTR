
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001748  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08001808  08001808  00002808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019f4  080019f4  000029f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019f8  080019f8  000029f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080019fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000598  20000004  08001a00  00003004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000059c  08001a00  0000359c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009852  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001eb5  00000000  00000000  0000c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000858  00000000  00000000  0000e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000649  00000000  00000000  0000ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003345  00000000  00000000  0000f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e52c  00000000  00000000  0001291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007807b  00000000  00000000  00020e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00098ec5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001bc0  00000000  00000000  00098f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  0009aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017f0 	.word	0x080017f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080017f0 	.word	0x080017f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	6839      	ldr	r1, [r7, #0]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	0018      	movs	r0, r3
 8000232:	f000 f805 	bl	8000240 <MyWrapper_xQueueGiveFromISR>
 8000236:	0003      	movs	r3, r0
 8000238:	0018      	movs	r0, r3
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	@ 0x28
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000250:	6a3b      	ldr	r3, [r7, #32]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d105      	bne.n	8000262 <MyWrapper_xQueueGiveFromISR+0x22>
 8000256:	4a5e      	ldr	r2, [pc, #376]	@ (80003d0 <MyWrapper_xQueueGiveFromISR+0x190>)
 8000258:	4b5e      	ldr	r3, [pc, #376]	@ (80003d4 <MyWrapper_xQueueGiveFromISR+0x194>)
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f000 ff25 	bl	80010ac <vAssertCalled>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000262:	6a3b      	ldr	r3, [r7, #32]
 8000264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000266:	2b00      	cmp	r3, #0
 8000268:	d005      	beq.n	8000276 <MyWrapper_xQueueGiveFromISR+0x36>
 800026a:	4a5b      	ldr	r2, [pc, #364]	@ (80003d8 <MyWrapper_xQueueGiveFromISR+0x198>)
 800026c:	4b59      	ldr	r3, [pc, #356]	@ (80003d4 <MyWrapper_xQueueGiveFromISR+0x194>)
 800026e:	0011      	movs	r1, r2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 ff1b 	bl	80010ac <vAssertCalled>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000276:	6a3b      	ldr	r3, [r7, #32]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d103      	bne.n	8000286 <MyWrapper_xQueueGiveFromISR+0x46>
 800027e:	6a3b      	ldr	r3, [r7, #32]
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <MyWrapper_xQueueGiveFromISR+0x4a>
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <MyWrapper_xQueueGiveFromISR+0x4c>
 800028a:	2300      	movs	r3, #0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <MyWrapper_xQueueGiveFromISR+0x5c>
 8000290:	4a52      	ldr	r2, [pc, #328]	@ (80003dc <MyWrapper_xQueueGiveFromISR+0x19c>)
 8000292:	4b50      	ldr	r3, [pc, #320]	@ (80003d4 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000294:	0011      	movs	r1, r2
 8000296:	0018      	movs	r0, r3
 8000298:	f000 ff08 	bl	80010ac <vAssertCalled>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800029c:	f000 fb33 	bl	8000906 <ulSetInterruptMaskFromISR>
 80002a0:	0003      	movs	r3, r0
 80002a2:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80002a4:	6a3b      	ldr	r3, [r7, #32]
 80002a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002a8:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80002aa:	6a3b      	ldr	r3, [r7, #32]
 80002ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80002ae:	69ba      	ldr	r2, [r7, #24]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d263      	bcs.n	800037c <MyWrapper_xQueueGiveFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80002b4:	2317      	movs	r3, #23
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	6a3a      	ldr	r2, [r7, #32]
 80002ba:	2145      	movs	r1, #69	@ 0x45
 80002bc:	5c52      	ldrb	r2, [r2, r1]
 80002be:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80002c0:	6a3b      	ldr	r3, [r7, #32]
 80002c2:	224c      	movs	r2, #76	@ 0x4c
 80002c4:	5c9b      	ldrb	r3, [r3, r2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d004      	beq.n	80002d4 <MyWrapper_xQueueGiveFromISR+0x94>
 80002ca:	db19      	blt.n	8000300 <MyWrapper_xQueueGiveFromISR+0xc0>
 80002cc:	3b02      	subs	r3, #2
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d816      	bhi.n	8000300 <MyWrapper_xQueueGiveFromISR+0xc0>
 80002d2:	e00d      	b.n	80002f0 <MyWrapper_xQueueGiveFromISR+0xb0>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <MyWrapper_xQueueGiveFromISR+0x9e>
 80002da:	2059      	movs	r0, #89	@ 0x59
 80002dc:	e000      	b.n	80002e0 <MyWrapper_xQueueGiveFromISR+0xa0>
 80002de:	20c3      	movs	r0, #195	@ 0xc3
 80002e0:	6a39      	ldr	r1, [r7, #32]
 80002e2:	6a3b      	ldr	r3, [r7, #32]
 80002e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002e6:	3301      	adds	r3, #1
 80002e8:	001a      	movs	r2, r3
 80002ea:	f000 fd6b 	bl	8000dc4 <xTraceEventCreate2>
 80002ee:	e007      	b.n	8000300 <MyWrapper_xQueueGiveFromISR+0xc0>
 80002f0:	6a39      	ldr	r1, [r7, #32]
 80002f2:	6a3b      	ldr	r3, [r7, #32]
 80002f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002f6:	3301      	adds	r3, #1
 80002f8:	001a      	movs	r2, r3
 80002fa:	205a      	movs	r0, #90	@ 0x5a
 80002fc:	f000 fd62 	bl	8000dc4 <xTraceEventCreate2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b25b      	sxtb	r3, r3
 8000310:	3301      	adds	r3, #1
 8000312:	d111      	bne.n	8000338 <MyWrapper_xQueueGiveFromISR+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000314:	6a3b      	ldr	r3, [r7, #32]
 8000316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000318:	2b00      	cmp	r3, #0
 800031a:	d02c      	beq.n	8000376 <MyWrapper_xQueueGiveFromISR+0x136>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800031c:	6a3b      	ldr	r3, [r7, #32]
 800031e:	3324      	adds	r3, #36	@ 0x24
 8000320:	0018      	movs	r0, r3
 8000322:	f000 f9f9 	bl	8000718 <xTaskRemoveFromEventList>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d025      	beq.n	8000376 <MyWrapper_xQueueGiveFromISR+0x136>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d022      	beq.n	8000376 <MyWrapper_xQueueGiveFromISR+0x136>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2201      	movs	r2, #1
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	e01e      	b.n	8000376 <MyWrapper_xQueueGiveFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000338:	f000 f854 	bl	80003e4 <uxTaskGetNumberOfTasks>
 800033c:	0003      	movs	r3, r0
 800033e:	613b      	str	r3, [r7, #16]
 8000340:	2117      	movs	r1, #23
 8000342:	187b      	adds	r3, r7, r1
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b25b      	sxtb	r3, r3
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	429a      	cmp	r2, r3
 800034c:	d913      	bls.n	8000376 <MyWrapper_xQueueGiveFromISR+0x136>
 800034e:	187b      	adds	r3, r7, r1
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b25b      	sxtb	r3, r3
 8000354:	2b7f      	cmp	r3, #127	@ 0x7f
 8000356:	d105      	bne.n	8000364 <MyWrapper_xQueueGiveFromISR+0x124>
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <MyWrapper_xQueueGiveFromISR+0x1a0>)
 800035a:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <MyWrapper_xQueueGiveFromISR+0x194>)
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fea4 	bl	80010ac <vAssertCalled>
 8000364:	2317      	movs	r3, #23
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	b259      	sxtb	r1, r3
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	2245      	movs	r2, #69	@ 0x45
 8000374:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000376:	2301      	movs	r3, #1
 8000378:	627b      	str	r3, [r7, #36]	@ 0x24
 800037a:	e01f      	b.n	80003bc <MyWrapper_xQueueGiveFromISR+0x17c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800037c:	6a3b      	ldr	r3, [r7, #32]
 800037e:	224c      	movs	r2, #76	@ 0x4c
 8000380:	5c9b      	ldrb	r3, [r3, r2]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d004      	beq.n	8000390 <MyWrapper_xQueueGiveFromISR+0x150>
 8000386:	db17      	blt.n	80003b8 <MyWrapper_xQueueGiveFromISR+0x178>
 8000388:	3b02      	subs	r3, #2
 800038a:	2b01      	cmp	r3, #1
 800038c:	d814      	bhi.n	80003b8 <MyWrapper_xQueueGiveFromISR+0x178>
 800038e:	e00c      	b.n	80003aa <MyWrapper_xQueueGiveFromISR+0x16a>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d101      	bne.n	800039a <MyWrapper_xQueueGiveFromISR+0x15a>
 8000396:	205c      	movs	r0, #92	@ 0x5c
 8000398:	e000      	b.n	800039c <MyWrapper_xQueueGiveFromISR+0x15c>
 800039a:	20c4      	movs	r0, #196	@ 0xc4
 800039c:	6a39      	ldr	r1, [r7, #32]
 800039e:	6a3b      	ldr	r3, [r7, #32]
 80003a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003a2:	001a      	movs	r2, r3
 80003a4:	f000 fd0e 	bl	8000dc4 <xTraceEventCreate2>
 80003a8:	e006      	b.n	80003b8 <MyWrapper_xQueueGiveFromISR+0x178>
 80003aa:	6a39      	ldr	r1, [r7, #32]
 80003ac:	6a3b      	ldr	r3, [r7, #32]
 80003ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003b0:	001a      	movs	r2, r3
 80003b2:	205d      	movs	r0, #93	@ 0x5d
 80003b4:	f000 fd06 	bl	8000dc4 <xTraceEventCreate2>
            xReturn = errQUEUE_FULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 faa7 	bl	8000912 <vClearInterruptMaskFromISR>

    return xReturn;
 80003c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80003c6:	0018      	movs	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b00a      	add	sp, #40	@ 0x28
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	000004c9 	.word	0x000004c9
 80003d4:	08001808 	.word	0x08001808
 80003d8:	000004cd 	.word	0x000004cd
 80003dc:	000004d2 	.word	0x000004d2
 80003e0:	00000551 	.word	0x00000551

080003e4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80003e8:	4b02      	ldr	r3, [pc, #8]	@ (80003f4 <uxTaskGetNumberOfTasks+0x10>)
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	200000a4 	.word	0x200000a4

080003f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8000402:	4b7d      	ldr	r3, [pc, #500]	@ (80005f8 <xTaskIncrementTick+0x200>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d003      	beq.n	8000412 <xTaskIncrementTick+0x1a>
 800040a:	4b7c      	ldr	r3, [pc, #496]	@ (80005fc <xTaskIncrementTick+0x204>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d105      	bne.n	800041e <xTaskIncrementTick+0x26>
 8000412:	4b7b      	ldr	r3, [pc, #492]	@ (8000600 <xTaskIncrementTick+0x208>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b7b      	ldr	r3, [pc, #492]	@ (8000604 <xTaskIncrementTick+0x20c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3201      	adds	r2, #1
 800041c:	619a      	str	r2, [r3, #24]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800041e:	4b76      	ldr	r3, [pc, #472]	@ (80005f8 <xTaskIncrementTick+0x200>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d000      	beq.n	8000428 <xTaskIncrementTick+0x30>
 8000426:	e0dc      	b.n	80005e2 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000428:	4b75      	ldr	r3, [pc, #468]	@ (8000600 <xTaskIncrementTick+0x208>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000430:	4b73      	ldr	r3, [pc, #460]	@ (8000600 <xTaskIncrementTick+0x208>)
 8000432:	69ba      	ldr	r2, [r7, #24]
 8000434:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d11b      	bne.n	8000474 <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 800043c:	4b72      	ldr	r3, [pc, #456]	@ (8000608 <xTaskIncrementTick+0x210>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d005      	beq.n	8000452 <xTaskIncrementTick+0x5a>
 8000446:	4a71      	ldr	r2, [pc, #452]	@ (800060c <xTaskIncrementTick+0x214>)
 8000448:	4b71      	ldr	r3, [pc, #452]	@ (8000610 <xTaskIncrementTick+0x218>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fe2d 	bl	80010ac <vAssertCalled>
 8000452:	4b6d      	ldr	r3, [pc, #436]	@ (8000608 <xTaskIncrementTick+0x210>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	4b6e      	ldr	r3, [pc, #440]	@ (8000614 <xTaskIncrementTick+0x21c>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b6a      	ldr	r3, [pc, #424]	@ (8000608 <xTaskIncrementTick+0x210>)
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	4b6c      	ldr	r3, [pc, #432]	@ (8000614 <xTaskIncrementTick+0x21c>)
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	4b6c      	ldr	r3, [pc, #432]	@ (8000618 <xTaskIncrementTick+0x220>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	4b6a      	ldr	r3, [pc, #424]	@ (8000618 <xTaskIncrementTick+0x220>)
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	f000 fa2a 	bl	80008c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000474:	4b69      	ldr	r3, [pc, #420]	@ (800061c <xTaskIncrementTick+0x224>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	69ba      	ldr	r2, [r7, #24]
 800047a:	429a      	cmp	r2, r3
 800047c:	d200      	bcs.n	8000480 <xTaskIncrementTick+0x88>
 800047e:	e0a9      	b.n	80005d4 <xTaskIncrementTick+0x1dc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000480:	4b61      	ldr	r3, [pc, #388]	@ (8000608 <xTaskIncrementTick+0x210>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d104      	bne.n	8000494 <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800048a:	4b64      	ldr	r3, [pc, #400]	@ (800061c <xTaskIncrementTick+0x224>)
 800048c:	2201      	movs	r2, #1
 800048e:	4252      	negs	r2, r2
 8000490:	601a      	str	r2, [r3, #0]
                    break;
 8000492:	e09f      	b.n	80005d4 <xTaskIncrementTick+0x1dc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000494:	4b5c      	ldr	r3, [pc, #368]	@ (8000608 <xTaskIncrementTick+0x210>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d203      	bcs.n	80004b4 <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80004ac:	4b5b      	ldr	r3, [pc, #364]	@ (800061c <xTaskIncrementTick+0x224>)
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80004b2:	e08f      	b.n	80005d4 <xTaskIncrementTick+0x1dc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	68d2      	ldr	r2, [r2, #12]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	6892      	ldr	r2, [r2, #8]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	3304      	adds	r3, #4
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d103      	bne.n	80004e2 <xTaskIncrementTick+0xea>
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	68da      	ldr	r2, [r3, #12]
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	1e5a      	subs	r2, r3, #1
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d01e      	beq.n	8000538 <xTaskIncrementTick+0x140>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	6a12      	ldr	r2, [r2, #32]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	6a1b      	ldr	r3, [r3, #32]
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	69d2      	ldr	r2, [r2, #28]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	3318      	adds	r3, #24
 800051c:	429a      	cmp	r2, r3
 800051e:	d103      	bne.n	8000528 <xTaskIncrementTick+0x130>
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	6a1a      	ldr	r2, [r3, #32]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	2200      	movs	r2, #0
 800052c:	629a      	str	r2, [r3, #40]	@ 0x28
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	0019      	movs	r1, r3
 800053c:	2030      	movs	r0, #48	@ 0x30
 800053e:	f000 fbc9 	bl	8000cd4 <xTraceEventCreate1>
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000546:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <xTaskIncrementTick+0x228>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d903      	bls.n	8000556 <xTaskIncrementTick+0x15e>
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <xTaskIncrementTick+0x228>)
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800055a:	4932      	ldr	r1, [pc, #200]	@ (8000624 <xTaskIncrementTick+0x22c>)
 800055c:	0013      	movs	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	189b      	adds	r3, r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	18cb      	adds	r3, r1, r3
 8000566:	3304      	adds	r3, #4
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	3204      	adds	r2, #4
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	1d1a      	adds	r2, r3, #4
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000590:	0013      	movs	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	189b      	adds	r3, r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4a22      	ldr	r2, [pc, #136]	@ (8000624 <xTaskIncrementTick+0x22c>)
 800059a:	189a      	adds	r2, r3, r2
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005a4:	491f      	ldr	r1, [pc, #124]	@ (8000624 <xTaskIncrementTick+0x22c>)
 80005a6:	0013      	movs	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	189b      	adds	r3, r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	585b      	ldr	r3, [r3, r1]
 80005b0:	1c58      	adds	r0, r3, #1
 80005b2:	491c      	ldr	r1, [pc, #112]	@ (8000624 <xTaskIncrementTick+0x22c>)
 80005b4:	0013      	movs	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	189b      	adds	r3, r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <xTaskIncrementTick+0x230>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d800      	bhi.n	80005ce <xTaskIncrementTick+0x1d6>
 80005cc:	e758      	b.n	8000480 <xTaskIncrementTick+0x88>
                        {
                            xSwitchRequired = pdTRUE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80005d2:	e755      	b.n	8000480 <xTaskIncrementTick+0x88>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80005d4:	4b15      	ldr	r3, [pc, #84]	@ (800062c <xTaskIncrementTick+0x234>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d007      	beq.n	80005ec <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e004      	b.n	80005ec <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <xTaskIncrementTick+0x204>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <xTaskIncrementTick+0x204>)
 80005ea:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80005ec:	69fb      	ldr	r3, [r7, #28]
}
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b008      	add	sp, #32
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	200000c0 	.word	0x200000c0
 80005fc:	200000b0 	.word	0x200000b0
 8000600:	200000a8 	.word	0x200000a8
 8000604:	20000594 	.word	0x20000594
 8000608:	20000088 	.word	0x20000088
 800060c:	00000ab7 	.word	0x00000ab7
 8000610:	08001820 	.word	0x08001820
 8000614:	2000008c 	.word	0x2000008c
 8000618:	200000b8 	.word	0x200000b8
 800061c:	200000bc 	.word	0x200000bc
 8000620:	200000ac 	.word	0x200000ac
 8000624:	20000024 	.word	0x20000024
 8000628:	20000020 	.word	0x20000020
 800062c:	200000b4 	.word	0x200000b4

08000630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <vTaskSwitchContext+0xcc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800063e:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <vTaskSwitchContext+0xd0>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000644:	e055      	b.n	80006f2 <vTaskSwitchContext+0xc2>
        xYieldPending = pdFALSE;
 8000646:	4b2e      	ldr	r3, [pc, #184]	@ (8000700 <vTaskSwitchContext+0xd0>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <vTaskSwitchContext+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <vTaskSwitchContext+0xd4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	429a      	cmp	r2, r3
 800065a:	d808      	bhi.n	800066e <vTaskSwitchContext+0x3e>
 800065c:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <vTaskSwitchContext+0xd4>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <vTaskSwitchContext+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3334      	adds	r3, #52	@ 0x34
 8000666:	0019      	movs	r1, r3
 8000668:	0010      	movs	r0, r2
 800066a:	f000 fd3d 	bl	80010e8 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <vTaskSwitchContext+0xd8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e00b      	b.n	800068e <vTaskSwitchContext+0x5e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d105      	bne.n	8000688 <vTaskSwitchContext+0x58>
 800067c:	4a23      	ldr	r2, [pc, #140]	@ (800070c <vTaskSwitchContext+0xdc>)
 800067e:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <vTaskSwitchContext+0xe0>)
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd12 	bl	80010ac <vAssertCalled>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4921      	ldr	r1, [pc, #132]	@ (8000714 <vTaskSwitchContext+0xe4>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	0013      	movs	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	189b      	adds	r3, r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	585b      	ldr	r3, [r3, r1]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0ea      	beq.n	8000676 <vTaskSwitchContext+0x46>
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	0013      	movs	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	189b      	adds	r3, r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <vTaskSwitchContext+0xe4>)
 80006ac:	189b      	adds	r3, r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	3308      	adds	r3, #8
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d104      	bne.n	80006d0 <vTaskSwitchContext+0xa0>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	68da      	ldr	r2, [r3, #12]
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <vTaskSwitchContext+0xd4>)
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <vTaskSwitchContext+0xd8>)
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <vTaskSwitchContext+0xd4>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <vTaskSwitchContext+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f000 fbe5 	bl	8000ebc <xTraceTaskSwitch>
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	200000c0 	.word	0x200000c0
 8000700:	200000b4 	.word	0x200000b4
 8000704:	20000020 	.word	0x20000020
 8000708:	200000ac 	.word	0x200000ac
 800070c:	00000bf6 	.word	0x00000bf6
 8000710:	08001820 	.word	0x08001820
 8000714:	20000024 	.word	0x20000024

08000718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <xTaskRemoveFromEventList+0x22>
 800072e:	4a5e      	ldr	r2, [pc, #376]	@ (80008a8 <xTaskRemoveFromEventList+0x190>)
 8000730:	4b5e      	ldr	r3, [pc, #376]	@ (80008ac <xTaskRemoveFromEventList+0x194>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fcb9 	bl	80010ac <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	6a12      	ldr	r2, [r2, #32]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	6a1b      	ldr	r3, [r3, #32]
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	69d2      	ldr	r2, [r2, #28]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	3318      	adds	r3, #24
 800075c:	429a      	cmp	r2, r3
 800075e:	d103      	bne.n	8000768 <xTaskRemoveFromEventList+0x50>
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	6a1a      	ldr	r2, [r3, #32]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000778:	4b4d      	ldr	r3, [pc, #308]	@ (80008b0 <xTaskRemoveFromEventList+0x198>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d162      	bne.n	8000846 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	68d2      	ldr	r2, [r2, #12]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	6892      	ldr	r2, [r2, #8]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	3304      	adds	r3, #4
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d103      	bne.n	80007ae <xTaskRemoveFromEventList+0x96>
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	0019      	movs	r1, r3
 80007c2:	2030      	movs	r0, #48	@ 0x30
 80007c4:	f000 fa86 	bl	8000cd4 <xTraceEventCreate1>
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007cc:	4b39      	ldr	r3, [pc, #228]	@ (80008b4 <xTaskRemoveFromEventList+0x19c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d903      	bls.n	80007dc <xTaskRemoveFromEventList+0xc4>
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007d8:	4b36      	ldr	r3, [pc, #216]	@ (80008b4 <xTaskRemoveFromEventList+0x19c>)
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007e0:	4935      	ldr	r1, [pc, #212]	@ (80008b8 <xTaskRemoveFromEventList+0x1a0>)
 80007e2:	0013      	movs	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	18cb      	adds	r3, r1, r3
 80007ec:	3304      	adds	r3, #4
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	3204      	adds	r2, #4
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	1d1a      	adds	r2, r3, #4
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000816:	0013      	movs	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	189b      	adds	r3, r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <xTaskRemoveFromEventList+0x1a0>)
 8000820:	189a      	adds	r2, r3, r2
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800082a:	4923      	ldr	r1, [pc, #140]	@ (80008b8 <xTaskRemoveFromEventList+0x1a0>)
 800082c:	0013      	movs	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	189b      	adds	r3, r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	585b      	ldr	r3, [r3, r1]
 8000836:	1c58      	adds	r0, r3, #1
 8000838:	491f      	ldr	r1, [pc, #124]	@ (80008b8 <xTaskRemoveFromEventList+0x1a0>)
 800083a:	0013      	movs	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	189b      	adds	r3, r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	5058      	str	r0, [r3, r1]
 8000844:	e01b      	b.n	800087e <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <xTaskRemoveFromEventList+0x1a4>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	61da      	str	r2, [r3, #28]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	3218      	adds	r2, #24
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	3318      	adds	r3, #24
 8000868:	001a      	movs	r2, r3
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <xTaskRemoveFromEventList+0x1a4>)
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <xTaskRemoveFromEventList+0x1a4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <xTaskRemoveFromEventList+0x1a4>)
 800087c:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <xTaskRemoveFromEventList+0x1a8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000888:	429a      	cmp	r2, r3
 800088a:	d905      	bls.n	8000898 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <xTaskRemoveFromEventList+0x1ac>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e001      	b.n	800089c <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800089c:	69fb      	ldr	r3, [r7, #28]
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b008      	add	sp, #32
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	00000c74 	.word	0x00000c74
 80008ac:	08001820 	.word	0x08001820
 80008b0:	200000c0 	.word	0x200000c0
 80008b4:	200000ac 	.word	0x200000ac
 80008b8:	20000024 	.word	0x20000024
 80008bc:	20000090 	.word	0x20000090
 80008c0:	20000020 	.word	0x20000020
 80008c4:	200000b4 	.word	0x200000b4

080008c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <prvResetNextTaskUnblockTime+0x2c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <prvResetNextTaskUnblockTime+0x30>)
 80008d8:	2201      	movs	r2, #1
 80008da:	4252      	negs	r2, r2
 80008dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80008de:	e005      	b.n	80008ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <prvResetNextTaskUnblockTime+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <prvResetNextTaskUnblockTime+0x30>)
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	20000088 	.word	0x20000088
 80008f8:	200000bc 	.word	0x200000bc

080008fc <SVC_Handler>:
    }
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8000906:	f3ef 8010 	mrs	r0, PRIMASK
 800090a:	b672      	cpsid	i
 800090c:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	0018      	movs	r0, r3

08000912 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8000912:	f380 8810 	msr	PRIMASK, r0
 8000916:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	0000      	movs	r0, r0
 800091c:	0000      	movs	r0, r0
	...

08000920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000920:	f3ef 8009 	mrs	r0, PSP
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <pxCurrentTCBConst>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	3820      	subs	r0, #32
 800092a:	6010      	str	r0, [r2, #0]
 800092c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800092e:	4644      	mov	r4, r8
 8000930:	464d      	mov	r5, r9
 8000932:	4656      	mov	r6, sl
 8000934:	465f      	mov	r7, fp
 8000936:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000938:	b508      	push	{r3, lr}
 800093a:	b672      	cpsid	i
 800093c:	f7ff fe78 	bl	8000630 <vTaskSwitchContext>
 8000940:	b662      	cpsie	i
 8000942:	bc0c      	pop	{r2, r3}
 8000944:	6811      	ldr	r1, [r2, #0]
 8000946:	6808      	ldr	r0, [r1, #0]
 8000948:	3010      	adds	r0, #16
 800094a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800094c:	46a0      	mov	r8, r4
 800094e:	46a9      	mov	r9, r5
 8000950:	46b2      	mov	sl, r6
 8000952:	46bb      	mov	fp, r7
 8000954:	f380 8809 	msr	PSP, r0
 8000958:	3820      	subs	r0, #32
 800095a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800095c:	4718      	bx	r3
 800095e:	46c0      	nop			@ (mov r8, r8)

08000960 <pxCurrentTCBConst>:
 8000960:	20000020 	.word	0x20000020
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46c0      	nop			@ (mov r8, r8)

08000968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800096e:	f7ff ffca 	bl	8000906 <ulSetInterruptMaskFromISR>
 8000972:	0003      	movs	r3, r0
 8000974:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000976:	f7ff fd3f 	bl	80003f8 <xTaskIncrementTick>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d003      	beq.n	8000986 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <SysTick_Handler+0x30>)
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	0552      	lsls	r2, r2, #21
 8000984:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ffc2 	bl	8000912 <vClearInterruptMaskFromISR>
}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	e000ed04 	.word	0xe000ed04

0800099c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <_DoInit+0x9c>)
 80009a4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	22a8      	movs	r2, #168	@ 0xa8
 80009aa:	2100      	movs	r1, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fee9 	bl	8001784 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	2203      	movs	r2, #3
 80009b6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2203      	movs	r2, #3
 80009bc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a3c <_DoInit+0xa0>)
 80009c2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a40 <_DoInit+0xa4>)
 80009c8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	00d2      	lsls	r2, r2, #3
 80009d0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <_DoInit+0xa0>)
 80009e8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <_DoInit+0xa8>)
 80009ee:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	2210      	movs	r2, #16
 80009f4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	e00c      	b.n	8000a28 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	220f      	movs	r2, #15
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <_DoInit+0xac>)
 8000a16:	5cd1      	ldrb	r1, [r2, r3]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	18d3      	adds	r3, r2, r3
 8000a1e:	1c0a      	adds	r2, r1, #0
 8000a20:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3301      	adds	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d9ef      	bls.n	8000a0e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000c4 	.word	0x200000c4
 8000a3c:	0800183c 	.word	0x0800183c
 8000a40:	2000016c 	.word	0x2000016c
 8000a44:	2000056c 	.word	0x2000056c
 8000a48:	080019d0 	.word	0x080019d0

08000a4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d905      	bls.n	8000a7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	3b01      	subs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a7a:	e007      	b.n	8000a8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	69b9      	ldr	r1, [r7, #24]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	1acb      	subs	r3, r1, r3
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d900      	bls.n	8000a9c <_WriteBlocking+0x50>
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d900      	bls.n	8000aa8 <_WriteBlocking+0x5c>
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fe8e 	bl	80017dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000ac0:	6a3a      	ldr	r2, [r7, #32]
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d101      	bne.n	8000aee <_WriteBlocking+0xa2>
      WrOff = 0u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1b3      	bne.n	8000a62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000afa:	6a3b      	ldr	r3, [r7, #32]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b00a      	add	sp, #40	@ 0x28
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d910      	bls.n	8000b4a <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fe4f 	bl	80017dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000b48:	e01e      	b.n	8000b88 <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fe3c 	bl	80017dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	18d1      	adds	r1, r2, r3
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 fe2d 	bl	80017dc <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	60da      	str	r2, [r3, #12]
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b008      	add	sp, #32
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d808      	bhi.n	8000bbe <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e004      	b.n	8000bc8 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000bc8:	697b      	ldr	r3, [r7, #20]
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b006      	add	sp, #24
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	0013      	movs	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4a23      	ldr	r2, [pc, #140]	@ (8000c80 <SEGGER_RTT_WriteNoLock+0xac>)
 8000bf2:	189b      	adds	r3, r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d02e      	beq.n	8000c5c <SEGGER_RTT_WriteNoLock+0x88>
 8000bfe:	d836      	bhi.n	8000c6e <SEGGER_RTT_WriteNoLock+0x9a>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <SEGGER_RTT_WriteNoLock+0x36>
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d016      	beq.n	8000c36 <SEGGER_RTT_WriteNoLock+0x62>
 8000c08:	e031      	b.n	8000c6e <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ffbf 	bl	8000b90 <_GetAvailWriteSpace>
 8000c12:	0003      	movs	r3, r0
 8000c14:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d202      	bcs.n	8000c24 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000c22:	e027      	b.n	8000c74 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	69b9      	ldr	r1, [r7, #24]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff68 	bl	8000b04 <_WriteNoCheck>
    break;
 8000c34:	e01e      	b.n	8000c74 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffa9 	bl	8000b90 <_GetAvailWriteSpace>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d900      	bls.n	8000c4c <SEGGER_RTT_WriteNoLock+0x78>
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	69b9      	ldr	r1, [r7, #24]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff55 	bl	8000b04 <_WriteNoCheck>
    break;
 8000c5a:	e00b      	b.n	8000c74 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	69b9      	ldr	r1, [r7, #24]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fef2 	bl	8000a4c <_WriteBlocking>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	61fb      	str	r3, [r7, #28]
    break;
 8000c6c:	e002      	b.n	8000c74 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    break;
 8000c72:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8000c74:	69fb      	ldr	r3, [r7, #28]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b008      	add	sp, #32
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	200000c4 	.word	0x200000c4

08000c84 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <SEGGER_RTT_Write+0x4c>)
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b53      	cmp	r3, #83	@ 0x53
 8000c9c:	d001      	beq.n	8000ca2 <SEGGER_RTT_Write+0x1e>
 8000c9e:	f7ff fe7d 	bl	800099c <_DoInit>
  SEGGER_RTT_LOCK();
 8000ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	f381 8810 	msr	PRIMASK, r1
 8000cac:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff8d 	bl	8000bd4 <SEGGER_RTT_WriteNoLock>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8000cc4:	697b      	ldr	r3, [r7, #20]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b008      	add	sp, #32
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	200000c4 	.word	0x200000c4

08000cd4 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8000ce6:	4b30      	ldr	r3, [pc, #192]	@ (8000da8 <xTraceEventCreate1+0xd4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	d004      	beq.n	8000cfa <xTraceEventCreate1+0x26>
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <xTraceEventCreate1+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <xTraceEventCreate1+0x2a>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e050      	b.n	8000da0 <xTraceEventCreate1+0xcc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8000d02:	617b      	str	r3, [r7, #20]
  return(result);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	f383 8810 	msr	PRIMASK, r3
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <xTraceEventCreate1+0xdc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <xTraceEventCreate1+0xe0>)
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <xTraceEventCreate1+0xe4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	0192      	lsls	r2, r2, #6
 8000d30:	188a      	adds	r2, r1, r2
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	0149      	lsls	r1, r1, #5
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	b292      	uxth	r2, r2
 8000d42:	801a      	strh	r2, [r3, #0]
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <xTraceEventCreate1+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	805a      	strh	r2, [r3, #2]
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <xTraceEventCreate1+0xe8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	0a19      	lsrs	r1, r3, #8
 8000d58:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <xTraceEventCreate1+0xec>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	061a      	lsls	r2, r3, #24
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	188a      	adds	r2, r1, r2
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <xTraceEventCreate1+0xec>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <xTraceEventCreate1+0xec>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6992      	ldr	r2, [r2, #24]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <xTraceEventCreate1+0xec>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6852      	ldr	r2, [r2, #4]
 8000d7a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	220c      	movs	r2, #12
 8000d86:	0019      	movs	r1, r3
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ff7b 	bl	8000c84 <SEGGER_RTT_Write>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f383 8810 	msr	PRIMASK, r3
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b008      	add	sp, #32
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000058c 	.word	0x2000058c
 8000dac:	20000588 	.word	0x20000588
 8000db0:	2000057c 	.word	0x2000057c
 8000db4:	20000584 	.word	0x20000584
 8000db8:	20000580 	.word	0x20000580
 8000dbc:	e000e018 	.word	0xe000e018
 8000dc0:	20000594 	.word	0x20000594

08000dc4 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <xTraceEventCreate2+0xdc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	d004      	beq.n	8000dec <xTraceEventCreate2+0x28>
 8000de2:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <xTraceEventCreate2+0xe0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <xTraceEventCreate2+0x2c>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e053      	b.n	8000e98 <xTraceEventCreate2+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000df0:	f3ef 8310 	mrs	r3, PRIMASK
 8000df4:	61fb      	str	r3, [r7, #28]
  return(result);
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	f383 8810 	msr	PRIMASK, r3
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <xTraceEventCreate2+0xe4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	3201      	adds	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <xTraceEventCreate2+0xe8>)
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <xTraceEventCreate2+0xec>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	2314      	movs	r3, #20
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	0192      	lsls	r2, r2, #6
 8000e22:	188a      	adds	r2, r1, r2
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2180      	movs	r1, #128	@ 0x80
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430a      	orrs	r2, r1
 8000e32:	b292      	uxth	r2, r2
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <xTraceEventCreate2+0xe4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	805a      	strh	r2, [r3, #2]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <xTraceEventCreate2+0xf0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	0a19      	lsrs	r1, r3, #8
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <xTraceEventCreate2+0xf4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	061a      	lsls	r2, r3, #24
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	188a      	adds	r2, r1, r2
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <xTraceEventCreate2+0xf4>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <xTraceEventCreate2+0xf4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6992      	ldr	r2, [r2, #24]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <xTraceEventCreate2+0xf4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6852      	ldr	r2, [r2, #4]
 8000e6c:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	0019      	movs	r1, r3
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff feff 	bl	8000c84 <SEGGER_RTT_Write>
 8000e86:	0003      	movs	r3, r0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	f383 8810 	msr	PRIMASK, r3
}
 8000e94:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b00a      	add	sp, #40	@ 0x28
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000058c 	.word	0x2000058c
 8000ea4:	20000588 	.word	0x20000588
 8000ea8:	2000057c 	.word	0x2000057c
 8000eac:	20000584 	.word	0x20000584
 8000eb0:	20000580 	.word	0x20000580
 8000eb4:	e000e018 	.word	0xe000e018
 8000eb8:	20000594 	.word	0x20000594

08000ebc <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <xTraceTaskSwitch+0x90>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <xTraceTaskSwitch+0x1c>
	{
		return xResult;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	e035      	b.n	8000f44 <xTraceTaskSwitch+0x88>
	}

	if (!xTraceIsRecorderEnabled())
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <xTraceTaskSwitch+0x90>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d004      	beq.n	8000eec <xTraceTaskSwitch+0x30>
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <xTraceTaskSwitch+0x94>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <xTraceTaskSwitch+0x3c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <xTraceTaskSwitch+0x98>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]

		return xResult;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	e025      	b.n	8000f44 <xTraceTaskSwitch+0x88>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <xTraceTaskSwitch+0x94>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2201      	movs	r2, #1
 8000efe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f00:	f3ef 8310 	mrs	r3, PRIMASK
 8000f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f06:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	f383 8810 	msr	PRIMASK, r3
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <xTraceTaskSwitch+0x98>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	0019      	movs	r1, r3
 8000f24:	2037      	movs	r0, #55	@ 0x37
 8000f26:	f7ff ff4d 	bl	8000dc4 <xTraceEventCreate2>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	61fb      	str	r3, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <xTraceTaskSwitch+0x94>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f383 8810 	msr	PRIMASK, r3
}
 8000f40:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8000f42:	69fb      	ldr	r3, [r7, #28]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b008      	add	sp, #32
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000058c 	.word	0x2000058c
 8000f50:	20000588 	.word	0x20000588
 8000f54:	20000590 	.word	0x20000590

08000f58 <main>:
float sum_prod(float x);


// Main function
int main()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	// uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8000f5c:	f000 f80c 	bl	8000f78 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8000f60:	f000 faea 	bl	8001538 <BSP_LED_Init>
//	vTaskStartScheduler();

	while(1)
	{
		// The program should never be here...
		BSP_LED_Toggle();
 8000f64:	f000 fb34 	bl	80015d0 <BSP_LED_Toggle>
		BSP_DELAY_ms(1000);		// 500 -> 1s	1000 -> 2s	...
 8000f68:	23fa      	movs	r3, #250	@ 0xfa
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fb3d 	bl	80015ec <BSP_DELAY_ms>
		BSP_LED_Toggle();
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	e7f6      	b.n	8000f64 <main+0xc>
	...

08000f78 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8000f82:	4b44      	ldr	r3, [pc, #272]	@ (8001094 <SystemClock_Config+0x11c>)
 8000f84:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8000f86:	4b44      	ldr	r3, [pc, #272]	@ (8001098 <SystemClock_Config+0x120>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <SystemClock_Config+0x120>)
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	02c9      	lsls	r1, r1, #11
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8000f94:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <SystemClock_Config+0x120>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b3f      	ldr	r3, [pc, #252]	@ (8001098 <SystemClock_Config+0x120>)
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <SystemClock_Config+0x120>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
		timeout--;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <SystemClock_Config+0x48>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8000fc0:	4b35      	ldr	r3, [pc, #212]	@ (8001098 <SystemClock_Config+0x120>)
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <SystemClock_Config+0x120>)
 8000fc6:	4935      	ldr	r1, [pc, #212]	@ (800109c <SystemClock_Config+0x124>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8000fcc:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <SystemClock_Config+0x120>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <SystemClock_Config+0x120>)
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	0249      	lsls	r1, r1, #9
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <SystemClock_Config+0x120>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <SystemClock_Config+0x120>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8001098 <SystemClock_Config+0x120>)
 8000fe6:	492e      	ldr	r1, [pc, #184]	@ (80010a0 <SystemClock_Config+0x128>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <SystemClock_Config+0x120>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <SystemClock_Config+0x120>)
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	0349      	lsls	r1, r1, #13
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <SystemClock_Config+0x120>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <SystemClock_Config+0x120>)
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	0449      	lsls	r1, r1, #17
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <SystemClock_Config+0x120>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	049b      	lsls	r3, r3, #18
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
		timeout--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3b01      	subs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <SystemClock_Config+0xae>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <SystemClock_Config+0x120>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <SystemClock_Config+0x120>)
 800102c:	21f0      	movs	r1, #240	@ 0xf0
 800102e:	438a      	bics	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001032:	4a19      	ldr	r2, [pc, #100]	@ (8001098 <SystemClock_Config+0x120>)
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <SystemClock_Config+0x120>)
 8001036:	6852      	ldr	r2, [r2, #4]
 8001038:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <SystemClock_Config+0x120>)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <SystemClock_Config+0x120>)
 8001040:	4918      	ldr	r1, [pc, #96]	@ (80010a4 <SystemClock_Config+0x12c>)
 8001042:	400a      	ands	r2, r1
 8001044:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <SystemClock_Config+0x120>)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <SystemClock_Config+0x120>)
 800104a:	6852      	ldr	r2, [r2, #4]
 800104c:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <SystemClock_Config+0x130>)
 8001050:	2211      	movs	r2, #17
 8001052:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <SystemClock_Config+0x120>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <SystemClock_Config+0x120>)
 800105a:	2103      	movs	r1, #3
 800105c:	438a      	bics	r2, r1
 800105e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <SystemClock_Config+0x120>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <SystemClock_Config+0x120>)
 8001066:	2102      	movs	r1, #2
 8001068:	430a      	orrs	r2, r1
 800106a:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <SystemClock_Config+0x120>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	220c      	movs	r2, #12
 8001072:	4013      	ands	r3, r2
 8001074:	603b      	str	r3, [r7, #0]
		timeout--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3b01      	subs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d002      	beq.n	8001088 <SystemClock_Config+0x110>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f1      	bne.n	800106c <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8001088:	f000 faf6 	bl	8001678 <SystemCoreClockUpdate>
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}
 8001094:	000f4240 	.word	0x000f4240
 8001098:	40021000 	.word	0x40021000
 800109c:	fffe7fff 	.word	0xfffe7fff
 80010a0:	ffc3ffff 	.word	0xffc3ffff
 80010a4:	fffff8ff 	.word	0xfffff8ff
 80010a8:	40022000 	.word	0x40022000

080010ac <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 80010b6:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <vAssertCalled+0x30>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f9f6 	bl	80014ac <my_printf>
	my_printf("File %s\r\n", file);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <vAssertCalled+0x34>)
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f9f0 	bl	80014ac <my_printf>
	my_printf("Line %d\r\n", line);
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <vAssertCalled+0x38>)
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 f9ea 	bl	80014ac <my_printf>

	while(1);
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	e7fd      	b.n	80010d8 <vAssertCalled+0x2c>
 80010dc:	0800198c 	.word	0x0800198c
 80010e0:	080019a0 	.word	0x080019a0
 80010e4:	080019ac 	.word	0x080019ac

080010e8 <vApplicationStackOverflowHook>:

/*
 * Stack Overflow Basic Hook
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	while(1);
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	e7fd      	b.n	80010f2 <vApplicationStackOverflowHook+0xa>
	...

080010f8 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	if (str) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00a      	beq.n	800111e <printchar+0x26>
		**str = c;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
		++(*str);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 800111c:	e00a      	b.n	8001134 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <printchar+0x44>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2240      	movs	r2, #64	@ 0x40
 8001126:	4013      	ands	r3, r2
 8001128:	2b40      	cmp	r3, #64	@ 0x40
 800112a:	d1f9      	bne.n	8001120 <printchar+0x28>
		USART2->TDR = c;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <printchar+0x44>)
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	b292      	uxth	r2, r2
 8001132:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004400 	.word	0x40004400

08001140 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	46c6      	mov	lr, r8
 8001144:	b500      	push	{lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8001152:	2400      	movs	r4, #0
 8001154:	2320      	movs	r3, #32
 8001156:	4698      	mov	r8, r3

	if (width > 0) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	dd16      	ble.n	800118c <prints+0x4c>
		register int len = 0;
 800115e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8001160:	68be      	ldr	r6, [r7, #8]
 8001162:	e001      	b.n	8001168 <prints+0x28>
 8001164:	3501      	adds	r5, #1
 8001166:	3601      	adds	r6, #1
 8001168:	7833      	ldrb	r3, [r6, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1fa      	bne.n	8001164 <prints+0x24>
		if (len >= width) width = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429d      	cmp	r5, r3
 8001172:	db02      	blt.n	800117a <prints+0x3a>
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e002      	b.n	8001180 <prints+0x40>
		else width -= len;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1b5b      	subs	r3, r3, r5
 800117e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d001      	beq.n	800118c <prints+0x4c>
 8001188:	2330      	movs	r3, #48	@ 0x30
 800118a:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2201      	movs	r2, #1
 8001190:	4013      	ands	r3, r2
 8001192:	d119      	bne.n	80011c8 <prints+0x88>
		for ( ; width > 0; --width) {
 8001194:	e008      	b.n	80011a8 <prints+0x68>
			printchar (out, padchar);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4641      	mov	r1, r8
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff ffac 	bl	80010f8 <printchar>
			++pc;
 80011a0:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dcf3      	bgt.n	8001196 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 80011ae:	e00b      	b.n	80011c8 <prints+0x88>
		printchar (out, *string);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff9c 	bl	80010f8 <printchar>
		++pc;
 80011c0:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ef      	bne.n	80011b0 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 80011d0:	e008      	b.n	80011e4 <prints+0xa4>
		printchar (out, padchar);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4641      	mov	r1, r8
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff8e 	bl	80010f8 <printchar>
		++pc;
 80011dc:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dcf3      	bgt.n	80011d2 <prints+0x92>
	}

	return pc;
 80011ea:	0023      	movs	r3, r4
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bc80      	pop	{r7}
 80011f4:	46b8      	mov	r8, r7
 80011f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011f8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fa:	46ce      	mov	lr, r9
 80011fc:	4647      	mov	r7, r8
 80011fe:	b580      	push	{r7, lr}
 8001200:	b089      	sub	sp, #36	@ 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	4699      	mov	r9, r3
 8001210:	2600      	movs	r6, #0
	register unsigned int u = i;
 8001212:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10e      	bne.n	8001238 <printi+0x40>
		print_buf[0] = '0';
 800121a:	2114      	movs	r1, #20
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2230      	movs	r2, #48	@ 0x30
 8001220:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8001228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800122c:	1879      	adds	r1, r7, r1
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff86 	bl	8001140 <prints>
 8001234:	0003      	movs	r3, r0
 8001236:	e04e      	b.n	80012d6 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <printi+0x5c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d107      	bne.n	8001254 <printi+0x5c>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da04      	bge.n	8001254 <printi+0x5c>
		neg = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	4699      	mov	r9, r3
		u = -i;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	425b      	negs	r3, r3
 8001252:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8001254:	2314      	movs	r3, #20
 8001256:	18fc      	adds	r4, r7, r3
 8001258:	340b      	adds	r4, #11
	*s = '\0';
 800125a:	2300      	movs	r3, #0
 800125c:	7023      	strb	r3, [r4, #0]

	while (u) {
 800125e:	e019      	b.n	8001294 <printi+0x9c>
		t = u % b;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	0019      	movs	r1, r3
 8001264:	0028      	movs	r0, r5
 8001266:	f7fe ffd5 	bl	8000214 <__aeabi_uidivmod>
 800126a:	000b      	movs	r3, r1
 800126c:	4698      	mov	r8, r3
		if( t >= 10 )
 800126e:	4643      	mov	r3, r8
 8001270:	2b09      	cmp	r3, #9
 8001272:	dd02      	ble.n	800127a <printi+0x82>
			t += letbase - '0' - 10;
 8001274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001276:	3b3a      	subs	r3, #58	@ 0x3a
 8001278:	4498      	add	r8, r3
		*--s = t + '0';
 800127a:	4643      	mov	r3, r8
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3c01      	subs	r4, #1
 8001280:	3330      	adds	r3, #48	@ 0x30
 8001282:	b2db      	uxtb	r3, r3
 8001284:	7023      	strb	r3, [r4, #0]
		u /= b;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0019      	movs	r1, r3
 800128a:	0028      	movs	r0, r5
 800128c:	f7fe ff3c 	bl	8000108 <__udivsi3>
 8001290:	0003      	movs	r3, r0
 8001292:	001d      	movs	r5, r3
	while (u) {
 8001294:	2d00      	cmp	r5, #0
 8001296:	d1e3      	bne.n	8001260 <printi+0x68>
	}

	if (neg) {
 8001298:	464b      	mov	r3, r9
 800129a:	2b00      	cmp	r3, #0
 800129c:	d013      	beq.n	80012c6 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800129e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00d      	beq.n	80012c0 <printi+0xc8>
 80012a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d009      	beq.n	80012c0 <printi+0xc8>
			printchar (out, '-');
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	212d      	movs	r1, #45	@ 0x2d
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff21 	bl	80010f8 <printchar>
			++pc;
 80012b6:	3601      	adds	r6, #1
			--width;
 80012b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ba:	3b01      	subs	r3, #1
 80012bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80012be:	e002      	b.n	80012c6 <printi+0xce>
		}
		else {
			*--s = '-';
 80012c0:	3c01      	subs	r4, #1
 80012c2:	232d      	movs	r3, #45	@ 0x2d
 80012c4:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	0021      	movs	r1, r4
 80012ce:	f7ff ff37 	bl	8001140 <prints>
 80012d2:	0003      	movs	r3, r0
 80012d4:	18f3      	adds	r3, r6, r3
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b009      	add	sp, #36	@ 0x24
 80012dc:	bcc0      	pop	{r6, r7}
 80012de:	46b9      	mov	r9, r7
 80012e0:	46b0      	mov	r8, r6
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e4 <print>:

static int print(char **out, const char *format, va_list args )
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b08b      	sub	sp, #44	@ 0x2c
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80012f0:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80012f2:	e0c6      	b.n	8001482 <print+0x19e>
		if (*format == '%') {
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b25      	cmp	r3, #37	@ 0x25
 80012fa:	d000      	beq.n	80012fe <print+0x1a>
 80012fc:	e0b2      	b.n	8001464 <print+0x180>
			++format;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3301      	adds	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8001304:	2600      	movs	r6, #0
 8001306:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d100      	bne.n	8001312 <print+0x2e>
 8001310:	e0bd      	b.n	800148e <print+0x1aa>
			if (*format == '%') goto out;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b25      	cmp	r3, #37	@ 0x25
 8001318:	d100      	bne.n	800131c <print+0x38>
 800131a:	e0a5      	b.n	8001468 <print+0x184>
			if (*format == '-') {
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b2d      	cmp	r3, #45	@ 0x2d
 8001322:	d10a      	bne.n	800133a <print+0x56>
				++format;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3301      	adds	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800132a:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 800132c:	e005      	b.n	800133a <print+0x56>
				++format;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3301      	adds	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8001334:	2302      	movs	r3, #2
 8001336:	4333      	orrs	r3, r6
 8001338:	001e      	movs	r6, r3
			while (*format == '0') {
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b30      	cmp	r3, #48	@ 0x30
 8001340:	d0f5      	beq.n	800132e <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001342:	e00b      	b.n	800135c <print+0x78>
				width *= 10;
 8001344:	002b      	movs	r3, r5
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	195b      	adds	r3, r3, r5
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	001d      	movs	r5, r3
				width += *format - '0';
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3b30      	subs	r3, #48	@ 0x30
 8001354:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b2f      	cmp	r3, #47	@ 0x2f
 8001362:	d903      	bls.n	800136c <print+0x88>
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b39      	cmp	r3, #57	@ 0x39
 800136a:	d9eb      	bls.n	8001344 <print+0x60>
			}
			if( *format == 's' ) {
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b73      	cmp	r3, #115	@ 0x73
 8001372:	d10f      	bne.n	8001394 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1d1a      	adds	r2, r3, #4
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800137e:	d000      	beq.n	8001382 <print+0x9e>
 8001380:	e000      	b.n	8001384 <print+0xa0>
 8001382:	4949      	ldr	r1, [pc, #292]	@ (80014a8 <print+0x1c4>)
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	0033      	movs	r3, r6
 8001388:	002a      	movs	r2, r5
 800138a:	f7ff fed9 	bl	8001140 <prints>
 800138e:	0003      	movs	r3, r0
 8001390:	18e4      	adds	r4, r4, r3
				continue;
 8001392:	e073      	b.n	800147c <print+0x198>
			}
			if( *format == 'd' ) {
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b64      	cmp	r3, #100	@ 0x64
 800139a:	d10f      	bne.n	80013bc <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1d1a      	adds	r2, r3, #4
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	2361      	movs	r3, #97	@ 0x61
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	9601      	str	r6, [sp, #4]
 80013ac:	9500      	str	r5, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	220a      	movs	r2, #10
 80013b2:	f7ff ff21 	bl	80011f8 <printi>
 80013b6:	0003      	movs	r3, r0
 80013b8:	18e4      	adds	r4, r4, r3
				continue;
 80013ba:	e05f      	b.n	800147c <print+0x198>
			}
			if( *format == 'x' ) {
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b78      	cmp	r3, #120	@ 0x78
 80013c2:	d10f      	bne.n	80013e4 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1d1a      	adds	r2, r3, #4
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	2361      	movs	r3, #97	@ 0x61
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	9601      	str	r6, [sp, #4]
 80013d4:	9500      	str	r5, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	2210      	movs	r2, #16
 80013da:	f7ff ff0d 	bl	80011f8 <printi>
 80013de:	0003      	movs	r3, r0
 80013e0:	18e4      	adds	r4, r4, r3
				continue;
 80013e2:	e04b      	b.n	800147c <print+0x198>
			}
			if( *format == 'X' ) {
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b58      	cmp	r3, #88	@ 0x58
 80013ea:	d10f      	bne.n	800140c <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1d1a      	adds	r2, r3, #4
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	2341      	movs	r3, #65	@ 0x41
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	9601      	str	r6, [sp, #4]
 80013fc:	9500      	str	r5, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2210      	movs	r2, #16
 8001402:	f7ff fef9 	bl	80011f8 <printi>
 8001406:	0003      	movs	r3, r0
 8001408:	18e4      	adds	r4, r4, r3
				continue;
 800140a:	e037      	b.n	800147c <print+0x198>
			}
			if( *format == 'u' ) {
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b75      	cmp	r3, #117	@ 0x75
 8001412:	d10f      	bne.n	8001434 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1d1a      	adds	r2, r3, #4
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	2361      	movs	r3, #97	@ 0x61
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	9601      	str	r6, [sp, #4]
 8001424:	9500      	str	r5, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	220a      	movs	r2, #10
 800142a:	f7ff fee5 	bl	80011f8 <printi>
 800142e:	0003      	movs	r3, r0
 8001430:	18e4      	adds	r4, r4, r3
				continue;
 8001432:	e023      	b.n	800147c <print+0x198>
			}
			if( *format == 'c' ) {
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b63      	cmp	r3, #99	@ 0x63
 800143a:	d11f      	bne.n	800147c <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	1d1a      	adds	r2, r3, #4
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	2114      	movs	r1, #20
 8001448:	187b      	adds	r3, r7, r1
 800144a:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8001452:	1879      	adds	r1, r7, r1
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	0033      	movs	r3, r6
 8001458:	002a      	movs	r2, r5
 800145a:	f7ff fe71 	bl	8001140 <prints>
 800145e:	0003      	movs	r3, r0
 8001460:	18e4      	adds	r4, r4, r3
				continue;
 8001462:	e00b      	b.n	800147c <print+0x198>
			}
		}
		else {
		out:
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	e000      	b.n	800146a <print+0x186>
			if (*format == '%') goto out;
 8001468:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	001a      	movs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe3f 	bl	80010f8 <printchar>
			++pc;
 800147a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d000      	beq.n	800148c <print+0x1a8>
 800148a:	e733      	b.n	80012f4 <print+0x10>
 800148c:	e000      	b.n	8001490 <print+0x1ac>
			if (*format == '\0') break;
 800148e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <print+0x1ba>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800149e:	0023      	movs	r3, r4
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b007      	add	sp, #28
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	080019c8 	.word	0x080019c8

080014ac <my_printf>:

int my_printf(const char *format, ...)
{
 80014ac:	b40f      	push	{r0, r1, r2, r3}
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 80014b4:	2314      	movs	r3, #20
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	0019      	movs	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff0f 	bl	80012e4 <print>
 80014c6:	0003      	movs	r3, r0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bc80      	pop	{r7}
 80014d0:	bc08      	pop	{r3}
 80014d2:	b004      	add	sp, #16
 80014d4:	4718      	bx	r3

080014d6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <EXTI4_15_IRQHandler+0x44>)
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	4013      	ands	r3, r2
 80014fc:	d011      	beq.n	8001522 <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <EXTI4_15_IRQHandler+0x44>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	0192      	lsls	r2, r2, #6
 8001504:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <EXTI4_15_IRQHandler+0x48>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1d3a      	adds	r2, r7, #4
 800150c:	0011      	movs	r1, r2
 800150e:	0018      	movs	r0, r3
 8001510:	f7fe fe86 	bl	8000220 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <EXTI4_15_IRQHandler+0x3a>
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <EXTI4_15_IRQHandler+0x4c>)
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	0552      	lsls	r2, r2, #21
 8001520:	601a      	str	r2, [r3, #0]
	}
}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b002      	add	sp, #8
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	40010400 	.word	0x40010400
 8001530:	20000598 	.word	0x20000598
 8001534:	e000ed04 	.word	0xe000ed04

08001538 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <BSP_LED_Init+0x90>)
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <BSP_LED_Init+0x90>)
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	0289      	lsls	r1, r1, #10
 8001546:	430a      	orrs	r2, r1
 8001548:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800154a:	2390      	movs	r3, #144	@ 0x90
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2390      	movs	r3, #144	@ 0x90
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	491d      	ldr	r1, [pc, #116]	@ (80015cc <BSP_LED_Init+0x94>)
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 800155a:	2390      	movs	r3, #144	@ 0x90
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2390      	movs	r3, #144	@ 0x90
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 800156c:	2390      	movs	r3, #144	@ 0x90
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2390      	movs	r3, #144	@ 0x90
 8001574:	05db      	lsls	r3, r3, #23
 8001576:	2120      	movs	r1, #32
 8001578:	438a      	bics	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 800157c:	2390      	movs	r3, #144	@ 0x90
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	2390      	movs	r3, #144	@ 0x90
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	4911      	ldr	r1, [pc, #68]	@ (80015cc <BSP_LED_Init+0x94>)
 8001588:	400a      	ands	r2, r1
 800158a:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 800158c:	2390      	movs	r3, #144	@ 0x90
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	2390      	movs	r3, #144	@ 0x90
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	21c0      	movs	r1, #192	@ 0xc0
 8001598:	0109      	lsls	r1, r1, #4
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800159e:	2390      	movs	r3, #144	@ 0x90
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	2390      	movs	r3, #144	@ 0x90
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	4908      	ldr	r1, [pc, #32]	@ (80015cc <BSP_LED_Init+0x94>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 80015ae:	2390      	movs	r3, #144	@ 0x90
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	2390      	movs	r3, #144	@ 0x90
 80015b6:	05db      	lsls	r3, r3, #23
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	0389      	lsls	r1, r1, #14
 80015bc:	430a      	orrs	r2, r1
 80015be:	619a      	str	r2, [r3, #24]
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	40021000 	.word	0x40021000
 80015cc:	fffff3ff 	.word	0xfffff3ff

080015d0 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 80015d4:	2390      	movs	r3, #144	@ 0x90
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	2390      	movs	r3, #144	@ 0x90
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	2120      	movs	r1, #32
 80015e0:	404a      	eors	r2, r1
 80015e2:	615a      	str	r2, [r3, #20]
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <BSP_DELAY_ms>:
/*
 *  Basic delay functions
 */

void BSP_DELAY_ms(uint32_t delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*2500); i++);		// Tuned for ms at 48MHz
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e002      	b.n	8001600 <BSP_DELAY_ms+0x14>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <BSP_DELAY_ms+0x2c>)
 8001604:	4353      	muls	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3f6      	bcc.n	80015fa <BSP_DELAY_ms+0xe>
}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	000009c4 	.word	0x000009c4

0800161c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800161e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001620:	f000 f825 	bl	800166e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <LoopForever+0x6>)
  ldr r1, =_edata
 8001626:	490d      	ldr	r1, [pc, #52]	@ (800165c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <LoopForever+0xe>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800163c:	4c0a      	ldr	r4, [pc, #40]	@ (8001668 <LoopForever+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800164a:	f000 f8a3 	bl	8001794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164e:	f7ff fc83 	bl	8000f58 <main>

08001652 <LoopForever>:

LoopForever:
    b LoopForever
 8001652:	e7fe      	b.n	8001652 <LoopForever>
  ldr   r0, =_estack
 8001654:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001660:	080019fc 	.word	0x080019fc
  ldr r2, =_sbss
 8001664:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001668:	2000059c 	.word	0x2000059c

0800166c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_COMP_IRQHandler>

0800166e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <SystemCoreClockUpdate+0xf8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	220c      	movs	r2, #12
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d011      	beq.n	80016c2 <SystemCoreClockUpdate+0x4a>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d84f      	bhi.n	8001744 <SystemCoreClockUpdate+0xcc>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <SystemCoreClockUpdate+0x3a>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d004      	beq.n	80016ba <SystemCoreClockUpdate+0x42>
 80016b0:	e048      	b.n	8001744 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 80016b4:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <SystemCoreClockUpdate+0x100>)
 80016b6:	601a      	str	r2, [r3, #0]
      break;
 80016b8:	e048      	b.n	800174c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 80016bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001778 <SystemCoreClockUpdate+0x100>)
 80016be:	601a      	str	r2, [r3, #0]
      break;
 80016c0:	e044      	b.n	800174c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <SystemCoreClockUpdate+0xf8>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	23f0      	movs	r3, #240	@ 0xf0
 80016c8:	039b      	lsls	r3, r3, #14
 80016ca:	4013      	ands	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <SystemCoreClockUpdate+0xf8>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	23c0      	movs	r3, #192	@ 0xc0
 80016d4:	025b      	lsls	r3, r3, #9
 80016d6:	4013      	ands	r3, r2
 80016d8:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	3302      	adds	r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <SystemCoreClockUpdate+0xf8>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e6:	220f      	movs	r2, #15
 80016e8:	4013      	ands	r3, r2
 80016ea:	3301      	adds	r3, #1
 80016ec:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10a      	bne.n	800170e <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	481f      	ldr	r0, [pc, #124]	@ (8001778 <SystemCoreClockUpdate+0x100>)
 80016fc:	f7fe fd04 	bl	8000108 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	001a      	movs	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	435a      	muls	r2, r3
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 800170a:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 800170c:	e01e      	b.n	800174c <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	23c0      	movs	r3, #192	@ 0xc0
 8001712:	025b      	lsls	r3, r3, #9
 8001714:	429a      	cmp	r2, r3
 8001716:	d10a      	bne.n	800172e <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	4818      	ldr	r0, [pc, #96]	@ (800177c <SystemCoreClockUpdate+0x104>)
 800171c:	f7fe fcf4 	bl	8000108 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	001a      	movs	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	435a      	muls	r2, r3
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 800172a:	601a      	str	r2, [r3, #0]
      break;
 800172c:	e00e      	b.n	800174c <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	4811      	ldr	r0, [pc, #68]	@ (8001778 <SystemCoreClockUpdate+0x100>)
 8001732:	f7fe fce9 	bl	8000108 <__udivsi3>
 8001736:	0003      	movs	r3, r0
 8001738:	001a      	movs	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	435a      	muls	r2, r3
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 8001740:	601a      	str	r2, [r3, #0]
      break;
 8001742:	e003      	b.n	800174c <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 8001746:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <SystemCoreClockUpdate+0x100>)
 8001748:	601a      	str	r2, [r3, #0]
      break;
 800174a:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <SystemCoreClockUpdate+0xf8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	220f      	movs	r2, #15
 8001754:	4013      	ands	r3, r2
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SystemCoreClockUpdate+0x108>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	40da      	lsrs	r2, r3
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <SystemCoreClockUpdate+0xfc>)
 8001766:	601a      	str	r2, [r3, #0]
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	20000000 	.word	0x20000000
 8001778:	007a1200 	.word	0x007a1200
 800177c:	02dc6c00 	.word	0x02dc6c00
 8001780:	080019e4 	.word	0x080019e4

08001784 <memset>:
 8001784:	0003      	movs	r3, r0
 8001786:	1882      	adds	r2, r0, r2
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	7019      	strb	r1, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <__libc_init_array>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	2600      	movs	r6, #0
 8001798:	4c0c      	ldr	r4, [pc, #48]	@ (80017cc <__libc_init_array+0x38>)
 800179a:	4d0d      	ldr	r5, [pc, #52]	@ (80017d0 <__libc_init_array+0x3c>)
 800179c:	1b64      	subs	r4, r4, r5
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	42a6      	cmp	r6, r4
 80017a2:	d109      	bne.n	80017b8 <__libc_init_array+0x24>
 80017a4:	2600      	movs	r6, #0
 80017a6:	f000 f823 	bl	80017f0 <_init>
 80017aa:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <__libc_init_array+0x40>)
 80017ac:	4d0a      	ldr	r5, [pc, #40]	@ (80017d8 <__libc_init_array+0x44>)
 80017ae:	1b64      	subs	r4, r4, r5
 80017b0:	10a4      	asrs	r4, r4, #2
 80017b2:	42a6      	cmp	r6, r4
 80017b4:	d105      	bne.n	80017c2 <__libc_init_array+0x2e>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	00b3      	lsls	r3, r6, #2
 80017ba:	58eb      	ldr	r3, [r5, r3]
 80017bc:	4798      	blx	r3
 80017be:	3601      	adds	r6, #1
 80017c0:	e7ee      	b.n	80017a0 <__libc_init_array+0xc>
 80017c2:	00b3      	lsls	r3, r6, #2
 80017c4:	58eb      	ldr	r3, [r5, r3]
 80017c6:	4798      	blx	r3
 80017c8:	3601      	adds	r6, #1
 80017ca:	e7f2      	b.n	80017b2 <__libc_init_array+0x1e>
 80017cc:	080019f4 	.word	0x080019f4
 80017d0:	080019f4 	.word	0x080019f4
 80017d4:	080019f8 	.word	0x080019f8
 80017d8:	080019f4 	.word	0x080019f4

080017dc <memcpy>:
 80017dc:	2300      	movs	r3, #0
 80017de:	b510      	push	{r4, lr}
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d100      	bne.n	80017e6 <memcpy+0xa>
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	5ccc      	ldrb	r4, [r1, r3]
 80017e8:	54c4      	strb	r4, [r0, r3]
 80017ea:	3301      	adds	r3, #1
 80017ec:	e7f8      	b.n	80017e0 <memcpy+0x4>
	...

080017f0 <_init>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr

080017fc <_fini>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001802:	bc08      	pop	{r3}
 8001804:	469e      	mov	lr, r3
 8001806:	4770      	bx	lr
