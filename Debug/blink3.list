
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080068fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000306c  2000000c  08006908  0000800c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003078  08006908  00008078  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e6a0  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003637  00000000  00000000  000166d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d20  00000000  00000000  00019d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000009ab  00000000  00000000  0001aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000072d9  00000000  00000000  0001b3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b2fd  00000000  00000000  000226b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000794f2  00000000  00000000  0003d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000b6ea3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a14  00000000  00000000  000b6ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  000b98fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006488 	.word	0x08006488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006488 	.word	0x08006488

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800033a:	2301      	movs	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d106      	bne.n	8000356 <xQueueGenericReset+0x26>
 8000348:	2397      	movs	r3, #151	@ 0x97
 800034a:	005a      	lsls	r2, r3, #1
 800034c:	4b42      	ldr	r3, [pc, #264]	@ (8000458 <xQueueGenericReset+0x128>)
 800034e:	0011      	movs	r1, r2
 8000350:	0018      	movs	r0, r3
 8000352:	f005 fc47 	bl	8005be4 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <xQueueGenericReset+0x2e>
 800035c:	e06a      	b.n	8000434 <xQueueGenericReset+0x104>
        ( pxQueue->uxLength >= 1U ) &&
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000362:	2b00      	cmp	r3, #0
 8000364:	d066      	beq.n	8000434 <xQueueGenericReset+0x104>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800036e:	2400      	movs	r4, #0
 8000370:	0c15      	lsrs	r5, r2, #16
 8000372:	0c19      	lsrs	r1, r3, #16
 8000374:	b2a8      	uxth	r0, r5
 8000376:	2800      	cmp	r0, #0
 8000378:	d104      	bne.n	8000384 <xQueueGenericReset+0x54>
 800037a:	b288      	uxth	r0, r1
 800037c:	2800      	cmp	r0, #0
 800037e:	d013      	beq.n	80003a8 <xQueueGenericReset+0x78>
 8000380:	1c10      	adds	r0, r2, #0
 8000382:	e004      	b.n	800038e <xQueueGenericReset+0x5e>
 8000384:	b289      	uxth	r1, r1
 8000386:	2900      	cmp	r1, #0
 8000388:	d10d      	bne.n	80003a6 <xQueueGenericReset+0x76>
 800038a:	1c29      	adds	r1, r5, #0
 800038c:	1c18      	adds	r0, r3, #0
 800038e:	b292      	uxth	r2, r2
 8000390:	b29b      	uxth	r3, r3
 8000392:	435a      	muls	r2, r3
 8000394:	b283      	uxth	r3, r0
 8000396:	b289      	uxth	r1, r1
 8000398:	434b      	muls	r3, r1
 800039a:	0c12      	lsrs	r2, r2, #16
 800039c:	189b      	adds	r3, r3, r2
 800039e:	141b      	asrs	r3, r3, #16
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d000      	beq.n	80003a8 <xQueueGenericReset+0x78>
 80003a6:	2401      	movs	r4, #1
 80003a8:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003aa:	d143      	bne.n	8000434 <xQueueGenericReset+0x104>
    {
        taskENTER_CRITICAL();
 80003ac:	f002 fa60 	bl	8002870 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	434b      	muls	r3, r1
 80003be:	18d2      	adds	r2, r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	2200      	movs	r2, #0
 80003c8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003da:	1e59      	subs	r1, r3, #1
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	434b      	muls	r3, r1
 80003e2:	18d2      	adds	r2, r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2244      	movs	r2, #68	@ 0x44
 80003ec:	21ff      	movs	r1, #255	@ 0xff
 80003ee:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2245      	movs	r2, #69	@ 0x45
 80003f4:	21ff      	movs	r1, #255	@ 0xff
 80003f6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d10d      	bne.n	800041a <xQueueGenericReset+0xea>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d013      	beq.n	800042e <xQueueGenericReset+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	3310      	adds	r3, #16
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fb4e 	bl	8001aac <xTaskRemoveFromEventList>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d00c      	beq.n	800042e <xQueueGenericReset+0xfe>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000414:	f002 fa1c 	bl	8002850 <vPortYield>
 8000418:	e009      	b.n	800042e <xQueueGenericReset+0xfe>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3310      	adds	r3, #16
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	3324      	adds	r3, #36	@ 0x24
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef9 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800042e:	f002 fa31 	bl	8002894 <vPortExitCritical>
 8000432:	e001      	b.n	8000438 <xQueueGenericReset+0x108>
    }
    else
    {
        xReturn = pdFAIL;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d107      	bne.n	800044e <xQueueGenericReset+0x11e>
 800043e:	2364      	movs	r3, #100	@ 0x64
 8000440:	33ff      	adds	r3, #255	@ 0xff
 8000442:	001a      	movs	r2, r3
 8000444:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <xQueueGenericReset+0x128>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f005 fbcb 	bl	8005be4 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}
 8000458:	080064a0 	.word	0x080064a0

0800045c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af02      	add	r7, sp, #8
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d100      	bne.n	8000476 <xQueueGenericCreate+0x1a>
 8000474:	e06d      	b.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000476:	2000      	movs	r0, #0
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0c19      	lsrs	r1, r3, #16
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c1e      	adds	r6, r3, #0
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	0c1b      	lsrs	r3, r3, #16
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	1c15      	adds	r5, r2, #0
 8000488:	b28a      	uxth	r2, r1
 800048a:	2a00      	cmp	r2, #0
 800048c:	d105      	bne.n	800049a <xQueueGenericCreate+0x3e>
 800048e:	b29a      	uxth	r2, r3
 8000490:	2a00      	cmp	r2, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericCreate+0x60>
 8000494:	1c19      	adds	r1, r3, #0
 8000496:	1c34      	adds	r4, r6, #0
 8000498:	e003      	b.n	80004a2 <xQueueGenericCreate+0x46>
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10c      	bne.n	80004ba <xQueueGenericCreate+0x5e>
 80004a0:	1c2c      	adds	r4, r5, #0
 80004a2:	b2b3      	uxth	r3, r6
 80004a4:	b2aa      	uxth	r2, r5
 80004a6:	435a      	muls	r2, r3
 80004a8:	b2a3      	uxth	r3, r4
 80004aa:	b289      	uxth	r1, r1
 80004ac:	434b      	muls	r3, r1
 80004ae:	0c12      	lsrs	r2, r2, #16
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	141b      	asrs	r3, r3, #16
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d000      	beq.n	80004bc <xQueueGenericCreate+0x60>
 80004ba:	2001      	movs	r0, #1
 80004bc:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004be:	d148      	bne.n	8000552 <xQueueGenericCreate+0xf6>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004c6:	3351      	adds	r3, #81	@ 0x51
 80004c8:	d843      	bhi.n	8000552 <xQueueGenericCreate+0xf6>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4353      	muls	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004d2:	69bb      	ldr	r3, [r7, #24]
 80004d4:	3350      	adds	r3, #80	@ 0x50
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fa6a 	bl	80029b0 <pvPortMalloc>
 80004dc:	0003      	movs	r3, r0
 80004de:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00f      	beq.n	8000506 <xQueueGenericCreate+0xaa>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3350      	adds	r3, #80	@ 0x50
 80004ee:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	781c      	ldrb	r4, [r3, #0]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	68b9      	ldr	r1, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	0023      	movs	r3, r4
 8000500:	f000 f83a 	bl	8000578 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000504:	e030      	b.n	8000568 <xQueueGenericCreate+0x10c>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d01b      	beq.n	8000546 <xQueueGenericCreate+0xea>
 800050e:	dc2b      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000510:	2b03      	cmp	r3, #3
 8000512:	d00c      	beq.n	800052e <xQueueGenericCreate+0xd2>
 8000514:	dc28      	bgt.n	8000568 <xQueueGenericCreate+0x10c>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <xQueueGenericCreate+0xc4>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d00d      	beq.n	800053a <xQueueGenericCreate+0xde>
            if( pxNewQueue != NULL )
 800051e:	e023      	b.n	8000568 <xQueueGenericCreate+0x10c>
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	2041      	movs	r0, #65	@ 0x41
 8000528:	f003 fa36 	bl	8003998 <xTraceEventCreate2>
 800052c:	e010      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2042      	movs	r0, #66	@ 0x42
 8000534:	f003 fa30 	bl	8003998 <xTraceEventCreate2>
 8000538:	e00a      	b.n	8000550 <xQueueGenericCreate+0xf4>
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2043      	movs	r0, #67	@ 0x43
 8000540:	f003 fa2a 	bl	8003998 <xTraceEventCreate2>
 8000544:	e004      	b.n	8000550 <xQueueGenericCreate+0xf4>
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2047      	movs	r0, #71	@ 0x47
 800054c:	f003 fa24 	bl	8003998 <xTraceEventCreate2>
            if( pxNewQueue != NULL )
 8000550:	e00a      	b.n	8000568 <xQueueGenericCreate+0x10c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d108      	bne.n	800056a <xQueueGenericCreate+0x10e>
 8000558:	23f2      	movs	r3, #242	@ 0xf2
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <xQueueGenericCreate+0x118>)
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f005 fb3f 	bl	8005be4 <vAssertCalled>
 8000566:	e000      	b.n	800056a <xQueueGenericCreate+0x10e>
            if( pxNewQueue != NULL )
 8000568:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800056a:	69fb      	ldr	r3, [r7, #28]
    }
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	080064a0 	.word	0x080064a0

08000578 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	001a      	movs	r2, r3
 8000586:	1cfb      	adds	r3, r7, #3
 8000588:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d103      	bne.n	8000598 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e002      	b.n	800059e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff febe 	bl	8000330 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	214c      	movs	r1, #76	@ 0x4c
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	224c      	movs	r2, #76	@ 0x4c
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d01d      	beq.n	8000604 <prvInitialiseNewQueue+0x8c>
 80005c8:	dc22      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d00c      	beq.n	80005e8 <prvInitialiseNewQueue+0x70>
 80005ce:	dc1f      	bgt.n	8000610 <prvInitialiseNewQueue+0x98>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <prvInitialiseNewQueue+0x62>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00e      	beq.n	80005f6 <prvInitialiseNewQueue+0x7e>
}
 80005d8:	e01a      	b.n	8000610 <prvInitialiseNewQueue+0x98>
    traceQUEUE_CREATE( pxNewQueue );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005de:	69b9      	ldr	r1, [r7, #24]
 80005e0:	2011      	movs	r0, #17
 80005e2:	f004 f9ed 	bl	80049c0 <xTraceObjectRegisterWithoutHandle>
 80005e6:	e013      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005ea:	69b9      	ldr	r1, [r7, #24]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2012      	movs	r0, #18
 80005f0:	f004 f9e6 	bl	80049c0 <xTraceObjectRegisterWithoutHandle>
 80005f4:	e00c      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2013      	movs	r0, #19
 80005fe:	f004 f9df 	bl	80049c0 <xTraceObjectRegisterWithoutHandle>
 8000602:	e005      	b.n	8000610 <prvInitialiseNewQueue+0x98>
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <prvInitialiseNewQueue+0xa0>)
 8000606:	69b9      	ldr	r1, [r7, #24]
 8000608:	2300      	movs	r3, #0
 800060a:	2017      	movs	r0, #23
 800060c:	f004 f9d8 	bl	80049c0 <xTraceObjectRegisterWithoutHandle>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080064b4 	.word	0x080064b4

0800061c <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	6839      	ldr	r1, [r7, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f000 f805 	bl	800063c <MyWrapper_xQueueGiveFromISR>
 8000632:	0003      	movs	r3, r0
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}

0800063c <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <MyWrapper_xQueueGiveFromISR+0x22>
 8000652:	4a5e      	ldr	r2, [pc, #376]	@ (80007cc <MyWrapper_xQueueGiveFromISR+0x190>)
 8000654:	4b5e      	ldr	r3, [pc, #376]	@ (80007d0 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f005 fac3 	bl	8005be4 <vAssertCalled>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	2b00      	cmp	r3, #0
 8000664:	d005      	beq.n	8000672 <MyWrapper_xQueueGiveFromISR+0x36>
 8000666:	4a5b      	ldr	r2, [pc, #364]	@ (80007d4 <MyWrapper_xQueueGiveFromISR+0x198>)
 8000668:	4b59      	ldr	r3, [pc, #356]	@ (80007d0 <MyWrapper_xQueueGiveFromISR+0x194>)
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f005 fab9 	bl	8005be4 <vAssertCalled>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000672:	6a3b      	ldr	r3, [r7, #32]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <MyWrapper_xQueueGiveFromISR+0x46>
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <MyWrapper_xQueueGiveFromISR+0x4a>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <MyWrapper_xQueueGiveFromISR+0x4c>
 8000686:	2300      	movs	r3, #0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <MyWrapper_xQueueGiveFromISR+0x5c>
 800068c:	4a52      	ldr	r2, [pc, #328]	@ (80007d8 <MyWrapper_xQueueGiveFromISR+0x19c>)
 800068e:	4b50      	ldr	r3, [pc, #320]	@ (80007d0 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f005 faa6 	bl	8005be4 <vAssertCalled>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000698:	f002 f91c 	bl	80028d4 <ulSetInterruptMaskFromISR>
 800069c:	0003      	movs	r3, r0
 800069e:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006a4:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d263      	bcs.n	8000778 <MyWrapper_xQueueGiveFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80006b0:	2317      	movs	r3, #23
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	6a3a      	ldr	r2, [r7, #32]
 80006b6:	2145      	movs	r1, #69	@ 0x45
 80006b8:	5c52      	ldrb	r2, [r2, r1]
 80006ba:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	224c      	movs	r2, #76	@ 0x4c
 80006c0:	5c9b      	ldrb	r3, [r3, r2]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <MyWrapper_xQueueGiveFromISR+0x94>
 80006c6:	db19      	blt.n	80006fc <MyWrapper_xQueueGiveFromISR+0xc0>
 80006c8:	3b02      	subs	r3, #2
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d816      	bhi.n	80006fc <MyWrapper_xQueueGiveFromISR+0xc0>
 80006ce:	e00d      	b.n	80006ec <MyWrapper_xQueueGiveFromISR+0xb0>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <MyWrapper_xQueueGiveFromISR+0x9e>
 80006d6:	2059      	movs	r0, #89	@ 0x59
 80006d8:	e000      	b.n	80006dc <MyWrapper_xQueueGiveFromISR+0xa0>
 80006da:	20c3      	movs	r0, #195	@ 0xc3
 80006dc:	6a39      	ldr	r1, [r7, #32]
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006e2:	3301      	adds	r3, #1
 80006e4:	001a      	movs	r2, r3
 80006e6:	f003 f957 	bl	8003998 <xTraceEventCreate2>
 80006ea:	e007      	b.n	80006fc <MyWrapper_xQueueGiveFromISR+0xc0>
 80006ec:	6a39      	ldr	r1, [r7, #32]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f2:	3301      	adds	r3, #1
 80006f4:	001a      	movs	r2, r3
 80006f6:	205a      	movs	r0, #90	@ 0x5a
 80006f8:	f003 f94e 	bl	8003998 <xTraceEventCreate2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000704:	2317      	movs	r3, #23
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	3301      	adds	r3, #1
 800070e:	d111      	bne.n	8000734 <MyWrapper_xQueueGiveFromISR+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000714:	2b00      	cmp	r3, #0
 8000716:	d02c      	beq.n	8000772 <MyWrapper_xQueueGiveFromISR+0x136>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	3324      	adds	r3, #36	@ 0x24
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f9c5 	bl	8001aac <xTaskRemoveFromEventList>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d025      	beq.n	8000772 <MyWrapper_xQueueGiveFromISR+0x136>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d022      	beq.n	8000772 <MyWrapper_xQueueGiveFromISR+0x136>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	e01e      	b.n	8000772 <MyWrapper_xQueueGiveFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000734:	f000 ffbc 	bl	80016b0 <uxTaskGetNumberOfTasks>
 8000738:	0003      	movs	r3, r0
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	2117      	movs	r1, #23
 800073e:	187b      	adds	r3, r7, r1
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	429a      	cmp	r2, r3
 8000748:	d913      	bls.n	8000772 <MyWrapper_xQueueGiveFromISR+0x136>
 800074a:	187b      	adds	r3, r7, r1
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	2b7f      	cmp	r3, #127	@ 0x7f
 8000752:	d105      	bne.n	8000760 <MyWrapper_xQueueGiveFromISR+0x124>
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <MyWrapper_xQueueGiveFromISR+0x1a0>)
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MyWrapper_xQueueGiveFromISR+0x194>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f005 fa42 	bl	8005be4 <vAssertCalled>
 8000760:	2317      	movs	r3, #23
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	b259      	sxtb	r1, r3
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	2245      	movs	r2, #69	@ 0x45
 8000770:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000772:	2301      	movs	r3, #1
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
 8000776:	e01f      	b.n	80007b8 <MyWrapper_xQueueGiveFromISR+0x17c>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	224c      	movs	r2, #76	@ 0x4c
 800077c:	5c9b      	ldrb	r3, [r3, r2]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <MyWrapper_xQueueGiveFromISR+0x150>
 8000782:	db17      	blt.n	80007b4 <MyWrapper_xQueueGiveFromISR+0x178>
 8000784:	3b02      	subs	r3, #2
 8000786:	2b01      	cmp	r3, #1
 8000788:	d814      	bhi.n	80007b4 <MyWrapper_xQueueGiveFromISR+0x178>
 800078a:	e00c      	b.n	80007a6 <MyWrapper_xQueueGiveFromISR+0x16a>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <MyWrapper_xQueueGiveFromISR+0x15a>
 8000792:	205c      	movs	r0, #92	@ 0x5c
 8000794:	e000      	b.n	8000798 <MyWrapper_xQueueGiveFromISR+0x15c>
 8000796:	20c4      	movs	r0, #196	@ 0xc4
 8000798:	6a39      	ldr	r1, [r7, #32]
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800079e:	001a      	movs	r2, r3
 80007a0:	f003 f8fa 	bl	8003998 <xTraceEventCreate2>
 80007a4:	e006      	b.n	80007b4 <MyWrapper_xQueueGiveFromISR+0x178>
 80007a6:	6a39      	ldr	r1, [r7, #32]
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007ac:	001a      	movs	r2, r3
 80007ae:	205d      	movs	r0, #93	@ 0x5d
 80007b0:	f003 f8f2 	bl	8003998 <xTraceEventCreate2>
            xReturn = errQUEUE_FULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 f890 	bl	80028e0 <vClearInterruptMaskFromISR>

    return xReturn;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b00a      	add	sp, #40	@ 0x28
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	000004c9 	.word	0x000004c9
 80007d0:	080064a0 	.word	0x080064a0
 80007d4:	000004cd 	.word	0x000004cd
 80007d8:	000004d2 	.word	0x000004d2
 80007dc:	00000551 	.word	0x00000551

080007e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <xQueueReceive+0x26>
 80007fa:	4ab3      	ldr	r2, [pc, #716]	@ (8000ac8 <xQueueReceive+0x2e8>)
 80007fc:	4bb3      	ldr	r3, [pc, #716]	@ (8000acc <xQueueReceive+0x2ec>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f005 f9ef 	bl	8005be4 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <xQueueReceive+0x34>
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <xQueueReceive+0x38>
 8000814:	2301      	movs	r3, #1
 8000816:	e000      	b.n	800081a <xQueueReceive+0x3a>
 8000818:	2300      	movs	r3, #0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d105      	bne.n	800082a <xQueueReceive+0x4a>
 800081e:	4aac      	ldr	r2, [pc, #688]	@ (8000ad0 <xQueueReceive+0x2f0>)
 8000820:	4baa      	ldr	r3, [pc, #680]	@ (8000acc <xQueueReceive+0x2ec>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f005 f9dd 	bl	8005be4 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800082a:	f001 fb2d 	bl	8001e88 <xTaskGetSchedulerState>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d102      	bne.n	8000838 <xQueueReceive+0x58>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <xQueueReceive+0x5c>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <xQueueReceive+0x5e>
 800083c:	2300      	movs	r3, #0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d105      	bne.n	800084e <xQueueReceive+0x6e>
 8000842:	4aa4      	ldr	r2, [pc, #656]	@ (8000ad4 <xQueueReceive+0x2f4>)
 8000844:	4ba1      	ldr	r3, [pc, #644]	@ (8000acc <xQueueReceive+0x2ec>)
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f005 f9cb 	bl	8005be4 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800084e:	f002 f80f 	bl	8002870 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000856:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d048      	beq.n	80008f0 <xQueueReceive+0x110>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fae9 	bl	8000e3c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	224c      	movs	r2, #76	@ 0x4c
 800086e:	5c9b      	ldrb	r3, [r3, r2]
 8000870:	2b04      	cmp	r3, #4
 8000872:	d022      	beq.n	80008ba <xQueueReceive+0xda>
 8000874:	dc27      	bgt.n	80008c6 <xQueueReceive+0xe6>
 8000876:	2b03      	cmp	r3, #3
 8000878:	dc25      	bgt.n	80008c6 <xQueueReceive+0xe6>
 800087a:	2b02      	cmp	r3, #2
 800087c:	da0d      	bge.n	800089a <xQueueReceive+0xba>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <xQueueReceive+0xa8>
 8000882:	2b01      	cmp	r3, #1
 8000884:	d012      	beq.n	80008ac <xQueueReceive+0xcc>
 8000886:	e01e      	b.n	80008c6 <xQueueReceive+0xe6>
 8000888:	6a39      	ldr	r1, [r7, #32]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000890:	3b01      	subs	r3, #1
 8000892:	2060      	movs	r0, #96	@ 0x60
 8000894:	f003 f8fc 	bl	8003a90 <xTraceEventCreate3>
 8000898:	e015      	b.n	80008c6 <xQueueReceive+0xe6>
 800089a:	6a39      	ldr	r1, [r7, #32]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008a2:	3b01      	subs	r3, #1
 80008a4:	2061      	movs	r0, #97	@ 0x61
 80008a6:	f003 f8f3 	bl	8003a90 <xTraceEventCreate3>
 80008aa:	e00c      	b.n	80008c6 <xQueueReceive+0xe6>
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	0019      	movs	r1, r3
 80008b2:	2062      	movs	r0, #98	@ 0x62
 80008b4:	f003 f870 	bl	8003998 <xTraceEventCreate2>
 80008b8:	e005      	b.n	80008c6 <xQueueReceive+0xe6>
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	0019      	movs	r1, r3
 80008c0:	20c7      	movs	r0, #199	@ 0xc7
 80008c2:	f003 f869 	bl	8003998 <xTraceEventCreate2>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <xQueueReceive+0x108>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	3310      	adds	r3, #16
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f8e6 	bl	8001aac <xTaskRemoveFromEventList>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <xQueueReceive+0x108>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008e4:	f001 ffb4 	bl	8002850 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008e8:	f001 ffd4 	bl	8002894 <vPortExitCritical>
                return pdPASS;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e0e7      	b.n	8000ac0 <xQueueReceive+0x2e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d12f      	bne.n	8000956 <xQueueReceive+0x176>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008f6:	f001 ffcd 	bl	8002894 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	224c      	movs	r2, #76	@ 0x4c
 80008fe:	5c9b      	ldrb	r3, [r3, r2]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d020      	beq.n	8000946 <xQueueReceive+0x166>
 8000904:	dc25      	bgt.n	8000952 <xQueueReceive+0x172>
 8000906:	2b03      	cmp	r3, #3
 8000908:	dc23      	bgt.n	8000952 <xQueueReceive+0x172>
 800090a:	2b02      	cmp	r3, #2
 800090c:	da0c      	bge.n	8000928 <xQueueReceive+0x148>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <xQueueReceive+0x138>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d010      	beq.n	8000938 <xQueueReceive+0x158>
 8000916:	e01c      	b.n	8000952 <xQueueReceive+0x172>
 8000918:	6a39      	ldr	r1, [r7, #32]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000920:	2063      	movs	r0, #99	@ 0x63
 8000922:	f003 f8b5 	bl	8003a90 <xTraceEventCreate3>
 8000926:	e014      	b.n	8000952 <xQueueReceive+0x172>
 8000928:	6a39      	ldr	r1, [r7, #32]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000930:	2064      	movs	r0, #100	@ 0x64
 8000932:	f003 f8ad 	bl	8003a90 <xTraceEventCreate3>
 8000936:	e00c      	b.n	8000952 <xQueueReceive+0x172>
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	0019      	movs	r1, r3
 800093e:	2065      	movs	r0, #101	@ 0x65
 8000940:	f003 f82a 	bl	8003998 <xTraceEventCreate2>
 8000944:	e005      	b.n	8000952 <xQueueReceive+0x172>
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	0019      	movs	r1, r3
 800094c:	20c8      	movs	r0, #200	@ 0xc8
 800094e:	f003 f823 	bl	8003998 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000952:	2300      	movs	r3, #0
 8000954:	e0b4      	b.n	8000ac0 <xQueueReceive+0x2e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	2b00      	cmp	r3, #0
 800095a:	d106      	bne.n	800096a <xQueueReceive+0x18a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800095c:	2314      	movs	r3, #20
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f97b 	bl	8001c5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800096a:	f001 ff93 	bl	8002894 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800096e:	f000 fd8f 	bl	8001490 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000972:	f001 ff7d 	bl	8002870 <vPortEnterCritical>
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	2244      	movs	r2, #68	@ 0x44
 800097a:	5c9b      	ldrb	r3, [r3, r2]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	d103      	bne.n	800098a <xQueueReceive+0x1aa>
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	2244      	movs	r2, #68	@ 0x44
 8000986:	2100      	movs	r1, #0
 8000988:	5499      	strb	r1, [r3, r2]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2245      	movs	r2, #69	@ 0x45
 800098e:	5c9b      	ldrb	r3, [r3, r2]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	3301      	adds	r3, #1
 8000994:	d103      	bne.n	800099e <xQueueReceive+0x1be>
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	2245      	movs	r2, #69	@ 0x45
 800099a:	2100      	movs	r1, #0
 800099c:	5499      	strb	r1, [r3, r2]
 800099e:	f001 ff79 	bl	8002894 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	2314      	movs	r3, #20
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 f96a 	bl	8001c84 <xTaskCheckForTimeOut>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d14b      	bne.n	8000a4c <xQueueReceive+0x26c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fac4 	bl	8000f44 <prvIsQueueEmpty>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d03e      	beq.n	8000a3e <xQueueReceive+0x25e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	5c9b      	ldrb	r3, [r3, r2]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d020      	beq.n	8000a0c <xQueueReceive+0x22c>
 80009ca:	dc25      	bgt.n	8000a18 <xQueueReceive+0x238>
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	dc23      	bgt.n	8000a18 <xQueueReceive+0x238>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	da0c      	bge.n	80009ee <xQueueReceive+0x20e>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <xQueueReceive+0x1fe>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d010      	beq.n	80009fe <xQueueReceive+0x21e>
 80009dc:	e01c      	b.n	8000a18 <xQueueReceive+0x238>
 80009de:	6a39      	ldr	r1, [r7, #32]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009e6:	2066      	movs	r0, #102	@ 0x66
 80009e8:	f003 f852 	bl	8003a90 <xTraceEventCreate3>
 80009ec:	e014      	b.n	8000a18 <xQueueReceive+0x238>
 80009ee:	6a39      	ldr	r1, [r7, #32]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f6:	2067      	movs	r0, #103	@ 0x67
 80009f8:	f003 f84a 	bl	8003a90 <xTraceEventCreate3>
 80009fc:	e00c      	b.n	8000a18 <xQueueReceive+0x238>
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	0019      	movs	r1, r3
 8000a04:	2068      	movs	r0, #104	@ 0x68
 8000a06:	f002 ffc7 	bl	8003998 <xTraceEventCreate2>
 8000a0a:	e005      	b.n	8000a18 <xQueueReceive+0x238>
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	0019      	movs	r1, r3
 8000a12:	20f6      	movs	r0, #246	@ 0xf6
 8000a14:	f002 ffc0 	bl	8003998 <xTraceEventCreate2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	3324      	adds	r3, #36	@ 0x24
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 ffcd 	bl	80019c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fa2d 	bl	8000e88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a2e:	f000 fd3b 	bl	80014a8 <xTaskResumeAll>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d000      	beq.n	8000a38 <xQueueReceive+0x258>
 8000a36:	e70a      	b.n	800084e <xQueueReceive+0x6e>
                {
                    portYIELD_WITHIN_API();
 8000a38:	f001 ff0a 	bl	8002850 <vPortYield>
 8000a3c:	e707      	b.n	800084e <xQueueReceive+0x6e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fa21 	bl	8000e88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a46:	f000 fd2f 	bl	80014a8 <xTaskResumeAll>
 8000a4a:	e700      	b.n	800084e <xQueueReceive+0x6e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fa1a 	bl	8000e88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a54:	f000 fd28 	bl	80014a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fa72 	bl	8000f44 <prvIsQueueEmpty>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d100      	bne.n	8000a66 <xQueueReceive+0x286>
 8000a64:	e6f3      	b.n	800084e <xQueueReceive+0x6e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	224c      	movs	r2, #76	@ 0x4c
 8000a6a:	5c9b      	ldrb	r3, [r3, r2]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d020      	beq.n	8000ab2 <xQueueReceive+0x2d2>
 8000a70:	dc25      	bgt.n	8000abe <xQueueReceive+0x2de>
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	dc23      	bgt.n	8000abe <xQueueReceive+0x2de>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	da0c      	bge.n	8000a94 <xQueueReceive+0x2b4>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <xQueueReceive+0x2a4>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d010      	beq.n	8000aa4 <xQueueReceive+0x2c4>
 8000a82:	e01c      	b.n	8000abe <xQueueReceive+0x2de>
 8000a84:	6a39      	ldr	r1, [r7, #32]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a8c:	2063      	movs	r0, #99	@ 0x63
 8000a8e:	f002 ffff 	bl	8003a90 <xTraceEventCreate3>
 8000a92:	e014      	b.n	8000abe <xQueueReceive+0x2de>
 8000a94:	6a39      	ldr	r1, [r7, #32]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a9c:	2064      	movs	r0, #100	@ 0x64
 8000a9e:	f002 fff7 	bl	8003a90 <xTraceEventCreate3>
 8000aa2:	e00c      	b.n	8000abe <xQueueReceive+0x2de>
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	2065      	movs	r0, #101	@ 0x65
 8000aac:	f002 ff74 	bl	8003998 <xTraceEventCreate2>
 8000ab0:	e005      	b.n	8000abe <xQueueReceive+0x2de>
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	20c8      	movs	r0, #200	@ 0xc8
 8000aba:	f002 ff6d 	bl	8003998 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000abe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b00a      	add	sp, #40	@ 0x28
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	0000056b 	.word	0x0000056b
 8000acc:	080064a0 	.word	0x080064a0
 8000ad0:	0000056f 	.word	0x0000056f
 8000ad4:	00000574 	.word	0x00000574

08000ad8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <xQueueSemaphoreTake+0x28>
 8000af4:	4abc      	ldr	r2, [pc, #752]	@ (8000de8 <xQueueSemaphoreTake+0x310>)
 8000af6:	4bbd      	ldr	r3, [pc, #756]	@ (8000dec <xQueueSemaphoreTake+0x314>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f005 f872 	bl	8005be4 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d005      	beq.n	8000b14 <xQueueSemaphoreTake+0x3c>
 8000b08:	4ab9      	ldr	r2, [pc, #740]	@ (8000df0 <xQueueSemaphoreTake+0x318>)
 8000b0a:	4bb8      	ldr	r3, [pc, #736]	@ (8000dec <xQueueSemaphoreTake+0x314>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f005 f868 	bl	8005be4 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b14:	f001 f9b8 	bl	8001e88 <xTaskGetSchedulerState>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d102      	bne.n	8000b22 <xQueueSemaphoreTake+0x4a>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <xQueueSemaphoreTake+0x4e>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <xQueueSemaphoreTake+0x50>
 8000b26:	2300      	movs	r3, #0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <xQueueSemaphoreTake+0x60>
 8000b2c:	4ab1      	ldr	r2, [pc, #708]	@ (8000df4 <xQueueSemaphoreTake+0x31c>)
 8000b2e:	4baf      	ldr	r3, [pc, #700]	@ (8000dec <xQueueSemaphoreTake+0x314>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f005 f856 	bl	8005be4 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b38:	f001 fe9a 	bl	8002870 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b40:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d04b      	beq.n	8000be0 <xQueueSemaphoreTake+0x108>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	224c      	movs	r2, #76	@ 0x4c
 8000b4c:	5c9b      	ldrb	r3, [r3, r2]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d022      	beq.n	8000b98 <xQueueSemaphoreTake+0xc0>
 8000b52:	dc27      	bgt.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	dc25      	bgt.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	da0d      	bge.n	8000b78 <xQueueSemaphoreTake+0xa0>
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <xQueueSemaphoreTake+0x8e>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d012      	beq.n	8000b8a <xQueueSemaphoreTake+0xb2>
 8000b64:	e01e      	b.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b66:	69f9      	ldr	r1, [r7, #28]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2060      	movs	r0, #96	@ 0x60
 8000b72:	f002 ff8d 	bl	8003a90 <xTraceEventCreate3>
 8000b76:	e015      	b.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b78:	69f9      	ldr	r1, [r7, #28]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b80:	3b01      	subs	r3, #1
 8000b82:	2061      	movs	r0, #97	@ 0x61
 8000b84:	f002 ff84 	bl	8003a90 <xTraceEventCreate3>
 8000b88:	e00c      	b.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2062      	movs	r0, #98	@ 0x62
 8000b92:	f002 ff01 	bl	8003998 <xTraceEventCreate2>
 8000b96:	e005      	b.n	8000ba4 <xQueueSemaphoreTake+0xcc>
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	20c7      	movs	r0, #199	@ 0xc7
 8000ba0:	f002 fefa 	bl	8003998 <xTraceEventCreate2>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <xQueueSemaphoreTake+0xe6>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000bb4:	f001 fad0 	bl	8002158 <pvTaskIncrementMutexHeldCount>
 8000bb8:	0002      	movs	r2, r0
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d008      	beq.n	8000bd8 <xQueueSemaphoreTake+0x100>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3310      	adds	r3, #16
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ff6e 	bl	8001aac <xTaskRemoveFromEventList>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <xQueueSemaphoreTake+0x100>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bd4:	f001 fe3c 	bl	8002850 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bd8:	f001 fe5c 	bl	8002894 <vPortExitCritical>
                return pdPASS;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e112      	b.n	8000e06 <xQueueSemaphoreTake+0x32e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d12f      	bne.n	8000c46 <xQueueSemaphoreTake+0x16e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000be6:	f001 fe55 	bl	8002894 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	224c      	movs	r2, #76	@ 0x4c
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d020      	beq.n	8000c36 <xQueueSemaphoreTake+0x15e>
 8000bf4:	dc25      	bgt.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	dc23      	bgt.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	da0c      	bge.n	8000c18 <xQueueSemaphoreTake+0x140>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <xQueueSemaphoreTake+0x130>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d010      	beq.n	8000c28 <xQueueSemaphoreTake+0x150>
 8000c06:	e01c      	b.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c10:	2063      	movs	r0, #99	@ 0x63
 8000c12:	f002 ff3d 	bl	8003a90 <xTraceEventCreate3>
 8000c16:	e014      	b.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000c18:	69f9      	ldr	r1, [r7, #28]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c20:	2064      	movs	r0, #100	@ 0x64
 8000c22:	f002 ff35 	bl	8003a90 <xTraceEventCreate3>
 8000c26:	e00c      	b.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	2065      	movs	r0, #101	@ 0x65
 8000c30:	f002 feb2 	bl	8003998 <xTraceEventCreate2>
 8000c34:	e005      	b.n	8000c42 <xQueueSemaphoreTake+0x16a>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	20c8      	movs	r0, #200	@ 0xc8
 8000c3e:	f002 feab 	bl	8003998 <xTraceEventCreate2>
                    return errQUEUE_EMPTY;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e0df      	b.n	8000e06 <xQueueSemaphoreTake+0x32e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <xQueueSemaphoreTake+0x182>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f803 	bl	8001c5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c5a:	f001 fe1b 	bl	8002894 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c5e:	f000 fc17 	bl	8001490 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c62:	f001 fe05 	bl	8002870 <vPortEnterCritical>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2244      	movs	r2, #68	@ 0x44
 8000c6a:	5c9b      	ldrb	r3, [r3, r2]
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	d103      	bne.n	8000c7a <xQueueSemaphoreTake+0x1a2>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	2244      	movs	r2, #68	@ 0x44
 8000c76:	2100      	movs	r1, #0
 8000c78:	5499      	strb	r1, [r3, r2]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	2245      	movs	r2, #69	@ 0x45
 8000c7e:	5c9b      	ldrb	r3, [r3, r2]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	d103      	bne.n	8000c8e <xQueueSemaphoreTake+0x1b6>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	2245      	movs	r2, #69	@ 0x45
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	5499      	strb	r1, [r3, r2]
 8000c8e:	f001 fe01 	bl	8002894 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c92:	003a      	movs	r2, r7
 8000c94:	230c      	movs	r3, #12
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fff2 	bl	8001c84 <xTaskCheckForTimeOut>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d15a      	bne.n	8000d5a <xQueueSemaphoreTake+0x282>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f94c 	bl	8000f44 <prvIsQueueEmpty>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d04d      	beq.n	8000d4c <xQueueSemaphoreTake+0x274>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	224c      	movs	r2, #76	@ 0x4c
 8000cb4:	5c9b      	ldrb	r3, [r3, r2]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d020      	beq.n	8000cfc <xQueueSemaphoreTake+0x224>
 8000cba:	dc25      	bgt.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	dc23      	bgt.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	da0c      	bge.n	8000cde <xQueueSemaphoreTake+0x206>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <xQueueSemaphoreTake+0x1f6>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d010      	beq.n	8000cee <xQueueSemaphoreTake+0x216>
 8000ccc:	e01c      	b.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cce:	69f9      	ldr	r1, [r7, #28]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd6:	2066      	movs	r0, #102	@ 0x66
 8000cd8:	f002 feda 	bl	8003a90 <xTraceEventCreate3>
 8000cdc:	e014      	b.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cde:	69f9      	ldr	r1, [r7, #28]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ce6:	2067      	movs	r0, #103	@ 0x67
 8000ce8:	f002 fed2 	bl	8003a90 <xTraceEventCreate3>
 8000cec:	e00c      	b.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	2068      	movs	r0, #104	@ 0x68
 8000cf6:	f002 fe4f 	bl	8003998 <xTraceEventCreate2>
 8000cfa:	e005      	b.n	8000d08 <xQueueSemaphoreTake+0x230>
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	0019      	movs	r1, r3
 8000d02:	20f6      	movs	r0, #246	@ 0xf6
 8000d04:	f002 fe48 	bl	8003998 <xTraceEventCreate2>

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <xQueueSemaphoreTake+0x24e>
                    {
                        taskENTER_CRITICAL();
 8000d10:	f001 fdae 	bl	8002870 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 f8d1 	bl	8001ec0 <xTaskPriorityInherit>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                        taskEXIT_CRITICAL();
 8000d22:	f001 fdb7 	bl	8002894 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3324      	adds	r3, #36	@ 0x24
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fe46 	bl	80019c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 f8a6 	bl	8000e88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d3c:	f000 fbb4 	bl	80014a8 <xTaskResumeAll>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d000      	beq.n	8000d46 <xQueueSemaphoreTake+0x26e>
 8000d44:	e6f8      	b.n	8000b38 <xQueueSemaphoreTake+0x60>
                {
                    portYIELD_WITHIN_API();
 8000d46:	f001 fd83 	bl	8002850 <vPortYield>
 8000d4a:	e6f5      	b.n	8000b38 <xQueueSemaphoreTake+0x60>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f89a 	bl	8000e88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d54:	f000 fba8 	bl	80014a8 <xTaskResumeAll>
 8000d58:	e6ee      	b.n	8000b38 <xQueueSemaphoreTake+0x60>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f893 	bl	8000e88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d62:	f000 fba1 	bl	80014a8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 f8eb 	bl	8000f44 <prvIsQueueEmpty>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d100      	bne.n	8000d74 <xQueueSemaphoreTake+0x29c>
 8000d72:	e6e1      	b.n	8000b38 <xQueueSemaphoreTake+0x60>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d010      	beq.n	8000d9c <xQueueSemaphoreTake+0x2c4>
                    {
                        taskENTER_CRITICAL();
 8000d7a:	f001 fd79 	bl	8002870 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 f845 	bl	8000e10 <prvGetDisinheritPriorityAfterTimeout>
 8000d86:	0003      	movs	r3, r0
 8000d88:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	0011      	movs	r1, r2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 f930 	bl	8001ff8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000d98:	f001 fd7c 	bl	8002894 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	5c9b      	ldrb	r3, [r3, r2]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d028      	beq.n	8000df8 <xQueueSemaphoreTake+0x320>
 8000da6:	dc2d      	bgt.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	dc2b      	bgt.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	da0c      	bge.n	8000dca <xQueueSemaphoreTake+0x2f2>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <xQueueSemaphoreTake+0x2e2>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d010      	beq.n	8000dda <xQueueSemaphoreTake+0x302>
 8000db8:	e024      	b.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000dba:	69f9      	ldr	r1, [r7, #28]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc2:	2063      	movs	r0, #99	@ 0x63
 8000dc4:	f002 fe64 	bl	8003a90 <xTraceEventCreate3>
 8000dc8:	e01c      	b.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000dca:	69f9      	ldr	r1, [r7, #28]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd2:	2064      	movs	r0, #100	@ 0x64
 8000dd4:	f002 fe5c 	bl	8003a90 <xTraceEventCreate3>
 8000dd8:	e014      	b.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	0019      	movs	r1, r3
 8000de0:	2065      	movs	r0, #101	@ 0x65
 8000de2:	f002 fdd9 	bl	8003998 <xTraceEventCreate2>
 8000de6:	e00d      	b.n	8000e04 <xQueueSemaphoreTake+0x32c>
 8000de8:	000005fd 	.word	0x000005fd
 8000dec:	080064a0 	.word	0x080064a0
 8000df0:	00000601 	.word	0x00000601
 8000df4:	00000606 	.word	0x00000606
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	20c8      	movs	r0, #200	@ 0xc8
 8000e00:	f002 fdca 	bl	8003998 <xTraceEventCreate2>
                return errQUEUE_EMPTY;
 8000e04:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b00a      	add	sp, #40	@ 0x28
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)

08000e10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2205      	movs	r2, #5
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e001      	b.n	8000e32 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000e32:	68fb      	ldr	r3, [r7, #12]
    }
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b004      	add	sp, #16
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d018      	beq.n	8000e80 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	18d2      	adds	r2, r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d303      	bcc.n	8000e70 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68d9      	ldr	r1, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f005 fafa 	bl	8006474 <memcpy>
    }
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e90:	f001 fcee 	bl	8002870 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e94:	230f      	movs	r3, #15
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	2145      	movs	r1, #69	@ 0x45
 8000e9c:	5c52      	ldrb	r2, [r2, r1]
 8000e9e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ea0:	e013      	b.n	8000eca <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d016      	beq.n	8000ed8 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3324      	adds	r3, #36	@ 0x24
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 fdfc 	bl	8001aac <xTaskRemoveFromEventList>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000eb8:	f000 ff3e 	bl	8001d38 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	dce5      	bgt.n	8000ea2 <prvUnlockQueue+0x1a>
 8000ed6:	e000      	b.n	8000eda <prvUnlockQueue+0x52>
                    break;
 8000ed8:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2245      	movs	r2, #69	@ 0x45
 8000ede:	21ff      	movs	r1, #255	@ 0xff
 8000ee0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000ee2:	f001 fcd7 	bl	8002894 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ee6:	f001 fcc3 	bl	8002870 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000eea:	230e      	movs	r3, #14
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	2144      	movs	r1, #68	@ 0x44
 8000ef2:	5c52      	ldrb	r2, [r2, r1]
 8000ef4:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ef6:	e013      	b.n	8000f20 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d016      	beq.n	8000f2e <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3310      	adds	r3, #16
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fdd1 	bl	8001aac <xTaskRemoveFromEventList>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000f0e:	f000 ff13 	bl	8001d38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f12:	210e      	movs	r1, #14
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f20:	230e      	movs	r3, #14
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dce5      	bgt.n	8000ef8 <prvUnlockQueue+0x70>
 8000f2c:	e000      	b.n	8000f30 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8000f2e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2244      	movs	r2, #68	@ 0x44
 8000f34:	21ff      	movs	r1, #255	@ 0xff
 8000f36:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000f38:	f001 fcac 	bl	8002894 <vPortExitCritical>
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f4c:	f001 fc90 	bl	8002870 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e001      	b.n	8000f62 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f62:	f001 fc97 	bl	8002894 <vPortExitCritical>

    return xReturn;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b004      	add	sp, #16
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d105      	bne.n	8000f90 <vQueueAddToRegistry+0x20>
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <vQueueAddToRegistry+0x98>)
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <vQueueAddToRegistry+0x9c>)
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f004 fe2a 	bl	8005be4 <vAssertCalled>

        if( pcQueueName != NULL )
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d025      	beq.n	8000fe2 <vQueueAddToRegistry+0x72>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e01f      	b.n	8000fdc <vQueueAddToRegistry+0x6c>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <vQueueAddToRegistry+0xa0>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	18d3      	adds	r3, r2, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d105      	bne.n	8000fba <vQueueAddToRegistry+0x4a>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	00da      	lsls	r2, r3, #3
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <vQueueAddToRegistry+0xa0>)
 8000fb4:	18d3      	adds	r3, r2, r3
 8000fb6:	60bb      	str	r3, [r7, #8]
                    break;
 8000fb8:	e013      	b.n	8000fe2 <vQueueAddToRegistry+0x72>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <vQueueAddToRegistry+0x66>
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <vQueueAddToRegistry+0xa0>)
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	58d3      	ldr	r3, [r2, r3]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <vQueueAddToRegistry+0x66>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	00da      	lsls	r2, r3, #3
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <vQueueAddToRegistry+0xa0>)
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b09      	cmp	r3, #9
 8000fe0:	d9dc      	bls.n	8000f9c <vQueueAddToRegistry+0x2c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0011      	movs	r1, r2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f003 fcf9 	bl	80049f2 <xTraceObjectSetNameWithoutHandle>
        }
    }
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bd80      	pop	{r7, pc}
 8001008:	00000ad8 	.word	0x00000ad8
 800100c:	080064a0 	.word	0x080064a0
 8001010:	20000028 	.word	0x20000028

08001014 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001024:	f001 fc24 	bl	8002870 <vPortEnterCritical>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2244      	movs	r2, #68	@ 0x44
 800102c:	5c9b      	ldrb	r3, [r3, r2]
 800102e:	b25b      	sxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	d103      	bne.n	800103c <vQueueWaitForMessageRestricted+0x28>
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2244      	movs	r2, #68	@ 0x44
 8001038:	2100      	movs	r1, #0
 800103a:	5499      	strb	r1, [r3, r2]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2245      	movs	r2, #69	@ 0x45
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	3301      	adds	r3, #1
 8001046:	d103      	bne.n	8001050 <vQueueWaitForMessageRestricted+0x3c>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2245      	movs	r2, #69	@ 0x45
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
 8001050:	f001 fc20 	bl	8002894 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3324      	adds	r3, #36	@ 0x24
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fcd1 	bl	8001a0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff0b 	bl	8000e88 <prvUnlockQueue>
    }
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b006      	add	sp, #24
 8001078:	bd80      	pop	{r7, pc}

0800107a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b08d      	sub	sp, #52	@ 0x34
 800107e:	af04      	add	r7, sp, #16
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	1dbb      	adds	r3, r7, #6
 8001088:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800108a:	1dbb      	adds	r3, r7, #6
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fc8d 	bl	80029b0 <pvPortMalloc>
 8001096:	0003      	movs	r3, r0
 8001098:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d016      	beq.n	80010ce <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010a0:	2060      	movs	r0, #96	@ 0x60
 80010a2:	f001 fc85 	bl	80029b0 <pvPortMalloc>
 80010a6:	0003      	movs	r3, r0
 80010a8:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2260      	movs	r2, #96	@ 0x60
 80010b4:	2100      	movs	r1, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f005 f9b0 	bl	800641c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c2:	e006      	b.n	80010d2 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fcda 	bl	8002a80 <vPortFree>
 80010cc:	e001      	b.n	80010d2 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d016      	beq.n	8001106 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	683c      	ldr	r4, [r7, #0]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	0023      	movs	r3, r4
 80010f4:	f000 f810 	bl	8001118 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f89a 	bl	8001234 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	e002      	b.n	800110c <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001106:	2301      	movs	r3, #1
 8001108:	425b      	negs	r3, r3
 800110a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800110c:	69bb      	ldr	r3, [r7, #24]
    }
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b009      	add	sp, #36	@ 0x24
 8001114:	bd90      	pop	{r4, r7, pc}
	...

08001118 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001128:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	001a      	movs	r2, r3
 8001130:	21a5      	movs	r1, #165	@ 0xa5
 8001132:	f005 f973 	bl	800641c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4939      	ldr	r1, [pc, #228]	@ (8001224 <prvInitialiseNewTask+0x10c>)
 800113e:	468c      	mov	ip, r1
 8001140:	4463      	add	r3, ip
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2207      	movs	r2, #7
 800114c:	4393      	bics	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2207      	movs	r2, #7
 8001154:	4013      	ands	r3, r2
 8001156:	d005      	beq.n	8001164 <prvInitialiseNewTask+0x4c>
 8001158:	4a33      	ldr	r2, [pc, #204]	@ (8001228 <prvInitialiseNewTask+0x110>)
 800115a:	4b34      	ldr	r3, [pc, #208]	@ (800122c <prvInitialiseNewTask+0x114>)
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f004 fd40 	bl	8005be4 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01f      	beq.n	80011aa <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e013      	b.n	8001198 <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	7818      	ldrb	r0, [r3, #0]
 8001178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800117a:	2134      	movs	r1, #52	@ 0x34
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	185b      	adds	r3, r3, r1
 8001182:	1c02      	adds	r2, r0, #0
 8001184:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	d9e8      	bls.n	8001170 <prvInitialiseNewTask+0x58>
 800119e:	e000      	b.n	80011a2 <prvInitialiseNewTask+0x8a>
            {
                break;
 80011a0:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a4:	2243      	movs	r2, #67	@ 0x43
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d905      	bls.n	80011bc <prvInitialiseNewTask+0xa4>
 80011b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001230 <prvInitialiseNewTask+0x118>)
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <prvInitialiseNewTask+0x114>)
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f004 fd14 	bl	8005be4 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d901      	bls.n	80011c6 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011c2:	2304      	movs	r3, #4
 80011c4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80011c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	6a3a      	ldr	r2, [r7, #32]
 80011d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80011d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d4:	3304      	adds	r3, #4
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff f840 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80011dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011de:	3318      	adds	r3, #24
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff f83b 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	2205      	movs	r2, #5
 80011f0:	1ad2      	subs	r2, r2, r3
 80011f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80011f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	0018      	movs	r0, r3
 8001204:	f001 fa92 	bl	800272c <pxPortInitialiseStack>
 8001208:	0002      	movs	r2, r0
 800120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800120c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <prvInitialiseNewTask+0x102>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001218:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b006      	add	sp, #24
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	3fffffff 	.word	0x3fffffff
 8001228:	0000035d 	.word	0x0000035d
 800122c:	080064b8 	.word	0x080064b8
 8001230:	00000392 	.word	0x00000392

08001234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800123c:	f001 fb18 	bl	8002870 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001240:	4b4a      	ldr	r3, [pc, #296]	@ (800136c <prvAddNewTaskToReadyList+0x138>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <prvAddNewTaskToReadyList+0x138>)
 8001248:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800124a:	4b49      	ldr	r3, [pc, #292]	@ (8001370 <prvAddNewTaskToReadyList+0x13c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <prvAddNewTaskToReadyList+0x13c>)
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001258:	4b44      	ldr	r3, [pc, #272]	@ (800136c <prvAddNewTaskToReadyList+0x138>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d110      	bne.n	8001282 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001260:	f000 fd84 	bl	8001d6c <prvInitialiseTaskLists>
 8001264:	e00d      	b.n	8001282 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001266:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <prvAddNewTaskToReadyList+0x140>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800126e:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <prvAddNewTaskToReadyList+0x13c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	429a      	cmp	r2, r3
 800127a:	d802      	bhi.n	8001282 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800127c:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <prvAddNewTaskToReadyList+0x13c>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <prvAddNewTaskToReadyList+0x144>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <prvAddNewTaskToReadyList+0x144>)
 800128a:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800128c:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <prvAddNewTaskToReadyList+0x144>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d011      	beq.n	80012be <prvAddNewTaskToReadyList+0x8a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00e      	beq.n	80012be <prvAddNewTaskToReadyList+0x8a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3334      	adds	r3, #52	@ 0x34
 80012a4:	001a      	movs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	2010      	movs	r0, #16
 80012ae:	f003 fb87 	bl	80049c0 <xTraceObjectRegisterWithoutHandle>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d103      	bne.n	80012be <prvAddNewTaskToReadyList+0x8a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f003 fdd5 	bl	8004e68 <xTraceStackMonitorAdd>

        prvAddTaskToReadyList( pxNewTCB );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0019      	movs	r1, r3
 80012c2:	2030      	movs	r0, #48	@ 0x30
 80012c4:	f002 faf0 	bl	80038a8 <xTraceEventCreate1>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012cc:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <prvAddNewTaskToReadyList+0x148>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d903      	bls.n	80012dc <prvAddNewTaskToReadyList+0xa8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d8:	4b28      	ldr	r3, [pc, #160]	@ (800137c <prvAddNewTaskToReadyList+0x148>)
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e0:	4927      	ldr	r1, [pc, #156]	@ (8001380 <prvAddNewTaskToReadyList+0x14c>)
 80012e2:	0013      	movs	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	18cb      	adds	r3, r1, r3
 80012ec:	3304      	adds	r3, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	3204      	adds	r2, #4
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1d1a      	adds	r2, r3, #4
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001316:	0013      	movs	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	189b      	adds	r3, r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <prvAddNewTaskToReadyList+0x14c>)
 8001320:	189a      	adds	r2, r3, r2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132a:	4915      	ldr	r1, [pc, #84]	@ (8001380 <prvAddNewTaskToReadyList+0x14c>)
 800132c:	0013      	movs	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	189b      	adds	r3, r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	585b      	ldr	r3, [r3, r1]
 8001336:	1c58      	adds	r0, r3, #1
 8001338:	4911      	ldr	r1, [pc, #68]	@ (8001380 <prvAddNewTaskToReadyList+0x14c>)
 800133a:	0013      	movs	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	189b      	adds	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001344:	f001 faa6 	bl	8002894 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <prvAddNewTaskToReadyList+0x140>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <prvAddNewTaskToReadyList+0x12e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <prvAddNewTaskToReadyList+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	429a      	cmp	r2, r3
 800135c:	d201      	bcs.n	8001362 <prvAddNewTaskToReadyList+0x12e>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800135e:	f001 fa77 	bl	8002850 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	20000124 	.word	0x20000124
 8001370:	20000078 	.word	0x20000078
 8001374:	20000130 	.word	0x20000130
 8001378:	20000140 	.word	0x20000140
 800137c:	2000012c 	.word	0x2000012c
 8001380:	2000007c 	.word	0x2000007c

08001384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <vTaskDelay+0x46>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <vTaskDelay+0x58>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <vTaskDelay+0x26>
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <vTaskDelay+0x5c>)
 80013a0:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <vTaskDelay+0x60>)
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f004 fc1d 	bl	8005be4 <vAssertCalled>
            vTaskSuspendAll();
 80013aa:	f000 f871 	bl	8001490 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0019      	movs	r1, r3
 80013b2:	207a      	movs	r0, #122	@ 0x7a
 80013b4:	f002 fa78 	bl	80038a8 <xTraceEventCreate1>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2100      	movs	r1, #0
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fedd 	bl	800217c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013c2:	f000 f871 	bl	80014a8 <xTaskResumeAll>
 80013c6:	0003      	movs	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <vTaskDelay+0x50>
        {
            portYIELD_WITHIN_API();
 80013d0:	f001 fa3e 	bl	8002850 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80013d4:	46c0      	nop			@ (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000014c 	.word	0x2000014c
 80013e0:	0000051c 	.word	0x0000051c
 80013e4:	080064b8 	.word	0x080064b8

080013e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80013ee:	491e      	ldr	r1, [pc, #120]	@ (8001468 <vTaskStartScheduler+0x80>)
 80013f0:	481e      	ldr	r0, [pc, #120]	@ (800146c <vTaskStartScheduler+0x84>)
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <vTaskStartScheduler+0x88>)
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	f7ff fe3c 	bl	800107a <xTaskCreate>
 8001402:	0003      	movs	r3, r0
 8001404:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d103      	bne.n	8001414 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 800140c:	f000 fefa 	bl	8002204 <xTimerCreateTimerTask>
 8001410:	0003      	movs	r3, r0
 8001412:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d116      	bne.n	8001448 <vTaskStartScheduler+0x60>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800141a:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <vTaskStartScheduler+0x8c>)
 800141e:	2201      	movs	r2, #1
 8001420:	4252      	negs	r2, r2
 8001422:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <vTaskStartScheduler+0x90>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <vTaskStartScheduler+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <vTaskStartScheduler+0x98>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <vTaskStartScheduler+0x98>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	0019      	movs	r1, r3
 800143c:	0010      	movs	r0, r2
 800143e:	f004 fa11 	bl	8005864 <xTraceTaskSwitch>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001442:	f001 f9e1 	bl	8002808 <xPortStartScheduler>
 8001446:	e008      	b.n	800145a <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	d105      	bne.n	800145a <vTaskStartScheduler+0x72>
 800144e:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <vTaskStartScheduler+0x9c>)
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <vTaskStartScheduler+0xa0>)
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f004 fbc5 	bl	8005be4 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <vTaskStartScheduler+0xa4>)
 800145c:	681b      	ldr	r3, [r3, #0]
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	080064cc 	.word	0x080064cc
 800146c:	08001d4d 	.word	0x08001d4d
 8001470:	20000148 	.word	0x20000148
 8001474:	20000144 	.word	0x20000144
 8001478:	20000130 	.word	0x20000130
 800147c:	20000128 	.word	0x20000128
 8001480:	20000078 	.word	0x20000078
 8001484:	00000812 	.word	0x00000812
 8001488:	080064b8 	.word	0x080064b8
 800148c:	20000000 	.word	0x20000000

08001490 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <vTaskSuspendAll+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <vTaskSuspendAll+0x14>)
 800149c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000014c 	.word	0x2000014c

080014a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <xTaskResumeAll+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <xTaskResumeAll+0x22>
 80014be:	4a6c      	ldr	r2, [pc, #432]	@ (8001670 <xTaskResumeAll+0x1c8>)
 80014c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <xTaskResumeAll+0x1cc>)
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f004 fb8d 	bl	8005be4 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80014ca:	f001 f9d1 	bl	8002870 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80014ce:	4b67      	ldr	r3, [pc, #412]	@ (800166c <xTaskResumeAll+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	4b65      	ldr	r3, [pc, #404]	@ (800166c <xTaskResumeAll+0x1c4>)
 80014d6:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014d8:	4b64      	ldr	r3, [pc, #400]	@ (800166c <xTaskResumeAll+0x1c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <xTaskResumeAll+0x3a>
 80014e0:	e0bc      	b.n	800165c <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014e2:	4b65      	ldr	r3, [pc, #404]	@ (8001678 <xTaskResumeAll+0x1d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d100      	bne.n	80014ec <xTaskResumeAll+0x44>
 80014ea:	e0b7      	b.n	800165c <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014ec:	e08e      	b.n	800160c <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014ee:	4b63      	ldr	r3, [pc, #396]	@ (800167c <xTaskResumeAll+0x1d4>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	6a12      	ldr	r2, [r2, #32]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	69d2      	ldr	r2, [r2, #28]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3318      	adds	r3, #24
 8001518:	429a      	cmp	r2, r3
 800151a:	d103      	bne.n	8001524 <xTaskResumeAll+0x7c>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2200      	movs	r2, #0
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	68d2      	ldr	r2, [r2, #12]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	6892      	ldr	r2, [r2, #8]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3304      	adds	r3, #4
 8001556:	429a      	cmp	r2, r3
 8001558:	d103      	bne.n	8001562 <xTaskResumeAll+0xba>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	0019      	movs	r1, r3
 8001576:	2030      	movs	r0, #48	@ 0x30
 8001578:	f002 f996 	bl	80038a8 <xTraceEventCreate1>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <xTaskResumeAll+0x1d8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d903      	bls.n	8001590 <xTaskResumeAll+0xe8>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800158c:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <xTaskResumeAll+0x1d8>)
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001594:	493b      	ldr	r1, [pc, #236]	@ (8001684 <xTaskResumeAll+0x1dc>)
 8001596:	0013      	movs	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	189b      	adds	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	18cb      	adds	r3, r1, r3
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	3204      	adds	r2, #4
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	1d1a      	adds	r2, r3, #4
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ca:	0013      	movs	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001684 <xTaskResumeAll+0x1dc>)
 80015d4:	189a      	adds	r2, r3, r2
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015de:	4929      	ldr	r1, [pc, #164]	@ (8001684 <xTaskResumeAll+0x1dc>)
 80015e0:	0013      	movs	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	189b      	adds	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	585b      	ldr	r3, [r3, r1]
 80015ea:	1c58      	adds	r0, r3, #1
 80015ec:	4925      	ldr	r1, [pc, #148]	@ (8001684 <xTaskResumeAll+0x1dc>)
 80015ee:	0013      	movs	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	189b      	adds	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <xTaskResumeAll+0x1e0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	429a      	cmp	r2, r3
 8001604:	d302      	bcc.n	800160c <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <xTaskResumeAll+0x1e4>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <xTaskResumeAll+0x1d4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d000      	beq.n	8001616 <xTaskResumeAll+0x16e>
 8001614:	e76b      	b.n	80014ee <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800161c:	f000 fc1a 	bl	8001e54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <xTaskResumeAll+0x1e8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <xTaskResumeAll+0x1a4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800162c:	f000 f84a 	bl	80016c4 <xTaskIncrementTick>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d002      	beq.n	800163a <xTaskResumeAll+0x192>
                            {
                                xYieldPending = pdTRUE;
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <xTaskResumeAll+0x1e4>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <xTaskResumeAll+0x1e8>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <xTaskResumeAll+0x1e4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <xTaskResumeAll+0x1b4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001654:	2301      	movs	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001658:	f001 f8fa 	bl	8002850 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800165c:	f001 f91a 	bl	8002894 <vPortExitCritical>

    return xAlreadyYielded;
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b006      	add	sp, #24
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	2000014c 	.word	0x2000014c
 8001670:	00000885 	.word	0x00000885
 8001674:	080064b8 	.word	0x080064b8
 8001678:	20000124 	.word	0x20000124
 800167c:	20000110 	.word	0x20000110
 8001680:	2000012c 	.word	0x2000012c
 8001684:	2000007c 	.word	0x2000007c
 8001688:	20000078 	.word	0x20000078
 800168c:	20000138 	.word	0x20000138
 8001690:	20000134 	.word	0x20000134

08001694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <xTaskGetTickCount+0x18>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	20000128 	.word	0x20000128

080016b0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <uxTaskGetNumberOfTasks+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	20000124 	.word	0x20000124

080016c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80016ce:	4b7d      	ldr	r3, [pc, #500]	@ (80018c4 <xTaskIncrementTick+0x200>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d003      	beq.n	80016de <xTaskIncrementTick+0x1a>
 80016d6:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <xTaskIncrementTick+0x204>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <xTaskIncrementTick+0x26>
 80016de:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <xTaskIncrementTick+0x208>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b7b      	ldr	r3, [pc, #492]	@ (80018d0 <xTaskIncrementTick+0x20c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3201      	adds	r2, #1
 80016e8:	619a      	str	r2, [r3, #24]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ea:	4b76      	ldr	r3, [pc, #472]	@ (80018c4 <xTaskIncrementTick+0x200>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d000      	beq.n	80016f4 <xTaskIncrementTick+0x30>
 80016f2:	e0dc      	b.n	80018ae <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80016f4:	4b75      	ldr	r3, [pc, #468]	@ (80018cc <xTaskIncrementTick+0x208>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016fc:	4b73      	ldr	r3, [pc, #460]	@ (80018cc <xTaskIncrementTick+0x208>)
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d11b      	bne.n	8001740 <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001708:	4b72      	ldr	r3, [pc, #456]	@ (80018d4 <xTaskIncrementTick+0x210>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <xTaskIncrementTick+0x5a>
 8001712:	4a71      	ldr	r2, [pc, #452]	@ (80018d8 <xTaskIncrementTick+0x214>)
 8001714:	4b71      	ldr	r3, [pc, #452]	@ (80018dc <xTaskIncrementTick+0x218>)
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f004 fa63 	bl	8005be4 <vAssertCalled>
 800171e:	4b6d      	ldr	r3, [pc, #436]	@ (80018d4 <xTaskIncrementTick+0x210>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <xTaskIncrementTick+0x21c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b6a      	ldr	r3, [pc, #424]	@ (80018d4 <xTaskIncrementTick+0x210>)
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <xTaskIncrementTick+0x21c>)
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4b6c      	ldr	r3, [pc, #432]	@ (80018e4 <xTaskIncrementTick+0x220>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <xTaskIncrementTick+0x220>)
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f000 fb8a 	bl	8001e54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001740:	4b69      	ldr	r3, [pc, #420]	@ (80018e8 <xTaskIncrementTick+0x224>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	429a      	cmp	r2, r3
 8001748:	d200      	bcs.n	800174c <xTaskIncrementTick+0x88>
 800174a:	e0a9      	b.n	80018a0 <xTaskIncrementTick+0x1dc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800174c:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <xTaskIncrementTick+0x210>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001756:	4b64      	ldr	r3, [pc, #400]	@ (80018e8 <xTaskIncrementTick+0x224>)
 8001758:	2201      	movs	r2, #1
 800175a:	4252      	negs	r2, r2
 800175c:	601a      	str	r2, [r3, #0]
                    break;
 800175e:	e09f      	b.n	80018a0 <xTaskIncrementTick+0x1dc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001760:	4b5c      	ldr	r3, [pc, #368]	@ (80018d4 <xTaskIncrementTick+0x210>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d203      	bcs.n	8001780 <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001778:	4b5b      	ldr	r3, [pc, #364]	@ (80018e8 <xTaskIncrementTick+0x224>)
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800177e:	e08f      	b.n	80018a0 <xTaskIncrementTick+0x1dc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	6892      	ldr	r2, [r2, #8]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3304      	adds	r3, #4
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d103      	bne.n	80017ae <xTaskIncrementTick+0xea>
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01e      	beq.n	8001804 <xTaskIncrementTick+0x140>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	6a12      	ldr	r2, [r2, #32]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	69d2      	ldr	r2, [r2, #28]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	3318      	adds	r3, #24
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d103      	bne.n	80017f4 <xTaskIncrementTick+0x130>
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	0019      	movs	r1, r3
 8001808:	2030      	movs	r0, #48	@ 0x30
 800180a:	f002 f84d 	bl	80038a8 <xTraceEventCreate1>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001812:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <xTaskIncrementTick+0x228>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d903      	bls.n	8001822 <xTaskIncrementTick+0x15e>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181e:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <xTaskIncrementTick+0x228>)
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001826:	4932      	ldr	r1, [pc, #200]	@ (80018f0 <xTaskIncrementTick+0x22c>)
 8001828:	0013      	movs	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	189b      	adds	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	18cb      	adds	r3, r1, r3
 8001832:	3304      	adds	r3, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	3204      	adds	r2, #4
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1d1a      	adds	r2, r3, #4
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800185c:	0013      	movs	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	189b      	adds	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <xTaskIncrementTick+0x22c>)
 8001866:	189a      	adds	r2, r3, r2
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001870:	491f      	ldr	r1, [pc, #124]	@ (80018f0 <xTaskIncrementTick+0x22c>)
 8001872:	0013      	movs	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	189b      	adds	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	585b      	ldr	r3, [r3, r1]
 800187c:	1c58      	adds	r0, r3, #1
 800187e:	491c      	ldr	r1, [pc, #112]	@ (80018f0 <xTaskIncrementTick+0x22c>)
 8001880:	0013      	movs	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	189b      	adds	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <xTaskIncrementTick+0x230>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	429a      	cmp	r2, r3
 8001896:	d800      	bhi.n	800189a <xTaskIncrementTick+0x1d6>
 8001898:	e758      	b.n	800174c <xTaskIncrementTick+0x88>
                        {
                            xSwitchRequired = pdTRUE;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800189e:	e755      	b.n	800174c <xTaskIncrementTick+0x88>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <xTaskIncrementTick+0x234>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	e004      	b.n	80018b8 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <xTaskIncrementTick+0x204>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <xTaskIncrementTick+0x204>)
 80018b6:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80018b8:	69fb      	ldr	r3, [r7, #28]
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b008      	add	sp, #32
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	2000014c 	.word	0x2000014c
 80018c8:	20000134 	.word	0x20000134
 80018cc:	20000128 	.word	0x20000128
 80018d0:	20003068 	.word	0x20003068
 80018d4:	20000108 	.word	0x20000108
 80018d8:	00000ab7 	.word	0x00000ab7
 80018dc:	080064b8 	.word	0x080064b8
 80018e0:	2000010c 	.word	0x2000010c
 80018e4:	2000013c 	.word	0x2000013c
 80018e8:	20000144 	.word	0x20000144
 80018ec:	2000012c 	.word	0x2000012c
 80018f0:	2000007c 	.word	0x2000007c
 80018f4:	20000078 	.word	0x20000078
 80018f8:	20000138 	.word	0x20000138

080018fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001902:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <vTaskSwitchContext+0xa8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <vTaskSwitchContext+0xac>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001910:	e044      	b.n	800199c <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <vTaskSwitchContext+0xac>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <vTaskSwitchContext+0xb0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e00b      	b.n	8001938 <vTaskSwitchContext+0x3c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <vTaskSwitchContext+0x36>
 8001926:	4a22      	ldr	r2, [pc, #136]	@ (80019b0 <vTaskSwitchContext+0xb4>)
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <vTaskSwitchContext+0xb8>)
 800192a:	0011      	movs	r1, r2
 800192c:	0018      	movs	r0, r3
 800192e:	f004 f959 	bl	8005be4 <vAssertCalled>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3b01      	subs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	491f      	ldr	r1, [pc, #124]	@ (80019b8 <vTaskSwitchContext+0xbc>)
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	0013      	movs	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	189b      	adds	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	585b      	ldr	r3, [r3, r1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ea      	beq.n	8001920 <vTaskSwitchContext+0x24>
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	0013      	movs	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	189b      	adds	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <vTaskSwitchContext+0xbc>)
 8001956:	189b      	adds	r3, r3, r2
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3308      	adds	r3, #8
 800196c:	429a      	cmp	r2, r3
 800196e:	d104      	bne.n	800197a <vTaskSwitchContext+0x7e>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <vTaskSwitchContext+0xc0>)
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <vTaskSwitchContext+0xb0>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <vTaskSwitchContext+0xc0>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <vTaskSwitchContext+0xc0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	0019      	movs	r1, r3
 8001996:	0010      	movs	r0, r2
 8001998:	f003 ff64 	bl	8005864 <xTraceTaskSwitch>
}
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000014c 	.word	0x2000014c
 80019a8:	20000138 	.word	0x20000138
 80019ac:	2000012c 	.word	0x2000012c
 80019b0:	00000bf6 	.word	0x00000bf6
 80019b4:	080064b8 	.word	0x080064b8
 80019b8:	2000007c 	.word	0x2000007c
 80019bc:	20000078 	.word	0x20000078

080019c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <vTaskPlaceOnEventList+0x1c>
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <vTaskPlaceOnEventList+0x40>)
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <vTaskPlaceOnEventList+0x44>)
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f004 f904 	bl	8005be4 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <vTaskPlaceOnEventList+0x48>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3318      	adds	r3, #24
 80019e2:	001a      	movs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe fc42 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fbc2 	bl	800217c <prvAddCurrentTaskToDelayedList>
}
 80019f8:	46c0      	nop			@ (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	00000c0e 	.word	0x00000c0e
 8001a04:	080064b8 	.word	0x080064b8
 8001a08:	20000078 	.word	0x20000078

08001a0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <vTaskPlaceOnEventListRestricted+0x1e>
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <vTaskPlaceOnEventListRestricted+0x90>)
 8001a20:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <vTaskPlaceOnEventListRestricted+0x94>)
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f004 f8dd 	bl	8005be4 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	6892      	ldr	r2, [r2, #8]
 8001a40:	621a      	str	r2, [r3, #32]
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	3218      	adds	r2, #24
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3318      	adds	r3, #24
 8001a54:	001a      	movs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <vTaskPlaceOnEventListRestricted+0x98>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <vTaskPlaceOnEventListRestricted+0x6c>
        {
            xTicksToWait = portMAX_DELAY;
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <vTaskPlaceOnEventListRestricted+0x9c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	18d3      	adds	r3, r2, r3
 8001a80:	0019      	movs	r1, r3
 8001a82:	2079      	movs	r0, #121	@ 0x79
 8001a84:	f001 ff10 	bl	80038a8 <xTraceEventCreate1>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 fb74 	bl	800217c <prvAddCurrentTaskToDelayedList>
    }
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b006      	add	sp, #24
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	00000c44 	.word	0x00000c44
 8001aa0:	080064b8 	.word	0x080064b8
 8001aa4:	20000078 	.word	0x20000078
 8001aa8:	20000128 	.word	0x20000128

08001aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <xTaskRemoveFromEventList+0x22>
 8001ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c3c <xTaskRemoveFromEventList+0x190>)
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c40 <xTaskRemoveFromEventList+0x194>)
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f004 f88b 	bl	8005be4 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	6a12      	ldr	r2, [r2, #32]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	69d2      	ldr	r2, [r2, #28]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3318      	adds	r3, #24
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d103      	bne.n	8001afc <xTaskRemoveFromEventList+0x50>
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c44 <xTaskRemoveFromEventList+0x198>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d162      	bne.n	8001bda <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	68d2      	ldr	r2, [r2, #12]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	6892      	ldr	r2, [r2, #8]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3304      	adds	r3, #4
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d103      	bne.n	8001b42 <xTaskRemoveFromEventList+0x96>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	0019      	movs	r1, r3
 8001b56:	2030      	movs	r0, #48	@ 0x30
 8001b58:	f001 fea6 	bl	80038a8 <xTraceEventCreate1>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <xTaskRemoveFromEventList+0x19c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d903      	bls.n	8001b70 <xTaskRemoveFromEventList+0xc4>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <xTaskRemoveFromEventList+0x19c>)
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	4935      	ldr	r1, [pc, #212]	@ (8001c4c <xTaskRemoveFromEventList+0x1a0>)
 8001b76:	0013      	movs	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	18cb      	adds	r3, r1, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	3204      	adds	r2, #4
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001baa:	0013      	movs	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	189b      	adds	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4a26      	ldr	r2, [pc, #152]	@ (8001c4c <xTaskRemoveFromEventList+0x1a0>)
 8001bb4:	189a      	adds	r2, r3, r2
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bbe:	4923      	ldr	r1, [pc, #140]	@ (8001c4c <xTaskRemoveFromEventList+0x1a0>)
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	585b      	ldr	r3, [r3, r1]
 8001bca:	1c58      	adds	r0, r3, #1
 8001bcc:	491f      	ldr	r1, [pc, #124]	@ (8001c4c <xTaskRemoveFromEventList+0x1a0>)
 8001bce:	0013      	movs	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	5058      	str	r0, [r3, r1]
 8001bd8:	e01b      	b.n	8001c12 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <xTaskRemoveFromEventList+0x1a4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	61da      	str	r2, [r3, #28]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	621a      	str	r2, [r3, #32]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	3218      	adds	r2, #24
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <xTaskRemoveFromEventList+0x1a4>)
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <xTaskRemoveFromEventList+0x1a4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <xTaskRemoveFromEventList+0x1a4>)
 8001c10:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <xTaskRemoveFromEventList+0x1a8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d905      	bls.n	8001c2c <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <xTaskRemoveFromEventList+0x1ac>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e001      	b.n	8001c30 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001c30:	69fb      	ldr	r3, [r7, #28]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b008      	add	sp, #32
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	00000c74 	.word	0x00000c74
 8001c40:	080064b8 	.word	0x080064b8
 8001c44:	2000014c 	.word	0x2000014c
 8001c48:	2000012c 	.word	0x2000012c
 8001c4c:	2000007c 	.word	0x2000007c
 8001c50:	20000110 	.word	0x20000110
 8001c54:	20000078 	.word	0x20000078
 8001c58:	20000138 	.word	0x20000138

08001c5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <vTaskInternalSetTimeOutState+0x20>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <vTaskInternalSetTimeOutState+0x24>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000013c 	.word	0x2000013c
 8001c80:	20000128 	.word	0x20000128

08001c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <xTaskCheckForTimeOut+0x1c>
 8001c94:	4a24      	ldr	r2, [pc, #144]	@ (8001d28 <xTaskCheckForTimeOut+0xa4>)
 8001c96:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <xTaskCheckForTimeOut+0xa8>)
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f003 ffa2 	bl	8005be4 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <xTaskCheckForTimeOut+0x30>
 8001ca6:	23cf      	movs	r3, #207	@ 0xcf
 8001ca8:	011a      	lsls	r2, r3, #4
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <xTaskCheckForTimeOut+0xa8>)
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 ff98 	bl	8005be4 <vAssertCalled>

    taskENTER_CRITICAL();
 8001cb4:	f000 fddc 	bl	8002870 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <xTaskCheckForTimeOut+0xac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <xTaskCheckForTimeOut+0xb0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d00a      	beq.n	8001cea <xTaskCheckForTimeOut+0x66>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d305      	bcc.n	8001cea <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e016      	b.n	8001d18 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d20c      	bcs.n	8001d0e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff ffaa 	bl	8001c5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e004      	b.n	8001d18 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001d18:	f000 fdbc 	bl	8002894 <vPortExitCritical>

    return xReturn;
 8001d1c:	697b      	ldr	r3, [r7, #20]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b006      	add	sp, #24
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	00000cef 	.word	0x00000cef
 8001d2c:	080064b8 	.word	0x080064b8
 8001d30:	20000128 	.word	0x20000128
 8001d34:	2000013c 	.word	0x2000013c

08001d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	@ (8001d48 <vTaskMissedYield+0x10>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000138 	.word	0x20000138

08001d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d54:	f000 f842 	bl	8001ddc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <prvIdleTask+0x1c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d9f9      	bls.n	8001d54 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001d60:	f000 fd76 	bl	8002850 <vPortYield>
        prvCheckTasksWaitingTermination();
 8001d64:	e7f6      	b.n	8001d54 <prvIdleTask+0x8>
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	2000007c 	.word	0x2000007c

08001d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	e00c      	b.n	8001d92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <prvInitialiseTaskLists+0x58>)
 8001d84:	189b      	adds	r3, r3, r2
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7fe fa4a 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d9ef      	bls.n	8001d78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <prvInitialiseTaskLists+0x5c>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe fa40 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <prvInitialiseTaskLists+0x60>)
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe fa3c 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <prvInitialiseTaskLists+0x64>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7fe fa38 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <prvInitialiseTaskLists+0x68>)
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <prvInitialiseTaskLists+0x5c>)
 8001db4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <prvInitialiseTaskLists+0x6c>)
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <prvInitialiseTaskLists+0x60>)
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	46c0      	nop			@ (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000007c 	.word	0x2000007c
 8001dc8:	200000e0 	.word	0x200000e0
 8001dcc:	200000f4 	.word	0x200000f4
 8001dd0:	20000110 	.word	0x20000110
 8001dd4:	20000108 	.word	0x20000108
 8001dd8:	2000010c 	.word	0x2000010c

08001ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8001df2:	e005      	b.n	8001e00 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	607b      	str	r3, [r7, #4]
            ulCount++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2ba5      	cmp	r3, #165	@ 0xa5
 8001e06:	d0f5      	beq.n	8001df4 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	b29b      	uxth	r3, r3
    }
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b004      	add	sp, #16
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <uxTaskGetStackHighWaterMark+0x14>
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <uxTaskGetStackHighWaterMark+0x34>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <uxTaskGetStackHighWaterMark+0x16>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffd2 	bl	8001de6 <prvTaskCheckFreeStackSpace>
 8001e42:	0003      	movs	r3, r0
 8001e44:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8001e46:	68fb      	ldr	r3, [r7, #12]
    }
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b006      	add	sp, #24
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000078 	.word	0x20000078

08001e54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <prvResetNextTaskUnblockTime+0x2c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d104      	bne.n	8001e6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <prvResetNextTaskUnblockTime+0x30>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	4252      	negs	r2, r2
 8001e68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e6a:	e005      	b.n	8001e78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <prvResetNextTaskUnblockTime+0x2c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <prvResetNextTaskUnblockTime+0x30>)
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	46c0      	nop			@ (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	20000108 	.word	0x20000108
 8001e84:	20000144 	.word	0x20000144

08001e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <xTaskGetSchedulerState+0x30>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e008      	b.n	8001eae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e9c:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <xTaskGetSchedulerState+0x34>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e001      	b.n	8001eae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001eae:	687b      	ldr	r3, [r7, #4]
    }
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000130 	.word	0x20000130
 8001ebc:	2000014c 	.word	0x2000014c

08001ec0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d100      	bne.n	8001ed8 <xTaskPriorityInherit+0x18>
 8001ed6:	e084      	b.n	8001fe2 <xTaskPriorityInherit+0x122>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001edc:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d274      	bcs.n	8001fd0 <xTaskPriorityInherit+0x110>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db06      	blt.n	8001efc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eee:	4b3f      	ldr	r3, [pc, #252]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	6959      	ldr	r1, [r3, #20]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f04:	0013      	movs	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	189b      	adds	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4a38      	ldr	r2, [pc, #224]	@ (8001ff0 <xTaskPriorityInherit+0x130>)
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d14d      	bne.n	8001fb0 <xTaskPriorityInherit+0xf0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	3304      	adds	r3, #4
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe f9e0 	bl	80002de <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	2030      	movs	r0, #48	@ 0x30
 8001f2e:	f001 fcbb 	bl	80038a8 <xTraceEventCreate1>
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <xTaskPriorityInherit+0x134>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d903      	bls.n	8001f46 <xTaskPriorityInherit+0x86>
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f42:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <xTaskPriorityInherit+0x134>)
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f4a:	4929      	ldr	r1, [pc, #164]	@ (8001ff0 <xTaskPriorityInherit+0x130>)
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	189b      	adds	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18cb      	adds	r3, r1, r3
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	3204      	adds	r2, #4
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f80:	0013      	movs	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <xTaskPriorityInherit+0x130>)
 8001f8a:	189a      	adds	r2, r3, r2
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	615a      	str	r2, [r3, #20]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f94:	4916      	ldr	r1, [pc, #88]	@ (8001ff0 <xTaskPriorityInherit+0x130>)
 8001f96:	0013      	movs	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	189b      	adds	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	585b      	ldr	r3, [r3, r1]
 8001fa0:	1c58      	adds	r0, r3, #1
 8001fa2:	4913      	ldr	r1, [pc, #76]	@ (8001ff0 <xTaskPriorityInherit+0x130>)
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	189b      	adds	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	5058      	str	r0, [r3, r1]
 8001fae:	e004      	b.n	8001fba <xTaskPriorityInherit+0xfa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001fba:	6939      	ldr	r1, [r7, #16]
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	2005      	movs	r0, #5
 8001fc6:	f001 fce7 	bl	8003998 <xTraceEventCreate2>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e008      	b.n	8001fe2 <xTaskPriorityInherit+0x122>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <xTaskPriorityInherit+0x12c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d201      	bcs.n	8001fe2 <xTaskPriorityInherit+0x122>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001fe2:	697b      	ldr	r3, [r7, #20]
    }
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b006      	add	sp, #24
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000078 	.word	0x20000078
 8001ff0:	2000007c 	.word	0x2000007c
 8001ff4:	2000012c 	.word	0x2000012c

08001ff8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002006:	2301      	movs	r3, #1
 8002008:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d100      	bne.n	8002012 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8002010:	e092      	b.n	8002138 <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 800201a:	4a49      	ldr	r2, [pc, #292]	@ (8002140 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800201c:	4b49      	ldr	r3, [pc, #292]	@ (8002144 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f003 fddf 	bl	8005be4 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d902      	bls.n	8002036 <vTaskPriorityDisinheritAfterTimeout+0x3e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	e002      	b.n	800203c <vTaskPriorityDisinheritAfterTimeout+0x44>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	429a      	cmp	r2, r3
 8002044:	d100      	bne.n	8002048 <vTaskPriorityDisinheritAfterTimeout+0x50>
 8002046:	e077      	b.n	8002138 <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	429a      	cmp	r2, r3
 8002050:	d172      	bne.n	8002138 <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	429a      	cmp	r2, r3
 800205a:	d105      	bne.n	8002068 <vTaskPriorityDisinheritAfterTimeout+0x70>
 800205c:	4a3b      	ldr	r2, [pc, #236]	@ (800214c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 800205e:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f003 fdbe 	bl	8005be4 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	0019      	movs	r1, r3
 800206e:	2006      	movs	r0, #6
 8002070:	f001 fc92 	bl	8003998 <xTraceEventCreate2>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db04      	blt.n	8002092 <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2205      	movs	r2, #5
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	0013      	movs	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	189b      	adds	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002150 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80020a2:	189b      	adds	r3, r3, r2
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d147      	bne.n	8002138 <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	3304      	adds	r3, #4
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe f916 	bl	80002de <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	0019      	movs	r1, r3
 80020b6:	2030      	movs	r0, #48	@ 0x30
 80020b8:	f001 fbf6 	bl	80038a8 <xTraceEventCreate1>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c0:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d903      	bls.n	80020d0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d4:	491e      	ldr	r1, [pc, #120]	@ (8002150 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80020d6:	0013      	movs	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	189b      	adds	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	18cb      	adds	r3, r1, r3
 80020e0:	3304      	adds	r3, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	3204      	adds	r2, #4
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1d1a      	adds	r2, r3, #4
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210a:	0013      	movs	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	189b      	adds	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002114:	189a      	adds	r2, r3, r2
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800211e:	490c      	ldr	r1, [pc, #48]	@ (8002150 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8002120:	0013      	movs	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	189b      	adds	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	585b      	ldr	r3, [r3, r1]
 800212a:	1c58      	adds	r0, r3, #1
 800212c:	4908      	ldr	r1, [pc, #32]	@ (8002150 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800212e:	0013      	movs	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	189b      	adds	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b008      	add	sp, #32
 800213e:	bd80      	pop	{r7, pc}
 8002140:	00001098 	.word	0x00001098
 8002144:	080064b8 	.word	0x080064b8
 8002148:	20000078 	.word	0x20000078
 800214c:	000010b3 	.word	0x000010b3
 8002150:	2000007c 	.word	0x2000007c
 8002154:	2000012c 	.word	0x2000012c

08002158 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <pvTaskIncrementMutexHeldCount+0x20>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <pvTaskIncrementMutexHeldCount+0x20>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800216a:	3201      	adds	r2, #1
 800216c:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800216e:	4b02      	ldr	r3, [pc, #8]	@ (8002178 <pvTaskIncrementMutexHeldCount+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
    }
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000078 	.word	0x20000078

0800217c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <prvAddCurrentTaskToDelayedList+0x74>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0x78>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3304      	adds	r3, #4
 8002192:	0018      	movs	r0, r3
 8002194:	f7fe f8a3 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d209      	bcs.n	80021c4 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3304      	adds	r3, #4
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f7fe f858 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80021c2:	e010      	b.n	80021e6 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c4:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <prvAddCurrentTaskToDelayedList+0x80>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3304      	adds	r3, #4
 80021ce:	0019      	movs	r1, r3
 80021d0:	0010      	movs	r0, r2
 80021d2:	f7fe f84e 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <prvAddCurrentTaskToDelayedList+0x84>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d202      	bcs.n	80021e6 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <prvAddCurrentTaskToDelayedList+0x84>)
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b004      	add	sp, #16
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	20000128 	.word	0x20000128
 80021f4:	20000078 	.word	0x20000078
 80021f8:	2000010c 	.word	0x2000010c
 80021fc:	20000108 	.word	0x20000108
 8002200:	20000144 	.word	0x20000144

08002204 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800220e:	f000 fa53 	bl	80026b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <xTimerCreateTimerTask+0x50>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800221a:	490f      	ldr	r1, [pc, #60]	@ (8002258 <xTimerCreateTimerTask+0x54>)
 800221c:	480f      	ldr	r0, [pc, #60]	@ (800225c <xTimerCreateTimerTask+0x58>)
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <xTimerCreateTimerTask+0x5c>)
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2303      	movs	r3, #3
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	f7fe ff26 	bl	800107a <xTaskCreate>
 800222e:	0003      	movs	r3, r0
 8002230:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <xTimerCreateTimerTask+0x44>
 8002238:	231a      	movs	r3, #26
 800223a:	33ff      	adds	r3, #255	@ 0xff
 800223c:	001a      	movs	r2, r3
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <xTimerCreateTimerTask+0x60>)
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f003 fcce 	bl	8005be4 <vAssertCalled>
        return xReturn;
 8002248:	687b      	ldr	r3, [r7, #4]
    }
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	20000180 	.word	0x20000180
 8002258:	080064d4 	.word	0x080064d4
 800225c:	08002329 	.word	0x08002329
 8002260:	20000184 	.word	0x20000184
 8002264:	080064dc 	.word	0x080064dc

08002268 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002274:	e010      	b.n	8002298 <prvReloadTimer+0x30>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	001a      	movs	r2, r3
 8002288:	20d2      	movs	r0, #210	@ 0xd2
 800228a:	f001 fb85 	bl	8003998 <xTraceEventCreate2>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	0010      	movs	r0, r2
 8002296:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	18d1      	adds	r1, r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8df 	bl	8002468 <prvInsertTimerInActiveList>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d1e3      	bne.n	8002276 <prvReloadTimer+0xe>
        }
    }
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <prvProcessExpiredTimer+0x6c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3304      	adds	r3, #4
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fe f804 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2228      	movs	r2, #40	@ 0x28
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	001a      	movs	r2, r3
 80022de:	2304      	movs	r3, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d006      	beq.n	80022f2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ffbc 	bl	8002268 <prvReloadTimer>
 80022f0:	e008      	b.n	8002304 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2228      	movs	r2, #40	@ 0x28
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4393      	bics	r3, r2
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2228      	movs	r2, #40	@ 0x28
 8002302:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	001a      	movs	r2, r3
 800230c:	20d2      	movs	r0, #210	@ 0xd2
 800230e:	f001 fb43 	bl	8003998 <xTraceEventCreate2>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	0010      	movs	r0, r2
 800231a:	4798      	blx	r3
    }
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000178 	.word	0x20000178

08002328 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002330:	2308      	movs	r3, #8
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f855 	bl	80023e4 <prvGetNextExpireTime>
 800233a:	0003      	movs	r3, r0
 800233c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f805 	bl	8002354 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800234a:	f000 f8cf 	bl	80024ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	e7ee      	b.n	8002330 <prvTimerTask+0x8>
	...

08002354 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800235e:	f7ff f897 	bl	8001490 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002362:	2308      	movs	r3, #8
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f85e 	bl	8002428 <prvSampleTimeNow>
 800236c:	0003      	movs	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d12b      	bne.n	80023ce <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <prvProcessTimerOrBlockTask+0x42>
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d808      	bhi.n	8002396 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002384:	f7ff f890 	bl	80014a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0011      	movs	r1, r2
 800238e:	0018      	movs	r0, r3
 8002390:	f7ff ff92 	bl	80022b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002394:	e01d      	b.n	80023d2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800239c:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <prvProcessTimerOrBlockTask+0x88>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <prvProcessTimerOrBlockTask+0x56>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <prvProcessTimerOrBlockTask+0x58>
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <prvProcessTimerOrBlockTask+0x8c>)
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	0019      	movs	r1, r3
 80023bc:	f7fe fe2a 	bl	8001014 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023c0:	f7ff f872 	bl	80014a8 <xTaskResumeAll>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d104      	bne.n	80023d2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80023c8:	f000 fa42 	bl	8002850 <vPortYield>
    }
 80023cc:	e001      	b.n	80023d2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80023ce:	f7ff f86b 	bl	80014a8 <xTaskResumeAll>
    }
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	2000017c 	.word	0x2000017c
 80023e0:	20000180 	.word	0x20000180

080023e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <prvGetNextExpireTime+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <prvGetNextExpireTime+0x16>
 80023f6:	2201      	movs	r2, #1
 80023f8:	e000      	b.n	80023fc <prvGetNextExpireTime+0x18>
 80023fa:	2200      	movs	r2, #0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <prvGetNextExpireTime+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e001      	b.n	8002418 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002418:	68fb      	ldr	r3, [r7, #12]
    }
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b004      	add	sp, #16
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	20000178 	.word	0x20000178

08002428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002430:	f7ff f930 	bl	8001694 <xTaskGetTickCount>
 8002434:	0003      	movs	r3, r0
 8002436:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <prvSampleTimeNow+0x3c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d205      	bcs.n	800244e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002442:	f000 f911 	bl	8002668 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e002      	b.n	8002454 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <prvSampleTimeNow+0x3c>)
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800245a:	68fb      	ldr	r3, [r7, #12]
    }
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000188 	.word	0x20000188

08002468 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d812      	bhi.n	80024b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e01b      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <prvInsertTimerInActiveList+0x7c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	0019      	movs	r1, r3
 80024ac:	0010      	movs	r0, r2
 80024ae:	f7fd fee0 	bl	8000272 <vListInsert>
 80024b2:	e012      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d206      	bcs.n	80024ca <prvInsertTimerInActiveList+0x62>
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e007      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <prvInsertTimerInActiveList+0x80>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	0019      	movs	r1, r3
 80024d4:	0010      	movs	r0, r2
 80024d6:	f7fd fecc 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024da:	697b      	ldr	r3, [r7, #20]
    }
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b006      	add	sp, #24
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2000017c 	.word	0x2000017c
 80024e8:	20000178 	.word	0x20000178

080024ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024f2:	e0a2      	b.n	800263a <prvProcessReceivedCommands+0x14e>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da00      	bge.n	80024fe <prvProcessReceivedCommands+0x12>
 80024fc:	e09d      	b.n	800263a <prvProcessReceivedCommands+0x14e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3304      	adds	r3, #4
 8002510:	0018      	movs	r0, r3
 8002512:	f7fd fee4 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002516:	003b      	movs	r3, r7
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ff85 	bl	8002428 <prvSampleTimeNow>
 800251e:	0003      	movs	r3, r0
 8002520:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b09      	cmp	r3, #9
 8002528:	d900      	bls.n	800252c <prvProcessReceivedCommands+0x40>
 800252a:	e083      	b.n	8002634 <prvProcessReceivedCommands+0x148>
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	4b4a      	ldr	r3, [pc, #296]	@ (8002658 <prvProcessReceivedCommands+0x16c>)
 8002530:	18d3      	adds	r3, r2, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2228      	movs	r2, #40	@ 0x28
 800253a:	5c9b      	ldrb	r3, [r3, r2]
 800253c:	2201      	movs	r2, #1
 800253e:	4313      	orrs	r3, r2
 8002540:	b2d9      	uxtb	r1, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2228      	movs	r2, #40	@ 0x28
 8002546:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	18d1      	adds	r1, r2, r3
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f7ff ff85 	bl	8002468 <prvInsertTimerInActiveList>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d06a      	beq.n	8002638 <prvProcessReceivedCommands+0x14c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2228      	movs	r2, #40	@ 0x28
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	001a      	movs	r2, r3
 800256a:	2304      	movs	r3, #4
 800256c:	4013      	ands	r3, r2
 800256e:	d00a      	beq.n	8002586 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	18d1      	adds	r1, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff fe72 	bl	8002268 <prvReloadTimer>
 8002584:	e008      	b.n	8002598 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2228      	movs	r2, #40	@ 0x28
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	2201      	movs	r2, #1
 800258e:	4393      	bics	r3, r2
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2228      	movs	r2, #40	@ 0x28
 8002596:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 8002598:	6979      	ldr	r1, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	001a      	movs	r2, r3
 80025a0:	20d2      	movs	r0, #210	@ 0xd2
 80025a2:	f001 f9f9 	bl	8003998 <xTraceEventCreate2>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025b0:	e042      	b.n	8002638 <prvProcessReceivedCommands+0x14c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2228      	movs	r2, #40	@ 0x28
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4393      	bics	r3, r2
 80025bc:	b2d9      	uxtb	r1, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2228      	movs	r2, #40	@ 0x28
 80025c2:	5499      	strb	r1, [r3, r2]
                        break;
 80025c4:	e039      	b.n	800263a <prvProcessReceivedCommands+0x14e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2228      	movs	r2, #40	@ 0x28
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4313      	orrs	r3, r2
 80025d0:	b2d9      	uxtb	r1, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2228      	movs	r2, #40	@ 0x28
 80025d6:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <prvProcessReceivedCommands+0x108>
 80025e8:	4a1c      	ldr	r2, [pc, #112]	@ (800265c <prvProcessReceivedCommands+0x170>)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <prvProcessReceivedCommands+0x174>)
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f003 faf8 	bl	8005be4 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	18d1      	adds	r1, r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7ff ff31 	bl	8002468 <prvInsertTimerInActiveList>
                        break;
 8002606:	e018      	b.n	800263a <prvProcessReceivedCommands+0x14e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2228      	movs	r2, #40	@ 0x28
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	001a      	movs	r2, r3
 8002610:	2302      	movs	r3, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d104      	bne.n	8002620 <prvProcessReceivedCommands+0x134>
                            {
                                vPortFree( pxTimer );
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fa31 	bl	8002a80 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800261e:	e00c      	b.n	800263a <prvProcessReceivedCommands+0x14e>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2228      	movs	r2, #40	@ 0x28
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	2201      	movs	r2, #1
 8002628:	4393      	bics	r3, r2
 800262a:	b2d9      	uxtb	r1, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2228      	movs	r2, #40	@ 0x28
 8002630:	5499      	strb	r1, [r3, r2]
                        break;
 8002632:	e002      	b.n	800263a <prvProcessReceivedCommands+0x14e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	e000      	b.n	800263a <prvProcessReceivedCommands+0x14e>
                        break;
 8002638:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <prvProcessReceivedCommands+0x178>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1d39      	adds	r1, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f7fe f8cc 	bl	80007e0 <xQueueReceive>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d000      	beq.n	800264e <prvProcessReceivedCommands+0x162>
 800264c:	e752      	b.n	80024f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b006      	add	sp, #24
 8002656:	bd80      	pop	{r7, pc}
 8002658:	08006854 	.word	0x08006854
 800265c:	0000035e 	.word	0x0000035e
 8002660:	080064dc 	.word	0x080064dc
 8002664:	20000180 	.word	0x20000180

08002668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800266e:	e00b      	b.n	8002688 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800267a:	2301      	movs	r3, #1
 800267c:	425a      	negs	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fe18 	bl	80022b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <prvSwitchTimerLists+0x4c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <prvSwitchTimerLists+0x48>)
 800269e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <prvSwitchTimerLists+0x4c>)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
    }
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	20000178 	.word	0x20000178
 80026b4:	2000017c 	.word	0x2000017c

080026b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026bc:	f000 f8d8 	bl	8002870 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <prvCheckForValidListAndQueue+0x5c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d120      	bne.n	800270a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80026c8:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <prvCheckForValidListAndQueue+0x60>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7fd fda8 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <prvCheckForValidListAndQueue+0x64>)
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fd fda4 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <prvCheckForValidListAndQueue+0x68>)
 80026da:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <prvCheckForValidListAndQueue+0x60>)
 80026dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <prvCheckForValidListAndQueue+0x6c>)
 80026e0:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <prvCheckForValidListAndQueue+0x64>)
 80026e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80026e4:	2200      	movs	r2, #0
 80026e6:	210c      	movs	r1, #12
 80026e8:	200a      	movs	r0, #10
 80026ea:	f7fd feb7 	bl	800045c <xQueueGenericCreate>
 80026ee:	0002      	movs	r2, r0
 80026f0:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <prvCheckForValidListAndQueue+0x5c>)
 80026f2:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <prvCheckForValidListAndQueue+0x5c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <prvCheckForValidListAndQueue+0x5c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <prvCheckForValidListAndQueue+0x70>)
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f7fe fc33 	bl	8000f70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800270a:	f000 f8c3 	bl	8002894 <vPortExitCritical>
    }
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000180 	.word	0x20000180
 8002718:	20000150 	.word	0x20000150
 800271c:	20000164 	.word	0x20000164
 8002720:	20000178 	.word	0x20000178
 8002724:	2000017c 	.word	0x2000017c
 8002728:	080064f4 	.word	0x080064f4

0800272c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b04      	subs	r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	0452      	lsls	r2, r2, #17
 8002744:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3b04      	subs	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3b04      	subs	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002758:	4a08      	ldr	r2, [pc, #32]	@ (800277c <pxPortInitialiseStack+0x50>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b14      	subs	r3, #20
 8002762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b20      	subs	r3, #32
 800276e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002770:	68fb      	ldr	r3, [r7, #12]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b004      	add	sp, #16
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	08002781 	.word	0x08002781

08002780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <prvTaskExitError+0x30>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	d004      	beq.n	800279c <prvTaskExitError+0x1c>
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <prvTaskExitError+0x34>)
 8002794:	21b2      	movs	r1, #178	@ 0xb2
 8002796:	0018      	movs	r0, r3
 8002798:	f003 fa24 	bl	8005be4 <vAssertCalled>
    portDISABLE_INTERRUPTS();
 800279c:	b672      	cpsid	i

    while( ulDummy == 0 )
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0fc      	beq.n	80027a0 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000004 	.word	0x20000004
 80027b4:	080064fc 	.word	0x080064fc

080027b8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80027d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002800 <pxCurrentTCBConst2>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	3020      	adds	r0, #32
 80027d8:	f380 8809 	msr	PSP, r0
 80027dc:	2002      	movs	r0, #2
 80027de:	f380 8814 	msr	CONTROL, r0
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80027e8:	46ae      	mov	lr, r5
 80027ea:	bc08      	pop	{r3}
 80027ec:	bc04      	pop	{r2}
 80027ee:	b662      	cpsie	i
 80027f0:	4718      	bx	r3
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	46c0      	nop			@ (mov r8, r8)
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46c0      	nop			@ (mov r8, r8)

08002800 <pxCurrentTCBConst2>:
 8002800:	20000078 	.word	0x20000078
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46c0      	nop			@ (mov r8, r8)

08002808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <xPortStartScheduler+0x40>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <xPortStartScheduler+0x40>)
 8002812:	21ff      	movs	r1, #255	@ 0xff
 8002814:	0409      	lsls	r1, r1, #16
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <xPortStartScheduler+0x40>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <xPortStartScheduler+0x40>)
 8002820:	21ff      	movs	r1, #255	@ 0xff
 8002822:	0609      	lsls	r1, r1, #24
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002828:	f000 f8a0 	bl	800296c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800282c:	4b07      	ldr	r3, [pc, #28]	@ (800284c <xPortStartScheduler+0x44>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002832:	f7ff ffcd 	bl	80027d0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002836:	f7ff f861 	bl	80018fc <vTaskSwitchContext>
    prvTaskExitError();
 800283a:	f7ff ffa1 	bl	8002780 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	e000ed20 	.word	0xe000ed20
 800284c:	20000004 	.word	0x20000004

08002850 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <vPortYield+0x1c>)
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	0552      	lsls	r2, r2, #21
 800285a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800285c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002860:	f3bf 8f6f 	isb	sy
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002874:	b672      	cpsid	i
    uxCriticalNesting++;
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <vPortEnterCritical+0x20>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <vPortEnterCritical+0x20>)
 800287e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002880:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002884:	f3bf 8f6f 	isb	sy
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	20000004 	.word	0x20000004

08002894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <vPortExitCritical+0x38>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <vPortExitCritical+0x1c>
 80028a0:	2326      	movs	r3, #38	@ 0x26
 80028a2:	33ff      	adds	r3, #255	@ 0xff
 80028a4:	001a      	movs	r2, r3
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <vPortExitCritical+0x3c>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f003 f99a 	bl	8005be4 <vAssertCalled>
    uxCriticalNesting--;
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <vPortExitCritical+0x38>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <vPortExitCritical+0x38>)
 80028b8:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <vPortExitCritical+0x38>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d100      	bne.n	80028c4 <vPortExitCritical+0x30>
    {
        portENABLE_INTERRUPTS();
 80028c2:	b662      	cpsie	i
    }
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000004 	.word	0x20000004
 80028d0:	080064fc 	.word	0x080064fc

080028d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80028d4:	f3ef 8010 	mrs	r0, PRIMASK
 80028d8:	b672      	cpsid	i
 80028da:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	0018      	movs	r0, r3

080028e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80028e0:	f380 8810 	msr	PRIMASK, r0
 80028e4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80028e6:	46c0      	nop			@ (mov r8, r8)
	...

080028f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80028f0:	f3ef 8009 	mrs	r0, PSP
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <pxCurrentTCBConst>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	3820      	subs	r0, #32
 80028fa:	6010      	str	r0, [r2, #0]
 80028fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80028fe:	4644      	mov	r4, r8
 8002900:	464d      	mov	r5, r9
 8002902:	4656      	mov	r6, sl
 8002904:	465f      	mov	r7, fp
 8002906:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002908:	b508      	push	{r3, lr}
 800290a:	b672      	cpsid	i
 800290c:	f7fe fff6 	bl	80018fc <vTaskSwitchContext>
 8002910:	b662      	cpsie	i
 8002912:	bc0c      	pop	{r2, r3}
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	6808      	ldr	r0, [r1, #0]
 8002918:	3010      	adds	r0, #16
 800291a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800291c:	46a0      	mov	r8, r4
 800291e:	46a9      	mov	r9, r5
 8002920:	46b2      	mov	sl, r6
 8002922:	46bb      	mov	fp, r7
 8002924:	f380 8809 	msr	PSP, r0
 8002928:	3820      	subs	r0, #32
 800292a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800292c:	4718      	bx	r3
 800292e:	46c0      	nop			@ (mov r8, r8)

08002930 <pxCurrentTCBConst>:
 8002930:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46c0      	nop			@ (mov r8, r8)

08002938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800293e:	f7ff ffc9 	bl	80028d4 <ulSetInterruptMaskFromISR>
 8002942:	0003      	movs	r3, r0
 8002944:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002946:	f7fe febd 	bl	80016c4 <xTaskIncrementTick>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d003      	beq.n	8002956 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <SysTick_Handler+0x30>)
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	0552      	lsls	r2, r2, #21
 8002954:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff ffc1 	bl	80028e0 <vClearInterruptMaskFromISR>
}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <vPortSetupTimerInterrupt+0x34>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <vPortSetupTimerInterrupt+0x38>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <vPortSetupTimerInterrupt+0x3c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2164      	movs	r1, #100	@ 0x64
 8002982:	0018      	movs	r0, r3
 8002984:	f7fd fbc0 	bl	8000108 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	001a      	movs	r2, r3
 800298c:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <vPortSetupTimerInterrupt+0x40>)
 800298e:	3a01      	subs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002992:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <vPortSetupTimerInterrupt+0x34>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	e000e010 	.word	0xe000e010
 80029a4:	e000e018 	.word	0xe000e018
 80029a8:	20000008 	.word	0x20000008
 80029ac:	e000e014 	.word	0xe000e014

080029b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2207      	movs	r2, #7
 80029c8:	4393      	bics	r3, r2
 80029ca:	3308      	adds	r3, #8
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d205      	bcs.n	80029de <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2207      	movs	r2, #7
 80029d6:	4393      	bics	r3, r2
 80029d8:	3308      	adds	r3, #8
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	e001      	b.n	80029e2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80029e2:	f7fe fd55 	bl	8001490 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <pvPortMalloc+0xb8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <pvPortMalloc+0xbc>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	4393      	bics	r3, r2
 80029f4:	001a      	movs	r2, r3
 80029f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <pvPortMalloc+0xb8>)
 80029f8:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01a      	beq.n	8002a36 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002a08:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <pvPortMalloc+0xc4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d813      	bhi.n	8002a36 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	18d2      	adds	r2, r2, r3
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d90b      	bls.n	8002a36 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <pvPortMalloc+0xb8>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	18d3      	adds	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	18d2      	adds	r2, r2, r3
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <pvPortMalloc+0xc0>)
 8002a34:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <pvPortMalloc+0xc8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <pvPortMalloc+0xa8>
 8002a40:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <pvPortMalloc+0xcc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <pvPortMalloc+0xa8>
 8002a4a:	f001 febf 	bl	80047cc <xTraceKernelPortGetSystemHeapHandle>
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0019      	movs	r1, r3
 8002a54:	f001 fdc5 	bl	80045e2 <xTraceHeapAlloc>
    }
    ( void ) xTaskResumeAll();
 8002a58:	f7fe fd26 	bl	80014a8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	20001d90 	.word	0x20001d90
 8002a6c:	20000193 	.word	0x20000193
 8002a70:	20001d8c 	.word	0x20001d8c
 8002a74:	00001bf7 	.word	0x00001bf7
 8002a78:	20003060 	.word	0x20003060
 8002a7c:	20003058 	.word	0x20003058

08002a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <vPortFree+0x18>
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <vPortFree+0x20>)
 8002a90:	218a      	movs	r1, #138	@ 0x8a
 8002a92:	0018      	movs	r0, r3
 8002a94:	f003 f8a6 	bl	8005be4 <vAssertCalled>
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	08006524 	.word	0x08006524

08002aa4 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <xPortGetFreeHeapSize+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <xPortGetFreeHeapSize+0x18>)
 8002aae:	1ad3      	subs	r3, r2, r3
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	20001d8c 	.word	0x20001d8c
 8002abc:	00001bf8 	.word	0x00001bf8

08002ac0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002ac6:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <_DoInit+0x9c>)
 8002ac8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	22a8      	movs	r2, #168	@ 0xa8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f003 fca3 	bl	800641c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b60 <_DoInit+0xa0>)
 8002ae6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <_DoInit+0xa4>)
 8002aec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <_DoInit+0xa0>)
 8002b0c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <_DoInit+0xa8>)
 8002b12:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2210      	movs	r2, #16
 8002b18:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	e00c      	b.n	8002b4c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	220f      	movs	r2, #15
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <_DoInit+0xac>)
 8002b3a:	5cd1      	ldrb	r1, [r2, r3]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	18d3      	adds	r3, r2, r3
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d9ef      	bls.n	8002b32 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20001d94 	.word	0x20001d94
 8002b60:	0800654c 	.word	0x0800654c
 8002b64:	20001e3c 	.word	0x20001e3c
 8002b68:	2000223c 	.word	0x2000223c
 8002b6c:	0800687c 	.word	0x0800687c

08002b70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d905      	bls.n	8002ba0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9e:	e007      	b.n	8002bb0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1acb      	subs	r3, r1, r3
 8002baa:	18d3      	adds	r3, r2, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d900      	bls.n	8002bc0 <_WriteBlocking+0x50>
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d900      	bls.n	8002bcc <_WriteBlocking+0x5c>
 8002bca:	0013      	movs	r3, r2
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	18d3      	adds	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f003 fc48 	bl	8006474 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	18d3      	adds	r3, r2, r3
 8002bf2:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	18d3      	adds	r3, r2, r3
 8002c02:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d101      	bne.n	8002c12 <_WriteBlocking+0xa2>
      WrOff = 0u;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b3      	bne.n	8002b86 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b00a      	add	sp, #40	@ 0x28
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d910      	bls.n	8002c6e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	18d3      	adds	r3, r2, r3
 8002c54:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f003 fc09 	bl	8006474 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002c6c:	e01e      	b.n	8002cac <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f003 fbf6 	bl	8006474 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	18d1      	adds	r1, r2, r3
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f003 fbe7 	bl	8006474 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	60da      	str	r2, [r3, #12]
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b008      	add	sp, #32
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d808      	bhi.n	8002ce2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad2      	subs	r2, r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	18d3      	adds	r3, r2, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e004      	b.n	8002cec <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002cec:	697b      	ldr	r3, [r7, #20]
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b006      	add	sp, #24
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002d04:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <SEGGER_RTT_ReadNoLock+0x110>)
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b53      	cmp	r3, #83	@ 0x53
 8002d10:	d001      	beq.n	8002d16 <SEGGER_RTT_ReadNoLock+0x1e>
 8002d12:	f7ff fed5 	bl	8002ac0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	0013      	movs	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	3360      	adds	r3, #96	@ 0x60
 8002d22:	001a      	movs	r2, r3
 8002d24:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <SEGGER_RTT_ReadNoLock+0x110>)
 8002d26:	18d3      	adds	r3, r2, r3
 8002d28:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d92c      	bls.n	8002da0 <SEGGER_RTT_ReadNoLock+0xa8>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d900      	bls.n	8002d5a <SEGGER_RTT_ReadNoLock+0x62>
 8002d58:	0013      	movs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d62:	18d3      	adds	r3, r2, r3
 8002d64:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	6939      	ldr	r1, [r7, #16]
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f003 fb81 	bl	8006474 <memcpy>
    NumBytesRead += NumBytesRem;
 8002d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	18d3      	adds	r3, r2, r3
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d101      	bne.n	8002da0 <SEGGER_RTT_ReadNoLock+0xa8>
      RdOff = 0u;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d900      	bls.n	8002db2 <SEGGER_RTT_ReadNoLock+0xba>
 8002db0:	0013      	movs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01a      	beq.n	8002df0 <SEGGER_RTT_ReadNoLock+0xf8>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6939      	ldr	r1, [r7, #16]
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f003 fb52 	bl	8006474 <memcpy>
    NumBytesRead += NumBytesRem;
 8002dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	18d3      	adds	r3, r2, r3
 8002dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <SEGGER_RTT_ReadNoLock+0x104>
    pRing->RdOff = RdOff;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dfa:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b00c      	add	sp, #48	@ 0x30
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	20001d94 	.word	0x20001d94

08002e0c <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;

  SEGGER_RTT_LOCK();
 8002e18:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	f381 8810 	msr	PRIMASK, r1
 8002e22:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff ff64 	bl	8002cf8 <SEGGER_RTT_ReadNoLock>
 8002e30:	0003      	movs	r3, r0
 8002e32:	613b      	str	r3, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8810 	msr	PRIMASK, r3
  //
  return NumBytesRead;
 8002e3a:	693b      	ldr	r3, [r7, #16]
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b006      	add	sp, #24
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	0013      	movs	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4a23      	ldr	r2, [pc, #140]	@ (8002ef0 <SEGGER_RTT_WriteNoLock+0xac>)
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d02e      	beq.n	8002ecc <SEGGER_RTT_WriteNoLock+0x88>
 8002e6e:	d836      	bhi.n	8002ede <SEGGER_RTT_WriteNoLock+0x9a>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <SEGGER_RTT_WriteNoLock+0x36>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d016      	beq.n	8002ea6 <SEGGER_RTT_WriteNoLock+0x62>
 8002e78:	e031      	b.n	8002ede <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7ff ff19 	bl	8002cb4 <_GetAvailWriteSpace>
 8002e82:	0003      	movs	r3, r0
 8002e84:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d202      	bcs.n	8002e94 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002e92:	e027      	b.n	8002ee4 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69b9      	ldr	r1, [r7, #24]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff fec2 	bl	8002c28 <_WriteNoCheck>
    break;
 8002ea4:	e01e      	b.n	8002ee4 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7ff ff03 	bl	8002cb4 <_GetAvailWriteSpace>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d900      	bls.n	8002ebc <SEGGER_RTT_WriteNoLock+0x78>
 8002eba:	0013      	movs	r3, r2
 8002ebc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff feaf 	bl	8002c28 <_WriteNoCheck>
    break;
 8002eca:	e00b      	b.n	8002ee4 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fe4c 	bl	8002b70 <_WriteBlocking>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61fb      	str	r3, [r7, #28]
    break;
 8002edc:	e002      	b.n	8002ee4 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
    break;
 8002ee2:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b008      	add	sp, #32
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	20001d94 	.word	0x20001d94

08002ef4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <SEGGER_RTT_Write+0x4c>)
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b53      	cmp	r3, #83	@ 0x53
 8002f0c:	d001      	beq.n	8002f12 <SEGGER_RTT_Write+0x1e>
 8002f0e:	f7ff fdd7 	bl	8002ac0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002f12:	f3ef 8310 	mrs	r3, PRIMASK
 8002f16:	2101      	movs	r1, #1
 8002f18:	f381 8810 	msr	PRIMASK, r1
 8002f1c:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ff8d 	bl	8002e44 <SEGGER_RTT_WriteNoLock>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8002f34:	697b      	ldr	r3, [r7, #20]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b008      	add	sp, #32
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	20001d94 	.word	0x20001d94

08002f44 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b53      	cmp	r3, #83	@ 0x53
 8002f5e:	d001      	beq.n	8002f64 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8002f60:	f7ff fdae 	bl	8002ac0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8002f66:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d829      	bhi.n	8002fc2 <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8002f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f72:	2101      	movs	r1, #1
 8002f74:	f381 8810 	msr	PRIMASK, r1
 8002f78:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	0013      	movs	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	18d3      	adds	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb4:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc0:	e002      	b.n	8002fc8 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b00a      	add	sp, #40	@ 0x28
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	20001d94 	.word	0x20001d94

08002fd8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b53      	cmp	r3, #83	@ 0x53
 8002ff2:	d001      	beq.n	8002ff8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002ff4:	f7ff fd64 	bl	8002ac0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8002ffa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d829      	bhi.n	8003056 <SEGGER_RTT_ConfigDownBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8003002:	f3ef 8310 	mrs	r3, PRIMASK
 8003006:	2101      	movs	r1, #1
 8003008:	f381 8810 	msr	PRIMASK, r1
 800300c:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0013      	movs	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	189b      	adds	r3, r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	3360      	adds	r3, #96	@ 0x60
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	18d3      	adds	r3, r2, r3
 800301e:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <SEGGER_RTT_ConfigDownBuffer+0x6c>
      pDown->sName        = sName;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003048:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
 8003054:	e002      	b.n	800305c <SEGGER_RTT_ConfigDownBuffer+0x84>
  } else {
    r = -1;
 8003056:	2301      	movs	r3, #1
 8003058:	425b      	negs	r3, r3
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b00a      	add	sp, #40	@ 0x28
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	20001d94 	.word	0x20001d94

0800306c <xTraceStreamPortInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceStreamPortBuffer_t* pxStreamPortRTT TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortRTT_t);

	if (pxBuffer == 0)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 800307a:	2301      	movs	r3, #1
 800307c:	e003      	b.n	8003086 <xTraceStreamPortInitialize+0x1a>
	}

	pxStreamPortRTT = (TraceStreamPortBuffer_t*)pxBuffer;
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <xTraceStreamPortInitialize+0x24>)
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]

#if (TRC_USE_INTERNAL_BUFFER == 1)
	return xTraceInternalEventBufferInitialize(pxStreamPortRTT->bufferInternal, sizeof(pxStreamPortRTT->bufferInternal));
#else
	return TRC_SUCCESS;
 8003084:	2300      	movs	r3, #0
#endif
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	2000224c 	.word	0x2000224c

08003094 <xTraceStreamPortOnEnable>:

traceResult xTraceStreamPortOnEnable(uint32_t uiStartOption)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af02      	add	r7, sp, #8
 800309a:	6078      	str	r0, [r7, #4]
	(void)uiStartOption;

	/* Configure the RTT buffers */
	if (SEGGER_RTT_ConfigUpBuffer(TRC_CFG_STREAM_PORT_RTT_UP_BUFFER_INDEX, "TzData", pxStreamPortRTT->bufferUp, sizeof(pxStreamPortRTT->bufferUp), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <xTraceStreamPortOnEnable+0x54>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0018      	movs	r0, r3
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	4911      	ldr	r1, [pc, #68]	@ (80030ec <xTraceStreamPortOnEnable+0x58>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	9200      	str	r2, [sp, #0]
 80030ac:	0002      	movs	r2, r0
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff ff48 	bl	8002f44 <SEGGER_RTT_ConfigUpBuffer>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	da01      	bge.n	80030bc <xTraceStreamPortOnEnable+0x28>
	{
		return TRC_FAIL;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e010      	b.n	80030de <xTraceStreamPortOnEnable+0x4a>
	}

	if (SEGGER_RTT_ConfigDownBuffer(TRC_CFG_STREAM_PORT_RTT_DOWN_BUFFER_INDEX, "TzCtrl", pxStreamPortRTT->bufferDown, sizeof(pxStreamPortRTT->bufferDown), TRC_CFG_STREAM_PORT_RTT_MODE) < 0)
 80030bc:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <xTraceStreamPortOnEnable+0x54>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	189a      	adds	r2, r3, r2
 80030c6:	490a      	ldr	r1, [pc, #40]	@ (80030f0 <xTraceStreamPortOnEnable+0x5c>)
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2320      	movs	r3, #32
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7ff ff82 	bl	8002fd8 <SEGGER_RTT_ConfigDownBuffer>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	da01      	bge.n	80030dc <xTraceStreamPortOnEnable+0x48>
	{
		return TRC_FAIL;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <xTraceStreamPortOnEnable+0x4a>
	}

	return TRC_SUCCESS;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	2000224c 	.word	0x2000224c
 80030ec:	08006558 	.word	0x08006558
 80030f0:	08006560 	.word	0x08006560

080030f4 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <xTraceCounterInitialize+0x30>)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	601a      	str	r2, [r3, #0]
	
	pxCounterData->xCallbackFunction = 0;
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <xTraceCounterInitialize+0x30>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <xTraceCounterInitialize+0x34>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	03d2      	lsls	r2, r2, #15
 8003112:	431a      	orrs	r2, r3
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <xTraceCounterInitialize+0x34>)
 8003116:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	20002250 	.word	0x20002250
 8003128:	20003060 	.word	0x20003060

0800312c <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 8003134:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <xTraceDiagnosticsInitialize+0x44>)
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e008      	b.n	8003152 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <xTraceDiagnosticsInitialize+0x44>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	2100      	movs	r1, #0
 800314a:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d9f3      	bls.n	8003140 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <xTraceDiagnosticsInitialize+0x48>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	431a      	orrs	r2, r3
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <xTraceDiagnosticsInitialize+0x48>)
 8003162:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	20002254 	.word	0x20002254
 8003174:	20003060 	.word	0x20003060

08003178 <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	0002      	movs	r2, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <xTraceDiagnosticsAdd+0x34>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1dfa      	adds	r2, r7, #7
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	58d0      	ldr	r0, [r2, r3]
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <xTraceDiagnosticsAdd+0x34>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1dfa      	adds	r2, r7, #7
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	1841      	adds	r1, r0, r1
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	50d1      	str	r1, [r2, r3]

	return TRC_SUCCESS;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20002254 	.word	0x20002254

080031b0 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	0002      	movs	r2, r0
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	701a      	strb	r2, [r3, #0]
	return xTraceDiagnosticsAdd(xType, 1);
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff ffd8 	bl	8003178 <xTraceDiagnosticsAdd>
 80031c8:	0003      	movs	r3, r0
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	701a      	strb	r2, [r3, #0]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <xTraceDiagnosticsSetIfHigher+0x38>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1dfa      	adds	r2, r7, #7
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	58d3      	ldr	r3, [r2, r3]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dd06      	ble.n	8003202 <xTraceDiagnosticsSetIfHigher+0x2e>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <xTraceDiagnosticsSetIfHigher+0x38>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1dfa      	adds	r2, r7, #7
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	50d1      	str	r1, [r2, r3]
	}

	return TRC_SUCCESS;
 8003202:	2300      	movs	r3, #0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b002      	add	sp, #8
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20002254 	.word	0x20002254

08003210 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <xTraceDiagnosticsCheckStatus+0x7c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2208      	movs	r2, #8
 800321a:	4013      	ands	r3, r2
 800321c:	d101      	bne.n	8003222 <xTraceDiagnosticsCheckStatus+0x12>
	{
		return TRC_FAIL;
 800321e:	2301      	movs	r3, #1
 8003220:	e030      	b.n	8003284 <xTraceDiagnosticsCheckStatus+0x74>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	dd06      	ble.n	800323a <xTraceDiagnosticsCheckStatus+0x2a>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 800322c:	2008      	movs	r0, #8
 800322e:	f000 f9ef 	bl	8003610 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8003232:	4b17      	ldr	r3, [pc, #92]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b0e      	cmp	r3, #14
 8003242:	dd06      	ble.n	8003252 <xTraceDiagnosticsCheckStatus+0x42>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 8003244:	2009      	movs	r0, #9
 8003246:	f000 f9e3 	bl	8003610 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 800324a:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	dd06      	ble.n	800326a <xTraceDiagnosticsCheckStatus+0x5a>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 800325c:	200a      	movs	r0, #10
 800325e:	f000 f9d7 	bl	8003610 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	dd06      	ble.n	8003282 <xTraceDiagnosticsCheckStatus+0x72>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8003274:	200e      	movs	r0, #14
 8003276:	f000 f9cb 	bl	8003610 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <xTraceDiagnosticsCheckStatus+0x80>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	20003060 	.word	0x20003060
 8003290:	20002254 	.word	0x20002254

08003294 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <xTraceEntryIndexTableInitialize+0x1c>)
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
	
	return prvEntryIndexInitialize();
 80032a2:	f000 f941 	bl	8003528 <prvEntryIndexInitialize>
 80032a6:	0003      	movs	r3, r0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000225c 	.word	0x2000225c

080032b4 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 80032c2:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 80032d2:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2203      	movs	r2, #3
 80032d8:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e030      	b.n	8003342 <xTraceEntryTableInitialize+0x8e>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	0013      	movs	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	189b      	adds	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	18cb      	adds	r3, r1, r3
 80032f0:	330c      	adds	r3, #12
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	e010      	b.n	800331e <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 80032fc:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	0013      	movs	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	189b      	adds	r3, r3, r2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	189b      	adds	r3, r3, r2
 800330c:	3302      	adds	r3, #2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	18cb      	adds	r3, r1, r3
 8003312:	3308      	adds	r3, #8
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3301      	adds	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d9eb      	bls.n	80032fc <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <xTraceEntryTableInitialize+0xac>)
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	2020      	movs	r0, #32
 800332c:	0013      	movs	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	189b      	adds	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	18cb      	adds	r3, r1, r3
 8003336:	181b      	adds	r3, r3, r0
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d9cb      	bls.n	80032e0 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <xTraceEntryTableInitialize+0xb0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <xTraceEntryTableInitialize+0xb0>)
 8003352:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	20002258 	.word	0x20002258
 8003364:	20003060 	.word	0x20003060

08003368 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8003370:	4b2c      	ldr	r3, [pc, #176]	@ (8003424 <xTraceEntryCreate+0xbc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2210      	movs	r2, #16
 8003376:	4013      	ands	r3, r2
 8003378:	d101      	bne.n	800337e <xTraceEntryCreate+0x16>
	{
		return TRC_FAIL;
 800337a:	2301      	movs	r3, #1
 800337c:	e04d      	b.n	800341a <xTraceEntryCreate+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	617b      	str	r3, [r7, #20]
  return(result);
 8003384:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	2301      	movs	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			@ (mov r8, r8)

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 8003394:	230b      	movs	r3, #11
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f8e5 	bl	8003568 <prvEntryIndexTake>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d00a      	beq.n	80033b8 <xTraceEntryCreate+0x50>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7ff ff04 	bl	80031b0 <xTraceDiagnosticsIncrease>
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			@ (mov r8, r8)

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e030      	b.n	800341a <xTraceEntryCreate+0xb2>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <xTraceEntryCreate+0xc0>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	230b      	movs	r3, #11
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0019      	movs	r1, r3
 80033c4:	000b      	movs	r3, r1
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	185b      	adds	r3, r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	3308      	adds	r3, #8
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	3304      	adds	r3, #4
 80033d2:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033de:	e009      	b.n	80033f4 <xTraceEntryCreate+0x8c>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	18d3      	adds	r3, r2, r3
 80033e8:	3304      	adds	r3, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d9f2      	bls.n	80033e0 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2200      	movs	r2, #0
 8003404:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8003418:	2300      	movs	r3, #0
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b00a      	add	sp, #40	@ 0x28
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	20003060 	.word	0x20003060
 8003428:	20002258 	.word	0x20002258

0800342c <xTraceEntryFind>:

	return TRC_SUCCESS;
}

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e017      	b.n	800346c <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <xTraceEntryFind+0x50>)
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	0013      	movs	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	189b      	adds	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3308      	adds	r3, #8
 800344c:	18cb      	adds	r3, r1, r3
 800344e:	3304      	adds	r3, #4
 8003450:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d104      	bne.n	8003466 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 8003462:	2300      	movs	r3, #0
 8003464:	e006      	b.n	8003474 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d9e4      	bls.n	800343c <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 8003472:	2301      	movs	r3, #1
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20002258 	.word	0x20002258

08003480 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003492:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <xTraceEntrySetSymbol+0x50>)
 8003494:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0019      	movs	r1, r3
 800349e:	2000      	movs	r0, #0
 80034a0:	f7ff fe98 	bl	80031d4 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b0d      	cmp	r3, #13
 80034a8:	d902      	bls.n	80034b0 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80034aa:	230e      	movs	r3, #14
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	e002      	b.n	80034b6 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3314      	adds	r3, #20
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	0018      	movs	r0, r3
 80034c0:	f002 ffd8 	bl	8006474 <memcpy>

	return TRC_SUCCESS;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	08006568 	.word	0x08006568

080034d4 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != (void*)0);

	*puiCount = (uint32_t)(TRC_ENTRY_TABLE_SLOTS) - GET_FREE_INDEX_COUNT();
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <xTraceEntryGetCount+0x20>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2210      	movs	r2, #16
 80034e4:	1ad2      	subs	r2, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000225c 	.word	0x2000225c

080034f8 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	*pxEntryHandle = (TraceEntryHandle_t)&pxEntryTable->axEntries[index];
 8003502:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <xTraceEntryGetAtIndex+0x2c>)
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	0013      	movs	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	189b      	adds	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	3308      	adds	r3, #8
 8003512:	18cb      	adds	r3, r1, r3
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20002258 	.word	0x20002258

08003528 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e00a      	b.n	800354a <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <prvEntryIndexInitialize+0x3c>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	b2d9      	uxtb	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	18d3      	adds	r3, r2, r3
 8003540:	1c0a      	adds	r2, r1, #0
 8003542:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d9f1      	bls.n	8003534 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <prvEntryIndexInitialize+0x3c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2210      	movs	r2, #16
 8003556:	611a      	str	r2, [r3, #16]

	return TRC_SUCCESS;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	2000225c 	.word	0x2000225c

08003568 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8003570:	4b15      	ldr	r3, [pc, #84]	@ (80035c8 <prvEntryIndexTake+0x60>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 800357a:	2301      	movs	r3, #1
 800357c:	e01f      	b.n	80035be <prvEntryIndexTake+0x56>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <prvEntryIndexTake+0x60>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	200f      	movs	r0, #15
 8003584:	183b      	adds	r3, r7, r0
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
	pxIndexTable->uiFreeIndexCount--;
 800358a:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <prvEntryIndexTake+0x60>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	3a01      	subs	r2, #1
 8003592:	611a      	str	r2, [r3, #16]

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <prvEntryIndexTake+0x60>)
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <prvEntryIndexTake+0x60>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <prvEntryIndexTake+0x60>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	5c8a      	ldrb	r2, [r1, r2]
 80035a4:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <prvEntryIndexTake+0x60>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b07      	ldr	r3, [pc, #28]	@ (80035c8 <prvEntryIndexTake+0x60>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	21ff      	movs	r1, #255	@ 0xff
 80035b2:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	183a      	adds	r2, r7, r0
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	2000225c 	.word	0x2000225c

080035cc <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <xTraceErrorInitialize+0x3c>)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <xTraceErrorInitialize+0x3c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <xTraceErrorInitialize+0x3c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 80035ea:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <xTraceErrorInitialize+0x3c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <xTraceErrorInitialize+0x40>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2220      	movs	r2, #32
 80035f8:	431a      	orrs	r2, r3
 80035fa:	4b04      	ldr	r3, [pc, #16]	@ (800360c <xTraceErrorInitialize+0x40>)
 80035fc:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20002260 	.word	0x20002260
 800360c:	20003060 	.word	0x20003060

08003610 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <xTraceWarning+0x54>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2220      	movs	r2, #32
 800361e:	4013      	ands	r3, r2
 8003620:	d101      	bne.n	8003626 <xTraceWarning+0x16>
	{
		/* If not initialized */
		return TRC_FAIL;
 8003622:	2301      	movs	r3, #1
 8003624:	e019      	b.n	800365a <xTraceWarning+0x4a>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <xTraceWarning+0x58>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	40da      	lsrs	r2, r3
 8003632:	0013      	movs	r3, r2
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d10e      	bne.n	8003658 <xTraceWarning+0x48>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800363a:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <xTraceWarning+0x58>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	2201      	movs	r2, #1
 8003646:	409a      	lsls	r2, r3
 8003648:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <xTraceWarning+0x58>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f84a 	bl	80036ec <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8003658:	2300      	movs	r3, #0
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	20003060 	.word	0x20003060
 8003668:	20002260 	.word	0x20002260

0800366c <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <xTraceError+0x74>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	4013      	ands	r3, r2
 800367c:	d101      	bne.n	8003682 <xTraceError+0x16>
	{
		return TRC_FAIL;
 800367e:	2301      	movs	r3, #1
 8003680:	e029      	b.n	80036d6 <xTraceError+0x6a>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <xTraceError+0x78>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d123      	bne.n	80036d4 <xTraceError+0x68>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800368c:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <xTraceError+0x78>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <xTraceError+0x78>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <xTraceError+0x78>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f81d 	bl	80036ec <prvTraceErrorPrint>
 80036b2:	0003      	movs	r3, r0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d103      	bne.n	80036c0 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 80036b8:	f001 feb6 	bl	8005428 <xTraceDisable>
			
			return TRC_FAIL;
 80036bc:	2301      	movs	r3, #1
 80036be:	e00a      	b.n	80036d6 <xTraceError+0x6a>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 80036c0:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <xTraceError+0x78>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <xTraceError+0x7c>)
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f001 f9f4 	bl	8004ab8 <xTracePrint>
		(void)xTraceDisable();
 80036d0:	f001 feaa 	bl	8005428 <xTraceDisable>
	}

	return TRC_SUCCESS;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20003060 	.word	0x20003060
 80036e4:	20002260 	.word	0x20002260
 80036e8:	0800656c 	.word	0x0800656c

080036ec <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 80036f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <prvTraceErrorPrint+0x84>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <prvTraceErrorPrint+0x2e>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 80036fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <prvTraceErrorPrint+0x84>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	001a      	movs	r2, r3
 8003706:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <prvTraceErrorPrint+0x88>)
 8003708:	0011      	movs	r1, r2
 800370a:	0018      	movs	r0, r3
 800370c:	f002 f84c 	bl	80057a8 <xTraceStringRegister>
 8003710:	0003      	movs	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <prvTraceErrorPrint+0x2e>
		{
			return TRC_FAIL;
 8003716:	2301      	movs	r3, #1
 8003718:	e026      	b.n	8003768 <prvTraceErrorPrint+0x7c>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 800371a:	2314      	movs	r3, #20
 800371c:	18fa      	adds	r2, r7, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f000 f82a 	bl	800377c <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d011      	beq.n	8003752 <prvTraceErrorPrint+0x66>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <prvTraceErrorPrint+0x6a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b02      	subs	r3, #2
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d80c      	bhi.n	8003756 <prvTraceErrorPrint+0x6a>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <prvTraceErrorPrint+0x84>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	0011      	movs	r1, r2
 8003746:	0018      	movs	r0, r3
 8003748:	f001 f9b6 	bl	8004ab8 <xTracePrint>
		break;
 800374c:	46c0      	nop			@ (mov r8, r8)
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 800374e:	2300      	movs	r3, #0
 8003750:	e00a      	b.n	8003768 <prvTraceErrorPrint+0x7c>
			return TRC_FAIL;
 8003752:	2301      	movs	r3, #1
 8003754:	e008      	b.n	8003768 <prvTraceErrorPrint+0x7c>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <prvTraceErrorPrint+0x84>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4906      	ldr	r1, [pc, #24]	@ (8003778 <prvTraceErrorPrint+0x8c>)
 8003760:	0018      	movs	r0, r3
 8003762:	f001 f9df 	bl	8004b24 <xTracePrintF>
		return TRC_FAIL;
 8003766:	2301      	movs	r3, #1
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b006      	add	sp, #24
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20002260 	.word	0x20002260
 8003774:	08006594 	.word	0x08006594
 8003778:	0800659c 	.word	0x0800659c

0800377c <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0e      	cmp	r3, #14
 800378a:	d83f      	bhi.n	800380c <prvTraceErrorGetDescription+0x90>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	4b23      	ldr	r3, [pc, #140]	@ (8003820 <prvTraceErrorGetDescription+0xa4>)
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	469f      	mov	pc, r3
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 8003798:	2301      	movs	r3, #1
 800379a:	e03c      	b.n	8003816 <prvTraceErrorGetDescription+0x9a>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	@ (8003824 <prvTraceErrorGetDescription+0xa8>)
 80037a0:	601a      	str	r2, [r3, #0]
		break;
 80037a2:	e037      	b.n	8003814 <prvTraceErrorGetDescription+0x98>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4a20      	ldr	r2, [pc, #128]	@ (8003828 <prvTraceErrorGetDescription+0xac>)
 80037a8:	601a      	str	r2, [r3, #0]
		break;
 80037aa:	e033      	b.n	8003814 <prvTraceErrorGetDescription+0x98>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <prvTraceErrorGetDescription+0xb0>)
 80037b0:	601a      	str	r2, [r3, #0]
		break;
 80037b2:	e02f      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <prvTraceErrorGetDescription+0xb4>)
 80037b8:	601a      	str	r2, [r3, #0]
		break;
 80037ba:	e02b      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <prvTraceErrorGetDescription+0xb8>)
 80037c0:	601a      	str	r2, [r3, #0]
		break;
 80037c2:	e027      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <prvTraceErrorGetDescription+0xbc>)
 80037c8:	601a      	str	r2, [r3, #0]
		break;
 80037ca:	e023      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <prvTraceErrorGetDescription+0xc0>)
 80037d0:	601a      	str	r2, [r3, #0]
		break;
 80037d2:	e01f      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <prvTraceErrorGetDescription+0xb8>)
 80037d8:	601a      	str	r2, [r3, #0]
		break;
 80037da:	e01b      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <prvTraceErrorGetDescription+0xc4>)
 80037e0:	601a      	str	r2, [r3, #0]
		break;
 80037e2:	e017      	b.n	8003814 <prvTraceErrorGetDescription+0x98>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4a17      	ldr	r2, [pc, #92]	@ (8003844 <prvTraceErrorGetDescription+0xc8>)
 80037e8:	601a      	str	r2, [r3, #0]
		break;
 80037ea:	e013      	b.n	8003814 <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	@ (8003848 <prvTraceErrorGetDescription+0xcc>)
 80037f0:	601a      	str	r2, [r3, #0]
		break;
 80037f2:	e00f      	b.n	8003814 <prvTraceErrorGetDescription+0x98>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4a15      	ldr	r2, [pc, #84]	@ (800384c <prvTraceErrorGetDescription+0xd0>)
 80037f8:	601a      	str	r2, [r3, #0]
		break;
 80037fa:	e00b      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <prvTraceErrorGetDescription+0xd4>)
 8003800:	601a      	str	r2, [r3, #0]
		break;
 8003802:	e007      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <prvTraceErrorGetDescription+0xd8>)
 8003808:	601a      	str	r2, [r3, #0]
		break;
 800380a:	e003      	b.n	8003814 <prvTraceErrorGetDescription+0x98>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <prvTraceErrorGetDescription+0xdc>)
 8003810:	601a      	str	r2, [r3, #0]
		break;
 8003812:	46c0      	nop			@ (mov r8, r8)
	}

	return TRC_SUCCESS;
 8003814:	2300      	movs	r3, #0
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b002      	add	sp, #8
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	08006890 	.word	0x08006890
 8003824:	080065b8 	.word	0x080065b8
 8003828:	080065d8 	.word	0x080065d8
 800382c:	08006604 	.word	0x08006604
 8003830:	08006618 	.word	0x08006618
 8003834:	08006644 	.word	0x08006644
 8003838:	08006670 	.word	0x08006670
 800383c:	0800668c 	.word	0x0800668c
 8003840:	080066ac 	.word	0x080066ac
 8003844:	080066c0 	.word	0x080066c0
 8003848:	080066d8 	.word	0x080066d8
 800384c:	080066ec 	.word	0x080066ec
 8003850:	08006708 	.word	0x08006708
 8003854:	08006720 	.word	0x08006720
 8003858:	0800659c 	.word	0x0800659c

0800385c <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 8003864:	4b0e      	ldr	r3, [pc, #56]	@ (80038a0 <xTraceEventInitialize+0x44>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e008      	b.n	8003882 <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <xTraceEventInitialize+0x44>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	00d2      	lsls	r2, r2, #3
 8003878:	2100      	movs	r1, #0
 800387a:	50d1      	str	r1, [r2, r3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f3      	beq.n	8003870 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8003888:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <xTraceEventInitialize+0x48>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2240      	movs	r2, #64	@ 0x40
 800388e:	431a      	orrs	r2, r3
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <xTraceEventInitialize+0x48>)
 8003892:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003894:	2300      	movs	r3, #0
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	20002264 	.word	0x20002264
 80038a4:	20003060 	.word	0x20003060

080038a8 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
	int32_t iBytesCommitted = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 80038ba:	4b30      	ldr	r3, [pc, #192]	@ (800397c <xTraceEventCreate1+0xd4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	d004      	beq.n	80038ce <xTraceEventCreate1+0x26>
 80038c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <xTraceEventCreate1+0xd8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <xTraceEventCreate1+0x2a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e050      	b.n	8003974 <xTraceEventCreate1+0xcc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	617b      	str	r3, [r7, #20]
  return(result);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <xTraceEventCreate1+0xdc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	3201      	adds	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <xTraceEventCreate1+0xe0>)
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	4b25      	ldr	r3, [pc, #148]	@ (800398c <xTraceEventCreate1+0xe4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	230c      	movs	r3, #12
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	0192      	lsls	r2, r2, #6
 8003904:	188a      	adds	r2, r1, r2
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2180      	movs	r1, #128	@ 0x80
 8003910:	0149      	lsls	r1, r1, #5
 8003912:	430a      	orrs	r2, r1
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	4b1a      	ldr	r3, [pc, #104]	@ (8003984 <xTraceEventCreate1+0xdc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	b292      	uxth	r2, r2
 8003922:	805a      	strh	r2, [r3, #2]
 8003924:	4b1a      	ldr	r3, [pc, #104]	@ (8003990 <xTraceEventCreate1+0xe8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	0a19      	lsrs	r1, r3, #8
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <xTraceEventCreate1+0xec>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	061a      	lsls	r2, r3, #24
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	188a      	adds	r2, r1, r2
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <xTraceEventCreate1+0xec>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <xTraceEventCreate1+0xec>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6992      	ldr	r2, [r2, #24]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <xTraceEventCreate1+0xec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6852      	ldr	r2, [r2, #4]
 800394e:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	220c      	movs	r2, #12
 800395a:	0019      	movs	r1, r3
 800395c:	2001      	movs	r0, #1
 800395e:	f7ff fac9 	bl	8002ef4 <SEGGER_RTT_Write>
 8003962:	0003      	movs	r3, r0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b008      	add	sp, #32
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20003060 	.word	0x20003060
 8003980:	20003058 	.word	0x20003058
 8003984:	20002264 	.word	0x20002264
 8003988:	20002280 	.word	0x20002280
 800398c:	2000226c 	.word	0x2000226c
 8003990:	e000e018 	.word	0xe000e018
 8003994:	20003068 	.word	0x20003068

08003998 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <xTraceEventCreate2+0xdc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	4013      	ands	r3, r2
 80039b4:	d004      	beq.n	80039c0 <xTraceEventCreate2+0x28>
 80039b6:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <xTraceEventCreate2+0xe0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <xTraceEventCreate2+0x2c>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e053      	b.n	8003a6c <xTraceEventCreate2+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ce:	2301      	movs	r3, #1
 80039d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	4b28      	ldr	r3, [pc, #160]	@ (8003a7c <xTraceEventCreate2+0xe4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	3201      	adds	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <xTraceEventCreate2+0xe8>)
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <xTraceEventCreate2+0xec>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	2314      	movs	r3, #20
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	0192      	lsls	r2, r2, #6
 80039f6:	188a      	adds	r2, r1, r2
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	0189      	lsls	r1, r1, #6
 8003a04:	430a      	orrs	r2, r1
 8003a06:	b292      	uxth	r2, r2
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <xTraceEventCreate2+0xe4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	b292      	uxth	r2, r2
 8003a14:	805a      	strh	r2, [r3, #2]
 8003a16:	4b1c      	ldr	r3, [pc, #112]	@ (8003a88 <xTraceEventCreate2+0xf0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	0a19      	lsrs	r1, r3, #8
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <xTraceEventCreate2+0xf4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	061a      	lsls	r2, r3, #24
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	188a      	adds	r2, r1, r2
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <xTraceEventCreate2+0xf4>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <xTraceEventCreate2+0xf4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6992      	ldr	r2, [r2, #24]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <xTraceEventCreate2+0xf4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2210      	movs	r2, #16
 8003a52:	0019      	movs	r1, r3
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7ff fa4d 	bl	8002ef4 <SEGGER_RTT_Write>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b00a      	add	sp, #40	@ 0x28
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20003060 	.word	0x20003060
 8003a78:	20003058 	.word	0x20003058
 8003a7c:	20002264 	.word	0x20002264
 8003a80:	20002280 	.word	0x20002280
 8003a84:	2000226c 	.word	0x2000226c
 8003a88:	e000e018 	.word	0xe000e018
 8003a8c:	20003068 	.word	0x20003068

08003a90 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8003aa6:	4b33      	ldr	r3, [pc, #204]	@ (8003b74 <xTraceEventCreate3+0xe4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d004      	beq.n	8003aba <xTraceEventCreate3+0x2a>
 8003ab0:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <xTraceEventCreate3+0xe8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <xTraceEventCreate3+0x2e>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e056      	b.n	8003b6c <xTraceEventCreate3+0xdc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abe:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac8:	2301      	movs	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <xTraceEventCreate3+0xec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	3201      	adds	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <xTraceEventCreate3+0xf0>)
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <xTraceEventCreate3+0xf4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	2314      	movs	r3, #20
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	0192      	lsls	r2, r2, #6
 8003af0:	188a      	adds	r2, r1, r2
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	21c0      	movs	r1, #192	@ 0xc0
 8003afc:	0189      	lsls	r1, r1, #6
 8003afe:	430a      	orrs	r2, r1
 8003b00:	b292      	uxth	r2, r2
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <xTraceEventCreate3+0xec>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	805a      	strh	r2, [r3, #2]
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <xTraceEventCreate3+0xf8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	0a19      	lsrs	r1, r3, #8
 8003b18:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <xTraceEventCreate3+0xfc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	061a      	lsls	r2, r3, #24
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	188a      	adds	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <xTraceEventCreate3+0xfc>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <xTraceEventCreate3+0xfc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6992      	ldr	r2, [r2, #24]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <xTraceEventCreate3+0xfc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2214      	movs	r2, #20
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff f9cd 	bl	8002ef4 <SEGGER_RTT_Write>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b00a      	add	sp, #40	@ 0x28
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20003060 	.word	0x20003060
 8003b78:	20003058 	.word	0x20003058
 8003b7c:	20002264 	.word	0x20002264
 8003b80:	20002280 	.word	0x20002280
 8003b84:	2000226c 	.word	0x2000226c
 8003b88:	e000e018 	.word	0xe000e018
 8003b8c:	20003068 	.word	0x20003068

08003b90 <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 8003ba6:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <xTraceEventCreate4+0xec>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4013      	ands	r3, r2
 8003bae:	d004      	beq.n	8003bba <xTraceEventCreate4+0x2a>
 8003bb0:	4b33      	ldr	r3, [pc, #204]	@ (8003c80 <xTraceEventCreate4+0xf0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <xTraceEventCreate4+0x2e>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e059      	b.n	8003c72 <xTraceEventCreate4+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc8:	2301      	movs	r3, #1
 8003bca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <xTraceEventCreate4+0xf4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	3201      	adds	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <xTraceEventCreate4+0xf8>)
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <xTraceEventCreate4+0xfc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	2314      	movs	r3, #20
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	0192      	lsls	r2, r2, #6
 8003bf0:	188a      	adds	r2, r1, r2
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2180      	movs	r1, #128	@ 0x80
 8003bfc:	01c9      	lsls	r1, r1, #7
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	b292      	uxth	r2, r2
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <xTraceEventCreate4+0xf4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	805a      	strh	r2, [r3, #2]
 8003c10:	4b1f      	ldr	r3, [pc, #124]	@ (8003c90 <xTraceEventCreate4+0x100>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	0a19      	lsrs	r1, r3, #8
 8003c18:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <xTraceEventCreate4+0x104>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	061a      	lsls	r2, r3, #24
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	188a      	adds	r2, r1, r2
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <xTraceEventCreate4+0x104>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <xTraceEventCreate4+0x104>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6992      	ldr	r2, [r2, #24]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <xTraceEventCreate4+0x104>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6852      	ldr	r2, [r2, #4]
 8003c3a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2218      	movs	r2, #24
 8003c58:	0019      	movs	r1, r3
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7ff f94a 	bl	8002ef4 <SEGGER_RTT_Write>
 8003c60:	0003      	movs	r3, r0
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b00a      	add	sp, #40	@ 0x28
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	20003060 	.word	0x20003060
 8003c80:	20003058 	.word	0x20003058
 8003c84:	20002264 	.word	0x20002264
 8003c88:	20002280 	.word	0x20002280
 8003c8c:	2000226c 	.word	0x2000226c
 8003c90:	e000e018 	.word	0xe000e018
 8003c94:	20003068 	.word	0x20003068

08003c98 <xTraceEventCreateRawBlocking>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateRawBlocking(const void* pxSource, uint32_t ulSize)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	int32_t iBytesCommitted = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
	void* pxBuffer = (void*)0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]

	TRACE_ALLOC_CRITICAL_SECTION();

	ulSize = TRC_ALIGN_CEIL(ulSize, sizeof(TraceUnsignedBaseType_t));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	3303      	adds	r3, #3
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8003cba:	697b      	ldr	r3, [r7, #20]

	TRACE_ENTER_CRITICAL_SECTION();
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)

	pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventCounter++;
 8003cca:	4b16      	ldr	r3, [pc, #88]	@ (8003d24 <xTraceEventCreateRawBlocking+0x8c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	3201      	adds	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
	while (xTraceStreamPortAllocate(ulSize, (void**)&pxBuffer) == TRC_FAIL) {}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <xTraceEventCreateRawBlocking+0x90>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <xTraceEventCreateRawBlocking+0x94>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	019b      	lsls	r3, r3, #6
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	60bb      	str	r3, [r7, #8]

	memcpy(pxBuffer, pxSource, ulSize);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f002 fbc0 	bl	8006474 <memcpy>
	while (xTraceStreamPortCommit(pxBuffer, ulSize, &iBytesCommitted) == TRC_FAIL) {}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f7ff f8f9 	bl	8002ef4 <SEGGER_RTT_Write>
 8003d02:	0003      	movs	r3, r0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d0f4      	beq.n	8003cf6 <xTraceEventCreateRawBlocking+0x5e>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
	(void)iBytesCommitted;

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b008      	add	sp, #32
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	20002264 	.word	0x20002264
 8003d28:	20002280 	.word	0x20002280
 8003d2c:	2000226c 	.word	0x2000226c

08003d30 <xTraceEventCreateDataOffline0>:

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3303      	adds	r3, #3
 8003d48:	2203      	movs	r2, #3
 8003d4a:	4393      	bics	r3, r2
 8003d4c:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3308      	adds	r3, #8
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d901      	bls.n	8003d5a <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 8003d56:	2338      	movs	r3, #56	@ 0x38
 8003d58:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	2301      	movs	r3, #1
 8003d66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	4b29      	ldr	r3, [pc, #164]	@ (8003e18 <xTraceEventCreateDataOffline0+0xe8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	3201      	adds	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <xTraceEventCreateDataOffline0+0xec>)
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <xTraceEventCreateDataOffline0+0xf0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	2314      	movs	r3, #20
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	0192      	lsls	r2, r2, #6
 8003d8c:	188a      	adds	r2, r1, r2
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	b292      	uxth	r2, r2
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <xTraceEventCreateDataOffline0+0xe8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	b292      	uxth	r2, r2
 8003db2:	805a      	strh	r2, [r3, #2]
 8003db4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <xTraceEventCreateDataOffline0+0xf4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	0a19      	lsrs	r1, r3, #8
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <xTraceEventCreateDataOffline0+0xf8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	061a      	lsls	r2, r3, #24
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	188a      	adds	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <xTraceEventCreateDataOffline0+0xf8>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <xTraceEventCreateDataOffline0+0xf8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6992      	ldr	r2, [r2, #24]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <xTraceEventCreateDataOffline0+0xf8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6852      	ldr	r2, [r2, #4]
 8003dde:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3308      	adds	r3, #8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f002 fb43 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 8003dee:	6979      	ldr	r1, [r7, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3308      	adds	r3, #8
 8003df4:	001a      	movs	r2, r3
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7ff f87c 	bl	8002ef4 <SEGGER_RTT_Write>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	0018      	movs	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b00a      	add	sp, #40	@ 0x28
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	20002264 	.word	0x20002264
 8003e1c:	20002280 	.word	0x20002280
 8003e20:	2000226c 	.word	0x2000226c
 8003e24:	e000e018 	.word	0xe000e018
 8003e28:	20003068 	.word	0x20003068

08003e2c <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	3303      	adds	r3, #3
 8003e46:	2203      	movs	r2, #3
 8003e48:	4393      	bics	r3, r2
 8003e4a:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d901      	bls.n	8003e58 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 8003e54:	2334      	movs	r3, #52	@ 0x34
 8003e56:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8003e58:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <xTraceEventCreateData1+0x108>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d004      	beq.n	8003e6c <xTraceEventCreateData1+0x40>
 8003e62:	4b35      	ldr	r3, [pc, #212]	@ (8003f38 <xTraceEventCreateData1+0x10c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <xTraceEventCreateData1+0x44>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e05d      	b.n	8003f2c <xTraceEventCreateData1+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8310 	mrs	r3, PRIMASK
 8003e74:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f383 8810 	msr	PRIMASK, r3
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <xTraceEventCreateData1+0x110>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	3201      	adds	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	4b2b      	ldr	r3, [pc, #172]	@ (8003f40 <xTraceEventCreateData1+0x114>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <xTraceEventCreateData1+0x118>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	2314      	movs	r3, #20
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	0192      	lsls	r2, r2, #6
 8003ea2:	188a      	adds	r2, r1, r2
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	3304      	adds	r3, #4
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	031b      	lsls	r3, r3, #12
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	b21a      	sxth	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <xTraceEventCreateData1+0x110>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	805a      	strh	r2, [r3, #2]
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <xTraceEventCreateData1+0x11c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	0a19      	lsrs	r1, r3, #8
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <xTraceEventCreateData1+0x120>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	061a      	lsls	r2, r3, #24
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	188a      	adds	r2, r1, r2
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f4c <xTraceEventCreateData1+0x120>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <xTraceEventCreateData1+0x120>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6992      	ldr	r2, [r2, #24]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4b16      	ldr	r3, [pc, #88]	@ (8003f4c <xTraceEventCreateData1+0x120>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6852      	ldr	r2, [r2, #4]
 8003ef6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	330c      	adds	r3, #12
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f002 fab4 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	001a      	movs	r2, r3
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fe ffed 	bl	8002ef4 <SEGGER_RTT_Write>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b00a      	add	sp, #40	@ 0x28
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20003060 	.word	0x20003060
 8003f38:	20003058 	.word	0x20003058
 8003f3c:	20002264 	.word	0x20002264
 8003f40:	20002280 	.word	0x20002280
 8003f44:	2000226c 	.word	0x2000226c
 8003f48:	e000e018 	.word	0xe000e018
 8003f4c:	20003068 	.word	0x20003068

08003f50 <xTraceEventCreateData2>:
	TraceUnsignedBaseType_t uxParam1,
	TraceUnsignedBaseType_t uxParam2,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	@ 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
	TraceEvent2_t* pxEventData = (void*)0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	3303      	adds	r3, #3
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	633b      	str	r3, [r7, #48]	@ 0x30
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	3310      	adds	r3, #16
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d901      	bls.n	8003f7c <xTraceEventCreateData2+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 8003f78:	2330      	movs	r3, #48	@ 0x30
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 8003f7c:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <xTraceEventCreateData2+0x110>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d004      	beq.n	8003f90 <xTraceEventCreateData2+0x40>
 8003f86:	4b37      	ldr	r3, [pc, #220]	@ (8004064 <xTraceEventCreateData2+0x114>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <xTraceEventCreateData2+0x44>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e060      	b.n	8004056 <xTraceEventCreateData2+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f94:	f3ef 8310 	mrs	r3, PRIMASK
 8003f98:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f383 8810 	msr	PRIMASK, r3
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	4b2f      	ldr	r3, [pc, #188]	@ (8004068 <xTraceEventCreateData2+0x118>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	3201      	adds	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <xTraceEventCreateData2+0x11c>)
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004070 <xTraceEventCreateData2+0x120>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	2314      	movs	r3, #20
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	0192      	lsls	r2, r2, #6
 8003fc6:	188a      	adds	r2, r1, r2
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	031b      	lsls	r3, r3, #12
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <xTraceEventCreateData2+0x118>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	b292      	uxth	r2, r2
 8003fee:	805a      	strh	r2, [r3, #2]
 8003ff0:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <xTraceEventCreateData2+0x124>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	0a19      	lsrs	r1, r3, #8
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <xTraceEventCreateData2+0x128>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	061a      	lsls	r2, r3, #24
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <xTraceEventCreateData2+0x128>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <xTraceEventCreateData2+0x128>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6992      	ldr	r2, [r2, #24]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4b18      	ldr	r3, [pc, #96]	@ (8004078 <xTraceEventCreateData2+0x128>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6852      	ldr	r2, [r2, #4]
 800401a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2_DATA(uxParam1, uxParam2, puxData, uxSize);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3310      	adds	r3, #16
 800402c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	0018      	movs	r0, r3
 8004032:	f002 fa1f 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent2_t) + uxSize);
 8004036:	6979      	ldr	r1, [r7, #20]
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	3310      	adds	r3, #16
 800403c:	001a      	movs	r2, r3
 800403e:	2001      	movs	r0, #1
 8004040:	f7fe ff58 	bl	8002ef4 <SEGGER_RTT_Write>
 8004044:	0003      	movs	r3, r0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004054:	2300      	movs	r3, #0
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b00a      	add	sp, #40	@ 0x28
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	20003060 	.word	0x20003060
 8004064:	20003058 	.word	0x20003058
 8004068:	20002264 	.word	0x20002264
 800406c:	20002280 	.word	0x20002280
 8004070:	2000226c 	.word	0x2000226c
 8004074:	e000e018 	.word	0xe000e018
 8004078:	20003068 	.word	0x20003068

0800407c <xTraceEventCreateData3>:
	TraceUnsignedBaseType_t uxParam2,
	TraceUnsignedBaseType_t uxParam3,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8004092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004094:	3303      	adds	r3, #3
 8004096:	2203      	movs	r2, #3
 8004098:	4393      	bics	r3, r2
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	3314      	adds	r3, #20
 80040a0:	2b40      	cmp	r3, #64	@ 0x40
 80040a2:	d901      	bls.n	80040a8 <xTraceEventCreateData3+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 80040a4:	232c      	movs	r3, #44	@ 0x2c
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 80040a8:	4b39      	ldr	r3, [pc, #228]	@ (8004190 <xTraceEventCreateData3+0x114>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2201      	movs	r2, #1
 80040ae:	4013      	ands	r3, r2
 80040b0:	d004      	beq.n	80040bc <xTraceEventCreateData3+0x40>
 80040b2:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <xTraceEventCreateData3+0x118>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <xTraceEventCreateData3+0x44>
 80040bc:	2301      	movs	r3, #1
 80040be:	e063      	b.n	8004188 <xTraceEventCreateData3+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ca:	2301      	movs	r3, #1
 80040cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <xTraceEventCreateData3+0x11c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	3201      	adds	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <xTraceEventCreateData3+0x120>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	4b2e      	ldr	r3, [pc, #184]	@ (80041a0 <xTraceEventCreateData3+0x124>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	2314      	movs	r3, #20
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	0192      	lsls	r2, r2, #6
 80040f2:	188a      	adds	r2, r1, r2
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	b21a      	sxth	r2, r3
 80040fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fc:	330c      	adds	r3, #12
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	b29b      	uxth	r3, r3
 8004102:	031b      	lsls	r3, r3, #12
 8004104:	b21b      	sxth	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	b21a      	sxth	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	b292      	uxth	r2, r2
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	4b21      	ldr	r3, [pc, #132]	@ (8004198 <xTraceEventCreateData3+0x11c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	b292      	uxth	r2, r2
 800411a:	805a      	strh	r2, [r3, #2]
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <xTraceEventCreateData3+0x128>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	0a19      	lsrs	r1, r3, #8
 8004124:	4b20      	ldr	r3, [pc, #128]	@ (80041a8 <xTraceEventCreateData3+0x12c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	061a      	lsls	r2, r3, #24
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	188a      	adds	r2, r1, r2
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <xTraceEventCreateData3+0x12c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <xTraceEventCreateData3+0x12c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6992      	ldr	r2, [r2, #24]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <xTraceEventCreateData3+0x12c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6852      	ldr	r2, [r2, #4]
 8004146:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3_DATA(uxParam1, uxParam2, uxParam3, puxData, uxSize);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	611a      	str	r2, [r3, #16]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3314      	adds	r3, #20
 800415e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004160:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004162:	0018      	movs	r0, r3
 8004164:	f002 f986 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent3_t) + uxSize);
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416c:	3314      	adds	r3, #20
 800416e:	001a      	movs	r2, r3
 8004170:	2001      	movs	r0, #1
 8004172:	f7fe febf 	bl	8002ef4 <SEGGER_RTT_Write>
 8004176:	0003      	movs	r3, r0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b00a      	add	sp, #40	@ 0x28
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20003060 	.word	0x20003060
 8004194:	20003058 	.word	0x20003058
 8004198:	20002264 	.word	0x20002264
 800419c:	20002280 	.word	0x20002280
 80041a0:	2000226c 	.word	0x2000226c
 80041a4:	e000e018 	.word	0xe000e018
 80041a8:	20003068 	.word	0x20003068

080041ac <xTraceEventCreateData4>:
	TraceUnsignedBaseType_t uxParam3,
	TraceUnsignedBaseType_t uxParam4,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	3303      	adds	r3, #3
 80041c6:	2203      	movs	r2, #3
 80041c8:	4393      	bics	r3, r2
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	3318      	adds	r3, #24
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d901      	bls.n	80041d8 <xTraceEventCreateData4+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 80041d4:	2328      	movs	r3, #40	@ 0x28
 80041d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <xTraceEventCreateData4+0x11c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	4013      	ands	r3, r2
 80041e0:	d004      	beq.n	80041ec <xTraceEventCreateData4+0x40>
 80041e2:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <xTraceEventCreateData4+0x120>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <xTraceEventCreateData4+0x44>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e066      	b.n	80042be <xTraceEventCreateData4+0x112>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f0:	f3ef 8310 	mrs	r3, PRIMASK
 80041f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fa:	2301      	movs	r3, #1
 80041fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	4b32      	ldr	r3, [pc, #200]	@ (80042d0 <xTraceEventCreateData4+0x124>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	3201      	adds	r2, #1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <xTraceEventCreateData4+0x128>)
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	4b30      	ldr	r3, [pc, #192]	@ (80042d8 <xTraceEventCreateData4+0x12c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	2314      	movs	r3, #20
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	0192      	lsls	r2, r2, #6
 8004222:	188a      	adds	r2, r1, r2
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	b21a      	sxth	r2, r3
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	3310      	adds	r3, #16
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	b29b      	uxth	r3, r3
 8004232:	031b      	lsls	r3, r3, #12
 8004234:	b21b      	sxth	r3, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	b21a      	sxth	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	b292      	uxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	4b23      	ldr	r3, [pc, #140]	@ (80042d0 <xTraceEventCreateData4+0x124>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	b292      	uxth	r2, r2
 800424a:	805a      	strh	r2, [r3, #2]
 800424c:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <xTraceEventCreateData4+0x130>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	0a19      	lsrs	r1, r3, #8
 8004254:	4b22      	ldr	r3, [pc, #136]	@ (80042e0 <xTraceEventCreateData4+0x134>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	061a      	lsls	r2, r3, #24
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	188a      	adds	r2, r1, r2
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <xTraceEventCreateData4+0x134>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <xTraceEventCreateData4+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6992      	ldr	r2, [r2, #24]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <xTraceEventCreateData4+0x134>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6852      	ldr	r2, [r2, #4]
 8004276:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800428e:	615a      	str	r2, [r3, #20]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3318      	adds	r3, #24
 8004294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004296:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004298:	0018      	movs	r0, r3
 800429a:	f002 f8eb 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent4_t) + uxSize);
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	3318      	adds	r3, #24
 80042a4:	001a      	movs	r2, r3
 80042a6:	2001      	movs	r0, #1
 80042a8:	f7fe fe24 	bl	8002ef4 <SEGGER_RTT_Write>
 80042ac:	0003      	movs	r3, r0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f383 8810 	msr	PRIMASK, r3
}
 80042ba:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b00a      	add	sp, #40	@ 0x28
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	20003060 	.word	0x20003060
 80042cc:	20003058 	.word	0x20003058
 80042d0:	20002264 	.word	0x20002264
 80042d4:	20002280 	.word	0x20002280
 80042d8:	2000226c 	.word	0x2000226c
 80042dc:	e000e018 	.word	0xe000e018
 80042e0:	20003068 	.word	0x20003068

080042e4 <xTraceEventCreateData5>:
	TraceUnsignedBaseType_t uxParam4,
	TraceUnsignedBaseType_t uxParam5,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	@ 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	TraceEvent5_t* pxEventData = (void*)0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	3303      	adds	r3, #3
 80042fe:	2203      	movs	r2, #3
 8004300:	4393      	bics	r3, r2
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	331c      	adds	r3, #28
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d901      	bls.n	8004310 <xTraceEventCreateData5+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 800430c:	2324      	movs	r3, #36	@ 0x24
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 8004310:	4b3c      	ldr	r3, [pc, #240]	@ (8004404 <xTraceEventCreateData5+0x120>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	d004      	beq.n	8004324 <xTraceEventCreateData5+0x40>
 800431a:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <xTraceEventCreateData5+0x124>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <xTraceEventCreateData5+0x44>
 8004324:	2301      	movs	r3, #1
 8004326:	e069      	b.n	80043fc <xTraceEventCreateData5+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004328:	f3ef 8310 	mrs	r3, PRIMASK
 800432c:	61fb      	str	r3, [r7, #28]
  return(result);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	2301      	movs	r3, #1
 8004334:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	4b33      	ldr	r3, [pc, #204]	@ (800440c <xTraceEventCreateData5+0x128>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	3201      	adds	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	4b31      	ldr	r3, [pc, #196]	@ (8004410 <xTraceEventCreateData5+0x12c>)
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <xTraceEventCreateData5+0x130>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	2314      	movs	r3, #20
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	0192      	lsls	r2, r2, #6
 800435a:	188a      	adds	r2, r1, r2
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b21a      	sxth	r2, r3
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	3314      	adds	r3, #20
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	b29b      	uxth	r3, r3
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	b21b      	sxth	r3, r3
 800436e:	4313      	orrs	r3, r2
 8004370:	b21a      	sxth	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	b292      	uxth	r2, r2
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	4b24      	ldr	r3, [pc, #144]	@ (800440c <xTraceEventCreateData5+0x128>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	b292      	uxth	r2, r2
 8004382:	805a      	strh	r2, [r3, #2]
 8004384:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <xTraceEventCreateData5+0x134>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	0a19      	lsrs	r1, r3, #8
 800438c:	4b23      	ldr	r3, [pc, #140]	@ (800441c <xTraceEventCreateData5+0x138>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	061a      	lsls	r2, r3, #24
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	188a      	adds	r2, r1, r2
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	4b20      	ldr	r3, [pc, #128]	@ (800441c <xTraceEventCreateData5+0x138>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <xTraceEventCreateData5+0x138>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6992      	ldr	r2, [r2, #24]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4b1c      	ldr	r3, [pc, #112]	@ (800441c <xTraceEventCreateData5+0x138>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c6:	615a      	str	r2, [r3, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043cc:	619a      	str	r2, [r3, #24]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	331c      	adds	r3, #28
 80043d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043d6:	0018      	movs	r0, r3
 80043d8:	f002 f84c 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent5_t) + uxSize);
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e0:	331c      	adds	r3, #28
 80043e2:	001a      	movs	r2, r3
 80043e4:	2001      	movs	r0, #1
 80043e6:	f7fe fd85 	bl	8002ef4 <SEGGER_RTT_Write>
 80043ea:	0003      	movs	r3, r0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	b00a      	add	sp, #40	@ 0x28
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20003060 	.word	0x20003060
 8004408:	20003058 	.word	0x20003058
 800440c:	20002264 	.word	0x20002264
 8004410:	20002280 	.word	0x20002280
 8004414:	2000226c 	.word	0x2000226c
 8004418:	e000e018 	.word	0xe000e018
 800441c:	20003068 	.word	0x20003068

08004420 <xTraceEventCreateData6>:
	TraceUnsignedBaseType_t uxParam5,
	TraceUnsignedBaseType_t uxParam6,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	@ 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
	TraceEvent6_t* pxEventData = (void*)0;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
	int32_t iBytesCommitted = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8004436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004438:	3303      	adds	r3, #3
 800443a:	2203      	movs	r2, #3
 800443c:	4393      	bics	r3, r2
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8004440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004442:	3320      	adds	r3, #32
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d901      	bls.n	800444c <xTraceEventCreateData6+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 8004448:	2320      	movs	r3, #32
 800444a:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 800444c:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <xTraceEventCreateData6+0x128>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	4013      	ands	r3, r2
 8004454:	d004      	beq.n	8004460 <xTraceEventCreateData6+0x40>
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <xTraceEventCreateData6+0x12c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <xTraceEventCreateData6+0x44>
 8004460:	2301      	movs	r3, #1
 8004462:	e06c      	b.n	800453e <xTraceEventCreateData6+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004464:	f3ef 8310 	mrs	r3, PRIMASK
 8004468:	61fb      	str	r3, [r7, #28]
  return(result);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
 800446e:	2301      	movs	r3, #1
 8004470:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	4b35      	ldr	r3, [pc, #212]	@ (8004550 <xTraceEventCreateData6+0x130>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	3201      	adds	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <xTraceEventCreateData6+0x134>)
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <xTraceEventCreateData6+0x138>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	2314      	movs	r3, #20
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	0192      	lsls	r2, r2, #6
 8004496:	188a      	adds	r2, r1, r2
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b21a      	sxth	r2, r3
 800449e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a0:	3318      	adds	r3, #24
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	b292      	uxth	r2, r2
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	4b26      	ldr	r3, [pc, #152]	@ (8004550 <xTraceEventCreateData6+0x130>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	b292      	uxth	r2, r2
 80044be:	805a      	strh	r2, [r3, #2]
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <xTraceEventCreateData6+0x13c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	0a19      	lsrs	r1, r3, #8
 80044c8:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <xTraceEventCreateData6+0x140>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	061a      	lsls	r2, r3, #24
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	188a      	adds	r2, r1, r2
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	4b22      	ldr	r3, [pc, #136]	@ (8004560 <xTraceEventCreateData6+0x140>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <xTraceEventCreateData6+0x140>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6992      	ldr	r2, [r2, #24]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <xTraceEventCreateData6+0x140>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6852      	ldr	r2, [r2, #4]
 80044ea:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004502:	615a      	str	r2, [r3, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004508:	619a      	str	r2, [r3, #24]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800450e:	61da      	str	r2, [r3, #28]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	3320      	adds	r3, #32
 8004514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004518:	0018      	movs	r0, r3
 800451a:	f001 ffab 	bl	8006474 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent6_t) + uxSize);
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004522:	3320      	adds	r3, #32
 8004524:	001a      	movs	r2, r3
 8004526:	2001      	movs	r0, #1
 8004528:	f7fe fce4 	bl	8002ef4 <SEGGER_RTT_Write>
 800452c:	0003      	movs	r3, r0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			@ (mov r8, r8)

	return TRC_SUCCESS;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b00a      	add	sp, #40	@ 0x28
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	20003060 	.word	0x20003060
 800454c:	20003058 	.word	0x20003058
 8004550:	20002264 	.word	0x20002264
 8004554:	20002280 	.word	0x20002280
 8004558:	2000226c 	.word	0x2000226c
 800455c:	e000e018 	.word	0xe000e018
 8004560:	20003068 	.word	0x20003068

08004564 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <xTraceExtensionInitialize+0x30>)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <xTraceExtensionInitialize+0x30>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	22fd      	movs	r2, #253	@ 0xfd
 8004578:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 800457a:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <xTraceExtensionInitialize+0x34>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2280      	movs	r2, #128	@ 0x80
 8004580:	0052      	lsls	r2, r2, #1
 8004582:	431a      	orrs	r2, r3
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <xTraceExtensionInitialize+0x34>)
 8004586:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	20002268 	.word	0x20002268
 8004598:	20003060 	.word	0x20003060

0800459c <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	@ 0x30
 80045a0:	af04      	add	r7, sp, #16
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 80045aa:	2114      	movs	r1, #20
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	601a      	str	r2, [r3, #0]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	605a      	str	r2, [r3, #4]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	609a      	str	r2, [r3, #8]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2303      	movs	r3, #3
 80045d0:	2100      	movs	r1, #0
 80045d2:	20f2      	movs	r0, #242	@ 0xf2
 80045d4:	f000 f904 	bl	80047e0 <xTraceObjectRegisterInternal>
 80045d8:	0003      	movs	r3, r0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b008      	add	sp, #32
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e024      	b.n	8004642 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d015      	beq.n	800462a <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	18d3      	adds	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d904      	bls.n	8004624 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <xTraceHeapAlloc+0x52>
 8004630:	2338      	movs	r3, #56	@ 0x38
 8004632:	e000      	b.n	8004636 <xTraceHeapAlloc+0x54>
 8004634:	23e9      	movs	r3, #233	@ 0xe9
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff f9ac 	bl	8003998 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8004640:	2300      	movs	r3, #0
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b006      	add	sp, #24
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8004654:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <xTraceISRInitialize+0x74>)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e020      	b.n	80046a2 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 8004660:	4b17      	ldr	r3, [pc, #92]	@ (80046c0 <xTraceISRInitialize+0x74>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	0013      	movs	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	189b      	adds	r3, r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	18cb      	adds	r3, r1, r3
 8004670:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e007      	b.n	8004688 <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	0092      	lsls	r2, r2, #2
 800467e:	2100      	movs	r1, #0
 8004680:	50d1      	str	r1, [r2, r3]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b07      	cmp	r3, #7
 800468c:	d9f4      	bls.n	8004678 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	4252      	negs	r2, r2
 8004694:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0db      	beq.n	8004660 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 80046a8:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <xTraceISRInitialize+0x78>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2280      	movs	r2, #128	@ 0x80
 80046ae:	0152      	lsls	r2, r2, #5
 80046b0:	431a      	orrs	r2, r3
 80046b2:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <xTraceISRInitialize+0x78>)
 80046b4:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b006      	add	sp, #24
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	2000226c 	.word	0x2000226c
 80046c4:	20003060 	.word	0x20003060

080046c8 <xTraceKernelPortGetUnusedStack>:
#endif

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

traceResult xTraceKernelPortGetUnusedStack(void* pvTask, TraceUnsignedBaseType_t* puxUnusedStack)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
	*puxUnusedStack = uxTaskGetStackHighWaterMark(pvTask);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fd fba1 	bl	8001e1c <uxTaskGetStackHighWaterMark>
 80046da:	0002      	movs	r2, r0
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b002      	add	sp, #8
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00b      	b.n	8004716 <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 80046fe:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <xTraceKernelPortInitialize+0x34>)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <xTraceKernelPortInitialize+0x34>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 800470c:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <xTraceKernelPortInitialize+0x34>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8004714:	2300      	movs	r3, #0
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	20002270 	.word	0x20002270

08004724 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af02      	add	r7, sp, #8
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <xTraceKernelPortEnable+0x64>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xTraceKernelPortEnable+0x26>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8004734:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <xTraceKernelPortEnable+0x64>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	001a      	movs	r2, r3
 800473a:	23e0      	movs	r3, #224	@ 0xe0
 800473c:	015b      	lsls	r3, r3, #5
 800473e:	4813      	ldr	r0, [pc, #76]	@ (800478c <xTraceKernelPortEnable+0x68>)
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	f7ff ff29 	bl	800459c <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 800474a:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <xTraceKernelPortEnable+0x64>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d115      	bne.n	8004780 <xTraceKernelPortEnable+0x5c>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <xTraceKernelPortEnable+0x64>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	490d      	ldr	r1, [pc, #52]	@ (8004790 <xTraceKernelPortEnable+0x6c>)
 800475c:	480d      	ldr	r0, [pc, #52]	@ (8004794 <xTraceKernelPortEnable+0x70>)
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	2301      	movs	r3, #1
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	2280      	movs	r2, #128	@ 0x80
 8004768:	f7fc fc87 	bl	800107a <xTaskCreate>
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <xTraceKernelPortEnable+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <xTraceKernelPortEnable+0x5c>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8004776:	2006      	movs	r0, #6
 8004778:	f7fe ff78 	bl	800366c <xTraceError>

			return TRC_FAIL;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <xTraceKernelPortEnable+0x5e>
		}
	}
	
	return TRC_SUCCESS;
 8004780:	2300      	movs	r3, #0
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20002270 	.word	0x20002270
 800478c:	08006730 	.word	0x08006730
 8004790:	0800673c 	.word	0x0800673c
 8004794:	08004799 	.word	0x08004799

08004798 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 80047a0:	f000 fe4a 	bl	8005438 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80047a4:	2032      	movs	r0, #50	@ 0x32
 80047a6:	f7fc fded 	bl	8001384 <vTaskDelay>
		xTraceTzCtrl();
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	e7f8      	b.n	80047a0 <TzCtrl+0x8>

080047ae <vTraceSetSemaphoreName>:
{
	xTraceObjectSetNameWithoutHandle(pvQueue, szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
	xTraceObjectSetNameWithoutHandle(pvSemaphore, szName);
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f917 	bl	80049f2 <xTraceObjectSetNameWithoutHandle>
}
 80047c4:	46c0      	nop			@ (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b002      	add	sp, #8
 80047ca:	bd80      	pop	{r7, pc}

080047cc <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 80047d0:	4b02      	ldr	r3, [pc, #8]	@ (80047dc <xTraceKernelPortGetSystemHeapHandle+0x10>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20002270 	.word	0x20002270

080047e0 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b091      	sub	sp, #68	@ 0x44
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ee:	f3ef 8310 	mrs	r3, PRIMASK
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 80047f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f8:	2301      	movs	r3, #1
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			@ (mov r8, r8)

	if (pvObject != (void*)0)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d019      	beq.n	800483e <xTraceObjectRegisterInternal+0x5e>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 800480a:	2318      	movs	r3, #24
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	0018      	movs	r0, r3
 8004810:	f7fe fdaa 	bl	8003368 <xTraceEntryCreate>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d104      	bne.n	8004822 <xTraceObjectRegisterInternal+0x42>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <xTraceObjectRegisterInternal+0x44>
 8004822:	2301      	movs	r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <xTraceObjectRegisterInternal+0x58>
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004834:	2301      	movs	r3, #1
 8004836:	e089      	b.n	800494c <xTraceObjectRegisterInternal+0x16c>
		}
		
		pvAddress = pvObject;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e012      	b.n	8004864 <xTraceObjectRegisterInternal+0x84>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 800483e:	2318      	movs	r3, #24
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	0018      	movs	r0, r3
 8004844:	f7fe fd90 	bl	8003368 <xTraceEntryCreate>
 8004848:	0003      	movs	r3, r0
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <xTraceObjectRegisterInternal+0x7e>
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800485a:	2301      	movs	r3, #1
 800485c:	e076      	b.n	800494c <xTraceObjectRegisterInternal+0x16c>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 8004864:	2300      	movs	r3, #0
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
 8004868:	e00d      	b.n	8004886 <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	18cb      	adds	r3, r1, r3
 800487c:	3304      	adds	r3, #4
 800487e:	601a      	str	r2, [r3, #0]
	for (i = 0u; i < uxStateCount; i++)
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	3301      	adds	r3, #1
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
 8004886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3ed      	bcc.n	800486a <xTraceObjectRegisterInternal+0x8a>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	6919      	ldr	r1, [r3, #16]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004896:	430a      	orrs	r2, r1
 8004898:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <xTraceObjectRegisterInternal+0xe6>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <xTraceObjectRegisterInternal+0xe6>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	0011      	movs	r1, r2
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f847 	bl	8004954 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d02b      	beq.n	8004924 <xTraceObjectRegisterInternal+0x144>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d839      	bhi.n	8004946 <xTraceObjectRegisterInternal+0x166>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d01a      	beq.n	800490e <xTraceObjectRegisterInternal+0x12e>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d833      	bhi.n	8004946 <xTraceObjectRegisterInternal+0x166>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <xTraceObjectRegisterInternal+0x10c>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d008      	beq.n	80048fc <xTraceObjectRegisterInternal+0x11c>
 80048ea:	e02c      	b.n	8004946 <xTraceObjectRegisterInternal+0x166>
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	001a      	movs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	0011      	movs	r1, r2
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fe ffd7 	bl	80038a8 <xTraceEventCreate1>
			break;
 80048fa:	e026      	b.n	800494a <xTraceObjectRegisterInternal+0x16a>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	0019      	movs	r1, r3
 8004900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff f846 	bl	8003998 <xTraceEventCreate2>
			break;
 800490c:	e01d      	b.n	800494a <xTraceObjectRegisterInternal+0x16a>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	0019      	movs	r1, r3
 8004912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004918:	3304      	adds	r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff f8b7 	bl	8003a90 <xTraceEventCreate3>
			break;
 8004922:	e012      	b.n	800494a <xTraceObjectRegisterInternal+0x16a>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	001c      	movs	r4, r3
 8004928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800492e:	3304      	adds	r3, #4
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004934:	3308      	adds	r3, #8
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	000b      	movs	r3, r1
 800493e:	0021      	movs	r1, r4
 8004940:	f7ff f926 	bl	8003b90 <xTraceEventCreate4>
			break;
 8004944:	e001      	b.n	800494a <xTraceObjectRegisterInternal+0x16a>
		default:
			return TRC_FAIL;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xTraceObjectRegisterInternal+0x16c>
			break;
	}

	return TRC_SUCCESS;
 800494a:	2300      	movs	r3, #0
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b00f      	add	sp, #60	@ 0x3c
 8004952:	bd90      	pop	{r4, r7, pc}

08004954 <xTraceObjectSetName>:
	return xTraceEntryDelete(xObjectHandle);
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <xTraceObjectSetName+0x68>)
 800496a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e002      	b.n	800497e <xTraceObjectSetName+0x2a>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	18d3      	adds	r3, r2, r3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <xTraceObjectSetName+0x3c>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b7f      	cmp	r3, #127	@ 0x7f
 800498e:	d9f3      	bls.n	8004978 <xTraceObjectSetName+0x24>

	uiLength = i;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	0019      	movs	r1, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3301      	adds	r3, #1
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	2003      	movs	r0, #3
 80049a0:	f7ff fa44 	bl	8003e2c <xTraceEventCreateData1>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7fe fd68 	bl	8003480 <xTraceEntrySetSymbol>
 80049b0:	0003      	movs	r3, r0
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b006      	add	sp, #24
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	08006744 	.word	0x08006744

080049c0 <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	@ 0x28
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	2314      	movs	r3, #20
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	2300      	movs	r3, #0
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	003b      	movs	r3, r7
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2301      	movs	r3, #1
 80049e4:	f7ff fefc 	bl	80047e0 <xTraceObjectRegisterInternal>
 80049e8:	0003      	movs	r3, r0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b006      	add	sp, #24
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <xTraceObjectSetNameWithoutHandle>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 80049f2:	b590      	push	{r4, r7, lr}
 80049f4:	b08b      	sub	sp, #44	@ 0x2c
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004a00:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a02:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	2301      	movs	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			@ (mov r8, r8)

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 8004a12:	240c      	movs	r4, #12
 8004a14:	193a      	adds	r2, r7, r4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7fe fd06 	bl	800342c <xTraceEntryFind>
 8004a20:	0003      	movs	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d115      	bne.n	8004a52 <xTraceObjectSetNameWithoutHandle+0x60>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fe fc9d 	bl	8003368 <xTraceEntryCreate>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d104      	bne.n	8004a3c <xTraceObjectSetNameWithoutHandle+0x4a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e000      	b.n	8004a3e <xTraceObjectSetNameWithoutHandle+0x4c>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <xTraceObjectSetNameWithoutHandle+0x60>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f383 8810 	msr	PRIMASK, r3
}
 8004a4c:	46c0      	nop			@ (mov r8, r8)
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e00e      	b.n	8004a70 <xTraceObjectSetNameWithoutHandle+0x7e>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7ff ff7b 	bl	8004954 <xTraceObjectSetName>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b00b      	add	sp, #44	@ 0x2c
 8004a76:	bd90      	pop	{r4, r7, pc}

08004a78 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <xTracePrintInitialize+0x38>)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]

	pxPrintData->defaultChannel = 0;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <xTracePrintInitialize+0x38>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <xTracePrintInitialize+0x38>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8004a96:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <xTracePrintInitialize+0x3c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2280      	movs	r2, #128	@ 0x80
 8004a9c:	0212      	lsls	r2, r2, #8
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <xTracePrintInitialize+0x3c>)
 8004aa2:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	20002274 	.word	0x20002274
 8004ab4:	20003060 	.word	0x20003060

08004ab8 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004ac2:	4b16      	ldr	r3, [pc, #88]	@ (8004b1c <xTracePrint+0x64>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	4013      	ands	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e01f      	b.n	8004b12 <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <xTracePrint+0x68>)
 8004ada:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e002      	b.n	8004ae8 <xTracePrint+0x30>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	18d3      	adds	r3, r2, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <xTracePrint+0x42>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004af8:	d9f3      	bls.n	8004ae2 <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
 8004afe:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f000 f884 	bl	8004c18 <prvTraceVPrintF>
 8004b10:	0003      	movs	r3, r0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20003060 	.word	0x20003060
 8004b20:	08006748 	.word	0x08006748

08004b24 <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 8004b24:	b40e      	push	{r1, r2, r3}
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <xTracePrintF+0x44>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	@ 0x80
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	4013      	ands	r3, r2
 8004b38:	d101      	bne.n	8004b3e <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00c      	b.n	8004b58 <xTracePrintF+0x34>
	}

	va_start(xVariableList, szFormat);
 8004b3e:	2320      	movs	r3, #32
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 8004b44:	2308      	movs	r3, #8
 8004b46:	18fa      	adds	r2, r7, r3
 8004b48:	69f9      	ldr	r1, [r7, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 f80d 	bl	8004b6c <xTraceVPrintF>
 8004b52:	0003      	movs	r3, r0
 8004b54:	60fb      	str	r3, [r7, #12]
	va_end(xVariableList);

	return xResult;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b005      	add	sp, #20
 8004b5e:	bc80      	pop	{r7}
 8004b60:	bc08      	pop	{r3}
 8004b62:	b003      	add	sp, #12
 8004b64:	4718      	bx	r3
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	20003060 	.word	0x20003060

08004b6c <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b08b      	sub	sp, #44	@ 0x2c
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8004b7c:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <xTraceVPrintF+0xa4>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	4013      	ands	r3, r2
 8004b86:	d101      	bne.n	8004b8c <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e03c      	b.n	8004c06 <xTraceVPrintF+0x9a>
	}

	if (szFormat == (void*)0)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004b92:	4b20      	ldr	r3, [pc, #128]	@ (8004c14 <xTraceVPrintF+0xa8>)
 8004b94:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e01e      	b.n	8004bda <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b25      	cmp	r3, #37	@ 0x25
 8004ba6:	d115      	bne.n	8004bd4 <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	18d3      	adds	r3, r2, r3
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	18d3      	adds	r3, r2, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b25      	cmp	r3, #37	@ 0x25
 8004bc2:	d002      	beq.n	8004bca <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	e000      	b.n	8004bd4 <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 8004bd2:	46c0      	nop			@ (mov r8, r8)
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	18d3      	adds	r3, r2, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <xTraceVPrintF+0x80>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bea:	d9d7      	bls.n	8004b9c <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 8004bf2:	69bc      	ldr	r4, [r7, #24]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	0023      	movs	r3, r4
 8004c00:	f000 f80a 	bl	8004c18 <prvTraceVPrintF>
 8004c04:	0003      	movs	r3, r0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b009      	add	sp, #36	@ 0x24
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	20003060 	.word	0x20003060
 8004c14:	08006748 	.word	0x08006748

08004c18 <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b093      	sub	sp, #76	@ 0x4c
 8004c1c:	af06      	add	r7, sp, #24
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	3391      	adds	r3, #145	@ 0x91
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	TraceUnsignedBaseType_t uxParam2;
	TraceUnsignedBaseType_t uxParam3;
	TraceUnsignedBaseType_t uxParam4;
	TraceUnsignedBaseType_t uxParam5;

	if (xChannel == 0)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d115      	bne.n	8004c5e <prvTraceVPrintF+0x46>
	{
		if (pxPrintData->defaultChannel == 0)
 8004c32:	4b75      	ldr	r3, [pc, #468]	@ (8004e08 <prvTraceVPrintF+0x1f0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10c      	bne.n	8004c56 <prvTraceVPrintF+0x3e>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 8004c3c:	4b72      	ldr	r3, [pc, #456]	@ (8004e08 <prvTraceVPrintF+0x1f0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	001a      	movs	r2, r3
 8004c42:	4b72      	ldr	r3, [pc, #456]	@ (8004e0c <prvTraceVPrintF+0x1f4>)
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fdae 	bl	80057a8 <xTraceStringRegister>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <prvTraceVPrintF+0x3e>
			{
				return TRC_FAIL;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0d3      	b.n	8004dfe <prvTraceVPrintF+0x1e6>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8004c56:	4b6c      	ldr	r3, [pc, #432]	@ (8004e08 <prvTraceVPrintF+0x1f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
	}

	switch (uiArgs)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d900      	bls.n	8004c66 <prvTraceVPrintF+0x4e>
 8004c64:	e0c7      	b.n	8004df6 <prvTraceVPrintF+0x1de>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	009a      	lsls	r2, r3, #2
 8004c6a:	4b69      	ldr	r3, [pc, #420]	@ (8004e10 <prvTraceVPrintF+0x1f8>)
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	469f      	mov	pc, r3
	{
		case 0:
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c7a:	f7ff f8d7 	bl	8003e2c <xTraceEventCreateData1>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 8004c82:	e0bb      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		case 1:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
			xResult = xTraceEventCreateData2(
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	68bc      	ldr	r4, [r7, #8]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	0023      	movs	r3, r4
 8004ca0:	f7ff f956 	bl	8003f50 <xTraceEventCreateData2>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				(TraceUnsignedBaseType_t)xChannel,
				uxParam1,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8004ca8:	e0a8      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		case 2:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1d19      	adds	r1, r3, #4
 8004cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb2:	6011      	str	r1, [r2, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	1d19      	adds	r1, r3, #4
 8004cbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	623b      	str	r3, [r7, #32]
			xResult = xTraceEventCreateData3(
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	6a3c      	ldr	r4, [r7, #32]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	0023      	movs	r3, r4
 8004cd8:	f7ff f9d0 	bl	800407c <xTraceEventCreateData3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam1,
				uxParam2,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8004ce0:	e08c      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		case 3:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1d19      	adds	r1, r3, #4
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cea:	6011      	str	r1, [r2, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf8:	6011      	str	r1, [r2, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	1d19      	adds	r1, r3, #4
 8004d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d06:	6011      	str	r1, [r2, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61fb      	str	r3, [r7, #28]
			xResult = xTraceEventCreateData4(
 8004d0c:	68f9      	ldr	r1, [r7, #12]
 8004d0e:	6a3c      	ldr	r4, [r7, #32]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	9302      	str	r3, [sp, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	0023      	movs	r3, r4
 8004d22:	f7ff fa43 	bl	80041ac <xTraceEventCreateData4>
 8004d26:	0003      	movs	r3, r0
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam2,
				uxParam3,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8004d2a:	e067      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		case 4:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1d19      	adds	r1, r3, #4
 8004d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	1d19      	adds	r1, r3, #4
 8004d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d42:	6011      	str	r1, [r2, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1d19      	adds	r1, r3, #4
 8004d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d5e:	6011      	str	r1, [r2, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	61bb      	str	r3, [r7, #24]
			xResult = xTraceEventCreateData5(
 8004d64:	68f9      	ldr	r1, [r7, #12]
 8004d66:	6a3c      	ldr	r4, [r7, #32]
 8004d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	0023      	movs	r3, r4
 8004d7e:	f7ff fab1 	bl	80042e4 <xTraceEventCreateData5>
 8004d82:	0003      	movs	r3, r0
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam3,
				uxParam4,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8004d86:	e039      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		case 5:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d90:	6011      	str	r1, [r2, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	1d19      	adds	r1, r3, #4
 8004d9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	1d19      	adds	r1, r3, #4
 8004daa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1d19      	adds	r1, r3, #4
 8004dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]
			xResult = xTraceEventCreateData6(
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	6a3c      	ldr	r4, [r7, #32]
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	9303      	str	r3, [sp, #12]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	9302      	str	r3, [sp, #8]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	0023      	movs	r3, r4
 8004dec:	f7ff fb18 	bl	8004420 <xTraceEventCreateData6>
 8004df0:	0003      	movs	r3, r0
 8004df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uxParam4,
				uxParam5,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 8004df4:	e002      	b.n	8004dfc <prvTraceVPrintF+0x1e4>
		default:
			xResult = TRC_FAIL;
 8004df6:	2301      	movs	r3, #1
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 8004dfa:	46c0      	nop			@ (mov r8, r8)
	}

	return xResult;
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b00d      	add	sp, #52	@ 0x34
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	20002274 	.word	0x20002274
 8004e0c:	0800675c 	.word	0x0800675c
 8004e10:	080068cc 	.word	0x080068cc

08004e14 <xTraceStackMonitorInitialize>:
#endif

static TraceStackMonitorData_t* pxStackMonitor TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStackMonitorInitialize(TraceStackMonitorData_t *pxBuffer)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxStackMonitor = pxBuffer;
 8004e1c:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <xTraceStackMonitorInitialize+0x4c>)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]

	pxStackMonitor->uxEntryCount = 0;
 8004e22:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <xTraceStackMonitorInitialize+0x4c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	651a      	str	r2, [r3, #80]	@ 0x50

	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e008      	b.n	8004e42 <xTraceStackMonitorInitialize+0x2e>
	{
		pxStackMonitor->xEntries[i].pvTask = 0;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <xTraceStackMonitorInitialize+0x4c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	2100      	movs	r1, #0
 8004e3a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d9f3      	bls.n	8004e30 <xTraceStackMonitorInitialize+0x1c>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR);
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <xTraceStackMonitorInitialize+0x50>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2280      	movs	r2, #128	@ 0x80
 8004e4e:	0252      	lsls	r2, r2, #9
 8004e50:	431a      	orrs	r2, r3
 8004e52:	4b04      	ldr	r3, [pc, #16]	@ (8004e64 <xTraceStackMonitorInitialize+0x50>)
 8004e54:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b004      	add	sp, #16
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20002278 	.word	0x20002278
 8004e64:	20003060 	.word	0x20003060

08004e68 <xTraceStackMonitorAdd>:

traceResult xTraceStackMonitorAdd(void *pvTask)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	TraceUnsignedBaseType_t uxLowMark = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR));

	if (pvTask == 0)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xTraceStackMonitorAdd+0x16>
	{
		/* We don't add null addresses */
		return TRC_FAIL;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e041      	b.n	8004f02 <xTraceStackMonitorAdd+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e82:	617b      	str	r3, [r7, #20]
  return(result);
 8004e84:	697b      	ldr	r3, [r7, #20]
	}
	
	TRACE_ENTER_CRITICAL_SECTION();
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			@ (mov r8, r8)

	if (pxStackMonitor->uxEntryCount >= (TRC_CFG_STACK_MONITOR_MAX_TASKS))
 8004e94:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9a:	2b09      	cmp	r3, #9
 8004e9c:	d90a      	bls.n	8004eb4 <xTraceStackMonitorAdd+0x4c>
	{
		xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS);
 8004e9e:	2003      	movs	r0, #3
 8004ea0:	f7fe f986 	bl	80031b0 <xTraceDiagnosticsIncrease>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
		
		TRACE_EXIT_CRITICAL_SECTION();
		
		return TRC_FAIL;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e026      	b.n	8004f02 <xTraceStackMonitorAdd+0x9a>
	}

	if (xTraceKernelPortGetUnusedStack(pvTask, &uxLowMark) == TRC_SUCCESS)
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	18fa      	adds	r2, r7, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	0011      	movs	r1, r2
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff fc03 	bl	80046c8 <xTraceKernelPortGetUnusedStack>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d116      	bne.n	8004ef4 <xTraceStackMonitorAdd+0x8c>
	{
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].pvTask = pvTask;
 8004ec6:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	5099      	str	r1, [r3, r2]
		pxStackMonitor->xEntries[pxStackMonitor->uxEntryCount].uxPreviousLowWaterMark = uxLowMark;
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	18cb      	adds	r3, r1, r3
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	601a      	str	r2, [r3, #0]

		pxStackMonitor->uxEntryCount++;
 8004eea:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <xTraceStackMonitorAdd+0xa4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ef0:	3201      	adds	r2, #1
 8004ef2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
	}
	
	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b008      	add	sp, #32
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	20002278 	.word	0x20002278

08004f10 <xTraceStackMonitorReport>:

	return TRC_SUCCESS;
}

traceResult xTraceStackMonitorReport(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxLowWaterMark = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	603b      	str	r3, [r7, #0]
#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_ENTER_CRITICAL_SECTION();
#endif

	/* Never report more than there are entries */
	uxToReport = TRC_CFG_STACK_MONITOR_MAX_REPORTS <= pxStackMonitor->uxEntryCount ? TRC_CFG_STACK_MONITOR_MAX_REPORTS : pxStackMonitor->uxEntryCount;
 8004f1a:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <xTraceStackMonitorReport+0xa8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	4193      	sbcs	r3, r2
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < uxToReport; i++)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e03b      	b.n	8004fa6 <xTraceStackMonitorReport+0x96>
	{
		/* If uiCurrentIndex is too large, reset it */
		uiCurrentIndex = uiCurrentIndex < pxStackMonitor->uxEntryCount ? uiCurrentIndex : 0;
 8004f2e:	4b22      	ldr	r3, [pc, #136]	@ (8004fb8 <xTraceStackMonitorReport+0xa8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f34:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d902      	bls.n	8004f42 <xTraceStackMonitorReport+0x32>
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	e000      	b.n	8004f44 <xTraceStackMonitorReport+0x34>
 8004f42:	2200      	movs	r2, #0
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f46:	601a      	str	r2, [r3, #0]
		
		pxStackMonitorEntry = &pxStackMonitor->xEntries[uiCurrentIndex];
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <xTraceStackMonitorReport+0xa8>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	18d3      	adds	r3, r2, r3
 8004f54:	607b      	str	r3, [r7, #4]

		if (xTraceKernelPortGetUnusedStack(pxStackMonitorEntry->pvTask, &uxLowWaterMark) != TRC_SUCCESS)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	003a      	movs	r2, r7
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7ff fbb2 	bl	80046c8 <xTraceKernelPortGetUnusedStack>
 8004f64:	1e03      	subs	r3, r0, #0
 8004f66:	d005      	beq.n	8004f74 <xTraceStackMonitorReport+0x64>
		{
			uiCurrentIndex++;
 8004f68:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	4b13      	ldr	r3, [pc, #76]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f70:	601a      	str	r2, [r3, #0]
			continue;
 8004f72:	e015      	b.n	8004fa0 <xTraceStackMonitorReport+0x90>
		}

		if (uxLowWaterMark < pxStackMonitorEntry->uxPreviousLowWaterMark)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d902      	bls.n	8004f84 <xTraceStackMonitorReport+0x74>
		{
			pxStackMonitorEntry->uxPreviousLowWaterMark = uxLowWaterMark;
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
		}

		xTraceEventCreate2(PSF_EVENT_UNUSED_STACK, (TraceUnsignedBaseType_t)pxStackMonitorEntry->pvTask, pxStackMonitorEntry->uxPreviousLowWaterMark);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	0019      	movs	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	001a      	movs	r2, r3
 8004f90:	20eb      	movs	r0, #235	@ 0xeb
 8004f92:	f7fe fd01 	bl	8003998 <xTraceEventCreate2>

		uiCurrentIndex++;
 8004f96:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <xTraceStackMonitorReport+0xac>)
 8004f9e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < uxToReport; i++)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3bf      	bcc.n	8004f2e <xTraceStackMonitorReport+0x1e>

#if (TRC_CFG_ALLOW_TASK_DELETE == 1)
	TRACE_EXIT_CRITICAL_SECTION();
#endif

	return TRC_SUCCESS;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20002278 	.word	0x20002278
 8004fbc:	2000227c 	.word	0x2000227c

08004fc0 <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 8004fc8:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <xTraceStaticBufferInitialize+0x28>)
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	601a      	str	r2, [r3, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 8004fce:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <xTraceStaticBufferInitialize+0x2c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	02d2      	lsls	r2, r2, #11
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <xTraceStaticBufferInitialize+0x2c>)
 8004fda:	601a      	str	r2, [r3, #0]
	
	return TRC_SUCCESS;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	20002280 	.word	0x20002280
 8004fec:	20003060 	.word	0x20003060

08004ff0 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 8004ff6:	4b80      	ldr	r3, [pc, #512]	@ (80051f8 <xTraceInitialize+0x208>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e0f5      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	TRC_PORT_SPECIFIC_INIT();
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 8005002:	4b7e      	ldr	r3, [pc, #504]	@ (80051fc <xTraceInitialize+0x20c>)
 8005004:	4a7e      	ldr	r2, [pc, #504]	@ (8005200 <xTraceInitialize+0x210>)
 8005006:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 8005008:	4b7c      	ldr	r3, [pc, #496]	@ (80051fc <xTraceInitialize+0x20c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 8005010:	4b7a      	ldr	r3, [pc, #488]	@ (80051fc <xTraceInitialize+0x20c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8005018:	2300      	movs	r3, #0
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e009      	b.n	8005032 <xTraceInitialize+0x42>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 800501e:	4b77      	ldr	r3, [pc, #476]	@ (80051fc <xTraceInitialize+0x20c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	3202      	adds	r2, #2
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	2100      	movs	r1, #0
 800502a:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3301      	adds	r3, #1
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f2      	beq.n	800501e <xTraceInitialize+0x2e>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 8005038:	4b70      	ldr	r3, [pc, #448]	@ (80051fc <xTraceInitialize+0x20c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	0018      	movs	r0, r3
 8005040:	f7fe f928 	bl	8003294 <xTraceEntryIndexTableInitialize>
 8005044:	0003      	movs	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <xTraceInitialize+0x5e>
	{
		return TRC_FAIL;
 800504a:	2301      	movs	r3, #1
 800504c:	e0cf      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 800504e:	4b6b      	ldr	r3, [pc, #428]	@ (80051fc <xTraceInitialize+0x20c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	332c      	adds	r3, #44	@ 0x2c
 8005054:	0018      	movs	r0, r3
 8005056:	f000 f8e5 	bl	8005224 <xTraceHeaderInitialize>
 800505a:	0003      	movs	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <xTraceInitialize+0x74>
	{
		return TRC_FAIL;
 8005060:	2301      	movs	r3, #1
 8005062:	e0c4      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTable) == TRC_FAIL)
 8005064:	4b65      	ldr	r3, [pc, #404]	@ (80051fc <xTraceInitialize+0x20c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	334c      	adds	r3, #76	@ 0x4c
 800506a:	0018      	movs	r0, r3
 800506c:	f7fe f922 	bl	80032b4 <xTraceEntryTableInitialize>
 8005070:	0003      	movs	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <xTraceInitialize+0x8a>
	{
		return TRC_FAIL;
 8005076:	2301      	movs	r3, #1
 8005078:	e0b9      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 800507a:	4b60      	ldr	r3, [pc, #384]	@ (80051fc <xTraceInitialize+0x20c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	22a6      	movs	r2, #166	@ 0xa6
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	4694      	mov	ip, r2
 8005084:	4463      	add	r3, ip
 8005086:	0018      	movs	r0, r3
 8005088:	f000 fc3a 	bl	8005900 <xTraceTimestampInitialize>
 800508c:	0003      	movs	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <xTraceInitialize+0xa6>
	{
		return TRC_FAIL;
 8005092:	2301      	movs	r3, #1
 8005094:	e0ab      	b.n	80051ee <xTraceInitialize+0x1fe>
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 8005096:	4b59      	ldr	r3, [pc, #356]	@ (80051fc <xTraceInitialize+0x20c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	22dd      	movs	r2, #221	@ 0xdd
 800509c:	0112      	lsls	r2, r2, #4
 800509e:	4694      	mov	ip, r2
 80050a0:	4463      	add	r3, ip
 80050a2:	0018      	movs	r0, r3
 80050a4:	f7fe f826 	bl	80030f4 <xTraceCounterInitialize>
 80050a8:	0003      	movs	r3, r0
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <xTraceInitialize+0xc2>
	{
		return TRC_FAIL;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e09d      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStackMonitorInitialize(&pxTraceRecorderData->xStackMonitorBuffer) == TRC_FAIL)
 80050b2:	4b52      	ldr	r3, [pc, #328]	@ (80051fc <xTraceInitialize+0x20c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a53      	ldr	r2, [pc, #332]	@ (8005204 <xTraceInitialize+0x214>)
 80050b8:	4694      	mov	ip, r2
 80050ba:	4463      	add	r3, ip
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fea9 	bl	8004e14 <xTraceStackMonitorInitialize>
 80050c2:	0003      	movs	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <xTraceInitialize+0xdc>
	{
		return TRC_FAIL;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e090      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 80050cc:	4b4b      	ldr	r3, [pc, #300]	@ (80051fc <xTraceInitialize+0x20c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	22ad      	movs	r2, #173	@ 0xad
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	4694      	mov	ip, r2
 80050d6:	4463      	add	r3, ip
 80050d8:	0018      	movs	r0, r3
 80050da:	f7fd ffc7 	bl	800306c <xTraceStreamPortInitialize>
 80050de:	0003      	movs	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <xTraceInitialize+0xf8>
	{
		return TRC_FAIL;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e082      	b.n	80051ee <xTraceInitialize+0x1fe>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 80050e8:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <xTraceInitialize+0x20c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a46      	ldr	r2, [pc, #280]	@ (8005208 <xTraceInitialize+0x218>)
 80050ee:	4694      	mov	ip, r2
 80050f0:	4463      	add	r3, ip
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7fe f81a 	bl	800312c <xTraceDiagnosticsInitialize>
 80050f8:	0003      	movs	r3, r0
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <xTraceInitialize+0x112>
	{
		return TRC_FAIL;
 80050fe:	2301      	movs	r3, #1
 8005100:	e075      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 8005102:	4b3e      	ldr	r3, [pc, #248]	@ (80051fc <xTraceInitialize+0x20c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a41      	ldr	r2, [pc, #260]	@ (800520c <xTraceInitialize+0x21c>)
 8005108:	4694      	mov	ip, r2
 800510a:	4463      	add	r3, ip
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff fa29 	bl	8004564 <xTraceExtensionInitialize>
 8005112:	0003      	movs	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <xTraceInitialize+0x12c>
	{
		return TRC_FAIL;
 8005118:	2301      	movs	r3, #1
 800511a:	e068      	b.n	80051ee <xTraceInitialize+0x1fe>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 800511c:	4b37      	ldr	r3, [pc, #220]	@ (80051fc <xTraceInitialize+0x20c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3b      	ldr	r2, [pc, #236]	@ (8005210 <xTraceInitialize+0x220>)
 8005122:	4694      	mov	ip, r2
 8005124:	4463      	add	r3, ip
 8005126:	0018      	movs	r0, r3
 8005128:	f7ff ff4a 	bl	8004fc0 <xTraceStaticBufferInitialize>
 800512c:	0003      	movs	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <xTraceInitialize+0x146>
	{
		return TRC_FAIL;
 8005132:	2301      	movs	r3, #1
 8005134:	e05b      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8005136:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <xTraceInitialize+0x20c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a36      	ldr	r2, [pc, #216]	@ (8005214 <xTraceInitialize+0x224>)
 800513c:	4694      	mov	ip, r2
 800513e:	4463      	add	r3, ip
 8005140:	0018      	movs	r0, r3
 8005142:	f7fe fb8b 	bl	800385c <xTraceEventInitialize>
 8005146:	0003      	movs	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <xTraceInitialize+0x160>
	{
		return TRC_FAIL;
 800514c:	2301      	movs	r3, #1
 800514e:	e04e      	b.n	80051ee <xTraceInitialize+0x1fe>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <xTraceInitialize+0x20c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a30      	ldr	r2, [pc, #192]	@ (8005218 <xTraceInitialize+0x228>)
 8005156:	4694      	mov	ip, r2
 8005158:	4463      	add	r3, ip
 800515a:	0018      	movs	r0, r3
 800515c:	f7ff fc8c 	bl	8004a78 <xTracePrintInitialize>
 8005160:	0003      	movs	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <xTraceInitialize+0x17a>
	{
		return TRC_FAIL;
 8005166:	2301      	movs	r3, #1
 8005168:	e041      	b.n	80051ee <xTraceInitialize+0x1fe>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <xTraceInitialize+0x20c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2b      	ldr	r2, [pc, #172]	@ (800521c <xTraceInitialize+0x22c>)
 8005170:	4694      	mov	ip, r2
 8005172:	4463      	add	r3, ip
 8005174:	0018      	movs	r0, r3
 8005176:	f7fe fa29 	bl	80035cc <xTraceErrorInitialize>
 800517a:	0003      	movs	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <xTraceInitialize+0x194>
	{
		return TRC_FAIL;
 8005180:	2301      	movs	r3, #1
 8005182:	e034      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 8005184:	4b1d      	ldr	r3, [pc, #116]	@ (80051fc <xTraceInitialize+0x20c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	22d3      	movs	r2, #211	@ 0xd3
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	4694      	mov	ip, r2
 800518e:	4463      	add	r3, ip
 8005190:	0018      	movs	r0, r3
 8005192:	f7ff fa5b 	bl	800464c <xTraceISRInitialize>
 8005196:	0003      	movs	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <xTraceInitialize+0x1b0>
	{
		return TRC_FAIL;
 800519c:	2301      	movs	r3, #1
 800519e:	e026      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 80051a0:	4b16      	ldr	r3, [pc, #88]	@ (80051fc <xTraceInitialize+0x20c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	22d6      	movs	r2, #214	@ 0xd6
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	4694      	mov	ip, r2
 80051aa:	4463      	add	r3, ip
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fb33 	bl	8005818 <xTraceTaskInitialize>
 80051b2:	0003      	movs	r3, r0
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <xTraceInitialize+0x1cc>
	{
		return TRC_FAIL;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e018      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <xTraceInitialize+0x20c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a17      	ldr	r2, [pc, #92]	@ (8005220 <xTraceInitialize+0x230>)
 80051c2:	4694      	mov	ip, r2
 80051c4:	4463      	add	r3, ip
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7ff fa90 	bl	80046ec <xTraceKernelPortInitialize>
 80051cc:	0003      	movs	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <xTraceInitialize+0x1e6>
	{
		return TRC_FAIL;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00b      	b.n	80051ee <xTraceInitialize+0x1fe>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 80051d6:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <xTraceInitialize+0x20c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	4252      	negs	r2, r2
 80051de:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <xTraceInitialize+0x208>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	431a      	orrs	r2, r3
 80051e8:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <xTraceInitialize+0x208>)
 80051ea:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b002      	add	sp, #8
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	20003060 	.word	0x20003060
 80051fc:	20003058 	.word	0x20003058
 8005200:	20002284 	.word	0x20002284
 8005204:	00000d64 	.word	0x00000d64
 8005208:	00000db8 	.word	0x00000db8
 800520c:	00000dcc 	.word	0x00000dcc
 8005210:	00000ad4 	.word	0x00000ad4
 8005214:	00000d14 	.word	0x00000d14
 8005218:	00000d1c 	.word	0x00000d1c
 800521c:	00000d24 	.word	0x00000d24
 8005220:	00000d58 	.word	0x00000d58

08005224 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800522c:	4b41      	ldr	r3, [pc, #260]	@ (8005334 <xTraceHeaderInitialize+0x110>)
 800522e:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 8005236:	2301      	movs	r3, #1
 8005238:	e078      	b.n	800532c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 800523a:	2382      	movs	r3, #130	@ 0x82
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	0018      	movs	r0, r3
 8005240:	f000 faa4 	bl	800578c <prvVerifySizeAlignment>
 8005244:	0003      	movs	r3, r0
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <xTraceHeaderInitialize+0x2a>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800524a:	2301      	movs	r3, #1
 800524c:	e06e      	b.n	800532c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 800524e:	2008      	movs	r0, #8
 8005250:	f000 fa9c 	bl	800578c <prvVerifySizeAlignment>
 8005254:	0003      	movs	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <xTraceHeaderInitialize+0x3a>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800525a:	2301      	movs	r3, #1
 800525c:	e066      	b.n	800532c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 800525e:	2008      	movs	r0, #8
 8005260:	f000 fa94 	bl	800578c <prvVerifySizeAlignment>
 8005264:	0003      	movs	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <xTraceHeaderInitialize+0x4a>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800526a:	2301      	movs	r3, #1
 800526c:	e05e      	b.n	800532c <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 800526e:	4b32      	ldr	r3, [pc, #200]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 8005274:	4b30      	ldr	r3, [pc, #192]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	@ (800533c <xTraceHeaderInitialize+0x118>)
 800527a:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 800527c:	4b2e      	ldr	r3, [pc, #184]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	220e      	movs	r2, #14
 8005282:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 8005284:	4b2c      	ldr	r3, [pc, #176]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2d      	ldr	r2, [pc, #180]	@ (8005340 <xTraceHeaderInitialize+0x11c>)
 800528a:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e013      	b.n	80052ba <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	18d1      	adds	r1, r2, r3
 8005298:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	7809      	ldrb	r1, [r1, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	3318      	adds	r3, #24
 80052a4:	1c0a      	adds	r2, r1, #0
 80052a6:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b07      	cmp	r3, #7
 80052be:	d9e8      	bls.n	8005292 <xTraceHeaderInitialize+0x6e>
 80052c0:	e000      	b.n	80052c4 <xTraceHeaderInitialize+0xa0>
		{
			break;
 80052c2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 80052c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2202      	movs	r2, #2
 80052d2:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 80052d4:	4b18      	ldr	r3, [pc, #96]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2201      	movs	r2, #1
 80052e2:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 80052e4:	4b14      	ldr	r3, [pc, #80]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	21c0      	movs	r1, #192	@ 0xc0
 80052f0:	0089      	lsls	r1, r1, #2
 80052f2:	430a      	orrs	r2, r1
 80052f4:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80052f6:	4b10      	ldr	r3, [pc, #64]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 8005306:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 8005312:	f000 f8e3 	bl	80054dc <prvIs64bit>
 8005316:	1e03      	subs	r3, r0, #0
 8005318:	d007      	beq.n	800532a <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 800531a:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <xTraceHeaderInitialize+0x114>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2108      	movs	r1, #8
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 800532a:	2300      	movs	r3, #0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b004      	add	sp, #16
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08006764 	.word	0x08006764
 8005338:	2000305c 	.word	0x2000305c
 800533c:	50534600 	.word	0x50534600
 8005340:	00001aa1 	.word	0x00001aa1

08005344 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 800534c:	2310      	movs	r3, #16
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	0018      	movs	r0, r3
 8005352:	2308      	movs	r3, #8
 8005354:	001a      	movs	r2, r3
 8005356:	2100      	movs	r1, #0
 8005358:	f001 f860 	bl	800641c <memset>
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 800535c:	f7ff fe48 	bl	8004ff0 <xTraceInitialize>
 8005360:	0003      	movs	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <xTraceEnable+0x26>
	{
		return TRC_FAIL;
 8005366:	2301      	movs	r3, #1
 8005368:	e056      	b.n	8005418 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f7fd fe91 	bl	8003094 <xTraceStreamPortOnEnable>
 8005372:	0003      	movs	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 8005378:	2301      	movs	r3, #1
 800537a:	e04d      	b.n	8005418 <xTraceEnable+0xd4>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 800537c:	f7ff f9d2 	bl	8004724 <xTraceKernelPortEnable>
 8005380:	0003      	movs	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <xTraceEnable+0x46>
	{
		return TRC_FAIL;
 8005386:	2301      	movs	r3, #1
 8005388:	e046      	b.n	8005418 <xTraceEnable+0xd4>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d12e      	bne.n	80053ee <xTraceEnable+0xaa>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 8005394:	4b22      	ldr	r3, [pc, #136]	@ (8005420 <xTraceEnable+0xdc>)
 8005396:	2284      	movs	r2, #132	@ 0x84
 8005398:	589a      	ldr	r2, [r3, r2]
 800539a:	4b21      	ldr	r3, [pc, #132]	@ (8005420 <xTraceEnable+0xdc>)
 800539c:	2188      	movs	r1, #136	@ 0x88
 800539e:	585b      	ldr	r3, [r3, r1]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d00a      	beq.n	80053ba <xTraceEnable+0x76>
 80053a4:	2310      	movs	r3, #16
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2208      	movs	r2, #8
 80053aa:	0019      	movs	r1, r3
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fd fd2d 	bl	8002e0c <SEGGER_RTT_Read>
 80053b2:	0003      	movs	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <xTraceEnable+0x78>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <xTraceEnable+0x82>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 80053c0:	200b      	movs	r0, #11
 80053c2:	f7fe f925 	bl	8003610 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10a      	bne.n	80053e2 <xTraceEnable+0x9e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 80053cc:	2410      	movs	r4, #16
 80053ce:	193b      	adds	r3, r7, r4
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f985 	bl	80056e0 <prvIsValidCommand>
 80053d6:	1e03      	subs	r3, r0, #0
 80053d8:	d003      	beq.n	80053e2 <xTraceEnable+0x9e>
				{
					prvProcessCommand(&xCommand);
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 f9be 	bl	800575e <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <xTraceEnable+0xe0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0d1      	beq.n	8005390 <xTraceEnable+0x4c>
 80053ec:	e013      	b.n	8005416 <xTraceEnable+0xd2>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10b      	bne.n	800540c <xTraceEnable+0xc8>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 80053f4:	2110      	movs	r1, #16
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
		xCommand.param1 = 1u;
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	2201      	movs	r2, #1
 8005400:	705a      	strb	r2, [r3, #1]
		prvProcessCommand(&xCommand);
 8005402:	187b      	adds	r3, r7, r1
 8005404:	0018      	movs	r0, r3
 8005406:	f000 f9aa 	bl	800575e <prvProcessCommand>
 800540a:	e004      	b.n	8005416 <xTraceEnable+0xd2>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <xTraceEnable+0xd2>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xTraceEnable+0xd4>
	}

	return TRC_SUCCESS;
 8005416:	2300      	movs	r3, #0
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b007      	add	sp, #28
 800541e:	bd90      	pop	{r4, r7, pc}
 8005420:	20001d94 	.word	0x20001d94
 8005424:	20003058 	.word	0x20003058

08005428 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 800542c:	f000 f8b0 	bl	8005590 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 8005430:	2300      	movs	r3, #0
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 800543e:	2308      	movs	r3, #8
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	0018      	movs	r0, r3
 8005444:	2308      	movs	r3, #8
 8005446:	001a      	movs	r2, r3
 8005448:	2100      	movs	r1, #0
 800544a:	f000 ffe7 	bl	800641c <memset>
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 8005452:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <xTraceTzCtrl+0x98>)
 8005454:	2284      	movs	r2, #132	@ 0x84
 8005456:	589a      	ldr	r2, [r3, r2]
 8005458:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <xTraceTzCtrl+0x98>)
 800545a:	2188      	movs	r1, #136	@ 0x88
 800545c:	585b      	ldr	r3, [r3, r1]
 800545e:	429a      	cmp	r2, r3
 8005460:	d00a      	beq.n	8005478 <xTraceTzCtrl+0x40>
 8005462:	2308      	movs	r3, #8
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2208      	movs	r2, #8
 8005468:	0019      	movs	r1, r3
 800546a:	2001      	movs	r0, #1
 800546c:	f7fd fcce 	bl	8002e0c <SEGGER_RTT_Read>
 8005470:	0003      	movs	r3, r0
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <xTraceTzCtrl+0x42>
 8005478:	2300      	movs	r3, #0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <xTraceTzCtrl+0x4e>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 800547e:	f7ff ffd3 	bl	8005428 <xTraceDisable>

			return TRC_FAIL;
 8005482:	2301      	movs	r3, #1
 8005484:	e01f      	b.n	80054c6 <xTraceTzCtrl+0x8e>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d10a      	bne.n	80054a2 <xTraceTzCtrl+0x6a>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 800548c:	2408      	movs	r4, #8
 800548e:	193b      	adds	r3, r7, r4
 8005490:	0018      	movs	r0, r3
 8005492:	f000 f925 	bl	80056e0 <prvIsValidCommand>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d003      	beq.n	80054a2 <xTraceTzCtrl+0x6a>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 800549a:	193b      	adds	r3, r7, r4
 800549c:	0018      	movs	r0, r3
 800549e:	f000 f95e 	bl	800575e <prvProcessCommand>
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dcd2      	bgt.n	800544e <xTraceTzCtrl+0x16>

	if (xTraceIsRecorderEnabled())
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <xTraceTzCtrl+0x9c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	4013      	ands	r3, r2
 80054b0:	d008      	beq.n	80054c4 <xTraceTzCtrl+0x8c>
 80054b2:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <xTraceTzCtrl+0xa0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <xTraceTzCtrl+0x8c>
	{
		(void)xTraceDiagnosticsCheckStatus();
 80054bc:	f7fd fea8 	bl	8003210 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
 80054c0:	f7ff fd26 	bl	8004f10 <xTraceStackMonitorReport>
	}

	return TRC_SUCCESS;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b005      	add	sp, #20
 80054cc:	bd90      	pop	{r4, r7, pc}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	20001d94 	.word	0x20001d94
 80054d4:	20003060 	.word	0x20003060
 80054d8:	20003058 	.word	0x20003058

080054dc <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 80054f2:	2300      	movs	r3, #0
 80054f4:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 80054f6:	4b22      	ldr	r3, [pc, #136]	@ (8005580 <prvSetRecorderEnabled+0x98>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d03a      	beq.n	8005576 <prvSetRecorderEnabled+0x8e>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 8005500:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <prvSetRecorderEnabled+0x9c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 800550e:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <prvSetRecorderEnabled+0x9c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <prvSetRecorderEnabled+0xa0>)
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 8005518:	4b1a      	ldr	r3, [pc, #104]	@ (8005584 <prvSetRecorderEnabled+0x9c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <prvSetRecorderEnabled+0x4a>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 8005526:	4b19      	ldr	r3, [pc, #100]	@ (800558c <prvSetRecorderEnabled+0xa4>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b16      	ldr	r3, [pc, #88]	@ (8005584 <prvSetRecorderEnabled+0x9c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3201      	adds	r2, #1
 8005530:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8310 	mrs	r3, PRIMASK
 8005536:	60bb      	str	r3, [r7, #8]
  return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	2301      	movs	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f383 8810 	msr	PRIMASK, r3
}
 8005546:	46c0      	nop			@ (mov r8, r8)
	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 8005548:	f000 f846 	bl	80055d8 <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 800554c:	f000 f852 	bl	80055f4 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 8005550:	f000 f862 	bl	8005618 <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 8005554:	f000 f89a 	bl	800568c <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 8005558:	4b09      	ldr	r3, [pc, #36]	@ (8005580 <prvSetRecorderEnabled+0x98>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	3201      	adds	r2, #1
 8005560:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 8005562:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <prvSetRecorderEnabled+0x98>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f383 8810 	msr	PRIMASK, r3
}
 8005574:	e000      	b.n	8005578 <prvSetRecorderEnabled+0x90>
		return;
 8005576:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();
}
 8005578:	46bd      	mov	sp, r7
 800557a:	b006      	add	sp, #24
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	20003058 	.word	0x20003058
 8005584:	20003068 	.word	0x20003068
 8005588:	20000008 	.word	0x20000008
 800558c:	e000e014 	.word	0xe000e014

08005590 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 8005596:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <prvSetRecorderDisabled+0x44>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d014      	beq.n	80055ca <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a0:	f3ef 8310 	mrs	r3, PRIMASK
 80055a4:	603b      	str	r3, [r7, #0]
  return(result);
 80055a6:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	2301      	movs	r3, #1
 80055ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f383 8810 	msr	PRIMASK, r3
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 80055b6:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <prvSetRecorderDisabled+0x44>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	e000      	b.n	80055cc <prvSetRecorderDisabled+0x3c>
		return;
 80055ca:	46c0      	nop			@ (mov r8, r8)

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	20003058 	.word	0x20003058

080055d8 <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)pxHeader, sizeof(TraceHeader_t));
 80055dc:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <prvTraceStoreHeader+0x18>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2120      	movs	r1, #32
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fe fb58 	bl	8003c98 <xTraceEventCreateRawBlocking>
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	2000305c 	.word	0x2000305c

080055f4 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
	xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t*)&pxTraceRecorderData->xTimestampBuffer,sizeof(TraceTimestampData_t));
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <prvTraceStoreTimestampInfo+0x20>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	22a6      	movs	r2, #166	@ 0xa6
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	4694      	mov	ip, r2
 8005602:	4463      	add	r3, ip
 8005604:	211c      	movs	r1, #28
 8005606:	0018      	movs	r0, r3
 8005608:	f7fe fb46 	bl	8003c98 <xTraceEventCreateRawBlocking>
}
 800560c:	46c0      	nop			@ (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	20003058 	.word	0x20003058

08005618 <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	TraceUnsignedBaseType_t xHeaderData[3];
	void *pvEntryAddress;

	(void)xTraceEntryGetCount(&uiEntryCount);
 8005622:	2314      	movs	r3, #20
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	0018      	movs	r0, r3
 8005628:	f7fd ff54 	bl	80034d4 <xTraceEntryGetCount>

	xHeaderData[0] = (TraceUnsignedBaseType_t)uiEntryCount;
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	2108      	movs	r1, #8
 8005630:	187b      	adds	r3, r7, r1
 8005632:	601a      	str	r2, [r3, #0]
	xHeaderData[1] = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 8005634:	187b      	adds	r3, r7, r1
 8005636:	2210      	movs	r2, #16
 8005638:	605a      	str	r2, [r3, #4]
	xHeaderData[2] = TRC_ENTRY_TABLE_STATE_COUNT;
 800563a:	187b      	adds	r3, r7, r1
 800563c:	2203      	movs	r2, #3
 800563e:	609a      	str	r2, [r3, #8]

	xTraceEventCreateRawBlocking(xHeaderData, sizeof(xHeaderData));
 8005640:	187b      	adds	r3, r7, r1
 8005642:	210c      	movs	r1, #12
 8005644:	0018      	movs	r0, r3
 8005646:	f7fe fb27 	bl	8003c98 <xTraceEventCreateRawBlocking>

	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e014      	b.n	800567a <prvTraceStoreEntryTable+0x62>
	{
		(void)xTraceEntryGetAtIndex(i, &xEntryHandle);
 8005650:	2318      	movs	r3, #24
 8005652:	18fa      	adds	r2, r7, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f7fd ff4d 	bl	80034f8 <xTraceEntryGetAtIndex>
		(void)xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	607b      	str	r3, [r7, #4]

		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <prvTraceStoreEntryTable+0x5c>
		{
			xTraceEventCreateRawBlocking((TraceUnsignedBaseType_t *) xEntryHandle, sizeof(TraceEntry_t));
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2124      	movs	r1, #36	@ 0x24
 800566e:	0018      	movs	r0, r3
 8005670:	f7fe fb12 	bl	8003c98 <xTraceEventCreateRawBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d9e7      	bls.n	8005650 <prvTraceStoreEntryTable+0x38>
		}
	}

}
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b008      	add	sp, #32
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e011      	b.n	80056c0 <prvTraceStoreStartEvent+0x34>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 800569c:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <prvTraceStoreStartEvent+0x50>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	58d3      	ldr	r3, [r2, r3]
 80056a6:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	001a      	movs	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	2110      	movs	r1, #16
 80056b2:	185b      	adds	r3, r3, r1
 80056b4:	19db      	adds	r3, r3, r7
 80056b6:	3b0c      	subs	r3, #12
 80056b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ea      	beq.n	800569c <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	2204      	movs	r2, #4
 80056ca:	0019      	movs	r1, r3
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fe fb2f 	bl	8003d30 <xTraceEventCreateDataOffline0>
}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	20003064 	.word	0x20003064

080056e0 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 80056f0:	18d3      	adds	r3, r2, r3
 80056f2:	b2da      	uxtb	r2, r3
												cmd->param2 +
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 80056f8:	18d3      	adds	r3, r2, r3
 80056fa:	b2da      	uxtb	r2, r3
												cmd->param3 +
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	b2da      	uxtb	r2, r3
												cmd->param4 +
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	b2da      	uxtb	r2, r3
												cmd->param5);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005710:	18d3      	adds	r3, r2, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	001a      	movs	r2, r3
 8005716:	210e      	movs	r1, #14
 8005718:	187b      	adds	r3, r7, r1
 800571a:	43d2      	mvns	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	79da      	ldrb	r2, [r3, #7]
 8005722:	187b      	adds	r3, r7, r1
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <prvIsValidCommand+0x54>
	{
		return 0;
 8005730:	2300      	movs	r3, #0
 8005732:	e010      	b.n	8005756 <prvIsValidCommand+0x76>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	799a      	ldrb	r2, [r3, #6]
 8005738:	230e      	movs	r3, #14
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <prvIsValidCommand+0x68>
	{
		return 0;
 8005744:	2300      	movs	r3, #0
 8005746:	e006      	b.n	8005756 <prvIsValidCommand+0x76>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d901      	bls.n	8005754 <prvIsValidCommand+0x74>
	{
		return 0;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <prvIsValidCommand+0x76>
	}

	return 1;
 8005754:	2301      	movs	r3, #1
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b004      	add	sp, #16
 800575c:	bd80      	pop	{r7, pc}

0800575e <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d109      	bne.n	8005782 <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d102      	bne.n	800577c <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8005776:	f7ff feb7 	bl	80054e8 <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 800577a:	e003      	b.n	8005784 <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 800577c:	f7ff ff08 	bl	8005590 <prvSetRecorderDisabled>
		  	break;
 8005780:	e000      	b.n	8005784 <prvProcessCommand+0x26>
		default:
		  	break;
 8005782:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005784:	46c0      	nop			@ (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
static traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	4013      	ands	r3, r2
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	4193      	sbcs	r3, r2
 800579e:	b2db      	uxtb	r3, r3
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b002      	add	sp, #8
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 80057b6:	230c      	movs	r3, #12
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7fd fdd4 	bl	8003368 <xTraceEntryCreate>
 80057c0:	0003      	movs	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e022      	b.n	8005810 <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e002      	b.n	80057d6 <xTraceStringRegister+0x2e>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3301      	adds	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	18d3      	adds	r3, r2, r3
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <xTraceStringRegister+0x40>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	ddf3      	ble.n	80057d0 <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fd fe44 	bl	8003480 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	0019      	movs	r1, r3
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3301      	adds	r3, #1
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	2003      	movs	r0, #3
 800580a:	f7fe fb0f 	bl	8003e2c <xTraceEventCreateData1>
 800580e:	0003      	movs	r3, r0
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b006      	add	sp, #24
 8005816:	bd80      	pop	{r7, pc}

08005818 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 8005820:	4b0e      	ldr	r3, [pc, #56]	@ (800585c <xTraceTaskInitialize+0x44>)
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	601a      	str	r2, [r3, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e008      	b.n	800583e <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800582c:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <xTraceTaskInitialize+0x44>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	2102      	movs	r1, #2
 8005836:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	ddf3      	ble.n	800582c <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <xTraceTaskInitialize+0x48>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2280      	movs	r2, #128	@ 0x80
 800584a:	0352      	lsls	r2, r2, #13
 800584c:	431a      	orrs	r2, r3
 800584e:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <xTraceTaskInitialize+0x48>)
 8005850:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005852:	2300      	movs	r3, #0
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b004      	add	sp, #16
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20003064 	.word	0x20003064
 8005860:	20003060 	.word	0x20003060

08005864 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8005872:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <xTraceTaskSwitch+0x90>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2201      	movs	r2, #1
 8005878:	4013      	ands	r3, r2
 800587a:	d101      	bne.n	8005880 <xTraceTaskSwitch+0x1c>
	{
		return xResult;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	e035      	b.n	80058ec <xTraceTaskSwitch+0x88>
	}

	if (!xTraceIsRecorderEnabled())
 8005880:	4b1c      	ldr	r3, [pc, #112]	@ (80058f4 <xTraceTaskSwitch+0x90>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
 8005888:	d004      	beq.n	8005894 <xTraceTaskSwitch+0x30>
 800588a:	4b1b      	ldr	r3, [pc, #108]	@ (80058f8 <xTraceTaskSwitch+0x94>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <xTraceTaskSwitch+0x3c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <xTraceTaskSwitch+0x98>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]

		return xResult;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	e025      	b.n	80058ec <xTraceTaskSwitch+0x88>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 80058a0:	4b15      	ldr	r3, [pc, #84]	@ (80058f8 <xTraceTaskSwitch+0x94>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2201      	movs	r2, #1
 80058a6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8310 	mrs	r3, PRIMASK
 80058ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ae:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	2301      	movs	r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f383 8810 	msr	PRIMASK, r3
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 80058be:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <xTraceTaskSwitch+0x98>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	0019      	movs	r1, r3
 80058cc:	2037      	movs	r0, #55	@ 0x37
 80058ce:	f7fe f863 	bl	8003998 <xTraceEventCreate2>
 80058d2:	0003      	movs	r3, r0
 80058d4:	61fb      	str	r3, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 80058d6:	4b08      	ldr	r3, [pc, #32]	@ (80058f8 <xTraceTaskSwitch+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2202      	movs	r2, #2
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			@ (mov r8, r8)

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b008      	add	sp, #32
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20003060 	.word	0x20003060
 80058f8:	20003058 	.word	0x20003058
 80058fc:	20003064 	.word	0x20003064

08005900 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 8005908:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 8005916:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 800591e:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2264      	movs	r2, #100	@ 0x64
 8005924:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 8005926:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2204      	movs	r2, #4
 800593c:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
 800593e:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	4b07      	ldr	r3, [pc, #28]	@ (8005964 <xTraceTimestampInitialize+0x64>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3a01      	subs	r2, #1
 800594a:	615a      	str	r2, [r3, #20]
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 800594c:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <xTraceTimestampInitialize+0x68>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2280      	movs	r2, #128	@ 0x80
 8005952:	0392      	lsls	r2, r2, #14
 8005954:	431a      	orrs	r2, r3
 8005956:	4b04      	ldr	r3, [pc, #16]	@ (8005968 <xTraceTimestampInitialize+0x68>)
 8005958:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800595a:	2300      	movs	r3, #0
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20003068 	.word	0x20003068
 8005968:	20003060 	.word	0x20003060

0800596c <main>:
// Kernel objects
xSemaphoreHandle xSem;

// Main function
int main()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8005972:	f000 f875 	bl	8005a60 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8005976:	f000 fb73 	bl	8006060 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 800597a:	f000 fbd1 	bl	8006120 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 800597e:	f000 fc1d 	bl	80061bc <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8005982:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <main+0xbc>)
 8005984:	0018      	movs	r0, r3
 8005986:	f000 fb25 	bl	8005fd4 <my_printf>
	// Adjust Systick prescaler before Tracing starts
	// Not doing this produces wrong time scale in Tracealyzer
	// SysTick_Config(SystemCoreClock/1000);

	// Start Trace Recording
	xTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 800598a:	2001      	movs	r0, #1
 800598c:	f7ff fcda 	bl	8005344 <xTraceEnable>

	// Create Semaphore
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8005990:	4b26      	ldr	r3, [pc, #152]	@ (8005a2c <main+0xc0>)
 8005992:	0018      	movs	r0, r3
 8005994:	f000 fb1e 	bl	8005fd4 <my_printf>
	xSem = xSemaphoreCreateBinary();
 8005998:	2203      	movs	r2, #3
 800599a:	2100      	movs	r1, #0
 800599c:	2001      	movs	r0, #1
 800599e:	f7fa fd5d 	bl	800045c <xQueueGenericCreate>
 80059a2:	0002      	movs	r2, r0
 80059a4:	4b22      	ldr	r3, [pc, #136]	@ (8005a30 <main+0xc4>)
 80059a6:	601a      	str	r2, [r3, #0]
	vTraceSetSemaphoreName(xSem, "xSEM");
 80059a8:	4b21      	ldr	r3, [pc, #132]	@ (8005a30 <main+0xc4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a21      	ldr	r2, [pc, #132]	@ (8005a34 <main+0xc8>)
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7fe fefc 	bl	80047ae <vTraceSetSemaphoreName>


	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 80059b6:	f7fd f875 	bl	8002aa4 <xPortGetFreeHeapSize>
 80059ba:	0003      	movs	r3, r0
 80059bc:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <main+0xcc>)
 80059c2:	0011      	movs	r1, r2
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fb05 	bl	8005fd4 <my_printf>

	// Create Tasks
	my_printf("Creating Tasks...");
 80059ca:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <main+0xd0>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 fb01 	bl	8005fd4 <my_printf>
	xTaskCreate(vTask1,	"Task_1", 128, NULL, 1, &vTask1_handle);
 80059d2:	491b      	ldr	r1, [pc, #108]	@ (8005a40 <main+0xd4>)
 80059d4:	481b      	ldr	r0, [pc, #108]	@ (8005a44 <main+0xd8>)
 80059d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a48 <main+0xdc>)
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	2301      	movs	r3, #1
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	2280      	movs	r2, #128	@ 0x80
 80059e2:	f7fb fb4a 	bl	800107a <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2", 128, NULL, 2, &vTask2_handle);
 80059e6:	4919      	ldr	r1, [pc, #100]	@ (8005a4c <main+0xe0>)
 80059e8:	4819      	ldr	r0, [pc, #100]	@ (8005a50 <main+0xe4>)
 80059ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005a54 <main+0xe8>)
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	2302      	movs	r3, #2
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	2280      	movs	r2, #128	@ 0x80
 80059f6:	f7fb fb40 	bl	800107a <xTaskCreate>
	my_printf("OK\r\n");
 80059fa:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <main+0xec>)
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fae9 	bl	8005fd4 <my_printf>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8005a02:	f7fd f84f 	bl	8002aa4 <xPortGetFreeHeapSize>
 8005a06:	0003      	movs	r3, r0
 8005a08:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <main+0xcc>)
 8005a0e:	0011      	movs	r1, r2
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 fadf 	bl	8005fd4 <my_printf>

	// Start the Scheduler
	my_printf("Now Starting Scheduler...\r\n");
 8005a16:	4b11      	ldr	r3, [pc, #68]	@ (8005a5c <main+0xf0>)
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 fadb 	bl	8005fd4 <my_printf>
	vTaskStartScheduler();
 8005a1e:	f7fb fce3 	bl	80013e8 <vTaskStartScheduler>
	while(1)
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	e7fd      	b.n	8005a22 <main+0xb6>
 8005a26:	46c0      	nop			@ (mov r8, r8)
 8005a28:	08006770 	.word	0x08006770
 8005a2c:	08006784 	.word	0x08006784
 8005a30:	20003074 	.word	0x20003074
 8005a34:	080067ac 	.word	0x080067ac
 8005a38:	080067b4 	.word	0x080067b4
 8005a3c:	080067d4 	.word	0x080067d4
 8005a40:	080067e8 	.word	0x080067e8
 8005a44:	08005b95 	.word	0x08005b95
 8005a48:	2000306c 	.word	0x2000306c
 8005a4c:	080067f0 	.word	0x080067f0
 8005a50:	08005bb9 	.word	0x08005bb9
 8005a54:	20003070 	.word	0x20003070
 8005a58:	080067f8 	.word	0x080067f8
 8005a5c:	08006800 	.word	0x08006800

08005a60 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8005a6a:	4b44      	ldr	r3, [pc, #272]	@ (8005b7c <SystemClock_Config+0x11c>)
 8005a6c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8005a6e:	4b44      	ldr	r3, [pc, #272]	@ (8005b80 <SystemClock_Config+0x120>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b43      	ldr	r3, [pc, #268]	@ (8005b80 <SystemClock_Config+0x120>)
 8005a74:	2180      	movs	r1, #128	@ 0x80
 8005a76:	02c9      	lsls	r1, r1, #11
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8005a7c:	4b40      	ldr	r3, [pc, #256]	@ (8005b80 <SystemClock_Config+0x120>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b3f      	ldr	r3, [pc, #252]	@ (8005b80 <SystemClock_Config+0x120>)
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	0249      	lsls	r1, r1, #9
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8005a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b80 <SystemClock_Config+0x120>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	4013      	ands	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]
		timeout--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <SystemClock_Config+0x48>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8005aa8:	4b35      	ldr	r3, [pc, #212]	@ (8005b80 <SystemClock_Config+0x120>)
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	4b34      	ldr	r3, [pc, #208]	@ (8005b80 <SystemClock_Config+0x120>)
 8005aae:	4935      	ldr	r1, [pc, #212]	@ (8005b84 <SystemClock_Config+0x124>)
 8005ab0:	400a      	ands	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8005ab4:	4b32      	ldr	r3, [pc, #200]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <SystemClock_Config+0x120>)
 8005aba:	2180      	movs	r1, #128	@ 0x80
 8005abc:	0249      	lsls	r1, r1, #9
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8005ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <SystemClock_Config+0x120>)
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ace:	492e      	ldr	r1, [pc, #184]	@ (8005b88 <SystemClock_Config+0x128>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8005ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ada:	2180      	movs	r1, #128	@ 0x80
 8005adc:	0349      	lsls	r1, r1, #13
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <SystemClock_Config+0x120>)
 8005ae8:	2180      	movs	r1, #128	@ 0x80
 8005aea:	0449      	lsls	r1, r1, #17
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8005af0:	4b23      	ldr	r3, [pc, #140]	@ (8005b80 <SystemClock_Config+0x120>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	049b      	lsls	r3, r3, #18
 8005af8:	4013      	ands	r3, r2
 8005afa:	607b      	str	r3, [r7, #4]
		timeout--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <SystemClock_Config+0xae>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b14:	21f0      	movs	r1, #240	@ 0xf0
 8005b16:	438a      	bics	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005b1a:	4a19      	ldr	r2, [pc, #100]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b1c:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8005b22:	4b17      	ldr	r3, [pc, #92]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4b16      	ldr	r3, [pc, #88]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b28:	4918      	ldr	r1, [pc, #96]	@ (8005b8c <SystemClock_Config+0x12c>)
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8005b2e:	4a14      	ldr	r2, [pc, #80]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b30:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b32:	6852      	ldr	r2, [r2, #4]
 8005b34:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8005b36:	4b16      	ldr	r3, [pc, #88]	@ (8005b90 <SystemClock_Config+0x130>)
 8005b38:	2211      	movs	r2, #17
 8005b3a:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8005b3c:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b0f      	ldr	r3, [pc, #60]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b42:	2103      	movs	r1, #3
 8005b44:	438a      	bics	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005b48:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b4e:	2102      	movs	r1, #2
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8005b54:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <SystemClock_Config+0x120>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	220c      	movs	r2, #12
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	603b      	str	r3, [r7, #0]
		timeout--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d002      	beq.n	8005b70 <SystemClock_Config+0x110>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f1      	bne.n	8005b54 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8005b70:	f000 fbce 	bl	8006310 <SystemCoreClockUpdate>
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b004      	add	sp, #16
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	000f4240 	.word	0x000f4240
 8005b80:	40021000 	.word	0x40021000
 8005b84:	fffe7fff 	.word	0xfffe7fff
 8005b88:	ffc3ffff 	.word	0xffc3ffff
 8005b8c:	fffff8ff 	.word	0xfffff8ff
 8005b90:	40022000 	.word	0x40022000

08005b94 <vTask1>:

/*
 *	Task1 toggles LED every 100ms
 */
void vTask1 (void *pvParameters)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LED_On();
 8005b9c:	f000 faac 	bl	80060f8 <BSP_LED_On>
		BSP_DELAY_ms(2000);
 8005ba0:	23fa      	movs	r3, #250	@ 0xfa
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 fb6d 	bl	8006284 <BSP_DELAY_ms>
		BSP_LED_Off();
 8005baa:	f000 faae 	bl	800610a <BSP_LED_Off>

		vTaskDelay(100);
 8005bae:	2064      	movs	r0, #100	@ 0x64
 8005bb0:	f7fb fbe8 	bl	8001384 <vTaskDelay>
		BSP_LED_On();
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	e7f1      	b.n	8005b9c <vTask1+0x8>

08005bb8 <vTask2>:

/*
 *	Task2 sends a message to console every 500ms
 */
void vTask2 (void *pvParameters)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	while(1) {
		xSemaphoreTake(xSem, portMAX_DELAY);
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <vTask2+0x24>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	4252      	negs	r2, r2
 8005bc8:	0011      	movs	r1, r2
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7fa ff84 	bl	8000ad8 <xQueueSemaphoreTake>

		my_printf("#");
 8005bd0:	4b03      	ldr	r3, [pc, #12]	@ (8005be0 <vTask2+0x28>)
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 f9fe 	bl	8005fd4 <my_printf>
		xSemaphoreTake(xSem, portMAX_DELAY);
 8005bd8:	46c0      	nop			@ (mov r8, r8)
 8005bda:	e7f1      	b.n	8005bc0 <vTask2+0x8>
 8005bdc:	20003074 	.word	0x20003074
 8005be0:	0800681c 	.word	0x0800681c

08005be4 <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 8005bee:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 8005bf0:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <vAssertCalled+0x30>)
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 f9ee 	bl	8005fd4 <my_printf>
	my_printf("File %s\r\n", file);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <vAssertCalled+0x34>)
 8005bfc:	0011      	movs	r1, r2
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 f9e8 	bl	8005fd4 <my_printf>
	my_printf("Line %d\r\n", line);
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <vAssertCalled+0x38>)
 8005c08:	0011      	movs	r1, r2
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 f9e2 	bl	8005fd4 <my_printf>

	while(1);
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	e7fd      	b.n	8005c10 <vAssertCalled+0x2c>
 8005c14:	08006820 	.word	0x08006820
 8005c18:	08006834 	.word	0x08006834
 8005c1c:	08006840 	.word	0x08006840

08005c20 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	if (str) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <printchar+0x26>
		**str = c;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
		++(*str);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8005c44:	e00a      	b.n	8005c5c <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <printchar+0x44>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2240      	movs	r2, #64	@ 0x40
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b40      	cmp	r3, #64	@ 0x40
 8005c52:	d1f9      	bne.n	8005c48 <printchar+0x28>
		USART2->TDR = c;
 8005c54:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <printchar+0x44>)
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40004400 	.word	0x40004400

08005c68 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	46c6      	mov	lr, r8
 8005c6c:	b500      	push	{lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8005c7a:	2400      	movs	r4, #0
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	4698      	mov	r8, r3

	if (width > 0) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd16      	ble.n	8005cb4 <prints+0x4c>
		register int len = 0;
 8005c86:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8005c88:	68be      	ldr	r6, [r7, #8]
 8005c8a:	e001      	b.n	8005c90 <prints+0x28>
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	3601      	adds	r6, #1
 8005c90:	7833      	ldrb	r3, [r6, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1fa      	bne.n	8005c8c <prints+0x24>
		if (len >= width) width = 0;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	429d      	cmp	r5, r3
 8005c9a:	db02      	blt.n	8005ca2 <prints+0x3a>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	e002      	b.n	8005ca8 <prints+0x40>
		else width -= len;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	1b5b      	subs	r3, r3, r5
 8005ca6:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2202      	movs	r2, #2
 8005cac:	4013      	ands	r3, r2
 8005cae:	d001      	beq.n	8005cb4 <prints+0x4c>
 8005cb0:	2330      	movs	r3, #48	@ 0x30
 8005cb2:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d119      	bne.n	8005cf0 <prints+0x88>
		for ( ; width > 0; --width) {
 8005cbc:	e008      	b.n	8005cd0 <prints+0x68>
			printchar (out, padchar);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7ff ffac 	bl	8005c20 <printchar>
			++pc;
 8005cc8:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dcf3      	bgt.n	8005cbe <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8005cd6:	e00b      	b.n	8005cf0 <prints+0x88>
		printchar (out, *string);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	0011      	movs	r1, r2
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7ff ff9c 	bl	8005c20 <printchar>
		++pc;
 8005ce8:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ef      	bne.n	8005cd8 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8005cf8:	e008      	b.n	8005d0c <prints+0xa4>
		printchar (out, padchar);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7ff ff8e 	bl	8005c20 <printchar>
		++pc;
 8005d04:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dcf3      	bgt.n	8005cfa <prints+0x92>
	}

	return pc;
 8005d12:	0023      	movs	r3, r4
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b004      	add	sp, #16
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	46b8      	mov	r8, r7
 8005d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d20 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	46ce      	mov	lr, r9
 8005d24:	4647      	mov	r7, r8
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b089      	sub	sp, #36	@ 0x24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	4699      	mov	r9, r3
 8005d38:	2600      	movs	r6, #0
	register unsigned int u = i;
 8005d3a:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <printi+0x40>
		print_buf[0] = '0';
 8005d42:	2114      	movs	r1, #20
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	2230      	movs	r2, #48	@ 0x30
 8005d48:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8005d4a:	187b      	adds	r3, r7, r1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8005d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d54:	1879      	adds	r1, r7, r1
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ff86 	bl	8005c68 <prints>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	e04e      	b.n	8005dfe <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <printi+0x5c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b0a      	cmp	r3, #10
 8005d6a:	d107      	bne.n	8005d7c <printi+0x5c>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da04      	bge.n	8005d7c <printi+0x5c>
		neg = 1;
 8005d72:	2301      	movs	r3, #1
 8005d74:	4699      	mov	r9, r3
		u = -i;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	425b      	negs	r3, r3
 8005d7a:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8005d7c:	2314      	movs	r3, #20
 8005d7e:	18fc      	adds	r4, r7, r3
 8005d80:	340b      	adds	r4, #11
	*s = '\0';
 8005d82:	2300      	movs	r3, #0
 8005d84:	7023      	strb	r3, [r4, #0]

	while (u) {
 8005d86:	e019      	b.n	8005dbc <printi+0x9c>
		t = u % b;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	f7fa fa41 	bl	8000214 <__aeabi_uidivmod>
 8005d92:	000b      	movs	r3, r1
 8005d94:	4698      	mov	r8, r3
		if( t >= 10 )
 8005d96:	4643      	mov	r3, r8
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	dd02      	ble.n	8005da2 <printi+0x82>
			t += letbase - '0' - 10;
 8005d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d9e:	3b3a      	subs	r3, #58	@ 0x3a
 8005da0:	4498      	add	r8, r3
		*--s = t + '0';
 8005da2:	4643      	mov	r3, r8
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	3c01      	subs	r4, #1
 8005da8:	3330      	adds	r3, #48	@ 0x30
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	7023      	strb	r3, [r4, #0]
		u /= b;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0019      	movs	r1, r3
 8005db2:	0028      	movs	r0, r5
 8005db4:	f7fa f9a8 	bl	8000108 <__udivsi3>
 8005db8:	0003      	movs	r3, r0
 8005dba:	001d      	movs	r5, r3
	while (u) {
 8005dbc:	2d00      	cmp	r5, #0
 8005dbe:	d1e3      	bne.n	8005d88 <printi+0x68>
	}

	if (neg) {
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <printi+0xc8>
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dce:	2202      	movs	r2, #2
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <printi+0xc8>
			printchar (out, '-');
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	212d      	movs	r1, #45	@ 0x2d
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff ff21 	bl	8005c20 <printchar>
			++pc;
 8005dde:	3601      	adds	r6, #1
			--width;
 8005de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de2:	3b01      	subs	r3, #1
 8005de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de6:	e002      	b.n	8005dee <printi+0xce>
		}
		else {
			*--s = '-';
 8005de8:	3c01      	subs	r4, #1
 8005dea:	232d      	movs	r3, #45	@ 0x2d
 8005dec:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8005dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	0021      	movs	r1, r4
 8005df6:	f7ff ff37 	bl	8005c68 <prints>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	18f3      	adds	r3, r6, r3
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b009      	add	sp, #36	@ 0x24
 8005e04:	bcc0      	pop	{r6, r7}
 8005e06:	46b9      	mov	r9, r7
 8005e08:	46b0      	mov	r8, r6
 8005e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e0c <print>:

static int print(char **out, const char *format, va_list args )
{
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0e:	b08b      	sub	sp, #44	@ 0x2c
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8005e18:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8005e1a:	e0c6      	b.n	8005faa <print+0x19e>
		if (*format == '%') {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b25      	cmp	r3, #37	@ 0x25
 8005e22:	d000      	beq.n	8005e26 <print+0x1a>
 8005e24:	e0b2      	b.n	8005f8c <print+0x180>
			++format;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d100      	bne.n	8005e3a <print+0x2e>
 8005e38:	e0bd      	b.n	8005fb6 <print+0x1aa>
			if (*format == '%') goto out;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b25      	cmp	r3, #37	@ 0x25
 8005e40:	d100      	bne.n	8005e44 <print+0x38>
 8005e42:	e0a5      	b.n	8005f90 <print+0x184>
			if (*format == '-') {
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b2d      	cmp	r3, #45	@ 0x2d
 8005e4a:	d10a      	bne.n	8005e62 <print+0x56>
				++format;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8005e52:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8005e54:	e005      	b.n	8005e62 <print+0x56>
				++format;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	4333      	orrs	r3, r6
 8005e60:	001e      	movs	r6, r3
			while (*format == '0') {
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b30      	cmp	r3, #48	@ 0x30
 8005e68:	d0f5      	beq.n	8005e56 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005e6a:	e00b      	b.n	8005e84 <print+0x78>
				width *= 10;
 8005e6c:	002b      	movs	r3, r5
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	195b      	adds	r3, r3, r5
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	001d      	movs	r5, r3
				width += *format - '0';
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	3b30      	subs	r3, #48	@ 0x30
 8005e7c:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60bb      	str	r3, [r7, #8]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e8a:	d903      	bls.n	8005e94 <print+0x88>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b39      	cmp	r3, #57	@ 0x39
 8005e92:	d9eb      	bls.n	8005e6c <print+0x60>
			}
			if( *format == 's' ) {
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b73      	cmp	r3, #115	@ 0x73
 8005e9a:	d10f      	bne.n	8005ebc <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8005ea6:	d000      	beq.n	8005eaa <print+0x9e>
 8005ea8:	e000      	b.n	8005eac <print+0xa0>
 8005eaa:	4949      	ldr	r1, [pc, #292]	@ (8005fd0 <print+0x1c4>)
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	0033      	movs	r3, r6
 8005eb0:	002a      	movs	r2, r5
 8005eb2:	f7ff fed9 	bl	8005c68 <prints>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	18e4      	adds	r4, r4, r3
				continue;
 8005eba:	e073      	b.n	8005fa4 <print+0x198>
			}
			if( *format == 'd' ) {
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b64      	cmp	r3, #100	@ 0x64
 8005ec2:	d10f      	bne.n	8005ee4 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	6819      	ldr	r1, [r3, #0]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	2361      	movs	r3, #97	@ 0x61
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	9601      	str	r6, [sp, #4]
 8005ed4:	9500      	str	r5, [sp, #0]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	220a      	movs	r2, #10
 8005eda:	f7ff ff21 	bl	8005d20 <printi>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	18e4      	adds	r4, r4, r3
				continue;
 8005ee2:	e05f      	b.n	8005fa4 <print+0x198>
			}
			if( *format == 'x' ) {
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b78      	cmp	r3, #120	@ 0x78
 8005eea:	d10f      	bne.n	8005f0c <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	2361      	movs	r3, #97	@ 0x61
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	9601      	str	r6, [sp, #4]
 8005efc:	9500      	str	r5, [sp, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	2210      	movs	r2, #16
 8005f02:	f7ff ff0d 	bl	8005d20 <printi>
 8005f06:	0003      	movs	r3, r0
 8005f08:	18e4      	adds	r4, r4, r3
				continue;
 8005f0a:	e04b      	b.n	8005fa4 <print+0x198>
			}
			if( *format == 'X' ) {
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b58      	cmp	r3, #88	@ 0x58
 8005f12:	d10f      	bne.n	8005f34 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	2341      	movs	r3, #65	@ 0x41
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	9601      	str	r6, [sp, #4]
 8005f24:	9500      	str	r5, [sp, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	2210      	movs	r2, #16
 8005f2a:	f7ff fef9 	bl	8005d20 <printi>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	18e4      	adds	r4, r4, r3
				continue;
 8005f32:	e037      	b.n	8005fa4 <print+0x198>
			}
			if( *format == 'u' ) {
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b75      	cmp	r3, #117	@ 0x75
 8005f3a:	d10f      	bne.n	8005f5c <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	2361      	movs	r3, #97	@ 0x61
 8005f48:	9302      	str	r3, [sp, #8]
 8005f4a:	9601      	str	r6, [sp, #4]
 8005f4c:	9500      	str	r5, [sp, #0]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	220a      	movs	r2, #10
 8005f52:	f7ff fee5 	bl	8005d20 <printi>
 8005f56:	0003      	movs	r3, r0
 8005f58:	18e4      	adds	r4, r4, r3
				continue;
 8005f5a:	e023      	b.n	8005fa4 <print+0x198>
			}
			if( *format == 'c' ) {
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b63      	cmp	r3, #99	@ 0x63
 8005f62:	d11f      	bne.n	8005fa4 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	2114      	movs	r1, #20
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8005f74:	187b      	adds	r3, r7, r1
 8005f76:	2200      	movs	r2, #0
 8005f78:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8005f7a:	1879      	adds	r1, r7, r1
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	0033      	movs	r3, r6
 8005f80:	002a      	movs	r2, r5
 8005f82:	f7ff fe71 	bl	8005c68 <prints>
 8005f86:	0003      	movs	r3, r0
 8005f88:	18e4      	adds	r4, r4, r3
				continue;
 8005f8a:	e00b      	b.n	8005fa4 <print+0x198>
			}
		}
		else {
		out:
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	e000      	b.n	8005f92 <print+0x186>
			if (*format == '%') goto out;
 8005f90:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	001a      	movs	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff fe3f 	bl	8005c20 <printchar>
			++pc;
 8005fa2:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d000      	beq.n	8005fb4 <print+0x1a8>
 8005fb2:	e733      	b.n	8005e1c <print+0x10>
 8005fb4:	e000      	b.n	8005fb8 <print+0x1ac>
			if (*format == '\0') break;
 8005fb6:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <print+0x1ba>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8005fc6:	0023      	movs	r3, r4
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b007      	add	sp, #28
 8005fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd0:	0800684c 	.word	0x0800684c

08005fd4 <my_printf>:

int my_printf(const char *format, ...)
{
 8005fd4:	b40f      	push	{r0, r1, r2, r3}
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8005fdc:	2314      	movs	r3, #20
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7ff ff0f 	bl	8005e0c <print>
 8005fee:	0003      	movs	r3, r0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	bc08      	pop	{r3}
 8005ffa:	b004      	add	sp, #16
 8005ffc:	4718      	bx	r3

08005ffe <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	af00      	add	r7, sp, #0
}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800600c:	46c0      	nop			@ (mov r8, r8)
 800600e:	e7fd      	b.n	800600c <HardFault_Handler+0x4>

08006010 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 800601a:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <EXTI4_15_IRQHandler+0x44>)
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	2380      	movs	r3, #128	@ 0x80
 8006020:	019b      	lsls	r3, r3, #6
 8006022:	4013      	ands	r3, r2
 8006024:	d011      	beq.n	800604a <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 8006026:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <EXTI4_15_IRQHandler+0x44>)
 8006028:	2280      	movs	r2, #128	@ 0x80
 800602a:	0192      	lsls	r2, r2, #6
 800602c:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 800602e:	4b0a      	ldr	r3, [pc, #40]	@ (8006058 <EXTI4_15_IRQHandler+0x48>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1d3a      	adds	r2, r7, #4
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f7fa faf0 	bl	800061c <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <EXTI4_15_IRQHandler+0x3a>
 8006042:	4b06      	ldr	r3, [pc, #24]	@ (800605c <EXTI4_15_IRQHandler+0x4c>)
 8006044:	2280      	movs	r2, #128	@ 0x80
 8006046:	0552      	lsls	r2, r2, #21
 8006048:	601a      	str	r2, [r3, #0]
	}
}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b002      	add	sp, #8
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	40010400 	.word	0x40010400
 8006058:	20003074 	.word	0x20003074
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8006064:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <BSP_LED_Init+0x90>)
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <BSP_LED_Init+0x90>)
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	0289      	lsls	r1, r1, #10
 800606e:	430a      	orrs	r2, r1
 8006070:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8006072:	2390      	movs	r3, #144	@ 0x90
 8006074:	05db      	lsls	r3, r3, #23
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	2390      	movs	r3, #144	@ 0x90
 800607a:	05db      	lsls	r3, r3, #23
 800607c:	491d      	ldr	r1, [pc, #116]	@ (80060f4 <BSP_LED_Init+0x94>)
 800607e:	400a      	ands	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8006082:	2390      	movs	r3, #144	@ 0x90
 8006084:	05db      	lsls	r3, r3, #23
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2390      	movs	r3, #144	@ 0x90
 800608a:	05db      	lsls	r3, r3, #23
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	00c9      	lsls	r1, r1, #3
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8006094:	2390      	movs	r3, #144	@ 0x90
 8006096:	05db      	lsls	r3, r3, #23
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	2390      	movs	r3, #144	@ 0x90
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	2120      	movs	r1, #32
 80060a0:	438a      	bics	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 80060a4:	2390      	movs	r3, #144	@ 0x90
 80060a6:	05db      	lsls	r3, r3, #23
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	2390      	movs	r3, #144	@ 0x90
 80060ac:	05db      	lsls	r3, r3, #23
 80060ae:	4911      	ldr	r1, [pc, #68]	@ (80060f4 <BSP_LED_Init+0x94>)
 80060b0:	400a      	ands	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80060b4:	2390      	movs	r3, #144	@ 0x90
 80060b6:	05db      	lsls	r3, r3, #23
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	2390      	movs	r3, #144	@ 0x90
 80060bc:	05db      	lsls	r3, r3, #23
 80060be:	21c0      	movs	r1, #192	@ 0xc0
 80060c0:	0109      	lsls	r1, r1, #4
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80060c6:	2390      	movs	r3, #144	@ 0x90
 80060c8:	05db      	lsls	r3, r3, #23
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	2390      	movs	r3, #144	@ 0x90
 80060ce:	05db      	lsls	r3, r3, #23
 80060d0:	4908      	ldr	r1, [pc, #32]	@ (80060f4 <BSP_LED_Init+0x94>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 80060d6:	2390      	movs	r3, #144	@ 0x90
 80060d8:	05db      	lsls	r3, r3, #23
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	2390      	movs	r3, #144	@ 0x90
 80060de:	05db      	lsls	r3, r3, #23
 80060e0:	2180      	movs	r1, #128	@ 0x80
 80060e2:	0389      	lsls	r1, r1, #14
 80060e4:	430a      	orrs	r2, r1
 80060e6:	619a      	str	r2, [r3, #24]
}
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	40021000 	.word	0x40021000
 80060f4:	fffff3ff 	.word	0xfffff3ff

080060f8 <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PA5
 */

void BSP_LED_On()
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS_5;
 80060fc:	2390      	movs	r3, #144	@ 0x90
 80060fe:	05db      	lsls	r3, r3, #23
 8006100:	2220      	movs	r2, #32
 8006102:	619a      	str	r2, [r3, #24]
}
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PA5
 */

void BSP_LED_Off()
{
 800610a:	b580      	push	{r7, lr}
 800610c:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR_5;
 800610e:	2390      	movs	r3, #144	@ 0x90
 8006110:	05db      	lsls	r3, r3, #23
 8006112:	2280      	movs	r2, #128	@ 0x80
 8006114:	0392      	lsls	r2, r2, #14
 8006116:	619a      	str	r2, [r3, #24]
}
 8006118:	46c0      	nop			@ (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8006124:	4b1f      	ldr	r3, [pc, #124]	@ (80061a4 <BSP_PB_Init+0x84>)
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	4b1e      	ldr	r3, [pc, #120]	@ (80061a4 <BSP_PB_Init+0x84>)
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	0309      	lsls	r1, r1, #12
 800612e:	430a      	orrs	r2, r1
 8006130:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8006132:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <BSP_PB_Init+0x88>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b1c      	ldr	r3, [pc, #112]	@ (80061a8 <BSP_PB_Init+0x88>)
 8006138:	491c      	ldr	r1, [pc, #112]	@ (80061ac <BSP_PB_Init+0x8c>)
 800613a:	400a      	ands	r2, r1
 800613c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800613e:	4a1a      	ldr	r2, [pc, #104]	@ (80061a8 <BSP_PB_Init+0x88>)
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <BSP_PB_Init+0x88>)
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8006146:	4b18      	ldr	r3, [pc, #96]	@ (80061a8 <BSP_PB_Init+0x88>)
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <BSP_PB_Init+0x88>)
 800614c:	4917      	ldr	r1, [pc, #92]	@ (80061ac <BSP_PB_Init+0x8c>)
 800614e:	400a      	ands	r2, r1
 8006150:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006152:	4b14      	ldr	r3, [pc, #80]	@ (80061a4 <BSP_PB_Init+0x84>)
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <BSP_PB_Init+0x84>)
 8006158:	2101      	movs	r1, #1
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 800615e:	4b14      	ldr	r3, [pc, #80]	@ (80061b0 <BSP_PB_Init+0x90>)
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	4b13      	ldr	r3, [pc, #76]	@ (80061b0 <BSP_PB_Init+0x90>)
 8006164:	21f0      	movs	r1, #240	@ 0xf0
 8006166:	438a      	bics	r2, r1
 8006168:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 800616a:	4b11      	ldr	r3, [pc, #68]	@ (80061b0 <BSP_PB_Init+0x90>)
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	4b10      	ldr	r3, [pc, #64]	@ (80061b0 <BSP_PB_Init+0x90>)
 8006170:	2120      	movs	r1, #32
 8006172:	430a      	orrs	r2, r1
 8006174:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 8006176:	4b0f      	ldr	r3, [pc, #60]	@ (80061b4 <BSP_PB_Init+0x94>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <BSP_PB_Init+0x94>)
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	0189      	lsls	r1, r1, #6
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 8006184:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <BSP_PB_Init+0x94>)
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <BSP_PB_Init+0x94>)
 800618a:	490b      	ldr	r1, [pc, #44]	@ (80061b8 <BSP_PB_Init+0x98>)
 800618c:	400a      	ands	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 8006190:	4b08      	ldr	r3, [pc, #32]	@ (80061b4 <BSP_PB_Init+0x94>)
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4b07      	ldr	r3, [pc, #28]	@ (80061b4 <BSP_PB_Init+0x94>)
 8006196:	2180      	movs	r1, #128	@ 0x80
 8006198:	0189      	lsls	r1, r1, #6
 800619a:	430a      	orrs	r2, r1
 800619c:	60da      	str	r2, [r3, #12]
}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	48000800 	.word	0x48000800
 80061ac:	f3ffffff 	.word	0xf3ffffff
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400
 80061b8:	ffffdfff 	.word	0xffffdfff

080061bc <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80061c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <BSP_Console_Init+0xb4>)
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <BSP_Console_Init+0xb4>)
 80061c6:	2180      	movs	r1, #128	@ 0x80
 80061c8:	0289      	lsls	r1, r1, #10
 80061ca:	430a      	orrs	r2, r1
 80061cc:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80061ce:	2390      	movs	r3, #144	@ 0x90
 80061d0:	05db      	lsls	r3, r3, #23
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2390      	movs	r3, #144	@ 0x90
 80061d6:	05db      	lsls	r3, r3, #23
 80061d8:	21f0      	movs	r1, #240	@ 0xf0
 80061da:	438a      	bics	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 80061de:	2390      	movs	r3, #144	@ 0x90
 80061e0:	05db      	lsls	r3, r3, #23
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2390      	movs	r3, #144	@ 0x90
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	21a0      	movs	r1, #160	@ 0xa0
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80061ee:	2390      	movs	r3, #144	@ 0x90
 80061f0:	05db      	lsls	r3, r3, #23
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	2390      	movs	r3, #144	@ 0x90
 80061f6:	05db      	lsls	r3, r3, #23
 80061f8:	491e      	ldr	r1, [pc, #120]	@ (8006274 <BSP_Console_Init+0xb8>)
 80061fa:	400a      	ands	r2, r1
 80061fc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 80061fe:	2390      	movs	r3, #144	@ 0x90
 8006200:	05db      	lsls	r3, r3, #23
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	2390      	movs	r3, #144	@ 0x90
 8006206:	05db      	lsls	r3, r3, #23
 8006208:	2188      	movs	r1, #136	@ 0x88
 800620a:	0149      	lsls	r1, r1, #5
 800620c:	430a      	orrs	r2, r1
 800620e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8006210:	4b17      	ldr	r3, [pc, #92]	@ (8006270 <BSP_Console_Init+0xb4>)
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	4b16      	ldr	r3, [pc, #88]	@ (8006270 <BSP_Console_Init+0xb4>)
 8006216:	2180      	movs	r1, #128	@ 0x80
 8006218:	0289      	lsls	r1, r1, #10
 800621a:	430a      	orrs	r2, r1
 800621c:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800621e:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8006224:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006226:	2200      	movs	r2, #0
 8006228:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800622a:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <BSP_Console_Init+0xbc>)
 800622c:	2200      	movs	r2, #0
 800622e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8006230:	4b0f      	ldr	r3, [pc, #60]	@ (8006270 <BSP_Console_Init+0xb4>)
 8006232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006234:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <BSP_Console_Init+0xb4>)
 8006236:	4911      	ldr	r1, [pc, #68]	@ (800627c <BSP_Console_Init+0xc0>)
 8006238:	400a      	ands	r2, r1
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 800623c:	4b0e      	ldr	r3, [pc, #56]	@ (8006278 <BSP_Console_Init+0xbc>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006242:	2180      	movs	r1, #128	@ 0x80
 8006244:	0209      	lsls	r1, r1, #8
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 800624a:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <BSP_Console_Init+0xbc>)
 800624c:	4a0c      	ldr	r2, [pc, #48]	@ (8006280 <BSP_Console_Init+0xc4>)
 800624e:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8006250:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006256:	210c      	movs	r1, #12
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <BSP_Console_Init+0xbc>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <BSP_Console_Init+0xbc>)
 8006262:	2101      	movs	r1, #1
 8006264:	430a      	orrs	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
}
 8006268:	46c0      	nop			@ (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	40021000 	.word	0x40021000
 8006274:	ffff00ff 	.word	0xffff00ff
 8006278:	40004400 	.word	0x40004400
 800627c:	fffcffff 	.word	0xfffcffff
 8006280:	00000341 	.word	0x00000341

08006284 <BSP_DELAY_ms>:
/*
 *  Basic delay functions
 */

void BSP_DELAY_ms(uint32_t delay)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*2500); i++);		// Tuned for ms at 48MHz
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e002      	b.n	8006298 <BSP_DELAY_ms+0x14>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <BSP_DELAY_ms+0x2c>)
 800629c:	4353      	muls	r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d3f6      	bcc.n	8006292 <BSP_DELAY_ms+0xe>
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	000009c4 	.word	0x000009c4

080062b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062b4:	480d      	ldr	r0, [pc, #52]	@ (80062ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80062b8:	f000 f825 	bl	8006306 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062bc:	480c      	ldr	r0, [pc, #48]	@ (80062f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80062be:	490d      	ldr	r1, [pc, #52]	@ (80062f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062c0:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <LoopForever+0xe>)
  movs r3, #0
 80062c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062c4:	e002      	b.n	80062cc <LoopCopyDataInit>

080062c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ca:	3304      	adds	r3, #4

080062cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062d0:	d3f9      	bcc.n	80062c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062d2:	4a0a      	ldr	r2, [pc, #40]	@ (80062fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80062d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006300 <LoopForever+0x16>)
  movs r3, #0
 80062d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062d8:	e001      	b.n	80062de <LoopFillZerobss>

080062da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062dc:	3204      	adds	r2, #4

080062de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062e0:	d3fb      	bcc.n	80062da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80062e2:	f000 f8a3 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062e6:	f7ff fb41 	bl	800596c <main>

080062ea <LoopForever>:

LoopForever:
    b LoopForever
 80062ea:	e7fe      	b.n	80062ea <LoopForever>
  ldr   r0, =_estack
 80062ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80062f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80062f8:	080068fc 	.word	0x080068fc
  ldr r2, =_sbss
 80062fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006300:	20003078 	.word	0x20003078

08006304 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006304:	e7fe      	b.n	8006304 <ADC1_COMP_IRQHandler>

08006306 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800630a:	46c0      	nop			@ (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	2300      	movs	r3, #0
 8006324:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006326:	4b38      	ldr	r3, [pc, #224]	@ (8006408 <SystemCoreClockUpdate+0xf8>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	220c      	movs	r2, #12
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b08      	cmp	r3, #8
 8006334:	d011      	beq.n	800635a <SystemCoreClockUpdate+0x4a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d84f      	bhi.n	80063dc <SystemCoreClockUpdate+0xcc>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <SystemCoreClockUpdate+0x3a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b04      	cmp	r3, #4
 8006346:	d004      	beq.n	8006352 <SystemCoreClockUpdate+0x42>
 8006348:	e048      	b.n	80063dc <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800634a:	4b30      	ldr	r3, [pc, #192]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 800634c:	4a30      	ldr	r2, [pc, #192]	@ (8006410 <SystemCoreClockUpdate+0x100>)
 800634e:	601a      	str	r2, [r3, #0]
      break;
 8006350:	e048      	b.n	80063e4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006352:	4b2e      	ldr	r3, [pc, #184]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 8006354:	4a2e      	ldr	r2, [pc, #184]	@ (8006410 <SystemCoreClockUpdate+0x100>)
 8006356:	601a      	str	r2, [r3, #0]
      break;
 8006358:	e044      	b.n	80063e4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800635a:	4b2b      	ldr	r3, [pc, #172]	@ (8006408 <SystemCoreClockUpdate+0xf8>)
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	23f0      	movs	r3, #240	@ 0xf0
 8006360:	039b      	lsls	r3, r3, #14
 8006362:	4013      	ands	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006366:	4b28      	ldr	r3, [pc, #160]	@ (8006408 <SystemCoreClockUpdate+0xf8>)
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	23c0      	movs	r3, #192	@ 0xc0
 800636c:	025b      	lsls	r3, r3, #9
 800636e:	4013      	ands	r3, r2
 8006370:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0c9b      	lsrs	r3, r3, #18
 8006376:	3302      	adds	r3, #2
 8006378:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800637a:	4b23      	ldr	r3, [pc, #140]	@ (8006408 <SystemCoreClockUpdate+0xf8>)
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	220f      	movs	r2, #15
 8006380:	4013      	ands	r3, r2
 8006382:	3301      	adds	r3, #1
 8006384:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	025b      	lsls	r3, r3, #9
 800638c:	429a      	cmp	r2, r3
 800638e:	d10a      	bne.n	80063a6 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	481f      	ldr	r0, [pc, #124]	@ (8006410 <SystemCoreClockUpdate+0x100>)
 8006394:	f7f9 feb8 	bl	8000108 <__udivsi3>
 8006398:	0003      	movs	r3, r0
 800639a:	001a      	movs	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	435a      	muls	r2, r3
 80063a0:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063a2:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80063a4:	e01e      	b.n	80063e4 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	23c0      	movs	r3, #192	@ 0xc0
 80063aa:	025b      	lsls	r3, r3, #9
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d10a      	bne.n	80063c6 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	4818      	ldr	r0, [pc, #96]	@ (8006414 <SystemCoreClockUpdate+0x104>)
 80063b4:	f7f9 fea8 	bl	8000108 <__udivsi3>
 80063b8:	0003      	movs	r3, r0
 80063ba:	001a      	movs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	435a      	muls	r2, r3
 80063c0:	4b12      	ldr	r3, [pc, #72]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063c2:	601a      	str	r2, [r3, #0]
      break;
 80063c4:	e00e      	b.n	80063e4 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	4811      	ldr	r0, [pc, #68]	@ (8006410 <SystemCoreClockUpdate+0x100>)
 80063ca:	f7f9 fe9d 	bl	8000108 <__udivsi3>
 80063ce:	0003      	movs	r3, r0
 80063d0:	001a      	movs	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	435a      	muls	r2, r3
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063d8:	601a      	str	r2, [r3, #0]
      break;
 80063da:	e003      	b.n	80063e4 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063de:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <SystemCoreClockUpdate+0x100>)
 80063e0:	601a      	str	r2, [r3, #0]
      break;
 80063e2:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80063e4:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <SystemCoreClockUpdate+0xf8>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	220f      	movs	r2, #15
 80063ec:	4013      	ands	r3, r2
 80063ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006418 <SystemCoreClockUpdate+0x108>)
 80063f0:	5cd3      	ldrb	r3, [r2, r3]
 80063f2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80063f4:	4b05      	ldr	r3, [pc, #20]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	40da      	lsrs	r2, r3
 80063fc:	4b03      	ldr	r3, [pc, #12]	@ (800640c <SystemCoreClockUpdate+0xfc>)
 80063fe:	601a      	str	r2, [r3, #0]
}
 8006400:	46c0      	nop			@ (mov r8, r8)
 8006402:	46bd      	mov	sp, r7
 8006404:	b004      	add	sp, #16
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000
 800640c:	20000008 	.word	0x20000008
 8006410:	007a1200 	.word	0x007a1200
 8006414:	02dc6c00 	.word	0x02dc6c00
 8006418:	080068e4 	.word	0x080068e4

0800641c <memset>:
 800641c:	0003      	movs	r3, r0
 800641e:	1882      	adds	r2, r0, r2
 8006420:	4293      	cmp	r3, r2
 8006422:	d100      	bne.n	8006426 <memset+0xa>
 8006424:	4770      	bx	lr
 8006426:	7019      	strb	r1, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	e7f9      	b.n	8006420 <memset+0x4>

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	2600      	movs	r6, #0
 8006430:	4c0c      	ldr	r4, [pc, #48]	@ (8006464 <__libc_init_array+0x38>)
 8006432:	4d0d      	ldr	r5, [pc, #52]	@ (8006468 <__libc_init_array+0x3c>)
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	42a6      	cmp	r6, r4
 800643a:	d109      	bne.n	8006450 <__libc_init_array+0x24>
 800643c:	2600      	movs	r6, #0
 800643e:	f000 f823 	bl	8006488 <_init>
 8006442:	4c0a      	ldr	r4, [pc, #40]	@ (800646c <__libc_init_array+0x40>)
 8006444:	4d0a      	ldr	r5, [pc, #40]	@ (8006470 <__libc_init_array+0x44>)
 8006446:	1b64      	subs	r4, r4, r5
 8006448:	10a4      	asrs	r4, r4, #2
 800644a:	42a6      	cmp	r6, r4
 800644c:	d105      	bne.n	800645a <__libc_init_array+0x2e>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	00b3      	lsls	r3, r6, #2
 8006452:	58eb      	ldr	r3, [r5, r3]
 8006454:	4798      	blx	r3
 8006456:	3601      	adds	r6, #1
 8006458:	e7ee      	b.n	8006438 <__libc_init_array+0xc>
 800645a:	00b3      	lsls	r3, r6, #2
 800645c:	58eb      	ldr	r3, [r5, r3]
 800645e:	4798      	blx	r3
 8006460:	3601      	adds	r6, #1
 8006462:	e7f2      	b.n	800644a <__libc_init_array+0x1e>
 8006464:	080068f4 	.word	0x080068f4
 8006468:	080068f4 	.word	0x080068f4
 800646c:	080068f8 	.word	0x080068f8
 8006470:	080068f4 	.word	0x080068f4

08006474 <memcpy>:
 8006474:	2300      	movs	r3, #0
 8006476:	b510      	push	{r4, lr}
 8006478:	429a      	cmp	r2, r3
 800647a:	d100      	bne.n	800647e <memcpy+0xa>
 800647c:	bd10      	pop	{r4, pc}
 800647e:	5ccc      	ldrb	r4, [r1, r3]
 8006480:	54c4      	strb	r4, [r0, r3]
 8006482:	3301      	adds	r3, #1
 8006484:	e7f8      	b.n	8006478 <memcpy+0x4>
	...

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr
