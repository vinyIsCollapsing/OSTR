
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000ba4  08000ba4  00001ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bd8  08000bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000be0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  08000be4  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000be4  00002020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000d70  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000521  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000150  00000000  00000000  000032c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000e5  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00011622  00000000  00000000  000034f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001c84  00000000  00000000  00014b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0005aa22  00000000  00000000  0001679b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000711bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000344  00000000  00000000  00071200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00071544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000b8c 	.word	0x08000b8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000b8c 	.word	0x08000b8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
// Static functions
static void SystemClock_Config (void);

// Main function
int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	uint8_t	i, sent;

	// Configure System Clock
	SystemClock_Config();
 8000226:	f000 f835 	bl	8000294 <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 800022a:	f000 fad5 	bl	80007d8 <BSP_LED_Init>
	BSP_PB_Init();
 800022e:	f000 fb33 	bl	8000898 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8000232:	f000 fb6f 	bl	8000914 <BSP_Console_Init>

	my_printf("Console ready!\r\n");
 8000236:	4b15      	ldr	r3, [pc, #84]	@ (800028c <main+0x6c>)
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fa9f 	bl	800077c <my_printf>
	sent = 0;
 800023e:	1dbb      	adds	r3, r7, #6
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
	i = 0;
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]

	// Main loop
	while(1)
	{
		// If User-Button is pushed down
		if (BSP_PB_GetState() == 1)
 800024a:	f000 fb47 	bl	80008dc <BSP_PB_GetState>
 800024e:	0003      	movs	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d115      	bne.n	8000280 <main+0x60>
		{
			BSP_LED_On();	// Keep LED On
 8000254:	f000 fb0c 	bl	8000870 <BSP_LED_On>
			// Send '#i' only once
			if (sent == 0)
 8000258:	1dbb      	adds	r3, r7, #6
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f4      	bne.n	800024a <main+0x2a>
			{
				my_printf("#%d\r\n", i);
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4b0a      	ldr	r3, [pc, #40]	@ (8000290 <main+0x70>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fa87 	bl	800077c <my_printf>
				sent = 1;
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
				i++;
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	3201      	adds	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	e7e4      	b.n	800024a <main+0x2a>
			}
		}
		// If User-Button is released
		else
		{
			BSP_LED_Off();	// Keep LED Off
 8000280:	f000 faff 	bl	8000882 <BSP_LED_Off>
			sent = 0;
 8000284:	1dbb      	adds	r3, r7, #6
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
		if (BSP_PB_GetState() == 1)
 800028a:	e7de      	b.n	800024a <main+0x2a>
 800028c:	08000ba4 	.word	0x08000ba4
 8000290:	08000bb8 	.word	0x08000bb8

08000294 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 800029e:	4b44      	ldr	r3, [pc, #272]	@ (80003b0 <SystemClock_Config+0x11c>)
 80002a0:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 80002a2:	4b44      	ldr	r3, [pc, #272]	@ (80003b4 <SystemClock_Config+0x120>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b43      	ldr	r3, [pc, #268]	@ (80003b4 <SystemClock_Config+0x120>)
 80002a8:	2180      	movs	r1, #128	@ 0x80
 80002aa:	02c9      	lsls	r1, r1, #11
 80002ac:	430a      	orrs	r2, r1
 80002ae:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 80002b0:	4b40      	ldr	r3, [pc, #256]	@ (80003b4 <SystemClock_Config+0x120>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b3f      	ldr	r3, [pc, #252]	@ (80003b4 <SystemClock_Config+0x120>)
 80002b6:	2180      	movs	r1, #128	@ 0x80
 80002b8:	0249      	lsls	r1, r1, #9
 80002ba:	430a      	orrs	r2, r1
 80002bc:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 80002be:	4b3d      	ldr	r3, [pc, #244]	@ (80003b4 <SystemClock_Config+0x120>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	029b      	lsls	r3, r3, #10
 80002c6:	4013      	ands	r3, r2
 80002c8:	60bb      	str	r3, [r7, #8]
		timeout--;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d102      	bne.n	80002dc <SystemClock_Config+0x48>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1f0      	bne.n	80002be <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80002dc:	4b35      	ldr	r3, [pc, #212]	@ (80003b4 <SystemClock_Config+0x120>)
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	4b34      	ldr	r3, [pc, #208]	@ (80003b4 <SystemClock_Config+0x120>)
 80002e2:	4935      	ldr	r1, [pc, #212]	@ (80003b8 <SystemClock_Config+0x124>)
 80002e4:	400a      	ands	r2, r1
 80002e6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80002e8:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <SystemClock_Config+0x120>)
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <SystemClock_Config+0x120>)
 80002ee:	2180      	movs	r1, #128	@ 0x80
 80002f0:	0249      	lsls	r1, r1, #9
 80002f2:	430a      	orrs	r2, r1
 80002f4:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <SystemClock_Config+0x120>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80002fc:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <SystemClock_Config+0x120>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	4b2c      	ldr	r3, [pc, #176]	@ (80003b4 <SystemClock_Config+0x120>)
 8000302:	492e      	ldr	r1, [pc, #184]	@ (80003bc <SystemClock_Config+0x128>)
 8000304:	400a      	ands	r2, r1
 8000306:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8000308:	4b2a      	ldr	r3, [pc, #168]	@ (80003b4 <SystemClock_Config+0x120>)
 800030a:	685a      	ldr	r2, [r3, #4]
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <SystemClock_Config+0x120>)
 800030e:	2180      	movs	r1, #128	@ 0x80
 8000310:	0349      	lsls	r1, r1, #13
 8000312:	430a      	orrs	r2, r1
 8000314:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8000316:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <SystemClock_Config+0x120>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b26      	ldr	r3, [pc, #152]	@ (80003b4 <SystemClock_Config+0x120>)
 800031c:	2180      	movs	r1, #128	@ 0x80
 800031e:	0449      	lsls	r1, r1, #17
 8000320:	430a      	orrs	r2, r1
 8000322:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8000324:	4b23      	ldr	r3, [pc, #140]	@ (80003b4 <SystemClock_Config+0x120>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	2380      	movs	r3, #128	@ 0x80
 800032a:	049b      	lsls	r3, r3, #18
 800032c:	4013      	ands	r3, r2
 800032e:	607b      	str	r3, [r7, #4]
		timeout--;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d102      	bne.n	8000342 <SystemClock_Config+0xae>
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f0      	bne.n	8000324 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8000342:	4b1c      	ldr	r3, [pc, #112]	@ (80003b4 <SystemClock_Config+0x120>)
 8000344:	685a      	ldr	r2, [r3, #4]
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <SystemClock_Config+0x120>)
 8000348:	21f0      	movs	r1, #240	@ 0xf0
 800034a:	438a      	bics	r2, r1
 800034c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800034e:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <SystemClock_Config+0x120>)
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <SystemClock_Config+0x120>)
 8000352:	6852      	ldr	r2, [r2, #4]
 8000354:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <SystemClock_Config+0x120>)
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <SystemClock_Config+0x120>)
 800035c:	4918      	ldr	r1, [pc, #96]	@ (80003c0 <SystemClock_Config+0x12c>)
 800035e:	400a      	ands	r2, r1
 8000360:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8000362:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <SystemClock_Config+0x120>)
 8000364:	4b13      	ldr	r3, [pc, #76]	@ (80003b4 <SystemClock_Config+0x120>)
 8000366:	6852      	ldr	r2, [r2, #4]
 8000368:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <SystemClock_Config+0x130>)
 800036c:	2211      	movs	r2, #17
 800036e:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <SystemClock_Config+0x120>)
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <SystemClock_Config+0x120>)
 8000376:	2103      	movs	r1, #3
 8000378:	438a      	bics	r2, r1
 800037a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800037c:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <SystemClock_Config+0x120>)
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <SystemClock_Config+0x120>)
 8000382:	2102      	movs	r1, #2
 8000384:	430a      	orrs	r2, r1
 8000386:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8000388:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <SystemClock_Config+0x120>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	220c      	movs	r2, #12
 800038e:	4013      	ands	r3, r2
 8000390:	603b      	str	r3, [r7, #0]
		timeout--;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3b01      	subs	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b08      	cmp	r3, #8
 800039c:	d002      	beq.n	80003a4 <SystemClock_Config+0x110>
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f1      	bne.n	8000388 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 80003a4:	f000 fb48 	bl	8000a38 <SystemCoreClockUpdate>
}
 80003a8:	46c0      	nop			@ (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b004      	add	sp, #16
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	000f4240 	.word	0x000f4240
 80003b4:	40021000 	.word	0x40021000
 80003b8:	fffe7fff 	.word	0xfffe7fff
 80003bc:	ffc3ffff 	.word	0xffc3ffff
 80003c0:	fffff8ff 	.word	0xfffff8ff
 80003c4:	40022000 	.word	0x40022000

080003c8 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
	if (str) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00a      	beq.n	80003ee <printchar+0x26>
		**str = c;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	701a      	strb	r2, [r3, #0]
		++(*str);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 80003ec:	e00a      	b.n	8000404 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <printchar+0x44>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	2240      	movs	r2, #64	@ 0x40
 80003f6:	4013      	ands	r3, r2
 80003f8:	2b40      	cmp	r3, #64	@ 0x40
 80003fa:	d1f9      	bne.n	80003f0 <printchar+0x28>
		USART2->TDR = c;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <printchar+0x44>)
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	b292      	uxth	r2, r2
 8000402:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40004400 	.word	0x40004400

08000410 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000412:	46c6      	mov	lr, r8
 8000414:	b500      	push	{lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
 8000420:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000422:	2400      	movs	r4, #0
 8000424:	2320      	movs	r3, #32
 8000426:	4698      	mov	r8, r3

	if (width > 0) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd16      	ble.n	800045c <prints+0x4c>
		register int len = 0;
 800042e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000430:	68be      	ldr	r6, [r7, #8]
 8000432:	e001      	b.n	8000438 <prints+0x28>
 8000434:	3501      	adds	r5, #1
 8000436:	3601      	adds	r6, #1
 8000438:	7833      	ldrb	r3, [r6, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1fa      	bne.n	8000434 <prints+0x24>
		if (len >= width) width = 0;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	429d      	cmp	r5, r3
 8000442:	db02      	blt.n	800044a <prints+0x3a>
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	e002      	b.n	8000450 <prints+0x40>
		else width -= len;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	1b5b      	subs	r3, r3, r5
 800044e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2202      	movs	r2, #2
 8000454:	4013      	ands	r3, r2
 8000456:	d001      	beq.n	800045c <prints+0x4c>
 8000458:	2330      	movs	r3, #48	@ 0x30
 800045a:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	d119      	bne.n	8000498 <prints+0x88>
		for ( ; width > 0; --width) {
 8000464:	e008      	b.n	8000478 <prints+0x68>
			printchar (out, padchar);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	4641      	mov	r1, r8
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ffac 	bl	80003c8 <printchar>
			++pc;
 8000470:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3b01      	subs	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dcf3      	bgt.n	8000466 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 800047e:	e00b      	b.n	8000498 <prints+0x88>
		printchar (out, *string);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	001a      	movs	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	0011      	movs	r1, r2
 800048a:	0018      	movs	r0, r3
 800048c:	f7ff ff9c 	bl	80003c8 <printchar>
		++pc;
 8000490:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3301      	adds	r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1ef      	bne.n	8000480 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 80004a0:	e008      	b.n	80004b4 <prints+0xa4>
		printchar (out, padchar);
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4641      	mov	r1, r8
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff ff8e 	bl	80003c8 <printchar>
		++pc;
 80004ac:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dcf3      	bgt.n	80004a2 <prints+0x92>
	}

	return pc;
 80004ba:	0023      	movs	r3, r4
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	b004      	add	sp, #16
 80004c2:	bc80      	pop	{r7}
 80004c4:	46b8      	mov	r8, r7
 80004c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004c8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	46ce      	mov	lr, r9
 80004cc:	4647      	mov	r7, r8
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b089      	sub	sp, #36	@ 0x24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	4699      	mov	r9, r3
 80004e0:	2600      	movs	r6, #0
	register unsigned int u = i;
 80004e2:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d10e      	bne.n	8000508 <printi+0x40>
		print_buf[0] = '0';
 80004ea:	2114      	movs	r1, #20
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80004f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80004fc:	1879      	adds	r1, r7, r1
 80004fe:	68f8      	ldr	r0, [r7, #12]
 8000500:	f7ff ff86 	bl	8000410 <prints>
 8000504:	0003      	movs	r3, r0
 8000506:	e04e      	b.n	80005a6 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00a      	beq.n	8000524 <printi+0x5c>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0a      	cmp	r3, #10
 8000512:	d107      	bne.n	8000524 <printi+0x5c>
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	da04      	bge.n	8000524 <printi+0x5c>
		neg = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	4699      	mov	r9, r3
		u = -i;
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	425b      	negs	r3, r3
 8000522:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000524:	2314      	movs	r3, #20
 8000526:	18fc      	adds	r4, r7, r3
 8000528:	340b      	adds	r4, #11
	*s = '\0';
 800052a:	2300      	movs	r3, #0
 800052c:	7023      	strb	r3, [r4, #0]

	while (u) {
 800052e:	e019      	b.n	8000564 <printi+0x9c>
		t = u % b;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	0019      	movs	r1, r3
 8000534:	0028      	movs	r0, r5
 8000536:	f7ff fe6d 	bl	8000214 <__aeabi_uidivmod>
 800053a:	000b      	movs	r3, r1
 800053c:	4698      	mov	r8, r3
		if( t >= 10 )
 800053e:	4643      	mov	r3, r8
 8000540:	2b09      	cmp	r3, #9
 8000542:	dd02      	ble.n	800054a <printi+0x82>
			t += letbase - '0' - 10;
 8000544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000546:	3b3a      	subs	r3, #58	@ 0x3a
 8000548:	4498      	add	r8, r3
		*--s = t + '0';
 800054a:	4643      	mov	r3, r8
 800054c:	b2db      	uxtb	r3, r3
 800054e:	3c01      	subs	r4, #1
 8000550:	3330      	adds	r3, #48	@ 0x30
 8000552:	b2db      	uxtb	r3, r3
 8000554:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0019      	movs	r1, r3
 800055a:	0028      	movs	r0, r5
 800055c:	f7ff fdd4 	bl	8000108 <__udivsi3>
 8000560:	0003      	movs	r3, r0
 8000562:	001d      	movs	r5, r3
	while (u) {
 8000564:	2d00      	cmp	r5, #0
 8000566:	d1e3      	bne.n	8000530 <printi+0x68>
	}

	if (neg) {
 8000568:	464b      	mov	r3, r9
 800056a:	2b00      	cmp	r3, #0
 800056c:	d013      	beq.n	8000596 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800056e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00d      	beq.n	8000590 <printi+0xc8>
 8000574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000576:	2202      	movs	r2, #2
 8000578:	4013      	ands	r3, r2
 800057a:	d009      	beq.n	8000590 <printi+0xc8>
			printchar (out, '-');
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	212d      	movs	r1, #45	@ 0x2d
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff ff21 	bl	80003c8 <printchar>
			++pc;
 8000586:	3601      	adds	r6, #1
			--width;
 8000588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800058a:	3b01      	subs	r3, #1
 800058c:	643b      	str	r3, [r7, #64]	@ 0x40
 800058e:	e002      	b.n	8000596 <printi+0xce>
		}
		else {
			*--s = '-';
 8000590:	3c01      	subs	r4, #1
 8000592:	232d      	movs	r3, #45	@ 0x2d
 8000594:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	0021      	movs	r1, r4
 800059e:	f7ff ff37 	bl	8000410 <prints>
 80005a2:	0003      	movs	r3, r0
 80005a4:	18f3      	adds	r3, r6, r3
}
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b009      	add	sp, #36	@ 0x24
 80005ac:	bcc0      	pop	{r6, r7}
 80005ae:	46b9      	mov	r9, r7
 80005b0:	46b0      	mov	r8, r6
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005b4 <print>:

static int print(char **out, const char *format, va_list args )
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b08b      	sub	sp, #44	@ 0x2c
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80005c0:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80005c2:	e0c6      	b.n	8000752 <print+0x19e>
		if (*format == '%') {
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b25      	cmp	r3, #37	@ 0x25
 80005ca:	d000      	beq.n	80005ce <print+0x1a>
 80005cc:	e0b2      	b.n	8000734 <print+0x180>
			++format;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80005d4:	2600      	movs	r6, #0
 80005d6:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d100      	bne.n	80005e2 <print+0x2e>
 80005e0:	e0bd      	b.n	800075e <print+0x1aa>
			if (*format == '%') goto out;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b25      	cmp	r3, #37	@ 0x25
 80005e8:	d100      	bne.n	80005ec <print+0x38>
 80005ea:	e0a5      	b.n	8000738 <print+0x184>
			if (*format == '-') {
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80005f2:	d10a      	bne.n	800060a <print+0x56>
				++format;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80005fa:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80005fc:	e005      	b.n	800060a <print+0x56>
				++format;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3301      	adds	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000604:	2302      	movs	r3, #2
 8000606:	4333      	orrs	r3, r6
 8000608:	001e      	movs	r6, r3
			while (*format == '0') {
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b30      	cmp	r3, #48	@ 0x30
 8000610:	d0f5      	beq.n	80005fe <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000612:	e00b      	b.n	800062c <print+0x78>
				width *= 10;
 8000614:	002b      	movs	r3, r5
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	195b      	adds	r3, r3, r5
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	001d      	movs	r5, r3
				width += *format - '0';
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3b30      	subs	r3, #48	@ 0x30
 8000624:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3301      	adds	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b2f      	cmp	r3, #47	@ 0x2f
 8000632:	d903      	bls.n	800063c <print+0x88>
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b39      	cmp	r3, #57	@ 0x39
 800063a:	d9eb      	bls.n	8000614 <print+0x60>
			}
			if( *format == 's' ) {
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b73      	cmp	r3, #115	@ 0x73
 8000642:	d10f      	bne.n	8000664 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	1d1a      	adds	r2, r3, #4
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800064e:	d000      	beq.n	8000652 <print+0x9e>
 8000650:	e000      	b.n	8000654 <print+0xa0>
 8000652:	4949      	ldr	r1, [pc, #292]	@ (8000778 <print+0x1c4>)
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	0033      	movs	r3, r6
 8000658:	002a      	movs	r2, r5
 800065a:	f7ff fed9 	bl	8000410 <prints>
 800065e:	0003      	movs	r3, r0
 8000660:	18e4      	adds	r4, r4, r3
				continue;
 8000662:	e073      	b.n	800074c <print+0x198>
			}
			if( *format == 'd' ) {
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b64      	cmp	r3, #100	@ 0x64
 800066a:	d10f      	bne.n	800068c <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	2361      	movs	r3, #97	@ 0x61
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	9601      	str	r6, [sp, #4]
 800067c:	9500      	str	r5, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	220a      	movs	r2, #10
 8000682:	f7ff ff21 	bl	80004c8 <printi>
 8000686:	0003      	movs	r3, r0
 8000688:	18e4      	adds	r4, r4, r3
				continue;
 800068a:	e05f      	b.n	800074c <print+0x198>
			}
			if( *format == 'x' ) {
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b78      	cmp	r3, #120	@ 0x78
 8000692:	d10f      	bne.n	80006b4 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	1d1a      	adds	r2, r3, #4
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	2361      	movs	r3, #97	@ 0x61
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	9601      	str	r6, [sp, #4]
 80006a4:	9500      	str	r5, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2210      	movs	r2, #16
 80006aa:	f7ff ff0d 	bl	80004c8 <printi>
 80006ae:	0003      	movs	r3, r0
 80006b0:	18e4      	adds	r4, r4, r3
				continue;
 80006b2:	e04b      	b.n	800074c <print+0x198>
			}
			if( *format == 'X' ) {
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b58      	cmp	r3, #88	@ 0x58
 80006ba:	d10f      	bne.n	80006dc <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	1d1a      	adds	r2, r3, #4
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	2341      	movs	r3, #65	@ 0x41
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	9601      	str	r6, [sp, #4]
 80006cc:	9500      	str	r5, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2210      	movs	r2, #16
 80006d2:	f7ff fef9 	bl	80004c8 <printi>
 80006d6:	0003      	movs	r3, r0
 80006d8:	18e4      	adds	r4, r4, r3
				continue;
 80006da:	e037      	b.n	800074c <print+0x198>
			}
			if( *format == 'u' ) {
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b75      	cmp	r3, #117	@ 0x75
 80006e2:	d10f      	bne.n	8000704 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	1d1a      	adds	r2, r3, #4
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	2361      	movs	r3, #97	@ 0x61
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	9601      	str	r6, [sp, #4]
 80006f4:	9500      	str	r5, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	220a      	movs	r2, #10
 80006fa:	f7ff fee5 	bl	80004c8 <printi>
 80006fe:	0003      	movs	r3, r0
 8000700:	18e4      	adds	r4, r4, r3
				continue;
 8000702:	e023      	b.n	800074c <print+0x198>
			}
			if( *format == 'c' ) {
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b63      	cmp	r3, #99	@ 0x63
 800070a:	d11f      	bne.n	800074c <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	1d1a      	adds	r2, r3, #4
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	2114      	movs	r1, #20
 8000718:	187b      	adds	r3, r7, r1
 800071a:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8000722:	1879      	adds	r1, r7, r1
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	0033      	movs	r3, r6
 8000728:	002a      	movs	r2, r5
 800072a:	f7ff fe71 	bl	8000410 <prints>
 800072e:	0003      	movs	r3, r0
 8000730:	18e4      	adds	r4, r4, r3
				continue;
 8000732:	e00b      	b.n	800074c <print+0x198>
			}
		}
		else {
		out:
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e000      	b.n	800073a <print+0x186>
			if (*format == '%') goto out;
 8000738:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	001a      	movs	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fe3f 	bl	80003c8 <printchar>
			++pc;
 800074a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3301      	adds	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d000      	beq.n	800075c <print+0x1a8>
 800075a:	e733      	b.n	80005c4 <print+0x10>
 800075c:	e000      	b.n	8000760 <print+0x1ac>
			if (*format == '\0') break;
 800075e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <print+0x1ba>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800076e:	0023      	movs	r3, r4
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b007      	add	sp, #28
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	08000bc0 	.word	0x08000bc0

0800077c <my_printf>:

int my_printf(const char *format, ...)
{
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8000784:	2314      	movs	r3, #20
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	0019      	movs	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff0f 	bl	80005b4 <print>
 8000796:	0003      	movs	r3, r0
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bc80      	pop	{r7}
 80007a0:	bc08      	pop	{r3}
 80007a2:	b004      	add	sp, #16
 80007a4:	4718      	bx	r3

080007a6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <BSP_LED_Init+0x90>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <BSP_LED_Init+0x90>)
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	0289      	lsls	r1, r1, #10
 80007e6:	430a      	orrs	r2, r1
 80007e8:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80007ea:	2390      	movs	r3, #144	@ 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2390      	movs	r3, #144	@ 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	491d      	ldr	r1, [pc, #116]	@ (800086c <BSP_LED_Init+0x94>)
 80007f6:	400a      	ands	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80007fa:	2390      	movs	r3, #144	@ 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	2390      	movs	r3, #144	@ 0x90
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	00c9      	lsls	r1, r1, #3
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 800080c:	2390      	movs	r3, #144	@ 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	2390      	movs	r3, #144	@ 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2120      	movs	r1, #32
 8000818:	438a      	bics	r2, r1
 800081a:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 800081c:	2390      	movs	r3, #144	@ 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	2390      	movs	r3, #144	@ 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	4911      	ldr	r1, [pc, #68]	@ (800086c <BSP_LED_Init+0x94>)
 8000828:	400a      	ands	r2, r1
 800082a:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 800082c:	2390      	movs	r3, #144	@ 0x90
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	2390      	movs	r3, #144	@ 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	21c0      	movs	r1, #192	@ 0xc0
 8000838:	0109      	lsls	r1, r1, #4
 800083a:	430a      	orrs	r2, r1
 800083c:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800083e:	2390      	movs	r3, #144	@ 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	2390      	movs	r3, #144	@ 0x90
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	4908      	ldr	r1, [pc, #32]	@ (800086c <BSP_LED_Init+0x94>)
 800084a:	400a      	ands	r2, r1
 800084c:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800084e:	2390      	movs	r3, #144	@ 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2390      	movs	r3, #144	@ 0x90
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2180      	movs	r1, #128	@ 0x80
 800085a:	0389      	lsls	r1, r1, #14
 800085c:	430a      	orrs	r2, r1
 800085e:	619a      	str	r2, [r3, #24]
}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40021000 	.word	0x40021000
 800086c:	fffff3ff 	.word	0xfffff3ff

08000870 <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PA5
 */

void BSP_LED_On()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS_5;
 8000874:	2390      	movs	r3, #144	@ 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2220      	movs	r2, #32
 800087a:	619a      	str	r2, [r3, #24]
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PA5
 */

void BSP_LED_Off()
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR_5;
 8000886:	2390      	movs	r3, #144	@ 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2280      	movs	r2, #128	@ 0x80
 800088c:	0392      	lsls	r2, r2, #14
 800088e:	619a      	str	r2, [r3, #24]
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <BSP_PB_Init>:
{
	GPIOA->ODR ^= GPIO_ODR_5;
}

void BSP_PB_Init()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <BSP_PB_Init+0x38>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <BSP_PB_Init+0x38>)
 80008a2:	2180      	movs	r1, #128	@ 0x80
 80008a4:	0309      	lsls	r1, r1, #12
 80008a6:	430a      	orrs	r2, r1
 80008a8:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008b0:	4909      	ldr	r1, [pc, #36]	@ (80008d8 <BSP_PB_Init+0x40>)
 80008b2:	400a      	ands	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80008b6:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80008be:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008c0:	68da      	ldr	r2, [r3, #12]
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <BSP_PB_Init+0x3c>)
 80008c4:	4904      	ldr	r1, [pc, #16]	@ (80008d8 <BSP_PB_Init+0x40>)
 80008c6:	400a      	ands	r2, r1
 80008c8:	60da      	str	r2, [r3, #12]
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800
 80008d8:	f3ffffff 	.word	0xf3ffffff

080008dc <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	uint8_t state;
	if ((GPIOC->IDR & GPIO_IDR_13) == GPIO_IDR_13)
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <BSP_PB_GetState+0x34>)
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	401a      	ands	r2, r3
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	019b      	lsls	r3, r3, #6
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d103      	bne.n	80008fc <BSP_PB_GetState+0x20>
	{
		state = 0;
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e002      	b.n	8000902 <BSP_PB_GetState+0x26>
	}
	else
	{
		state = 1;
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
	}
	return state;
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	48000800 	.word	0x48000800

08000914 <BSP_Console_Init>:

void BSP_Console_Init()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800091e:	2180      	movs	r1, #128	@ 0x80
 8000920:	0289      	lsls	r1, r1, #10
 8000922:	430a      	orrs	r2, r1
 8000924:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8000926:	2390      	movs	r3, #144	@ 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	2390      	movs	r3, #144	@ 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	21f0      	movs	r1, #240	@ 0xf0
 8000932:	438a      	bics	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8000936:	2390      	movs	r3, #144	@ 0x90
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2390      	movs	r3, #144	@ 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	21a0      	movs	r1, #160	@ 0xa0
 8000942:	430a      	orrs	r2, r1
 8000944:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8000946:	2390      	movs	r3, #144	@ 0x90
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	6a1a      	ldr	r2, [r3, #32]
 800094c:	2390      	movs	r3, #144	@ 0x90
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	491e      	ldr	r1, [pc, #120]	@ (80009cc <BSP_Console_Init+0xb8>)
 8000952:	400a      	ands	r2, r1
 8000954:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8000956:	2390      	movs	r3, #144	@ 0x90
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	6a1a      	ldr	r2, [r3, #32]
 800095c:	2390      	movs	r3, #144	@ 0x90
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2188      	movs	r1, #136	@ 0x88
 8000962:	0149      	lsls	r1, r1, #5
 8000964:	430a      	orrs	r2, r1
 8000966:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	0289      	lsls	r1, r1, #10
 8000972:	430a      	orrs	r2, r1
 8000974:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <BSP_Console_Init+0xbc>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <BSP_Console_Init+0xbc>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <BSP_Console_Init+0xbc>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800098a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <BSP_Console_Init+0xb4>)
 800098e:	4911      	ldr	r1, [pc, #68]	@ (80009d4 <BSP_Console_Init+0xc0>)
 8000990:	400a      	ands	r2, r1
 8000992:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <BSP_Console_Init+0xbc>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <BSP_Console_Init+0xbc>)
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	0209      	lsls	r1, r1, #8
 800099e:	430a      	orrs	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <BSP_Console_Init+0xbc>)
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <BSP_Console_Init+0xc4>)
 80009a6:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <BSP_Console_Init+0xbc>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <BSP_Console_Init+0xbc>)
 80009ae:	210c      	movs	r1, #12
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <BSP_Console_Init+0xbc>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <BSP_Console_Init+0xbc>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000
 80009cc:	ffff00ff 	.word	0xffff00ff
 80009d0:	40004400 	.word	0x40004400
 80009d4:	fffcffff 	.word	0xfffcffff
 80009d8:	00000341 	.word	0x00000341

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f000 f825 	bl	8000a2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f000 f89b 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fc07 	bl	8000220 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a20:	08000be0 	.word	0x08000be0
  ldr r2, =_sbss
 8000a24:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a28:	20000020 	.word	0x20000020

08000a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_COMP_IRQHandler>

08000a2e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a4e:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <SystemCoreClockUpdate+0xf8>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	220c      	movs	r2, #12
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d011      	beq.n	8000a82 <SystemCoreClockUpdate+0x4a>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	d84f      	bhi.n	8000b04 <SystemCoreClockUpdate+0xcc>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <SystemCoreClockUpdate+0x3a>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d004      	beq.n	8000a7a <SystemCoreClockUpdate+0x42>
 8000a70:	e048      	b.n	8000b04 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000a72:	4b30      	ldr	r3, [pc, #192]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000a74:	4a30      	ldr	r2, [pc, #192]	@ (8000b38 <SystemCoreClockUpdate+0x100>)
 8000a76:	601a      	str	r2, [r3, #0]
      break;
 8000a78:	e048      	b.n	8000b0c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <SystemCoreClockUpdate+0x100>)
 8000a7e:	601a      	str	r2, [r3, #0]
      break;
 8000a80:	e044      	b.n	8000b0c <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <SystemCoreClockUpdate+0xf8>)
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	23f0      	movs	r3, #240	@ 0xf0
 8000a88:	039b      	lsls	r3, r3, #14
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <SystemCoreClockUpdate+0xf8>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	23c0      	movs	r3, #192	@ 0xc0
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	4013      	ands	r3, r2
 8000a98:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	0c9b      	lsrs	r3, r3, #18
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemCoreClockUpdate+0xf8>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	3301      	adds	r3, #1
 8000aac:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	025b      	lsls	r3, r3, #9
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d10a      	bne.n	8000ace <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	481f      	ldr	r0, [pc, #124]	@ (8000b38 <SystemCoreClockUpdate+0x100>)
 8000abc:	f7ff fb24 	bl	8000108 <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	435a      	muls	r2, r3
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000aca:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8000acc:	e01e      	b.n	8000b0c <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	23c0      	movs	r3, #192	@ 0xc0
 8000ad2:	025b      	lsls	r3, r3, #9
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d10a      	bne.n	8000aee <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	4818      	ldr	r0, [pc, #96]	@ (8000b3c <SystemCoreClockUpdate+0x104>)
 8000adc:	f7ff fb14 	bl	8000108 <__udivsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	435a      	muls	r2, r3
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000aea:	601a      	str	r2, [r3, #0]
      break;
 8000aec:	e00e      	b.n	8000b0c <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	4811      	ldr	r0, [pc, #68]	@ (8000b38 <SystemCoreClockUpdate+0x100>)
 8000af2:	f7ff fb09 	bl	8000108 <__udivsi3>
 8000af6:	0003      	movs	r3, r0
 8000af8:	001a      	movs	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	435a      	muls	r2, r3
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000b00:	601a      	str	r2, [r3, #0]
      break;
 8000b02:	e003      	b.n	8000b0c <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <SystemCoreClockUpdate+0x100>)
 8000b08:	601a      	str	r2, [r3, #0]
      break;
 8000b0a:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <SystemCoreClockUpdate+0xf8>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	220f      	movs	r2, #15
 8000b14:	4013      	ands	r3, r2
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <SystemCoreClockUpdate+0x108>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	40da      	lsrs	r2, r3
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <SystemCoreClockUpdate+0xfc>)
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	20000000 	.word	0x20000000
 8000b38:	007a1200 	.word	0x007a1200
 8000b3c:	02dc6c00 	.word	0x02dc6c00
 8000b40:	08000bc8 	.word	0x08000bc8

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2600      	movs	r6, #0
 8000b48:	4c0c      	ldr	r4, [pc, #48]	@ (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a6      	cmp	r6, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	2600      	movs	r6, #0
 8000b56:	f000 f819 	bl	8000b8c <_init>
 8000b5a:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4d0a      	ldr	r5, [pc, #40]	@ (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a6      	cmp	r6, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	00b3      	lsls	r3, r6, #2
 8000b6a:	58eb      	ldr	r3, [r5, r3]
 8000b6c:	4798      	blx	r3
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	00b3      	lsls	r3, r6, #2
 8000b74:	58eb      	ldr	r3, [r5, r3]
 8000b76:	4798      	blx	r3
 8000b78:	3601      	adds	r6, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000bd8 	.word	0x08000bd8
 8000b80:	08000bd8 	.word	0x08000bd8
 8000b84:	08000bdc 	.word	0x08000bdc
 8000b88:	08000bd8 	.word	0x08000bd8

08000b8c <_init>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr

08000b98 <_fini>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr
