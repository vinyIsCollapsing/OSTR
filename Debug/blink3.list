
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08004f28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e00  20000018  08004f40  00006018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002e18  08004f40  00006e18  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
  9 .debug_info   000078c4  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001979  00000000  00000000  0000d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000858  00000000  00000000  0000f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000648  00000000  00000000  0000fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001ed0  00000000  00000000  00010120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000adac  00000000  00000000  00011ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007476c  00000000  00000000  0001cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00091508  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cbc  00000000  00000000  0009154c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00093208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004858 	.word	0x08004858

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08004858 	.word	0x08004858

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}

0800032e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <xQueueGenericReset+0x1e>
 8000346:	b672      	cpsid	i
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e7fd      	b.n	8000348 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <xQueueGenericReset+0x26>
 8000352:	e06a      	b.n	800042a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000358:	2b00      	cmp	r3, #0
 800035a:	d066      	beq.n	800042a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	2400      	movs	r4, #0
 8000366:	0c15      	lsrs	r5, r2, #16
 8000368:	0c19      	lsrs	r1, r3, #16
 800036a:	b2a8      	uxth	r0, r5
 800036c:	2800      	cmp	r0, #0
 800036e:	d104      	bne.n	800037a <xQueueGenericReset+0x4c>
 8000370:	b288      	uxth	r0, r1
 8000372:	2800      	cmp	r0, #0
 8000374:	d013      	beq.n	800039e <xQueueGenericReset+0x70>
 8000376:	1c10      	adds	r0, r2, #0
 8000378:	e004      	b.n	8000384 <xQueueGenericReset+0x56>
 800037a:	b289      	uxth	r1, r1
 800037c:	2900      	cmp	r1, #0
 800037e:	d10d      	bne.n	800039c <xQueueGenericReset+0x6e>
 8000380:	1c29      	adds	r1, r5, #0
 8000382:	1c18      	adds	r0, r3, #0
 8000384:	b292      	uxth	r2, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	435a      	muls	r2, r3
 800038a:	b283      	uxth	r3, r0
 800038c:	b289      	uxth	r1, r1
 800038e:	434b      	muls	r3, r1
 8000390:	0c12      	lsrs	r2, r2, #16
 8000392:	189b      	adds	r3, r3, r2
 8000394:	141b      	asrs	r3, r3, #16
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <xQueueGenericReset+0x70>
 800039c:	2401      	movs	r4, #1
 800039e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003a0:	d143      	bne.n	800042a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80003a2:	f002 f895 	bl	80024d0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	434b      	muls	r3, r1
 80003b4:	18d2      	adds	r2, r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	434b      	muls	r3, r1
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2244      	movs	r2, #68	@ 0x44
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2245      	movs	r2, #69	@ 0x45
 80003ea:	21ff      	movs	r1, #255	@ 0xff
 80003ec:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10d      	bne.n	8000410 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3310      	adds	r3, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fb0b 	bl	8001a1c <xTaskRemoveFromEventList>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d00c      	beq.n	8000424 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800040a:	f002 f851 	bl	80024b0 <vPortYield>
 800040e:	e009      	b.n	8000424 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3310      	adds	r3, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff03 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3324      	adds	r3, #36	@ 0x24
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000424:	f002 f866 	bl	80024f4 <vPortExitCritical>
 8000428:	e001      	b.n	800042e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <xQueueGenericReset+0x10c>
 8000434:	b672      	cpsid	i
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}

08000444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	b08b      	sub	sp, #44	@ 0x2c
 8000448:	af02      	add	r7, sp, #8
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d065      	beq.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045c:	2000      	movs	r0, #0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0c19      	lsrs	r1, r3, #16
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c1e      	adds	r6, r3, #0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0c1b      	lsrs	r3, r3, #16
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	1c15      	adds	r5, r2, #0
 800046e:	b28a      	uxth	r2, r1
 8000470:	2a00      	cmp	r2, #0
 8000472:	d105      	bne.n	8000480 <xQueueGenericCreate+0x3c>
 8000474:	b29a      	uxth	r2, r3
 8000476:	2a00      	cmp	r2, #0
 8000478:	d013      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	1c34      	adds	r4, r6, #0
 800047e:	e003      	b.n	8000488 <xQueueGenericCreate+0x44>
 8000480:	b29b      	uxth	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10c      	bne.n	80004a0 <xQueueGenericCreate+0x5c>
 8000486:	1c2c      	adds	r4, r5, #0
 8000488:	b2b3      	uxth	r3, r6
 800048a:	b2aa      	uxth	r2, r5
 800048c:	435a      	muls	r2, r3
 800048e:	b2a3      	uxth	r3, r4
 8000490:	b289      	uxth	r1, r1
 8000492:	434b      	muls	r3, r1
 8000494:	0c12      	lsrs	r2, r2, #16
 8000496:	189b      	adds	r3, r3, r2
 8000498:	141b      	asrs	r3, r3, #16
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 80004a0:	2001      	movs	r0, #1
 80004a2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a4:	d140      	bne.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004ac:	3351      	adds	r3, #81	@ 0x51
 80004ae:	d83b      	bhi.n	8000528 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4353      	muls	r3, r2
 80004b6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3350      	adds	r3, #80	@ 0x50
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 f89f 	bl	8002600 <pvPortMalloc>
 80004c2:	0003      	movs	r3, r0
 80004c4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00f      	beq.n	80004ec <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3350      	adds	r3, #80	@ 0x50
 80004d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781c      	ldrb	r4, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f000 f82f 	bl	8000548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004ea:	e023      	b.n	8000534 <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 80004ec:	f002 f9ca 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80004f0:	0003      	movs	r3, r0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 f91c 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80004f8:	0003      	movs	r3, r0
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <xQueueGenericCreate+0xfc>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d015      	beq.n	8000534 <xQueueGenericCreate+0xf0>
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <xQueueGenericCreate+0x100>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	3340      	adds	r3, #64	@ 0x40
 8000512:	b2db      	uxtb	r3, r3
 8000514:	0018      	movs	r0, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <xQueueGenericCreate+0x100>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f002 fe69 	bl	80031f8 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8000526:	e005      	b.n	8000534 <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <xQueueGenericCreate+0xf2>
 800052e:	b672      	cpsid	i
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 8000534:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000536:	69fb      	ldr	r3, [r7, #28]
    }
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	@ 0x24
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	200019c8 	.word	0x200019c8
 8000544:	20000008 	.word	0x20000008

08000548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	001a      	movs	r2, r3
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff fed5 	bl	800032e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	1cfa      	adds	r2, r7, #3
 8000588:	214c      	movs	r1, #76	@ 0x4c
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	0018      	movs	r0, r3
 8000592:	f002 f8b2 	bl	80026fa <prvTraceGetQueueType>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 f8ba 	bl	8003718 <prvTraceGetObjectHandle>
 80005a4:	0003      	movs	r3, r0
 80005a6:	001a      	movs	r2, r3
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 f920 	bl	80027f2 <prvTraceSetQueueNumberLow16>
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <prvInitialiseNewQueue+0x140>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f933 	bl	8002826 <prvTraceSetQueueNumberHigh16>
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 f899 	bl	80026fa <prvTraceGetQueueType>
 80005c8:	0003      	movs	r3, r0
 80005ca:	001a      	movs	r2, r3
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 80005ce:	5c9c      	ldrb	r4, [r3, r2]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 f8f0 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 80005d8:	0003      	movs	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	0019      	movs	r1, r3
 80005de:	0020      	movs	r0, r4
 80005e0:	f003 f94a 	bl	8003878 <prvMarkObjectAsUsed>
 80005e4:	f002 f94e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80005e8:	0003      	movs	r3, r0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 f8a0 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <prvInitialiseNewQueue+0x144>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4013      	ands	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d029      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	0018      	movs	r0, r3
 8000604:	f002 f8e6 	bl	80027d4 <prvTraceGetQueueNumberHigh16>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <prvInitialiseNewQueue+0x144>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4013      	ands	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01d      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	0018      	movs	r0, r3
 800061c:	f002 f86d 	bl	80026fa <prvTraceGetQueueType>
 8000620:	0003      	movs	r3, r0
 8000622:	001a      	movs	r2, r3
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000626:	5c9b      	ldrb	r3, [r3, r2]
 8000628:	3318      	adds	r3, #24
 800062a:	b2db      	uxtb	r3, r3
 800062c:	001d      	movs	r5, r3
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	0018      	movs	r0, r3
 8000632:	f002 f862 	bl	80026fa <prvTraceGetQueueType>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800063c:	5c9c      	ldrb	r4, [r3, r2]
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f8b9 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000646:	0003      	movs	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	001a      	movs	r2, r3
 800064c:	0021      	movs	r1, r4
 800064e:	0028      	movs	r0, r5
 8000650:	f002 fdd2 	bl	80031f8 <prvTraceStoreKernelCall>
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	0018      	movs	r0, r3
 8000658:	f002 f84f 	bl	80026fa <prvTraceGetQueueType>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000662:	5c9c      	ldrb	r4, [r3, r2]
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	0018      	movs	r0, r3
 8000668:	f002 f8a6 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 800066c:	0003      	movs	r3, r0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	0020      	movs	r0, r4
 8000676:	f002 ff63 	bl	8003540 <prvTraceSetObjectState>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000008 	.word	0x20000008
 8000688:	200019ca 	.word	0x200019ca
 800068c:	200019c8 	.word	0x200019c8

08000690 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d102      	bne.n	80006b0 <xQueueReceive+0x20>
 80006aa:	b672      	cpsid	i
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	e7fd      	b.n	80006ac <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d103      	bne.n	80006be <xQueueReceive+0x2e>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <xQueueReceive+0x32>
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <xQueueReceive+0x34>
 80006c2:	2300      	movs	r3, #0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <xQueueReceive+0x3e>
 80006c8:	b672      	cpsid	i
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	e7fd      	b.n	80006ca <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006ce:	f001 fb8f 	bl	8001df0 <xTaskGetSchedulerState>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d102      	bne.n	80006dc <xQueueReceive+0x4c>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d101      	bne.n	80006e0 <xQueueReceive+0x50>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <xQueueReceive+0x52>
 80006e0:	2300      	movs	r3, #0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <xQueueReceive+0x5c>
 80006e6:	b672      	cpsid	i
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	e7fd      	b.n	80006e8 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006ec:	f001 fef0 	bl	80024d0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f4:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d100      	bne.n	80006fe <xQueueReceive+0x6e>
 80006fc:	e07d      	b.n	80007fa <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 f9d2 	bl	8000aae <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800070a:	f002 f8bb 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 800070e:	0003      	movs	r3, r0
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f80d 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000716:	0003      	movs	r3, r0
 8000718:	001a      	movs	r2, r3
 800071a:	4bd2      	ldr	r3, [pc, #840]	@ (8000a64 <xQueueReceive+0x3d4>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	4013      	ands	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d029      	beq.n	800077a <xQueueReceive+0xea>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	0018      	movs	r0, r3
 800072a:	f002 f853 	bl	80027d4 <prvTraceGetQueueNumberHigh16>
 800072e:	0003      	movs	r3, r0
 8000730:	001a      	movs	r2, r3
 8000732:	4bcc      	ldr	r3, [pc, #816]	@ (8000a64 <xQueueReceive+0x3d4>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	4013      	ands	r3, r2
 8000738:	b29b      	uxth	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d01d      	beq.n	800077a <xQueueReceive+0xea>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	0018      	movs	r0, r3
 8000742:	f001 ffda 	bl	80026fa <prvTraceGetQueueType>
 8000746:	0003      	movs	r3, r0
 8000748:	001a      	movs	r2, r3
 800074a:	4bc7      	ldr	r3, [pc, #796]	@ (8000a68 <xQueueReceive+0x3d8>)
 800074c:	5c9b      	ldrb	r3, [r3, r2]
 800074e:	3328      	adds	r3, #40	@ 0x28
 8000750:	b2db      	uxtb	r3, r3
 8000752:	001d      	movs	r5, r3
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	0018      	movs	r0, r3
 8000758:	f001 ffcf 	bl	80026fa <prvTraceGetQueueType>
 800075c:	0003      	movs	r3, r0
 800075e:	001a      	movs	r2, r3
 8000760:	4bc1      	ldr	r3, [pc, #772]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000762:	5c9c      	ldrb	r4, [r3, r2]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f826 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 800076c:	0003      	movs	r3, r0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	001a      	movs	r2, r3
 8000772:	0021      	movs	r1, r4
 8000774:	0028      	movs	r0, r5
 8000776:	f002 fd3f 	bl	80031f8 <prvTraceStoreKernelCall>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	0018      	movs	r0, r3
 800077e:	f001 ffbc 	bl	80026fa <prvTraceGetQueueType>
 8000782:	0003      	movs	r3, r0
 8000784:	001a      	movs	r2, r3
 8000786:	4bb8      	ldr	r3, [pc, #736]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000788:	5c9c      	ldrb	r4, [r3, r2]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	0018      	movs	r0, r3
 800078e:	f002 f813 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000792:	0003      	movs	r3, r0
 8000794:	b2dd      	uxtb	r5, r3
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	0018      	movs	r0, r3
 800079a:	f001 ffae 	bl	80026fa <prvTraceGetQueueType>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	4bb1      	ldr	r3, [pc, #708]	@ (8000a68 <xQueueReceive+0x3d8>)
 80007a4:	5c9b      	ldrb	r3, [r3, r2]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d108      	bne.n	80007bc <xQueueReceive+0x12c>
 80007aa:	f002 f86b 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80007ae:	0003      	movs	r3, r0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 ffaf 	bl	8002714 <prvTraceGetTaskNumberLow16>
 80007b6:	0003      	movs	r3, r0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	e004      	b.n	80007c6 <xQueueReceive+0x136>
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3b01      	subs	r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	001a      	movs	r2, r3
 80007c8:	0029      	movs	r1, r5
 80007ca:	0020      	movs	r0, r4
 80007cc:	f002 feb8 	bl	8003540 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d008      	beq.n	80007f2 <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	3310      	adds	r3, #16
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 f919 	bl	8001a1c <xTaskRemoveFromEventList>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007ee:	f001 fe5f 	bl	80024b0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80007f2:	f001 fe7f 	bl	80024f4 <vPortExitCritical>
                return pdPASS;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e12f      	b.n	8000a5a <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d13b      	bne.n	8000878 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000800:	f001 fe78 	bl	80024f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000804:	f002 f83e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8000808:	0003      	movs	r3, r0
 800080a:	0018      	movs	r0, r3
 800080c:	f001 ff90 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000810:	0003      	movs	r3, r0
 8000812:	001a      	movs	r2, r3
 8000814:	4b93      	ldr	r3, [pc, #588]	@ (8000a64 <xQueueReceive+0x3d4>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	4013      	ands	r3, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d029      	beq.n	8000874 <xQueueReceive+0x1e4>
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	0018      	movs	r0, r3
 8000824:	f001 ffd6 	bl	80027d4 <prvTraceGetQueueNumberHigh16>
 8000828:	0003      	movs	r3, r0
 800082a:	001a      	movs	r2, r3
 800082c:	4b8d      	ldr	r3, [pc, #564]	@ (8000a64 <xQueueReceive+0x3d4>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4013      	ands	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01d      	beq.n	8000874 <xQueueReceive+0x1e4>
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	0018      	movs	r0, r3
 800083c:	f001 ff5d 	bl	80026fa <prvTraceGetQueueType>
 8000840:	0003      	movs	r3, r0
 8000842:	001a      	movs	r2, r3
 8000844:	4b88      	ldr	r3, [pc, #544]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000846:	5c9b      	ldrb	r3, [r3, r2]
 8000848:	3350      	adds	r3, #80	@ 0x50
 800084a:	b2db      	uxtb	r3, r3
 800084c:	001d      	movs	r5, r3
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	0018      	movs	r0, r3
 8000852:	f001 ff52 	bl	80026fa <prvTraceGetQueueType>
 8000856:	0003      	movs	r3, r0
 8000858:	001a      	movs	r2, r3
 800085a:	4b83      	ldr	r3, [pc, #524]	@ (8000a68 <xQueueReceive+0x3d8>)
 800085c:	5c9c      	ldrb	r4, [r3, r2]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	0018      	movs	r0, r3
 8000862:	f001 ffa9 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000866:	0003      	movs	r3, r0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	001a      	movs	r2, r3
 800086c:	0021      	movs	r1, r4
 800086e:	0028      	movs	r0, r5
 8000870:	f002 fcc2 	bl	80031f8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000874:	2300      	movs	r3, #0
 8000876:	e0f0      	b.n	8000a5a <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087a:	2b00      	cmp	r3, #0
 800087c:	d106      	bne.n	800088c <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800087e:	2314      	movs	r3, #20
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f9ac 	bl	8001be0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800088c:	f001 fe32 	bl	80024f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000890:	f000 fd6e 	bl	8001370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000894:	f001 fe1c 	bl	80024d0 <vPortEnterCritical>
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	2244      	movs	r2, #68	@ 0x44
 800089c:	5c9b      	ldrb	r3, [r3, r2]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	3301      	adds	r3, #1
 80008a2:	d103      	bne.n	80008ac <xQueueReceive+0x21c>
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2244      	movs	r2, #68	@ 0x44
 80008a8:	2100      	movs	r1, #0
 80008aa:	5499      	strb	r1, [r3, r2]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	2245      	movs	r2, #69	@ 0x45
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	d103      	bne.n	80008c0 <xQueueReceive+0x230>
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	2245      	movs	r2, #69	@ 0x45
 80008bc:	2100      	movs	r1, #0
 80008be:	5499      	strb	r1, [r3, r2]
 80008c0:	f001 fe18 	bl	80024f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008c4:	1d3a      	adds	r2, r7, #4
 80008c6:	2314      	movs	r3, #20
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f99b 	bl	8001c08 <xTaskCheckForTimeOut>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d000      	beq.n	80008d8 <xQueueReceive+0x248>
 80008d6:	e07a      	b.n	80009ce <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 f96b 	bl	8000bb6 <prvIsQueueEmpty>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d06d      	beq.n	80009c0 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80008e4:	f001 ffce 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80008e8:	0003      	movs	r3, r0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 ff20 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80008f0:	0003      	movs	r3, r0
 80008f2:	001a      	movs	r2, r3
 80008f4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a64 <xQueueReceive+0x3d4>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d029      	beq.n	8000954 <xQueueReceive+0x2c4>
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	0018      	movs	r0, r3
 8000904:	f001 ff66 	bl	80027d4 <prvTraceGetQueueNumberHigh16>
 8000908:	0003      	movs	r3, r0
 800090a:	001a      	movs	r2, r3
 800090c:	4b55      	ldr	r3, [pc, #340]	@ (8000a64 <xQueueReceive+0x3d4>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	4013      	ands	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d01d      	beq.n	8000954 <xQueueReceive+0x2c4>
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	0018      	movs	r0, r3
 800091c:	f001 feed 	bl	80026fa <prvTraceGetQueueType>
 8000920:	0003      	movs	r3, r0
 8000922:	001a      	movs	r2, r3
 8000924:	4b50      	ldr	r3, [pc, #320]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000926:	5c9b      	ldrb	r3, [r3, r2]
 8000928:	3368      	adds	r3, #104	@ 0x68
 800092a:	b2db      	uxtb	r3, r3
 800092c:	001d      	movs	r5, r3
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fee2 	bl	80026fa <prvTraceGetQueueType>
 8000936:	0003      	movs	r3, r0
 8000938:	001a      	movs	r2, r3
 800093a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a68 <xQueueReceive+0x3d8>)
 800093c:	5c9c      	ldrb	r4, [r3, r2]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	0018      	movs	r0, r3
 8000942:	f001 ff39 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000946:	0003      	movs	r3, r0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	001a      	movs	r2, r3
 800094c:	0021      	movs	r1, r4
 800094e:	0028      	movs	r0, r5
 8000950:	f002 fc52 	bl	80031f8 <prvTraceStoreKernelCall>
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	0018      	movs	r0, r3
 8000958:	f001 fecf 	bl	80026fa <prvTraceGetQueueType>
 800095c:	0003      	movs	r3, r0
 800095e:	001a      	movs	r2, r3
 8000960:	4b41      	ldr	r3, [pc, #260]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000962:	5c9b      	ldrb	r3, [r3, r2]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d018      	beq.n	800099a <xQueueReceive+0x30a>
 8000968:	f001 ff8c 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 800096c:	0003      	movs	r3, r0
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fede 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000974:	0003      	movs	r3, r0
 8000976:	001a      	movs	r2, r3
 8000978:	4b3a      	ldr	r3, [pc, #232]	@ (8000a64 <xQueueReceive+0x3d4>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	4013      	ands	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00a      	beq.n	800099a <xQueueReceive+0x30a>
 8000984:	f001 ff7e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fec2 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8000990:	0003      	movs	r3, r0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	0018      	movs	r0, r3
 8000996:	f002 fe2b 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3324      	adds	r3, #36	@ 0x24
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 ff9e 	bl	80018e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f8a5 	bl	8000afa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80009b0:	f000 fcea 	bl	8001388 <xTaskResumeAll>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d000      	beq.n	80009ba <xQueueReceive+0x32a>
 80009b8:	e698      	b.n	80006ec <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 80009ba:	f001 fd79 	bl	80024b0 <vPortYield>
 80009be:	e695      	b.n	80006ec <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 f899 	bl	8000afa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009c8:	f000 fcde 	bl	8001388 <xTaskResumeAll>
 80009cc:	e68e      	b.n	80006ec <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 f892 	bl	8000afa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009d6:	f000 fcd7 	bl	8001388 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 f8ea 	bl	8000bb6 <prvIsQueueEmpty>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d100      	bne.n	80009e8 <xQueueReceive+0x358>
 80009e6:	e681      	b.n	80006ec <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009e8:	f001 ff4c 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80009ec:	0003      	movs	r3, r0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fe9e 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80009f4:	0003      	movs	r3, r0
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <xQueueReceive+0x3d4>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4013      	ands	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d029      	beq.n	8000a58 <xQueueReceive+0x3c8>
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fee4 	bl	80027d4 <prvTraceGetQueueNumberHigh16>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	001a      	movs	r2, r3
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <xQueueReceive+0x3d4>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	4013      	ands	r3, r2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01d      	beq.n	8000a58 <xQueueReceive+0x3c8>
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fe6b 	bl	80026fa <prvTraceGetQueueType>
 8000a24:	0003      	movs	r3, r0
 8000a26:	001a      	movs	r2, r3
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000a2a:	5c9b      	ldrb	r3, [r3, r2]
 8000a2c:	3350      	adds	r3, #80	@ 0x50
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	001d      	movs	r5, r3
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 fe60 	bl	80026fa <prvTraceGetQueueType>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <xQueueReceive+0x3d8>)
 8000a40:	5c9c      	ldrb	r4, [r3, r2]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 feb7 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	001a      	movs	r2, r3
 8000a50:	0021      	movs	r1, r4
 8000a52:	0028      	movs	r0, r5
 8000a54:	f002 fbd0 	bl	80031f8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8000a58:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00a      	add	sp, #40	@ 0x28
 8000a60:	bdb0      	pop	{r4, r5, r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	200019c8 	.word	0x200019c8
 8000a68:	20000008 	.word	0x20000008

08000a6c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	224c      	movs	r2, #76	@ 0x4c
 8000aa4:	5c9b      	ldrb	r3, [r3, r2]
    }
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}

08000aae <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d018      	beq.n	8000af2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	18d2      	adds	r2, r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d303      	bcc.n	8000ae2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68d9      	ldr	r1, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 fea9 	bl	8004844 <memcpy>
    }
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}

08000afa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b02:	f001 fce5 	bl	80024d0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	2145      	movs	r1, #69	@ 0x45
 8000b0e:	5c52      	ldrb	r2, [r2, r1]
 8000b10:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b12:	e013      	b.n	8000b3c <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d016      	beq.n	8000b4a <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3324      	adds	r3, #36	@ 0x24
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 ff7b 	bl	8001a1c <xTaskRemoveFromEventList>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b2a:	f001 f8bb 	bl	8001ca4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dce5      	bgt.n	8000b14 <prvUnlockQueue+0x1a>
 8000b48:	e000      	b.n	8000b4c <prvUnlockQueue+0x52>
                    break;
 8000b4a:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2245      	movs	r2, #69	@ 0x45
 8000b50:	21ff      	movs	r1, #255	@ 0xff
 8000b52:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000b54:	f001 fcce 	bl	80024f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b58:	f001 fcba 	bl	80024d0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b5c:	230e      	movs	r3, #14
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	2144      	movs	r1, #68	@ 0x44
 8000b64:	5c52      	ldrb	r2, [r2, r1]
 8000b66:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b68:	e013      	b.n	8000b92 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d016      	beq.n	8000ba0 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3310      	adds	r3, #16
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 ff50 	bl	8001a1c <xTaskRemoveFromEventList>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000b80:	f001 f890 	bl	8001ca4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b84:	210e      	movs	r1, #14
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b92:	230e      	movs	r3, #14
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dce5      	bgt.n	8000b6a <prvUnlockQueue+0x70>
 8000b9e:	e000      	b.n	8000ba2 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8000ba0:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2244      	movs	r2, #68	@ 0x44
 8000ba6:	21ff      	movs	r1, #255	@ 0xff
 8000ba8:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000baa:	f001 fca3 	bl	80024f4 <vPortExitCritical>
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000bbe:	f001 fc87 	bl	80024d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e001      	b.n	8000bd4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000bd4:	f001 fc8e 	bl	80024f4 <vPortExitCritical>

    return xReturn;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <vQueueAddToRegistry+0x1a>
 8000bf8:	b672      	cpsid	i
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	e7fd      	b.n	8000bfa <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d025      	beq.n	8000c50 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e01f      	b.n	8000c4a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <vQueueAddToRegistry+0xac>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d105      	bne.n	8000c28 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <vQueueAddToRegistry+0xac>)
 8000c22:	18d3      	adds	r3, r2, r3
 8000c24:	60bb      	str	r3, [r7, #8]
                    break;
 8000c26:	e013      	b.n	8000c50 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <vQueueAddToRegistry+0x60>
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <vQueueAddToRegistry+0xac>)
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	58d3      	ldr	r3, [r2, r3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d104      	bne.n	8000c44 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	00da      	lsls	r2, r3, #3
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <vQueueAddToRegistry+0xac>)
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d9dc      	bls.n	8000c0a <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d018      	beq.n	8000c88 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 fd48 	bl	80026fa <prvTraceGetQueueType>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <vQueueAddToRegistry+0xb0>)
 8000c70:	5c9c      	ldrb	r4, [r3, r2]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fd9f 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	0020      	movs	r0, r4
 8000c84:	f002 fe40 	bl	8003908 <prvTraceSetObjectName>
        }
    }
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b005      	add	sp, #20
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	20000034 	.word	0x20000034
 8000c94:	20000008 	.word	0x20000008

08000c98 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ca8:	f001 fc12 	bl	80024d0 <vPortEnterCritical>
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2244      	movs	r2, #68	@ 0x44
 8000cb0:	5c9b      	ldrb	r3, [r3, r2]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	d103      	bne.n	8000cc0 <vQueueWaitForMessageRestricted+0x28>
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2244      	movs	r2, #68	@ 0x44
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	5499      	strb	r1, [r3, r2]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2245      	movs	r2, #69	@ 0x45
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	d103      	bne.n	8000cd4 <vQueueWaitForMessageRestricted+0x3c>
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2245      	movs	r2, #69	@ 0x45
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]
 8000cd4:	f001 fc0e 	bl	80024f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d106      	bne.n	8000cee <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3324      	adds	r3, #36	@ 0x24
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fe1b 	bl	8001924 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff02 	bl	8000afa <prvUnlockQueue>
    }
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b006      	add	sp, #24
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000cfe:	b590      	push	{r4, r7, lr}
 8000d00:	b08d      	sub	sp, #52	@ 0x34
 8000d02:	af04      	add	r7, sp, #16
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d0e:	1dbb      	adds	r3, r7, #6
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 fc73 	bl	8002600 <pvPortMalloc>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d016      	beq.n	8000d52 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d24:	2054      	movs	r0, #84	@ 0x54
 8000d26:	f001 fc6b 	bl	8002600 <pvPortMalloc>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2254      	movs	r2, #84	@ 0x54
 8000d38:	2100      	movs	r1, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f003 fd56 	bl	80047ec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d46:	e006      	b.n	8000d56 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fcba 	bl	80026c4 <vPortFree>
 8000d50:	e001      	b.n	8000d56 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d016      	beq.n	8000d8a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	683c      	ldr	r4, [r7, #0]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	2300      	movs	r3, #0
 8000d68:	9303      	str	r3, [sp, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	0023      	movs	r3, r4
 8000d78:	f000 f810 	bl	8000d9c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f88a 	bl	8000e98 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	e002      	b.n	8000d90 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d90:	69bb      	ldr	r3, [r7, #24]
    }
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b009      	add	sp, #36	@ 0x24
 8000d98:	bd90      	pop	{r4, r7, pc}
	...

08000d9c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	001a      	movs	r2, r3
 8000db4:	21a5      	movs	r1, #165	@ 0xa5
 8000db6:	f003 fd19 	bl	80047ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4934      	ldr	r1, [pc, #208]	@ (8000e94 <prvInitialiseNewTask+0xf8>)
 8000dc2:	468c      	mov	ip, r1
 8000dc4:	4463      	add	r3, ip
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	2207      	movs	r2, #7
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d002      	beq.n	8000de2 <prvInitialiseNewTask+0x46>
 8000ddc:	b672      	cpsid	i
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	e7fd      	b.n	8000dde <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01f      	beq.n	8000e28 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e013      	b.n	8000e16 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	18d3      	adds	r3, r2, r3
 8000df4:	7818      	ldrb	r0, [r3, #0]
 8000df6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000df8:	2134      	movs	r1, #52	@ 0x34
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	185b      	adds	r3, r3, r1
 8000e00:	1c02      	adds	r2, r0, #0
 8000e02:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d9e8      	bls.n	8000dee <prvInitialiseNewTask+0x52>
 8000e1c:	e000      	b.n	8000e20 <prvInitialiseNewTask+0x84>
            {
                break;
 8000e1e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e22:	2243      	movs	r2, #67	@ 0x43
 8000e24:	2100      	movs	r1, #0
 8000e26:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d902      	bls.n	8000e34 <prvInitialiseNewTask+0x98>
 8000e2e:	b672      	cpsid	i
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	e7fd      	b.n	8000e30 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d901      	bls.n	8000e3e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e40:	6a3a      	ldr	r2, [r7, #32]
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e46:	3304      	adds	r3, #4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fa07 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e50:	3318      	adds	r3, #24
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff fa02 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	2205      	movs	r2, #5
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 fa8d 	bl	8002394 <pxPortInitialiseStack>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <prvInitialiseNewTask+0xf0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	3fffffff 	.word	0x3fffffff

08000e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ea0:	f001 fb16 	bl	80024d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8001098 <prvAddNewTaskToReadyList+0x200>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8001098 <prvAddNewTaskToReadyList+0x200>)
 8000eac:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8000eae:	4b7b      	ldr	r3, [pc, #492]	@ (800109c <prvAddNewTaskToReadyList+0x204>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000eb6:	4b79      	ldr	r3, [pc, #484]	@ (800109c <prvAddNewTaskToReadyList+0x204>)
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ebc:	4b76      	ldr	r3, [pc, #472]	@ (8001098 <prvAddNewTaskToReadyList+0x200>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d110      	bne.n	8000ee6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ec4:	f000 ff2e 	bl	8001d24 <prvInitialiseTaskLists>
 8000ec8:	e00d      	b.n	8000ee6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000eca:	4b75      	ldr	r3, [pc, #468]	@ (80010a0 <prvAddNewTaskToReadyList+0x208>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ed2:	4b72      	ldr	r3, [pc, #456]	@ (800109c <prvAddNewTaskToReadyList+0x204>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d802      	bhi.n	8000ee6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800109c <prvAddNewTaskToReadyList+0x204>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80010a4 <prvAddNewTaskToReadyList+0x20c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	4b6d      	ldr	r3, [pc, #436]	@ (80010a4 <prvAddNewTaskToReadyList+0x20c>)
 8000eee:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80010a4 <prvAddNewTaskToReadyList+0x20c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d065      	beq.n	8000fca <prvAddNewTaskToReadyList+0x132>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d04f      	beq.n	8000fa4 <prvAddNewTaskToReadyList+0x10c>
 8000f04:	2003      	movs	r0, #3
 8000f06:	f002 fc07 	bl	8003718 <prvTraceGetObjectHandle>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fc1b 	bl	800274e <prvTraceSetTaskNumberLow16>
 8000f18:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <prvAddNewTaskToReadyList+0x210>)
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 fc2e 	bl	8002782 <prvTraceSetTaskNumberHigh16>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 fbf3 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	b2d9      	uxtb	r1, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3334      	adds	r3, #52	@ 0x34
 8000f36:	001a      	movs	r2, r3
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f002 fce5 	bl	8003908 <prvTraceSetObjectName>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fbe7 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8000f46:	0003      	movs	r3, r0
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	001a      	movs	r2, r3
 8000f52:	2003      	movs	r0, #3
 8000f54:	f002 fac2 	bl	80034dc <prvTraceSetPriorityProperty>
 8000f58:	f001 fc94 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 fbe6 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000f64:	0003      	movs	r3, r0
 8000f66:	001a      	movs	r2, r3
 8000f68:	4b50      	ldr	r3, [pc, #320]	@ (80010ac <prvAddNewTaskToReadyList+0x214>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d02a      	beq.n	8000fca <prvAddNewTaskToReadyList+0x132>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 fbda 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	001a      	movs	r2, r3
 8000f80:	4b4a      	ldr	r3, [pc, #296]	@ (80010ac <prvAddNewTaskToReadyList+0x214>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	4013      	ands	r3, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01e      	beq.n	8000fca <prvAddNewTaskToReadyList+0x132>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 fbc0 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8000f94:	0003      	movs	r3, r0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	201b      	movs	r0, #27
 8000f9e:	f002 f92b 	bl	80031f8 <prvTraceStoreKernelCall>
 8000fa2:	e012      	b.n	8000fca <prvAddNewTaskToReadyList+0x132>
 8000fa4:	f001 fc6e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fbc0 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <prvAddNewTaskToReadyList+0x214>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <prvAddNewTaskToReadyList+0x132>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	201b      	movs	r0, #27
 8000fc6:	f002 f917 	bl	80031f8 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 fbaf 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <prvAddNewTaskToReadyList+0x214>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <prvAddNewTaskToReadyList+0x15c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f001 fb95 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8000fea:	0003      	movs	r3, r0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 fff4 	bl	8002fdc <prvTraceStoreTaskReady>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <prvAddNewTaskToReadyList+0x218>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d903      	bls.n	8001008 <prvAddNewTaskToReadyList+0x170>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <prvAddNewTaskToReadyList+0x218>)
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800100c:	4929      	ldr	r1, [pc, #164]	@ (80010b4 <prvAddNewTaskToReadyList+0x21c>)
 800100e:	0013      	movs	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	189b      	adds	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18cb      	adds	r3, r1, r3
 8001018:	3304      	adds	r3, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	3204      	adds	r2, #4
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	1d1a      	adds	r2, r3, #4
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001042:	0013      	movs	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	189b      	adds	r3, r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4a1a      	ldr	r2, [pc, #104]	@ (80010b4 <prvAddNewTaskToReadyList+0x21c>)
 800104c:	189a      	adds	r2, r3, r2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001056:	4917      	ldr	r1, [pc, #92]	@ (80010b4 <prvAddNewTaskToReadyList+0x21c>)
 8001058:	0013      	movs	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	189b      	adds	r3, r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	585b      	ldr	r3, [r3, r1]
 8001062:	1c58      	adds	r0, r3, #1
 8001064:	4913      	ldr	r1, [pc, #76]	@ (80010b4 <prvAddNewTaskToReadyList+0x21c>)
 8001066:	0013      	movs	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	189b      	adds	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001070:	f001 fa40 	bl	80024f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <prvAddNewTaskToReadyList+0x208>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <prvAddNewTaskToReadyList+0x204>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001086:	429a      	cmp	r2, r3
 8001088:	d201      	bcs.n	800108e <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800108a:	f001 fa11 	bl	80024b0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	20000130 	.word	0x20000130
 800109c:	20000084 	.word	0x20000084
 80010a0:	2000013c 	.word	0x2000013c
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	200019ca 	.word	0x200019ca
 80010ac:	200019c8 	.word	0x200019c8
 80010b0:	20000138 	.word	0x20000138
 80010b4:	20000088 	.word	0x20000088

080010b8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <xTaskDelayUntil+0x1a>
 80010cc:	b672      	cpsid	i
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	e7fd      	b.n	80010ce <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <xTaskDelayUntil+0x26>
 80010d8:	b672      	cpsid	i
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	e7fd      	b.n	80010da <xTaskDelayUntil+0x22>
        configASSERT( uxSchedulerSuspended == 0 );
 80010de:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <xTaskDelayUntil+0x120>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <xTaskDelayUntil+0x34>
 80010e6:	b672      	cpsid	i
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	e7fd      	b.n	80010e8 <xTaskDelayUntil+0x30>

        vTaskSuspendAll();
 80010ec:	f000 f940 	bl	8001370 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80010f0:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <xTaskDelayUntil+0x124>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	429a      	cmp	r2, r3
 8001108:	d20b      	bcs.n	8001122 <xTaskDelayUntil+0x6a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d211      	bcs.n	8001138 <xTaskDelayUntil+0x80>
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d90d      	bls.n	8001138 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e00a      	b.n	8001138 <xTaskDelayUntil+0x80>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d303      	bcc.n	8001134 <xTaskDelayUntil+0x7c>
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d901      	bls.n	8001138 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d03b      	beq.n	80011bc <xTaskDelayUntil+0x104>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <xTaskDelayUntil+0x128>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0018      	movs	r0, r3
 800114a:	f001 faf1 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 800114e:	0003      	movs	r3, r0
 8001150:	001a      	movs	r2, r3
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <xTaskDelayUntil+0x12c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4013      	ands	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00e      	beq.n	800117c <xTaskDelayUntil+0xc4>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0019      	movs	r1, r3
 8001162:	2088      	movs	r0, #136	@ 0x88
 8001164:	f002 f8dc 	bl	8003320 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <xTaskDelayUntil+0x128>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0018      	movs	r0, r3
 800116e:	f001 fad1 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8001172:	0003      	movs	r3, r0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	0018      	movs	r0, r3
 8001178:	f002 fa3a 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
 800117c:	f001 fb82 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8001180:	0003      	movs	r3, r0
 8001182:	0018      	movs	r0, r3
 8001184:	f001 fad4 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001188:	0003      	movs	r3, r0
 800118a:	001a      	movs	r2, r3
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <xTaskDelayUntil+0x12c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4013      	ands	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <xTaskDelayUntil+0xf6>
 8001198:	f001 fb74 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 800119c:	0003      	movs	r3, r0
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fab8 	bl	8002714 <prvTraceGetTaskNumberLow16>
 80011a4:	0003      	movs	r3, r0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	0018      	movs	r0, r3
 80011aa:	f002 fa21 	bl	80035f0 <prvTraceSetTaskInstanceFinished>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fe36 	bl	8001e28 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80011bc:	f000 f8e4 	bl	8001388 <xTaskResumeAll>
 80011c0:	0003      	movs	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <xTaskDelayUntil+0x116>
        {
            portYIELD_WITHIN_API();
 80011ca:	f001 f971 	bl	80024b0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80011ce:	697b      	ldr	r3, [r7, #20]
    }
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000158 	.word	0x20000158
 80011dc:	20000134 	.word	0x20000134
 80011e0:	20000084 	.word	0x20000084
 80011e4:	200019c8 	.word	0x200019c8

080011e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d046      	beq.n	8001288 <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <vTaskDelay+0xb4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <vTaskDelay+0x20>
 8001202:	b672      	cpsid	i
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	e7fd      	b.n	8001204 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001208:	f000 f8b2 	bl	8001370 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <vTaskDelay+0xb8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f001 fa8d 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001216:	0003      	movs	r3, r0
 8001218:	001a      	movs	r2, r3
 800121a:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <vTaskDelay+0xbc>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	4013      	ands	r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00e      	beq.n	8001244 <vTaskDelay+0x5c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0019      	movs	r1, r3
 800122a:	2089      	movs	r0, #137	@ 0x89
 800122c:	f002 f878 	bl	8003320 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <vTaskDelay+0xb8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0018      	movs	r0, r3
 8001236:	f001 fa6d 	bl	8002714 <prvTraceGetTaskNumberLow16>
 800123a:	0003      	movs	r3, r0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	0018      	movs	r0, r3
 8001240:	f002 f9d6 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
 8001244:	f001 fb1e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8001248:	0003      	movs	r3, r0
 800124a:	0018      	movs	r0, r3
 800124c:	f001 fa70 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001250:	0003      	movs	r3, r0
 8001252:	001a      	movs	r2, r3
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <vTaskDelay+0xbc>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	4013      	ands	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <vTaskDelay+0x8e>
 8001260:	f001 fb10 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8001264:	0003      	movs	r3, r0
 8001266:	0018      	movs	r0, r3
 8001268:	f001 fa54 	bl	8002714 <prvTraceGetTaskNumberLow16>
 800126c:	0003      	movs	r3, r0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	0018      	movs	r0, r3
 8001272:	f002 f9bd 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2100      	movs	r1, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f000 fdd4 	bl	8001e28 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001280:	f000 f882 	bl	8001388 <xTaskResumeAll>
 8001284:	0003      	movs	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 800128e:	f001 f90f 	bl	80024b0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	20000158 	.word	0x20000158
 80012a0:	20000084 	.word	0x20000084
 80012a4:	200019c8 	.word	0x200019c8

080012a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80012ae:	4927      	ldr	r1, [pc, #156]	@ (800134c <vTaskStartScheduler+0xa4>)
 80012b0:	4827      	ldr	r0, [pc, #156]	@ (8001350 <vTaskStartScheduler+0xa8>)
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <vTaskStartScheduler+0xac>)
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	f7ff fd1e 	bl	8000cfe <xTaskCreate>
 80012c2:	0003      	movs	r3, r0
 80012c4:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80012cc:	f000 fdf0 	bl	8001eb0 <xTimerCreateTimerTask>
 80012d0:	0003      	movs	r3, r0
 80012d2:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12c      	bne.n	8001334 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80012da:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <vTaskStartScheduler+0xb0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	4252      	negs	r2, r2
 80012e2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <vTaskStartScheduler+0xb4>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <vTaskStartScheduler+0xb8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <vTaskStartScheduler+0xbc>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f001 fac5 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80012fa:	0003      	movs	r3, r0
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fa17 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001302:	0003      	movs	r3, r0
 8001304:	001a      	movs	r2, r3
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <vTaskStartScheduler+0xc0>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	4013      	ands	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00a      	beq.n	8001328 <vTaskStartScheduler+0x80>
 8001312:	f001 fab7 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8001316:	0003      	movs	r3, r0
 8001318:	0018      	movs	r0, r3
 800131a:	f001 f9fb 	bl	8002714 <prvTraceGetTaskNumberLow16>
 800131e:	0003      	movs	r3, r0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	0018      	movs	r0, r3
 8001324:	f002 f866 	bl	80033f4 <prvTraceStoreTaskswitch>
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <vTaskStartScheduler+0xbc>)
 800132a:	2202      	movs	r2, #2
 800132c:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800132e:	f001 f89b 	bl	8002468 <xPortStartScheduler>
 8001332:	e005      	b.n	8001340 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3301      	adds	r3, #1
 8001338:	d102      	bne.n	8001340 <vTaskStartScheduler+0x98>
 800133a:	b672      	cpsid	i
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	e7fd      	b.n	800133c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <vTaskStartScheduler+0xc4>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	08004870 	.word	0x08004870
 8001350:	08001d05 	.word	0x08001d05
 8001354:	20000154 	.word	0x20000154
 8001358:	20000150 	.word	0x20000150
 800135c:	2000013c 	.word	0x2000013c
 8001360:	20000134 	.word	0x20000134
 8001364:	200019b0 	.word	0x200019b0
 8001368:	200019c8 	.word	0x200019c8
 800136c:	20000000 	.word	0x20000000

08001370 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <vTaskSuspendAll+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	4b02      	ldr	r3, [pc, #8]	@ (8001384 <vTaskSuspendAll+0x14>)
 800137c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000158 	.word	0x20000158

08001388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001396:	4b73      	ldr	r3, [pc, #460]	@ (8001564 <xTaskResumeAll+0x1dc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <xTaskResumeAll+0x1c>
 800139e:	b672      	cpsid	i
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	e7fd      	b.n	80013a0 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013a4:	f001 f894 	bl	80024d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001564 <xTaskResumeAll+0x1dc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001564 <xTaskResumeAll+0x1dc>)
 80013b0:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001564 <xTaskResumeAll+0x1dc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d000      	beq.n	80013bc <xTaskResumeAll+0x34>
 80013ba:	e0cc      	b.n	8001556 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <xTaskResumeAll+0x1e0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d100      	bne.n	80013c6 <xTaskResumeAll+0x3e>
 80013c4:	e0c7      	b.n	8001556 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013c6:	e09e      	b.n	8001506 <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013c8:	4b68      	ldr	r3, [pc, #416]	@ (800156c <xTaskResumeAll+0x1e4>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	6a12      	ldr	r2, [r2, #32]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	69d2      	ldr	r2, [r2, #28]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3318      	adds	r3, #24
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d103      	bne.n	80013fe <xTaskResumeAll+0x76>
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	@ 0x28
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1e5a      	subs	r2, r3, #1
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	68d2      	ldr	r2, [r2, #12]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	6892      	ldr	r2, [r2, #8]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3304      	adds	r3, #4
 8001430:	429a      	cmp	r2, r3
 8001432:	d103      	bne.n	800143c <xTaskResumeAll+0xb4>
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	0018      	movs	r0, r3
 8001450:	f001 f96e 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001454:	0003      	movs	r3, r0
 8001456:	001a      	movs	r2, r3
 8001458:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <xTaskResumeAll+0x1e8>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4013      	ands	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <xTaskResumeAll+0xee>
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	0018      	movs	r0, r3
 8001468:	f001 f954 	bl	8002714 <prvTraceGetTaskNumberLow16>
 800146c:	0003      	movs	r3, r0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fdb3 	bl	8002fdc <prvTraceStoreTaskReady>
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <xTaskResumeAll+0x1ec>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d903      	bls.n	800148a <xTaskResumeAll+0x102>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <xTaskResumeAll+0x1ec>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800148e:	493a      	ldr	r1, [pc, #232]	@ (8001578 <xTaskResumeAll+0x1f0>)
 8001490:	0013      	movs	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	189b      	adds	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	18cb      	adds	r3, r1, r3
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	3204      	adds	r2, #4
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c4:	0013      	movs	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	189b      	adds	r3, r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <xTaskResumeAll+0x1f0>)
 80014ce:	189a      	adds	r2, r3, r2
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d8:	4927      	ldr	r1, [pc, #156]	@ (8001578 <xTaskResumeAll+0x1f0>)
 80014da:	0013      	movs	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	189b      	adds	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	585b      	ldr	r3, [r3, r1]
 80014e4:	1c58      	adds	r0, r3, #1
 80014e6:	4924      	ldr	r1, [pc, #144]	@ (8001578 <xTaskResumeAll+0x1f0>)
 80014e8:	0013      	movs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <xTaskResumeAll+0x1f4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d302      	bcc.n	8001506 <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <xTaskResumeAll+0x1f8>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <xTaskResumeAll+0x1e4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <xTaskResumeAll+0x188>
 800150e:	e75b      	b.n	80013c8 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001516:	f000 fc43 	bl	8001da0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <xTaskResumeAll+0x1fc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00f      	beq.n	8001546 <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001526:	f000 f83d 	bl	80015a4 <xTaskIncrementTick>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d002      	beq.n	8001534 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <xTaskResumeAll+0x1f8>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3b01      	subs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <xTaskResumeAll+0x1fc>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <xTaskResumeAll+0x1f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800154e:	2301      	movs	r3, #1
 8001550:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001552:	f000 ffad 	bl	80024b0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001556:	f000 ffcd 	bl	80024f4 <vPortExitCritical>

    return xAlreadyYielded;
 800155a:	693b      	ldr	r3, [r7, #16]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b006      	add	sp, #24
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000158 	.word	0x20000158
 8001568:	20000130 	.word	0x20000130
 800156c:	2000011c 	.word	0x2000011c
 8001570:	200019c8 	.word	0x200019c8
 8001574:	20000138 	.word	0x20000138
 8001578:	20000088 	.word	0x20000088
 800157c:	20000084 	.word	0x20000084
 8001580:	20000144 	.word	0x20000144
 8001584:	20000140 	.word	0x20000140

08001588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <xTaskGetTickCount+0x18>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	20000134 	.word	0x20000134

080015a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80015ae:	4b85      	ldr	r3, [pc, #532]	@ (80017c4 <xTaskIncrementTick+0x220>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d003      	beq.n	80015be <xTaskIncrementTick+0x1a>
 80015b6:	4b84      	ldr	r3, [pc, #528]	@ (80017c8 <xTaskIncrementTick+0x224>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <xTaskIncrementTick+0x2a>
 80015be:	4b83      	ldr	r3, [pc, #524]	@ (80017cc <xTaskIncrementTick+0x228>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4b81      	ldr	r3, [pc, #516]	@ (80017cc <xTaskIncrementTick+0x228>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	2000      	movs	r0, #0
 80015ca:	f002 fbd1 	bl	8003d70 <prvTracePortGetTimeStamp>
 80015ce:	4b7d      	ldr	r3, [pc, #500]	@ (80017c4 <xTaskIncrementTick+0x220>)
 80015d0:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015d2:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <xTaskIncrementTick+0x220>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <xTaskIncrementTick+0x38>
 80015da:	e0e9      	b.n	80017b0 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015dc:	4b7c      	ldr	r3, [pc, #496]	@ (80017d0 <xTaskIncrementTick+0x22c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015e4:	4b7a      	ldr	r3, [pc, #488]	@ (80017d0 <xTaskIncrementTick+0x22c>)
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d118      	bne.n	8001622 <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 80015f0:	4b78      	ldr	r3, [pc, #480]	@ (80017d4 <xTaskIncrementTick+0x230>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <xTaskIncrementTick+0x5c>
 80015fa:	b672      	cpsid	i
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	e7fd      	b.n	80015fc <xTaskIncrementTick+0x58>
 8001600:	4b74      	ldr	r3, [pc, #464]	@ (80017d4 <xTaskIncrementTick+0x230>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b74      	ldr	r3, [pc, #464]	@ (80017d8 <xTaskIncrementTick+0x234>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b72      	ldr	r3, [pc, #456]	@ (80017d4 <xTaskIncrementTick+0x230>)
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <xTaskIncrementTick+0x234>)
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	4b71      	ldr	r3, [pc, #452]	@ (80017dc <xTaskIncrementTick+0x238>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4b70      	ldr	r3, [pc, #448]	@ (80017dc <xTaskIncrementTick+0x238>)
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f000 fbbf 	bl	8001da0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001622:	4b6f      	ldr	r3, [pc, #444]	@ (80017e0 <xTaskIncrementTick+0x23c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	429a      	cmp	r2, r3
 800162a:	d200      	bcs.n	800162e <xTaskIncrementTick+0x8a>
 800162c:	e0b9      	b.n	80017a2 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800162e:	4b69      	ldr	r3, [pc, #420]	@ (80017d4 <xTaskIncrementTick+0x230>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001638:	4b69      	ldr	r3, [pc, #420]	@ (80017e0 <xTaskIncrementTick+0x23c>)
 800163a:	2201      	movs	r2, #1
 800163c:	4252      	negs	r2, r2
 800163e:	601a      	str	r2, [r3, #0]
                    break;
 8001640:	e0af      	b.n	80017a2 <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001642:	4b64      	ldr	r3, [pc, #400]	@ (80017d4 <xTaskIncrementTick+0x230>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	429a      	cmp	r2, r3
 8001658:	d203      	bcs.n	8001662 <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <xTaskIncrementTick+0x23c>)
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001660:	e09f      	b.n	80017a2 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68d2      	ldr	r2, [r2, #12]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	6892      	ldr	r2, [r2, #8]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3304      	adds	r3, #4
 8001684:	429a      	cmp	r2, r3
 8001686:	d103      	bne.n	8001690 <xTaskIncrementTick+0xec>
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01e      	beq.n	80016e6 <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	6a12      	ldr	r2, [r2, #32]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	69d2      	ldr	r2, [r2, #28]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	3318      	adds	r3, #24
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d103      	bne.n	80016d6 <xTaskIncrementTick+0x132>
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f001 f821 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80016ee:	0003      	movs	r3, r0
 80016f0:	001a      	movs	r2, r3
 80016f2:	4b3c      	ldr	r3, [pc, #240]	@ (80017e4 <xTaskIncrementTick+0x240>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	4013      	ands	r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <xTaskIncrementTick+0x16c>
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	0018      	movs	r0, r3
 8001702:	f001 f807 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8001706:	0003      	movs	r3, r0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	0018      	movs	r0, r3
 800170c:	f001 fc66 	bl	8002fdc <prvTraceStoreTaskReady>
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001714:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <xTaskIncrementTick+0x244>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d903      	bls.n	8001724 <xTaskIncrementTick+0x180>
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <xTaskIncrementTick+0x244>)
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001728:	4930      	ldr	r1, [pc, #192]	@ (80017ec <xTaskIncrementTick+0x248>)
 800172a:	0013      	movs	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	189b      	adds	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	18cb      	adds	r3, r1, r3
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	3204      	adds	r2, #4
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1d1a      	adds	r2, r3, #4
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800175e:	0013      	movs	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	189b      	adds	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <xTaskIncrementTick+0x248>)
 8001768:	189a      	adds	r2, r3, r2
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001772:	491e      	ldr	r1, [pc, #120]	@ (80017ec <xTaskIncrementTick+0x248>)
 8001774:	0013      	movs	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	189b      	adds	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	585b      	ldr	r3, [r3, r1]
 800177e:	1c58      	adds	r0, r3, #1
 8001780:	491a      	ldr	r1, [pc, #104]	@ (80017ec <xTaskIncrementTick+0x248>)
 8001782:	0013      	movs	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	189b      	adds	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <xTaskIncrementTick+0x24c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001796:	429a      	cmp	r2, r3
 8001798:	d800      	bhi.n	800179c <xTaskIncrementTick+0x1f8>
 800179a:	e748      	b.n	800162e <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017a0:	e745      	b.n	800162e <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <xTaskIncrementTick+0x250>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e004      	b.n	80017ba <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <xTaskIncrementTick+0x224>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <xTaskIncrementTick+0x224>)
 80017b8:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80017ba:	69fb      	ldr	r3, [r7, #28]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b008      	add	sp, #32
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000158 	.word	0x20000158
 80017c8:	20000140 	.word	0x20000140
 80017cc:	200019a4 	.word	0x200019a4
 80017d0:	20000134 	.word	0x20000134
 80017d4:	20000114 	.word	0x20000114
 80017d8:	20000118 	.word	0x20000118
 80017dc:	20000148 	.word	0x20000148
 80017e0:	20000150 	.word	0x20000150
 80017e4:	200019c8 	.word	0x200019c8
 80017e8:	20000138 	.word	0x20000138
 80017ec:	20000088 	.word	0x20000088
 80017f0:	20000084 	.word	0x20000084
 80017f4:	20000144 	.word	0x20000144

080017f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017fe:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <vTaskSwitchContext+0xd0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <vTaskSwitchContext+0xd4>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800180c:	e057      	b.n	80018be <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <vTaskSwitchContext+0xd4>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001814:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <vTaskSwitchContext+0xd8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	e008      	b.n	800182e <vTaskSwitchContext+0x36>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <vTaskSwitchContext+0x30>
 8001822:	b672      	cpsid	i
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	e7fd      	b.n	8001824 <vTaskSwitchContext+0x2c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4929      	ldr	r1, [pc, #164]	@ (80018d4 <vTaskSwitchContext+0xdc>)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	0013      	movs	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	189b      	adds	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	585b      	ldr	r3, [r3, r1]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ed      	beq.n	800181c <vTaskSwitchContext+0x24>
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	0013      	movs	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	189b      	adds	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <vTaskSwitchContext+0xdc>)
 800184c:	189b      	adds	r3, r3, r2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3308      	adds	r3, #8
 8001862:	429a      	cmp	r2, r3
 8001864:	d104      	bne.n	8001870 <vTaskSwitchContext+0x78>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <vTaskSwitchContext+0xe0>)
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <vTaskSwitchContext+0xd8>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001880:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <vTaskSwitchContext+0xe4>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f000 fffd 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 800188a:	0003      	movs	r3, r0
 800188c:	0018      	movs	r0, r3
 800188e:	f000 ff4f 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001892:	0003      	movs	r3, r0
 8001894:	001a      	movs	r2, r3
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <vTaskSwitchContext+0xe8>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	4013      	ands	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <vTaskSwitchContext+0xc0>
 80018a2:	f000 ffef 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80018a6:	0003      	movs	r3, r0
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 ff33 	bl	8002714 <prvTraceGetTaskNumberLow16>
 80018ae:	0003      	movs	r3, r0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 fd9e 	bl	80033f4 <prvTraceStoreTaskswitch>
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <vTaskSwitchContext+0xe4>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	20000158 	.word	0x20000158
 80018cc:	20000144 	.word	0x20000144
 80018d0:	20000138 	.word	0x20000138
 80018d4:	20000088 	.word	0x20000088
 80018d8:	20000084 	.word	0x20000084
 80018dc:	200019b0 	.word	0x200019b0
 80018e0:	200019c8 	.word	0x200019c8

080018e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <vTaskPlaceOnEventList+0x16>
 80018f4:	b672      	cpsid	i
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	e7fd      	b.n	80018f6 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <vTaskPlaceOnEventList+0x3c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3318      	adds	r3, #24
 8001900:	001a      	movs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f7fe fcb3 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	0018      	movs	r0, r3
 8001912:	f000 fa89 	bl	8001e28 <prvAddCurrentTaskToDelayedList>
}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	20000084 	.word	0x20000084

08001924 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <vTaskPlaceOnEventListRestricted+0x18>
 8001936:	b672      	cpsid	i
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	e7fd      	b.n	8001938 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	61da      	str	r2, [r3, #28]
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	6892      	ldr	r2, [r2, #8]
 8001952:	621a      	str	r2, [r3, #32]
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	3218      	adds	r2, #24
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3318      	adds	r3, #24
 8001966:	001a      	movs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8001984:	2301      	movs	r3, #1
 8001986:	425b      	negs	r3, r3
 8001988:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fece 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001994:	0003      	movs	r3, r0
 8001996:	001a      	movs	r2, r3
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <vTaskPlaceOnEventListRestricted+0xf0>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	4013      	ands	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d011      	beq.n	80019c8 <vTaskPlaceOnEventListRestricted+0xa4>
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <vTaskPlaceOnEventListRestricted+0xf4>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	0019      	movs	r1, r3
 80019ae:	2088      	movs	r0, #136	@ 0x88
 80019b0:	f001 fcb6 	bl	8003320 <prvTraceStoreKernelCallWithNumericParamOnly>
 80019b4:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <vTaskPlaceOnEventListRestricted+0xec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 feab 	bl	8002714 <prvTraceGetTaskNumberLow16>
 80019be:	0003      	movs	r3, r0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	0018      	movs	r0, r3
 80019c4:	f001 fe14 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
 80019c8:	f000 ff5c 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80019cc:	0003      	movs	r3, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 feae 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 80019d4:	0003      	movs	r3, r0
 80019d6:	001a      	movs	r2, r3
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <vTaskPlaceOnEventListRestricted+0xf0>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4013      	ands	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00a      	beq.n	80019fa <vTaskPlaceOnEventListRestricted+0xd6>
 80019e4:	f000 ff4e 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 fe92 	bl	8002714 <prvTraceGetTaskNumberLow16>
 80019f0:	0003      	movs	r3, r0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	0018      	movs	r0, r3
 80019f6:	f001 fdfb 	bl	80035f0 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fa11 	bl	8001e28 <prvAddCurrentTaskToDelayedList>
    }
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b006      	add	sp, #24
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	20000084 	.word	0x20000084
 8001a14:	200019c8 	.word	0x200019c8
 8001a18:	20000134 	.word	0x20000134

08001a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <xTaskRemoveFromEventList+0x1c>
 8001a32:	b672      	cpsid	i
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	e7fd      	b.n	8001a34 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	6a12      	ldr	r2, [r2, #32]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69d2      	ldr	r2, [r2, #28]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	3318      	adds	r3, #24
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d103      	bne.n	8001a66 <xTaskRemoveFromEventList+0x4a>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a76:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <xTaskRemoveFromEventList+0x1a8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d172      	bne.n	8001b64 <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	68d2      	ldr	r2, [r2, #12]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	6892      	ldr	r2, [r2, #8]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d103      	bne.n	8001aac <xTaskRemoveFromEventList+0x90>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fe36 	bl	8002730 <prvTraceGetTaskNumberHigh16>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <xTaskRemoveFromEventList+0x1ac>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	4013      	ands	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <xTaskRemoveFromEventList+0xca>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fe1c 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8001adc:	0003      	movs	r3, r0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 fa7b 	bl	8002fdc <prvTraceStoreTaskReady>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aea:	4b38      	ldr	r3, [pc, #224]	@ (8001bcc <xTaskRemoveFromEventList+0x1b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d903      	bls.n	8001afa <xTaskRemoveFromEventList+0xde>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af6:	4b35      	ldr	r3, [pc, #212]	@ (8001bcc <xTaskRemoveFromEventList+0x1b0>)
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001afe:	4934      	ldr	r1, [pc, #208]	@ (8001bd0 <xTaskRemoveFromEventList+0x1b4>)
 8001b00:	0013      	movs	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	189b      	adds	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	18cb      	adds	r3, r1, r3
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	3204      	adds	r2, #4
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1d1a      	adds	r2, r3, #4
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b34:	0013      	movs	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	189b      	adds	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4a24      	ldr	r2, [pc, #144]	@ (8001bd0 <xTaskRemoveFromEventList+0x1b4>)
 8001b3e:	189a      	adds	r2, r3, r2
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b48:	4921      	ldr	r1, [pc, #132]	@ (8001bd0 <xTaskRemoveFromEventList+0x1b4>)
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	189b      	adds	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	585b      	ldr	r3, [r3, r1]
 8001b54:	1c58      	adds	r0, r3, #1
 8001b56:	491e      	ldr	r1, [pc, #120]	@ (8001bd0 <xTaskRemoveFromEventList+0x1b4>)
 8001b58:	0013      	movs	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	5058      	str	r0, [r3, r1]
 8001b62:	e01b      	b.n	8001b9c <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <xTaskRemoveFromEventList+0x1b8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	61da      	str	r2, [r3, #28]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	621a      	str	r2, [r3, #32]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	3218      	adds	r2, #24
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	3318      	adds	r3, #24
 8001b86:	001a      	movs	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <xTaskRemoveFromEventList+0x1b8>)
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <xTaskRemoveFromEventList+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <xTaskRemoveFromEventList+0x1b8>)
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <xTaskRemoveFromEventList+0x1bc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d905      	bls.n	8001bb6 <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <xTaskRemoveFromEventList+0x1c0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e001      	b.n	8001bba <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001bba:	69fb      	ldr	r3, [r7, #28]
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b008      	add	sp, #32
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000158 	.word	0x20000158
 8001bc8:	200019c8 	.word	0x200019c8
 8001bcc:	20000138 	.word	0x20000138
 8001bd0:	20000088 	.word	0x20000088
 8001bd4:	2000011c 	.word	0x2000011c
 8001bd8:	20000084 	.word	0x20000084
 8001bdc:	20000144 	.word	0x20000144

08001be0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <vTaskInternalSetTimeOutState+0x20>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <vTaskInternalSetTimeOutState+0x24>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000148 	.word	0x20000148
 8001c04:	20000134 	.word	0x20000134

08001c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <xTaskCheckForTimeOut+0x16>
 8001c18:	b672      	cpsid	i
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	e7fd      	b.n	8001c1a <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <xTaskCheckForTimeOut+0x22>
 8001c24:	b672      	cpsid	i
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	e7fd      	b.n	8001c26 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8001c2a:	f000 fc51 	bl	80024d0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <xTaskCheckForTimeOut+0x94>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <xTaskCheckForTimeOut+0x98>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d00a      	beq.n	8001c60 <xTaskCheckForTimeOut+0x58>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d305      	bcc.n	8001c60 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e016      	b.n	8001c8e <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ffb1 	bl	8001be0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e004      	b.n	8001c8e <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001c8e:	f000 fc31 	bl	80024f4 <vPortExitCritical>

    return xReturn;
 8001c92:	697b      	ldr	r3, [r7, #20]
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b006      	add	sp, #24
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000134 	.word	0x20000134
 8001ca0:	20000148 	.word	0x20000148

08001ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	@ (8001cb4 <vTaskMissedYield+0x10>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000144 	.word	0x20000144

08001cb8 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e001      	b.n	8001cd6 <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d0c:	f000 f842 	bl	8001d94 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <prvIdleTask+0x1c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d9f9      	bls.n	8001d0c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001d18:	f000 fbca 	bl	80024b0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8001d1c:	e7f6      	b.n	8001d0c <prvIdleTask+0x8>
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	20000088 	.word	0x20000088

08001d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	e00c      	b.n	8001d4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	0013      	movs	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <prvInitialiseTaskLists+0x58>)
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe fa6e 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d9ef      	bls.n	8001d30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <prvInitialiseTaskLists+0x5c>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe fa64 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <prvInitialiseTaskLists+0x60>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7fe fa60 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <prvInitialiseTaskLists+0x64>)
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7fe fa5c 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <prvInitialiseTaskLists+0x68>)
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <prvInitialiseTaskLists+0x5c>)
 8001d6c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <prvInitialiseTaskLists+0x6c>)
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <prvInitialiseTaskLists+0x60>)
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000088 	.word	0x20000088
 8001d80:	200000ec 	.word	0x200000ec
 8001d84:	20000100 	.word	0x20000100
 8001d88:	2000011c 	.word	0x2000011c
 8001d8c:	20000114 	.word	0x20000114
 8001d90:	20000118 	.word	0x20000118

08001d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <prvResetNextTaskUnblockTime+0x2c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <prvResetNextTaskUnblockTime+0x30>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	4252      	negs	r2, r2
 8001db4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001db6:	e005      	b.n	8001dc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <prvResetNextTaskUnblockTime+0x2c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <prvResetNextTaskUnblockTime+0x30>)
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	20000114 	.word	0x20000114
 8001dd0:	20000150 	.word	0x20000150

08001dd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <xTaskGetCurrentTaskHandle+0x18>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	607b      	str	r3, [r7, #4]

        return xReturn;
 8001de0:	687b      	ldr	r3, [r7, #4]
    }
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	20000084 	.word	0x20000084

08001df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <xTaskGetSchedulerState+0x30>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e008      	b.n	8001e16 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <xTaskGetSchedulerState+0x34>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	e001      	b.n	8001e16 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001e16:	687b      	ldr	r3, [r7, #4]
    }
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000013c 	.word	0x2000013c
 8001e24:	20000158 	.word	0x20000158

08001e28 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <prvAddCurrentTaskToDelayedList+0x74>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7fe fa4d 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d209      	bcs.n	8001e70 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3304      	adds	r3, #4
 8001e66:	0019      	movs	r1, r3
 8001e68:	0010      	movs	r0, r2
 8001e6a:	f7fe fa02 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e6e:	e010      	b.n	8001e92 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <prvAddCurrentTaskToDelayedList+0x80>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	f7fe f9f8 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <prvAddCurrentTaskToDelayedList+0x84>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d202      	bcs.n	8001e92 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <prvAddCurrentTaskToDelayedList+0x84>)
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	20000134 	.word	0x20000134
 8001ea0:	20000084 	.word	0x20000084
 8001ea4:	20000118 	.word	0x20000118
 8001ea8:	20000114 	.word	0x20000114
 8001eac:	20000150 	.word	0x20000150

08001eb0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001eba:	f000 fa31 	bl	8002320 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <xTimerCreateTimerTask+0x44>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001ec6:	490c      	ldr	r1, [pc, #48]	@ (8001ef8 <xTimerCreateTimerTask+0x48>)
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <xTimerCreateTimerTask+0x4c>)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <xTimerCreateTimerTask+0x50>)
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2303      	movs	r3, #3
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	f7fe ff12 	bl	8000cfe <xTaskCreate>
 8001eda:	0003      	movs	r3, r0
 8001edc:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <xTimerCreateTimerTask+0x3a>
 8001ee4:	b672      	cpsid	i
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	e7fd      	b.n	8001ee6 <xTimerCreateTimerTask+0x36>
        return xReturn;
 8001eea:	687b      	ldr	r3, [r7, #4]
    }
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000018c 	.word	0x2000018c
 8001ef8:	08004878 	.word	0x08004878
 8001efc:	08001fad 	.word	0x08001fad
 8001f00:	20000190 	.word	0x20000190

08001f04 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001f10:	e009      	b.n	8001f26 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	18d3      	adds	r3, r2, r3
 8001f1a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	0010      	movs	r0, r2
 8001f24:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	18d1      	adds	r1, r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f8da 	bl	80020ec <prvInsertTimerInActiveList>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d1ea      	bne.n	8001f12 <prvReloadTimer+0xe>
        }
    }
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <prvProcessExpiredTimer+0x60>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe f9bc 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2228      	movs	r2, #40	@ 0x28
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	2304      	movs	r3, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d006      	beq.n	8001f82 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ffc2 	bl	8001f04 <prvReloadTimer>
 8001f80:	e008      	b.n	8001f94 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2228      	movs	r2, #40	@ 0x28
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	b2d9      	uxtb	r1, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2228      	movs	r2, #40	@ 0x28
 8001f92:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	4798      	blx	r3
    }
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	20000184 	.word	0x20000184

08001fac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 f855 	bl	8002068 <prvGetNextExpireTime>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f805 	bl	8001fd8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001fce:	f000 f8cf 	bl	8002170 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	e7ee      	b.n	8001fb4 <prvTimerTask+0x8>
	...

08001fd8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001fe2:	f7ff f9c5 	bl	8001370 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 f85e 	bl	80020ac <prvSampleTimeNow>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d12b      	bne.n	8002052 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <prvProcessTimerOrBlockTask+0x42>
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d808      	bhi.n	800201a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002008:	f7ff f9be 	bl	8001388 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0011      	movs	r1, r2
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff ff98 	bl	8001f48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002018:	e01d      	b.n	8002056 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <prvProcessTimerOrBlockTask+0x88>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <prvProcessTimerOrBlockTask+0x56>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <prvProcessTimerOrBlockTask+0x58>
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <prvProcessTimerOrBlockTask+0x8c>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	0019      	movs	r1, r3
 8002040:	f7fe fe2a 	bl	8000c98 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002044:	f7ff f9a0 	bl	8001388 <xTaskResumeAll>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d104      	bne.n	8002056 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 800204c:	f000 fa30 	bl	80024b0 <vPortYield>
    }
 8002050:	e001      	b.n	8002056 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002052:	f7ff f999 	bl	8001388 <xTaskResumeAll>
    }
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	20000188 	.word	0x20000188
 8002064:	2000018c 	.word	0x2000018c

08002068 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <prvGetNextExpireTime+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <prvGetNextExpireTime+0x16>
 800207a:	2201      	movs	r2, #1
 800207c:	e000      	b.n	8002080 <prvGetNextExpireTime+0x18>
 800207e:	2200      	movs	r2, #0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <prvGetNextExpireTime+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e001      	b.n	800209c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800209c:	68fb      	ldr	r3, [r7, #12]
    }
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	20000184 	.word	0x20000184

080020ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80020b4:	f7ff fa68 	bl	8001588 <xTaskGetTickCount>
 80020b8:	0003      	movs	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <prvSampleTimeNow+0x3c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d205      	bcs.n	80020d2 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80020c6:	f000 f903 	bl	80022d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e002      	b.n	80020d8 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <prvSampleTimeNow+0x3c>)
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80020de:	68fb      	ldr	r3, [r7, #12]
    }
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000194 	.word	0x20000194

080020ec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d812      	bhi.n	8002138 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e01b      	b.n	800215e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <prvInsertTimerInActiveList+0x7c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	0019      	movs	r1, r3
 8002130:	0010      	movs	r0, r2
 8002132:	f7fe f89e 	bl	8000272 <vListInsert>
 8002136:	e012      	b.n	800215e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d206      	bcs.n	800214e <prvInsertTimerInActiveList+0x62>
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d302      	bcc.n	800214e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002148:	2301      	movs	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e007      	b.n	800215e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <prvInsertTimerInActiveList+0x80>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3304      	adds	r3, #4
 8002156:	0019      	movs	r1, r3
 8002158:	0010      	movs	r0, r2
 800215a:	f7fe f88a 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800215e:	697b      	ldr	r3, [r7, #20]
    }
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b006      	add	sp, #24
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000188 	.word	0x20000188
 800216c:	20000184 	.word	0x20000184

08002170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002176:	e098      	b.n	80022aa <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	da00      	bge.n	8002182 <prvProcessReceivedCommands+0x12>
 8002180:	e093      	b.n	80022aa <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3304      	adds	r3, #4
 8002194:	0018      	movs	r0, r3
 8002196:	f7fe f8a2 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800219a:	003b      	movs	r3, r7
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff ff85 	bl	80020ac <prvSampleTimeNow>
 80021a2:	0003      	movs	r3, r0
 80021a4:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d900      	bls.n	80021b0 <prvProcessReceivedCommands+0x40>
 80021ae:	e079      	b.n	80022a4 <prvProcessReceivedCommands+0x134>
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <prvProcessReceivedCommands+0x158>)
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2228      	movs	r2, #40	@ 0x28
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b2d9      	uxtb	r1, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2228      	movs	r2, #40	@ 0x28
 80021ca:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	18d1      	adds	r1, r2, r3
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff ff85 	bl	80020ec <prvInsertTimerInActiveList>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d060      	beq.n	80022a8 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2228      	movs	r2, #40	@ 0x28
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	001a      	movs	r2, r3
 80021ee:	2304      	movs	r3, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d00a      	beq.n	800220a <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	18d1      	adds	r1, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff fe7e 	bl	8001f04 <prvReloadTimer>
 8002208:	e008      	b.n	800221c <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2228      	movs	r2, #40	@ 0x28
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	2201      	movs	r2, #1
 8002212:	4393      	bics	r3, r2
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2228      	movs	r2, #40	@ 0x28
 800221a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	0010      	movs	r0, r2
 8002224:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002226:	e03f      	b.n	80022a8 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2228      	movs	r2, #40	@ 0x28
 800222c:	5c9b      	ldrb	r3, [r3, r2]
 800222e:	2201      	movs	r2, #1
 8002230:	4393      	bics	r3, r2
 8002232:	b2d9      	uxtb	r1, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2228      	movs	r2, #40	@ 0x28
 8002238:	5499      	strb	r1, [r3, r2]
                        break;
 800223a:	e036      	b.n	80022aa <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2228      	movs	r2, #40	@ 0x28
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	2201      	movs	r2, #1
 8002244:	4313      	orrs	r3, r2
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2228      	movs	r2, #40	@ 0x28
 800224c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <prvProcessReceivedCommands+0xf4>
 800225e:	b672      	cpsid	i
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	e7fd      	b.n	8002260 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	18d1      	adds	r1, r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	f7ff ff3b 	bl	80020ec <prvInsertTimerInActiveList>
                        break;
 8002276:	e018      	b.n	80022aa <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2228      	movs	r2, #40	@ 0x28
 800227c:	5c9b      	ldrb	r3, [r3, r2]
 800227e:	001a      	movs	r2, r3
 8002280:	2302      	movs	r3, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d104      	bne.n	8002290 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fa1b 	bl	80026c4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800228e:	e00c      	b.n	80022aa <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2228      	movs	r2, #40	@ 0x28
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	2201      	movs	r2, #1
 8002298:	4393      	bics	r3, r2
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2228      	movs	r2, #40	@ 0x28
 80022a0:	5499      	strb	r1, [r3, r2]
                        break;
 80022a2:	e002      	b.n	80022aa <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	e000      	b.n	80022aa <prvProcessReceivedCommands+0x13a>
                        break;
 80022a8:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <prvProcessReceivedCommands+0x15c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1d39      	adds	r1, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7fe f9ec 	bl	8000690 <xQueueReceive>
 80022b8:	1e03      	subs	r3, r0, #0
 80022ba:	d000      	beq.n	80022be <prvProcessReceivedCommands+0x14e>
 80022bc:	e75c      	b.n	8002178 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b006      	add	sp, #24
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08004ec4 	.word	0x08004ec4
 80022cc:	2000018c 	.word	0x2000018c

080022d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022d6:	e00b      	b.n	80022f0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <prvSwitchTimerLists+0x48>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80022e2:	2301      	movs	r3, #1
 80022e4:	425a      	negs	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff fe2c 	bl	8001f48 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <prvSwitchTimerLists+0x48>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <prvSwitchTimerLists+0x48>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <prvSwitchTimerLists+0x4c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <prvSwitchTimerLists+0x48>)
 8002306:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <prvSwitchTimerLists+0x4c>)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
    }
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	20000184 	.word	0x20000184
 800231c:	20000188 	.word	0x20000188

08002320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002324:	f000 f8d4 	bl	80024d0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <prvCheckForValidListAndQueue+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d120      	bne.n	8002372 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <prvCheckForValidListAndQueue+0x60>)
 8002332:	0018      	movs	r0, r3
 8002334:	f7fd ff74 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <prvCheckForValidListAndQueue+0x64>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd ff70 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <prvCheckForValidListAndQueue+0x68>)
 8002342:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <prvCheckForValidListAndQueue+0x60>)
 8002344:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <prvCheckForValidListAndQueue+0x6c>)
 8002348:	4a0e      	ldr	r2, [pc, #56]	@ (8002384 <prvCheckForValidListAndQueue+0x64>)
 800234a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800234c:	2200      	movs	r2, #0
 800234e:	210c      	movs	r1, #12
 8002350:	200a      	movs	r0, #10
 8002352:	f7fe f877 	bl	8000444 <xQueueGenericCreate>
 8002356:	0002      	movs	r2, r0
 8002358:	4b08      	ldr	r3, [pc, #32]	@ (800237c <prvCheckForValidListAndQueue+0x5c>)
 800235a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <prvCheckForValidListAndQueue+0x5c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <prvCheckForValidListAndQueue+0x5c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a09      	ldr	r2, [pc, #36]	@ (8002390 <prvCheckForValidListAndQueue+0x70>)
 800236a:	0011      	movs	r1, r2
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fc39 	bl	8000be4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002372:	f000 f8bf 	bl	80024f4 <vPortExitCritical>
    }
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000018c 	.word	0x2000018c
 8002380:	2000015c 	.word	0x2000015c
 8002384:	20000170 	.word	0x20000170
 8002388:	20000184 	.word	0x20000184
 800238c:	20000188 	.word	0x20000188
 8002390:	08004880 	.word	0x08004880

08002394 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3b04      	subs	r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2280      	movs	r2, #128	@ 0x80
 80023aa:	0452      	lsls	r2, r2, #17
 80023ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3b04      	subs	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b04      	subs	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80023c0:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <pxPortInitialiseStack+0x50>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3b14      	subs	r3, #20
 80023ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b20      	subs	r3, #32
 80023d6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	080023e9 	.word	0x080023e9

080023e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <prvTaskExitError+0x2c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	d002      	beq.n	8002400 <prvTaskExitError+0x18>
 80023fa:	b672      	cpsid	i
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	e7fd      	b.n	80023fc <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002400:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0fc      	beq.n	8002404 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000004 	.word	0x20000004

08002418 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002430 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <pxCurrentTCBConst2>)
 8002432:	6813      	ldr	r3, [r2, #0]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	3020      	adds	r0, #32
 8002438:	f380 8809 	msr	PSP, r0
 800243c:	2002      	movs	r0, #2
 800243e:	f380 8814 	msr	CONTROL, r0
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002448:	46ae      	mov	lr, r5
 800244a:	bc08      	pop	{r3}
 800244c:	bc04      	pop	{r2}
 800244e:	b662      	cpsie	i
 8002450:	4718      	bx	r3
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46c0      	nop			@ (mov r8, r8)

08002460 <pxCurrentTCBConst2>:
 8002460:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46c0      	nop			@ (mov r8, r8)

08002468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <xPortStartScheduler+0x40>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <xPortStartScheduler+0x40>)
 8002472:	21ff      	movs	r1, #255	@ 0xff
 8002474:	0409      	lsls	r1, r1, #16
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <xPortStartScheduler+0x40>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <xPortStartScheduler+0x40>)
 8002480:	21ff      	movs	r1, #255	@ 0xff
 8002482:	0609      	lsls	r1, r1, #24
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002488:	f000 f898 	bl	80025bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800248c:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <xPortStartScheduler+0x44>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002492:	f7ff ffcd 	bl	8002430 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002496:	f7ff f9af 	bl	80017f8 <vTaskSwitchContext>
    prvTaskExitError();
 800249a:	f7ff ffa5 	bl	80023e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	e000ed20 	.word	0xe000ed20
 80024ac:	20000004 	.word	0x20000004

080024b0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <vPortYield+0x1c>)
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	0552      	lsls	r2, r2, #21
 80024ba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80024bc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80024c0:	f3bf 8f6f 	isb	sy
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80024d4:	b672      	cpsid	i
    uxCriticalNesting++;
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <vPortEnterCritical+0x20>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <vPortEnterCritical+0x20>)
 80024de:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 80024e0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80024e4:	f3bf 8f6f 	isb	sy
}
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	20000004 	.word	0x20000004

080024f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <vPortExitCritical+0x2c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <vPortExitCritical+0x12>
 8002500:	b672      	cpsid	i
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	e7fd      	b.n	8002502 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <vPortExitCritical+0x2c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <vPortExitCritical+0x2c>)
 800250e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <vPortExitCritical+0x2c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002518:	b662      	cpsie	i
    }
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000004 	.word	0x20000004

08002524 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002524:	f3ef 8010 	mrs	r0, PRIMASK
 8002528:	b672      	cpsid	i
 800252a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	0018      	movs	r0, r3

08002530 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002530:	f380 8810 	msr	PRIMASK, r0
 8002534:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002536:	46c0      	nop			@ (mov r8, r8)
	...

08002540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002540:	f3ef 8009 	mrs	r0, PSP
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <pxCurrentTCBConst>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	3820      	subs	r0, #32
 800254a:	6010      	str	r0, [r2, #0]
 800254c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800254e:	4644      	mov	r4, r8
 8002550:	464d      	mov	r5, r9
 8002552:	4656      	mov	r6, sl
 8002554:	465f      	mov	r7, fp
 8002556:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002558:	b508      	push	{r3, lr}
 800255a:	b672      	cpsid	i
 800255c:	f7ff f94c 	bl	80017f8 <vTaskSwitchContext>
 8002560:	b662      	cpsie	i
 8002562:	bc0c      	pop	{r2, r3}
 8002564:	6811      	ldr	r1, [r2, #0]
 8002566:	6808      	ldr	r0, [r1, #0]
 8002568:	3010      	adds	r0, #16
 800256a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800256c:	46a0      	mov	r8, r4
 800256e:	46a9      	mov	r9, r5
 8002570:	46b2      	mov	sl, r6
 8002572:	46bb      	mov	fp, r7
 8002574:	f380 8809 	msr	PSP, r0
 8002578:	3820      	subs	r0, #32
 800257a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800257c:	4718      	bx	r3
 800257e:	46c0      	nop			@ (mov r8, r8)

08002580 <pxCurrentTCBConst>:
 8002580:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46c0      	nop			@ (mov r8, r8)

08002588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800258e:	f7ff ffc9 	bl	8002524 <ulSetInterruptMaskFromISR>
 8002592:	0003      	movs	r3, r0
 8002594:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002596:	f7ff f805 	bl	80015a4 <xTaskIncrementTick>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d003      	beq.n	80025a6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <SysTick_Handler+0x30>)
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	0552      	lsls	r2, r2, #21
 80025a4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff ffc1 	bl	8002530 <vClearInterruptMaskFromISR>
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <vPortSetupTimerInterrupt+0x34>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <vPortSetupTimerInterrupt+0x38>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <vPortSetupTimerInterrupt+0x3c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	22fa      	movs	r2, #250	@ 0xfa
 80025d2:	0091      	lsls	r1, r2, #2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fd fd97 	bl	8000108 <__udivsi3>
 80025da:	0003      	movs	r3, r0
 80025dc:	001a      	movs	r2, r3
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <vPortSetupTimerInterrupt+0x40>)
 80025e0:	3a01      	subs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <vPortSetupTimerInterrupt+0x34>)
 80025e6:	2207      	movs	r2, #7
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	e000e010 	.word	0xe000e010
 80025f4:	e000e018 	.word	0xe000e018
 80025f8:	20000014 	.word	0x20000014
 80025fc:	e000e014 	.word	0xe000e014

08002600 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2207      	movs	r2, #7
 8002610:	4013      	ands	r3, r2
 8002612:	d00e      	beq.n	8002632 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2207      	movs	r2, #7
 8002618:	4393      	bics	r3, r2
 800261a:	3308      	adds	r3, #8
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d205      	bcs.n	800262e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2207      	movs	r2, #7
 8002626:	4393      	bics	r3, r2
 8002628:	3308      	adds	r3, #8
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	e001      	b.n	8002632 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002632:	f7fe fe9d 	bl	8001370 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002636:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <pvPortMalloc+0xb4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800263e:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <pvPortMalloc+0xb8>)
 8002640:	2207      	movs	r2, #7
 8002642:	4393      	bics	r3, r2
 8002644:	001a      	movs	r2, r3
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <pvPortMalloc+0xb4>)
 8002648:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01a      	beq.n	8002686 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <pvPortMalloc+0xbc>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002658:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <pvPortMalloc+0xc0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d813      	bhi.n	8002686 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <pvPortMalloc+0xbc>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	18d2      	adds	r2, r2, r3
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <pvPortMalloc+0xbc>)
 8002668:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800266a:	429a      	cmp	r2, r3
 800266c:	d90b      	bls.n	8002686 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <pvPortMalloc+0xb4>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <pvPortMalloc+0xbc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <pvPortMalloc+0xbc>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <pvPortMalloc+0xbc>)
 8002684:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <pvPortMalloc+0x9a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	0019      	movs	r1, r3
 8002692:	2094      	movs	r0, #148	@ 0x94
 8002694:	f000 fd0a 	bl	80030ac <vTraceStoreMemMangEvent>
 8002698:	e005      	b.n	80026a6 <pvPortMalloc+0xa6>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	0019      	movs	r1, r3
 80026a0:	20e8      	movs	r0, #232	@ 0xe8
 80026a2:	f000 fd03 	bl	80030ac <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 80026a6:	f7fe fe6f 	bl	8001388 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000199c 	.word	0x2000199c
 80026b8:	2000019f 	.word	0x2000019f
 80026bc:	20001998 	.word	0x20001998
 80026c0:	000017f7 	.word	0x000017f7

080026c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <vPortFree+0x14>
 80026d2:	b672      	cpsid	i
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	e7fd      	b.n	80026d4 <vPortFree+0x10>
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe f9be 	bl	8000a6c <uxQueueGetQueueNumber>
 80026f0:	0003      	movs	r3, r0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b002      	add	sp, #8
 80026f8:	bd80      	pop	{r7, pc}

080026fa <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f7fe f9c7 	bl	8000a98 <ucQueueGetQueueType>
 800270a:	0003      	movs	r3, r0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff faca 	bl	8001cb8 <uxTaskGetTaskNumber>
 8002724:	0003      	movs	r3, r0
 8002726:	b29b      	uxth	r3, r3
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff fabc 	bl	8001cb8 <uxTaskGetTaskNumber>
 8002740:	0003      	movs	r3, r0
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	b29b      	uxth	r3, r3
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}

0800274e <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	000a      	movs	r2, r1
 8002758:	1cbb      	adds	r3, r7, #2
 800275a:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff faaa 	bl	8001cb8 <uxTaskGetTaskNumber>
 8002764:	0003      	movs	r3, r0
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	1cbb      	adds	r3, r7, #2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0011      	movs	r1, r2
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fab3 	bl	8001ce0 <vTaskSetTaskNumber>
}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}

08002782 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	000a      	movs	r2, r1
 800278c:	1cbb      	adds	r3, r7, #2
 800278e:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff fa90 	bl	8001cb8 <uxTaskGetTaskNumber>
 8002798:	0003      	movs	r3, r0
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	0c1a      	lsrs	r2, r3, #16
 800279e:	1cbb      	adds	r3, r7, #2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff fa98 	bl	8001ce0 <vTaskSetTaskNumber>
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff ff8c 	bl	80026e0 <prvTraceGetQueueNumber>
 80027c8:	0003      	movs	r3, r0
 80027ca:	b29b      	uxth	r3, r3
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f7ff ff7e 	bl	80026e0 <prvTraceGetQueueNumber>
 80027e4:	0003      	movs	r3, r0
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	b29b      	uxth	r3, r3
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b002      	add	sp, #8
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	000a      	movs	r2, r1
 80027fc:	1cbb      	adds	r3, r7, #2
 80027fe:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f7ff ff6c 	bl	80026e0 <prvTraceGetQueueNumber>
 8002808:	0003      	movs	r3, r0
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0011      	movs	r1, r2
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe f931 	bl	8000a80 <vQueueSetQueueNumber>
}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}

08002826 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	000a      	movs	r2, r1
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ff52 	bl	80026e0 <prvTraceGetQueueNumber>
 800283c:	0003      	movs	r3, r0
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	0c1a      	lsrs	r2, r3, #16
 8002842:	1cbb      	adds	r3, r7, #2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0011      	movs	r1, r2
 800284e:	0018      	movs	r0, r3
 8002850:	f7fe f916 	bl	8000a80 <vQueueSetQueueNumber>
}
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}

0800285c <vTraceSetSemaphoreName>:
{
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ffa5 	bl	80027b8 <prvTraceGetQueueNumberLow16>
 800286e:	0003      	movs	r3, r0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	0019      	movs	r1, r3
 8002876:	2001      	movs	r0, #1
 8002878:	f001 f846 	bl	8003908 <prvTraceSetObjectName>
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8002888:	f7ff faa4 	bl	8001dd4 <xTaskGetCurrentTaskHandle>
 800288c:	0003      	movs	r3, r0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80028b8:	4b62      	ldr	r3, [pc, #392]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2209      	movs	r2, #9
 80028be:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80028c0:	4b60      	ldr	r3, [pc, #384]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2250      	movs	r2, #80	@ 0x50
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80028ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2251      	movs	r2, #81	@ 0x51
 80028d0:	2106      	movs	r1, #6
 80028d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80028d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2252      	movs	r2, #82	@ 0x52
 80028da:	2102      	movs	r1, #2
 80028dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80028de:	4b59      	ldr	r3, [pc, #356]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2253      	movs	r2, #83	@ 0x53
 80028e4:	2106      	movs	r1, #6
 80028e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80028e8:	4b56      	ldr	r3, [pc, #344]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2254      	movs	r2, #84	@ 0x54
 80028ee:	2104      	movs	r1, #4
 80028f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80028f2:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2255      	movs	r2, #85	@ 0x55
 80028f8:	2101      	movs	r1, #1
 80028fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80028fc:	4b51      	ldr	r3, [pc, #324]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2256      	movs	r2, #86	@ 0x56
 8002902:	2102      	movs	r1, #2
 8002904:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8002906:	4b4f      	ldr	r3, [pc, #316]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2257      	movs	r2, #87	@ 0x57
 800290c:	2102      	movs	r1, #2
 800290e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8002910:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2258      	movs	r2, #88	@ 0x58
 8002916:	2102      	movs	r1, #2
 8002918:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800291a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	225c      	movs	r2, #92	@ 0x5c
 8002920:	210f      	movs	r1, #15
 8002922:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8002924:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	225d      	movs	r2, #93	@ 0x5d
 800292a:	210f      	movs	r1, #15
 800292c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800292e:	4b45      	ldr	r3, [pc, #276]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	225e      	movs	r2, #94	@ 0x5e
 8002934:	210f      	movs	r1, #15
 8002936:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8002938:	4b42      	ldr	r3, [pc, #264]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	225f      	movs	r2, #95	@ 0x5f
 800293e:	210f      	movs	r1, #15
 8002940:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8002942:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2260      	movs	r2, #96	@ 0x60
 8002948:	210f      	movs	r1, #15
 800294a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800294c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2261      	movs	r2, #97	@ 0x61
 8002952:	210f      	movs	r1, #15
 8002954:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8002956:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2262      	movs	r2, #98	@ 0x62
 800295c:	210f      	movs	r1, #15
 800295e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8002960:	4b38      	ldr	r3, [pc, #224]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2263      	movs	r2, #99	@ 0x63
 8002966:	210f      	movs	r1, #15
 8002968:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2264      	movs	r2, #100	@ 0x64
 8002970:	210f      	movs	r1, #15
 8002972:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8002974:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2268      	movs	r2, #104	@ 0x68
 800297a:	2110      	movs	r1, #16
 800297c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800297e:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2269      	movs	r2, #105	@ 0x69
 8002984:	2110      	movs	r1, #16
 8002986:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8002988:	4b2e      	ldr	r3, [pc, #184]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	226a      	movs	r2, #106	@ 0x6a
 800298e:	2110      	movs	r1, #16
 8002990:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8002992:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	226b      	movs	r2, #107	@ 0x6b
 8002998:	2113      	movs	r1, #19
 800299a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800299c:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	226c      	movs	r2, #108	@ 0x6c
 80029a2:	2111      	movs	r1, #17
 80029a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80029a6:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	226d      	movs	r2, #109	@ 0x6d
 80029ac:	2110      	movs	r1, #16
 80029ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80029b0:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	226e      	movs	r2, #110	@ 0x6e
 80029b6:	2113      	movs	r1, #19
 80029b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80029ba:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	226f      	movs	r2, #111	@ 0x6f
 80029c0:	2113      	movs	r1, #19
 80029c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2270      	movs	r2, #112	@ 0x70
 80029ca:	2113      	movs	r1, #19
 80029cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2274      	movs	r2, #116	@ 0x74
 80029d4:	2100      	movs	r1, #0
 80029d6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2276      	movs	r2, #118	@ 0x76
 80029de:	2120      	movs	r1, #32
 80029e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2278      	movs	r2, #120	@ 0x78
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80029ec:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	227a      	movs	r2, #122	@ 0x7a
 80029f2:	21a0      	movs	r1, #160	@ 0xa0
 80029f4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	227c      	movs	r2, #124	@ 0x7c
 80029fc:	2189      	movs	r1, #137	@ 0x89
 80029fe:	0049      	lsls	r1, r1, #1
 8002a00:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	227e      	movs	r2, #126	@ 0x7e
 8002a08:	21ab      	movs	r1, #171	@ 0xab
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2280      	movs	r2, #128	@ 0x80
 8002a14:	21b3      	movs	r1, #179	@ 0xb3
 8002a16:	0049      	lsls	r1, r1, #1
 8002a18:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2282      	movs	r2, #130	@ 0x82
 8002a20:	21c6      	movs	r1, #198	@ 0xc6
 8002a22:	0049      	lsls	r1, r1, #1
 8002a24:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2284      	movs	r2, #132	@ 0x84
 8002a2c:	21d9      	movs	r1, #217	@ 0xd9
 8002a2e:	0049      	lsls	r1, r1, #1
 8002a30:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ec      	movs	r2, #236	@ 0xec
 8002a38:	0052      	lsls	r2, r2, #1
 8002a3a:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20002df8 	.word	0x20002df8

08002a48 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8002a52:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	825a      	strh	r2, [r3, #18]
 8002a58:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a5a:	8a5a      	ldrh	r2, [r3, #18]
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a5e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8002a60:	4b3c      	ldr	r3, [pc, #240]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a62:	2202      	movs	r2, #2
 8002a64:	829a      	strh	r2, [r3, #20]
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a68:	8a9a      	ldrh	r2, [r3, #20]
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a6c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a70:	2208      	movs	r2, #8
 8002a72:	82da      	strh	r2, [r3, #22]
 8002a74:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a76:	8ada      	ldrh	r2, [r3, #22]
 8002a78:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a7a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8002a7c:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a7e:	220a      	movs	r2, #10
 8002a80:	831a      	strh	r2, [r3, #24]
 8002a82:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a84:	8b1a      	ldrh	r2, [r3, #24]
 8002a86:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a88:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8002a8a:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	835a      	strh	r2, [r3, #26]
 8002a90:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a92:	8b5a      	ldrh	r2, [r3, #26]
 8002a94:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a96:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8002a98:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002a9a:	2214      	movs	r2, #20
 8002a9c:	839a      	strh	r2, [r3, #28]
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aa0:	8b9a      	ldrh	r2, [r3, #28]
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aa4:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aa8:	2215      	movs	r2, #21
 8002aaa:	83da      	strh	r2, [r3, #30]
 8002aac:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aae:	8bda      	ldrh	r2, [r3, #30]
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ab2:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ab6:	2217      	movs	r2, #23
 8002ab8:	841a      	strh	r2, [r3, #32]
 8002aba:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002abc:	8c1a      	ldrh	r2, [r3, #32]
 8002abe:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ac0:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ac4:	2219      	movs	r2, #25
 8002ac6:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002ac8:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aca:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002acc:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ace:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ade:	2209      	movs	r2, #9
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002aea:	2213      	movs	r2, #19
 8002aec:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8002aee:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002af0:	2214      	movs	r2, #20
 8002af2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002af6:	2216      	movs	r2, #22
 8002af8:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8002afa:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002afc:	2218      	movs	r2, #24
 8002afe:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002b02:	221a      	movs	r2, #26
 8002b04:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	e00a      	b.n	8002b22 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3318      	adds	r3, #24
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	18d3      	adds	r3, r2, r3
 8002b16:	3306      	adds	r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d9f1      	bls.n	8002b0c <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	e009      	b.n	8002b42 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002b30:	2148      	movs	r1, #72	@ 0x48
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	185b      	adds	r3, r3, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b1a      	cmp	r3, #26
 8002b46:	d9f2      	bls.n	8002b2e <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	200019cc 	.word	0x200019cc

08002b58 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	0002      	movs	r2, r0
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d816      	bhi.n	8002b9a <pszTraceGetErrorNotEnoughHandles+0x42>
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8002b78:	e010      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <pszTraceGetErrorNotEnoughHandles+0x54>)
 8002b7c:	e00e      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8002b80:	e00c      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8002b84:	e00a      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8002b88:	e008      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <pszTraceGetErrorNotEnoughHandles+0x64>)
 8002b8c:	e006      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8002b90:	e004      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8002b92:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8002b94:	e002      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8002b98:	e000      	b.n	8002b9c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	08004eec 	.word	0x08004eec
 8002ba8:	08004888 	.word	0x08004888
 8002bac:	080048d0 	.word	0x080048d0
 8002bb0:	08004918 	.word	0x08004918
 8002bb4:	0800496c 	.word	0x0800496c
 8002bb8:	080049b8 	.word	0x080049b8
 8002bbc:	08004a04 	.word	0x08004a04
 8002bc0:	08004a50 	.word	0x08004a50
 8002bc4:	08004aa4 	.word	0x08004aa4
 8002bc8:	08004afc 	.word	0x08004afc
 8002bcc:	08004b58 	.word	0x08004b58

08002bd0 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8002bd8:	f000 f8c8 	bl	8002d6c <xTraceInitialize>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e021      	b.n	8002c2a <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10b      	bne.n	8002c04 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8002bec:	f7ff fe5b 	bl	80028a6 <xTraceKernelPortEnable>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e017      	b.n	8002c2a <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 8002bfa:	f000 f8a9 	bl	8002d50 <prvTraceInitTimestamps>

		prvTraceStart();
 8002bfe:	f000 f825 	bl	8002c4c <prvTraceStart>
 8002c02:	e011      	b.n	8002c28 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d105      	bne.n	8002c16 <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <xTraceEnable+0x64>)
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 fee5 	bl	80039dc <prvTraceError>

		return TRC_FAIL;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e009      	b.n	8002c2a <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <xTraceEnable+0x68>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fedc 	bl	80039dc <prvTraceError>

		return TRC_FAIL;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	08004b88 	.word	0x08004b88
 8002c38:	08004bc8 	.word	0x08004bc8

08002c3c <xTraceDisable>:


traceResult xTraceDisable(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	prvTraceStop();
 8002c40:	f000 f86e 	bl	8002d20 <prvTraceStop>

	return TRC_SUCCESS;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8002c52:	2417      	movs	r4, #23
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <prvTraceStart+0xc4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d050      	beq.n	8002d04 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8002c62:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <prvTraceStart+0xc4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d04d      	beq.n	8002d08 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8002c6c:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <prvTraceStart+0xc8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d14a      	bne.n	8002d0a <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c74:	f3ef 8310 	mrs	r3, PRIMASK
 8002c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <prvTraceStart+0xcc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <prvTraceStart+0xcc>)
 8002c92:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <prvTraceStart+0xc4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8002c9c:	f7ff fdf2 	bl	8002884 <prvTraceGetCurrentTaskHandle>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fd36 	bl	8002714 <prvTraceGetTaskNumberLow16>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	001a      	movs	r2, r3
 8002cac:	0025      	movs	r5, r4
 8002cae:	197b      	adds	r3, r7, r5
 8002cb0:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8002cb2:	197b      	adds	r3, r7, r5
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d113      	bne.n	8002ce2 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8002cba:	197c      	adds	r4, r7, r5
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f000 fd2b 	bl	8003718 <prvTraceGetObjectHandle>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <prvTraceStart+0xd0>)
 8002cc8:	197b      	adds	r3, r7, r5
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	0019      	movs	r1, r3
 8002cce:	2003      	movs	r0, #3
 8002cd0:	f000 fe1a 	bl	8003908 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8002cd4:	197b      	adds	r3, r7, r5
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	0019      	movs	r1, r3
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f000 fbfd 	bl	80034dc <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8002ce2:	2317      	movs	r3, #23
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fb83 	bl	80033f4 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <prvTraceStart+0xcc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <prvTraceStart+0xcc>)
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	e002      	b.n	8002d0a <prvTraceStart+0xbe>
		return;
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	e000      	b.n	8002d0a <prvTraceStart+0xbe>
		return; /* Already running */
 8002d08:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d10:	20002df8 	.word	0x20002df8
 8002d14:	20001a30 	.word	0x20001a30
 8002d18:	200019b4 	.word	0x200019b4
 8002d1c:	08004c08 	.word	0x08004c08

08002d20 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <prvTraceStop+0x28>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <prvTraceStop+0x28>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <prvTraceStop+0x2c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <prvTraceStop+0x2c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4798      	blx	r3
	}
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20002df8 	.word	0x20002df8
 8002d4c:	200019c0 	.word	0x200019c0

08002d50 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <prvTraceInitTimestamps+0x14>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <prvTraceInitTimestamps+0x18>)
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	e000e018 	.word	0xe000e018
 8002d68:	200019c4 	.word	0x200019c4

08002d6c <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8002d70:	4b7f      	ldr	r3, [pc, #508]	@ (8002f70 <xTraceInitialize+0x204>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e0f6      	b.n	8002f6a <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8002d7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f74 <xTraceInitialize+0x208>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4252      	negs	r2, r2
 8002d82:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8002d84:	4b7c      	ldr	r3, [pc, #496]	@ (8002f78 <xTraceInitialize+0x20c>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f7c <xTraceInitialize+0x210>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8002d90:	4b7b      	ldr	r3, [pc, #492]	@ (8002f80 <xTraceInitialize+0x214>)
 8002d92:	4a7c      	ldr	r2, [pc, #496]	@ (8002f84 <xTraceInitialize+0x218>)
 8002d94:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8002d96:	4b7c      	ldr	r3, [pc, #496]	@ (8002f88 <xTraceInitialize+0x21c>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f8c <xTraceInitialize+0x220>)
 8002d9c:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f90 <xTraceInitialize+0x224>)
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff fd77 	bl	8002894 <xTraceKernelPortInitialize>
 8002da6:	0003      	movs	r3, r0
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0dc      	b.n	8002f6a <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8002db0:	4b73      	ldr	r3, [pc, #460]	@ (8002f80 <xTraceInitialize+0x214>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a77      	ldr	r2, [pc, #476]	@ (8002f94 <xTraceInitialize+0x228>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f001 fd17 	bl	80047ec <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8002dbe:	4b70      	ldr	r3, [pc, #448]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	@ (8002f98 <xTraceInitialize+0x22c>)
 8002dc4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8002dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8002dce:	4b6c      	ldr	r3, [pc, #432]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6e      	ldr	r2, [pc, #440]	@ (8002f94 <xTraceInitialize+0x228>)
 8002ddc:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8002dde:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <xTraceInitialize+0x214>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	22fa      	movs	r2, #250	@ 0xfa
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8002de8:	4b65      	ldr	r3, [pc, #404]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6b      	ldr	r2, [pc, #428]	@ (8002f9c <xTraceInitialize+0x230>)
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8002df0:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <xTraceInitialize+0x214>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8002df8:	4b61      	ldr	r3, [pc, #388]	@ (8002f80 <xTraceInitialize+0x214>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8002e00:	f7ff fd58 	bl	80028b4 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8002e04:	4b5e      	ldr	r3, [pc, #376]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2398      	movs	r3, #152	@ 0x98
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4964      	ldr	r1, [pc, #400]	@ (8002fa0 <xTraceInitialize+0x234>)
 8002e0e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8002e10:	4b5b      	ldr	r3, [pc, #364]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2399      	movs	r3, #153	@ 0x99
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	21c8      	movs	r1, #200	@ 0xc8
 8002e1a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8002e1c:	4b58      	ldr	r3, [pc, #352]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	239a      	movs	r3, #154	@ 0x9a
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	2101      	movs	r1, #1
 8002e26:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8002e28:	4b55      	ldr	r3, [pc, #340]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	23ef      	movs	r3, #239	@ 0xef
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	495c      	ldr	r1, [pc, #368]	@ (8002fa4 <xTraceInitialize+0x238>)
 8002e32:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8002e34:	4b52      	ldr	r3, [pc, #328]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	22f0      	movs	r2, #240	@ 0xf0
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4694      	mov	ip, r2
 8002e3e:	4463      	add	r3, ip
 8002e40:	4959      	ldr	r1, [pc, #356]	@ (8002fa8 <xTraceInitialize+0x23c>)
 8002e42:	2250      	movs	r2, #80	@ 0x50
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fd3b 	bl	80038c0 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2382      	movs	r3, #130	@ 0x82
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4956      	ldr	r1, [pc, #344]	@ (8002fac <xTraceInitialize+0x240>)
 8002e54:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8002e56:	4b4a      	ldr	r3, [pc, #296]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a55      	ldr	r2, [pc, #340]	@ (8002fb0 <xTraceInitialize+0x244>)
 8002e5c:	210a      	movs	r1, #10
 8002e5e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8002e60:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a53      	ldr	r2, [pc, #332]	@ (8002fb4 <xTraceInitialize+0x248>)
 8002e66:	210b      	movs	r1, #11
 8002e68:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 8002e6a:	4b45      	ldr	r3, [pc, #276]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a52      	ldr	r2, [pc, #328]	@ (8002fb8 <xTraceInitialize+0x24c>)
 8002e70:	210c      	movs	r1, #12
 8002e72:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8002e74:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a50      	ldr	r2, [pc, #320]	@ (8002fbc <xTraceInitialize+0x250>)
 8002e7a:	210d      	movs	r1, #13
 8002e7c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 8002e7e:	4b40      	ldr	r3, [pc, #256]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc0 <xTraceInitialize+0x254>)
 8002e84:	2171      	movs	r1, #113	@ 0x71
 8002e86:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8002e88:	4b3d      	ldr	r3, [pc, #244]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <xTraceInitialize+0x258>)
 8002e8e:	2172      	movs	r1, #114	@ 0x72
 8002e90:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8002e92:	4b3b      	ldr	r3, [pc, #236]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc8 <xTraceInitialize+0x25c>)
 8002e98:	2173      	movs	r1, #115	@ 0x73
 8002e9a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8002e9c:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <xTraceInitialize+0x214>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fcc <xTraceInitialize+0x260>)
 8002ea2:	2174      	movs	r1, #116	@ 0x74
 8002ea4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8002ea6:	4b36      	ldr	r3, [pc, #216]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	239e      	movs	r3, #158	@ 0x9e
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	21f1      	movs	r1, #241	@ 0xf1
 8002eb0:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 8002eb2:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <xTraceInitialize+0x214>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a46      	ldr	r2, [pc, #280]	@ (8002fd0 <xTraceInitialize+0x264>)
 8002eb8:	21f2      	movs	r1, #242	@ 0xf2
 8002eba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 8002ebc:	4b30      	ldr	r3, [pc, #192]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a44      	ldr	r2, [pc, #272]	@ (8002fd4 <xTraceInitialize+0x268>)
 8002ec2:	21f3      	movs	r1, #243	@ 0xf3
 8002ec4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a43      	ldr	r2, [pc, #268]	@ (8002fd8 <xTraceInitialize+0x26c>)
 8002ecc:	21f4      	movs	r1, #244	@ 0xf4
 8002ece:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8002ed0:	f7ff fdba 	bl	8002a48 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	22f4      	movs	r2, #244	@ 0xf4
 8002eda:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	22f3      	movs	r2, #243	@ 0xf3
 8002ee2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22f2      	movs	r2, #242	@ 0xf2
 8002eea:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <xTraceInitialize+0x214>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	22f1      	movs	r2, #241	@ 0xf1
 8002ef2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <xTraceInitialize+0x214>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2274      	movs	r2, #116	@ 0x74
 8002efa:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8002efc:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <xTraceInitialize+0x214>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2273      	movs	r2, #115	@ 0x73
 8002f02:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2272      	movs	r2, #114	@ 0x72
 8002f0a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2271      	movs	r2, #113	@ 0x71
 8002f12:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2203      	movs	r2, #3
 8002f22:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8002f24:	4b16      	ldr	r3, [pc, #88]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <xTraceInitialize+0x210>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8002f3c:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	22f0      	movs	r2, #240	@ 0xf0
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	1898      	adds	r0, r3, r2
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <xTraceInitialize+0x210>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2250      	movs	r2, #80	@ 0x50
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	f000 fcb7 	bl	80038c0 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <xTraceInitialize+0x214>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	23ee      	movs	r3, #238	@ 0xee
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 8002f5e:	f7ff fedf 	bl	8002d20 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8002f62:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <xTraceInitialize+0x204>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20002dfc 	.word	0x20002dfc
 8002f74:	200019c8 	.word	0x200019c8
 8002f78:	200019ca 	.word	0x200019ca
 8002f7c:	20001a30 	.word	0x20001a30
 8002f80:	20002df8 	.word	0x20002df8
 8002f84:	20001a34 	.word	0x20001a34
 8002f88:	e000e018 	.word	0xe000e018
 8002f8c:	200019c4 	.word	0x200019c4
 8002f90:	200019a0 	.word	0x200019a0
 8002f94:	000013c4 	.word	0x000013c4
 8002f98:	00001aa1 	.word	0x00001aa1
 8002f9c:	f0f0f0f0 	.word	0xf0f0f0f0
 8002fa0:	f1f1f1f1 	.word	0xf1f1f1f1
 8002fa4:	f2f2f2f2 	.word	0xf2f2f2f2
 8002fa8:	08004c14 	.word	0x08004c14
 8002fac:	f3f3f3f3 	.word	0xf3f3f3f3
 8002fb0:	000013b8 	.word	0x000013b8
 8002fb4:	000013b9 	.word	0x000013b9
 8002fb8:	000013ba 	.word	0x000013ba
 8002fbc:	000013bb 	.word	0x000013bb
 8002fc0:	000013bc 	.word	0x000013bc
 8002fc4:	000013bd 	.word	0x000013bd
 8002fc8:	000013be 	.word	0x000013be
 8002fcc:	000013bf 	.word	0x000013bf
 8002fd0:	000013c1 	.word	0x000013c1
 8002fd4:	000013c2 	.word	0x000013c2
 8002fd8:	000013c3 	.word	0x000013c3

08002fdc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d04d      	beq.n	800308c <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <prvTraceStoreTaskReady+0xbc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d04b      	beq.n	8003090 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <prvTraceStoreTaskReady+0xc0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8003000:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <prvTraceStoreTaskReady+0xc4>)
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fcea 	bl	80039dc <prvTraceError>
		return;
 8003008:	e043      	b.n	8003092 <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300a:	f3ef 8310 	mrs	r3, PRIMASK
 800300e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003010:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	2301      	movs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <prvTraceStoreTaskReady+0xc0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <prvTraceStoreTaskReady+0xc0>)
 8003028:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800302a:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <prvTraceStoreTaskReady+0xc8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003034:	251a      	movs	r5, #26
 8003036:	197c      	adds	r4, r7, r5
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <prvTraceStoreTaskReady+0xcc>)
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fdc2 	bl	8003bc4 <prvTraceGetDTS>
 8003040:	0003      	movs	r3, r0
 8003042:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8003044:	2419      	movs	r4, #25
 8003046:	193b      	adds	r3, r7, r4
 8003048:	1dfa      	adds	r2, r7, #7
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800304e:	f000 faef 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 8003052:	0003      	movs	r3, r0
 8003054:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00c      	beq.n	8003076 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	197a      	adds	r2, r7, r5
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	193a      	adds	r2, r7, r4
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003072:	f000 fd7d 	bl	8003b70 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <prvTraceStoreTaskReady+0xc0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	4b07      	ldr	r3, [pc, #28]	@ (800309c <prvTraceStoreTaskReady+0xc0>)
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	e002      	b.n	8003092 <prvTraceStoreTaskReady+0xb6>
		return;
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	e000      	b.n	8003092 <prvTraceStoreTaskReady+0xb6>
		return;
 8003090:	46c0      	nop			@ (mov r8, r8)
}
 8003092:	46bd      	mov	sp, r7
 8003094:	b008      	add	sp, #32
 8003096:	bdb0      	pop	{r4, r5, r7, pc}
 8003098:	20000010 	.word	0x20000010
 800309c:	200019b4 	.word	0x200019b4
 80030a0:	08004c28 	.word	0x08004c28
 80030a4:	20002df8 	.word	0x20002df8
 80030a8:	0000ffff 	.word	0x0000ffff

080030ac <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b08e      	sub	sp, #56	@ 0x38
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 80030b8:	4b4c      	ldr	r3, [pc, #304]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <vTraceStoreMemMangEvent+0x16>
 80030c0:	e090      	b.n	80031e4 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da03      	bge.n	80030d0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	425b      	negs	r3, r3
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ce:	e001      	b.n	80030d4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d4:	f3ef 8310 	mrs	r3, PRIMASK
 80030d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80030da:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80030dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <vTraceStoreMemMangEvent+0x144>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	4b3f      	ldr	r3, [pc, #252]	@ (80031f0 <vTraceStoreMemMangEvent+0x144>)
 80030f2:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80030fa:	4b3c      	ldr	r3, [pc, #240]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4b3a      	ldr	r3, [pc, #232]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	188a      	adds	r2, r1, r2
 8003108:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800310a:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003110:	4b36      	ldr	r3, [pc, #216]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	429a      	cmp	r2, r3
 8003118:	d905      	bls.n	8003126 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800311a:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003124:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <vTraceStoreMemMangEvent+0x140>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	2b00      	cmp	r3, #0
 800312e:	d04e      	beq.n	80031ce <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8003130:	20ff      	movs	r0, #255	@ 0xff
 8003132:	f000 fd47 	bl	8003bc4 <prvTraceGetDTS>
 8003136:	0003      	movs	r3, r0
 8003138:	001a      	movs	r2, r3
 800313a:	242f      	movs	r4, #47	@ 0x2f
 800313c:	193b      	adds	r3, r7, r4
 800313e:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <vTraceStoreMemMangEvent+0x148>)
 8003144:	0019      	movs	r1, r3
 8003146:	0010      	movs	r0, r2
 8003148:	f000 f8bc 	bl	80032c4 <prvTraceGetParam>
 800314c:	0002      	movs	r2, r0
 800314e:	252c      	movs	r5, #44	@ 0x2c
 8003150:	197b      	adds	r3, r7, r5
 8003152:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003154:	f000 fa6c 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 8003158:	0003      	movs	r3, r0
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d035      	beq.n	80031ce <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	193a      	adds	r2, r7, r4
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	197a      	adds	r2, r7, r5
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003178:	f000 fcfa 	bl	8003b70 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <vTraceStoreMemMangEvent+0x148>)
 8003180:	0019      	movs	r1, r3
 8003182:	0010      	movs	r0, r2
 8003184:	f000 f89e 	bl	80032c4 <prvTraceGetParam>
 8003188:	0002      	movs	r2, r0
 800318a:	2426      	movs	r4, #38	@ 0x26
 800318c:	193b      	adds	r3, r7, r4
 800318e:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8003190:	2525      	movs	r5, #37	@ 0x25
 8003192:	197b      	adds	r3, r7, r5
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003198:	f000 fa4a 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 800319c:	0003      	movs	r3, r0
 800319e:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	193a      	adds	r2, r7, r4
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	197a      	adds	r2, r7, r5
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c8:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80031ca:	f000 fcd1 	bl	8003b70 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <vTraceStoreMemMangEvent+0x144>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <vTraceStoreMemMangEvent+0x144>)
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	e000      	b.n	80031e6 <vTraceStoreMemMangEvent+0x13a>
		return;
 80031e4:	46c0      	nop			@ (mov r8, r8)
}
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b00e      	add	sp, #56	@ 0x38
 80031ea:	bdb0      	pop	{r4, r5, r7, pc}
 80031ec:	20002df8 	.word	0x20002df8
 80031f0:	200019b4 	.word	0x200019b4
 80031f4:	0000ffff 	.word	0x0000ffff

080031f8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	230b      	movs	r3, #11
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	1c0a      	adds	r2, r1, #0
 8003208:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <prvTraceStoreKernelCall+0xb8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8003212:	4b28      	ldr	r3, [pc, #160]	@ (80032b4 <prvTraceStoreKernelCall+0xbc>)
 8003214:	0018      	movs	r0, r3
 8003216:	f000 fbe1 	bl	80039dc <prvTraceError>
		return;
 800321a:	e045      	b.n	80032a8 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 800321c:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <prvTraceStoreKernelCall+0xc0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d040      	beq.n	80032a6 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	617b      	str	r3, [r7, #20]
  return(result);
 800322a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
 800322e:	2301      	movs	r3, #1
 8003230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <prvTraceStoreKernelCall+0xb8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <prvTraceStoreKernelCall+0xb8>)
 8003242:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8003244:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <prvTraceStoreKernelCall+0xc4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	2b00      	cmp	r3, #0
 800324c:	d020      	beq.n	8003290 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800324e:	2522      	movs	r5, #34	@ 0x22
 8003250:	197c      	adds	r4, r7, r5
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <prvTraceStoreKernelCall+0xc8>)
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fcb5 	bl	8003bc4 <prvTraceGetDTS>
 800325a:	0003      	movs	r3, r0
 800325c:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800325e:	2421      	movs	r4, #33	@ 0x21
 8003260:	193b      	adds	r3, r7, r4
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003266:	f000 f9e3 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 800326a:	0003      	movs	r3, r0
 800326c:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	197a      	adds	r2, r7, r5
 8003278:	8812      	ldrh	r2, [r2, #0]
 800327a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	193a      	adds	r2, r7, r4
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800328c:	f000 fc70 	bl	8003b70 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <prvTraceStoreKernelCall+0xb8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <prvTraceStoreKernelCall+0xb8>)
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	e000      	b.n	80032a8 <prvTraceStoreKernelCall+0xb0>
		return;
 80032a6:	46c0      	nop			@ (mov r8, r8)
}
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b00a      	add	sp, #40	@ 0x28
 80032ac:	bdb0      	pop	{r4, r5, r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	200019b4 	.word	0x200019b4
 80032b4:	08004c60 	.word	0x08004c60
 80032b8:	200019bc 	.word	0x200019bc
 80032bc:	20002df8 	.word	0x20002df8
 80032c0:	0000ffff 	.word	0x0000ffff

080032c4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d801      	bhi.n	80032da <prvTraceGetParam+0x16>
	{
		return param;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	e01e      	b.n	8003318 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80032da:	f000 f9a9 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 80032de:	0003      	movs	r3, r0
 80032e0:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d014      	beq.n	8003312 <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4013      	ands	r3, r2
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	43db      	mvns	r3, r3
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	4013      	ands	r3, r2
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800330e:	f000 fc2f 	bl	8003b70 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4013      	ands	r3, r2
	}
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 800332a:	2326      	movs	r3, #38	@ 0x26
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2200      	movs	r2, #0
 8003330:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 800333a:	4b2a      	ldr	r3, [pc, #168]	@ (80033e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fb4d 	bl	80039dc <prvTraceError>
		return;
 8003342:	e04a      	b.n	80033da <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	613b      	str	r3, [r7, #16]
  return(result);
 800334a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	2301      	movs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003362:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003364:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02a      	beq.n	80033c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 800336e:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d026      	beq.n	80033c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8003376:	20ff      	movs	r0, #255	@ 0xff
 8003378:	f000 fc24 	bl	8003bc4 <prvTraceGetDTS>
 800337c:	0003      	movs	r3, r0
 800337e:	001a      	movs	r2, r3
 8003380:	241f      	movs	r4, #31
 8003382:	193b      	adds	r3, r7, r4
 8003384:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 800338a:	0019      	movs	r1, r3
 800338c:	0010      	movs	r0, r2
 800338e:	f7ff ff99 	bl	80032c4 <prvTraceGetParam>
 8003392:	0002      	movs	r2, r0
 8003394:	2526      	movs	r5, #38	@ 0x26
 8003396:	197b      	adds	r3, r7, r5
 8003398:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 800339a:	f000 f949 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 800339e:	0003      	movs	r3, r0
 80033a0:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	193a      	adds	r2, r7, r4
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	197a      	adds	r2, r7, r5
 80033bc:	8812      	ldrh	r2, [r2, #0]
 80033be:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80033c0:	f000 fbd6 	bl	8003b70 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
}
 80033da:	46bd      	mov	sp, r7
 80033dc:	b00a      	add	sp, #40	@ 0x28
 80033de:	bdb0      	pop	{r4, r5, r7, pc}
 80033e0:	200019b4 	.word	0x200019b4
 80033e4:	08004cd0 	.word	0x08004cd0
 80033e8:	20002df8 	.word	0x20002df8
 80033ec:	200019bc 	.word	0x200019bc
 80033f0:	0000ffff 	.word	0x0000ffff

080033f4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	0002      	movs	r2, r0
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003400:	f3ef 8310 	mrs	r3, PRIMASK
 8003404:	60fb      	str	r3, [r7, #12]
  return(result);
 8003406:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2301      	movs	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			@ (mov r8, r8)
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <prvTraceStoreTaskswitch+0xd8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <prvTraceStoreTaskswitch+0xd8>)
 800341e:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <prvTraceStoreTaskswitch+0xdc>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	1dfa      	adds	r2, r7, #7
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d03f      	beq.n	80034ac <prvTraceStoreTaskswitch+0xb8>
 800342c:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <prvTraceStoreTaskswitch+0xe0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	2b00      	cmp	r3, #0
 8003434:	d03a      	beq.n	80034ac <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003436:	231a      	movs	r3, #26
 8003438:	18fc      	adds	r4, r7, r3
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <prvTraceStoreTaskswitch+0xe4>)
 800343c:	0018      	movs	r0, r3
 800343e:	f000 fbc1 	bl	8003bc4 <prvTraceGetDTS>
 8003442:	0003      	movs	r3, r0
 8003444:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8003446:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <prvTraceStoreTaskswitch+0xdc>)
 8003448:	1dfa      	adds	r2, r7, #7
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800344e:	2319      	movs	r3, #25
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <prvTraceStoreTaskswitch+0xdc>)
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003458:	f000 f8ea 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 800345c:	0003      	movs	r3, r0
 800345e:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d022      	beq.n	80034ac <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003466:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <prvTraceStoreTaskswitch+0xdc>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	0019      	movs	r1, r3
 800346c:	2003      	movs	r0, #3
 800346e:	f000 f897 	bl	80035a0 <prvTraceGetObjectState>
 8003472:	0003      	movs	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d103      	bne.n	8003480 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2207      	movs	r2, #7
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e002      	b.n	8003486 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2206      	movs	r2, #6
 8003484:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	221a      	movs	r2, #26
 800348a:	18ba      	adds	r2, r7, r2
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2219      	movs	r2, #25
 8003494:	18ba      	adds	r2, r7, r2
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <prvTraceStoreTaskswitch+0xdc>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	0019      	movs	r1, r3
 80034a2:	2003      	movs	r0, #3
 80034a4:	f000 f84c 	bl	8003540 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80034a8:	f000 fb62 	bl	8003b70 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <prvTraceStoreTaskswitch+0xd8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <prvTraceStoreTaskswitch+0xd8>)
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b009      	add	sp, #36	@ 0x24
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	200019b4 	.word	0x200019b4
 80034d0:	200019bc 	.word	0x200019bc
 80034d4:	20002df8 	.word	0x20002df8
 80034d8:	0000ffff 	.word	0x0000ffff

080034dc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	0004      	movs	r4, r0
 80034e4:	0008      	movs	r0, r1
 80034e6:	0011      	movs	r1, r2
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	1c22      	adds	r2, r4, #0
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	1dbb      	adds	r3, r7, #6
 80034f0:	1c02      	adds	r2, r0, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	1d7b      	adds	r3, r7, #5
 80034f6:	1c0a      	adds	r2, r1, #0
 80034f8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <prvTraceSetPriorityProperty+0x60>)
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	1dbb      	adds	r3, r7, #6
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f8bb 	bl	8003684 <uiIndexOfObject>
 800350e:	0003      	movs	r3, r0
 8003510:	0018      	movs	r0, r3
 8003512:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <prvTraceSetPriorityProperty+0x60>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	215c      	movs	r1, #92	@ 0x5c
 800351c:	18d3      	adds	r3, r2, r3
 800351e:	185b      	adds	r3, r3, r1
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	18c3      	adds	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	2288      	movs	r2, #136	@ 0x88
 8003528:	18e3      	adds	r3, r4, r3
 800352a:	189b      	adds	r3, r3, r2
 800352c:	1d7a      	adds	r2, r7, #5
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b003      	add	sp, #12
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	20002df8 	.word	0x20002df8

08003540 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	0004      	movs	r4, r0
 8003548:	0008      	movs	r0, r1
 800354a:	0011      	movs	r1, r2
 800354c:	1dfb      	adds	r3, r7, #7
 800354e:	1c22      	adds	r2, r4, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	1dbb      	adds	r3, r7, #6
 8003554:	1c02      	adds	r2, r0, #0
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	1d7b      	adds	r3, r7, #5
 800355a:	1c0a      	adds	r2, r1, #0
 800355c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <prvTraceSetObjectState+0x5c>)
 8003560:	681c      	ldr	r4, [r3, #0]
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	1dbb      	adds	r3, r7, #6
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	0011      	movs	r1, r2
 800356c:	0018      	movs	r0, r3
 800356e:	f000 f889 	bl	8003684 <uiIndexOfObject>
 8003572:	0003      	movs	r3, r0
 8003574:	0018      	movs	r0, r3
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <prvTraceSetObjectState+0x5c>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	215c      	movs	r1, #92	@ 0x5c
 8003580:	18d3      	adds	r3, r2, r3
 8003582:	185b      	adds	r3, r3, r1
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	18c3      	adds	r3, r0, r3
 8003588:	2288      	movs	r2, #136	@ 0x88
 800358a:	18e3      	adds	r3, r4, r3
 800358c:	189b      	adds	r3, r3, r2
 800358e:	1d7a      	adds	r2, r7, #5
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b003      	add	sp, #12
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	20002df8 	.word	0x20002df8

080035a0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	0002      	movs	r2, r0
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	1c0a      	adds	r2, r1, #0
 80035b0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <prvTraceGetObjectState+0x4c>)
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	1dbb      	adds	r3, r7, #6
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f85f 	bl	8003684 <uiIndexOfObject>
 80035c6:	0003      	movs	r3, r0
 80035c8:	0018      	movs	r0, r3
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <prvTraceGetObjectState+0x4c>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	215c      	movs	r1, #92	@ 0x5c
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	185b      	adds	r3, r3, r1
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	18c3      	adds	r3, r0, r3
 80035dc:	2288      	movs	r2, #136	@ 0x88
 80035de:	18e3      	adds	r3, r4, r3
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b003      	add	sp, #12
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	20002df8 	.word	0x20002df8

080035f0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	0002      	movs	r2, r0
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <prvTraceSetTaskInstanceFinished+0x3c>)
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	1dfb      	adds	r3, r7, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2103      	movs	r1, #3
 8003606:	0018      	movs	r0, r3
 8003608:	f000 f83c 	bl	8003684 <uiIndexOfObject>
 800360c:	0003      	movs	r3, r0
 800360e:	0019      	movs	r1, r3
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <prvTraceSetTaskInstanceFinished+0x3c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	225f      	movs	r2, #95	@ 0x5f
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	18cb      	adds	r3, r1, r3
 800361a:	2288      	movs	r2, #136	@ 0x88
 800361c:	18e3      	adds	r3, r4, r3
 800361e:	189b      	adds	r3, r3, r2
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
#endif
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b003      	add	sp, #12
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	20002df8 	.word	0x20002df8

08003630 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003634:	4b11      	ldr	r3, [pc, #68]	@ (800367c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 800363e:	2300      	movs	r3, #0
 8003640:	e018      	b.n	8003674 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	23fa      	movs	r3, #250	@ 0xfa
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d305      	bcc.n	800365c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <prvTraceNextFreeEventBufferSlot+0x50>)
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f9c2 	bl	80039dc <prvTraceError>
		return (void*)0;
 8003658:	2300      	movs	r3, #0
 800365a:	e00b      	b.n	8003674 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <prvTraceNextFreeEventBufferSlot+0x4c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	2182      	movs	r1, #130	@ 0x82
 800366a:	00c9      	lsls	r1, r1, #3
 800366c:	468c      	mov	ip, r1
 800366e:	4463      	add	r3, ip
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	3304      	adds	r3, #4
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	20002df8 	.word	0x20002df8
 8003680:	08004d08 	.word	0x08004d08

08003684 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	0002      	movs	r2, r0
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	1c0a      	adds	r2, r1, #0
 8003694:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b08      	cmp	r3, #8
 800369c:	d82e      	bhi.n	80036fc <uiIndexOfObject+0x78>
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02a      	beq.n	80036fc <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 80036a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <uiIndexOfObject+0x8c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	1dbb      	adds	r3, r7, #6
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2150      	movs	r1, #80	@ 0x50
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	185b      	adds	r3, r3, r1
 80036b4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80036b6:	1dfa      	adds	r2, r7, #7
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d81e      	bhi.n	80036fc <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80036be:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <uiIndexOfObject+0x8c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	1dbb      	adds	r3, r7, #6
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	3338      	adds	r3, #56	@ 0x38
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	18d3      	adds	r3, r2, r3
 80036cc:	3304      	adds	r3, #4
 80036ce:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80036d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003710 <uiIndexOfObject+0x8c>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2068      	movs	r0, #104	@ 0x68
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	181b      	adds	r3, r3, r0
 80036de:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80036e0:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4353      	muls	r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	200e      	movs	r0, #14
 80036f0:	183b      	adds	r3, r7, r0
 80036f2:	188a      	adds	r2, r1, r2
 80036f4:	801a      	strh	r2, [r3, #0]
		return index;
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	e004      	b.n	8003706 <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <uiIndexOfObject+0x90>)
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 f96c 	bl	80039dc <prvTraceError>
	return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	20002df8 	.word	0x20002df8
 8003714:	08004d30 	.word	0x08004d30

08003718 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	@ 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	0002      	movs	r2, r0
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	60fb      	str	r3, [r7, #12]
  return(result);
 800372a:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	2301      	movs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <prvTraceGetObjectHandle+0x154>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	4b4a      	ldr	r3, [pc, #296]	@ (800386c <prvTraceGetObjectHandle+0x154>)
 8003742:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 800374a:	0052      	lsls	r2, r2, #1
 800374c:	5ad3      	ldrh	r3, [r2, r3]
 800374e:	001a      	movs	r2, r3
 8003750:	4b48      	ldr	r3, [pc, #288]	@ (8003874 <prvTraceGetObjectHandle+0x15c>)
 8003752:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003754:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <prvTraceGetObjectHandle+0x15c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a45      	ldr	r2, [pc, #276]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 800375a:	2148      	movs	r1, #72	@ 0x48
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	185b      	adds	r3, r3, r1
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d117      	bne.n	8003796 <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003766:	4b43      	ldr	r3, [pc, #268]	@ (8003874 <prvTraceGetObjectHandle+0x15c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	493f      	ldr	r1, [pc, #252]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 8003772:	3308      	adds	r3, #8
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	18cb      	adds	r3, r1, r3
 8003778:	3302      	adds	r3, #2
 800377a:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 800377c:	b2db      	uxtb	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <prvTraceGetObjectHandle+0x15c>)
 8003784:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003786:	3201      	adds	r2, #1
 8003788:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800378a:	4a39      	ldr	r2, [pc, #228]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 800378c:	2148      	movs	r1, #72	@ 0x48
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	185b      	adds	r3, r3, r1
 8003792:	1c02      	adds	r2, r0, #0
 8003794:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003796:	4b37      	ldr	r3, [pc, #220]	@ (8003874 <prvTraceGetObjectHandle+0x15c>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	241f      	movs	r4, #31
 800379c:	193b      	adds	r3, r7, r4
 800379e:	4934      	ldr	r1, [pc, #208]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037a0:	2048      	movs	r0, #72	@ 0x48
 80037a2:	188a      	adds	r2, r1, r2
 80037a4:	1812      	adds	r2, r2, r0
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037b0:	0052      	lsls	r2, r2, #1
 80037b2:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	492d      	ldr	r1, [pc, #180]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037ba:	3310      	adds	r3, #16
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	18cb      	adds	r3, r1, r3
 80037c0:	3304      	adds	r3, #4
 80037c2:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d90c      	bls.n	80037e2 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff f9c3 	bl	8002b58 <pszTraceGetErrorNotEnoughHandles>
 80037d2:	0003      	movs	r3, r0
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f901 	bl	80039dc <prvTraceError>
		handle = 0;
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e031      	b.n	8003846 <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	4a22      	ldr	r2, [pc, #136]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037e8:	0059      	lsls	r1, r3, #1
 80037ea:	5a8a      	ldrh	r2, [r1, r2]
 80037ec:	3201      	adds	r2, #1
 80037ee:	b291      	uxth	r1, r2
 80037f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 80037fc:	0052      	lsls	r2, r2, #1
 80037fe:	5ad3      	ldrh	r3, [r2, r3]
 8003800:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 8003808:	3308      	adds	r3, #8
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	18d3      	adds	r3, r2, r3
 800380e:	3302      	adds	r3, #2
 8003810:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003812:	1acb      	subs	r3, r1, r3
 8003814:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a15      	ldr	r2, [pc, #84]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 800381c:	3318      	adds	r3, #24
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	3306      	adds	r3, #6
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	001a      	movs	r2, r3
		if (hndCount >
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4293      	cmp	r3, r2
 800382c:	dd0b      	ble.n	8003846 <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8003836:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <prvTraceGetObjectHandle+0x158>)
 800383a:	3318      	adds	r3, #24
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	18d3      	adds	r3, r2, r3
 8003840:	3306      	adds	r3, #6
 8003842:	1c0a      	adds	r2, r1, #0
 8003844:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <prvTraceGetObjectHandle+0x154>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1e5a      	subs	r2, r3, #1
 800384c:	4b07      	ldr	r3, [pc, #28]	@ (800386c <prvTraceGetObjectHandle+0x154>)
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			@ (mov r8, r8)

	return handle;
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b009      	add	sp, #36	@ 0x24
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	200019b4 	.word	0x200019b4
 8003870:	200019cc 	.word	0x200019cc
 8003874:	20002e00 	.word	0x20002e00

08003878 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	1c0a      	adds	r2, r1, #0
 8003888:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800388a:	250e      	movs	r5, #14
 800388c:	197c      	adds	r4, r7, r5
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	0011      	movs	r1, r2
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff fef3 	bl	8003684 <uiIndexOfObject>
 800389e:	0003      	movs	r3, r0
 80038a0:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <prvMarkObjectAsUsed+0x44>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	197b      	adds	r3, r7, r5
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2188      	movs	r1, #136	@ 0x88
 80038ac:	18d3      	adds	r3, r2, r3
 80038ae:	185b      	adds	r3, r3, r1
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	20002df8 	.word	0x20002df8

080038c0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e010      	b.n	80038f4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	18d2      	adds	r2, r2, r3
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	18cb      	adds	r3, r1, r3
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	18d3      	adds	r3, r2, r3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d3ea      	bcc.n	80038d2 <prvStrncpy+0x12>
			break;
	}
}
 80038fc:	e000      	b.n	8003900 <prvStrncpy+0x40>
			break;
 80038fe:	46c0      	nop			@ (mov r8, r8)
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b006      	add	sp, #24
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	603a      	str	r2, [r7, #0]
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	1c02      	adds	r2, r0, #0
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	1dbb      	adds	r3, r7, #6
 8003918:	1c0a      	adds	r2, r1, #0
 800391a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8003922:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <prvTraceSetObjectName+0xbc>)
 8003924:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d904      	bls.n	8003938 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <prvTraceSetObjectName+0xc0>)
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f853 	bl	80039dc <prvTraceError>
		return;
 8003936:	e041      	b.n	80039bc <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8003940:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <prvTraceSetObjectName+0xc4>)
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f84a 	bl	80039dc <prvTraceError>
		return;
 8003948:	e038      	b.n	80039bc <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800394a:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <prvTraceSetObjectName+0xc8>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2150      	movs	r1, #80	@ 0x50
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	185b      	adds	r3, r3, r1
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	1dba      	adds	r2, r7, #6
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d909      	bls.n	8003976 <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff f8f6 	bl	8002b58 <pszTraceGetErrorNotEnoughHandles>
 800396c:	0003      	movs	r3, r0
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f834 	bl	80039dc <prvTraceError>
 8003974:	e022      	b.n	80039bc <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff fe7f 	bl	8003684 <uiIndexOfObject>
 8003986:	0003      	movs	r3, r0
 8003988:	001a      	movs	r2, r3
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <prvTraceSetObjectName+0xcc>)
 800398c:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 800398e:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <prvTraceSetObjectName+0xd0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d112      	bne.n	80039bc <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <prvTraceSetObjectName+0xc8>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <prvTraceSetObjectName+0xcc>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	3388      	adds	r3, #136	@ 0x88
 80039a0:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <prvTraceSetObjectName+0xc8>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	215c      	movs	r1, #92	@ 0x5c
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	185b      	adds	r3, r3, r1
 80039b0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80039b2:	001a      	movs	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	0019      	movs	r1, r3
 80039b8:	f7ff ff82 	bl	80038c0 <prvStrncpy>
		}
	}
}
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	08004da0 	.word	0x08004da0
 80039c8:	08004da4 	.word	0x08004da4
 80039cc:	08004dd4 	.word	0x08004dd4
 80039d0:	20002df8 	.word	0x20002df8
 80039d4:	20002e04 	.word	0x20002e04
 80039d8:	20001a30 	.word	0x20001a30

080039dc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 80039e4:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <prvTraceError+0x54>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <prvTraceError+0x14>
	{
		xTraceDisable();
 80039ec:	f7ff f926 	bl	8002c3c <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 80039f0:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <prvTraceError+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d117      	bne.n	8003a28 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <prvTraceError+0x58>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 80039fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003a30 <prvTraceError+0x54>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003a06:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <prvTraceError+0x54>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22f0      	movs	r2, #240	@ 0xf0
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	1898      	adds	r0, r3, r2
 8003a10:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <prvTraceError+0x58>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2250      	movs	r2, #80	@ 0x50
 8003a16:	0019      	movs	r1, r3
 8003a18:	f7ff ff52 	bl	80038c0 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <prvTraceError+0x54>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	23ee      	movs	r3, #238	@ 0xee
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	2101      	movs	r1, #1
 8003a26:	50d1      	str	r1, [r2, r3]
		}
	}
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20002df8 	.word	0x20002df8
 8003a34:	20001a30 	.word	0x20001a30

08003a38 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8003a4c:	e080      	b.n	8003b50 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8003a4e:	4b46      	ldr	r3, [pc, #280]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	18d3      	adds	r3, r2, r3
 8003a58:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003a5a:	4b43      	ldr	r3, [pc, #268]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4942      	ldr	r1, [pc, #264]	@ (8003b6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8003a64:	18d3      	adds	r3, r2, r3
 8003a66:	185b      	adds	r3, r3, r1
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b98      	cmp	r3, #152	@ 0x98
 8003a6c:	d931      	bls.n	8003ad2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	493d      	ldr	r1, [pc, #244]	@ (8003b6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	185b      	adds	r3, r3, r1
 8003a7c:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8003a7e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003a80:	d827      	bhi.n	8003ad2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8003a82:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4938      	ldr	r1, [pc, #224]	@ (8003b6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8003a8c:	18d3      	adds	r3, r2, r3
 8003a8e:	185b      	adds	r3, r3, r1
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	210f      	movs	r1, #15
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	3268      	adds	r2, #104	@ 0x68
 8003a98:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	18d2      	adds	r2, r2, r3
 8003aa2:	4b31      	ldr	r3, [pc, #196]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d24d      	bcs.n	8003b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8003aac:	4b2e      	ldr	r3, [pc, #184]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	2082      	movs	r0, #130	@ 0x82
 8003ab6:	00c0      	lsls	r0, r0, #3
 8003ab8:	4684      	mov	ip, r0
 8003aba:	4463      	add	r3, ip
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	001a      	movs	r2, r3
 8003aca:	2100      	movs	r1, #0
 8003acc:	f000 fe8e 	bl	80047ec <memset>
		{
 8003ad0:	e03a      	b.n	8003b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8003ad2:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4924      	ldr	r1, [pc, #144]	@ (8003b6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	185b      	adds	r3, r3, r1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d131      	bne.n	8003b4a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d20f      	bcs.n	8003b14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8003af4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	2182      	movs	r1, #130	@ 0x82
 8003afe:	00c9      	lsls	r1, r1, #3
 8003b00:	468c      	mov	ip, r1
 8003b02:	4463      	add	r3, ip
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	3304      	adds	r3, #4
 8003b08:	2208      	movs	r2, #8
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 fe6d 	bl	80047ec <memset>
 8003b12:	e01a      	b.n	8003b4a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8003b1a:	4694      	mov	ip, r2
 8003b1c:	4463      	add	r3, ip
 8003b1e:	2204      	movs	r2, #4
 8003b20:	2100      	movs	r1, #0
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fe62 	bl	80047ec <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	2182      	movs	r1, #130	@ 0x82
 8003b32:	00c9      	lsls	r1, r1, #3
 8003b34:	468c      	mov	ip, r1
 8003b36:	4463      	add	r3, ip
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	2100      	movs	r1, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 fe53 	bl	80047ec <memset>
 8003b46:	e000      	b.n	8003b4a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 8003b48:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8003b50:	1dfb      	adds	r3, r7, #7
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d200      	bcs.n	8003b5c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 8003b5a:	e778      	b.n	8003a4e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b006      	add	sp, #24
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	20002df8 	.word	0x20002df8
 8003b6c:	00000414 	.word	0x00000414

08003b70 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8003b7e:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	3201      	adds	r2, #1
 8003b86:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8003b88:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	3201      	adds	r2, #1
 8003b90:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003b92:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	23fa      	movs	r3, #250	@ 0xfa
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d307      	bcc.n	8003bb0 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <prvTraceUpdateCounters+0x50>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2200      	movs	r2, #0
 8003bae:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7ff ff41 	bl	8003a38 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8003bb6:	e000      	b.n	8003bba <prvTraceUpdateCounters+0x4a>
		return;
 8003bb8:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	20002df8 	.word	0x20002df8

08003bc4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	0002      	movs	r2, r0
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8003bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 8003be6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d54 <prvTraceGetDTS+0x190>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8003bee:	4b59      	ldr	r3, [pc, #356]	@ (8003d54 <prvTraceGetDTS+0x190>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b57      	ldr	r3, [pc, #348]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	0892      	lsrs	r2, r2, #2
 8003bf8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bfa:	e00b      	b.n	8003c14 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8003bfc:	4b56      	ldr	r3, [pc, #344]	@ (8003d58 <prvTraceGetDTS+0x194>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b56      	ldr	r3, [pc, #344]	@ (8003d5c <prvTraceGetDTS+0x198>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d005      	beq.n	8003c14 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8003c08:	4b55      	ldr	r3, [pc, #340]	@ (8003d60 <prvTraceGetDTS+0x19c>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b50      	ldr	r3, [pc, #320]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0892      	lsrs	r2, r2, #2
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8003c14:	230c      	movs	r3, #12
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f8a9 	bl	8003d70 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <prvTraceGetDTS+0x1a0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003d64 <prvTraceGetDTS+0x1a0>)
 8003c2c:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 8003c2e:	4b48      	ldr	r3, [pc, #288]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d921      	bls.n	8003c88 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8003c44:	4b42      	ldr	r3, [pc, #264]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003c4a:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	0019      	movs	r1, r3
 8003c52:	6938      	ldr	r0, [r7, #16]
 8003c54:	f7fc fa58 	bl	8000108 <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	18a2      	adds	r2, r4, r2
 8003c62:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8003c64:	4b3a      	ldr	r3, [pc, #232]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fc facd 	bl	8000214 <__aeabi_uidivmod>
 8003c7a:	000b      	movs	r3, r1
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	18a2      	adds	r2, r4, r2
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c86:	e007      	b.n	8003c98 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8003c88:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003c8e:	4b30      	ldr	r3, [pc, #192]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	188a      	adds	r2, r1, r2
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8003c98:	4b2d      	ldr	r3, [pc, #180]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d313      	bcc.n	8003cd0 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8003ca8:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cae:	3201      	adds	r2, #1
 8003cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8003cb2:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003cb8:	4b25      	ldr	r3, [pc, #148]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cbe:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1a8a      	subs	r2, r1, r2
 8003cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cc6:	e003      	b.n	8003cd0 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <prvTraceGetDTS+0x18c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8003cd0:	1dbb      	adds	r3, r7, #6
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d92f      	bls.n	8003d3a <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8003cda:	f7ff fca9 	bl	8003630 <prvTraceNextFreeEventBufferSlot>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d028      	beq.n	8003d3a <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <prvTraceGetDTS+0x1a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10b      	bne.n	8003d0a <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	22a9      	movs	r2, #169	@ 0xa9
 8003cf6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	705a      	strb	r2, [r3, #1]
 8003d08:	e015      	b.n	8003d36 <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 8003d0a:	1dbb      	adds	r3, r7, #6
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	2bff      	cmp	r3, #255	@ 0xff
 8003d10:	d10d      	bne.n	8003d2e <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	22a8      	movs	r2, #168	@ 0xa8
 8003d16:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	705a      	strb	r2, [r3, #1]
 8003d2c:	e003      	b.n	8003d36 <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <prvTraceGetDTS+0x1a8>)
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fe53 	bl	80039dc <prvTraceError>
			}
			prvTraceUpdateCounters();
 8003d36:	f7ff ff1b 	bl	8003b70 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1dba      	adds	r2, r7, #6
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	4013      	ands	r3, r2
 8003d44:	b29b      	uxth	r3, r3
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b007      	add	sp, #28
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	20002df8 	.word	0x20002df8
 8003d54:	200019b8 	.word	0x200019b8
 8003d58:	e000e018 	.word	0xe000e018
 8003d5c:	200019c4 	.word	0x200019c4
 8003d60:	20000014 	.word	0x20000014
 8003d64:	20002e08 	.word	0x20002e08
 8003d68:	0000ffff 	.word	0x0000ffff
 8003d6c:	08004e04 	.word	0x08004e04

08003d70 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <prvTracePortGetTimeStamp+0xc8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04f      	beq.n	8003e2e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e3c <prvTracePortGetTimeStamp+0xcc>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
		return;
 8003d96:	e04a      	b.n	8003e2e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8003d98:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <prvTracePortGetTimeStamp+0xd0>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <prvTracePortGetTimeStamp+0xd4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8003da6:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <prvTracePortGetTimeStamp+0xd8>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <prvTracePortGetTimeStamp+0xdc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db03      	blt.n	8003dbe <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8003db6:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <prvTracePortGetTimeStamp+0xd8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e002      	b.n	8003dc4 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8003dbe:	4b23      	ldr	r3, [pc, #140]	@ (8003e4c <prvTracePortGetTimeStamp+0xdc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8003dc4:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <prvTracePortGetTimeStamp+0xd8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d107      	bne.n	8003dde <prvTracePortGetTimeStamp+0x6e>
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <prvTracePortGetTimeStamp+0xe0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d202      	bcs.n	8003dde <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8003de4:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <prvTracePortGetTimeStamp+0xd0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	435a      	muls	r2, r3
 8003df0:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <prvTracePortGetTimeStamp+0xcc>)
 8003df2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <prvTracePortGetTimeStamp+0xd0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	435a      	muls	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	089a      	lsrs	r2, r3, #2
 8003e08:	4b0c      	ldr	r3, [pc, #48]	@ (8003e3c <prvTracePortGetTimeStamp+0xcc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	18d2      	adds	r2, r2, r3
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <prvTracePortGetTimeStamp+0xcc>)
 8003e10:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <prvTracePortGetTimeStamp+0xd8>)
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <prvTracePortGetTimeStamp+0xcc>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <prvTracePortGetTimeStamp+0xe0>)
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e000      	b.n	8003e30 <prvTracePortGetTimeStamp+0xc0>
		return;
 8003e2e:	46c0      	nop			@ (mov r8, r8)
}
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	200019a8 	.word	0x200019a8
 8003e3c:	200019ac 	.word	0x200019ac
 8003e40:	e000e014 	.word	0xe000e014
 8003e44:	e000e018 	.word	0xe000e018
 8003e48:	20002e0c 	.word	0x20002e0c
 8003e4c:	200019a4 	.word	0x200019a4
 8003e50:	20002e10 	.word	0x20002e10

08003e54 <main>:
                         UBaseType_t                  uxPriority,
                         TaskHandle_t * const         pxCreatedTask );

// Main function
int main()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8003e5a:	f000 f845 	bl	8003ee8 <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 8003e5e:	f000 fb15 	bl	800448c <BSP_LED_Init>
	BSP_PB_Init();
 8003e62:	f000 fb6d 	bl	8004540 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8003e66:	f000 fba9 	bl	80045bc <BSP_Console_Init>
	my_printf("Console ready!\r\n");
 8003e6a:	4b18      	ldr	r3, [pc, #96]	@ (8003ecc <main+0x78>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 faef 	bl	8004450 <my_printf>

	// Start Trace Recording
	xTraceEnable(TRC_START);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fe feac 	bl	8002bd0 <xTraceEnable>
	// Create Semaphore object (this is not a 'give')
	xSem = xSemaphoreCreateBinary();
 8003e78:	2203      	movs	r2, #3
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7fc fae1 	bl	8000444 <xQueueGenericCreate>
 8003e82:	0002      	movs	r2, r0
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <main+0x7c>)
 8003e86:	601a      	str	r2, [r3, #0]
	// Give a nice name to the Semaphore in the trace recorder
	vTraceSetSemaphoreName(xSem, "xSEM");
 8003e88:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <main+0x7c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ed4 <main+0x80>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fe fce3 	bl	800285c <vTraceSetSemaphoreName>
	// Create Tasks
	xTaskCreate(vTask1, "Task_1", 256, NULL, 2, NULL);
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	005a      	lsls	r2, r3, #1
 8003e9a:	490f      	ldr	r1, [pc, #60]	@ (8003ed8 <main+0x84>)
 8003e9c:	480f      	ldr	r0, [pc, #60]	@ (8003edc <main+0x88>)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f7fc ff29 	bl	8000cfe <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 1, NULL);
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	005a      	lsls	r2, r3, #1
 8003eb0:	490b      	ldr	r1, [pc, #44]	@ (8003ee0 <main+0x8c>)
 8003eb2:	480c      	ldr	r0, [pc, #48]	@ (8003ee4 <main+0x90>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f7fc ff1e 	bl	8000cfe <xTaskCreate>
	// Start the Scheduler
	vTaskStartScheduler();
 8003ec2:	f7fd f9f1 	bl	80012a8 <vTaskStartScheduler>

	while(1)
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	e7fd      	b.n	8003ec6 <main+0x72>
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	08004e70 	.word	0x08004e70
 8003ed0:	20002e14 	.word	0x20002e14
 8003ed4:	08004e84 	.word	0x08004e84
 8003ed8:	08004e8c 	.word	0x08004e8c
 8003edc:	0800401d 	.word	0x0800401d
 8003ee0:	08004e94 	.word	0x08004e94
 8003ee4:	08004071 	.word	0x08004071

08003ee8 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8003ef2:	4b44      	ldr	r3, [pc, #272]	@ (8004004 <SystemClock_Config+0x11c>)
 8003ef4:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8003ef6:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <SystemClock_Config+0x120>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b43      	ldr	r3, [pc, #268]	@ (8004008 <SystemClock_Config+0x120>)
 8003efc:	2180      	movs	r1, #128	@ 0x80
 8003efe:	02c9      	lsls	r1, r1, #11
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8003f04:	4b40      	ldr	r3, [pc, #256]	@ (8004008 <SystemClock_Config+0x120>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b3f      	ldr	r3, [pc, #252]	@ (8004008 <SystemClock_Config+0x120>)
 8003f0a:	2180      	movs	r1, #128	@ 0x80
 8003f0c:	0249      	lsls	r1, r1, #9
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8003f12:	4b3d      	ldr	r3, [pc, #244]	@ (8004008 <SystemClock_Config+0x120>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60bb      	str	r3, [r7, #8]
		timeout--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <SystemClock_Config+0x48>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8003f30:	4b35      	ldr	r3, [pc, #212]	@ (8004008 <SystemClock_Config+0x120>)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	4b34      	ldr	r3, [pc, #208]	@ (8004008 <SystemClock_Config+0x120>)
 8003f36:	4935      	ldr	r1, [pc, #212]	@ (800400c <SystemClock_Config+0x124>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8003f3c:	4b32      	ldr	r3, [pc, #200]	@ (8004008 <SystemClock_Config+0x120>)
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	4b31      	ldr	r3, [pc, #196]	@ (8004008 <SystemClock_Config+0x120>)
 8003f42:	2180      	movs	r1, #128	@ 0x80
 8003f44:	0249      	lsls	r1, r1, #9
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8003f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <SystemClock_Config+0x120>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8003f50:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <SystemClock_Config+0x120>)
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <SystemClock_Config+0x120>)
 8003f56:	492e      	ldr	r1, [pc, #184]	@ (8004010 <SystemClock_Config+0x128>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <SystemClock_Config+0x120>)
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4b29      	ldr	r3, [pc, #164]	@ (8004008 <SystemClock_Config+0x120>)
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	0349      	lsls	r1, r1, #13
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8003f6a:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <SystemClock_Config+0x120>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <SystemClock_Config+0x120>)
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	0449      	lsls	r1, r1, #17
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8003f78:	4b23      	ldr	r3, [pc, #140]	@ (8004008 <SystemClock_Config+0x120>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	049b      	lsls	r3, r3, #18
 8003f80:	4013      	ands	r3, r2
 8003f82:	607b      	str	r3, [r7, #4]
		timeout--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <SystemClock_Config+0xae>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8003f96:	4b1c      	ldr	r3, [pc, #112]	@ (8004008 <SystemClock_Config+0x120>)
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <SystemClock_Config+0x120>)
 8003f9c:	21f0      	movs	r1, #240	@ 0xf0
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003fa2:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <SystemClock_Config+0x120>)
 8003fa4:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <SystemClock_Config+0x120>)
 8003fa6:	6852      	ldr	r2, [r2, #4]
 8003fa8:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8003faa:	4b17      	ldr	r3, [pc, #92]	@ (8004008 <SystemClock_Config+0x120>)
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <SystemClock_Config+0x120>)
 8003fb0:	4918      	ldr	r1, [pc, #96]	@ (8004014 <SystemClock_Config+0x12c>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8003fb6:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <SystemClock_Config+0x120>)
 8003fb8:	4b13      	ldr	r3, [pc, #76]	@ (8004008 <SystemClock_Config+0x120>)
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <SystemClock_Config+0x130>)
 8003fc0:	2211      	movs	r2, #17
 8003fc2:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8003fc4:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <SystemClock_Config+0x120>)
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <SystemClock_Config+0x120>)
 8003fca:	2103      	movs	r1, #3
 8003fcc:	438a      	bics	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <SystemClock_Config+0x120>)
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <SystemClock_Config+0x120>)
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <SystemClock_Config+0x120>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	220c      	movs	r2, #12
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	603b      	str	r3, [r7, #0]
		timeout--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d002      	beq.n	8003ff8 <SystemClock_Config+0x110>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f1      	bne.n	8003fdc <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8003ff8:	f000 fb72 	bl	80046e0 <SystemCoreClockUpdate>
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b004      	add	sp, #16
 8004002:	bd80      	pop	{r7, pc}
 8004004:	000f4240 	.word	0x000f4240
 8004008:	40021000 	.word	0x40021000
 800400c:	fffe7fff 	.word	0xfffe7fff
 8004010:	ffc3ffff 	.word	0xffc3ffff
 8004014:	fffff8ff 	.word	0xfffff8ff
 8004018:	40022000 	.word	0x40022000

0800401c <vTask1>:
 *
 *	- Prints current time (OS tick) every 1s
 *	- Using precise period delay
 */
void vTask1 (void *pvParameters)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	portTickType	now, xLastWakeTime;
	uint16_t		n = 0;
 8004024:	2316      	movs	r3, #22
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2200      	movs	r2, #0
 800402a:	801a      	strh	r2, [r3, #0]
	// Initialize timing
	xLastWakeTime = xTaskGetTickCount();
 800402c:	f7fd faac 	bl	8001588 <xTaskGetTickCount>
 8004030:	0003      	movs	r3, r0
 8004032:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		n++;
 8004034:	2416      	movs	r4, #22
 8004036:	193b      	adds	r3, r7, r4
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	193b      	adds	r3, r7, r4
 800403c:	3201      	adds	r2, #1
 800403e:	801a      	strh	r2, [r3, #0]
		now = xTaskGetTickCount();
 8004040:	f7fd faa2 	bl	8001588 <xTaskGetTickCount>
 8004044:	0003      	movs	r3, r0
 8004046:	613b      	str	r3, [r7, #16]
		my_printf("\r\n Task_1 #%2d @tick = %6d ", n, now);
 8004048:	193b      	adds	r3, r7, r4
 800404a:	8819      	ldrh	r1, [r3, #0]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <vTask1+0x50>)
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f9fd 	bl	8004450 <my_printf>
		// Wait here for 1s since last wake-up
		vTaskDelayUntil (&xLastWakeTime, (1000/portTICK_RATE_MS));
 8004056:	23fa      	movs	r3, #250	@ 0xfa
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	230c      	movs	r3, #12
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f7fd f829 	bl	80010b8 <xTaskDelayUntil>
		n++;
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	e7e4      	b.n	8004034 <vTask1+0x18>
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	08004e9c 	.word	0x08004e9c

08004070 <vTask2>:
 *
 *	- Toggles LED and prints '.' every 100ms
 *	- Internal (blocking) loop if button is pressed
 */
void vTask2 (void *pvParameters)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Loop here if button is pressed
		while(BSP_PB_GetState()==1);
 8004078:	46c0      	nop			@ (mov r8, r8)
 800407a:	f000 fa83 	bl	8004584 <BSP_PB_GetState>
 800407e:	0003      	movs	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d0fa      	beq.n	800407a <vTask2+0xa>
		// Otherwise toggle LED and suspend task for 100ms
		BSP_LED_Toggle();
 8004084:	f000 fa4e 	bl	8004524 <BSP_LED_Toggle>
		my_printf(".");
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <vTask2+0x28>)
 800408a:	0018      	movs	r0, r3
 800408c:	f000 f9e0 	bl	8004450 <my_printf>
		vTaskDelay(100);
 8004090:	2064      	movs	r0, #100	@ 0x64
 8004092:	f7fd f8a9 	bl	80011e8 <vTaskDelay>
		while(BSP_PB_GetState()==1);
 8004096:	e7ef      	b.n	8004078 <vTask2+0x8>
 8004098:	08004eb8 	.word	0x08004eb8

0800409c <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	if (str) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <printchar+0x26>
		**str = c;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
		++(*str);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 80040c0:	e00a      	b.n	80040d8 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <printchar+0x44>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b40      	cmp	r3, #64	@ 0x40
 80040ce:	d1f9      	bne.n	80040c4 <printchar+0x28>
		USART2->TDR = c;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <printchar+0x44>)
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	b292      	uxth	r2, r2
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40004400 	.word	0x40004400

080040e4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	46c6      	mov	lr, r8
 80040e8:	b500      	push	{lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80040f6:	2400      	movs	r4, #0
 80040f8:	2320      	movs	r3, #32
 80040fa:	4698      	mov	r8, r3

	if (width > 0) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dd16      	ble.n	8004130 <prints+0x4c>
		register int len = 0;
 8004102:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8004104:	68be      	ldr	r6, [r7, #8]
 8004106:	e001      	b.n	800410c <prints+0x28>
 8004108:	3501      	adds	r5, #1
 800410a:	3601      	adds	r6, #1
 800410c:	7833      	ldrb	r3, [r6, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1fa      	bne.n	8004108 <prints+0x24>
		if (len >= width) width = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	429d      	cmp	r5, r3
 8004116:	db02      	blt.n	800411e <prints+0x3a>
 8004118:	2300      	movs	r3, #0
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	e002      	b.n	8004124 <prints+0x40>
		else width -= len;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1b5b      	subs	r3, r3, r5
 8004122:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d001      	beq.n	8004130 <prints+0x4c>
 800412c:	2330      	movs	r3, #48	@ 0x30
 800412e:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	4013      	ands	r3, r2
 8004136:	d119      	bne.n	800416c <prints+0x88>
		for ( ; width > 0; --width) {
 8004138:	e008      	b.n	800414c <prints+0x68>
			printchar (out, padchar);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4641      	mov	r1, r8
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff ffac 	bl	800409c <printchar>
			++pc;
 8004144:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3b01      	subs	r3, #1
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	dcf3      	bgt.n	800413a <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8004152:	e00b      	b.n	800416c <prints+0x88>
		printchar (out, *string);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	001a      	movs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0011      	movs	r1, r2
 800415e:	0018      	movs	r0, r3
 8004160:	f7ff ff9c 	bl	800409c <printchar>
		++pc;
 8004164:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3301      	adds	r3, #1
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1ef      	bne.n	8004154 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8004174:	e008      	b.n	8004188 <prints+0xa4>
		printchar (out, padchar);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4641      	mov	r1, r8
 800417a:	0018      	movs	r0, r3
 800417c:	f7ff ff8e 	bl	800409c <printchar>
		++pc;
 8004180:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3b01      	subs	r3, #1
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	dcf3      	bgt.n	8004176 <prints+0x92>
	}

	return pc;
 800418e:	0023      	movs	r3, r4
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b004      	add	sp, #16
 8004196:	bc80      	pop	{r7}
 8004198:	46b8      	mov	r8, r7
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800419c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	46ce      	mov	lr, r9
 80041a0:	4647      	mov	r7, r8
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b089      	sub	sp, #36	@ 0x24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	4699      	mov	r9, r3
 80041b4:	2600      	movs	r6, #0
	register unsigned int u = i;
 80041b6:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <printi+0x40>
		print_buf[0] = '0';
 80041be:	2114      	movs	r1, #20
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2230      	movs	r2, #48	@ 0x30
 80041c4:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	2200      	movs	r2, #0
 80041ca:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80041cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041d0:	1879      	adds	r1, r7, r1
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff86 	bl	80040e4 <prints>
 80041d8:	0003      	movs	r3, r0
 80041da:	e04e      	b.n	800427a <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <printi+0x5c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b0a      	cmp	r3, #10
 80041e6:	d107      	bne.n	80041f8 <printi+0x5c>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	da04      	bge.n	80041f8 <printi+0x5c>
		neg = 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	4699      	mov	r9, r3
		u = -i;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	425b      	negs	r3, r3
 80041f6:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80041f8:	2314      	movs	r3, #20
 80041fa:	18fc      	adds	r4, r7, r3
 80041fc:	340b      	adds	r4, #11
	*s = '\0';
 80041fe:	2300      	movs	r3, #0
 8004200:	7023      	strb	r3, [r4, #0]

	while (u) {
 8004202:	e019      	b.n	8004238 <printi+0x9c>
		t = u % b;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0019      	movs	r1, r3
 8004208:	0028      	movs	r0, r5
 800420a:	f7fc f803 	bl	8000214 <__aeabi_uidivmod>
 800420e:	000b      	movs	r3, r1
 8004210:	4698      	mov	r8, r3
		if( t >= 10 )
 8004212:	4643      	mov	r3, r8
 8004214:	2b09      	cmp	r3, #9
 8004216:	dd02      	ble.n	800421e <printi+0x82>
			t += letbase - '0' - 10;
 8004218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421a:	3b3a      	subs	r3, #58	@ 0x3a
 800421c:	4498      	add	r8, r3
		*--s = t + '0';
 800421e:	4643      	mov	r3, r8
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3c01      	subs	r4, #1
 8004224:	3330      	adds	r3, #48	@ 0x30
 8004226:	b2db      	uxtb	r3, r3
 8004228:	7023      	strb	r3, [r4, #0]
		u /= b;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0019      	movs	r1, r3
 800422e:	0028      	movs	r0, r5
 8004230:	f7fb ff6a 	bl	8000108 <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	001d      	movs	r5, r3
	while (u) {
 8004238:	2d00      	cmp	r5, #0
 800423a:	d1e3      	bne.n	8004204 <printi+0x68>
	}

	if (neg) {
 800423c:	464b      	mov	r3, r9
 800423e:	2b00      	cmp	r3, #0
 8004240:	d013      	beq.n	800426a <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8004242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <printi+0xc8>
 8004248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800424a:	2202      	movs	r2, #2
 800424c:	4013      	ands	r3, r2
 800424e:	d009      	beq.n	8004264 <printi+0xc8>
			printchar (out, '-');
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	212d      	movs	r1, #45	@ 0x2d
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff ff21 	bl	800409c <printchar>
			++pc;
 800425a:	3601      	adds	r6, #1
			--width;
 800425c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425e:	3b01      	subs	r3, #1
 8004260:	643b      	str	r3, [r7, #64]	@ 0x40
 8004262:	e002      	b.n	800426a <printi+0xce>
		}
		else {
			*--s = '-';
 8004264:	3c01      	subs	r4, #1
 8004266:	232d      	movs	r3, #45	@ 0x2d
 8004268:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800426a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	0021      	movs	r1, r4
 8004272:	f7ff ff37 	bl	80040e4 <prints>
 8004276:	0003      	movs	r3, r0
 8004278:	18f3      	adds	r3, r6, r3
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b009      	add	sp, #36	@ 0x24
 8004280:	bcc0      	pop	{r6, r7}
 8004282:	46b9      	mov	r9, r7
 8004284:	46b0      	mov	r8, r6
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004288 <print>:

static int print(char **out, const char *format, va_list args )
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	b08b      	sub	sp, #44	@ 0x2c
 800428c:	af04      	add	r7, sp, #16
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8004294:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8004296:	e0c6      	b.n	8004426 <print+0x19e>
		if (*format == '%') {
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b25      	cmp	r3, #37	@ 0x25
 800429e:	d000      	beq.n	80042a2 <print+0x1a>
 80042a0:	e0b2      	b.n	8004408 <print+0x180>
			++format;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80042a8:	2600      	movs	r6, #0
 80042aa:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d100      	bne.n	80042b6 <print+0x2e>
 80042b4:	e0bd      	b.n	8004432 <print+0x1aa>
			if (*format == '%') goto out;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b25      	cmp	r3, #37	@ 0x25
 80042bc:	d100      	bne.n	80042c0 <print+0x38>
 80042be:	e0a5      	b.n	800440c <print+0x184>
			if (*format == '-') {
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80042c6:	d10a      	bne.n	80042de <print+0x56>
				++format;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80042ce:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80042d0:	e005      	b.n	80042de <print+0x56>
				++format;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80042d8:	2302      	movs	r3, #2
 80042da:	4333      	orrs	r3, r6
 80042dc:	001e      	movs	r6, r3
			while (*format == '0') {
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b30      	cmp	r3, #48	@ 0x30
 80042e4:	d0f5      	beq.n	80042d2 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80042e6:	e00b      	b.n	8004300 <print+0x78>
				width *= 10;
 80042e8:	002b      	movs	r3, r5
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	195b      	adds	r3, r3, r5
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	001d      	movs	r5, r3
				width += *format - '0';
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	3b30      	subs	r3, #48	@ 0x30
 80042f8:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b2f      	cmp	r3, #47	@ 0x2f
 8004306:	d903      	bls.n	8004310 <print+0x88>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b39      	cmp	r3, #57	@ 0x39
 800430e:	d9eb      	bls.n	80042e8 <print+0x60>
			}
			if( *format == 's' ) {
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b73      	cmp	r3, #115	@ 0x73
 8004316:	d10f      	bne.n	8004338 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8004322:	d000      	beq.n	8004326 <print+0x9e>
 8004324:	e000      	b.n	8004328 <print+0xa0>
 8004326:	4949      	ldr	r1, [pc, #292]	@ (800444c <print+0x1c4>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	0033      	movs	r3, r6
 800432c:	002a      	movs	r2, r5
 800432e:	f7ff fed9 	bl	80040e4 <prints>
 8004332:	0003      	movs	r3, r0
 8004334:	18e4      	adds	r4, r4, r3
				continue;
 8004336:	e073      	b.n	8004420 <print+0x198>
			}
			if( *format == 'd' ) {
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b64      	cmp	r3, #100	@ 0x64
 800433e:	d10f      	bne.n	8004360 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	2361      	movs	r3, #97	@ 0x61
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	9601      	str	r6, [sp, #4]
 8004350:	9500      	str	r5, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	220a      	movs	r2, #10
 8004356:	f7ff ff21 	bl	800419c <printi>
 800435a:	0003      	movs	r3, r0
 800435c:	18e4      	adds	r4, r4, r3
				continue;
 800435e:	e05f      	b.n	8004420 <print+0x198>
			}
			if( *format == 'x' ) {
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b78      	cmp	r3, #120	@ 0x78
 8004366:	d10f      	bne.n	8004388 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	2361      	movs	r3, #97	@ 0x61
 8004374:	9302      	str	r3, [sp, #8]
 8004376:	9601      	str	r6, [sp, #4]
 8004378:	9500      	str	r5, [sp, #0]
 800437a:	2300      	movs	r3, #0
 800437c:	2210      	movs	r2, #16
 800437e:	f7ff ff0d 	bl	800419c <printi>
 8004382:	0003      	movs	r3, r0
 8004384:	18e4      	adds	r4, r4, r3
				continue;
 8004386:	e04b      	b.n	8004420 <print+0x198>
			}
			if( *format == 'X' ) {
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b58      	cmp	r3, #88	@ 0x58
 800438e:	d10f      	bne.n	80043b0 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	2341      	movs	r3, #65	@ 0x41
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	9601      	str	r6, [sp, #4]
 80043a0:	9500      	str	r5, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	2210      	movs	r2, #16
 80043a6:	f7ff fef9 	bl	800419c <printi>
 80043aa:	0003      	movs	r3, r0
 80043ac:	18e4      	adds	r4, r4, r3
				continue;
 80043ae:	e037      	b.n	8004420 <print+0x198>
			}
			if( *format == 'u' ) {
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b75      	cmp	r3, #117	@ 0x75
 80043b6:	d10f      	bne.n	80043d8 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	2361      	movs	r3, #97	@ 0x61
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	9601      	str	r6, [sp, #4]
 80043c8:	9500      	str	r5, [sp, #0]
 80043ca:	2300      	movs	r3, #0
 80043cc:	220a      	movs	r2, #10
 80043ce:	f7ff fee5 	bl	800419c <printi>
 80043d2:	0003      	movs	r3, r0
 80043d4:	18e4      	adds	r4, r4, r3
				continue;
 80043d6:	e023      	b.n	8004420 <print+0x198>
			}
			if( *format == 'c' ) {
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b63      	cmp	r3, #99	@ 0x63
 80043de:	d11f      	bne.n	8004420 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	2114      	movs	r1, #20
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	2200      	movs	r2, #0
 80043f4:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80043f6:	1879      	adds	r1, r7, r1
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	0033      	movs	r3, r6
 80043fc:	002a      	movs	r2, r5
 80043fe:	f7ff fe71 	bl	80040e4 <prints>
 8004402:	0003      	movs	r3, r0
 8004404:	18e4      	adds	r4, r4, r3
				continue;
 8004406:	e00b      	b.n	8004420 <print+0x198>
			}
		}
		else {
		out:
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	e000      	b.n	800440e <print+0x186>
			if (*format == '%') goto out;
 800440c:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	001a      	movs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f7ff fe3f 	bl	800409c <printchar>
			++pc;
 800441e:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d000      	beq.n	8004430 <print+0x1a8>
 800442e:	e733      	b.n	8004298 <print+0x10>
 8004430:	e000      	b.n	8004434 <print+0x1ac>
			if (*format == '\0') break;
 8004432:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <print+0x1ba>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8004442:	0023      	movs	r3, r4
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b007      	add	sp, #28
 800444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444c:	08004ebc 	.word	0x08004ebc

08004450 <my_printf>:

int my_printf(const char *format, ...)
{
 8004450:	b40f      	push	{r0, r1, r2, r3}
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8004458:	2314      	movs	r3, #20
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	0019      	movs	r1, r3
 8004464:	2000      	movs	r0, #0
 8004466:	f7ff ff0f 	bl	8004288 <print>
 800446a:	0003      	movs	r3, r0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bc80      	pop	{r7}
 8004474:	bc08      	pop	{r3}
 8004476:	b004      	add	sp, #16
 8004478:	4718      	bx	r3

0800447a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	af00      	add	r7, sp, #0
}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	e7fd      	b.n	8004488 <HardFault_Handler+0x4>

0800448c <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004490:	4b22      	ldr	r3, [pc, #136]	@ (800451c <BSP_LED_Init+0x90>)
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	4b21      	ldr	r3, [pc, #132]	@ (800451c <BSP_LED_Init+0x90>)
 8004496:	2180      	movs	r1, #128	@ 0x80
 8004498:	0289      	lsls	r1, r1, #10
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800449e:	2390      	movs	r3, #144	@ 0x90
 80044a0:	05db      	lsls	r3, r3, #23
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2390      	movs	r3, #144	@ 0x90
 80044a6:	05db      	lsls	r3, r3, #23
 80044a8:	491d      	ldr	r1, [pc, #116]	@ (8004520 <BSP_LED_Init+0x94>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80044ae:	2390      	movs	r3, #144	@ 0x90
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2390      	movs	r3, #144	@ 0x90
 80044b6:	05db      	lsls	r3, r3, #23
 80044b8:	2180      	movs	r1, #128	@ 0x80
 80044ba:	00c9      	lsls	r1, r1, #3
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 80044c0:	2390      	movs	r3, #144	@ 0x90
 80044c2:	05db      	lsls	r3, r3, #23
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	2390      	movs	r3, #144	@ 0x90
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	2120      	movs	r1, #32
 80044cc:	438a      	bics	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 80044d0:	2390      	movs	r3, #144	@ 0x90
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	2390      	movs	r3, #144	@ 0x90
 80044d8:	05db      	lsls	r3, r3, #23
 80044da:	4911      	ldr	r1, [pc, #68]	@ (8004520 <BSP_LED_Init+0x94>)
 80044dc:	400a      	ands	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80044e0:	2390      	movs	r3, #144	@ 0x90
 80044e2:	05db      	lsls	r3, r3, #23
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	2390      	movs	r3, #144	@ 0x90
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	21c0      	movs	r1, #192	@ 0xc0
 80044ec:	0109      	lsls	r1, r1, #4
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80044f2:	2390      	movs	r3, #144	@ 0x90
 80044f4:	05db      	lsls	r3, r3, #23
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	2390      	movs	r3, #144	@ 0x90
 80044fa:	05db      	lsls	r3, r3, #23
 80044fc:	4908      	ldr	r1, [pc, #32]	@ (8004520 <BSP_LED_Init+0x94>)
 80044fe:	400a      	ands	r2, r1
 8004500:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8004502:	2390      	movs	r3, #144	@ 0x90
 8004504:	05db      	lsls	r3, r3, #23
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	2390      	movs	r3, #144	@ 0x90
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	2180      	movs	r1, #128	@ 0x80
 800450e:	0389      	lsls	r1, r1, #14
 8004510:	430a      	orrs	r2, r1
 8004512:	619a      	str	r2, [r3, #24]
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	40021000 	.word	0x40021000
 8004520:	fffff3ff 	.word	0xfffff3ff

08004524 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8004528:	2390      	movs	r3, #144	@ 0x90
 800452a:	05db      	lsls	r3, r3, #23
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	2390      	movs	r3, #144	@ 0x90
 8004530:	05db      	lsls	r3, r3, #23
 8004532:	2120      	movs	r1, #32
 8004534:	404a      	eors	r2, r1
 8004536:	615a      	str	r2, [r3, #20]
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <BSP_PB_Init>:

void BSP_PB_Init()
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <BSP_PB_Init+0x38>)
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <BSP_PB_Init+0x38>)
 800454a:	2180      	movs	r1, #128	@ 0x80
 800454c:	0309      	lsls	r1, r1, #12
 800454e:	430a      	orrs	r2, r1
 8004550:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <BSP_PB_Init+0x3c>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <BSP_PB_Init+0x3c>)
 8004558:	4909      	ldr	r1, [pc, #36]	@ (8004580 <BSP_PB_Init+0x40>)
 800455a:	400a      	ands	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800455e:	4a07      	ldr	r2, [pc, #28]	@ (800457c <BSP_PB_Init+0x3c>)
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <BSP_PB_Init+0x3c>)
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8004566:	4b05      	ldr	r3, [pc, #20]	@ (800457c <BSP_PB_Init+0x3c>)
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b04      	ldr	r3, [pc, #16]	@ (800457c <BSP_PB_Init+0x3c>)
 800456c:	4904      	ldr	r1, [pc, #16]	@ (8004580 <BSP_PB_Init+0x40>)
 800456e:	400a      	ands	r2, r1
 8004570:	60da      	str	r2, [r3, #12]
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	48000800 	.word	0x48000800
 8004580:	f3ffffff 	.word	0xf3ffffff

08004584 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	uint8_t state;
	if ((GPIOC->IDR & GPIO_IDR_13) == GPIO_IDR_13)
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <BSP_PB_GetState+0x34>)
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	2380      	movs	r3, #128	@ 0x80
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	401a      	ands	r2, r3
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	019b      	lsls	r3, r3, #6
 8004598:	429a      	cmp	r2, r3
 800459a:	d103      	bne.n	80045a4 <BSP_PB_GetState+0x20>
	{
		state = 0;
 800459c:	1dfb      	adds	r3, r7, #7
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e002      	b.n	80045aa <BSP_PB_GetState+0x26>
	}
	else
	{
		state = 1;
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
	}
	return state;
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	48000800 	.word	0x48000800

080045bc <BSP_Console_Init>:

void BSP_Console_Init()
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80045c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <BSP_Console_Init+0xb4>)
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004670 <BSP_Console_Init+0xb4>)
 80045c6:	2180      	movs	r1, #128	@ 0x80
 80045c8:	0289      	lsls	r1, r1, #10
 80045ca:	430a      	orrs	r2, r1
 80045cc:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80045ce:	2390      	movs	r3, #144	@ 0x90
 80045d0:	05db      	lsls	r3, r3, #23
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	2390      	movs	r3, #144	@ 0x90
 80045d6:	05db      	lsls	r3, r3, #23
 80045d8:	21f0      	movs	r1, #240	@ 0xf0
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 80045de:	2390      	movs	r3, #144	@ 0x90
 80045e0:	05db      	lsls	r3, r3, #23
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2390      	movs	r3, #144	@ 0x90
 80045e6:	05db      	lsls	r3, r3, #23
 80045e8:	21a0      	movs	r1, #160	@ 0xa0
 80045ea:	430a      	orrs	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80045ee:	2390      	movs	r3, #144	@ 0x90
 80045f0:	05db      	lsls	r3, r3, #23
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	2390      	movs	r3, #144	@ 0x90
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	491e      	ldr	r1, [pc, #120]	@ (8004674 <BSP_Console_Init+0xb8>)
 80045fa:	400a      	ands	r2, r1
 80045fc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 80045fe:	2390      	movs	r3, #144	@ 0x90
 8004600:	05db      	lsls	r3, r3, #23
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	2390      	movs	r3, #144	@ 0x90
 8004606:	05db      	lsls	r3, r3, #23
 8004608:	2188      	movs	r1, #136	@ 0x88
 800460a:	0149      	lsls	r1, r1, #5
 800460c:	430a      	orrs	r2, r1
 800460e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8004610:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <BSP_Console_Init+0xb4>)
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	4b16      	ldr	r3, [pc, #88]	@ (8004670 <BSP_Console_Init+0xb4>)
 8004616:	2180      	movs	r1, #128	@ 0x80
 8004618:	0289      	lsls	r1, r1, #10
 800461a:	430a      	orrs	r2, r1
 800461c:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800461e:	4b16      	ldr	r3, [pc, #88]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8004624:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800462a:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <BSP_Console_Init+0xbc>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8004630:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <BSP_Console_Init+0xb4>)
 8004632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <BSP_Console_Init+0xb4>)
 8004636:	4911      	ldr	r1, [pc, #68]	@ (800467c <BSP_Console_Init+0xc0>)
 8004638:	400a      	ands	r2, r1
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 800463c:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <BSP_Console_Init+0xbc>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004642:	2180      	movs	r1, #128	@ 0x80
 8004644:	0209      	lsls	r1, r1, #8
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <BSP_Console_Init+0xbc>)
 800464c:	4a0c      	ldr	r2, [pc, #48]	@ (8004680 <BSP_Console_Init+0xc4>)
 800464e:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004650:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004656:	210c      	movs	r1, #12
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <BSP_Console_Init+0xbc>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <BSP_Console_Init+0xbc>)
 8004662:	2101      	movs	r1, #1
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	40021000 	.word	0x40021000
 8004674:	ffff00ff 	.word	0xffff00ff
 8004678:	40004400 	.word	0x40004400
 800467c:	fffcffff 	.word	0xfffcffff
 8004680:	00000341 	.word	0x00000341

08004684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004684:	480d      	ldr	r0, [pc, #52]	@ (80046bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004686:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004688:	f000 f825 	bl	80046d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800468c:	480c      	ldr	r0, [pc, #48]	@ (80046c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800468e:	490d      	ldr	r1, [pc, #52]	@ (80046c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004690:	4a0d      	ldr	r2, [pc, #52]	@ (80046c8 <LoopForever+0xe>)
  movs r3, #0
 8004692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004694:	e002      	b.n	800469c <LoopCopyDataInit>

08004696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800469a:	3304      	adds	r3, #4

0800469c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800469c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800469e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a0:	d3f9      	bcc.n	8004696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046a2:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80046a4:	4c0a      	ldr	r4, [pc, #40]	@ (80046d0 <LoopForever+0x16>)
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046a8:	e001      	b.n	80046ae <LoopFillZerobss>

080046aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046ac:	3204      	adds	r2, #4

080046ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b0:	d3fb      	bcc.n	80046aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80046b2:	f000 f8a3 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046b6:	f7ff fbcd 	bl	8003e54 <main>

080046ba <LoopForever>:

LoopForever:
    b LoopForever
 80046ba:	e7fe      	b.n	80046ba <LoopForever>
  ldr   r0, =_estack
 80046bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80046c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80046c8:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 80046cc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80046d0:	20002e18 	.word	0x20002e18

080046d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046d4:	e7fe      	b.n	80046d4 <ADC1_COMP_IRQHandler>

080046d6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	2300      	movs	r3, #0
 80046f4:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80046f6:	4b38      	ldr	r3, [pc, #224]	@ (80047d8 <SystemCoreClockUpdate+0xf8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	220c      	movs	r2, #12
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d011      	beq.n	800472a <SystemCoreClockUpdate+0x4a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d84f      	bhi.n	80047ac <SystemCoreClockUpdate+0xcc>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <SystemCoreClockUpdate+0x3a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d004      	beq.n	8004722 <SystemCoreClockUpdate+0x42>
 8004718:	e048      	b.n	80047ac <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800471a:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 800471c:	4a30      	ldr	r2, [pc, #192]	@ (80047e0 <SystemCoreClockUpdate+0x100>)
 800471e:	601a      	str	r2, [r3, #0]
      break;
 8004720:	e048      	b.n	80047b4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8004722:	4b2e      	ldr	r3, [pc, #184]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 8004724:	4a2e      	ldr	r2, [pc, #184]	@ (80047e0 <SystemCoreClockUpdate+0x100>)
 8004726:	601a      	str	r2, [r3, #0]
      break;
 8004728:	e044      	b.n	80047b4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800472a:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <SystemCoreClockUpdate+0xf8>)
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	23f0      	movs	r3, #240	@ 0xf0
 8004730:	039b      	lsls	r3, r3, #14
 8004732:	4013      	ands	r3, r2
 8004734:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004736:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <SystemCoreClockUpdate+0xf8>)
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	23c0      	movs	r3, #192	@ 0xc0
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	4013      	ands	r3, r2
 8004740:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0c9b      	lsrs	r3, r3, #18
 8004746:	3302      	adds	r3, #2
 8004748:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800474a:	4b23      	ldr	r3, [pc, #140]	@ (80047d8 <SystemCoreClockUpdate+0xf8>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	220f      	movs	r2, #15
 8004750:	4013      	ands	r3, r2
 8004752:	3301      	adds	r3, #1
 8004754:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	025b      	lsls	r3, r3, #9
 800475c:	429a      	cmp	r2, r3
 800475e:	d10a      	bne.n	8004776 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	481f      	ldr	r0, [pc, #124]	@ (80047e0 <SystemCoreClockUpdate+0x100>)
 8004764:	f7fb fcd0 	bl	8000108 <__udivsi3>
 8004768:	0003      	movs	r3, r0
 800476a:	001a      	movs	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	435a      	muls	r2, r3
 8004770:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 8004772:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8004774:	e01e      	b.n	80047b4 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	23c0      	movs	r3, #192	@ 0xc0
 800477a:	025b      	lsls	r3, r3, #9
 800477c:	429a      	cmp	r2, r3
 800477e:	d10a      	bne.n	8004796 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	4818      	ldr	r0, [pc, #96]	@ (80047e4 <SystemCoreClockUpdate+0x104>)
 8004784:	f7fb fcc0 	bl	8000108 <__udivsi3>
 8004788:	0003      	movs	r3, r0
 800478a:	001a      	movs	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	435a      	muls	r2, r3
 8004790:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 8004792:	601a      	str	r2, [r3, #0]
      break;
 8004794:	e00e      	b.n	80047b4 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	4811      	ldr	r0, [pc, #68]	@ (80047e0 <SystemCoreClockUpdate+0x100>)
 800479a:	f7fb fcb5 	bl	8000108 <__udivsi3>
 800479e:	0003      	movs	r3, r0
 80047a0:	001a      	movs	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	435a      	muls	r2, r3
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 80047a8:	601a      	str	r2, [r3, #0]
      break;
 80047aa:	e003      	b.n	80047b4 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <SystemCoreClockUpdate+0x100>)
 80047b0:	601a      	str	r2, [r3, #0]
      break;
 80047b2:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <SystemCoreClockUpdate+0xf8>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	220f      	movs	r2, #15
 80047bc:	4013      	ands	r3, r2
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <SystemCoreClockUpdate+0x108>)
 80047c0:	5cd3      	ldrb	r3, [r2, r3]
 80047c2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	40da      	lsrs	r2, r3
 80047cc:	4b03      	ldr	r3, [pc, #12]	@ (80047dc <SystemCoreClockUpdate+0xfc>)
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	46c0      	nop			@ (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b004      	add	sp, #16
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	20000014 	.word	0x20000014
 80047e0:	007a1200 	.word	0x007a1200
 80047e4:	02dc6c00 	.word	0x02dc6c00
 80047e8:	08004f10 	.word	0x08004f10

080047ec <memset>:
 80047ec:	0003      	movs	r3, r0
 80047ee:	1882      	adds	r2, r0, r2
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	2600      	movs	r6, #0
 8004800:	4c0c      	ldr	r4, [pc, #48]	@ (8004834 <__libc_init_array+0x38>)
 8004802:	4d0d      	ldr	r5, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	2600      	movs	r6, #0
 800480e:	f000 f823 	bl	8004858 <_init>
 8004812:	4c0a      	ldr	r4, [pc, #40]	@ (800483c <__libc_init_array+0x40>)
 8004814:	4d0a      	ldr	r5, [pc, #40]	@ (8004840 <__libc_init_array+0x44>)
 8004816:	1b64      	subs	r4, r4, r5
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	00b3      	lsls	r3, r6, #2
 8004822:	58eb      	ldr	r3, [r5, r3]
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	00b3      	lsls	r3, r6, #2
 800482c:	58eb      	ldr	r3, [r5, r3]
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08004f20 	.word	0x08004f20
 8004838:	08004f20 	.word	0x08004f20
 800483c:	08004f24 	.word	0x08004f24
 8004840:	08004f20 	.word	0x08004f20

08004844 <memcpy>:
 8004844:	2300      	movs	r3, #0
 8004846:	b510      	push	{r4, lr}
 8004848:	429a      	cmp	r2, r3
 800484a:	d100      	bne.n	800484e <memcpy+0xa>
 800484c:	bd10      	pop	{r4, pc}
 800484e:	5ccc      	ldrb	r4, [r1, r3]
 8004850:	54c4      	strb	r4, [r0, r3]
 8004852:	3301      	adds	r3, #1
 8004854:	e7f8      	b.n	8004848 <memcpy+0x4>
	...

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
