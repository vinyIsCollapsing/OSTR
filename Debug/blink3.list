
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08005b30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e0c  20000018  08005b48  00007018  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002e24  08005b48  00007e24  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000811e  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019db  00000000  00000000  0000f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008e0  00000000  00000000  00010b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006b4  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001ed7  00000000  00000000  00011ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b416  00000000  00000000  000139ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00074977  00000000  00000000  0001edc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00093738  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f0c  00000000  00000000  0009377c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00095688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080053ac 	.word	0x080053ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080053ac 	.word	0x080053ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}

0800032e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <xQueueGenericReset+0x1e>
 8000346:	b672      	cpsid	i
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e7fd      	b.n	8000348 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <xQueueGenericReset+0x26>
 8000352:	e06a      	b.n	800042a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000358:	2b00      	cmp	r3, #0
 800035a:	d066      	beq.n	800042a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	2400      	movs	r4, #0
 8000366:	0c15      	lsrs	r5, r2, #16
 8000368:	0c19      	lsrs	r1, r3, #16
 800036a:	b2a8      	uxth	r0, r5
 800036c:	2800      	cmp	r0, #0
 800036e:	d104      	bne.n	800037a <xQueueGenericReset+0x4c>
 8000370:	b288      	uxth	r0, r1
 8000372:	2800      	cmp	r0, #0
 8000374:	d013      	beq.n	800039e <xQueueGenericReset+0x70>
 8000376:	1c10      	adds	r0, r2, #0
 8000378:	e004      	b.n	8000384 <xQueueGenericReset+0x56>
 800037a:	b289      	uxth	r1, r1
 800037c:	2900      	cmp	r1, #0
 800037e:	d10d      	bne.n	800039c <xQueueGenericReset+0x6e>
 8000380:	1c29      	adds	r1, r5, #0
 8000382:	1c18      	adds	r0, r3, #0
 8000384:	b292      	uxth	r2, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	435a      	muls	r2, r3
 800038a:	b283      	uxth	r3, r0
 800038c:	b289      	uxth	r1, r1
 800038e:	434b      	muls	r3, r1
 8000390:	0c12      	lsrs	r2, r2, #16
 8000392:	189b      	adds	r3, r3, r2
 8000394:	141b      	asrs	r3, r3, #16
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <xQueueGenericReset+0x70>
 800039c:	2401      	movs	r4, #1
 800039e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003a0:	d143      	bne.n	800042a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80003a2:	f002 fb35 	bl	8002a10 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	434b      	muls	r3, r1
 80003b4:	18d2      	adds	r2, r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	434b      	muls	r3, r1
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2244      	movs	r2, #68	@ 0x44
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2245      	movs	r2, #69	@ 0x45
 80003ea:	21ff      	movs	r1, #255	@ 0xff
 80003ec:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10d      	bne.n	8000410 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3310      	adds	r3, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fcdf 	bl	8001dc4 <xTaskRemoveFromEventList>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d00c      	beq.n	8000424 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800040a:	f002 faf1 	bl	80029f0 <vPortYield>
 800040e:	e009      	b.n	8000424 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3310      	adds	r3, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff03 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3324      	adds	r3, #36	@ 0x24
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000424:	f002 fb06 	bl	8002a34 <vPortExitCritical>
 8000428:	e001      	b.n	800042e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <xQueueGenericReset+0x10c>
 8000434:	b672      	cpsid	i
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}

08000444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	b08b      	sub	sp, #44	@ 0x2c
 8000448:	af02      	add	r7, sp, #8
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d065      	beq.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045c:	2000      	movs	r0, #0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0c19      	lsrs	r1, r3, #16
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c1e      	adds	r6, r3, #0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0c1b      	lsrs	r3, r3, #16
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	1c15      	adds	r5, r2, #0
 800046e:	b28a      	uxth	r2, r1
 8000470:	2a00      	cmp	r2, #0
 8000472:	d105      	bne.n	8000480 <xQueueGenericCreate+0x3c>
 8000474:	b29a      	uxth	r2, r3
 8000476:	2a00      	cmp	r2, #0
 8000478:	d013      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	1c34      	adds	r4, r6, #0
 800047e:	e003      	b.n	8000488 <xQueueGenericCreate+0x44>
 8000480:	b29b      	uxth	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10c      	bne.n	80004a0 <xQueueGenericCreate+0x5c>
 8000486:	1c2c      	adds	r4, r5, #0
 8000488:	b2b3      	uxth	r3, r6
 800048a:	b2aa      	uxth	r2, r5
 800048c:	435a      	muls	r2, r3
 800048e:	b2a3      	uxth	r3, r4
 8000490:	b289      	uxth	r1, r1
 8000492:	434b      	muls	r3, r1
 8000494:	0c12      	lsrs	r2, r2, #16
 8000496:	189b      	adds	r3, r3, r2
 8000498:	141b      	asrs	r3, r3, #16
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 80004a0:	2001      	movs	r0, #1
 80004a2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a4:	d140      	bne.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004ac:	3351      	adds	r3, #81	@ 0x51
 80004ae:	d83b      	bhi.n	8000528 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4353      	muls	r3, r2
 80004b6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3350      	adds	r3, #80	@ 0x50
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 fb3f 	bl	8002b40 <pvPortMalloc>
 80004c2:	0003      	movs	r3, r0
 80004c4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00f      	beq.n	80004ec <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3350      	adds	r3, #80	@ 0x50
 80004d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781c      	ldrb	r4, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f000 f82f 	bl	8000548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004ea:	e023      	b.n	8000534 <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 80004ec:	f002 fc7e 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80004f0:	0003      	movs	r3, r0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fbbc 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80004f8:	0003      	movs	r3, r0
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <xQueueGenericCreate+0xfc>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d015      	beq.n	8000534 <xQueueGenericCreate+0xf0>
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <xQueueGenericCreate+0x100>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	3340      	adds	r3, #64	@ 0x40
 8000512:	b2db      	uxtb	r3, r3
 8000514:	0018      	movs	r0, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <xQueueGenericCreate+0x100>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f003 f941 	bl	80037a8 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8000526:	e005      	b.n	8000534 <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <xQueueGenericCreate+0xf2>
 800052e:	b672      	cpsid	i
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 8000534:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000536:	69fb      	ldr	r3, [r7, #28]
    }
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	@ 0x24
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	200019c8 	.word	0x200019c8
 8000544:	20000008 	.word	0x20000008

08000548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	001a      	movs	r2, r3
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff fed5 	bl	800032e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	1cfa      	adds	r2, r7, #3
 8000588:	214c      	movs	r1, #76	@ 0x4c
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fb52 	bl	8002c3a <prvTraceGetQueueType>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fc2c 	bl	8003dfc <prvTraceGetObjectHandle>
 80005a4:	0003      	movs	r3, r0
 80005a6:	001a      	movs	r2, r3
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fbc0 	bl	8002d32 <prvTraceSetQueueNumberLow16>
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <prvInitialiseNewQueue+0x140>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fbd3 	bl	8002d66 <prvTraceSetQueueNumberHigh16>
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fb39 	bl	8002c3a <prvTraceGetQueueType>
 80005c8:	0003      	movs	r3, r0
 80005ca:	001a      	movs	r2, r3
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 80005ce:	5c9c      	ldrb	r4, [r3, r2]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fb90 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 80005d8:	0003      	movs	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	0019      	movs	r1, r3
 80005de:	0020      	movs	r0, r4
 80005e0:	f003 fcbc 	bl	8003f5c <prvMarkObjectAsUsed>
 80005e4:	f002 fc02 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80005e8:	0003      	movs	r3, r0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fb40 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <prvInitialiseNewQueue+0x144>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4013      	ands	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d029      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fb86 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <prvInitialiseNewQueue+0x144>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4013      	ands	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01d      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fb0d 	bl	8002c3a <prvTraceGetQueueType>
 8000620:	0003      	movs	r3, r0
 8000622:	001a      	movs	r2, r3
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000626:	5c9b      	ldrb	r3, [r3, r2]
 8000628:	3318      	adds	r3, #24
 800062a:	b2db      	uxtb	r3, r3
 800062c:	001d      	movs	r5, r3
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fb02 	bl	8002c3a <prvTraceGetQueueType>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800063c:	5c9c      	ldrb	r4, [r3, r2]
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fb59 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000646:	0003      	movs	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	001a      	movs	r2, r3
 800064c:	0021      	movs	r1, r4
 800064e:	0028      	movs	r0, r5
 8000650:	f003 f8aa 	bl	80037a8 <prvTraceStoreKernelCall>
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	0018      	movs	r0, r3
 8000658:	f002 faef 	bl	8002c3a <prvTraceGetQueueType>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000662:	5c9c      	ldrb	r4, [r3, r2]
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fb46 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 800066c:	0003      	movs	r3, r0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	0020      	movs	r0, r4
 8000676:	f003 fad5 	bl	8003c24 <prvTraceSetObjectState>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000008 	.word	0x20000008
 8000688:	200019ca 	.word	0x200019ca
 800068c:	200019c8 	.word	0x200019c8

08000690 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <xQueueGenericSend+0x22>
 80006ac:	b672      	cpsid	i
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	e7fd      	b.n	80006ae <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d103      	bne.n	80006c0 <xQueueGenericSend+0x30>
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <xQueueGenericSend+0x34>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <xQueueGenericSend+0x36>
 80006c4:	2300      	movs	r3, #0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <xQueueGenericSend+0x40>
 80006ca:	b672      	cpsid	i
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	e7fd      	b.n	80006cc <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d103      	bne.n	80006de <xQueueGenericSend+0x4e>
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d101      	bne.n	80006e2 <xQueueGenericSend+0x52>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <xQueueGenericSend+0x54>
 80006e2:	2300      	movs	r3, #0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <xQueueGenericSend+0x5e>
 80006e8:	b672      	cpsid	i
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	e7fd      	b.n	80006ea <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006ee:	f001 fd53 	bl	8002198 <xTaskGetSchedulerState>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d102      	bne.n	80006fc <xQueueGenericSend+0x6c>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <xQueueGenericSend+0x70>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <xQueueGenericSend+0x72>
 8000700:	2300      	movs	r3, #0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <xQueueGenericSend+0x7c>
 8000706:	b672      	cpsid	i
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	e7fd      	b.n	8000708 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800070c:	f002 f980 	bl	8002a10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000718:	429a      	cmp	r2, r3
 800071a:	d303      	bcc.n	8000724 <xQueueGenericSend+0x94>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d000      	beq.n	8000724 <xQueueGenericSend+0x94>
 8000722:	e07f      	b.n	8000824 <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 8000724:	f002 fb62 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f002 faa0 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	4bc7      	ldr	r3, [pc, #796]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4013      	ands	r3, r2
 800073a:	b29b      	uxth	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d02e      	beq.n	800079e <xQueueGenericSend+0x10e>
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	0018      	movs	r0, r3
 8000744:	f002 fae6 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000748:	0003      	movs	r3, r0
 800074a:	001a      	movs	r2, r3
 800074c:	4bc1      	ldr	r3, [pc, #772]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	4013      	ands	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d022      	beq.n	800079e <xQueueGenericSend+0x10e>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10b      	bne.n	8000776 <xQueueGenericSend+0xe6>
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fa6a 	bl	8002c3a <prvTraceGetQueueType>
 8000766:	0003      	movs	r3, r0
 8000768:	001a      	movs	r2, r3
 800076a:	4bbb      	ldr	r3, [pc, #748]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 800076c:	5c9b      	ldrb	r3, [r3, r2]
 800076e:	3320      	adds	r3, #32
 8000770:	b2db      	uxtb	r3, r3
 8000772:	001d      	movs	r5, r3
 8000774:	e000      	b.n	8000778 <xQueueGenericSend+0xe8>
 8000776:	2525      	movs	r5, #37	@ 0x25
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fa5d 	bl	8002c3a <prvTraceGetQueueType>
 8000780:	0003      	movs	r3, r0
 8000782:	001a      	movs	r2, r3
 8000784:	4bb4      	ldr	r3, [pc, #720]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000786:	5c9c      	ldrb	r4, [r3, r2]
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fab4 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000790:	0003      	movs	r3, r0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	001a      	movs	r2, r3
 8000796:	0021      	movs	r1, r4
 8000798:	0028      	movs	r0, r5
 800079a:	f003 f805 	bl	80037a8 <prvTraceStoreKernelCall>
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fa4a 	bl	8002c3a <prvTraceGetQueueType>
 80007a6:	0003      	movs	r3, r0
 80007a8:	001a      	movs	r2, r3
 80007aa:	4bab      	ldr	r3, [pc, #684]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 80007ac:	5c9c      	ldrb	r4, [r3, r2]
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 faa1 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 80007b6:	0003      	movs	r3, r0
 80007b8:	b2dd      	uxtb	r5, r3
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fa3c 	bl	8002c3a <prvTraceGetQueueType>
 80007c2:	0003      	movs	r3, r0
 80007c4:	001a      	movs	r2, r3
 80007c6:	4ba4      	ldr	r3, [pc, #656]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 80007c8:	5c9b      	ldrb	r3, [r3, r2]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d005      	beq.n	80007da <xQueueGenericSend+0x14a>
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	e000      	b.n	80007dc <xQueueGenericSend+0x14c>
 80007da:	2300      	movs	r3, #0
 80007dc:	001a      	movs	r2, r3
 80007de:	0029      	movs	r1, r5
 80007e0:	0020      	movs	r0, r4
 80007e2:	f003 fa1f 	bl	8003c24 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fb44 	bl	8000e7a <prvCopyDataToQueue>
 80007f2:	0003      	movs	r3, r0
 80007f4:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	3324      	adds	r3, #36	@ 0x24
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fade 	bl	8001dc4 <xTaskRemoveFromEventList>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d007      	beq.n	800081c <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800080c:	f002 f8f0 	bl	80029f0 <vPortYield>
 8000810:	e004      	b.n	800081c <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000818:	f002 f8ea 	bl	80029f0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800081c:	f002 f90a 	bl	8002a34 <vPortExitCritical>
                return pdPASS;
 8000820:	2301      	movs	r3, #1
 8000822:	e113      	b.n	8000a4c <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d140      	bne.n	80008ac <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800082a:	f002 f903 	bl	8002a34 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800082e:	f002 fadd 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000832:	0003      	movs	r3, r0
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fa1b 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 800083a:	0003      	movs	r3, r0
 800083c:	001a      	movs	r2, r3
 800083e:	4b85      	ldr	r3, [pc, #532]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	4013      	ands	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d02e      	beq.n	80008a8 <xQueueGenericSend+0x218>
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	0018      	movs	r0, r3
 800084e:	f002 fa61 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	4b7f      	ldr	r3, [pc, #508]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4013      	ands	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d022      	beq.n	80008a8 <xQueueGenericSend+0x218>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <xQueueGenericSend+0x1f0>
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f9e5 	bl	8002c3a <prvTraceGetQueueType>
 8000870:	0003      	movs	r3, r0
 8000872:	001a      	movs	r2, r3
 8000874:	4b78      	ldr	r3, [pc, #480]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000876:	5c9b      	ldrb	r3, [r3, r2]
 8000878:	3348      	adds	r3, #72	@ 0x48
 800087a:	b2db      	uxtb	r3, r3
 800087c:	001d      	movs	r5, r3
 800087e:	e000      	b.n	8000882 <xQueueGenericSend+0x1f2>
 8000880:	254d      	movs	r5, #77	@ 0x4d
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	0018      	movs	r0, r3
 8000886:	f002 f9d8 	bl	8002c3a <prvTraceGetQueueType>
 800088a:	0003      	movs	r3, r0
 800088c:	001a      	movs	r2, r3
 800088e:	4b72      	ldr	r3, [pc, #456]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000890:	5c9c      	ldrb	r4, [r3, r2]
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	0018      	movs	r0, r3
 8000896:	f002 fa2f 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 800089a:	0003      	movs	r3, r0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	001a      	movs	r2, r3
 80008a0:	0021      	movs	r1, r4
 80008a2:	0028      	movs	r0, r5
 80008a4:	f002 ff80 	bl	80037a8 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e0cf      	b.n	8000a4c <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d106      	bne.n	80008c0 <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008b2:	2314      	movs	r3, #20
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fb66 	bl	8001f88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008bc:	2301      	movs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008c0:	f002 f8b8 	bl	8002a34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008c4:	f000 ff28 	bl	8001718 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008c8:	f002 f8a2 	bl	8002a10 <vPortEnterCritical>
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	2244      	movs	r2, #68	@ 0x44
 80008d0:	5c9b      	ldrb	r3, [r3, r2]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	d103      	bne.n	80008e0 <xQueueGenericSend+0x250>
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	2244      	movs	r2, #68	@ 0x44
 80008dc:	2100      	movs	r1, #0
 80008de:	5499      	strb	r1, [r3, r2]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	2245      	movs	r2, #69	@ 0x45
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	d103      	bne.n	80008f4 <xQueueGenericSend+0x264>
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	2245      	movs	r2, #69	@ 0x45
 80008f0:	2100      	movs	r1, #0
 80008f2:	5499      	strb	r1, [r3, r2]
 80008f4:	f002 f89e 	bl	8002a34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008f8:	1d3a      	adds	r2, r7, #4
 80008fa:	2314      	movs	r3, #20
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fb55 	bl	8001fb0 <xTaskCheckForTimeOut>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d15c      	bne.n	80009c4 <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fbb9 	bl	8001084 <prvIsQueueFull>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d04f      	beq.n	80009b6 <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000916:	f002 fa69 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 800091a:	0003      	movs	r3, r0
 800091c:	0018      	movs	r0, r3
 800091e:	f002 f9a7 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4013      	ands	r3, r2
 800092c:	b29b      	uxth	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d02e      	beq.n	8000990 <xQueueGenericSend+0x300>
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	0018      	movs	r0, r3
 8000936:	f002 f9ed 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4013      	ands	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d022      	beq.n	8000990 <xQueueGenericSend+0x300>
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10b      	bne.n	8000968 <xQueueGenericSend+0x2d8>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	0018      	movs	r0, r3
 8000954:	f002 f971 	bl	8002c3a <prvTraceGetQueueType>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 800095e:	5c9b      	ldrb	r3, [r3, r2]
 8000960:	3370      	adds	r3, #112	@ 0x70
 8000962:	b2db      	uxtb	r3, r3
 8000964:	001d      	movs	r5, r3
 8000966:	e000      	b.n	800096a <xQueueGenericSend+0x2da>
 8000968:	2575      	movs	r5, #117	@ 0x75
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	0018      	movs	r0, r3
 800096e:	f002 f964 	bl	8002c3a <prvTraceGetQueueType>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000978:	5c9c      	ldrb	r4, [r3, r2]
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	0018      	movs	r0, r3
 800097e:	f002 f9bb 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000982:	0003      	movs	r3, r0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	001a      	movs	r2, r3
 8000988:	0021      	movs	r1, r4
 800098a:	0028      	movs	r0, r5
 800098c:	f002 ff0c 	bl	80037a8 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	3310      	adds	r3, #16
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f977 	bl	8001c8c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fafb 	bl	8000f9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009a6:	f000 fec3 	bl	8001730 <xTaskResumeAll>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d000      	beq.n	80009b0 <xQueueGenericSend+0x320>
 80009ae:	e6ad      	b.n	800070c <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 80009b0:	f002 f81e 	bl	80029f0 <vPortYield>
 80009b4:	e6aa      	b.n	800070c <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 faef 	bl	8000f9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009be:	f000 feb7 	bl	8001730 <xTaskResumeAll>
 80009c2:	e6a3      	b.n	800070c <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fae8 	bl	8000f9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009cc:	f000 feb0 	bl	8001730 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80009d0:	f002 fa0c 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80009d4:	0003      	movs	r3, r0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 f94a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80009dc:	0003      	movs	r3, r0
 80009de:	001a      	movs	r2, r3
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4013      	ands	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02e      	beq.n	8000a4a <xQueueGenericSend+0x3ba>
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 f990 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 80009f4:	0003      	movs	r3, r0
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4013      	ands	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d022      	beq.n	8000a4a <xQueueGenericSend+0x3ba>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10b      	bne.n	8000a22 <xQueueGenericSend+0x392>
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 f914 	bl	8002c3a <prvTraceGetQueueType>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000a18:	5c9b      	ldrb	r3, [r3, r2]
 8000a1a:	3348      	adds	r3, #72	@ 0x48
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	001d      	movs	r5, r3
 8000a20:	e000      	b.n	8000a24 <xQueueGenericSend+0x394>
 8000a22:	254d      	movs	r5, #77	@ 0x4d
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 f907 	bl	8002c3a <prvTraceGetQueueType>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	001a      	movs	r2, r3
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000a32:	5c9c      	ldrb	r4, [r3, r2]
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 f95e 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	001a      	movs	r2, r3
 8000a42:	0021      	movs	r1, r4
 8000a44:	0028      	movs	r0, r5
 8000a46:	f002 feaf 	bl	80037a8 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8000a4a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00a      	add	sp, #40	@ 0x28
 8000a52:	bdb0      	pop	{r4, r5, r7, pc}
 8000a54:	200019c8 	.word	0x200019c8
 8000a58:	20000008 	.word	0x20000008

08000a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <xQueueReceive+0x20>
 8000a76:	b672      	cpsid	i
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <xQueueReceive+0x2e>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <xQueueReceive+0x32>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <xQueueReceive+0x34>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <xQueueReceive+0x3e>
 8000a94:	b672      	cpsid	i
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	e7fd      	b.n	8000a96 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a9a:	f001 fb7d 	bl	8002198 <xTaskGetSchedulerState>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d102      	bne.n	8000aa8 <xQueueReceive+0x4c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <xQueueReceive+0x50>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <xQueueReceive+0x52>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <xQueueReceive+0x5c>
 8000ab2:	b672      	cpsid	i
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ab8:	f001 ffaa 	bl	8002a10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <xQueueReceive+0x6e>
 8000ac8:	e07d      	b.n	8000bc6 <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fa3d 	bl	8000f50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000ad6:	f002 f989 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000ada:	0003      	movs	r3, r0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 f8c7 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4bd2      	ldr	r3, [pc, #840]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4013      	ands	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d029      	beq.n	8000b46 <xQueueReceive+0xea>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 f90d 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000afa:	0003      	movs	r3, r0
 8000afc:	001a      	movs	r2, r3
 8000afe:	4bcc      	ldr	r3, [pc, #816]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01d      	beq.n	8000b46 <xQueueReceive+0xea>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f894 	bl	8002c3a <prvTraceGetQueueType>
 8000b12:	0003      	movs	r3, r0
 8000b14:	001a      	movs	r2, r3
 8000b16:	4bc7      	ldr	r3, [pc, #796]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b18:	5c9b      	ldrb	r3, [r3, r2]
 8000b1a:	3328      	adds	r3, #40	@ 0x28
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	001d      	movs	r5, r3
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 f889 	bl	8002c3a <prvTraceGetQueueType>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	4bc1      	ldr	r3, [pc, #772]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b2e:	5c9c      	ldrb	r4, [r3, r2]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 f8e0 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	0021      	movs	r1, r4
 8000b40:	0028      	movs	r0, r5
 8000b42:	f002 fe31 	bl	80037a8 <prvTraceStoreKernelCall>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f002 f876 	bl	8002c3a <prvTraceGetQueueType>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	001a      	movs	r2, r3
 8000b52:	4bb8      	ldr	r3, [pc, #736]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b54:	5c9c      	ldrb	r4, [r3, r2]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 f8cd 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	b2dd      	uxtb	r5, r3
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 f868 	bl	8002c3a <prvTraceGetQueueType>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	4bb1      	ldr	r3, [pc, #708]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b70:	5c9b      	ldrb	r3, [r3, r2]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d108      	bne.n	8000b88 <xQueueReceive+0x12c>
 8000b76:	f002 f939 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 f869 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8000b82:	0003      	movs	r3, r0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	e004      	b.n	8000b92 <xQueueReceive+0x136>
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	001a      	movs	r2, r3
 8000b94:	0029      	movs	r1, r5
 8000b96:	0020      	movs	r0, r4
 8000b98:	f003 f844 	bl	8003c24 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	3310      	adds	r3, #16
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 f907 	bl	8001dc4 <xTaskRemoveFromEventList>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bba:	f001 ff19 	bl	80029f0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bbe:	f001 ff39 	bl	8002a34 <vPortExitCritical>
                return pdPASS;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e12f      	b.n	8000e26 <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d13b      	bne.n	8000c44 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bcc:	f001 ff32 	bl	8002a34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bd0:	f002 f90c 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 f84a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	001a      	movs	r2, r3
 8000be0:	4b93      	ldr	r3, [pc, #588]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	4013      	ands	r3, r2
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d029      	beq.n	8000c40 <xQueueReceive+0x1e4>
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 f890 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01d      	beq.n	8000c40 <xQueueReceive+0x1e4>
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 f817 	bl	8002c3a <prvTraceGetQueueType>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4b88      	ldr	r3, [pc, #544]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000c12:	5c9b      	ldrb	r3, [r3, r2]
 8000c14:	3350      	adds	r3, #80	@ 0x50
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	001d      	movs	r5, r3
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 f80c 	bl	8002c3a <prvTraceGetQueueType>
 8000c22:	0003      	movs	r3, r0
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b83      	ldr	r3, [pc, #524]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000c28:	5c9c      	ldrb	r4, [r3, r2]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 f863 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000c32:	0003      	movs	r3, r0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	001a      	movs	r2, r3
 8000c38:	0021      	movs	r1, r4
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	f002 fdb4 	bl	80037a8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e0f0      	b.n	8000e26 <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 f99a 	bl	8001f88 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c58:	f001 feec 	bl	8002a34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c5c:	f000 fd5c 	bl	8001718 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c60:	f001 fed6 	bl	8002a10 <vPortEnterCritical>
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2244      	movs	r2, #68	@ 0x44
 8000c68:	5c9b      	ldrb	r3, [r3, r2]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	d103      	bne.n	8000c78 <xQueueReceive+0x21c>
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	2244      	movs	r2, #68	@ 0x44
 8000c74:	2100      	movs	r1, #0
 8000c76:	5499      	strb	r1, [r3, r2]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2245      	movs	r2, #69	@ 0x45
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	d103      	bne.n	8000c8c <xQueueReceive+0x230>
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2245      	movs	r2, #69	@ 0x45
 8000c88:	2100      	movs	r1, #0
 8000c8a:	5499      	strb	r1, [r3, r2]
 8000c8c:	f001 fed2 	bl	8002a34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	2314      	movs	r3, #20
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 f989 	bl	8001fb0 <xTaskCheckForTimeOut>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d000      	beq.n	8000ca4 <xQueueReceive+0x248>
 8000ca2:	e07a      	b.n	8000d9a <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f9d6 	bl	8001058 <prvIsQueueEmpty>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d06d      	beq.n	8000d8c <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000cb0:	f002 f89c 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 ffda 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d029      	beq.n	8000d20 <xQueueReceive+0x2c4>
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 f820 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b55      	ldr	r3, [pc, #340]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01d      	beq.n	8000d20 <xQueueReceive+0x2c4>
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 ffa7 	bl	8002c3a <prvTraceGetQueueType>
 8000cec:	0003      	movs	r3, r0
 8000cee:	001a      	movs	r2, r3
 8000cf0:	4b50      	ldr	r3, [pc, #320]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000cf2:	5c9b      	ldrb	r3, [r3, r2]
 8000cf4:	3368      	adds	r3, #104	@ 0x68
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	001d      	movs	r5, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 ff9c 	bl	8002c3a <prvTraceGetQueueType>
 8000d02:	0003      	movs	r3, r0
 8000d04:	001a      	movs	r2, r3
 8000d06:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000d08:	5c9c      	ldrb	r4, [r3, r2]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 fff3 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000d12:	0003      	movs	r3, r0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	001a      	movs	r2, r3
 8000d18:	0021      	movs	r1, r4
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	f002 fd44 	bl	80037a8 <prvTraceStoreKernelCall>
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 ff89 	bl	8002c3a <prvTraceGetQueueType>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000d2e:	5c9b      	ldrb	r3, [r3, r2]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d018      	beq.n	8000d66 <xQueueReceive+0x30a>
 8000d34:	f002 f85a 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 ff98 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <xQueueReceive+0x30a>
 8000d50:	f002 f84c 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000d54:	0003      	movs	r3, r0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 ff7c 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 ffb7 	bl	8003cd4 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3324      	adds	r3, #36	@ 0x24
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 ff8c 	bl	8001c8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f910 	bl	8000f9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d7c:	f000 fcd8 	bl	8001730 <xTaskResumeAll>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d000      	beq.n	8000d86 <xQueueReceive+0x32a>
 8000d84:	e698      	b.n	8000ab8 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8000d86:	f001 fe33 	bl	80029f0 <vPortYield>
 8000d8a:	e695      	b.n	8000ab8 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f904 	bl	8000f9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d94:	f000 fccc 	bl	8001730 <xTaskResumeAll>
 8000d98:	e68e      	b.n	8000ab8 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 f8fd 	bl	8000f9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000da2:	f000 fcc5 	bl	8001730 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f955 	bl	8001058 <prvIsQueueEmpty>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d100      	bne.n	8000db4 <xQueueReceive+0x358>
 8000db2:	e681      	b.n	8000ab8 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000db4:	f002 f81a 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8000db8:	0003      	movs	r3, r0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 ff58 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d029      	beq.n	8000e24 <xQueueReceive+0x3c8>
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f001 ff9e 	bl	8002d14 <prvTraceGetQueueNumberHigh16>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	001a      	movs	r2, r3
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	4013      	ands	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01d      	beq.n	8000e24 <xQueueReceive+0x3c8>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 ff25 	bl	8002c3a <prvTraceGetQueueType>
 8000df0:	0003      	movs	r3, r0
 8000df2:	001a      	movs	r2, r3
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	3350      	adds	r3, #80	@ 0x50
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	001d      	movs	r5, r3
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 ff1a 	bl	8002c3a <prvTraceGetQueueType>
 8000e06:	0003      	movs	r3, r0
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000e0c:	5c9c      	ldrb	r4, [r3, r2]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 ff71 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8000e16:	0003      	movs	r3, r0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	0028      	movs	r0, r5
 8000e20:	f002 fcc2 	bl	80037a8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8000e24:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b00a      	add	sp, #40	@ 0x28
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	200019c8 	.word	0x200019c8
 8000e34:	20000008 	.word	0x20000008

08000e38 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	224c      	movs	r2, #76	@ 0x4c
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
    }
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10e      	bne.n	8000eb6 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d14e      	bne.n	8000f3e <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 f993 	bl	80021d0 <xTaskPriorityDisinherit>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	e043      	b.n	8000f3e <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d119      	bne.n	8000ef0 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6858      	ldr	r0, [r3, #4]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	f004 fa66 	bl	8005398 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	18d2      	adds	r2, r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d32b      	bcc.n	8000f3e <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	e026      	b.n	8000f3e <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68d8      	ldr	r0, [r3, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	0019      	movs	r1, r3
 8000efc:	f004 fa4c 	bl	8005398 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	425b      	negs	r3, r3
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	425b      	negs	r3, r3
 8000f26:	18d2      	adds	r2, r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d105      	bne.n	8000f3e <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f46:	697b      	ldr	r3, [r7, #20]
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d018      	beq.n	8000f94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	18d2      	adds	r2, r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d303      	bcc.n	8000f84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68d9      	ldr	r1, [r3, #12]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f004 fa02 	bl	8005398 <memcpy>
    }
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fa4:	f001 fd34 	bl	8002a10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fa8:	230f      	movs	r3, #15
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	2145      	movs	r1, #69	@ 0x45
 8000fb0:	5c52      	ldrb	r2, [r2, r1]
 8000fb2:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fb4:	e013      	b.n	8000fde <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d016      	beq.n	8000fec <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3324      	adds	r3, #36	@ 0x24
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 fefe 	bl	8001dc4 <xTaskRemoveFromEventList>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d001      	beq.n	8000fd0 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000fcc:	f001 f83e 	bl	800204c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dce5      	bgt.n	8000fb6 <prvUnlockQueue+0x1a>
 8000fea:	e000      	b.n	8000fee <prvUnlockQueue+0x52>
                    break;
 8000fec:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2245      	movs	r2, #69	@ 0x45
 8000ff2:	21ff      	movs	r1, #255	@ 0xff
 8000ff4:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8000ff6:	f001 fd1d 	bl	8002a34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ffa:	f001 fd09 	bl	8002a10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ffe:	230e      	movs	r3, #14
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	2144      	movs	r1, #68	@ 0x44
 8001006:	5c52      	ldrb	r2, [r2, r1]
 8001008:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800100a:	e013      	b.n	8001034 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d016      	beq.n	8001042 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3310      	adds	r3, #16
 8001018:	0018      	movs	r0, r3
 800101a:	f000 fed3 	bl	8001dc4 <xTaskRemoveFromEventList>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001022:	f001 f813 	bl	800204c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001026:	210e      	movs	r1, #14
 8001028:	187b      	adds	r3, r7, r1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	187b      	adds	r3, r7, r1
 8001032:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001034:	230e      	movs	r3, #14
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	dce5      	bgt.n	800100c <prvUnlockQueue+0x70>
 8001040:	e000      	b.n	8001044 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001042:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2244      	movs	r2, #68	@ 0x44
 8001048:	21ff      	movs	r1, #255	@ 0xff
 800104a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800104c:	f001 fcf2 	bl	8002a34 <vPortExitCritical>
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}

08001058 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001060:	f001 fcd6 	bl	8002a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800106c:	2301      	movs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e001      	b.n	8001076 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001076:	f001 fcdd 	bl	8002a34 <vPortExitCritical>

    return xReturn;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}

08001084 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800108c:	f001 fcc0 	bl	8002a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001098:	429a      	cmp	r2, r3
 800109a:	d102      	bne.n	80010a2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800109c:	2301      	movs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e001      	b.n	80010a6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010a6:	f001 fcc5 	bl	8002a34 <vPortExitCritical>

    return xReturn;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <vQueueAddToRegistry+0x1a>
 80010c8:	b672      	cpsid	i
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	e7fd      	b.n	80010ca <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d025      	beq.n	8001120 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e01f      	b.n	800111a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80010da:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <vQueueAddToRegistry+0xac>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	3304      	adds	r3, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d105      	bne.n	80010f8 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <vQueueAddToRegistry+0xac>)
 80010f2:	18d3      	adds	r3, r2, r3
 80010f4:	60bb      	str	r3, [r7, #8]
                    break;
 80010f6:	e013      	b.n	8001120 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <vQueueAddToRegistry+0x60>
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <vQueueAddToRegistry+0xac>)
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	00d2      	lsls	r2, r2, #3
 8001104:	58d3      	ldr	r3, [r2, r3]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d104      	bne.n	8001114 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	00da      	lsls	r2, r3, #3
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <vQueueAddToRegistry+0xac>)
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d9dc      	bls.n	80010da <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d018      	beq.n	8001158 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fd80 	bl	8002c3a <prvTraceGetQueueType>
 800113a:	0003      	movs	r3, r0
 800113c:	001a      	movs	r2, r3
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <vQueueAddToRegistry+0xb0>)
 8001140:	5c9c      	ldrb	r4, [r3, r2]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f001 fdd7 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 800114a:	0003      	movs	r3, r0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	0019      	movs	r1, r3
 8001152:	0020      	movs	r0, r4
 8001154:	f002 ff4a 	bl	8003fec <prvTraceSetObjectName>
        }
    }
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b005      	add	sp, #20
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	20000034 	.word	0x20000034
 8001164:	20000008 	.word	0x20000008

08001168 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001178:	f001 fc4a 	bl	8002a10 <vPortEnterCritical>
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2244      	movs	r2, #68	@ 0x44
 8001180:	5c9b      	ldrb	r3, [r3, r2]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	d103      	bne.n	8001190 <vQueueWaitForMessageRestricted+0x28>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2244      	movs	r2, #68	@ 0x44
 800118c:	2100      	movs	r1, #0
 800118e:	5499      	strb	r1, [r3, r2]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2245      	movs	r2, #69	@ 0x45
 8001194:	5c9b      	ldrb	r3, [r3, r2]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	d103      	bne.n	80011a4 <vQueueWaitForMessageRestricted+0x3c>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2245      	movs	r2, #69	@ 0x45
 80011a0:	2100      	movs	r1, #0
 80011a2:	5499      	strb	r1, [r3, r2]
 80011a4:	f001 fc46 	bl	8002a34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3324      	adds	r3, #36	@ 0x24
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 fd87 	bl	8001ccc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff feeb 	bl	8000f9c <prvUnlockQueue>
    }
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b006      	add	sp, #24
 80011cc:	bd80      	pop	{r7, pc}

080011ce <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011ce:	b590      	push	{r4, r7, lr}
 80011d0:	b08d      	sub	sp, #52	@ 0x34
 80011d2:	af04      	add	r7, sp, #16
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	1dbb      	adds	r3, r7, #6
 80011dc:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fcab 	bl	8002b40 <pvPortMalloc>
 80011ea:	0003      	movs	r3, r0
 80011ec:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d016      	beq.n	8001222 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011f4:	205c      	movs	r0, #92	@ 0x5c
 80011f6:	f001 fca3 	bl	8002b40 <pvPortMalloc>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	225c      	movs	r2, #92	@ 0x5c
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f004 f886 	bl	800531c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	631a      	str	r2, [r3, #48]	@ 0x30
 8001216:	e006      	b.n	8001226 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	0018      	movs	r0, r3
 800121c:	f001 fcf2 	bl	8002c04 <vPortFree>
 8001220:	e001      	b.n	8001226 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	683c      	ldr	r4, [r7, #0]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	9303      	str	r3, [sp, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	0023      	movs	r3, r4
 8001248:	f000 f810 	bl	800126c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f88e 	bl	8001370 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	e002      	b.n	8001260 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800125a:	2301      	movs	r3, #1
 800125c:	425b      	negs	r3, r3
 800125e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001260:	69bb      	ldr	r3, [r7, #24]
    }
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b009      	add	sp, #36	@ 0x24
 8001268:	bd90      	pop	{r4, r7, pc}
	...

0800126c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	001a      	movs	r2, r3
 8001284:	21a5      	movs	r1, #165	@ 0xa5
 8001286:	f004 f849 	bl	800531c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800128a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4936      	ldr	r1, [pc, #216]	@ (800136c <prvInitialiseNewTask+0x100>)
 8001292:	468c      	mov	ip, r1
 8001294:	4463      	add	r3, ip
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2207      	movs	r2, #7
 80012a0:	4393      	bics	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2207      	movs	r2, #7
 80012a8:	4013      	ands	r3, r2
 80012aa:	d002      	beq.n	80012b2 <prvInitialiseNewTask+0x46>
 80012ac:	b672      	cpsid	i
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	e7fd      	b.n	80012ae <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01f      	beq.n	80012f8 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e013      	b.n	80012e6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	18d3      	adds	r3, r2, r3
 80012c4:	7818      	ldrb	r0, [r3, #0]
 80012c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012c8:	2134      	movs	r1, #52	@ 0x34
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	185b      	adds	r3, r3, r1
 80012d0:	1c02      	adds	r2, r0, #0
 80012d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d9e8      	bls.n	80012be <prvInitialiseNewTask+0x52>
 80012ec:	e000      	b.n	80012f0 <prvInitialiseNewTask+0x84>
            {
                break;
 80012ee:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f2:	2243      	movs	r2, #67	@ 0x43
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d902      	bls.n	8001304 <prvInitialiseNewTask+0x98>
 80012fe:	b672      	cpsid	i
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	e7fd      	b.n	8001300 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d901      	bls.n	800130e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800130a:	2304      	movs	r3, #4
 800130c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001316:	6a3a      	ldr	r2, [r7, #32]
 8001318:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800131a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131c:	3304      	adds	r3, #4
 800131e:	0018      	movs	r0, r3
 8001320:	f7fe ff9c 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001326:	3318      	adds	r3, #24
 8001328:	0018      	movs	r0, r3
 800132a:	f7fe ff97 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800132e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001332:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2205      	movs	r2, #5
 8001338:	1ad2      	subs	r2, r2, r3
 800133a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	0018      	movs	r0, r3
 800134c:	f001 fac4 	bl	80028d8 <pxPortInitialiseStack>
 8001350:	0002      	movs	r2, r0
 8001352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001354:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b006      	add	sp, #24
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	3fffffff 	.word	0x3fffffff

08001370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001378:	f001 fb4a 	bl	8002a10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800137c:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <prvAddNewTaskToReadyList+0x200>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	4b7b      	ldr	r3, [pc, #492]	@ (8001570 <prvAddNewTaskToReadyList+0x200>)
 8001384:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001386:	4b7b      	ldr	r3, [pc, #492]	@ (8001574 <prvAddNewTaskToReadyList+0x204>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800138e:	4b79      	ldr	r3, [pc, #484]	@ (8001574 <prvAddNewTaskToReadyList+0x204>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001394:	4b76      	ldr	r3, [pc, #472]	@ (8001570 <prvAddNewTaskToReadyList+0x200>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d110      	bne.n	80013be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800139c:	f000 fe96 	bl	80020cc <prvInitialiseTaskLists>
 80013a0:	e00d      	b.n	80013be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80013a2:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <prvAddNewTaskToReadyList+0x208>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013aa:	4b72      	ldr	r3, [pc, #456]	@ (8001574 <prvAddNewTaskToReadyList+0x204>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d802      	bhi.n	80013be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001574 <prvAddNewTaskToReadyList+0x204>)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013be:	4b6f      	ldr	r3, [pc, #444]	@ (800157c <prvAddNewTaskToReadyList+0x20c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	4b6d      	ldr	r3, [pc, #436]	@ (800157c <prvAddNewTaskToReadyList+0x20c>)
 80013c6:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013c8:	4b6c      	ldr	r3, [pc, #432]	@ (800157c <prvAddNewTaskToReadyList+0x20c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d065      	beq.n	80014a2 <prvAddNewTaskToReadyList+0x132>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d04f      	beq.n	800147c <prvAddNewTaskToReadyList+0x10c>
 80013dc:	2003      	movs	r0, #3
 80013de:	f002 fd0d 	bl	8003dfc <prvTraceGetObjectHandle>
 80013e2:	0003      	movs	r3, r0
 80013e4:	001a      	movs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 fc4f 	bl	8002c8e <prvTraceSetTaskNumberLow16>
 80013f0:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <prvAddNewTaskToReadyList+0x210>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f001 fc62 	bl	8002cc2 <prvTraceSetTaskNumberHigh16>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fc27 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001406:	0003      	movs	r3, r0
 8001408:	b2d9      	uxtb	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3334      	adds	r3, #52	@ 0x34
 800140e:	001a      	movs	r2, r3
 8001410:	2003      	movs	r0, #3
 8001412:	f002 fdeb 	bl	8003fec <prvTraceSetObjectName>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f001 fc1b 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 800141e:	0003      	movs	r3, r0
 8001420:	b2d9      	uxtb	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	b2db      	uxtb	r3, r3
 8001428:	001a      	movs	r2, r3
 800142a:	2003      	movs	r0, #3
 800142c:	f002 fb9e 	bl	8003b6c <prvTraceSetPriorityProperty>
 8001430:	f001 fcdc 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001434:	0003      	movs	r3, r0
 8001436:	0018      	movs	r0, r3
 8001438:	f001 fc1a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 800143c:	0003      	movs	r3, r0
 800143e:	001a      	movs	r2, r3
 8001440:	4b50      	ldr	r3, [pc, #320]	@ (8001584 <prvAddNewTaskToReadyList+0x214>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	4013      	ands	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d02a      	beq.n	80014a2 <prvAddNewTaskToReadyList+0x132>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0018      	movs	r0, r3
 8001450:	f001 fc0e 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001454:	0003      	movs	r3, r0
 8001456:	001a      	movs	r2, r3
 8001458:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <prvAddNewTaskToReadyList+0x214>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4013      	ands	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01e      	beq.n	80014a2 <prvAddNewTaskToReadyList+0x132>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0018      	movs	r0, r3
 8001468:	f001 fbf4 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 800146c:	0003      	movs	r3, r0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	001a      	movs	r2, r3
 8001472:	2103      	movs	r1, #3
 8001474:	201b      	movs	r0, #27
 8001476:	f002 f997 	bl	80037a8 <prvTraceStoreKernelCall>
 800147a:	e012      	b.n	80014a2 <prvAddNewTaskToReadyList+0x132>
 800147c:	f001 fcb6 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001480:	0003      	movs	r3, r0
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fbf4 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001488:	0003      	movs	r3, r0
 800148a:	001a      	movs	r2, r3
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <prvAddNewTaskToReadyList+0x214>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4013      	ands	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <prvAddNewTaskToReadyList+0x132>
 8001498:	2200      	movs	r2, #0
 800149a:	2103      	movs	r1, #3
 800149c:	201b      	movs	r0, #27
 800149e:	f002 f983 	bl	80037a8 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f001 fbe3 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80014aa:	0003      	movs	r3, r0
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <prvAddNewTaskToReadyList+0x214>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	4013      	ands	r3, r2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <prvAddNewTaskToReadyList+0x15c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f001 fbc9 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 80014c2:	0003      	movs	r3, r0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	0018      	movs	r0, r3
 80014c8:	f002 f860 	bl	800358c <prvTraceStoreTaskReady>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <prvAddNewTaskToReadyList+0x218>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d903      	bls.n	80014e0 <prvAddNewTaskToReadyList+0x170>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <prvAddNewTaskToReadyList+0x218>)
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e4:	4929      	ldr	r1, [pc, #164]	@ (800158c <prvAddNewTaskToReadyList+0x21c>)
 80014e6:	0013      	movs	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	18cb      	adds	r3, r1, r3
 80014f0:	3304      	adds	r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	3204      	adds	r2, #4
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	1d1a      	adds	r2, r3, #4
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151a:	0013      	movs	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	189b      	adds	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <prvAddNewTaskToReadyList+0x21c>)
 8001524:	189a      	adds	r2, r3, r2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152e:	4917      	ldr	r1, [pc, #92]	@ (800158c <prvAddNewTaskToReadyList+0x21c>)
 8001530:	0013      	movs	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	189b      	adds	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	585b      	ldr	r3, [r3, r1]
 800153a:	1c58      	adds	r0, r3, #1
 800153c:	4913      	ldr	r1, [pc, #76]	@ (800158c <prvAddNewTaskToReadyList+0x21c>)
 800153e:	0013      	movs	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	189b      	adds	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001548:	f001 fa74 	bl	8002a34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <prvAddNewTaskToReadyList+0x208>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <prvAddNewTaskToReadyList+0x204>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	429a      	cmp	r2, r3
 8001560:	d201      	bcs.n	8001566 <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001562:	f001 fa45 	bl	80029f0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	20000130 	.word	0x20000130
 8001574:	20000084 	.word	0x20000084
 8001578:	2000013c 	.word	0x2000013c
 800157c:	2000014c 	.word	0x2000014c
 8001580:	200019ca 	.word	0x200019ca
 8001584:	200019c8 	.word	0x200019c8
 8001588:	20000138 	.word	0x20000138
 800158c:	20000088 	.word	0x20000088

08001590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d046      	beq.n	8001630 <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80015a2:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <vTaskDelay+0xb4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <vTaskDelay+0x20>
 80015aa:	b672      	cpsid	i
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	e7fd      	b.n	80015ac <vTaskDelay+0x1c>
            vTaskSuspendAll();
 80015b0:	f000 f8b2 	bl	8001718 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <vTaskDelay+0xb8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f001 fb59 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80015be:	0003      	movs	r3, r0
 80015c0:	001a      	movs	r2, r3
 80015c2:	4b22      	ldr	r3, [pc, #136]	@ (800164c <vTaskDelay+0xbc>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4013      	ands	r3, r2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00e      	beq.n	80015ec <vTaskDelay+0x5c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0019      	movs	r1, r3
 80015d2:	2089      	movs	r0, #137	@ 0x89
 80015d4:	f002 f9ec 	bl	80039b0 <prvTraceStoreKernelCallWithNumericParamOnly>
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <vTaskDelay+0xb8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0018      	movs	r0, r3
 80015de:	f001 fb39 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 80015e2:	0003      	movs	r3, r0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	0018      	movs	r0, r3
 80015e8:	f002 fb74 	bl	8003cd4 <prvTraceSetTaskInstanceFinished>
 80015ec:	f001 fbfe 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80015f0:	0003      	movs	r3, r0
 80015f2:	0018      	movs	r0, r3
 80015f4:	f001 fb3c 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80015f8:	0003      	movs	r3, r0
 80015fa:	001a      	movs	r2, r3
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <vTaskDelay+0xbc>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	4013      	ands	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00a      	beq.n	800161e <vTaskDelay+0x8e>
 8001608:	f001 fbf0 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 800160c:	0003      	movs	r3, r0
 800160e:	0018      	movs	r0, r3
 8001610:	f001 fb20 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001614:	0003      	movs	r3, r0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	0018      	movs	r0, r3
 800161a:	f002 fb5b 	bl	8003cd4 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2100      	movs	r1, #0
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fea2 	bl	800236c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001628:	f000 f882 	bl	8001730 <xTaskResumeAll>
 800162c:	0003      	movs	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 8001636:	f001 f9db 	bl	80029f0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	20000158 	.word	0x20000158
 8001648:	20000084 	.word	0x20000084
 800164c:	200019c8 	.word	0x200019c8

08001650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001656:	4927      	ldr	r1, [pc, #156]	@ (80016f4 <vTaskStartScheduler+0xa4>)
 8001658:	4827      	ldr	r0, [pc, #156]	@ (80016f8 <vTaskStartScheduler+0xa8>)
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <vTaskStartScheduler+0xac>)
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	f7ff fdb2 	bl	80011ce <xTaskCreate>
 800166a:	0003      	movs	r3, r0
 800166c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d103      	bne.n	800167c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001674:	f000 febe 	bl	80023f4 <xTimerCreateTimerTask>
 8001678:	0003      	movs	r3, r0
 800167a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d12c      	bne.n	80016dc <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001682:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <vTaskStartScheduler+0xb0>)
 8001686:	2201      	movs	r2, #1
 8001688:	4252      	negs	r2, r2
 800168a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <vTaskStartScheduler+0xb4>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <vTaskStartScheduler+0xb8>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <vTaskStartScheduler+0xbc>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f001 fba5 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80016a2:	0003      	movs	r3, r0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f001 fae3 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80016aa:	0003      	movs	r3, r0
 80016ac:	001a      	movs	r2, r3
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <vTaskStartScheduler+0xc0>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4013      	ands	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <vTaskStartScheduler+0x80>
 80016ba:	f001 fb97 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 80016be:	0003      	movs	r3, r0
 80016c0:	0018      	movs	r0, r3
 80016c2:	f001 fac7 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 80016c6:	0003      	movs	r3, r0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	0018      	movs	r0, r3
 80016cc:	f002 f9da 	bl	8003a84 <prvTraceStoreTaskswitch>
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <vTaskStartScheduler+0xbc>)
 80016d2:	2202      	movs	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80016d6:	f001 f967 	bl	80029a8 <xPortStartScheduler>
 80016da:	e005      	b.n	80016e8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	d102      	bne.n	80016e8 <vTaskStartScheduler+0x98>
 80016e2:	b672      	cpsid	i
 80016e4:	46c0      	nop			@ (mov r8, r8)
 80016e6:	e7fd      	b.n	80016e4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <vTaskStartScheduler+0xc4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	080053c4 	.word	0x080053c4
 80016f8:	080020ad 	.word	0x080020ad
 80016fc:	20000154 	.word	0x20000154
 8001700:	20000150 	.word	0x20000150
 8001704:	2000013c 	.word	0x2000013c
 8001708:	20000134 	.word	0x20000134
 800170c:	200019b0 	.word	0x200019b0
 8001710:	200019c8 	.word	0x200019c8
 8001714:	20000000 	.word	0x20000000

08001718 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <vTaskSuspendAll+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4b02      	ldr	r3, [pc, #8]	@ (800172c <vTaskSuspendAll+0x14>)
 8001724:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000158 	.word	0x20000158

08001730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800173e:	4b73      	ldr	r3, [pc, #460]	@ (800190c <xTaskResumeAll+0x1dc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <xTaskResumeAll+0x1c>
 8001746:	b672      	cpsid	i
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	e7fd      	b.n	8001748 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800174c:	f001 f960 	bl	8002a10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001750:	4b6e      	ldr	r3, [pc, #440]	@ (800190c <xTaskResumeAll+0x1dc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	4b6d      	ldr	r3, [pc, #436]	@ (800190c <xTaskResumeAll+0x1dc>)
 8001758:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800175a:	4b6c      	ldr	r3, [pc, #432]	@ (800190c <xTaskResumeAll+0x1dc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d000      	beq.n	8001764 <xTaskResumeAll+0x34>
 8001762:	e0cc      	b.n	80018fe <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001764:	4b6a      	ldr	r3, [pc, #424]	@ (8001910 <xTaskResumeAll+0x1e0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d100      	bne.n	800176e <xTaskResumeAll+0x3e>
 800176c:	e0c7      	b.n	80018fe <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800176e:	e09e      	b.n	80018ae <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001770:	4b68      	ldr	r3, [pc, #416]	@ (8001914 <xTaskResumeAll+0x1e4>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	6a12      	ldr	r2, [r2, #32]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	69d2      	ldr	r2, [r2, #28]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3318      	adds	r3, #24
 800179a:	429a      	cmp	r2, r3
 800179c:	d103      	bne.n	80017a6 <xTaskResumeAll+0x76>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6a1a      	ldr	r2, [r3, #32]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	68d2      	ldr	r2, [r2, #12]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	6892      	ldr	r2, [r2, #8]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3304      	adds	r3, #4
 80017d8:	429a      	cmp	r2, r3
 80017da:	d103      	bne.n	80017e4 <xTaskResumeAll+0xb4>
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f001 fa3a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80017fc:	0003      	movs	r3, r0
 80017fe:	001a      	movs	r2, r3
 8001800:	4b45      	ldr	r3, [pc, #276]	@ (8001918 <xTaskResumeAll+0x1e8>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	4013      	ands	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <xTaskResumeAll+0xee>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	0018      	movs	r0, r3
 8001810:	f001 fa20 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001814:	0003      	movs	r3, r0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	0018      	movs	r0, r3
 800181a:	f001 feb7 	bl	800358c <prvTraceStoreTaskReady>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <xTaskResumeAll+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d903      	bls.n	8001832 <xTaskResumeAll+0x102>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <xTaskResumeAll+0x1ec>)
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001836:	493a      	ldr	r1, [pc, #232]	@ (8001920 <xTaskResumeAll+0x1f0>)
 8001838:	0013      	movs	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	189b      	adds	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	18cb      	adds	r3, r1, r3
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	3204      	adds	r2, #4
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800186c:	0013      	movs	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	189b      	adds	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <xTaskResumeAll+0x1f0>)
 8001876:	189a      	adds	r2, r3, r2
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001880:	4927      	ldr	r1, [pc, #156]	@ (8001920 <xTaskResumeAll+0x1f0>)
 8001882:	0013      	movs	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	189b      	adds	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	585b      	ldr	r3, [r3, r1]
 800188c:	1c58      	adds	r0, r3, #1
 800188e:	4924      	ldr	r1, [pc, #144]	@ (8001920 <xTaskResumeAll+0x1f0>)
 8001890:	0013      	movs	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	189b      	adds	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <xTaskResumeAll+0x1f4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d302      	bcc.n	80018ae <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <xTaskResumeAll+0x1f8>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <xTaskResumeAll+0x1e4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d000      	beq.n	80018b8 <xTaskResumeAll+0x188>
 80018b6:	e75b      	b.n	8001770 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80018be:	f000 fc43 	bl	8002148 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <xTaskResumeAll+0x1fc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00f      	beq.n	80018ee <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80018ce:	f000 f83d 	bl	800194c <xTaskIncrementTick>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d002      	beq.n	80018dc <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <xTaskResumeAll+0x1f8>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f2      	bne.n	80018ce <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <xTaskResumeAll+0x1fc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <xTaskResumeAll+0x1f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80018fa:	f001 f879 	bl	80029f0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80018fe:	f001 f899 	bl	8002a34 <vPortExitCritical>

    return xAlreadyYielded;
 8001902:	693b      	ldr	r3, [r7, #16]
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000158 	.word	0x20000158
 8001910:	20000130 	.word	0x20000130
 8001914:	2000011c 	.word	0x2000011c
 8001918:	200019c8 	.word	0x200019c8
 800191c:	20000138 	.word	0x20000138
 8001920:	20000088 	.word	0x20000088
 8001924:	20000084 	.word	0x20000084
 8001928:	20000144 	.word	0x20000144
 800192c:	20000140 	.word	0x20000140

08001930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <xTaskGetTickCount+0x18>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000134 	.word	0x20000134

0800194c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8001956:	4b85      	ldr	r3, [pc, #532]	@ (8001b6c <xTaskIncrementTick+0x220>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d003      	beq.n	8001966 <xTaskIncrementTick+0x1a>
 800195e:	4b84      	ldr	r3, [pc, #528]	@ (8001b70 <xTaskIncrementTick+0x224>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d107      	bne.n	8001976 <xTaskIncrementTick+0x2a>
 8001966:	4b83      	ldr	r3, [pc, #524]	@ (8001b74 <xTaskIncrementTick+0x228>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4b81      	ldr	r3, [pc, #516]	@ (8001b74 <xTaskIncrementTick+0x228>)
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	2000      	movs	r0, #0
 8001972:	f002 ff51 	bl	8004818 <prvTracePortGetTimeStamp>
 8001976:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <xTaskIncrementTick+0x220>)
 8001978:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800197a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b6c <xTaskIncrementTick+0x220>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d000      	beq.n	8001984 <xTaskIncrementTick+0x38>
 8001982:	e0e9      	b.n	8001b58 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001984:	4b7c      	ldr	r3, [pc, #496]	@ (8001b78 <xTaskIncrementTick+0x22c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800198c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b78 <xTaskIncrementTick+0x22c>)
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d118      	bne.n	80019ca <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001998:	4b78      	ldr	r3, [pc, #480]	@ (8001b7c <xTaskIncrementTick+0x230>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <xTaskIncrementTick+0x5c>
 80019a2:	b672      	cpsid	i
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	e7fd      	b.n	80019a4 <xTaskIncrementTick+0x58>
 80019a8:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <xTaskIncrementTick+0x230>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <xTaskIncrementTick+0x234>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b72      	ldr	r3, [pc, #456]	@ (8001b7c <xTaskIncrementTick+0x230>)
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4b72      	ldr	r3, [pc, #456]	@ (8001b80 <xTaskIncrementTick+0x234>)
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4b71      	ldr	r3, [pc, #452]	@ (8001b84 <xTaskIncrementTick+0x238>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	4b70      	ldr	r3, [pc, #448]	@ (8001b84 <xTaskIncrementTick+0x238>)
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f000 fbbf 	bl	8002148 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80019ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001b88 <xTaskIncrementTick+0x23c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d200      	bcs.n	80019d6 <xTaskIncrementTick+0x8a>
 80019d4:	e0b9      	b.n	8001b4a <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019d6:	4b69      	ldr	r3, [pc, #420]	@ (8001b7c <xTaskIncrementTick+0x230>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019e0:	4b69      	ldr	r3, [pc, #420]	@ (8001b88 <xTaskIncrementTick+0x23c>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	4252      	negs	r2, r2
 80019e6:	601a      	str	r2, [r3, #0]
                    break;
 80019e8:	e0af      	b.n	8001b4a <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ea:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <xTaskIncrementTick+0x230>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d203      	bcs.n	8001a0a <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001a02:	4b61      	ldr	r3, [pc, #388]	@ (8001b88 <xTaskIncrementTick+0x23c>)
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001a08:	e09f      	b.n	8001b4a <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68d2      	ldr	r2, [r2, #12]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	6892      	ldr	r2, [r2, #8]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d103      	bne.n	8001a38 <xTaskIncrementTick+0xec>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01e      	beq.n	8001a8e <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	6a12      	ldr	r2, [r2, #32]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	69d2      	ldr	r2, [r2, #28]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3318      	adds	r3, #24
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d103      	bne.n	8001a7e <xTaskIncrementTick+0x132>
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f001 f8ed 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001a96:	0003      	movs	r3, r0
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <xTaskIncrementTick+0x240>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <xTaskIncrementTick+0x16c>
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f001 f8d3 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f001 fd6a 	bl	800358c <prvTraceStoreTaskReady>
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <xTaskIncrementTick+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d903      	bls.n	8001acc <xTaskIncrementTick+0x180>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac8:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <xTaskIncrementTick+0x244>)
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad0:	4930      	ldr	r1, [pc, #192]	@ (8001b94 <xTaskIncrementTick+0x248>)
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	189b      	adds	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	18cb      	adds	r3, r1, r3
 8001adc:	3304      	adds	r3, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	3204      	adds	r2, #4
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1d1a      	adds	r2, r3, #4
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b06:	0013      	movs	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	189b      	adds	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <xTaskIncrementTick+0x248>)
 8001b10:	189a      	adds	r2, r3, r2
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1a:	491e      	ldr	r1, [pc, #120]	@ (8001b94 <xTaskIncrementTick+0x248>)
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	189b      	adds	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	585b      	ldr	r3, [r3, r1]
 8001b26:	1c58      	adds	r0, r3, #1
 8001b28:	491a      	ldr	r1, [pc, #104]	@ (8001b94 <xTaskIncrementTick+0x248>)
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	189b      	adds	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <xTaskIncrementTick+0x24c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d800      	bhi.n	8001b44 <xTaskIncrementTick+0x1f8>
 8001b42:	e748      	b.n	80019d6 <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b48:	e745      	b.n	80019d6 <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <xTaskIncrementTick+0x250>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e004      	b.n	8001b62 <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <xTaskIncrementTick+0x224>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <xTaskIncrementTick+0x224>)
 8001b60:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001b62:	69fb      	ldr	r3, [r7, #28]
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b008      	add	sp, #32
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000158 	.word	0x20000158
 8001b70:	20000140 	.word	0x20000140
 8001b74:	200019a4 	.word	0x200019a4
 8001b78:	20000134 	.word	0x20000134
 8001b7c:	20000114 	.word	0x20000114
 8001b80:	20000118 	.word	0x20000118
 8001b84:	20000148 	.word	0x20000148
 8001b88:	20000150 	.word	0x20000150
 8001b8c:	200019c8 	.word	0x200019c8
 8001b90:	20000138 	.word	0x20000138
 8001b94:	20000088 	.word	0x20000088
 8001b98:	20000084 	.word	0x20000084
 8001b9c:	20000144 	.word	0x20000144

08001ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <vTaskSwitchContext+0xd0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <vTaskSwitchContext+0xd4>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001bb4:	e057      	b.n	8001c66 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <vTaskSwitchContext+0xd4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <vTaskSwitchContext+0xd8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e008      	b.n	8001bd6 <vTaskSwitchContext+0x36>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <vTaskSwitchContext+0x30>
 8001bca:	b672      	cpsid	i
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	e7fd      	b.n	8001bcc <vTaskSwitchContext+0x2c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4929      	ldr	r1, [pc, #164]	@ (8001c7c <vTaskSwitchContext+0xdc>)
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	0013      	movs	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	189b      	adds	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	585b      	ldr	r3, [r3, r1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ed      	beq.n	8001bc4 <vTaskSwitchContext+0x24>
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	0013      	movs	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	189b      	adds	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4a22      	ldr	r2, [pc, #136]	@ (8001c7c <vTaskSwitchContext+0xdc>)
 8001bf4:	189b      	adds	r3, r3, r2
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3308      	adds	r3, #8
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d104      	bne.n	8001c18 <vTaskSwitchContext+0x78>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <vTaskSwitchContext+0xe0>)
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <vTaskSwitchContext+0xd8>)
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <vTaskSwitchContext+0xe4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f001 f8dd 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001c32:	0003      	movs	r3, r0
 8001c34:	0018      	movs	r0, r3
 8001c36:	f001 f81b 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <vTaskSwitchContext+0xe8>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4013      	ands	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <vTaskSwitchContext+0xc0>
 8001c4a:	f001 f8cf 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 ffff 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001c56:	0003      	movs	r3, r0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f001 ff12 	bl	8003a84 <prvTraceStoreTaskswitch>
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <vTaskSwitchContext+0xe4>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	20000158 	.word	0x20000158
 8001c74:	20000144 	.word	0x20000144
 8001c78:	20000138 	.word	0x20000138
 8001c7c:	20000088 	.word	0x20000088
 8001c80:	20000084 	.word	0x20000084
 8001c84:	200019b0 	.word	0x200019b0
 8001c88:	200019c8 	.word	0x200019c8

08001c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <vTaskPlaceOnEventList+0x16>
 8001c9c:	b672      	cpsid	i
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	e7fd      	b.n	8001c9e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <vTaskPlaceOnEventList+0x3c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	001a      	movs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7fe fadf 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fb57 	bl	800236c <prvAddCurrentTaskToDelayedList>
}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	20000084 	.word	0x20000084

08001ccc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <vTaskPlaceOnEventListRestricted+0x18>
 8001cde:	b672      	cpsid	i
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	e7fd      	b.n	8001ce0 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	61da      	str	r2, [r3, #28]
 8001cf2:	4b31      	ldr	r3, [pc, #196]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	6892      	ldr	r2, [r2, #8]
 8001cfa:	621a      	str	r2, [r3, #32]
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	3218      	adds	r2, #24
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3318      	adds	r3, #24
 8001d0e:	001a      	movs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	4b28      	ldr	r3, [pc, #160]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 ff9a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <vTaskPlaceOnEventListRestricted+0xf0>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	4013      	ands	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d011      	beq.n	8001d70 <vTaskPlaceOnEventListRestricted+0xa4>
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <vTaskPlaceOnEventListRestricted+0xf4>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	18d3      	adds	r3, r2, r3
 8001d54:	0019      	movs	r1, r3
 8001d56:	2088      	movs	r0, #136	@ 0x88
 8001d58:	f001 fe2a 	bl	80039b0 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <vTaskPlaceOnEventListRestricted+0xec>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 ff77 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001d66:	0003      	movs	r3, r0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f001 ffb2 	bl	8003cd4 <prvTraceSetTaskInstanceFinished>
 8001d70:	f001 f83c 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001d74:	0003      	movs	r3, r0
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 ff7a 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	001a      	movs	r2, r3
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <vTaskPlaceOnEventListRestricted+0xf0>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <vTaskPlaceOnEventListRestricted+0xd6>
 8001d8c:	f001 f82e 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8001d90:	0003      	movs	r3, r0
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 ff5e 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f001 ff99 	bl	8003cd4 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	0011      	movs	r1, r2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 fadf 	bl	800236c <prvAddCurrentTaskToDelayedList>
    }
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b006      	add	sp, #24
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	20000084 	.word	0x20000084
 8001dbc:	200019c8 	.word	0x200019c8
 8001dc0:	20000134 	.word	0x20000134

08001dc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <xTaskRemoveFromEventList+0x1c>
 8001dda:	b672      	cpsid	i
 8001ddc:	46c0      	nop			@ (mov r8, r8)
 8001dde:	e7fd      	b.n	8001ddc <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	6a12      	ldr	r2, [r2, #32]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69d2      	ldr	r2, [r2, #28]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3318      	adds	r3, #24
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d103      	bne.n	8001e0e <xTaskRemoveFromEventList+0x4a>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e1e:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <xTaskRemoveFromEventList+0x1a8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d172      	bne.n	8001f0c <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	6892      	ldr	r2, [r2, #8]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3304      	adds	r3, #4
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d103      	bne.n	8001e54 <xTaskRemoveFromEventList+0x90>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 ff02 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <xTaskRemoveFromEventList+0x1ac>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	4013      	ands	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <xTaskRemoveFromEventList+0xca>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 fee8 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8001e84:	0003      	movs	r3, r0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 fb7f 	bl	800358c <prvTraceStoreTaskReady>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e92:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <xTaskRemoveFromEventList+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d903      	bls.n	8001ea2 <xTaskRemoveFromEventList+0xde>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9e:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <xTaskRemoveFromEventList+0x1b0>)
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea6:	4934      	ldr	r1, [pc, #208]	@ (8001f78 <xTaskRemoveFromEventList+0x1b4>)
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	18cb      	adds	r3, r1, r3
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	3204      	adds	r2, #4
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1d1a      	adds	r2, r3, #4
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001edc:	0013      	movs	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	189b      	adds	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4a24      	ldr	r2, [pc, #144]	@ (8001f78 <xTaskRemoveFromEventList+0x1b4>)
 8001ee6:	189a      	adds	r2, r3, r2
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef0:	4921      	ldr	r1, [pc, #132]	@ (8001f78 <xTaskRemoveFromEventList+0x1b4>)
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	189b      	adds	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	585b      	ldr	r3, [r3, r1]
 8001efc:	1c58      	adds	r0, r3, #1
 8001efe:	491e      	ldr	r1, [pc, #120]	@ (8001f78 <xTaskRemoveFromEventList+0x1b4>)
 8001f00:	0013      	movs	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	189b      	adds	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	5058      	str	r0, [r3, r1]
 8001f0a:	e01b      	b.n	8001f44 <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <xTaskRemoveFromEventList+0x1b8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	61da      	str	r2, [r3, #28]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	621a      	str	r2, [r3, #32]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	3218      	adds	r2, #24
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	001a      	movs	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <xTaskRemoveFromEventList+0x1b8>)
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <xTaskRemoveFromEventList+0x1b8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <xTaskRemoveFromEventList+0x1b8>)
 8001f42:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <xTaskRemoveFromEventList+0x1bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d905      	bls.n	8001f5e <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <xTaskRemoveFromEventList+0x1c0>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e001      	b.n	8001f62 <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001f62:	69fb      	ldr	r3, [r7, #28]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b008      	add	sp, #32
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000158 	.word	0x20000158
 8001f70:	200019c8 	.word	0x200019c8
 8001f74:	20000138 	.word	0x20000138
 8001f78:	20000088 	.word	0x20000088
 8001f7c:	2000011c 	.word	0x2000011c
 8001f80:	20000084 	.word	0x20000084
 8001f84:	20000144 	.word	0x20000144

08001f88 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <vTaskInternalSetTimeOutState+0x20>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <vTaskInternalSetTimeOutState+0x24>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	605a      	str	r2, [r3, #4]
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000148 	.word	0x20000148
 8001fac:	20000134 	.word	0x20000134

08001fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <xTaskCheckForTimeOut+0x16>
 8001fc0:	b672      	cpsid	i
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	e7fd      	b.n	8001fc2 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <xTaskCheckForTimeOut+0x22>
 8001fcc:	b672      	cpsid	i
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	e7fd      	b.n	8001fce <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8001fd2:	f000 fd1d 	bl	8002a10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <xTaskCheckForTimeOut+0x94>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <xTaskCheckForTimeOut+0x98>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d00a      	beq.n	8002008 <xTaskCheckForTimeOut+0x58>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d305      	bcc.n	8002008 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e016      	b.n	8002036 <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad2      	subs	r2, r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ffb1 	bl	8001f88 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e004      	b.n	8002036 <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002036:	f000 fcfd 	bl	8002a34 <vPortExitCritical>

    return xReturn;
 800203a:	697b      	ldr	r3, [r7, #20]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b006      	add	sp, #24
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000134 	.word	0x20000134
 8002048:	20000148 	.word	0x20000148

0800204c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002050:	4b02      	ldr	r3, [pc, #8]	@ (800205c <vTaskMissedYield+0x10>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000144 	.word	0x20000144

08002060 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e001      	b.n	800207e <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 800207e:	68fb      	ldr	r3, [r7, #12]
    }
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}

08002088 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80020b4:	f000 f842 	bl	800213c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <prvIdleTask+0x1c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d9f9      	bls.n	80020b4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80020c0:	f000 fc96 	bl	80029f0 <vPortYield>
        prvCheckTasksWaitingTermination();
 80020c4:	e7f6      	b.n	80020b4 <prvIdleTask+0x8>
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	20000088 	.word	0x20000088

080020cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e00c      	b.n	80020f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	0013      	movs	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4a10      	ldr	r2, [pc, #64]	@ (8002124 <prvInitialiseTaskLists+0x58>)
 80020e4:	189b      	adds	r3, r3, r2
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7fe f89a 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d9ef      	bls.n	80020d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <prvInitialiseTaskLists+0x5c>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7fe f890 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <prvInitialiseTaskLists+0x60>)
 8002102:	0018      	movs	r0, r3
 8002104:	f7fe f88c 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <prvInitialiseTaskLists+0x64>)
 800210a:	0018      	movs	r0, r3
 800210c:	f7fe f888 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <prvInitialiseTaskLists+0x68>)
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <prvInitialiseTaskLists+0x5c>)
 8002114:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <prvInitialiseTaskLists+0x6c>)
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <prvInitialiseTaskLists+0x60>)
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000088 	.word	0x20000088
 8002128:	200000ec 	.word	0x200000ec
 800212c:	20000100 	.word	0x20000100
 8002130:	2000011c 	.word	0x2000011c
 8002134:	20000114 	.word	0x20000114
 8002138:	20000118 	.word	0x20000118

0800213c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <prvResetNextTaskUnblockTime+0x2c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <prvResetNextTaskUnblockTime+0x30>)
 8002158:	2201      	movs	r2, #1
 800215a:	4252      	negs	r2, r2
 800215c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800215e:	e005      	b.n	800216c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <prvResetNextTaskUnblockTime+0x2c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <prvResetNextTaskUnblockTime+0x30>)
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	46c0      	nop			@ (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	20000114 	.word	0x20000114
 8002178:	20000150 	.word	0x20000150

0800217c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <xTaskGetCurrentTaskHandle+0x18>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002188:	687b      	ldr	r3, [r7, #4]
    }
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	20000084 	.word	0x20000084

08002198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <xTaskGetSchedulerState+0x30>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80021a6:	2301      	movs	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e008      	b.n	80021be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <xTaskGetSchedulerState+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80021b4:	2302      	movs	r3, #2
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	e001      	b.n	80021be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80021be:	687b      	ldr	r3, [r7, #4]
    }
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000013c 	.word	0x2000013c
 80021cc:	20000158 	.word	0x20000158

080021d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d100      	bne.n	80021e8 <xTaskPriorityDisinherit+0x18>
 80021e6:	e0b3      	b.n	8002350 <xTaskPriorityDisinherit+0x180>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80021e8:	4b5c      	ldr	r3, [pc, #368]	@ (800235c <xTaskPriorityDisinherit+0x18c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d002      	beq.n	80021f8 <xTaskPriorityDisinherit+0x28>
 80021f2:	b672      	cpsid	i
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	e7fd      	b.n	80021f4 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <xTaskPriorityDisinherit+0x36>
 8002200:	b672      	cpsid	i
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	e7fd      	b.n	8002202 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002218:	429a      	cmp	r2, r3
 800221a:	d100      	bne.n	800221e <xTaskPriorityDisinherit+0x4e>
 800221c:	e098      	b.n	8002350 <xTaskPriorityDisinherit+0x180>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d000      	beq.n	8002228 <xTaskPriorityDisinherit+0x58>
 8002226:	e093      	b.n	8002350 <xTaskPriorityDisinherit+0x180>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	3304      	adds	r3, #4
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe f856 	bl	80002de <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fd1b 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 800223a:	0003      	movs	r3, r0
 800223c:	001a      	movs	r2, r3
 800223e:	4b48      	ldr	r3, [pc, #288]	@ (8002360 <xTaskPriorityDisinherit+0x190>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d023      	beq.n	8002292 <xTaskPriorityDisinherit+0xc2>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fd01 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8002252:	0003      	movs	r3, r0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	001c      	movs	r4, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fcfa 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8002260:	0003      	movs	r3, r0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	0019      	movs	r1, r3
 8002266:	2003      	movs	r0, #3
 8002268:	f001 fcb2 	bl	8003bd0 <prvTraceGetPriorityProperty>
 800226c:	0003      	movs	r3, r0
 800226e:	0022      	movs	r2, r4
 8002270:	2103      	movs	r1, #3
 8002272:	208f      	movs	r0, #143	@ 0x8f
 8002274:	f001 fafe 	bl	8003874 <prvTraceStoreKernelCallWithParam>
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fcea 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8002280:	0003      	movs	r3, r0
 8002282:	b2d9      	uxtb	r1, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002288:	b2db      	uxtb	r3, r3
 800228a:	001a      	movs	r2, r3
 800228c:	2003      	movs	r0, #3
 800228e:	f001 fc6d 	bl	8003b6c <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	2205      	movs	r2, #5
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fce1 	bl	8002c70 <prvTraceGetTaskNumberHigh16>
 80022ae:	0003      	movs	r3, r0
 80022b0:	001a      	movs	r2, r3
 80022b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <xTaskPriorityDisinherit+0x190>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	4013      	ands	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <xTaskPriorityDisinherit+0x100>
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fcc7 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 80022c6:	0003      	movs	r3, r0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	0018      	movs	r0, r3
 80022cc:	f001 f95e 	bl	800358c <prvTraceStoreTaskReady>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d4:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <xTaskPriorityDisinherit+0x194>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d903      	bls.n	80022e4 <xTaskPriorityDisinherit+0x114>
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e0:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <xTaskPriorityDisinherit+0x194>)
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e8:	491f      	ldr	r1, [pc, #124]	@ (8002368 <xTaskPriorityDisinherit+0x198>)
 80022ea:	0013      	movs	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	18cb      	adds	r3, r1, r3
 80022f4:	3304      	adds	r3, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	3204      	adds	r2, #4
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231e:	0013      	movs	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	189b      	adds	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4a10      	ldr	r2, [pc, #64]	@ (8002368 <xTaskPriorityDisinherit+0x198>)
 8002328:	189a      	adds	r2, r3, r2
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <xTaskPriorityDisinherit+0x198>)
 8002334:	0013      	movs	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	189b      	adds	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	585b      	ldr	r3, [r3, r1]
 800233e:	1c58      	adds	r0, r3, #1
 8002340:	4909      	ldr	r1, [pc, #36]	@ (8002368 <xTaskPriorityDisinherit+0x198>)
 8002342:	0013      	movs	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	189b      	adds	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002350:	697b      	ldr	r3, [r7, #20]
    }
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b007      	add	sp, #28
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	20000084 	.word	0x20000084
 8002360:	200019c8 	.word	0x200019c8
 8002364:	20000138 	.word	0x20000138
 8002368:	20000088 	.word	0x20000088

0800236c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <prvAddCurrentTaskToDelayedList+0x74>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <prvAddCurrentTaskToDelayedList+0x78>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3304      	adds	r3, #4
 8002382:	0018      	movs	r0, r3
 8002384:	f7fd ffab 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	18d3      	adds	r3, r2, r3
 800238e:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d209      	bcs.n	80023b4 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <prvAddCurrentTaskToDelayedList+0x78>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3304      	adds	r3, #4
 80023aa:	0019      	movs	r1, r3
 80023ac:	0010      	movs	r0, r2
 80023ae:	f7fd ff60 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023b2:	e010      	b.n	80023d6 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b4:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <prvAddCurrentTaskToDelayedList+0x80>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <prvAddCurrentTaskToDelayedList+0x78>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3304      	adds	r3, #4
 80023be:	0019      	movs	r1, r3
 80023c0:	0010      	movs	r0, r2
 80023c2:	f7fd ff56 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <prvAddCurrentTaskToDelayedList+0x84>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d202      	bcs.n	80023d6 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 80023d0:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <prvAddCurrentTaskToDelayedList+0x84>)
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	20000134 	.word	0x20000134
 80023e4:	20000084 	.word	0x20000084
 80023e8:	20000118 	.word	0x20000118
 80023ec:	20000114 	.word	0x20000114
 80023f0:	20000150 	.word	0x20000150

080023f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80023fe:	f000 fa31 	bl	8002864 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <xTimerCreateTimerTask+0x44>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800240a:	490c      	ldr	r1, [pc, #48]	@ (800243c <xTimerCreateTimerTask+0x48>)
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <xTimerCreateTimerTask+0x4c>)
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <xTimerCreateTimerTask+0x50>)
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2303      	movs	r3, #3
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	f7fe fed8 	bl	80011ce <xTaskCreate>
 800241e:	0003      	movs	r3, r0
 8002420:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <xTimerCreateTimerTask+0x3a>
 8002428:	b672      	cpsid	i
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	e7fd      	b.n	800242a <xTimerCreateTimerTask+0x36>
        return xReturn;
 800242e:	687b      	ldr	r3, [r7, #4]
    }
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000018c 	.word	0x2000018c
 800243c:	080053cc 	.word	0x080053cc
 8002440:	080024f1 	.word	0x080024f1
 8002444:	20000190 	.word	0x20000190

08002448 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002454:	e009      	b.n	800246a <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	0010      	movs	r0, r2
 8002468:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	18d1      	adds	r1, r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8da 	bl	8002630 <prvInsertTimerInActiveList>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d1ea      	bne.n	8002456 <prvReloadTimer+0xe>
        }
    }
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b004      	add	sp, #16
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <prvProcessExpiredTimer+0x60>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3304      	adds	r3, #4
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fd ff1a 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2228      	movs	r2, #40	@ 0x28
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	001a      	movs	r2, r3
 80024b2:	2304      	movs	r3, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d006      	beq.n	80024c6 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ffc2 	bl	8002448 <prvReloadTimer>
 80024c4:	e008      	b.n	80024d8 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2228      	movs	r2, #40	@ 0x28
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4393      	bics	r3, r2
 80024d0:	b2d9      	uxtb	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2228      	movs	r2, #40	@ 0x28
 80024d6:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	0010      	movs	r0, r2
 80024e0:	4798      	blx	r3
    }
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	20000184 	.word	0x20000184

080024f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024f8:	2308      	movs	r3, #8
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f855 	bl	80025ac <prvGetNextExpireTime>
 8002502:	0003      	movs	r3, r0
 8002504:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f805 	bl	800251c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002512:	f000 f8cf 	bl	80026b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	e7ee      	b.n	80024f8 <prvTimerTask+0x8>
	...

0800251c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002526:	f7ff f8f7 	bl	8001718 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800252a:	2308      	movs	r3, #8
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	0018      	movs	r0, r3
 8002530:	f000 f85e 	bl	80025f0 <prvSampleTimeNow>
 8002534:	0003      	movs	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d12b      	bne.n	8002596 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <prvProcessTimerOrBlockTask+0x42>
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d808      	bhi.n	800255e <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 800254c:	f7ff f8f0 	bl	8001730 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff ff98 	bl	800248c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800255c:	e01d      	b.n	800259a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <prvProcessTimerOrBlockTask+0x88>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <prvProcessTimerOrBlockTask+0x56>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <prvProcessTimerOrBlockTask+0x58>
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <prvProcessTimerOrBlockTask+0x8c>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	0019      	movs	r1, r3
 8002584:	f7fe fdf0 	bl	8001168 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002588:	f7ff f8d2 	bl	8001730 <xTaskResumeAll>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d104      	bne.n	800259a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002590:	f000 fa2e 	bl	80029f0 <vPortYield>
    }
 8002594:	e001      	b.n	800259a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002596:	f7ff f8cb 	bl	8001730 <xTaskResumeAll>
    }
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	20000188 	.word	0x20000188
 80025a8:	2000018c 	.word	0x2000018c

080025ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <prvGetNextExpireTime+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <prvGetNextExpireTime+0x16>
 80025be:	2201      	movs	r2, #1
 80025c0:	e000      	b.n	80025c4 <prvGetNextExpireTime+0x18>
 80025c2:	2200      	movs	r2, #0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <prvGetNextExpireTime+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e001      	b.n	80025e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80025e0:	68fb      	ldr	r3, [r7, #12]
    }
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	20000184 	.word	0x20000184

080025f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80025f8:	f7ff f99a 	bl	8001930 <xTaskGetTickCount>
 80025fc:	0003      	movs	r3, r0
 80025fe:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <prvSampleTimeNow+0x3c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	429a      	cmp	r2, r3
 8002608:	d205      	bcs.n	8002616 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 800260a:	f000 f903 	bl	8002814 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e002      	b.n	800261c <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <prvSampleTimeNow+0x3c>)
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002622:	68fb      	ldr	r3, [r7, #12]
    }
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000194 	.word	0x20000194

08002630 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d812      	bhi.n	800267c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002664:	2301      	movs	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e01b      	b.n	80026a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <prvInsertTimerInActiveList+0x7c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3304      	adds	r3, #4
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f7fd fdfc 	bl	8000272 <vListInsert>
 800267a:	e012      	b.n	80026a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d206      	bcs.n	8002692 <prvInsertTimerInActiveList+0x62>
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e007      	b.n	80026a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <prvInsertTimerInActiveList+0x80>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3304      	adds	r3, #4
 800269a:	0019      	movs	r1, r3
 800269c:	0010      	movs	r0, r2
 800269e:	f7fd fde8 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026a2:	697b      	ldr	r3, [r7, #20]
    }
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000188 	.word	0x20000188
 80026b0:	20000184 	.word	0x20000184

080026b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026ba:	e098      	b.n	80027ee <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da00      	bge.n	80026c6 <prvProcessReceivedCommands+0x12>
 80026c4:	e093      	b.n	80027ee <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3304      	adds	r3, #4
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fd fe00 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026de:	003b      	movs	r3, r7
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff85 	bl	80025f0 <prvSampleTimeNow>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d900      	bls.n	80026f4 <prvProcessReceivedCommands+0x40>
 80026f2:	e079      	b.n	80027e8 <prvProcessReceivedCommands+0x134>
 80026f4:	009a      	lsls	r2, r3, #2
 80026f6:	4b45      	ldr	r3, [pc, #276]	@ (800280c <prvProcessReceivedCommands+0x158>)
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2228      	movs	r2, #40	@ 0x28
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	2201      	movs	r2, #1
 8002706:	4313      	orrs	r3, r2
 8002708:	b2d9      	uxtb	r1, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2228      	movs	r2, #40	@ 0x28
 800270e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	18d1      	adds	r1, r2, r3
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	6978      	ldr	r0, [r7, #20]
 8002722:	f7ff ff85 	bl	8002630 <prvInsertTimerInActiveList>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d060      	beq.n	80027ec <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2228      	movs	r2, #40	@ 0x28
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	001a      	movs	r2, r3
 8002732:	2304      	movs	r3, #4
 8002734:	4013      	ands	r3, r2
 8002736:	d00a      	beq.n	800274e <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	18d1      	adds	r1, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fe7e 	bl	8002448 <prvReloadTimer>
 800274c:	e008      	b.n	8002760 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2228      	movs	r2, #40	@ 0x28
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	2201      	movs	r2, #1
 8002756:	4393      	bics	r3, r2
 8002758:	b2d9      	uxtb	r1, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2228      	movs	r2, #40	@ 0x28
 800275e:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	0010      	movs	r0, r2
 8002768:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800276a:	e03f      	b.n	80027ec <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2228      	movs	r2, #40	@ 0x28
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	2201      	movs	r2, #1
 8002774:	4393      	bics	r3, r2
 8002776:	b2d9      	uxtb	r1, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2228      	movs	r2, #40	@ 0x28
 800277c:	5499      	strb	r1, [r3, r2]
                        break;
 800277e:	e036      	b.n	80027ee <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2228      	movs	r2, #40	@ 0x28
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	2201      	movs	r2, #1
 8002788:	4313      	orrs	r3, r2
 800278a:	b2d9      	uxtb	r1, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2228      	movs	r2, #40	@ 0x28
 8002790:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <prvProcessReceivedCommands+0xf4>
 80027a2:	b672      	cpsid	i
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	e7fd      	b.n	80027a4 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	18d1      	adds	r1, r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f7ff ff3b 	bl	8002630 <prvInsertTimerInActiveList>
                        break;
 80027ba:	e018      	b.n	80027ee <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2228      	movs	r2, #40	@ 0x28
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	001a      	movs	r2, r3
 80027c4:	2302      	movs	r3, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d104      	bne.n	80027d4 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fa19 	bl	8002c04 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80027d2:	e00c      	b.n	80027ee <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2228      	movs	r2, #40	@ 0x28
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	2201      	movs	r2, #1
 80027dc:	4393      	bics	r3, r2
 80027de:	b2d9      	uxtb	r1, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2228      	movs	r2, #40	@ 0x28
 80027e4:	5499      	strb	r1, [r3, r2]
                        break;
 80027e6:	e002      	b.n	80027ee <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	e000      	b.n	80027ee <prvProcessReceivedCommands+0x13a>
                        break;
 80027ec:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <prvProcessReceivedCommands+0x15c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1d39      	adds	r1, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fe f930 	bl	8000a5c <xQueueReceive>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d000      	beq.n	8002802 <prvProcessReceivedCommands+0x14e>
 8002800:	e75c      	b.n	80026bc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08005acc 	.word	0x08005acc
 8002810:	2000018c 	.word	0x2000018c

08002814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800281a:	e00b      	b.n	8002834 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <prvSwitchTimerLists+0x48>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002826:	2301      	movs	r3, #1
 8002828:	425a      	negs	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f7ff fe2c 	bl	800248c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <prvSwitchTimerLists+0x48>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ee      	bne.n	800281c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <prvSwitchTimerLists+0x48>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <prvSwitchTimerLists+0x4c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <prvSwitchTimerLists+0x48>)
 800284a:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <prvSwitchTimerLists+0x4c>)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]
    }
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	20000184 	.word	0x20000184
 8002860:	20000188 	.word	0x20000188

08002864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002868:	f000 f8d2 	bl	8002a10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800286c:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <prvCheckForValidListAndQueue+0x5c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d120      	bne.n	80028b6 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <prvCheckForValidListAndQueue+0x60>)
 8002876:	0018      	movs	r0, r3
 8002878:	f7fd fcd2 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <prvCheckForValidListAndQueue+0x64>)
 800287e:	0018      	movs	r0, r3
 8002880:	f7fd fcce 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <prvCheckForValidListAndQueue+0x68>)
 8002886:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <prvCheckForValidListAndQueue+0x60>)
 8002888:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <prvCheckForValidListAndQueue+0x6c>)
 800288c:	4a0e      	ldr	r2, [pc, #56]	@ (80028c8 <prvCheckForValidListAndQueue+0x64>)
 800288e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002890:	2200      	movs	r2, #0
 8002892:	210c      	movs	r1, #12
 8002894:	200a      	movs	r0, #10
 8002896:	f7fd fdd5 	bl	8000444 <xQueueGenericCreate>
 800289a:	0002      	movs	r2, r0
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <prvCheckForValidListAndQueue+0x5c>)
 800289e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80028a0:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <prvCheckForValidListAndQueue+0x5c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <prvCheckForValidListAndQueue+0x5c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a09      	ldr	r2, [pc, #36]	@ (80028d4 <prvCheckForValidListAndQueue+0x70>)
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe fbff 	bl	80010b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028b6:	f000 f8bd 	bl	8002a34 <vPortExitCritical>
    }
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000018c 	.word	0x2000018c
 80028c4:	2000015c 	.word	0x2000015c
 80028c8:	20000170 	.word	0x20000170
 80028cc:	20000184 	.word	0x20000184
 80028d0:	20000188 	.word	0x20000188
 80028d4:	080053d4 	.word	0x080053d4

080028d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3b04      	subs	r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2280      	movs	r2, #128	@ 0x80
 80028ee:	0452      	lsls	r2, r2, #17
 80028f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b04      	subs	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3b04      	subs	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002904:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <pxPortInitialiseStack+0x50>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3b14      	subs	r3, #20
 800290e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b20      	subs	r3, #32
 800291a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800291c:	68fb      	ldr	r3, [r7, #12]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	0800292d 	.word	0x0800292d

0800292c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <prvTaskExitError+0x2c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	d002      	beq.n	8002944 <prvTaskExitError+0x18>
 800293e:	b672      	cpsid	i
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	e7fd      	b.n	8002940 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002944:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0fc      	beq.n	8002948 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000004 	.word	0x20000004

0800295c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002970 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002970:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <pxCurrentTCBConst2>)
 8002972:	6813      	ldr	r3, [r2, #0]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	3020      	adds	r0, #32
 8002978:	f380 8809 	msr	PSP, r0
 800297c:	2002      	movs	r0, #2
 800297e:	f380 8814 	msr	CONTROL, r0
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002988:	46ae      	mov	lr, r5
 800298a:	bc08      	pop	{r3}
 800298c:	bc04      	pop	{r2}
 800298e:	b662      	cpsie	i
 8002990:	4718      	bx	r3
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46c0      	nop			@ (mov r8, r8)

080029a0 <pxCurrentTCBConst2>:
 80029a0:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	46c0      	nop			@ (mov r8, r8)

080029a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <xPortStartScheduler+0x40>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <xPortStartScheduler+0x40>)
 80029b2:	21ff      	movs	r1, #255	@ 0xff
 80029b4:	0409      	lsls	r1, r1, #16
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <xPortStartScheduler+0x40>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <xPortStartScheduler+0x40>)
 80029c0:	21ff      	movs	r1, #255	@ 0xff
 80029c2:	0609      	lsls	r1, r1, #24
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029c8:	f000 f898 	bl	8002afc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029cc:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <xPortStartScheduler+0x44>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80029d2:	f7ff ffcd 	bl	8002970 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029d6:	f7ff f8e3 	bl	8001ba0 <vTaskSwitchContext>
    prvTaskExitError();
 80029da:	f7ff ffa7 	bl	800292c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	e000ed20 	.word	0xe000ed20
 80029ec:	20000004 	.word	0x20000004

080029f0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <vPortYield+0x1c>)
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	0552      	lsls	r2, r2, #21
 80029fa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80029fc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002a00:	f3bf 8f6f 	isb	sy
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	e000ed04 	.word	0xe000ed04

08002a10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002a14:	b672      	cpsid	i
    uxCriticalNesting++;
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <vPortEnterCritical+0x20>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <vPortEnterCritical+0x20>)
 8002a1e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002a20:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002a24:	f3bf 8f6f 	isb	sy
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	20000004 	.word	0x20000004

08002a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <vPortExitCritical+0x2c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <vPortExitCritical+0x12>
 8002a40:	b672      	cpsid	i
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	e7fd      	b.n	8002a42 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <vPortExitCritical+0x2c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <vPortExitCritical+0x2c>)
 8002a4e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <vPortExitCritical+0x2c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d100      	bne.n	8002a5a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002a58:	b662      	cpsie	i
    }
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000004 	.word	0x20000004

08002a64 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002a64:	f3ef 8010 	mrs	r0, PRIMASK
 8002a68:	b672      	cpsid	i
 8002a6a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	0018      	movs	r0, r3

08002a70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002a70:	f380 8810 	msr	PRIMASK, r0
 8002a74:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
	...

08002a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002a80:	f3ef 8009 	mrs	r0, PSP
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <pxCurrentTCBConst>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	3820      	subs	r0, #32
 8002a8a:	6010      	str	r0, [r2, #0]
 8002a8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002a8e:	4644      	mov	r4, r8
 8002a90:	464d      	mov	r5, r9
 8002a92:	4656      	mov	r6, sl
 8002a94:	465f      	mov	r7, fp
 8002a96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002a98:	b508      	push	{r3, lr}
 8002a9a:	b672      	cpsid	i
 8002a9c:	f7ff f880 	bl	8001ba0 <vTaskSwitchContext>
 8002aa0:	b662      	cpsie	i
 8002aa2:	bc0c      	pop	{r2, r3}
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	6808      	ldr	r0, [r1, #0]
 8002aa8:	3010      	adds	r0, #16
 8002aaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002aac:	46a0      	mov	r8, r4
 8002aae:	46a9      	mov	r9, r5
 8002ab0:	46b2      	mov	sl, r6
 8002ab2:	46bb      	mov	fp, r7
 8002ab4:	f380 8809 	msr	PSP, r0
 8002ab8:	3820      	subs	r0, #32
 8002aba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002abc:	4718      	bx	r3
 8002abe:	46c0      	nop			@ (mov r8, r8)

08002ac0 <pxCurrentTCBConst>:
 8002ac0:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46c0      	nop			@ (mov r8, r8)

08002ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ace:	f7ff ffc9 	bl	8002a64 <ulSetInterruptMaskFromISR>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ad6:	f7fe ff39 	bl	800194c <xTaskIncrementTick>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d003      	beq.n	8002ae6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <SysTick_Handler+0x30>)
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	0552      	lsls	r2, r2, #21
 8002ae4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ffc1 	bl	8002a70 <vClearInterruptMaskFromISR>
}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <vPortSetupTimerInterrupt+0x34>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <vPortSetupTimerInterrupt+0x38>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <vPortSetupTimerInterrupt+0x3c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	22fa      	movs	r2, #250	@ 0xfa
 8002b12:	0091      	lsls	r1, r2, #2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd faf7 	bl	8000108 <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <vPortSetupTimerInterrupt+0x40>)
 8002b20:	3a01      	subs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b24:	4b02      	ldr	r3, [pc, #8]	@ (8002b30 <vPortSetupTimerInterrupt+0x34>)
 8002b26:	2207      	movs	r2, #7
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	e000e010 	.word	0xe000e010
 8002b34:	e000e018 	.word	0xe000e018
 8002b38:	20000014 	.word	0x20000014
 8002b3c:	e000e014 	.word	0xe000e014

08002b40 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2207      	movs	r2, #7
 8002b50:	4013      	ands	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2207      	movs	r2, #7
 8002b58:	4393      	bics	r3, r2
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d205      	bcs.n	8002b6e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2207      	movs	r2, #7
 8002b66:	4393      	bics	r3, r2
 8002b68:	3308      	adds	r3, #8
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	e001      	b.n	8002b72 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002b72:	f7fe fdd1 	bl	8001718 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <pvPortMalloc+0xb4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <pvPortMalloc+0xb8>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	4393      	bics	r3, r2
 8002b84:	001a      	movs	r2, r3
 8002b86:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <pvPortMalloc+0xb4>)
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002b90:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <pvPortMalloc+0xc0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d813      	bhi.n	8002bc6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002b9e:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	18d2      	adds	r2, r2, r3
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d90b      	bls.n	8002bc6 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <pvPortMalloc+0xb4>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	18d2      	adds	r2, r2, r3
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <pvPortMalloc+0xbc>)
 8002bc4:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <pvPortMalloc+0x9a>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	2094      	movs	r0, #148	@ 0x94
 8002bd4:	f000 fd42 	bl	800365c <vTraceStoreMemMangEvent>
 8002bd8:	e005      	b.n	8002be6 <pvPortMalloc+0xa6>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	0019      	movs	r1, r3
 8002be0:	20e8      	movs	r0, #232	@ 0xe8
 8002be2:	f000 fd3b 	bl	800365c <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8002be6:	f7fe fda3 	bl	8001730 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	2000199c 	.word	0x2000199c
 8002bf8:	2000019f 	.word	0x2000019f
 8002bfc:	20001998 	.word	0x20001998
 8002c00:	000017f7 	.word	0x000017f7

08002c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <vPortFree+0x14>
 8002c12:	b672      	cpsid	i
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	e7fd      	b.n	8002c14 <vPortFree+0x10>
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7fe f904 	bl	8000e38 <uxQueueGetQueueNumber>
 8002c30:	0003      	movs	r3, r0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7fe f90d 	bl	8000e64 <ucQueueGetQueueType>
 8002c4a:	0003      	movs	r3, r0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff f9fe 	bl	8002060 <uxTaskGetTaskNumber>
 8002c64:	0003      	movs	r3, r0
 8002c66:	b29b      	uxth	r3, r3
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7ff f9f0 	bl	8002060 <uxTaskGetTaskNumber>
 8002c80:	0003      	movs	r3, r0
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	b29b      	uxth	r3, r3
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	000a      	movs	r2, r1
 8002c98:	1cbb      	adds	r3, r7, #2
 8002c9a:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff f9de 	bl	8002060 <uxTaskGetTaskNumber>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	1cbb      	adds	r3, r7, #2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff f9e7 	bl	8002088 <vTaskSetTaskNumber>
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	000a      	movs	r2, r1
 8002ccc:	1cbb      	adds	r3, r7, #2
 8002cce:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff f9c4 	bl	8002060 <uxTaskGetTaskNumber>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	0c1a      	lsrs	r2, r3, #16
 8002cde:	1cbb      	adds	r3, r7, #2
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff f9cc 	bl	8002088 <vTaskSetTaskNumber>
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff ff8c 	bl	8002c20 <prvTraceGetQueueNumber>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	b29b      	uxth	r3, r3
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff ff7e 	bl	8002c20 <prvTraceGetQueueNumber>
 8002d24:	0003      	movs	r3, r0
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b29b      	uxth	r3, r3
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	000a      	movs	r2, r1
 8002d3c:	1cbb      	adds	r3, r7, #2
 8002d3e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff ff6c 	bl	8002c20 <prvTraceGetQueueNumber>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0011      	movs	r1, r2
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7fe f877 	bl	8000e4c <vQueueSetQueueNumber>
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	000a      	movs	r2, r1
 8002d70:	1cbb      	adds	r3, r7, #2
 8002d72:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff ff52 	bl	8002c20 <prvTraceGetQueueNumber>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	0c1a      	lsrs	r2, r3, #16
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0011      	movs	r1, r2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fe f85c 	bl	8000e4c <vQueueSetQueueNumber>
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <vTraceSetQueueName>:
};

#if (TRC_CFG_SCHEDULING_ONLY == 0)

void vTraceSetQueueName(void* pvQueue, const char* szName)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ffa5 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8002dae:	0003      	movs	r3, r0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	0019      	movs	r1, r3
 8002db6:	2000      	movs	r0, #0
 8002db8:	f001 f918 	bl	8003fec <prvTraceSetObjectName>
}
 8002dbc:	46c0      	nop			@ (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <vTraceSetSemaphoreName>:

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff ff91 	bl	8002cf8 <prvTraceGetQueueNumberLow16>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	0019      	movs	r1, r3
 8002dde:	2001      	movs	r0, #1
 8002de0:	f001 f904 	bl	8003fec <prvTraceSetObjectName>
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8002df0:	f7ff f9c4 	bl	800217c <xTaskGetCurrentTaskHandle>
 8002df4:	0003      	movs	r3, r0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8002e20:	4b62      	ldr	r3, [pc, #392]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2209      	movs	r2, #9
 8002e26:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8002e28:	4b60      	ldr	r3, [pc, #384]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2250      	movs	r2, #80	@ 0x50
 8002e2e:	2102      	movs	r1, #2
 8002e30:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8002e32:	4b5e      	ldr	r3, [pc, #376]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2251      	movs	r2, #81	@ 0x51
 8002e38:	2106      	movs	r1, #6
 8002e3a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2252      	movs	r2, #82	@ 0x52
 8002e42:	2102      	movs	r1, #2
 8002e44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8002e46:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2253      	movs	r2, #83	@ 0x53
 8002e4c:	2106      	movs	r1, #6
 8002e4e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8002e50:	4b56      	ldr	r3, [pc, #344]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2254      	movs	r2, #84	@ 0x54
 8002e56:	2104      	movs	r1, #4
 8002e58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8002e5a:	4b54      	ldr	r3, [pc, #336]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2255      	movs	r2, #85	@ 0x55
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8002e64:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2256      	movs	r2, #86	@ 0x56
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2257      	movs	r2, #87	@ 0x57
 8002e74:	2102      	movs	r1, #2
 8002e76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8002e78:	4b4c      	ldr	r3, [pc, #304]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2258      	movs	r2, #88	@ 0x58
 8002e7e:	2102      	movs	r1, #2
 8002e80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8002e82:	4b4a      	ldr	r3, [pc, #296]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	225c      	movs	r2, #92	@ 0x5c
 8002e88:	210f      	movs	r1, #15
 8002e8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8002e8c:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	225d      	movs	r2, #93	@ 0x5d
 8002e92:	210f      	movs	r1, #15
 8002e94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8002e96:	4b45      	ldr	r3, [pc, #276]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	225e      	movs	r2, #94	@ 0x5e
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8002ea0:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	225f      	movs	r2, #95	@ 0x5f
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8002eaa:	4b40      	ldr	r3, [pc, #256]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2260      	movs	r2, #96	@ 0x60
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2261      	movs	r2, #97	@ 0x61
 8002eba:	210f      	movs	r1, #15
 8002ebc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2262      	movs	r2, #98	@ 0x62
 8002ec4:	210f      	movs	r1, #15
 8002ec6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8002ec8:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2263      	movs	r2, #99	@ 0x63
 8002ece:	210f      	movs	r1, #15
 8002ed0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8002ed2:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2264      	movs	r2, #100	@ 0x64
 8002ed8:	210f      	movs	r1, #15
 8002eda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8002edc:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2268      	movs	r2, #104	@ 0x68
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2269      	movs	r2, #105	@ 0x69
 8002eec:	2110      	movs	r1, #16
 8002eee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	226a      	movs	r2, #106	@ 0x6a
 8002ef6:	2110      	movs	r1, #16
 8002ef8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	226b      	movs	r2, #107	@ 0x6b
 8002f00:	2113      	movs	r1, #19
 8002f02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8002f04:	4b29      	ldr	r3, [pc, #164]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	226c      	movs	r2, #108	@ 0x6c
 8002f0a:	2111      	movs	r1, #17
 8002f0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8002f0e:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	226d      	movs	r2, #109	@ 0x6d
 8002f14:	2110      	movs	r1, #16
 8002f16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	226e      	movs	r2, #110	@ 0x6e
 8002f1e:	2113      	movs	r1, #19
 8002f20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8002f22:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	226f      	movs	r2, #111	@ 0x6f
 8002f28:	2113      	movs	r1, #19
 8002f2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2270      	movs	r2, #112	@ 0x70
 8002f32:	2113      	movs	r1, #19
 8002f34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2274      	movs	r2, #116	@ 0x74
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2276      	movs	r2, #118	@ 0x76
 8002f46:	2120      	movs	r1, #32
 8002f48:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2278      	movs	r2, #120	@ 0x78
 8002f50:	2180      	movs	r1, #128	@ 0x80
 8002f52:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8002f54:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	227a      	movs	r2, #122	@ 0x7a
 8002f5a:	21a0      	movs	r1, #160	@ 0xa0
 8002f5c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8002f5e:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	227c      	movs	r2, #124	@ 0x7c
 8002f64:	2189      	movs	r1, #137	@ 0x89
 8002f66:	0049      	lsls	r1, r1, #1
 8002f68:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	227e      	movs	r2, #126	@ 0x7e
 8002f70:	21ab      	movs	r1, #171	@ 0xab
 8002f72:	0049      	lsls	r1, r1, #1
 8002f74:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	21b3      	movs	r1, #179	@ 0xb3
 8002f7e:	0049      	lsls	r1, r1, #1
 8002f80:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2282      	movs	r2, #130	@ 0x82
 8002f88:	21c6      	movs	r1, #198	@ 0xc6
 8002f8a:	0049      	lsls	r1, r1, #1
 8002f8c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2284      	movs	r2, #132	@ 0x84
 8002f94:	21d9      	movs	r1, #217	@ 0xd9
 8002f96:	0049      	lsls	r1, r1, #1
 8002f98:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	22ec      	movs	r2, #236	@ 0xec
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20002df8 	.word	0x20002df8

08002fb0 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8002fba:	4b40      	ldr	r3, [pc, #256]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	825a      	strh	r2, [r3, #18]
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fc2:	8a5a      	ldrh	r2, [r3, #18]
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fc6:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	829a      	strh	r2, [r3, #20]
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fd0:	8a9a      	ldrh	r2, [r3, #20]
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fd4:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8002fd6:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fd8:	2208      	movs	r2, #8
 8002fda:	82da      	strh	r2, [r3, #22]
 8002fdc:	4b37      	ldr	r3, [pc, #220]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fde:	8ada      	ldrh	r2, [r3, #22]
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fe2:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8002fe4:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	831a      	strh	r2, [r3, #24]
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002fec:	8b1a      	ldrh	r2, [r3, #24]
 8002fee:	4b33      	ldr	r3, [pc, #204]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ff0:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8002ff2:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	835a      	strh	r2, [r3, #26]
 8002ff8:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ffa:	8b5a      	ldrh	r2, [r3, #26]
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8002ffe:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003000:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003002:	2214      	movs	r2, #20
 8003004:	839a      	strh	r2, [r3, #28]
 8003006:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003008:	8b9a      	ldrh	r2, [r3, #28]
 800300a:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800300c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800300e:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003010:	2215      	movs	r2, #21
 8003012:	83da      	strh	r2, [r3, #30]
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003016:	8bda      	ldrh	r2, [r3, #30]
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800301a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 800301c:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800301e:	2217      	movs	r2, #23
 8003020:	841a      	strh	r2, [r3, #32]
 8003022:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003024:	8c1a      	ldrh	r2, [r3, #32]
 8003026:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003028:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800302c:	2219      	movs	r2, #25
 800302e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003030:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003032:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003036:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800303a:	2201      	movs	r2, #1
 800303c:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800303e:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003040:	2207      	movs	r2, #7
 8003042:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003046:	2209      	movs	r2, #9
 8003048:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 800304a:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800304c:	220f      	movs	r2, #15
 800304e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003052:	2213      	movs	r2, #19
 8003054:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003058:	2214      	movs	r2, #20
 800305a:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800305e:	2216      	movs	r2, #22
 8003060:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003064:	2218      	movs	r2, #24
 8003066:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800306a:	221a      	movs	r2, #26
 800306c:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e00a      	b.n	800308a <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3318      	adds	r3, #24
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	18d3      	adds	r3, r2, r3
 800307e:	3306      	adds	r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d9f1      	bls.n	8003074 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	e009      	b.n	80030aa <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8003096:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003098:	2148      	movs	r1, #72	@ 0x48
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	185b      	adds	r3, r3, r1
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b1a      	cmp	r3, #26
 80030ae:	d9f2      	bls.n	8003096 <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b002      	add	sp, #8
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	200019cc 	.word	0x200019cc

080030c0 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	0002      	movs	r2, r0
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d816      	bhi.n	8003102 <pszTraceGetErrorNotEnoughHandles+0x42>
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <pszTraceGetErrorNotEnoughHandles+0x4c>)
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 80030de:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <pszTraceGetErrorNotEnoughHandles+0x50>)
 80030e0:	e010      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <pszTraceGetErrorNotEnoughHandles+0x54>)
 80030e4:	e00e      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <pszTraceGetErrorNotEnoughHandles+0x58>)
 80030e8:	e00c      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <pszTraceGetErrorNotEnoughHandles+0x5c>)
 80030ec:	e00a      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <pszTraceGetErrorNotEnoughHandles+0x60>)
 80030f0:	e008      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 80030f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <pszTraceGetErrorNotEnoughHandles+0x64>)
 80030f4:	e006      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <pszTraceGetErrorNotEnoughHandles+0x68>)
 80030f8:	e004      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 80030fa:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <pszTraceGetErrorNotEnoughHandles+0x6c>)
 80030fc:	e002      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 80030fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003100:	e000      	b.n	8003104 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08005af4 	.word	0x08005af4
 8003110:	080053dc 	.word	0x080053dc
 8003114:	08005424 	.word	0x08005424
 8003118:	0800546c 	.word	0x0800546c
 800311c:	080054c0 	.word	0x080054c0
 8003120:	0800550c 	.word	0x0800550c
 8003124:	08005558 	.word	0x08005558
 8003128:	080055a4 	.word	0x080055a4
 800312c:	080055f8 	.word	0x080055f8
 8003130:	08005650 	.word	0x08005650
 8003134:	080056ac 	.word	0x080056ac

08003138 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8003140:	f000 f8ec 	bl	800331c <xTraceInitialize>
 8003144:	0003      	movs	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 800314a:	2301      	movs	r3, #1
 800314c:	e021      	b.n	8003192 <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10b      	bne.n	800316c <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8003154:	f7ff fe5b 	bl	8002e0e <xTraceKernelPortEnable>
 8003158:	0003      	movs	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 800315e:	2301      	movs	r3, #1
 8003160:	e017      	b.n	8003192 <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 8003162:	f000 f8a9 	bl	80032b8 <prvTraceInitTimestamps>

		prvTraceStart();
 8003166:	f000 f825 	bl	80031b4 <prvTraceStart>
 800316a:	e011      	b.n	8003190 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d105      	bne.n	800317e <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <xTraceEnable+0x64>)
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fff5 	bl	8004164 <prvTraceError>

		return TRC_FAIL;
 800317a:	2301      	movs	r3, #1
 800317c:	e009      	b.n	8003192 <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <xTraceEnable+0x68>)
 8003186:	0018      	movs	r0, r3
 8003188:	f000 ffec 	bl	8004164 <prvTraceError>

		return TRC_FAIL;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 8003190:	2300      	movs	r3, #0
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	080056dc 	.word	0x080056dc
 80031a0:	0800571c 	.word	0x0800571c

080031a4 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	prvTraceStop();
 80031a8:	f000 f86e 	bl	8003288 <prvTraceStop>

	return TRC_SUCCESS;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80031ba:	2417      	movs	r4, #23
 80031bc:	193b      	adds	r3, r7, r4
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 80031c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <prvTraceStart+0xc4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d050      	beq.n	800326c <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <prvTraceStart+0xc4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d04d      	beq.n	8003270 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 80031d4:	4b29      	ldr	r3, [pc, #164]	@ (800327c <prvTraceStart+0xc8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d14a      	bne.n	8003272 <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e2:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	2301      	movs	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	4b23      	ldr	r3, [pc, #140]	@ (8003280 <prvTraceStart+0xcc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <prvTraceStart+0xcc>)
 80031fa:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 80031fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003278 <prvTraceStart+0xc4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8003204:	f7ff fdf2 	bl	8002dec <prvTraceGetCurrentTaskHandle>
 8003208:	0003      	movs	r3, r0
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff fd22 	bl	8002c54 <prvTraceGetTaskNumberLow16>
 8003210:	0003      	movs	r3, r0
 8003212:	001a      	movs	r2, r3
 8003214:	0025      	movs	r5, r4
 8003216:	197b      	adds	r3, r7, r5
 8003218:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 800321a:	197b      	adds	r3, r7, r5
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8003222:	197c      	adds	r4, r7, r5
 8003224:	2003      	movs	r0, #3
 8003226:	f000 fde9 	bl	8003dfc <prvTraceGetObjectHandle>
 800322a:	0003      	movs	r3, r0
 800322c:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <prvTraceStart+0xd0>)
 8003230:	197b      	adds	r3, r7, r5
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	0019      	movs	r1, r3
 8003236:	2003      	movs	r0, #3
 8003238:	f000 fed8 	bl	8003fec <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 800323c:	197b      	adds	r3, r7, r5
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	0019      	movs	r1, r3
 8003244:	2003      	movs	r0, #3
 8003246:	f000 fc91 	bl	8003b6c <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800324a:	2317      	movs	r3, #23
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fc17 	bl	8003a84 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003256:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <prvTraceStart+0xcc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <prvTraceStart+0xcc>)
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	e002      	b.n	8003272 <prvTraceStart+0xbe>
		return;
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	e000      	b.n	8003272 <prvTraceStart+0xbe>
		return; /* Already running */
 8003270:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bdb0      	pop	{r4, r5, r7, pc}
 8003278:	20002df8 	.word	0x20002df8
 800327c:	20001a30 	.word	0x20001a30
 8003280:	200019b4 	.word	0x200019b4
 8003284:	0800575c 	.word	0x0800575c

08003288 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 800328c:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <prvTraceStop+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <prvTraceStop+0x28>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <prvTraceStop+0x2c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80032a4:	4b03      	ldr	r3, [pc, #12]	@ (80032b4 <prvTraceStop+0x2c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4798      	blx	r3
	}
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20002df8 	.word	0x20002df8
 80032b4:	200019c0 	.word	0x200019c0

080032b8 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <prvTraceInitTimestamps+0x14>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <prvTraceInitTimestamps+0x18>)
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	e000e018 	.word	0xe000e018
 80032d0:	200019c4 	.word	0x200019c4

080032d4 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2100      	movs	r1, #0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 feec 	bl	80040c0 <prvTraceOpenSymbol>
 80032e8:	0002      	movs	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8003304:	230c      	movs	r3, #12
 8003306:	18fa      	adds	r2, r7, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0011      	movs	r1, r2
 800330c:	0018      	movs	r0, r3
 800330e:	f7ff ffe1 	bl	80032d4 <xTraceStringRegister>

	return trcStr;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bd80      	pop	{r7, pc}

0800331c <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8003320:	4b7f      	ldr	r3, [pc, #508]	@ (8003520 <xTraceInitialize+0x204>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8003328:	2300      	movs	r3, #0
 800332a:	e0f6      	b.n	800351a <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 800332c:	4b7d      	ldr	r3, [pc, #500]	@ (8003524 <xTraceInitialize+0x208>)
 800332e:	2201      	movs	r2, #1
 8003330:	4252      	negs	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8003334:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <xTraceInitialize+0x20c>)
 8003336:	2201      	movs	r2, #1
 8003338:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 800333a:	4b7c      	ldr	r3, [pc, #496]	@ (800352c <xTraceInitialize+0x210>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8003340:	4b7b      	ldr	r3, [pc, #492]	@ (8003530 <xTraceInitialize+0x214>)
 8003342:	4a7c      	ldr	r2, [pc, #496]	@ (8003534 <xTraceInitialize+0x218>)
 8003344:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8003346:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <xTraceInitialize+0x21c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b7c      	ldr	r3, [pc, #496]	@ (800353c <xTraceInitialize+0x220>)
 800334c:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 800334e:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <xTraceInitialize+0x224>)
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fd53 	bl	8002dfc <xTraceKernelPortInitialize>
 8003356:	0003      	movs	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 800335c:	2301      	movs	r3, #1
 800335e:	e0dc      	b.n	800351a <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8003360:	4b73      	ldr	r3, [pc, #460]	@ (8003530 <xTraceInitialize+0x214>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a77      	ldr	r2, [pc, #476]	@ (8003544 <xTraceInitialize+0x228>)
 8003366:	2100      	movs	r1, #0
 8003368:	0018      	movs	r0, r3
 800336a:	f001 ffd7 	bl	800531c <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800336e:	4b70      	ldr	r3, [pc, #448]	@ (8003530 <xTraceInitialize+0x214>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	@ (8003548 <xTraceInitialize+0x22c>)
 8003374:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8003376:	4b6e      	ldr	r3, [pc, #440]	@ (8003530 <xTraceInitialize+0x214>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2207      	movs	r2, #7
 800337c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800337e:	4b6c      	ldr	r3, [pc, #432]	@ (8003530 <xTraceInitialize+0x214>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003386:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <xTraceInitialize+0x214>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6e      	ldr	r2, [pc, #440]	@ (8003544 <xTraceInitialize+0x228>)
 800338c:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800338e:	4b68      	ldr	r3, [pc, #416]	@ (8003530 <xTraceInitialize+0x214>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	22fa      	movs	r2, #250	@ 0xfa
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8003398:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <xTraceInitialize+0x214>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6b      	ldr	r2, [pc, #428]	@ (800354c <xTraceInitialize+0x230>)
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80033a0:	4b63      	ldr	r3, [pc, #396]	@ (8003530 <xTraceInitialize+0x214>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80033a8:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <xTraceInitialize+0x214>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80033b0:	f7ff fd34 	bl	8002e1c <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80033b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <xTraceInitialize+0x214>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2398      	movs	r3, #152	@ 0x98
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4964      	ldr	r1, [pc, #400]	@ (8003550 <xTraceInitialize+0x234>)
 80033be:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80033c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <xTraceInitialize+0x214>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2399      	movs	r3, #153	@ 0x99
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	21c8      	movs	r1, #200	@ 0xc8
 80033ca:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80033cc:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <xTraceInitialize+0x214>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	239a      	movs	r3, #154	@ 0x9a
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	2101      	movs	r1, #1
 80033d6:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80033d8:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <xTraceInitialize+0x214>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	23ef      	movs	r3, #239	@ 0xef
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	495c      	ldr	r1, [pc, #368]	@ (8003554 <xTraceInitialize+0x238>)
 80033e2:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80033e4:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <xTraceInitialize+0x214>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22f0      	movs	r2, #240	@ 0xf0
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4694      	mov	ip, r2
 80033ee:	4463      	add	r3, ip
 80033f0:	4959      	ldr	r1, [pc, #356]	@ (8003558 <xTraceInitialize+0x23c>)
 80033f2:	2250      	movs	r2, #80	@ 0x50
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 fdd5 	bl	8003fa4 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80033fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003530 <xTraceInitialize+0x214>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2382      	movs	r3, #130	@ 0x82
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4956      	ldr	r1, [pc, #344]	@ (800355c <xTraceInitialize+0x240>)
 8003404:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8003406:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <xTraceInitialize+0x214>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a55      	ldr	r2, [pc, #340]	@ (8003560 <xTraceInitialize+0x244>)
 800340c:	210a      	movs	r1, #10
 800340e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8003410:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <xTraceInitialize+0x214>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a53      	ldr	r2, [pc, #332]	@ (8003564 <xTraceInitialize+0x248>)
 8003416:	210b      	movs	r1, #11
 8003418:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 800341a:	4b45      	ldr	r3, [pc, #276]	@ (8003530 <xTraceInitialize+0x214>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <xTraceInitialize+0x24c>)
 8003420:	210c      	movs	r1, #12
 8003422:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8003424:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <xTraceInitialize+0x214>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a50      	ldr	r2, [pc, #320]	@ (800356c <xTraceInitialize+0x250>)
 800342a:	210d      	movs	r1, #13
 800342c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 800342e:	4b40      	ldr	r3, [pc, #256]	@ (8003530 <xTraceInitialize+0x214>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <xTraceInitialize+0x254>)
 8003434:	2171      	movs	r1, #113	@ 0x71
 8003436:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8003438:	4b3d      	ldr	r3, [pc, #244]	@ (8003530 <xTraceInitialize+0x214>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4d      	ldr	r2, [pc, #308]	@ (8003574 <xTraceInitialize+0x258>)
 800343e:	2172      	movs	r1, #114	@ 0x72
 8003440:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8003442:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <xTraceInitialize+0x214>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4c      	ldr	r2, [pc, #304]	@ (8003578 <xTraceInitialize+0x25c>)
 8003448:	2173      	movs	r1, #115	@ 0x73
 800344a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 800344c:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <xTraceInitialize+0x214>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <xTraceInitialize+0x260>)
 8003452:	2174      	movs	r1, #116	@ 0x74
 8003454:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8003456:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <xTraceInitialize+0x214>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	239e      	movs	r3, #158	@ 0x9e
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	21f1      	movs	r1, #241	@ 0xf1
 8003460:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 8003462:	4b33      	ldr	r3, [pc, #204]	@ (8003530 <xTraceInitialize+0x214>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a46      	ldr	r2, [pc, #280]	@ (8003580 <xTraceInitialize+0x264>)
 8003468:	21f2      	movs	r1, #242	@ 0xf2
 800346a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 800346c:	4b30      	ldr	r3, [pc, #192]	@ (8003530 <xTraceInitialize+0x214>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a44      	ldr	r2, [pc, #272]	@ (8003584 <xTraceInitialize+0x268>)
 8003472:	21f3      	movs	r1, #243	@ 0xf3
 8003474:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8003476:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <xTraceInitialize+0x214>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a43      	ldr	r2, [pc, #268]	@ (8003588 <xTraceInitialize+0x26c>)
 800347c:	21f4      	movs	r1, #244	@ 0xf4
 800347e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8003480:	f7ff fd96 	bl	8002fb0 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8003484:	4b2a      	ldr	r3, [pc, #168]	@ (8003530 <xTraceInitialize+0x214>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	22f4      	movs	r2, #244	@ 0xf4
 800348a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 800348c:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <xTraceInitialize+0x214>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	22f3      	movs	r2, #243	@ 0xf3
 8003492:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <xTraceInitialize+0x214>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	22f2      	movs	r2, #242	@ 0xf2
 800349a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <xTraceInitialize+0x214>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22f1      	movs	r2, #241	@ 0xf1
 80034a2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80034a4:	4b22      	ldr	r3, [pc, #136]	@ (8003530 <xTraceInitialize+0x214>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2274      	movs	r2, #116	@ 0x74
 80034aa:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80034ac:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <xTraceInitialize+0x214>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2273      	movs	r2, #115	@ 0x73
 80034b2:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <xTraceInitialize+0x214>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2272      	movs	r2, #114	@ 0x72
 80034ba:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003530 <xTraceInitialize+0x214>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2271      	movs	r2, #113	@ 0x71
 80034c2:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80034c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <xTraceInitialize+0x214>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2204      	movs	r2, #4
 80034ca:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80034cc:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <xTraceInitialize+0x214>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2203      	movs	r2, #3
 80034d2:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80034d4:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <xTraceInitialize+0x214>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2202      	movs	r2, #2
 80034da:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80034dc:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <xTraceInitialize+0x214>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <xTraceInitialize+0x210>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d012      	beq.n	8003512 <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80034ec:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <xTraceInitialize+0x214>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	22f0      	movs	r2, #240	@ 0xf0
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	1898      	adds	r0, r3, r2
 80034f6:	4b0d      	ldr	r3, [pc, #52]	@ (800352c <xTraceInitialize+0x210>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2250      	movs	r2, #80	@ 0x50
 80034fc:	0019      	movs	r1, r3
 80034fe:	f000 fd51 	bl	8003fa4 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003502:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <xTraceInitialize+0x214>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	23ee      	movs	r3, #238	@ 0xee
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	2101      	movs	r1, #1
 800350c:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 800350e:	f7ff febb 	bl	8003288 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8003512:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <xTraceInitialize+0x204>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20002dfc 	.word	0x20002dfc
 8003524:	200019c8 	.word	0x200019c8
 8003528:	200019ca 	.word	0x200019ca
 800352c:	20001a30 	.word	0x20001a30
 8003530:	20002df8 	.word	0x20002df8
 8003534:	20001a34 	.word	0x20001a34
 8003538:	e000e018 	.word	0xe000e018
 800353c:	200019c4 	.word	0x200019c4
 8003540:	200019a0 	.word	0x200019a0
 8003544:	000013c4 	.word	0x000013c4
 8003548:	00001aa1 	.word	0x00001aa1
 800354c:	f0f0f0f0 	.word	0xf0f0f0f0
 8003550:	f1f1f1f1 	.word	0xf1f1f1f1
 8003554:	f2f2f2f2 	.word	0xf2f2f2f2
 8003558:	080057d8 	.word	0x080057d8
 800355c:	f3f3f3f3 	.word	0xf3f3f3f3
 8003560:	000013b8 	.word	0x000013b8
 8003564:	000013b9 	.word	0x000013b9
 8003568:	000013ba 	.word	0x000013ba
 800356c:	000013bb 	.word	0x000013bb
 8003570:	000013bc 	.word	0x000013bc
 8003574:	000013bd 	.word	0x000013bd
 8003578:	000013be 	.word	0x000013be
 800357c:	000013bf 	.word	0x000013bf
 8003580:	000013c1 	.word	0x000013c1
 8003584:	000013c2 	.word	0x000013c2
 8003588:	000013c3 	.word	0x000013c3

0800358c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d04d      	beq.n	800363c <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80035a0:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <prvTraceStoreTaskReady+0xbc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d04b      	beq.n	8003640 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80035a8:	4b28      	ldr	r3, [pc, #160]	@ (800364c <prvTraceStoreTaskReady+0xc0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80035b0:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <prvTraceStoreTaskReady+0xc4>)
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 fdd6 	bl	8004164 <prvTraceError>
		return;
 80035b8:	e043      	b.n	8003642 <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	60fb      	str	r3, [r7, #12]
  return(result);
 80035c0:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	2301      	movs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <prvTraceStoreTaskReady+0xc0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <prvTraceStoreTaskReady+0xc0>)
 80035d8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80035da:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <prvTraceStoreTaskReady+0xc8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80035e4:	251a      	movs	r5, #26
 80035e6:	197c      	adds	r4, r7, r5
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <prvTraceStoreTaskReady+0xcc>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 feae 	bl	800434c <prvTraceGetDTS>
 80035f0:	0003      	movs	r3, r0
 80035f2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 80035f4:	2419      	movs	r4, #25
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	1dfa      	adds	r2, r7, #7
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80035fe:	f000 fb89 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 8003602:	0003      	movs	r3, r0
 8003604:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2202      	movs	r2, #2
 8003610:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	197a      	adds	r2, r7, r5
 8003616:	8812      	ldrh	r2, [r2, #0]
 8003618:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	193a      	adds	r2, r7, r4
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003622:	f000 fe69 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <prvTraceStoreTaskReady+0xc0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <prvTraceStoreTaskReady+0xc0>)
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	e002      	b.n	8003642 <prvTraceStoreTaskReady+0xb6>
		return;
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	e000      	b.n	8003642 <prvTraceStoreTaskReady+0xb6>
		return;
 8003640:	46c0      	nop			@ (mov r8, r8)
}
 8003642:	46bd      	mov	sp, r7
 8003644:	b008      	add	sp, #32
 8003646:	bdb0      	pop	{r4, r5, r7, pc}
 8003648:	20000010 	.word	0x20000010
 800364c:	200019b4 	.word	0x200019b4
 8003650:	080057ec 	.word	0x080057ec
 8003654:	20002df8 	.word	0x20002df8
 8003658:	0000ffff 	.word	0x0000ffff

0800365c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b08e      	sub	sp, #56	@ 0x38
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8003668:	4b4c      	ldr	r3, [pc, #304]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d100      	bne.n	8003672 <vTraceStoreMemMangEvent+0x16>
 8003670:	e090      	b.n	8003794 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	da03      	bge.n	8003680 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	425b      	negs	r3, r3
 800367c:	637b      	str	r3, [r7, #52]	@ 0x34
 800367e:	e001      	b.n	8003684 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003684:	f3ef 8310 	mrs	r3, PRIMASK
 8003688:	61bb      	str	r3, [r7, #24]
  return(result);
 800368a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
 800368e:	2301      	movs	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	4b41      	ldr	r3, [pc, #260]	@ (80037a0 <vTraceStoreMemMangEvent+0x144>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4b3f      	ldr	r3, [pc, #252]	@ (80037a0 <vTraceStoreMemMangEvent+0x144>)
 80036a2:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80036aa:	4b3c      	ldr	r3, [pc, #240]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	188a      	adds	r2, r1, r2
 80036b8:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 80036ba:	4b38      	ldr	r3, [pc, #224]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c0:	4b36      	ldr	r3, [pc, #216]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d905      	bls.n	80036d6 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 80036ca:	4b34      	ldr	r3, [pc, #208]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b33      	ldr	r3, [pc, #204]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 80036d6:	4b31      	ldr	r3, [pc, #196]	@ (800379c <vTraceStoreMemMangEvent+0x140>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d04e      	beq.n	800377e <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80036e0:	20ff      	movs	r0, #255	@ 0xff
 80036e2:	f000 fe33 	bl	800434c <prvTraceGetDTS>
 80036e6:	0003      	movs	r3, r0
 80036e8:	001a      	movs	r2, r3
 80036ea:	242f      	movs	r4, #47	@ 0x2f
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	4a2c      	ldr	r2, [pc, #176]	@ (80037a4 <vTraceStoreMemMangEvent+0x148>)
 80036f4:	0019      	movs	r1, r3
 80036f6:	0010      	movs	r0, r2
 80036f8:	f000 f92c 	bl	8003954 <prvTraceGetParam>
 80036fc:	0002      	movs	r2, r0
 80036fe:	252c      	movs	r5, #44	@ 0x2c
 8003700:	197b      	adds	r3, r7, r5
 8003702:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003704:	f000 fb06 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 8003708:	0003      	movs	r3, r0
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d035      	beq.n	800377e <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	193a      	adds	r2, r7, r4
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	197a      	adds	r2, r7, r5
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003728:	f000 fde6 	bl	80042f8 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <vTraceStoreMemMangEvent+0x148>)
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f000 f90e 	bl	8003954 <prvTraceGetParam>
 8003738:	0002      	movs	r2, r0
 800373a:	2426      	movs	r4, #38	@ 0x26
 800373c:	193b      	adds	r3, r7, r4
 800373e:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8003740:	2525      	movs	r5, #37	@ 0x25
 8003742:	197b      	adds	r3, r7, r5
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003748:	f000 fae4 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 800374c:	0003      	movs	r3, r0
 800374e:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	193a      	adds	r2, r7, r4
 800375a:	8812      	ldrh	r2, [r2, #0]
 800375c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	197a      	adds	r2, r7, r5
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3301      	adds	r3, #1
 800376c:	b2da      	uxtb	r2, r3
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 800377a:	f000 fdbd 	bl	80042f8 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <vTraceStoreMemMangEvent+0x144>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <vTraceStoreMemMangEvent+0x144>)
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	e000      	b.n	8003796 <vTraceStoreMemMangEvent+0x13a>
		return;
 8003794:	46c0      	nop			@ (mov r8, r8)
}
 8003796:	46bd      	mov	sp, r7
 8003798:	b00e      	add	sp, #56	@ 0x38
 800379a:	bdb0      	pop	{r4, r5, r7, pc}
 800379c:	20002df8 	.word	0x20002df8
 80037a0:	200019b4 	.word	0x200019b4
 80037a4:	0000ffff 	.word	0x0000ffff

080037a8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	230b      	movs	r3, #11
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	1c0a      	adds	r2, r1, #0
 80037b8:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80037ba:	4b29      	ldr	r3, [pc, #164]	@ (8003860 <prvTraceStoreKernelCall+0xb8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80037c2:	4b28      	ldr	r3, [pc, #160]	@ (8003864 <prvTraceStoreKernelCall+0xbc>)
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fccd 	bl	8004164 <prvTraceError>
		return;
 80037ca:	e045      	b.n	8003858 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 80037cc:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <prvTraceStoreKernelCall+0xc0>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d040      	beq.n	8003856 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	617b      	str	r3, [r7, #20]
  return(result);
 80037da:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	2301      	movs	r3, #1
 80037e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <prvTraceStoreKernelCall+0xb8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <prvTraceStoreKernelCall+0xb8>)
 80037f2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <prvTraceStoreKernelCall+0xc4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80037fe:	2522      	movs	r5, #34	@ 0x22
 8003800:	197c      	adds	r4, r7, r5
 8003802:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <prvTraceStoreKernelCall+0xc8>)
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fda1 	bl	800434c <prvTraceGetDTS>
 800380a:	0003      	movs	r3, r0
 800380c:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800380e:	2421      	movs	r4, #33	@ 0x21
 8003810:	193b      	adds	r3, r7, r4
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003816:	f000 fa7d 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 800381a:	0003      	movs	r3, r0
 800381c:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	197a      	adds	r2, r7, r5
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	193a      	adds	r2, r7, r4
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800383c:	f000 fd5c 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003840:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <prvTraceStoreKernelCall+0xb8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <prvTraceStoreKernelCall+0xb8>)
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	e000      	b.n	8003858 <prvTraceStoreKernelCall+0xb0>
		return;
 8003856:	46c0      	nop			@ (mov r8, r8)
}
 8003858:	46bd      	mov	sp, r7
 800385a:	b00a      	add	sp, #40	@ 0x28
 800385c:	bdb0      	pop	{r4, r5, r7, pc}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	200019b4 	.word	0x200019b4
 8003864:	08005824 	.word	0x08005824
 8003868:	200019bc 	.word	0x200019bc
 800386c:	20002df8 	.word	0x20002df8
 8003870:	0000ffff 	.word	0x0000ffff

08003874 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b08b      	sub	sp, #44	@ 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	230b      	movs	r3, #11
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	1c0a      	adds	r2, r1, #0
 8003886:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8003888:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <prvTraceStoreKernelCallWithParam+0xd0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8003890:	4b2d      	ldr	r3, [pc, #180]	@ (8003948 <prvTraceStoreKernelCallWithParam+0xd4>)
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fc66 	bl	8004164 <prvTraceError>
		return;
 8003898:	e051      	b.n	800393e <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389a:	f3ef 8310 	mrs	r3, PRIMASK
 800389e:	617b      	str	r3, [r7, #20]
  return(result);
 80038a0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a4:	2301      	movs	r3, #1
 80038a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f383 8810 	msr	PRIMASK, r3
}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	4b24      	ldr	r3, [pc, #144]	@ (8003944 <prvTraceStoreKernelCallWithParam+0xd0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <prvTraceStoreKernelCallWithParam+0xd0>)
 80038b8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80038ba:	4b24      	ldr	r3, [pc, #144]	@ (800394c <prvTraceStoreKernelCallWithParam+0xd8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d031      	beq.n	8003928 <prvTraceStoreKernelCallWithParam+0xb4>
 80038c4:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <prvTraceStoreKernelCallWithParam+0xdc>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02d      	beq.n	8003928 <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80038cc:	20ff      	movs	r0, #255	@ 0xff
 80038ce:	f000 fd3d 	bl	800434c <prvTraceGetDTS>
 80038d2:	0003      	movs	r3, r0
 80038d4:	001a      	movs	r2, r3
 80038d6:	2423      	movs	r4, #35	@ 0x23
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	0019      	movs	r1, r3
 80038e0:	20ff      	movs	r0, #255	@ 0xff
 80038e2:	f000 f837 	bl	8003954 <prvTraceGetParam>
 80038e6:	0002      	movs	r2, r0
 80038e8:	2522      	movs	r5, #34	@ 0x22
 80038ea:	197b      	adds	r3, r7, r5
 80038ec:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80038ee:	2621      	movs	r6, #33	@ 0x21
 80038f0:	19bb      	adds	r3, r7, r6
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 80038f6:	f000 fa0d 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 80038fa:	0003      	movs	r3, r0
 80038fc:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d011      	beq.n	8003928 <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	193a      	adds	r2, r7, r4
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	19ba      	adds	r2, r7, r6
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	197a      	adds	r2, r7, r5
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003924:	f000 fce8 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <prvTraceStoreKernelCallWithParam+0xd0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			@ (mov r8, r8)
}
 800393e:	46bd      	mov	sp, r7
 8003940:	b00b      	add	sp, #44	@ 0x2c
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003944:	200019b4 	.word	0x200019b4
 8003948:	0800585c 	.word	0x0800585c
 800394c:	20002df8 	.word	0x20002df8
 8003950:	200019bc 	.word	0x200019bc

08003954 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d801      	bhi.n	800396a <prvTraceGetParam+0x16>
	{
		return param;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	e01e      	b.n	80039a8 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 800396a:	f000 f9d3 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 800396e:	0003      	movs	r3, r0
 8003970:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	43db      	mvns	r3, r3
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	43db      	mvns	r3, r3
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4013      	ands	r3, r2
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800399e:	f000 fcab 	bl	80042f8 <prvTraceUpdateCounters>
		}

		return param & param_max;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4013      	ands	r3, r2
	}
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 80039ba:	2326      	movs	r3, #38	@ 0x26
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 80039c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80039ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 fbc9 	bl	8004164 <prvTraceError>
		return;
 80039d2:	e04a      	b.n	8003a6a <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	613b      	str	r3, [r7, #16]
  return(result);
 80039da:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80039f2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80039f4:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d02a      	beq.n	8003a54 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 80039fe:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d026      	beq.n	8003a54 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8003a06:	20ff      	movs	r0, #255	@ 0xff
 8003a08:	f000 fca0 	bl	800434c <prvTraceGetDTS>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	241f      	movs	r4, #31
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f7ff ff99 	bl	8003954 <prvTraceGetParam>
 8003a22:	0002      	movs	r2, r0
 8003a24:	2526      	movs	r5, #38	@ 0x26
 8003a26:	197b      	adds	r3, r7, r5
 8003a28:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003a2a:	f000 f973 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	193a      	adds	r2, r7, r4
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	197a      	adds	r2, r7, r5
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003a50:	f000 fc52 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1e5a      	subs	r2, r3, #1
 8003a5a:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
}
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b00a      	add	sp, #40	@ 0x28
 8003a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a70:	200019b4 	.word	0x200019b4
 8003a74:	08005894 	.word	0x08005894
 8003a78:	20002df8 	.word	0x20002df8
 8003a7c:	200019bc 	.word	0x200019bc
 8003a80:	0000ffff 	.word	0x0000ffff

08003a84 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a96:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <prvTraceStoreTaskswitch+0xd8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <prvTraceStoreTaskswitch+0xd8>)
 8003aae:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b60 <prvTraceStoreTaskswitch+0xdc>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	1dfa      	adds	r2, r7, #7
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d03f      	beq.n	8003b3c <prvTraceStoreTaskswitch+0xb8>
 8003abc:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <prvTraceStoreTaskswitch+0xe0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03a      	beq.n	8003b3c <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003ac6:	231a      	movs	r3, #26
 8003ac8:	18fc      	adds	r4, r7, r3
 8003aca:	4b27      	ldr	r3, [pc, #156]	@ (8003b68 <prvTraceStoreTaskswitch+0xe4>)
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 fc3d 	bl	800434c <prvTraceGetDTS>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <prvTraceStoreTaskswitch+0xdc>)
 8003ad8:	1dfa      	adds	r2, r7, #7
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8003ade:	2319      	movs	r3, #25
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b60 <prvTraceStoreTaskswitch+0xdc>)
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003ae8:	f000 f914 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 8003aec:	0003      	movs	r3, r0
 8003aee:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d022      	beq.n	8003b3c <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <prvTraceStoreTaskswitch+0xdc>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	0019      	movs	r1, r3
 8003afc:	2003      	movs	r0, #3
 8003afe:	f000 f8c1 	bl	8003c84 <prvTraceGetObjectState>
 8003b02:	0003      	movs	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d103      	bne.n	8003b10 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2206      	movs	r2, #6
 8003b14:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	221a      	movs	r2, #26
 8003b1a:	18ba      	adds	r2, r7, r2
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2219      	movs	r2, #25
 8003b24:	18ba      	adds	r2, r7, r2
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <prvTraceStoreTaskswitch+0xdc>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	0019      	movs	r1, r3
 8003b32:	2003      	movs	r0, #3
 8003b34:	f000 f876 	bl	8003c24 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8003b38:	f000 fbde 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8003b3c:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <prvTraceStoreTaskswitch+0xd8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1e5a      	subs	r2, r3, #1
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <prvTraceStoreTaskswitch+0xd8>)
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b009      	add	sp, #36	@ 0x24
 8003b58:	bd90      	pop	{r4, r7, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	200019b4 	.word	0x200019b4
 8003b60:	200019bc 	.word	0x200019bc
 8003b64:	20002df8 	.word	0x20002df8
 8003b68:	0000ffff 	.word	0x0000ffff

08003b6c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	0004      	movs	r4, r0
 8003b74:	0008      	movs	r0, r1
 8003b76:	0011      	movs	r1, r2
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	1c22      	adds	r2, r4, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	1dbb      	adds	r3, r7, #6
 8003b80:	1c02      	adds	r2, r0, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	1d7b      	adds	r3, r7, #5
 8003b86:	1c0a      	adds	r2, r1, #0
 8003b88:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <prvTraceSetPriorityProperty+0x60>)
 8003b8c:	681c      	ldr	r4, [r3, #0]
 8003b8e:	1dfb      	adds	r3, r7, #7
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	1dbb      	adds	r3, r7, #6
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f8e5 	bl	8003d68 <uiIndexOfObject>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <prvTraceSetPriorityProperty+0x60>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	215c      	movs	r1, #92	@ 0x5c
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	185b      	adds	r3, r3, r1
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	18c3      	adds	r3, r0, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	2288      	movs	r2, #136	@ 0x88
 8003bb8:	18e3      	adds	r3, r4, r3
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	1d7a      	adds	r2, r7, #5
 8003bbe:	7812      	ldrb	r2, [r2, #0]
 8003bc0:	701a      	strb	r2, [r3, #0]
}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b003      	add	sp, #12
 8003bc8:	bd90      	pop	{r4, r7, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	20002df8 	.word	0x20002df8

08003bd0 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	1c0a      	adds	r2, r1, #0
 8003be0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8003be2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <prvTraceGetPriorityProperty+0x50>)
 8003be4:	681c      	ldr	r4, [r3, #0]
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	1dbb      	adds	r3, r7, #6
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	0011      	movs	r1, r2
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 f8b9 	bl	8003d68 <uiIndexOfObject>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <prvTraceGetPriorityProperty+0x50>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	215c      	movs	r1, #92	@ 0x5c
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	185b      	adds	r3, r3, r1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	18c3      	adds	r3, r0, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	2288      	movs	r2, #136	@ 0x88
 8003c10:	18e3      	adds	r3, r4, r3
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b003      	add	sp, #12
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	20002df8 	.word	0x20002df8

08003c24 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	0004      	movs	r4, r0
 8003c2c:	0008      	movs	r0, r1
 8003c2e:	0011      	movs	r1, r2
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	1c22      	adds	r2, r4, #0
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	1c02      	adds	r2, r0, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	1d7b      	adds	r3, r7, #5
 8003c3e:	1c0a      	adds	r2, r1, #0
 8003c40:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003c42:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <prvTraceSetObjectState+0x5c>)
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	1dbb      	adds	r3, r7, #6
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 f889 	bl	8003d68 <uiIndexOfObject>
 8003c56:	0003      	movs	r3, r0
 8003c58:	0018      	movs	r0, r3
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <prvTraceSetObjectState+0x5c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	1dfb      	adds	r3, r7, #7
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	215c      	movs	r1, #92	@ 0x5c
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	185b      	adds	r3, r3, r1
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	18c3      	adds	r3, r0, r3
 8003c6c:	2288      	movs	r2, #136	@ 0x88
 8003c6e:	18e3      	adds	r3, r4, r3
 8003c70:	189b      	adds	r3, r3, r2
 8003c72:	1d7a      	adds	r2, r7, #5
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b003      	add	sp, #12
 8003c7e:	bd90      	pop	{r4, r7, pc}
 8003c80:	20002df8 	.word	0x20002df8

08003c84 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	1dfb      	adds	r3, r7, #7
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	1c0a      	adds	r2, r1, #0
 8003c94:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <prvTraceGetObjectState+0x4c>)
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	1dbb      	adds	r3, r7, #6
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f85f 	bl	8003d68 <uiIndexOfObject>
 8003caa:	0003      	movs	r3, r0
 8003cac:	0018      	movs	r0, r3
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <prvTraceGetObjectState+0x4c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	215c      	movs	r1, #92	@ 0x5c
 8003cb8:	18d3      	adds	r3, r2, r3
 8003cba:	185b      	adds	r3, r3, r1
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	18c3      	adds	r3, r0, r3
 8003cc0:	2288      	movs	r2, #136	@ 0x88
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b003      	add	sp, #12
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	20002df8 	.word	0x20002df8

08003cd4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	0002      	movs	r2, r0
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <prvTraceSetTaskInstanceFinished+0x3c>)
 8003ce2:	681c      	ldr	r4, [r3, #0]
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2103      	movs	r1, #3
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 f83c 	bl	8003d68 <uiIndexOfObject>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <prvTraceSetTaskInstanceFinished+0x3c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	225f      	movs	r2, #95	@ 0x5f
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	18cb      	adds	r3, r1, r3
 8003cfe:	2288      	movs	r2, #136	@ 0x88
 8003d00:	18e3      	adds	r3, r4, r3
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
#endif
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b003      	add	sp, #12
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	20002df8 	.word	0x20002df8

08003d14 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003d18:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e018      	b.n	8003d58 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003d26:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	23fa      	movs	r3, #250	@ 0xfa
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d305      	bcc.n	8003d40 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <prvTraceNextFreeEventBufferSlot+0x50>)
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fa14 	bl	8004164 <prvTraceError>
		return (void*)0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e00b      	b.n	8003d58 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	2182      	movs	r1, #130	@ 0x82
 8003d4e:	00c9      	lsls	r1, r1, #3
 8003d50:	468c      	mov	ip, r1
 8003d52:	4463      	add	r3, ip
 8003d54:	18d3      	adds	r3, r2, r3
 8003d56:	3304      	adds	r3, #4
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	20002df8 	.word	0x20002df8
 8003d64:	080058cc 	.word	0x080058cc

08003d68 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	0002      	movs	r2, r0
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	1dbb      	adds	r3, r7, #6
 8003d76:	1c0a      	adds	r2, r1, #0
 8003d78:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003d7a:	1dbb      	adds	r3, r7, #6
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d82e      	bhi.n	8003de0 <uiIndexOfObject+0x78>
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02a      	beq.n	8003de0 <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <uiIndexOfObject+0x8c>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	1dbb      	adds	r3, r7, #6
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2150      	movs	r1, #80	@ 0x50
 8003d94:	18d3      	adds	r3, r2, r3
 8003d96:	185b      	adds	r3, r3, r1
 8003d98:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003d9a:	1dfa      	adds	r2, r7, #7
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d81e      	bhi.n	8003de0 <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003da2:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <uiIndexOfObject+0x8c>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	1dbb      	adds	r3, r7, #6
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	3338      	adds	r3, #56	@ 0x38
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	3304      	adds	r3, #4
 8003db2:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <uiIndexOfObject+0x8c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2068      	movs	r0, #104	@ 0x68
 8003dbe:	18d3      	adds	r3, r2, r3
 8003dc0:	181b      	adds	r3, r3, r0
 8003dc2:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003dc4:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4353      	muls	r3, r2
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	200e      	movs	r0, #14
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	188a      	adds	r2, r1, r2
 8003dd8:	801a      	strh	r2, [r3, #0]
		return index;
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	e004      	b.n	8003dea <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <uiIndexOfObject+0x90>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 f9be 	bl	8004164 <prvTraceError>
	return 0;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	20002df8 	.word	0x20002df8
 8003df8:	080058f4 	.word	0x080058f4

08003dfc <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b089      	sub	sp, #36	@ 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	0002      	movs	r2, r0
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e08:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	2301      	movs	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f50 <prvTraceGetObjectHandle+0x154>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	4b4a      	ldr	r3, [pc, #296]	@ (8003f50 <prvTraceGetObjectHandle+0x154>)
 8003e26:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e2e:	0052      	lsls	r2, r2, #1
 8003e30:	5ad3      	ldrh	r3, [r2, r3]
 8003e32:	001a      	movs	r2, r3
 8003e34:	4b48      	ldr	r3, [pc, #288]	@ (8003f58 <prvTraceGetObjectHandle+0x15c>)
 8003e36:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003e38:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <prvTraceGetObjectHandle+0x15c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a45      	ldr	r2, [pc, #276]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e3e:	2148      	movs	r1, #72	@ 0x48
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	185b      	adds	r3, r3, r1
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d117      	bne.n	8003e7a <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003e4a:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <prvTraceGetObjectHandle+0x15c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003e50:	1dfb      	adds	r3, r7, #7
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	493f      	ldr	r1, [pc, #252]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e56:	3308      	adds	r3, #8
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	18cb      	adds	r3, r1, r3
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003e66:	4b3c      	ldr	r3, [pc, #240]	@ (8003f58 <prvTraceGetObjectHandle+0x15c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003e6a:	3201      	adds	r2, #1
 8003e6c:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003e6e:	4a39      	ldr	r2, [pc, #228]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e70:	2148      	movs	r1, #72	@ 0x48
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	185b      	adds	r3, r3, r1
 8003e76:	1c02      	adds	r2, r0, #0
 8003e78:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003e7a:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <prvTraceGetObjectHandle+0x15c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	241f      	movs	r4, #31
 8003e80:	193b      	adds	r3, r7, r4
 8003e82:	4934      	ldr	r1, [pc, #208]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e84:	2048      	movs	r0, #72	@ 0x48
 8003e86:	188a      	adds	r2, r1, r2
 8003e88:	1812      	adds	r2, r2, r0
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	4b30      	ldr	r3, [pc, #192]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e94:	0052      	lsls	r2, r2, #1
 8003e96:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	492d      	ldr	r1, [pc, #180]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	18cb      	adds	r3, r1, r3
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d90c      	bls.n	8003ec6 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff f905 	bl	80030c0 <pszTraceGetErrorNotEnoughHandles>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 f953 	bl	8004164 <prvTraceError>
		handle = 0;
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e031      	b.n	8003f2a <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003ecc:	0059      	lsls	r1, r3, #1
 8003ece:	5a8a      	ldrh	r2, [r1, r2]
 8003ed0:	3201      	adds	r2, #1
 8003ed2:	b291      	uxth	r1, r2
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003eda:	1dfb      	adds	r3, r7, #7
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003ee0:	0052      	lsls	r2, r2, #1
 8003ee2:	5ad3      	ldrh	r3, [r2, r3]
 8003ee4:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003eec:	3308      	adds	r3, #8
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003efa:	1dfb      	adds	r3, r7, #7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003f00:	3318      	adds	r3, #24
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	18d3      	adds	r3, r2, r3
 8003f06:	3306      	adds	r3, #6
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	001a      	movs	r2, r3
		if (hndCount >
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	dd0b      	ble.n	8003f2a <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8003f1a:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <prvTraceGetObjectHandle+0x158>)
 8003f1e:	3318      	adds	r3, #24
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	3306      	adds	r3, #6
 8003f26:	1c0a      	adds	r2, r1, #0
 8003f28:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <prvTraceGetObjectHandle+0x154>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <prvTraceGetObjectHandle+0x154>)
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)

	return handle;
 8003f40:	231f      	movs	r3, #31
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	781b      	ldrb	r3, [r3, #0]
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b009      	add	sp, #36	@ 0x24
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	200019b4 	.word	0x200019b4
 8003f54:	200019cc 	.word	0x200019cc
 8003f58:	20002e00 	.word	0x20002e00

08003f5c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	0002      	movs	r2, r0
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	1dbb      	adds	r3, r7, #6
 8003f6a:	1c0a      	adds	r2, r1, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8003f6e:	250e      	movs	r5, #14
 8003f70:	197c      	adds	r4, r7, r5
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	1dbb      	adds	r3, r7, #6
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff fef3 	bl	8003d68 <uiIndexOfObject>
 8003f82:	0003      	movs	r3, r0
 8003f84:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <prvMarkObjectAsUsed+0x44>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2188      	movs	r1, #136	@ 0x88
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	185b      	adds	r3, r3, r1
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
}
 8003f98:	46c0      	nop			@ (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b004      	add	sp, #16
 8003f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa0:	20002df8 	.word	0x20002df8

08003fa4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e010      	b.n	8003fd8 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	18d2      	adds	r2, r2, r3
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	18cb      	adds	r3, r1, r3
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	18d3      	adds	r3, r2, r3
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3ea      	bcc.n	8003fb6 <prvStrncpy+0x12>
			break;
	}
}
 8003fe0:	e000      	b.n	8003fe4 <prvStrncpy+0x40>
			break;
 8003fe2:	46c0      	nop			@ (mov r8, r8)
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b006      	add	sp, #24
 8003fea:	bd80      	pop	{r7, pc}

08003fec <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	603a      	str	r2, [r7, #0]
 8003ff4:	1dfb      	adds	r3, r7, #7
 8003ff6:	1c02      	adds	r2, r0, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	1dbb      	adds	r3, r7, #6
 8003ffc:	1c0a      	adds	r2, r1, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8004006:	4b28      	ldr	r3, [pc, #160]	@ (80040a8 <prvTraceSetObjectName+0xbc>)
 8004008:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b08      	cmp	r3, #8
 8004010:	d904      	bls.n	800401c <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8004012:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <prvTraceSetObjectName+0xc0>)
 8004014:	0018      	movs	r0, r3
 8004016:	f000 f8a5 	bl	8004164 <prvTraceError>
		return;
 800401a:	e041      	b.n	80040a0 <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 800401c:	1dbb      	adds	r3, r7, #6
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8004024:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <prvTraceSetObjectName+0xc4>)
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f89c 	bl	8004164 <prvTraceError>
		return;
 800402c:	e038      	b.n	80040a0 <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800402e:	4b21      	ldr	r3, [pc, #132]	@ (80040b4 <prvTraceSetObjectName+0xc8>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2150      	movs	r1, #80	@ 0x50
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	185b      	adds	r3, r3, r1
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	1dba      	adds	r2, r7, #6
 8004040:	7812      	ldrb	r2, [r2, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d909      	bls.n	800405a <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	0018      	movs	r0, r3
 800404c:	f7ff f838 	bl	80030c0 <pszTraceGetErrorNotEnoughHandles>
 8004050:	0003      	movs	r3, r0
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f886 	bl	8004164 <prvTraceError>
 8004058:	e022      	b.n	80040a0 <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800405a:	1dfb      	adds	r3, r7, #7
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff fe7f 	bl	8003d68 <uiIndexOfObject>
 800406a:	0003      	movs	r3, r0
 800406c:	001a      	movs	r2, r3
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <prvTraceSetObjectName+0xcc>)
 8004070:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8004072:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <prvTraceSetObjectName+0xd0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d112      	bne.n	80040a0 <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800407a:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <prvTraceSetObjectName+0xc8>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <prvTraceSetObjectName+0xcc>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	3388      	adds	r3, #136	@ 0x88
 8004084:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <prvTraceSetObjectName+0xc8>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	215c      	movs	r1, #92	@ 0x5c
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	185b      	adds	r3, r3, r1
 8004094:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004096:	001a      	movs	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	0019      	movs	r1, r3
 800409c:	f7ff ff82 	bl	8003fa4 <prvStrncpy>
		}
	}
}
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	08005964 	.word	0x08005964
 80040ac:	08005968 	.word	0x08005968
 80040b0:	08005998 	.word	0x08005998
 80040b4:	20002df8 	.word	0x20002df8
 80040b8:	20002e04 	.word	0x20002e04
 80040bc:	20001a30 	.word	0x20001a30

080040c0 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 80040ca:	240b      	movs	r4, #11
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
	crc = 0;
 80040d2:	250a      	movs	r5, #10
 80040d4:	197b      	adds	r3, r7, r5
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 80040da:	193a      	adds	r2, r7, r4
 80040dc:	1979      	adds	r1, r7, r5
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 fb67 	bl	80047b4 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ea:	613b      	str	r3, [r7, #16]
  return(result);
 80040ec:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	2301      	movs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <prvTraceOpenSymbol+0xa0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	4b17      	ldr	r3, [pc, #92]	@ (8004160 <prvTraceOpenSymbol+0xa0>)
 8004104:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8004106:	197b      	adds	r3, r7, r5
 8004108:	7819      	ldrb	r1, [r3, #0]
 800410a:	193b      	adds	r3, r7, r4
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f9f1 	bl	80044f8 <prvTraceLookupSymbolTableEntry>
 8004116:	0002      	movs	r2, r0
 8004118:	261e      	movs	r6, #30
 800411a:	19bb      	adds	r3, r7, r6
 800411c:	801a      	strh	r2, [r3, #0]
	if (!result)
 800411e:	19bb      	adds	r3, r7, r6
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8004126:	197b      	adds	r3, r7, r5
 8004128:	7819      	ldrb	r1, [r3, #0]
 800412a:	193b      	adds	r3, r7, r4
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa6b 	bl	800460c <prvTraceCreateSymbolTableEntry>
 8004136:	0002      	movs	r2, r0
 8004138:	19bb      	adds	r3, r7, r6
 800413a:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 800413c:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <prvTraceOpenSymbol+0xa0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <prvTraceOpenSymbol+0xa0>)
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f383 8810 	msr	PRIMASK, r3
}
 8004150:	46c0      	nop			@ (mov r8, r8)

	return result;
 8004152:	231e      	movs	r3, #30
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	881b      	ldrh	r3, [r3, #0]
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b009      	add	sp, #36	@ 0x24
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004160:	200019b4 	.word	0x200019b4

08004164 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <prvTraceError+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <prvTraceError+0x14>
	{
		xTraceDisable();
 8004174:	f7ff f816 	bl	80031a4 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <prvTraceError+0x58>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d117      	bne.n	80041b0 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <prvTraceError+0x58>)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 8004186:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <prvTraceError+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d010      	beq.n	80041b0 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <prvTraceError+0x54>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	22f0      	movs	r2, #240	@ 0xf0
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	1898      	adds	r0, r3, r2
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <prvTraceError+0x58>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2250      	movs	r2, #80	@ 0x50
 800419e:	0019      	movs	r1, r3
 80041a0:	f7ff ff00 	bl	8003fa4 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <prvTraceError+0x54>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	23ee      	movs	r3, #238	@ 0xee
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	2101      	movs	r1, #1
 80041ae:	50d1      	str	r1, [r2, r3]
		}
	}
}
 80041b0:	46c0      	nop			@ (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20002df8 	.word	0x20002df8
 80041bc:	20001a30 	.word	0x20001a30

080041c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	0002      	movs	r2, r0
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80041d4:	e080      	b.n	80042d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80041d6:	4b46      	ldr	r3, [pc, #280]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	18d3      	adds	r3, r2, r3
 80041e0:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80041e2:	4b43      	ldr	r3, [pc, #268]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4942      	ldr	r1, [pc, #264]	@ (80042f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	185b      	adds	r3, r3, r1
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b98      	cmp	r3, #152	@ 0x98
 80041f4:	d931      	bls.n	800425a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	493d      	ldr	r1, [pc, #244]	@ (80042f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004200:	18d3      	adds	r3, r2, r3
 8004202:	185b      	adds	r3, r3, r1
 8004204:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004206:	2ba7      	cmp	r3, #167	@ 0xa7
 8004208:	d827      	bhi.n	800425a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4938      	ldr	r1, [pc, #224]	@ (80042f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	185b      	adds	r3, r3, r1
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	210f      	movs	r1, #15
 800421c:	187b      	adds	r3, r7, r1
 800421e:	3268      	adds	r2, #104	@ 0x68
 8004220:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8004222:	187b      	adds	r3, r7, r1
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	18d2      	adds	r2, r2, r3
 800422a:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d24d      	bcs.n	80042d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004234:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	2082      	movs	r0, #130	@ 0x82
 800423e:	00c0      	lsls	r0, r0, #3
 8004240:	4684      	mov	ip, r0
 8004242:	4463      	add	r3, ip
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	1d18      	adds	r0, r3, #4
 8004248:	187b      	adds	r3, r7, r1
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	001a      	movs	r2, r3
 8004252:	2100      	movs	r1, #0
 8004254:	f001 f862 	bl	800531c <memset>
		{
 8004258:	e03a      	b.n	80042d0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800425a:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4924      	ldr	r1, [pc, #144]	@ (80042f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	185b      	adds	r3, r3, r1
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d131      	bne.n	80042d2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20f      	bcs.n	800429c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800427c:	4b1c      	ldr	r3, [pc, #112]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	2182      	movs	r1, #130	@ 0x82
 8004286:	00c9      	lsls	r1, r1, #3
 8004288:	468c      	mov	ip, r1
 800428a:	4463      	add	r3, ip
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	3304      	adds	r3, #4
 8004290:	2208      	movs	r2, #8
 8004292:	2100      	movs	r1, #0
 8004294:	0018      	movs	r0, r3
 8004296:	f001 f841 	bl	800531c <memset>
 800429a:	e01a      	b.n	80042d2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80042a2:	4694      	mov	ip, r2
 80042a4:	4463      	add	r3, ip
 80042a6:	2204      	movs	r2, #4
 80042a8:	2100      	movs	r1, #0
 80042aa:	0018      	movs	r0, r3
 80042ac:	f001 f836 	bl	800531c <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	2182      	movs	r1, #130	@ 0x82
 80042ba:	00c9      	lsls	r1, r1, #3
 80042bc:	468c      	mov	ip, r1
 80042be:	4463      	add	r3, ip
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	3304      	adds	r3, #4
 80042c4:	2204      	movs	r2, #4
 80042c6:	2100      	movs	r1, #0
 80042c8:	0018      	movs	r0, r3
 80042ca:	f001 f827 	bl	800531c <memset>
 80042ce:	e000      	b.n	80042d2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 80042d0:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3301      	adds	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80042d8:	1dfb      	adds	r3, r7, #7
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d200      	bcs.n	80042e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 80042e2:	e778      	b.n	80041d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b006      	add	sp, #24
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	20002df8 	.word	0x20002df8
 80042f4:	00000414 	.word	0x00000414

080042f8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01c      	beq.n	8004340 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	3201      	adds	r2, #1
 800430e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004310:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	3201      	adds	r2, #1
 8004318:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	23fa      	movs	r3, #250	@ 0xfa
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d307      	bcc.n	8004338 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <prvTraceUpdateCounters+0x50>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004338:	2001      	movs	r0, #1
 800433a:	f7ff ff41 	bl	80041c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800433e:	e000      	b.n	8004342 <prvTraceUpdateCounters+0x4a>
		return;
 8004340:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	20002df8 	.word	0x20002df8

0800434c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	0002      	movs	r2, r0
 8004354:	1dbb      	adds	r3, r7, #6
 8004356:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8004364:	4b5c      	ldr	r3, [pc, #368]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d116      	bne.n	800439c <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 800436e:	4b5b      	ldr	r3, [pc, #364]	@ (80044dc <prvTraceGetDTS+0x190>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8004376:	4b59      	ldr	r3, [pc, #356]	@ (80044dc <prvTraceGetDTS+0x190>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b57      	ldr	r3, [pc, #348]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0892      	lsrs	r2, r2, #2
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
 8004382:	e00b      	b.n	800439c <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004384:	4b56      	ldr	r3, [pc, #344]	@ (80044e0 <prvTraceGetDTS+0x194>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b56      	ldr	r3, [pc, #344]	@ (80044e4 <prvTraceGetDTS+0x198>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004390:	4b55      	ldr	r3, [pc, #340]	@ (80044e8 <prvTraceGetDTS+0x19c>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b50      	ldr	r3, [pc, #320]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0892      	lsrs	r2, r2, #2
 800439a:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800439c:	230c      	movs	r3, #12
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 fa39 	bl	8004818 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4b50      	ldr	r3, [pc, #320]	@ (80044ec <prvTraceGetDTS+0x1a0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4b4e      	ldr	r3, [pc, #312]	@ (80044ec <prvTraceGetDTS+0x1a0>)
 80043b4:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 80043b6:	4b48      	ldr	r3, [pc, #288]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d047      	beq.n	8004450 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80043c0:	4b45      	ldr	r3, [pc, #276]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d921      	bls.n	8004410 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80043cc:	4b42      	ldr	r3, [pc, #264]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80043d2:	4b41      	ldr	r3, [pc, #260]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	0019      	movs	r1, r3
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7fb fe94 	bl	8000108 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	001a      	movs	r2, r3
 80043e4:	4b3c      	ldr	r3, [pc, #240]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	18a2      	adds	r2, r4, r2
 80043ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80043ec:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80043f2:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7fb ff09 	bl	8000214 <__aeabi_uidivmod>
 8004402:	000b      	movs	r3, r1
 8004404:	001a      	movs	r2, r3
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	18a2      	adds	r2, r4, r2
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28
 800440e:	e007      	b.n	8004420 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8004410:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004416:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	188a      	adds	r2, r1, r2
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004420:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004426:	4b2c      	ldr	r3, [pc, #176]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	d313      	bcc.n	8004458 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8004430:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004436:	3201      	adds	r2, #1
 8004438:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800443a:	4b27      	ldr	r3, [pc, #156]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004446:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1a8a      	subs	r2, r1, r2
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28
 800444e:	e003      	b.n	8004458 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004450:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <prvTraceGetDTS+0x18c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004458:	1dbb      	adds	r3, r7, #6
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	429a      	cmp	r2, r3
 8004460:	d92f      	bls.n	80044c2 <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8004462:	f7ff fc57 	bl	8003d14 <prvTraceNextFreeEventBufferSlot>
 8004466:	0003      	movs	r3, r0
 8004468:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d028      	beq.n	80044c2 <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 8004470:	1dbb      	adds	r3, r7, #6
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <prvTraceGetDTS+0x1a4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10b      	bne.n	8004492 <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	22a9      	movs	r2, #169	@ 0xa9
 800447e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	b29a      	uxth	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	705a      	strb	r2, [r3, #1]
 8004490:	e015      	b.n	80044be <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	2bff      	cmp	r3, #255	@ 0xff
 8004498:	d10d      	bne.n	80044b6 <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	22a8      	movs	r2, #168	@ 0xa8
 800449e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	0e1b      	lsrs	r3, r3, #24
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	705a      	strb	r2, [r3, #1]
 80044b4:	e003      	b.n	80044be <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <prvTraceGetDTS+0x1a8>)
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7ff fe53 	bl	8004164 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80044be:	f7ff ff1b 	bl	80042f8 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	1dba      	adds	r2, r7, #6
 80044c8:	8812      	ldrh	r2, [r2, #0]
 80044ca:	4013      	ands	r3, r2
 80044cc:	b29b      	uxth	r3, r3
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b007      	add	sp, #28
 80044d4:	bd90      	pop	{r4, r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	20002df8 	.word	0x20002df8
 80044dc:	200019b8 	.word	0x200019b8
 80044e0:	e000e018 	.word	0xe000e018
 80044e4:	200019c4 	.word	0x200019c4
 80044e8:	20000014 	.word	0x20000014
 80044ec:	20002e08 	.word	0x20002e08
 80044f0:	0000ffff 	.word	0x0000ffff
 80044f4:	080059c8 	.word	0x080059c8

080044f8 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	0008      	movs	r0, r1
 8004502:	0011      	movs	r1, r2
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	240b      	movs	r4, #11
 8004508:	193b      	adds	r3, r7, r4
 800450a:	1c02      	adds	r2, r0, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	230a      	movs	r3, #10
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	1c0a      	adds	r2, r1, #0
 8004514:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004516:	4b3c      	ldr	r3, [pc, #240]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	193b      	adds	r3, r7, r4
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	2316      	movs	r3, #22
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	3299      	adds	r2, #153	@ 0x99
 8004524:	32ff      	adds	r2, #255	@ 0xff
 8004526:	0052      	lsls	r2, r2, #1
 8004528:	188a      	adds	r2, r1, r2
 800452a:	3204      	adds	r2, #4
 800452c:	8812      	ldrh	r2, [r2, #0]
 800452e:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8004530:	e05c      	b.n	80045ec <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8004532:	4b35      	ldr	r3, [pc, #212]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	2016      	movs	r0, #22
 8004538:	183b      	adds	r3, r7, r0
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	239b      	movs	r3, #155	@ 0x9b
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	188a      	adds	r2, r1, r2
 8004544:	18d3      	adds	r3, r2, r3
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	22ff      	movs	r2, #255	@ 0xff
 800454e:	4013      	ands	r3, r2
 8004550:	4299      	cmp	r1, r3
 8004552:	d131      	bne.n	80045b8 <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8004554:	4b2c      	ldr	r3, [pc, #176]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	183b      	adds	r3, r7, r0
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	1cda      	adds	r2, r3, #3
 800455e:	239b      	movs	r3, #155	@ 0x9b
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	188a      	adds	r2, r1, r2
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	001a      	movs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	429a      	cmp	r2, r3
 8004570:	d122      	bne.n	80045b8 <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8004572:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	183b      	adds	r3, r7, r0
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	1d1a      	adds	r2, r3, #4
 800457c:	240a      	movs	r4, #10
 800457e:	193b      	adds	r3, r7, r4
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	18d2      	adds	r2, r2, r3
 8004584:	239b      	movs	r3, #155	@ 0x9b
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	188a      	adds	r2, r1, r2
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d112      	bne.n	80045b8 <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	183b      	adds	r3, r7, r0
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	3304      	adds	r3, #4
 800459c:	219a      	movs	r1, #154	@ 0x9a
 800459e:	0089      	lsls	r1, r1, #2
 80045a0:	468c      	mov	ip, r1
 80045a2:	4463      	add	r3, ip
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	1d18      	adds	r0, r3, #4
 80045a8:	193b      	adds	r3, r7, r4
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	0019      	movs	r1, r3
 80045b0:	f000 febc 	bl	800532c <strncmp>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d01f      	beq.n	80045f8 <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80045b8:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	2416      	movs	r4, #22
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	239b      	movs	r3, #155	@ 0x9b
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	188a      	adds	r2, r1, r2
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	0018      	movs	r0, r3
 80045ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <prvTraceLookupSymbolTableEntry+0x110>)
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	239b      	movs	r3, #155	@ 0x9b
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	188a      	adds	r2, r1, r2
 80045de:	18d3      	adds	r3, r2, r3
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	1882      	adds	r2, r0, r2
 80045ea:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 80045ec:	2316      	movs	r3, #22
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d19d      	bne.n	8004532 <prvTraceLookupSymbolTableEntry+0x3a>
 80045f6:	e000      	b.n	80045fa <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 80045f8:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 80045fa:	2316      	movs	r3, #22
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	881b      	ldrh	r3, [r3, #0]
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b007      	add	sp, #28
 8004606:	bd90      	pop	{r4, r7, pc}
 8004608:	20002df8 	.word	0x20002df8

0800460c <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 800460c:	b5b0      	push	{r4, r5, r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	0008      	movs	r0, r1
 8004616:	0011      	movs	r1, r2
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	230b      	movs	r3, #11
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	1c02      	adds	r2, r0, #0
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	200a      	movs	r0, #10
 8004624:	183b      	adds	r3, r7, r0
 8004626:	1c0a      	adds	r2, r1, #0
 8004628:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800462e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	239a      	movs	r3, #154	@ 0x9a
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	58d2      	ldr	r2, [r2, r3]
 8004638:	183b      	adds	r3, r7, r0
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	18d3      	adds	r3, r2, r3
 800463e:	3304      	adds	r3, #4
 8004640:	2bc7      	cmp	r3, #199	@ 0xc7
 8004642:	d906      	bls.n	8004652 <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8004644:	4b5a      	ldr	r3, [pc, #360]	@ (80047b0 <prvTraceCreateSymbolTableEntry+0x1a4>)
 8004646:	0018      	movs	r0, r3
 8004648:	f7ff fd8c 	bl	8004164 <prvTraceError>
		ret = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e0a7      	b.n	80047a2 <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004652:	4b56      	ldr	r3, [pc, #344]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	250b      	movs	r5, #11
 8004658:	197b      	adds	r3, r7, r5
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	3399      	adds	r3, #153	@ 0x99
 800465e:	33ff      	adds	r3, #255	@ 0xff
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	3304      	adds	r3, #4
 8004666:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800466a:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800466c:	4b4f      	ldr	r3, [pc, #316]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	239a      	movs	r3, #154	@ 0x9a
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004676:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8004678:	239b      	movs	r3, #155	@ 0x9b
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	188a      	adds	r2, r1, r2
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	1c02      	adds	r2, r0, #0
 8004682:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8004684:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	197b      	adds	r3, r7, r5
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	3399      	adds	r3, #153	@ 0x99
 800468e:	33ff      	adds	r3, #255	@ 0xff
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	18d3      	adds	r3, r2, r3
 8004694:	3304      	adds	r3, #4
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 800469c:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800469e:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80046a0:	4b42      	ldr	r3, [pc, #264]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	239a      	movs	r3, #154	@ 0x9a
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	58d3      	ldr	r3, [r2, r3]
 80046aa:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80046ac:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80046ae:	239b      	movs	r3, #155	@ 0x9b
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	188a      	adds	r2, r1, r2
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	1c02      	adds	r2, r0, #0
 80046b8:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 80046ba:	4b3c      	ldr	r3, [pc, #240]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046bc:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80046be:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	239a      	movs	r3, #154	@ 0x9a
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	58d3      	ldr	r3, [r2, r3]
 80046c8:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 80046ce:	239b      	movs	r3, #155	@ 0x9b
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	188a      	adds	r2, r1, r2
 80046d4:	18d3      	adds	r3, r2, r3
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046e0:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80046e2:	4b32      	ldr	r3, [pc, #200]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	239a      	movs	r3, #154	@ 0x9a
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	58d3      	ldr	r3, [r2, r3]
 80046ec:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 80046ee:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 80046f0:	239b      	movs	r3, #155	@ 0x9b
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	188a      	adds	r2, r1, r2
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	1c02      	adds	r2, r0, #0
 80046fa:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 80046fc:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 80046fe:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8004700:	4b2a      	ldr	r3, [pc, #168]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	239a      	movs	r3, #154	@ 0x9a
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	58cb      	ldr	r3, [r1, r3]
 800470a:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800470c:	219a      	movs	r1, #154	@ 0x9a
 800470e:	0089      	lsls	r1, r1, #2
 8004710:	468c      	mov	ip, r1
 8004712:	4463      	add	r3, ip
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	1d18      	adds	r0, r3, #4
 8004718:	240a      	movs	r4, #10
 800471a:	193b      	adds	r3, r7, r4
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0019      	movs	r1, r3
 8004722:	f7ff fc3f 	bl	8003fa4 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8004726:	4b21      	ldr	r3, [pc, #132]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004728:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800472a:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	239a      	movs	r3, #154	@ 0x9a
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	58d2      	ldr	r2, [r2, r3]
 8004734:	0020      	movs	r0, r4
 8004736:	183b      	adds	r3, r7, r0
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	18d3      	adds	r3, r2, r3
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	239b      	movs	r3, #155	@ 0x9b
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	188a      	adds	r2, r1, r2
 8004744:	18d3      	adds	r3, r2, r3
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800474a:	4b18      	ldr	r3, [pc, #96]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	239a      	movs	r3, #154	@ 0x9a
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8004754:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004756:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004758:	197b      	adds	r3, r7, r5
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b289      	uxth	r1, r1
 800475e:	3399      	adds	r3, #153	@ 0x99
 8004760:	33ff      	adds	r3, #255	@ 0xff
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	18d3      	adds	r3, r2, r3
 8004766:	3304      	adds	r3, #4
 8004768:	1c0a      	adds	r2, r1, #0
 800476a:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	239a      	movs	r3, #154	@ 0x9a
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	58d2      	ldr	r2, [r2, r3]
 8004776:	183b      	adds	r3, r7, r0
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	18d1      	adds	r1, r2, r3
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	3105      	adds	r1, #5
 8004782:	239a      	movs	r3, #154	@ 0x9a
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8004788:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <prvTraceCreateSymbolTableEntry+0x1a0>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	239a      	movs	r3, #154	@ 0x9a
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	58d3      	ldr	r3, [r2, r3]
 8004792:	b29b      	uxth	r3, r3
 8004794:	183a      	adds	r2, r7, r0
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	3205      	adds	r2, #5
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	617b      	str	r3, [r7, #20]
	}

	return ret;
 80047a2:	697b      	ldr	r3, [r7, #20]
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bdb0      	pop	{r4, r5, r7, pc}
 80047ac:	20002df8 	.word	0x20002df8
 80047b0:	080059ec 	.word	0x080059ec

080047b4 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 80047c0:	2301      	movs	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 80047ce:	e008      	b.n	80047e2 <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 80047d0:	2317      	movs	r3, #23
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	18d3      	adds	r3, r2, r3
 80047da:	61bb      	str	r3, [r7, #24]
			length++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	2117      	movs	r1, #23
 80047ea:	187a      	adds	r2, r7, r1
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	7013      	strb	r3, [r2, #0]
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1eb      	bne.n	80047d0 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	223f      	movs	r2, #63	@ 0x3f
 80047fe:	4013      	ands	r3, r2
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	701a      	strb	r2, [r3, #0]
}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b008      	add	sp, #32
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004828:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <prvTracePortGetTimeStamp+0xc8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04f      	beq.n	80048d6 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8004836:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <prvTracePortGetTimeStamp+0xcc>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
		return;
 800483e:	e04a      	b.n	80048d6 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8004840:	4b29      	ldr	r3, [pc, #164]	@ (80048e8 <prvTracePortGetTimeStamp+0xd0>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b29      	ldr	r3, [pc, #164]	@ (80048ec <prvTracePortGetTimeStamp+0xd4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	3301      	adds	r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 800484e:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <prvTracePortGetTimeStamp+0xd8>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <prvTracePortGetTimeStamp+0xdc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	db03      	blt.n	8004866 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 800485e:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <prvTracePortGetTimeStamp+0xd8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e002      	b.n	800486c <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8004866:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <prvTracePortGetTimeStamp+0xdc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 800486c:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <prvTracePortGetTimeStamp+0xd8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	429a      	cmp	r2, r3
 8004874:	d107      	bne.n	8004886 <prvTracePortGetTimeStamp+0x6e>
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <prvTracePortGetTimeStamp+0xe0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	d202      	bcs.n	8004886 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d016      	beq.n	80048ba <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 800488c:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <prvTracePortGetTimeStamp+0xd0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	435a      	muls	r2, r3
 8004898:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <prvTracePortGetTimeStamp+0xcc>)
 800489a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <prvTracePortGetTimeStamp+0xd0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	4013      	ands	r3, r2
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	435a      	muls	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	089a      	lsrs	r2, r3, #2
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <prvTracePortGetTimeStamp+0xcc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	18d2      	adds	r2, r2, r3
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <prvTracePortGetTimeStamp+0xcc>)
 80048b8:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <prvTracePortGetTimeStamp+0xd8>)
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 80048c6:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <prvTracePortGetTimeStamp+0xcc>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <prvTracePortGetTimeStamp+0xe0>)
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e000      	b.n	80048d8 <prvTracePortGetTimeStamp+0xc0>
		return;
 80048d6:	46c0      	nop			@ (mov r8, r8)
}
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	200019a8 	.word	0x200019a8
 80048e4:	200019ac 	.word	0x200019ac
 80048e8:	e000e014 	.word	0xe000e014
 80048ec:	e000e018 	.word	0xe000e018
 80048f0:	20002e0c 	.word	0x20002e0c
 80048f4:	200019a4 	.word	0x200019a4
 80048f8:	20002e10 	.word	0x20002e10

080048fc <main>:
                         UBaseType_t                  uxPriority,
                         TaskHandle_t * const         pxCreatedTask );

// Main function
int main()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8004902:	f000 f87d 	bl	8004a00 <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 8004906:	f000 fb83 	bl	8005010 <BSP_LED_Init>
	BSP_PB_Init();
 800490a:	f000 fbcd 	bl	80050a8 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 800490e:	f000 fbed 	bl	80050ec <BSP_Console_Init>
	my_printf("Console ready!\r\n");
 8004912:	4b2c      	ldr	r3, [pc, #176]	@ (80049c4 <main+0xc8>)
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fb47 	bl	8004fa8 <my_printf>

	// Start Trace Recording
	xTraceEnable(TRC_START);
 800491a:	2001      	movs	r0, #1
 800491c:	f7fe fc0c 	bl	8003138 <xTraceEnable>
	// Create Semaphore object (this is not a 'give')
	xSem = xSemaphoreCreateBinary();
 8004920:	2203      	movs	r2, #3
 8004922:	2100      	movs	r1, #0
 8004924:	2001      	movs	r0, #1
 8004926:	f7fb fd8d 	bl	8000444 <xQueueGenericCreate>
 800492a:	0002      	movs	r2, r0
 800492c:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <main+0xcc>)
 800492e:	601a      	str	r2, [r3, #0]
	// Give a nice name to the Semaphore in the trace recorder
	vTraceSetSemaphoreName(xSem, "xSEM");
 8004930:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <main+0xcc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a25      	ldr	r2, [pc, #148]	@ (80049cc <main+0xd0>)
 8004936:	0011      	movs	r1, r2
 8004938:	0018      	movs	r0, r3
 800493a:	f7fe fa43 	bl	8002dc4 <vTraceSetSemaphoreName>

	// Create Tasks
	xTaskCreate(vTask1, 		"Task_1",       256, NULL, 3, NULL);
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	005a      	lsls	r2, r3, #1
 8004942:	4923      	ldr	r1, [pc, #140]	@ (80049d0 <main+0xd4>)
 8004944:	4823      	ldr	r0, [pc, #140]	@ (80049d4 <main+0xd8>)
 8004946:	2300      	movs	r3, #0
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2303      	movs	r3, #3
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	f7fc fc3d 	bl	80011ce <xTaskCreate>
	xTaskCreate(vTask2, 		"Task_2",       256, NULL, 2, NULL);
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	005a      	lsls	r2, r3, #1
 8004958:	491f      	ldr	r1, [pc, #124]	@ (80049d8 <main+0xdc>)
 800495a:	4820      	ldr	r0, [pc, #128]	@ (80049dc <main+0xe0>)
 800495c:	2300      	movs	r3, #0
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	2302      	movs	r3, #2
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	f7fc fc32 	bl	80011ce <xTaskCreate>
	xTaskCreate(vTaskConsole, 	"Task_Console", 256, NULL, 1, NULL);
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	005a      	lsls	r2, r3, #1
 800496e:	491c      	ldr	r1, [pc, #112]	@ (80049e0 <main+0xe4>)
 8004970:	481c      	ldr	r0, [pc, #112]	@ (80049e4 <main+0xe8>)
 8004972:	2300      	movs	r3, #0
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2301      	movs	r3, #1
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	f7fc fc27 	bl	80011ce <xTaskCreate>

	// Register the Trace User Event Channels
	 ue1 = xTraceRegisterString("count");
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <main+0xec>)
 8004982:	0018      	movs	r0, r3
 8004984:	f7fe fcb8 	bl	80032f8 <xTraceRegisterString>
 8004988:	0002      	movs	r2, r0
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <main+0xf0>)
 800498c:	601a      	str	r2, [r3, #0]
	 ue2 = xTraceRegisterString("msg");
 800498e:	4b18      	ldr	r3, [pc, #96]	@ (80049f0 <main+0xf4>)
 8004990:	0018      	movs	r0, r3
 8004992:	f7fe fcb1 	bl	80032f8 <xTraceRegisterString>
 8004996:	0002      	movs	r2, r0
 8004998:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <main+0xf8>)
 800499a:	601a      	str	r2, [r3, #0]

     // Create Queue to hold console messages
	xConsoleQueue = xQueueCreate(4, sizeof(msg_t));
 800499c:	2200      	movs	r2, #0
 800499e:	2140      	movs	r1, #64	@ 0x40
 80049a0:	2004      	movs	r0, #4
 80049a2:	f7fb fd4f 	bl	8000444 <xQueueGenericCreate>
 80049a6:	0002      	movs	r2, r0
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <main+0xfc>)
 80049aa:	601a      	str	r2, [r3, #0]

	// Give a nice name to the Queue in the trace recorder
	vTraceSetQueueName(xConsoleQueue, "Console Queue");
 80049ac:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <main+0xfc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a12      	ldr	r2, [pc, #72]	@ (80049fc <main+0x100>)
 80049b2:	0011      	movs	r1, r2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fe f9f1 	bl	8002d9c <vTraceSetQueueName>

	 // Start the Scheduler
	vTaskStartScheduler();
 80049ba:	f7fc fe49 	bl	8001650 <vTaskStartScheduler>

	while(1)
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	e7fd      	b.n	80049be <main+0xc2>
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	08005a34 	.word	0x08005a34
 80049c8:	20002e14 	.word	0x20002e14
 80049cc:	08005a48 	.word	0x08005a48
 80049d0:	08005a50 	.word	0x08005a50
 80049d4:	08004b35 	.word	0x08004b35
 80049d8:	08005a58 	.word	0x08005a58
 80049dc:	08004b6d 	.word	0x08004b6d
 80049e0:	08005a60 	.word	0x08005a60
 80049e4:	08004bc9 	.word	0x08004bc9
 80049e8:	08005a70 	.word	0x08005a70
 80049ec:	20002e18 	.word	0x20002e18
 80049f0:	08005a78 	.word	0x08005a78
 80049f4:	20002e1c 	.word	0x20002e1c
 80049f8:	20002e20 	.word	0x20002e20
 80049fc:	08005a7c 	.word	0x08005a7c

08004a00 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8004a0a:	4b44      	ldr	r3, [pc, #272]	@ (8004b1c <SystemClock_Config+0x11c>)
 8004a0c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8004a0e:	4b44      	ldr	r3, [pc, #272]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b43      	ldr	r3, [pc, #268]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a14:	2180      	movs	r1, #128	@ 0x80
 8004a16:	02c9      	lsls	r1, r1, #11
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8004a1c:	4b40      	ldr	r3, [pc, #256]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b3f      	ldr	r3, [pc, #252]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a22:	2180      	movs	r1, #128	@ 0x80
 8004a24:	0249      	lsls	r1, r1, #9
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	@ 0x80
 8004a30:	029b      	lsls	r3, r3, #10
 8004a32:	4013      	ands	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]
		timeout--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <SystemClock_Config+0x48>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8004a48:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b34      	ldr	r3, [pc, #208]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a4e:	4935      	ldr	r1, [pc, #212]	@ (8004b24 <SystemClock_Config+0x124>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8004a54:	4b32      	ldr	r3, [pc, #200]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b31      	ldr	r3, [pc, #196]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a5a:	2180      	movs	r1, #128	@ 0x80
 8004a5c:	0249      	lsls	r1, r1, #9
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8004a62:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004a68:	4b2d      	ldr	r3, [pc, #180]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a6e:	492e      	ldr	r1, [pc, #184]	@ (8004b28 <SystemClock_Config+0x128>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8004a74:	4b2a      	ldr	r3, [pc, #168]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a7a:	2180      	movs	r1, #128	@ 0x80
 8004a7c:	0349      	lsls	r1, r1, #13
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8004a82:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b26      	ldr	r3, [pc, #152]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0449      	lsls	r1, r1, #17
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004a90:	4b23      	ldr	r3, [pc, #140]	@ (8004b20 <SystemClock_Config+0x120>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	049b      	lsls	r3, r3, #18
 8004a98:	4013      	ands	r3, r2
 8004a9a:	607b      	str	r3, [r7, #4]
		timeout--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <SystemClock_Config+0xae>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004aae:	4b1c      	ldr	r3, [pc, #112]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ab4:	21f0      	movs	r1, #240	@ 0xf0
 8004ab6:	438a      	bics	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004aba:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <SystemClock_Config+0x120>)
 8004abc:	4b18      	ldr	r3, [pc, #96]	@ (8004b20 <SystemClock_Config+0x120>)
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004ac2:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	4b16      	ldr	r3, [pc, #88]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ac8:	4918      	ldr	r1, [pc, #96]	@ (8004b2c <SystemClock_Config+0x12c>)
 8004aca:	400a      	ands	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004ace:	4a14      	ldr	r2, [pc, #80]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ad2:	6852      	ldr	r2, [r2, #4]
 8004ad4:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004ad6:	4b16      	ldr	r3, [pc, #88]	@ (8004b30 <SystemClock_Config+0x130>)
 8004ad8:	2211      	movs	r2, #17
 8004ada:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8004adc:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <SystemClock_Config+0x120>)
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	438a      	bics	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <SystemClock_Config+0x120>)
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <SystemClock_Config+0x120>)
 8004aee:	2102      	movs	r1, #2
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <SystemClock_Config+0x120>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	220c      	movs	r2, #12
 8004afa:	4013      	ands	r3, r2
 8004afc:	603b      	str	r3, [r7, #0]
		timeout--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d002      	beq.n	8004b10 <SystemClock_Config+0x110>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8004b10:	f000 fb7e 	bl	8005210 <SystemCoreClockUpdate>
}
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b004      	add	sp, #16
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	000f4240 	.word	0x000f4240
 8004b20:	40021000 	.word	0x40021000
 8004b24:	fffe7fff 	.word	0xfffe7fff
 8004b28:	ffc3ffff 	.word	0xffc3ffff
 8004b2c:	fffff8ff 	.word	0xfffff8ff
 8004b30:	40022000 	.word	0x40022000

08004b34 <vTask1>:

/*
 *	Task_1
 */
void vTask1 (void *pvParameters)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b093      	sub	sp, #76	@ 0x4c
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	msg_t 	msg;

	while(1)
	{
		// Prepare message
		my_sprintf((char *)msg, "With great power comes great responsibility\r\n");
 8004b3c:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <vTask1+0x30>)
 8004b3e:	2408      	movs	r4, #8
 8004b40:	193b      	adds	r3, r7, r4
 8004b42:	0011      	movs	r1, r2
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 fa44 	bl	8004fd2 <my_sprintf>

		// Send message to the Console Queue
		xQueueSendToBack(xConsoleQueue, &msg, 0);
 8004b4a:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <vTask1+0x34>)
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	1939      	adds	r1, r7, r4
 8004b50:	2300      	movs	r3, #0
 8004b52:	2200      	movs	r2, #0
 8004b54:	f7fb fd9c 	bl	8000690 <xQueueGenericSend>

		// Wait for 20ms
		vTaskDelay(20);
 8004b58:	2014      	movs	r0, #20
 8004b5a:	f7fc fd19 	bl	8001590 <vTaskDelay>
		my_sprintf((char *)msg, "With great power comes great responsibility\r\n");
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	e7ec      	b.n	8004b3c <vTask1+0x8>
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	08005a8c 	.word	0x08005a8c
 8004b68:	20002e20 	.word	0x20002e20

08004b6c <vTask2>:

/*
 *	Task_2
 */
void vTask2 (void *pvParameters)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b094      	sub	sp, #80	@ 0x50
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	msg_t 	msg;
	uint8_t	index = 0;
 8004b74:	234f      	movs	r3, #79	@ 0x4f
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		// Prepare message
		my_sprintf((char *)msg, "%d# ", index);
 8004b7c:	244f      	movs	r4, #79	@ 0x4f
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	490f      	ldr	r1, [pc, #60]	@ (8004bc0 <vTask2+0x54>)
 8004b84:	250c      	movs	r5, #12
 8004b86:	197b      	adds	r3, r7, r5
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fa22 	bl	8004fd2 <my_sprintf>

		// Send message to Console Queue
		xQueueSendToBack(xConsoleQueue, &msg, 0);
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <vTask2+0x58>)
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	1979      	adds	r1, r7, r5
 8004b94:	2300      	movs	r3, #0
 8004b96:	2200      	movs	r2, #0
 8004b98:	f7fb fd7a 	bl	8000690 <xQueueGenericSend>

		// Increment index
		(index==9) ? index=0 : index++;
 8004b9c:	193b      	adds	r3, r7, r4
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	d103      	bne.n	8004bac <vTask2+0x40>
 8004ba4:	193b      	adds	r3, r7, r4
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e005      	b.n	8004bb8 <vTask2+0x4c>
 8004bac:	214f      	movs	r1, #79	@ 0x4f
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	3201      	adds	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]

		// Wait for 2ms
		vTaskDelay(2);
 8004bb8:	2002      	movs	r0, #2
 8004bba:	f7fc fce9 	bl	8001590 <vTaskDelay>
		my_sprintf((char *)msg, "%d# ", index);
 8004bbe:	e7dd      	b.n	8004b7c <vTask2+0x10>
 8004bc0:	08005abc 	.word	0x08005abc
 8004bc4:	20002e20 	.word	0x20002e20

08004bc8 <vTaskConsole>:

/*
 * Task_Console
 */
void vTaskConsole (void *pvParameters)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b093      	sub	sp, #76	@ 0x4c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	msg_t msg;

	while(1)
	{
		// Wait for something in the message Queue
		xQueueReceive(xConsoleQueue, &msg, portMAX_DELAY);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <vTaskConsole+0x28>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4252      	negs	r2, r2
 8004bd8:	2408      	movs	r4, #8
 8004bda:	1939      	adds	r1, r7, r4
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fb ff3d 	bl	8000a5c <xQueueReceive>

		// Send message to console
		my_printf((char *)msg);
 8004be2:	193b      	adds	r3, r7, r4
 8004be4:	0018      	movs	r0, r3
 8004be6:	f000 f9df 	bl	8004fa8 <my_printf>
		xQueueReceive(xConsoleQueue, &msg, portMAX_DELAY);
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	e7f0      	b.n	8004bd0 <vTaskConsole+0x8>
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	20002e20 	.word	0x20002e20

08004bf4 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	if (str) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <printchar+0x26>
		**str = c;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
		++(*str);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8004c18:	e00a      	b.n	8004c30 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <printchar+0x44>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2240      	movs	r2, #64	@ 0x40
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	d1f9      	bne.n	8004c1c <printchar+0x28>
		USART2->TDR = c;
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <printchar+0x44>)
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8004c30:	46c0      	nop			@ (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40004400 	.word	0x40004400

08004c3c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8004c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3e:	46c6      	mov	lr, r8
 8004c40:	b500      	push	{lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8004c4e:	2400      	movs	r4, #0
 8004c50:	2320      	movs	r3, #32
 8004c52:	4698      	mov	r8, r3

	if (width > 0) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	dd16      	ble.n	8004c88 <prints+0x4c>
		register int len = 0;
 8004c5a:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8004c5c:	68be      	ldr	r6, [r7, #8]
 8004c5e:	e001      	b.n	8004c64 <prints+0x28>
 8004c60:	3501      	adds	r5, #1
 8004c62:	3601      	adds	r6, #1
 8004c64:	7833      	ldrb	r3, [r6, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1fa      	bne.n	8004c60 <prints+0x24>
		if (len >= width) width = 0;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429d      	cmp	r5, r3
 8004c6e:	db02      	blt.n	8004c76 <prints+0x3a>
 8004c70:	2300      	movs	r3, #0
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	e002      	b.n	8004c7c <prints+0x40>
		else width -= len;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1b5b      	subs	r3, r3, r5
 8004c7a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d001      	beq.n	8004c88 <prints+0x4c>
 8004c84:	2330      	movs	r3, #48	@ 0x30
 8004c86:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d119      	bne.n	8004cc4 <prints+0x88>
		for ( ; width > 0; --width) {
 8004c90:	e008      	b.n	8004ca4 <prints+0x68>
			printchar (out, padchar);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4641      	mov	r1, r8
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7ff ffac 	bl	8004bf4 <printchar>
			++pc;
 8004c9c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dcf3      	bgt.n	8004c92 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8004caa:	e00b      	b.n	8004cc4 <prints+0x88>
		printchar (out, *string);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff ff9c 	bl	8004bf4 <printchar>
		++pc;
 8004cbc:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ef      	bne.n	8004cac <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8004ccc:	e008      	b.n	8004ce0 <prints+0xa4>
		printchar (out, padchar);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7ff ff8e 	bl	8004bf4 <printchar>
		++pc;
 8004cd8:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dcf3      	bgt.n	8004cce <prints+0x92>
	}

	return pc;
 8004ce6:	0023      	movs	r3, r4
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bc80      	pop	{r7}
 8004cf0:	46b8      	mov	r8, r7
 8004cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8004cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf6:	46ce      	mov	lr, r9
 8004cf8:	4647      	mov	r7, r8
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b089      	sub	sp, #36	@ 0x24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	2600      	movs	r6, #0
	register unsigned int u = i;
 8004d0e:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <printi+0x40>
		print_buf[0] = '0';
 8004d16:	2114      	movs	r1, #20
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	2230      	movs	r2, #48	@ 0x30
 8004d1c:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	2200      	movs	r2, #0
 8004d22:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d28:	1879      	adds	r1, r7, r1
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff ff86 	bl	8004c3c <prints>
 8004d30:	0003      	movs	r3, r0
 8004d32:	e04e      	b.n	8004dd2 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <printi+0x5c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0a      	cmp	r3, #10
 8004d3e:	d107      	bne.n	8004d50 <printi+0x5c>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da04      	bge.n	8004d50 <printi+0x5c>
		neg = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	4699      	mov	r9, r3
		u = -i;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	425b      	negs	r3, r3
 8004d4e:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8004d50:	2314      	movs	r3, #20
 8004d52:	18fc      	adds	r4, r7, r3
 8004d54:	340b      	adds	r4, #11
	*s = '\0';
 8004d56:	2300      	movs	r3, #0
 8004d58:	7023      	strb	r3, [r4, #0]

	while (u) {
 8004d5a:	e019      	b.n	8004d90 <printi+0x9c>
		t = u % b;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fa57 	bl	8000214 <__aeabi_uidivmod>
 8004d66:	000b      	movs	r3, r1
 8004d68:	4698      	mov	r8, r3
		if( t >= 10 )
 8004d6a:	4643      	mov	r3, r8
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	dd02      	ble.n	8004d76 <printi+0x82>
			t += letbase - '0' - 10;
 8004d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d72:	3b3a      	subs	r3, #58	@ 0x3a
 8004d74:	4498      	add	r8, r3
		*--s = t + '0';
 8004d76:	4643      	mov	r3, r8
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	3c01      	subs	r4, #1
 8004d7c:	3330      	adds	r3, #48	@ 0x30
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	7023      	strb	r3, [r4, #0]
		u /= b;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0019      	movs	r1, r3
 8004d86:	0028      	movs	r0, r5
 8004d88:	f7fb f9be 	bl	8000108 <__udivsi3>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	001d      	movs	r5, r3
	while (u) {
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	d1e3      	bne.n	8004d5c <printi+0x68>
	}

	if (neg) {
 8004d94:	464b      	mov	r3, r9
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d013      	beq.n	8004dc2 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <printi+0xc8>
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	2202      	movs	r2, #2
 8004da4:	4013      	ands	r3, r2
 8004da6:	d009      	beq.n	8004dbc <printi+0xc8>
			printchar (out, '-');
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	212d      	movs	r1, #45	@ 0x2d
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7ff ff21 	bl	8004bf4 <printchar>
			++pc;
 8004db2:	3601      	adds	r6, #1
			--width;
 8004db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db6:	3b01      	subs	r3, #1
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	e002      	b.n	8004dc2 <printi+0xce>
		}
		else {
			*--s = '-';
 8004dbc:	3c01      	subs	r4, #1
 8004dbe:	232d      	movs	r3, #45	@ 0x2d
 8004dc0:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8004dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	0021      	movs	r1, r4
 8004dca:	f7ff ff37 	bl	8004c3c <prints>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	18f3      	adds	r3, r6, r3
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b009      	add	sp, #36	@ 0x24
 8004dd8:	bcc0      	pop	{r6, r7}
 8004dda:	46b9      	mov	r9, r7
 8004ddc:	46b0      	mov	r8, r6
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004de0 <print>:

static int print(char **out, const char *format, va_list args )
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b08b      	sub	sp, #44	@ 0x2c
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8004dec:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8004dee:	e0c6      	b.n	8004f7e <print+0x19e>
		if (*format == '%') {
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b25      	cmp	r3, #37	@ 0x25
 8004df6:	d000      	beq.n	8004dfa <print+0x1a>
 8004df8:	e0b2      	b.n	8004f60 <print+0x180>
			++format;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8004e00:	2600      	movs	r6, #0
 8004e02:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <print+0x2e>
 8004e0c:	e0bd      	b.n	8004f8a <print+0x1aa>
			if (*format == '%') goto out;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b25      	cmp	r3, #37	@ 0x25
 8004e14:	d100      	bne.n	8004e18 <print+0x38>
 8004e16:	e0a5      	b.n	8004f64 <print+0x184>
			if (*format == '-') {
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004e1e:	d10a      	bne.n	8004e36 <print+0x56>
				++format;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8004e26:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8004e28:	e005      	b.n	8004e36 <print+0x56>
				++format;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8004e30:	2302      	movs	r3, #2
 8004e32:	4333      	orrs	r3, r6
 8004e34:	001e      	movs	r6, r3
			while (*format == '0') {
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b30      	cmp	r3, #48	@ 0x30
 8004e3c:	d0f5      	beq.n	8004e2a <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004e3e:	e00b      	b.n	8004e58 <print+0x78>
				width *= 10;
 8004e40:	002b      	movs	r3, r5
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	195b      	adds	r3, r3, r5
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	001d      	movs	r5, r3
				width += *format - '0';
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	3b30      	subs	r3, #48	@ 0x30
 8004e50:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e5e:	d903      	bls.n	8004e68 <print+0x88>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b39      	cmp	r3, #57	@ 0x39
 8004e66:	d9eb      	bls.n	8004e40 <print+0x60>
			}
			if( *format == 's' ) {
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b73      	cmp	r3, #115	@ 0x73
 8004e6e:	d10f      	bne.n	8004e90 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8004e7a:	d000      	beq.n	8004e7e <print+0x9e>
 8004e7c:	e000      	b.n	8004e80 <print+0xa0>
 8004e7e:	4949      	ldr	r1, [pc, #292]	@ (8004fa4 <print+0x1c4>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	0033      	movs	r3, r6
 8004e84:	002a      	movs	r2, r5
 8004e86:	f7ff fed9 	bl	8004c3c <prints>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	18e4      	adds	r4, r4, r3
				continue;
 8004e8e:	e073      	b.n	8004f78 <print+0x198>
			}
			if( *format == 'd' ) {
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b64      	cmp	r3, #100	@ 0x64
 8004e96:	d10f      	bne.n	8004eb8 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	2361      	movs	r3, #97	@ 0x61
 8004ea4:	9302      	str	r3, [sp, #8]
 8004ea6:	9601      	str	r6, [sp, #4]
 8004ea8:	9500      	str	r5, [sp, #0]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	220a      	movs	r2, #10
 8004eae:	f7ff ff21 	bl	8004cf4 <printi>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	18e4      	adds	r4, r4, r3
				continue;
 8004eb6:	e05f      	b.n	8004f78 <print+0x198>
			}
			if( *format == 'x' ) {
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b78      	cmp	r3, #120	@ 0x78
 8004ebe:	d10f      	bne.n	8004ee0 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	2361      	movs	r3, #97	@ 0x61
 8004ecc:	9302      	str	r3, [sp, #8]
 8004ece:	9601      	str	r6, [sp, #4]
 8004ed0:	9500      	str	r5, [sp, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	f7ff ff0d 	bl	8004cf4 <printi>
 8004eda:	0003      	movs	r3, r0
 8004edc:	18e4      	adds	r4, r4, r3
				continue;
 8004ede:	e04b      	b.n	8004f78 <print+0x198>
			}
			if( *format == 'X' ) {
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b58      	cmp	r3, #88	@ 0x58
 8004ee6:	d10f      	bne.n	8004f08 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	2341      	movs	r3, #65	@ 0x41
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	9601      	str	r6, [sp, #4]
 8004ef8:	9500      	str	r5, [sp, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	2210      	movs	r2, #16
 8004efe:	f7ff fef9 	bl	8004cf4 <printi>
 8004f02:	0003      	movs	r3, r0
 8004f04:	18e4      	adds	r4, r4, r3
				continue;
 8004f06:	e037      	b.n	8004f78 <print+0x198>
			}
			if( *format == 'u' ) {
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b75      	cmp	r3, #117	@ 0x75
 8004f0e:	d10f      	bne.n	8004f30 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	2361      	movs	r3, #97	@ 0x61
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	9601      	str	r6, [sp, #4]
 8004f20:	9500      	str	r5, [sp, #0]
 8004f22:	2300      	movs	r3, #0
 8004f24:	220a      	movs	r2, #10
 8004f26:	f7ff fee5 	bl	8004cf4 <printi>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	18e4      	adds	r4, r4, r3
				continue;
 8004f2e:	e023      	b.n	8004f78 <print+0x198>
			}
			if( *format == 'c' ) {
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b63      	cmp	r3, #99	@ 0x63
 8004f36:	d11f      	bne.n	8004f78 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	2114      	movs	r1, #20
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8004f4e:	1879      	adds	r1, r7, r1
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	0033      	movs	r3, r6
 8004f54:	002a      	movs	r2, r5
 8004f56:	f7ff fe71 	bl	8004c3c <prints>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	18e4      	adds	r4, r4, r3
				continue;
 8004f5e:	e00b      	b.n	8004f78 <print+0x198>
			}
		}
		else {
		out:
 8004f60:	46c0      	nop			@ (mov r8, r8)
 8004f62:	e000      	b.n	8004f66 <print+0x186>
			if (*format == '%') goto out;
 8004f64:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	0011      	movs	r1, r2
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7ff fe3f 	bl	8004bf4 <printchar>
			++pc;
 8004f76:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d000      	beq.n	8004f88 <print+0x1a8>
 8004f86:	e733      	b.n	8004df0 <print+0x10>
 8004f88:	e000      	b.n	8004f8c <print+0x1ac>
			if (*format == '\0') break;
 8004f8a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <print+0x1ba>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8004f9a:	0023      	movs	r3, r4
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b007      	add	sp, #28
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa4:	08005ac4 	.word	0x08005ac4

08004fa8 <my_printf>:

int my_printf(const char *format, ...)
{
 8004fa8:	b40f      	push	{r0, r1, r2, r3}
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8004fb0:	2314      	movs	r3, #20
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	0019      	movs	r1, r3
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7ff ff0f 	bl	8004de0 <print>
 8004fc2:	0003      	movs	r3, r0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bc80      	pop	{r7}
 8004fcc:	bc08      	pop	{r3}
 8004fce:	b004      	add	sp, #16
 8004fd0:	4718      	bx	r3

08004fd2 <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 8004fd2:	b40e      	push	{r1, r2, r3}
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
        va_list args;
        va_start( args, format );
 8004fdc:	2320      	movs	r3, #32
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	69f9      	ldr	r1, [r7, #28]
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff fef9 	bl	8004de0 <print>
 8004fee:	0003      	movs	r3, r0
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b005      	add	sp, #20
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	bc08      	pop	{r3}
 8004ffa:	b003      	add	sp, #12
 8004ffc:	4718      	bx	r3

08004ffe <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	af00      	add	r7, sp, #0
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	e7fd      	b.n	800500c <HardFault_Handler+0x4>

08005010 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8005014:	4b22      	ldr	r3, [pc, #136]	@ (80050a0 <BSP_LED_Init+0x90>)
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <BSP_LED_Init+0x90>)
 800501a:	2180      	movs	r1, #128	@ 0x80
 800501c:	0289      	lsls	r1, r1, #10
 800501e:	430a      	orrs	r2, r1
 8005020:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8005022:	2390      	movs	r3, #144	@ 0x90
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2390      	movs	r3, #144	@ 0x90
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	491d      	ldr	r1, [pc, #116]	@ (80050a4 <BSP_LED_Init+0x94>)
 800502e:	400a      	ands	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8005032:	2390      	movs	r3, #144	@ 0x90
 8005034:	05db      	lsls	r3, r3, #23
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2390      	movs	r3, #144	@ 0x90
 800503a:	05db      	lsls	r3, r3, #23
 800503c:	2180      	movs	r1, #128	@ 0x80
 800503e:	00c9      	lsls	r1, r1, #3
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8005044:	2390      	movs	r3, #144	@ 0x90
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	2390      	movs	r3, #144	@ 0x90
 800504c:	05db      	lsls	r3, r3, #23
 800504e:	2120      	movs	r1, #32
 8005050:	438a      	bics	r2, r1
 8005052:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8005054:	2390      	movs	r3, #144	@ 0x90
 8005056:	05db      	lsls	r3, r3, #23
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	2390      	movs	r3, #144	@ 0x90
 800505c:	05db      	lsls	r3, r3, #23
 800505e:	4911      	ldr	r1, [pc, #68]	@ (80050a4 <BSP_LED_Init+0x94>)
 8005060:	400a      	ands	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8005064:	2390      	movs	r3, #144	@ 0x90
 8005066:	05db      	lsls	r3, r3, #23
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	2390      	movs	r3, #144	@ 0x90
 800506c:	05db      	lsls	r3, r3, #23
 800506e:	21c0      	movs	r1, #192	@ 0xc0
 8005070:	0109      	lsls	r1, r1, #4
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8005076:	2390      	movs	r3, #144	@ 0x90
 8005078:	05db      	lsls	r3, r3, #23
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	2390      	movs	r3, #144	@ 0x90
 800507e:	05db      	lsls	r3, r3, #23
 8005080:	4908      	ldr	r1, [pc, #32]	@ (80050a4 <BSP_LED_Init+0x94>)
 8005082:	400a      	ands	r2, r1
 8005084:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8005086:	2390      	movs	r3, #144	@ 0x90
 8005088:	05db      	lsls	r3, r3, #23
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	2390      	movs	r3, #144	@ 0x90
 800508e:	05db      	lsls	r3, r3, #23
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	0389      	lsls	r1, r1, #14
 8005094:	430a      	orrs	r2, r1
 8005096:	619a      	str	r2, [r3, #24]
}
 8005098:	46c0      	nop			@ (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	40021000 	.word	0x40021000
 80050a4:	fffff3ff 	.word	0xfffff3ff

080050a8 <BSP_PB_Init>:
{
	GPIOA->ODR ^= GPIO_ODR_5;
}

void BSP_PB_Init()
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80050ac:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <BSP_PB_Init+0x38>)
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <BSP_PB_Init+0x38>)
 80050b2:	2180      	movs	r1, #128	@ 0x80
 80050b4:	0309      	lsls	r1, r1, #12
 80050b6:	430a      	orrs	r2, r1
 80050b8:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80050ba:	4b0a      	ldr	r3, [pc, #40]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050c0:	4909      	ldr	r1, [pc, #36]	@ (80050e8 <BSP_PB_Init+0x40>)
 80050c2:	400a      	ands	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80050c6:	4a07      	ldr	r2, [pc, #28]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050c8:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <BSP_PB_Init+0x3c>)
 80050d4:	4904      	ldr	r1, [pc, #16]	@ (80050e8 <BSP_PB_Init+0x40>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]
}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	48000800 	.word	0x48000800
 80050e8:	f3ffffff 	.word	0xf3ffffff

080050ec <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80050f0:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <BSP_Console_Init+0xb4>)
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	4b2a      	ldr	r3, [pc, #168]	@ (80051a0 <BSP_Console_Init+0xb4>)
 80050f6:	2180      	movs	r1, #128	@ 0x80
 80050f8:	0289      	lsls	r1, r1, #10
 80050fa:	430a      	orrs	r2, r1
 80050fc:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80050fe:	2390      	movs	r3, #144	@ 0x90
 8005100:	05db      	lsls	r3, r3, #23
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2390      	movs	r3, #144	@ 0x90
 8005106:	05db      	lsls	r3, r3, #23
 8005108:	21f0      	movs	r1, #240	@ 0xf0
 800510a:	438a      	bics	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 800510e:	2390      	movs	r3, #144	@ 0x90
 8005110:	05db      	lsls	r3, r3, #23
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2390      	movs	r3, #144	@ 0x90
 8005116:	05db      	lsls	r3, r3, #23
 8005118:	21a0      	movs	r1, #160	@ 0xa0
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 800511e:	2390      	movs	r3, #144	@ 0x90
 8005120:	05db      	lsls	r3, r3, #23
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	2390      	movs	r3, #144	@ 0x90
 8005126:	05db      	lsls	r3, r3, #23
 8005128:	491e      	ldr	r1, [pc, #120]	@ (80051a4 <BSP_Console_Init+0xb8>)
 800512a:	400a      	ands	r2, r1
 800512c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800512e:	2390      	movs	r3, #144	@ 0x90
 8005130:	05db      	lsls	r3, r3, #23
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	2390      	movs	r3, #144	@ 0x90
 8005136:	05db      	lsls	r3, r3, #23
 8005138:	2188      	movs	r1, #136	@ 0x88
 800513a:	0149      	lsls	r1, r1, #5
 800513c:	430a      	orrs	r2, r1
 800513e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8005140:	4b17      	ldr	r3, [pc, #92]	@ (80051a0 <BSP_Console_Init+0xb4>)
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <BSP_Console_Init+0xb4>)
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	0289      	lsls	r1, r1, #10
 800514a:	430a      	orrs	r2, r1
 800514c:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800514e:	4b16      	ldr	r3, [pc, #88]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800515a:	4b13      	ldr	r3, [pc, #76]	@ (80051a8 <BSP_Console_Init+0xbc>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8005160:	4b0f      	ldr	r3, [pc, #60]	@ (80051a0 <BSP_Console_Init+0xb4>)
 8005162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <BSP_Console_Init+0xb4>)
 8005166:	4911      	ldr	r1, [pc, #68]	@ (80051ac <BSP_Console_Init+0xc0>)
 8005168:	400a      	ands	r2, r1
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <BSP_Console_Init+0xbc>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005172:	2180      	movs	r1, #128	@ 0x80
 8005174:	0209      	lsls	r1, r1, #8
 8005176:	430a      	orrs	r2, r1
 8005178:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <BSP_Console_Init+0xbc>)
 800517c:	4a0c      	ldr	r2, [pc, #48]	@ (80051b0 <BSP_Console_Init+0xc4>)
 800517e:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005186:	210c      	movs	r1, #12
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <BSP_Console_Init+0xbc>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <BSP_Console_Init+0xbc>)
 8005192:	2101      	movs	r1, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	40021000 	.word	0x40021000
 80051a4:	ffff00ff 	.word	0xffff00ff
 80051a8:	40004400 	.word	0x40004400
 80051ac:	fffcffff 	.word	0xfffcffff
 80051b0:	00000341 	.word	0x00000341

080051b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051b4:	480d      	ldr	r0, [pc, #52]	@ (80051ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80051b8:	f000 f825 	bl	8005206 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051bc:	480c      	ldr	r0, [pc, #48]	@ (80051f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80051be:	490d      	ldr	r1, [pc, #52]	@ (80051f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051c0:	4a0d      	ldr	r2, [pc, #52]	@ (80051f8 <LoopForever+0xe>)
  movs r3, #0
 80051c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051c4:	e002      	b.n	80051cc <LoopCopyDataInit>

080051c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ca:	3304      	adds	r3, #4

080051cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051d0:	d3f9      	bcc.n	80051c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051d2:	4a0a      	ldr	r2, [pc, #40]	@ (80051fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80051d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005200 <LoopForever+0x16>)
  movs r3, #0
 80051d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051d8:	e001      	b.n	80051de <LoopFillZerobss>

080051da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051dc:	3204      	adds	r2, #4

080051de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051e0:	d3fb      	bcc.n	80051da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051e2:	f000 f8b5 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051e6:	f7ff fb89 	bl	80048fc <main>

080051ea <LoopForever>:

LoopForever:
    b LoopForever
 80051ea:	e7fe      	b.n	80051ea <LoopForever>
  ldr   r0, =_estack
 80051ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80051f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051f4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80051f8:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 80051fc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005200:	20002e24 	.word	0x20002e24

08005204 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005204:	e7fe      	b.n	8005204 <ADC1_COMP_IRQHandler>

08005206 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	2300      	movs	r3, #0
 8005224:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005226:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <SystemCoreClockUpdate+0xf8>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	220c      	movs	r2, #12
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d011      	beq.n	800525a <SystemCoreClockUpdate+0x4a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d84f      	bhi.n	80052dc <SystemCoreClockUpdate+0xcc>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <SystemCoreClockUpdate+0x3a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b04      	cmp	r3, #4
 8005246:	d004      	beq.n	8005252 <SystemCoreClockUpdate+0x42>
 8005248:	e048      	b.n	80052dc <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800524a:	4b30      	ldr	r3, [pc, #192]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 800524c:	4a30      	ldr	r2, [pc, #192]	@ (8005310 <SystemCoreClockUpdate+0x100>)
 800524e:	601a      	str	r2, [r3, #0]
      break;
 8005250:	e048      	b.n	80052e4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8005252:	4b2e      	ldr	r3, [pc, #184]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 8005254:	4a2e      	ldr	r2, [pc, #184]	@ (8005310 <SystemCoreClockUpdate+0x100>)
 8005256:	601a      	str	r2, [r3, #0]
      break;
 8005258:	e044      	b.n	80052e4 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800525a:	4b2b      	ldr	r3, [pc, #172]	@ (8005308 <SystemCoreClockUpdate+0xf8>)
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	23f0      	movs	r3, #240	@ 0xf0
 8005260:	039b      	lsls	r3, r3, #14
 8005262:	4013      	ands	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005266:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <SystemCoreClockUpdate+0xf8>)
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	23c0      	movs	r3, #192	@ 0xc0
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	4013      	ands	r3, r2
 8005270:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0c9b      	lsrs	r3, r3, #18
 8005276:	3302      	adds	r3, #2
 8005278:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800527a:	4b23      	ldr	r3, [pc, #140]	@ (8005308 <SystemCoreClockUpdate+0xf8>)
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	220f      	movs	r2, #15
 8005280:	4013      	ands	r3, r2
 8005282:	3301      	adds	r3, #1
 8005284:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	025b      	lsls	r3, r3, #9
 800528c:	429a      	cmp	r2, r3
 800528e:	d10a      	bne.n	80052a6 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	481f      	ldr	r0, [pc, #124]	@ (8005310 <SystemCoreClockUpdate+0x100>)
 8005294:	f7fa ff38 	bl	8000108 <__udivsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	001a      	movs	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	435a      	muls	r2, r3
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052a2:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80052a4:	e01e      	b.n	80052e4 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	23c0      	movs	r3, #192	@ 0xc0
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d10a      	bne.n	80052c6 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4818      	ldr	r0, [pc, #96]	@ (8005314 <SystemCoreClockUpdate+0x104>)
 80052b4:	f7fa ff28 	bl	8000108 <__udivsi3>
 80052b8:	0003      	movs	r3, r0
 80052ba:	001a      	movs	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	435a      	muls	r2, r3
 80052c0:	4b12      	ldr	r3, [pc, #72]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052c2:	601a      	str	r2, [r3, #0]
      break;
 80052c4:	e00e      	b.n	80052e4 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	4811      	ldr	r0, [pc, #68]	@ (8005310 <SystemCoreClockUpdate+0x100>)
 80052ca:	f7fa ff1d 	bl	8000108 <__udivsi3>
 80052ce:	0003      	movs	r3, r0
 80052d0:	001a      	movs	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	435a      	muls	r2, r3
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052d8:	601a      	str	r2, [r3, #0]
      break;
 80052da:	e003      	b.n	80052e4 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052de:	4a0c      	ldr	r2, [pc, #48]	@ (8005310 <SystemCoreClockUpdate+0x100>)
 80052e0:	601a      	str	r2, [r3, #0]
      break;
 80052e2:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80052e4:	4b08      	ldr	r3, [pc, #32]	@ (8005308 <SystemCoreClockUpdate+0xf8>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	220f      	movs	r2, #15
 80052ec:	4013      	ands	r3, r2
 80052ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005318 <SystemCoreClockUpdate+0x108>)
 80052f0:	5cd3      	ldrb	r3, [r2, r3]
 80052f2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	40da      	lsrs	r2, r3
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <SystemCoreClockUpdate+0xfc>)
 80052fe:	601a      	str	r2, [r3, #0]
}
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b004      	add	sp, #16
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	20000014 	.word	0x20000014
 8005310:	007a1200 	.word	0x007a1200
 8005314:	02dc6c00 	.word	0x02dc6c00
 8005318:	08005b18 	.word	0x08005b18

0800531c <memset>:
 800531c:	0003      	movs	r3, r0
 800531e:	1882      	adds	r2, r0, r2
 8005320:	4293      	cmp	r3, r2
 8005322:	d100      	bne.n	8005326 <memset+0xa>
 8005324:	4770      	bx	lr
 8005326:	7019      	strb	r1, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	e7f9      	b.n	8005320 <memset+0x4>

0800532c <strncmp>:
 800532c:	b530      	push	{r4, r5, lr}
 800532e:	0005      	movs	r5, r0
 8005330:	1e10      	subs	r0, r2, #0
 8005332:	d00b      	beq.n	800534c <strncmp+0x20>
 8005334:	2400      	movs	r4, #0
 8005336:	3a01      	subs	r2, #1
 8005338:	5d2b      	ldrb	r3, [r5, r4]
 800533a:	5d08      	ldrb	r0, [r1, r4]
 800533c:	4283      	cmp	r3, r0
 800533e:	d104      	bne.n	800534a <strncmp+0x1e>
 8005340:	42a2      	cmp	r2, r4
 8005342:	d002      	beq.n	800534a <strncmp+0x1e>
 8005344:	3401      	adds	r4, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f6      	bne.n	8005338 <strncmp+0xc>
 800534a:	1a18      	subs	r0, r3, r0
 800534c:	bd30      	pop	{r4, r5, pc}
	...

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	2600      	movs	r6, #0
 8005354:	4c0c      	ldr	r4, [pc, #48]	@ (8005388 <__libc_init_array+0x38>)
 8005356:	4d0d      	ldr	r5, [pc, #52]	@ (800538c <__libc_init_array+0x3c>)
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	42a6      	cmp	r6, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	2600      	movs	r6, #0
 8005362:	f000 f823 	bl	80053ac <_init>
 8005366:	4c0a      	ldr	r4, [pc, #40]	@ (8005390 <__libc_init_array+0x40>)
 8005368:	4d0a      	ldr	r5, [pc, #40]	@ (8005394 <__libc_init_array+0x44>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	42a6      	cmp	r6, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	00b3      	lsls	r3, r6, #2
 8005376:	58eb      	ldr	r3, [r5, r3]
 8005378:	4798      	blx	r3
 800537a:	3601      	adds	r6, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	00b3      	lsls	r3, r6, #2
 8005380:	58eb      	ldr	r3, [r5, r3]
 8005382:	4798      	blx	r3
 8005384:	3601      	adds	r6, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	08005b28 	.word	0x08005b28
 800538c:	08005b28 	.word	0x08005b28
 8005390:	08005b2c 	.word	0x08005b2c
 8005394:	08005b28 	.word	0x08005b28

08005398 <memcpy>:
 8005398:	2300      	movs	r3, #0
 800539a:	b510      	push	{r4, lr}
 800539c:	429a      	cmp	r2, r3
 800539e:	d100      	bne.n	80053a2 <memcpy+0xa>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	5ccc      	ldrb	r4, [r1, r3]
 80053a4:	54c4      	strb	r4, [r0, r3]
 80053a6:	3301      	adds	r3, #1
 80053a8:	e7f8      	b.n	800539c <memcpy+0x4>
	...

080053ac <_init>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr

080053b8 <_fini>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr
