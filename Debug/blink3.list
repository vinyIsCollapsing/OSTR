
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005820  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006168  08006168  00007168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08006170  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003220  20000018  08006188  00008018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003238  08006188  00008238  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008717  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ae9  00000000  00000000  00010757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000940  00000000  00000000  00012240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000700  00000000  00000000  00012b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001f01  00000000  00000000  00013280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b699  00000000  00000000  00015181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075a45  00000000  00000000  0002081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0009625f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002084  00000000  00000000  000962a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00098328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058c8 	.word	0x080058c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080058c8 	.word	0x080058c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}

0800032e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <xQueueGenericReset+0x1e>
 8000346:	b672      	cpsid	i
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e7fd      	b.n	8000348 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <xQueueGenericReset+0x26>
 8000352:	e06a      	b.n	800042a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000358:	2b00      	cmp	r3, #0
 800035a:	d066      	beq.n	800042a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	2400      	movs	r4, #0
 8000366:	0c15      	lsrs	r5, r2, #16
 8000368:	0c19      	lsrs	r1, r3, #16
 800036a:	b2a8      	uxth	r0, r5
 800036c:	2800      	cmp	r0, #0
 800036e:	d104      	bne.n	800037a <xQueueGenericReset+0x4c>
 8000370:	b288      	uxth	r0, r1
 8000372:	2800      	cmp	r0, #0
 8000374:	d013      	beq.n	800039e <xQueueGenericReset+0x70>
 8000376:	1c10      	adds	r0, r2, #0
 8000378:	e004      	b.n	8000384 <xQueueGenericReset+0x56>
 800037a:	b289      	uxth	r1, r1
 800037c:	2900      	cmp	r1, #0
 800037e:	d10d      	bne.n	800039c <xQueueGenericReset+0x6e>
 8000380:	1c29      	adds	r1, r5, #0
 8000382:	1c18      	adds	r0, r3, #0
 8000384:	b292      	uxth	r2, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	435a      	muls	r2, r3
 800038a:	b283      	uxth	r3, r0
 800038c:	b289      	uxth	r1, r1
 800038e:	434b      	muls	r3, r1
 8000390:	0c12      	lsrs	r2, r2, #16
 8000392:	189b      	adds	r3, r3, r2
 8000394:	141b      	asrs	r3, r3, #16
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <xQueueGenericReset+0x70>
 800039c:	2401      	movs	r4, #1
 800039e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003a0:	d143      	bne.n	800042a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80003a2:	f002 fcfd 	bl	8002da0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	434b      	muls	r3, r1
 80003b4:	18d2      	adds	r2, r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	434b      	muls	r3, r1
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2244      	movs	r2, #68	@ 0x44
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2245      	movs	r2, #69	@ 0x45
 80003ea:	21ff      	movs	r1, #255	@ 0xff
 80003ec:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10d      	bne.n	8000410 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3310      	adds	r3, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fe27 	bl	8002054 <xTaskRemoveFromEventList>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d00c      	beq.n	8000424 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800040a:	f002 fcb9 	bl	8002d80 <vPortYield>
 800040e:	e009      	b.n	8000424 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3310      	adds	r3, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff03 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3324      	adds	r3, #36	@ 0x24
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000424:	f002 fcce 	bl	8002dc4 <vPortExitCritical>
 8000428:	e001      	b.n	800042e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <xQueueGenericReset+0x10c>
 8000434:	b672      	cpsid	i
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}

08000444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	b08b      	sub	sp, #44	@ 0x2c
 8000448:	af02      	add	r7, sp, #8
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d065      	beq.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045c:	2000      	movs	r0, #0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0c19      	lsrs	r1, r3, #16
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c1e      	adds	r6, r3, #0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0c1b      	lsrs	r3, r3, #16
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	1c15      	adds	r5, r2, #0
 800046e:	b28a      	uxth	r2, r1
 8000470:	2a00      	cmp	r2, #0
 8000472:	d105      	bne.n	8000480 <xQueueGenericCreate+0x3c>
 8000474:	b29a      	uxth	r2, r3
 8000476:	2a00      	cmp	r2, #0
 8000478:	d013      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	1c34      	adds	r4, r6, #0
 800047e:	e003      	b.n	8000488 <xQueueGenericCreate+0x44>
 8000480:	b29b      	uxth	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10c      	bne.n	80004a0 <xQueueGenericCreate+0x5c>
 8000486:	1c2c      	adds	r4, r5, #0
 8000488:	b2b3      	uxth	r3, r6
 800048a:	b2aa      	uxth	r2, r5
 800048c:	435a      	muls	r2, r3
 800048e:	b2a3      	uxth	r3, r4
 8000490:	b289      	uxth	r1, r1
 8000492:	434b      	muls	r3, r1
 8000494:	0c12      	lsrs	r2, r2, #16
 8000496:	189b      	adds	r3, r3, r2
 8000498:	141b      	asrs	r3, r3, #16
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 80004a0:	2001      	movs	r0, #1
 80004a2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a4:	d140      	bne.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004ac:	3351      	adds	r3, #81	@ 0x51
 80004ae:	d83b      	bhi.n	8000528 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4353      	muls	r3, r2
 80004b6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3350      	adds	r3, #80	@ 0x50
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 fd07 	bl	8002ed0 <pvPortMalloc>
 80004c2:	0003      	movs	r3, r0
 80004c4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00f      	beq.n	80004ec <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3350      	adds	r3, #80	@ 0x50
 80004d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781c      	ldrb	r4, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f000 f82f 	bl	8000548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004ea:	e023      	b.n	8000534 <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 80004ec:	f002 fe85 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80004f0:	0003      	movs	r3, r0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fd92 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80004f8:	0003      	movs	r3, r0
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <xQueueGenericCreate+0xfc>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d015      	beq.n	8000534 <xQueueGenericCreate+0xf0>
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <xQueueGenericCreate+0x100>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	3340      	adds	r3, #64	@ 0x40
 8000512:	b2db      	uxtb	r3, r3
 8000514:	0018      	movs	r0, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <xQueueGenericCreate+0x100>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f003 fb47 	bl	8003bb4 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8000526:	e005      	b.n	8000534 <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <xQueueGenericCreate+0xf2>
 800052e:	b672      	cpsid	i
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 8000534:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000536:	69fb      	ldr	r3, [r7, #28]
    }
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	@ 0x24
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	20001dc8 	.word	0x20001dc8
 8000544:	20000008 	.word	0x20000008

08000548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	001a      	movs	r2, r3
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff fed5 	bl	800032e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	1cfa      	adds	r2, r7, #3
 8000588:	214c      	movs	r1, #76	@ 0x4c
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fd28 	bl	8002fe6 <prvTraceGetQueueType>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fe32 	bl	8004208 <prvTraceGetObjectHandle>
 80005a4:	0003      	movs	r3, r0
 80005a6:	001a      	movs	r2, r3
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fd96 	bl	80030de <prvTraceSetQueueNumberLow16>
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <prvInitialiseNewQueue+0x140>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fda9 	bl	8003112 <prvTraceSetQueueNumberHigh16>
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fd0f 	bl	8002fe6 <prvTraceGetQueueType>
 80005c8:	0003      	movs	r3, r0
 80005ca:	001a      	movs	r2, r3
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 80005ce:	5c9c      	ldrb	r4, [r3, r2]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fd66 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80005d8:	0003      	movs	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	0019      	movs	r1, r3
 80005de:	0020      	movs	r0, r4
 80005e0:	f003 fec2 	bl	8004368 <prvMarkObjectAsUsed>
 80005e4:	f002 fe09 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80005e8:	0003      	movs	r3, r0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fd16 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <prvInitialiseNewQueue+0x144>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4013      	ands	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d029      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fd5c 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <prvInitialiseNewQueue+0x144>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4013      	ands	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01d      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fce3 	bl	8002fe6 <prvTraceGetQueueType>
 8000620:	0003      	movs	r3, r0
 8000622:	001a      	movs	r2, r3
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000626:	5c9b      	ldrb	r3, [r3, r2]
 8000628:	3318      	adds	r3, #24
 800062a:	b2db      	uxtb	r3, r3
 800062c:	001d      	movs	r5, r3
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fcd8 	bl	8002fe6 <prvTraceGetQueueType>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800063c:	5c9c      	ldrb	r4, [r3, r2]
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fd2f 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000646:	0003      	movs	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	001a      	movs	r2, r3
 800064c:	0021      	movs	r1, r4
 800064e:	0028      	movs	r0, r5
 8000650:	f003 fab0 	bl	8003bb4 <prvTraceStoreKernelCall>
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fcc5 	bl	8002fe6 <prvTraceGetQueueType>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000662:	5c9c      	ldrb	r4, [r3, r2]
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fd1c 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 800066c:	0003      	movs	r3, r0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	0020      	movs	r0, r4
 8000676:	f003 fcdb 	bl	8004030 <prvTraceSetObjectState>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000008 	.word	0x20000008
 8000688:	20001dca 	.word	0x20001dca
 800068c:	20001dc8 	.word	0x20001dc8

08000690 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00e      	beq.n	80006bc <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	f000 f820 	bl	80006fc <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	6939      	ldr	r1, [r7, #16]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff feaf 	bl	8000444 <xQueueGenericCreate>
 80006e6:	0003      	movs	r3, r0
 80006e8:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ffcf 	bl	8000690 <prvInitialiseMutex>

        return xNewQueue;
 80006f2:	68fb      	ldr	r3, [r7, #12]
    }
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b006      	add	sp, #24
 80006fa:	bd80      	pop	{r7, pc}

080006fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <xQueueGenericSend+0x22>
 8000718:	b672      	cpsid	i
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	e7fd      	b.n	800071a <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d103      	bne.n	800072c <xQueueGenericSend+0x30>
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <xQueueGenericSend+0x34>
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <xQueueGenericSend+0x36>
 8000730:	2300      	movs	r3, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <xQueueGenericSend+0x40>
 8000736:	b672      	cpsid	i
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	e7fd      	b.n	8000738 <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d103      	bne.n	800074a <xQueueGenericSend+0x4e>
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <xQueueGenericSend+0x52>
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <xQueueGenericSend+0x54>
 800074e:	2300      	movs	r3, #0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <xQueueGenericSend+0x5e>
 8000754:	b672      	cpsid	i
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	e7fd      	b.n	8000756 <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800075a:	f001 fe65 	bl	8002428 <xTaskGetSchedulerState>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d102      	bne.n	8000768 <xQueueGenericSend+0x6c>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <xQueueGenericSend+0x70>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <xQueueGenericSend+0x72>
 800076c:	2300      	movs	r3, #0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <xQueueGenericSend+0x7c>
 8000772:	b672      	cpsid	i
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000778:	f002 fb12 	bl	8002da0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000784:	429a      	cmp	r2, r3
 8000786:	d303      	bcc.n	8000790 <xQueueGenericSend+0x94>
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d000      	beq.n	8000790 <xQueueGenericSend+0x94>
 800078e:	e07f      	b.n	8000890 <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 8000790:	f002 fd33 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000794:	0003      	movs	r3, r0
 8000796:	0018      	movs	r0, r3
 8000798:	f002 fc40 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800079c:	0003      	movs	r3, r0
 800079e:	001a      	movs	r2, r3
 80007a0:	4bc7      	ldr	r3, [pc, #796]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	4013      	ands	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d02e      	beq.n	800080a <xQueueGenericSend+0x10e>
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fc86 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 80007b4:	0003      	movs	r3, r0
 80007b6:	001a      	movs	r2, r3
 80007b8:	4bc1      	ldr	r3, [pc, #772]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	4013      	ands	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d022      	beq.n	800080a <xQueueGenericSend+0x10e>
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10b      	bne.n	80007e2 <xQueueGenericSend+0xe6>
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 fc0a 	bl	8002fe6 <prvTraceGetQueueType>
 80007d2:	0003      	movs	r3, r0
 80007d4:	001a      	movs	r2, r3
 80007d6:	4bbb      	ldr	r3, [pc, #748]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80007d8:	5c9b      	ldrb	r3, [r3, r2]
 80007da:	3320      	adds	r3, #32
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	001d      	movs	r5, r3
 80007e0:	e000      	b.n	80007e4 <xQueueGenericSend+0xe8>
 80007e2:	2525      	movs	r5, #37	@ 0x25
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fbfd 	bl	8002fe6 <prvTraceGetQueueType>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	4bb4      	ldr	r3, [pc, #720]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80007f2:	5c9c      	ldrb	r4, [r3, r2]
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fc54 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80007fc:	0003      	movs	r3, r0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	001a      	movs	r2, r3
 8000802:	0021      	movs	r1, r4
 8000804:	0028      	movs	r0, r5
 8000806:	f003 f9d5 	bl	8003bb4 <prvTraceStoreKernelCall>
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	0018      	movs	r0, r3
 800080e:	f002 fbea 	bl	8002fe6 <prvTraceGetQueueType>
 8000812:	0003      	movs	r3, r0
 8000814:	001a      	movs	r2, r3
 8000816:	4bab      	ldr	r3, [pc, #684]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 8000818:	5c9c      	ldrb	r4, [r3, r2]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fc41 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000822:	0003      	movs	r3, r0
 8000824:	b2dd      	uxtb	r5, r3
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fbdc 	bl	8002fe6 <prvTraceGetQueueType>
 800082e:	0003      	movs	r3, r0
 8000830:	001a      	movs	r2, r3
 8000832:	4ba4      	ldr	r3, [pc, #656]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d005      	beq.n	8000846 <xQueueGenericSend+0x14a>
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3301      	adds	r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	e000      	b.n	8000848 <xQueueGenericSend+0x14c>
 8000846:	2300      	movs	r3, #0
 8000848:	001a      	movs	r2, r3
 800084a:	0029      	movs	r1, r5
 800084c:	0020      	movs	r0, r4
 800084e:	f003 fbef 	bl	8004030 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6a3b      	ldr	r3, [r7, #32]
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fc4c 	bl	80010f6 <prvCopyDataToQueue>
 800085e:	0003      	movs	r3, r0
 8000860:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000862:	6a3b      	ldr	r3, [r7, #32]
 8000864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000866:	2b00      	cmp	r3, #0
 8000868:	d009      	beq.n	800087e <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	3324      	adds	r3, #36	@ 0x24
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fbf0 	bl	8002054 <xTaskRemoveFromEventList>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d007      	beq.n	8000888 <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000878:	f002 fa82 	bl	8002d80 <vPortYield>
 800087c:	e004      	b.n	8000888 <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000884:	f002 fa7c 	bl	8002d80 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000888:	f002 fa9c 	bl	8002dc4 <vPortExitCritical>
                return pdPASS;
 800088c:	2301      	movs	r3, #1
 800088e:	e113      	b.n	8000ab8 <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d140      	bne.n	8000918 <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000896:	f002 fa95 	bl	8002dc4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800089a:	f002 fcae 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 800089e:	0003      	movs	r3, r0
 80008a0:	0018      	movs	r0, r3
 80008a2:	f002 fbbb 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b85      	ldr	r3, [pc, #532]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4013      	ands	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d02e      	beq.n	8000914 <xQueueGenericSend+0x218>
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 fc01 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 80008be:	0003      	movs	r3, r0
 80008c0:	001a      	movs	r2, r3
 80008c2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4013      	ands	r3, r2
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d022      	beq.n	8000914 <xQueueGenericSend+0x218>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <xQueueGenericSend+0x1f0>
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fb85 	bl	8002fe6 <prvTraceGetQueueType>
 80008dc:	0003      	movs	r3, r0
 80008de:	001a      	movs	r2, r3
 80008e0:	4b78      	ldr	r3, [pc, #480]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80008e2:	5c9b      	ldrb	r3, [r3, r2]
 80008e4:	3348      	adds	r3, #72	@ 0x48
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	001d      	movs	r5, r3
 80008ea:	e000      	b.n	80008ee <xQueueGenericSend+0x1f2>
 80008ec:	254d      	movs	r5, #77	@ 0x4d
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fb78 	bl	8002fe6 <prvTraceGetQueueType>
 80008f6:	0003      	movs	r3, r0
 80008f8:	001a      	movs	r2, r3
 80008fa:	4b72      	ldr	r3, [pc, #456]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80008fc:	5c9c      	ldrb	r4, [r3, r2]
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fbcf 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000906:	0003      	movs	r3, r0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	001a      	movs	r2, r3
 800090c:	0021      	movs	r1, r4
 800090e:	0028      	movs	r0, r5
 8000910:	f003 f950 	bl	8003bb4 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 8000914:	2300      	movs	r3, #0
 8000916:	e0cf      	b.n	8000ab8 <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	2b00      	cmp	r3, #0
 800091c:	d106      	bne.n	800092c <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800091e:	2314      	movs	r3, #20
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	f001 fc78 	bl	8002218 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000928:	2301      	movs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800092c:	f002 fa4a 	bl	8002dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000930:	f001 f830 	bl	8001994 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000934:	f002 fa34 	bl	8002da0 <vPortEnterCritical>
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	2244      	movs	r2, #68	@ 0x44
 800093c:	5c9b      	ldrb	r3, [r3, r2]
 800093e:	b25b      	sxtb	r3, r3
 8000940:	3301      	adds	r3, #1
 8000942:	d103      	bne.n	800094c <xQueueGenericSend+0x250>
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	2244      	movs	r2, #68	@ 0x44
 8000948:	2100      	movs	r1, #0
 800094a:	5499      	strb	r1, [r3, r2]
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	2245      	movs	r2, #69	@ 0x45
 8000950:	5c9b      	ldrb	r3, [r3, r2]
 8000952:	b25b      	sxtb	r3, r3
 8000954:	3301      	adds	r3, #1
 8000956:	d103      	bne.n	8000960 <xQueueGenericSend+0x264>
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2245      	movs	r2, #69	@ 0x45
 800095c:	2100      	movs	r1, #0
 800095e:	5499      	strb	r1, [r3, r2]
 8000960:	f002 fa30 	bl	8002dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000964:	1d3a      	adds	r2, r7, #4
 8000966:	2314      	movs	r3, #20
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fc67 	bl	8002240 <xTaskCheckForTimeOut>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d15c      	bne.n	8000a30 <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fcc1 	bl	8001300 <prvIsQueueFull>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d04f      	beq.n	8000a22 <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000982:	f002 fc3a 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000986:	0003      	movs	r3, r0
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fb47 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800098e:	0003      	movs	r3, r0
 8000990:	001a      	movs	r2, r3
 8000992:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	4013      	ands	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d02e      	beq.n	80009fc <xQueueGenericSend+0x300>
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f002 fb8d 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 80009a6:	0003      	movs	r3, r0
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b45      	ldr	r3, [pc, #276]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4013      	ands	r3, r2
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d022      	beq.n	80009fc <xQueueGenericSend+0x300>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10b      	bne.n	80009d4 <xQueueGenericSend+0x2d8>
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fb11 	bl	8002fe6 <prvTraceGetQueueType>
 80009c4:	0003      	movs	r3, r0
 80009c6:	001a      	movs	r2, r3
 80009c8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80009ca:	5c9b      	ldrb	r3, [r3, r2]
 80009cc:	3370      	adds	r3, #112	@ 0x70
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	001d      	movs	r5, r3
 80009d2:	e000      	b.n	80009d6 <xQueueGenericSend+0x2da>
 80009d4:	2575      	movs	r5, #117	@ 0x75
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fb04 	bl	8002fe6 <prvTraceGetQueueType>
 80009de:	0003      	movs	r3, r0
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 80009e4:	5c9c      	ldrb	r4, [r3, r2]
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 fb5b 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80009ee:	0003      	movs	r3, r0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	001a      	movs	r2, r3
 80009f4:	0021      	movs	r1, r4
 80009f6:	0028      	movs	r0, r5
 80009f8:	f003 f8dc 	bl	8003bb4 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	3310      	adds	r3, #16
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fa89 	bl	8001f1c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fc03 	bl	8001218 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a12:	f000 ffcb 	bl	80019ac <xTaskResumeAll>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d000      	beq.n	8000a1c <xQueueGenericSend+0x320>
 8000a1a:	e6ad      	b.n	8000778 <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 8000a1c:	f002 f9b0 	bl	8002d80 <vPortYield>
 8000a20:	e6aa      	b.n	8000778 <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fbf7 	bl	8001218 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a2a:	f000 ffbf 	bl	80019ac <xTaskResumeAll>
 8000a2e:	e6a3      	b.n	8000778 <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fbf0 	bl	8001218 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a38:	f000 ffb8 	bl	80019ac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000a3c:	f002 fbdd 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000a40:	0003      	movs	r3, r0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 faea 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	4013      	ands	r3, r2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d02e      	beq.n	8000ab6 <xQueueGenericSend+0x3ba>
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fb30 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000a60:	0003      	movs	r3, r0
 8000a62:	001a      	movs	r2, r3
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <xQueueGenericSend+0x3c4>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d022      	beq.n	8000ab6 <xQueueGenericSend+0x3ba>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <xQueueGenericSend+0x392>
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 fab4 	bl	8002fe6 <prvTraceGetQueueType>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 8000a84:	5c9b      	ldrb	r3, [r3, r2]
 8000a86:	3348      	adds	r3, #72	@ 0x48
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	001d      	movs	r5, r3
 8000a8c:	e000      	b.n	8000a90 <xQueueGenericSend+0x394>
 8000a8e:	254d      	movs	r5, #77	@ 0x4d
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 faa7 	bl	8002fe6 <prvTraceGetQueueType>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <xQueueGenericSend+0x3c8>)
 8000a9e:	5c9c      	ldrb	r4, [r3, r2]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fafe 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	001a      	movs	r2, r3
 8000aae:	0021      	movs	r1, r4
 8000ab0:	0028      	movs	r0, r5
 8000ab2:	f003 f87f 	bl	8003bb4 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8000ab6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b00a      	add	sp, #40	@ 0x28
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac0:	20001dc8 	.word	0x20001dc8
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 f805 	bl	8000ae8 <MyWrapper_xQueueGiveFromISR>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <MyWrapper_xQueueGiveFromISR+0x1c>
 8000afe:	b672      	cpsid	i
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	e7fd      	b.n	8000b00 <MyWrapper_xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <MyWrapper_xQueueGiveFromISR+0x2a>
 8000b0c:	b672      	cpsid	i
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	e7fd      	b.n	8000b0e <MyWrapper_xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d103      	bne.n	8000b22 <MyWrapper_xQueueGiveFromISR+0x3a>
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <MyWrapper_xQueueGiveFromISR+0x3e>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <MyWrapper_xQueueGiveFromISR+0x40>
 8000b26:	2300      	movs	r3, #0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <MyWrapper_xQueueGiveFromISR+0x4a>
 8000b2c:	b672      	cpsid	i
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	e7fd      	b.n	8000b2e <MyWrapper_xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b32:	f002 f95f 	bl	8002df4 <ulSetInterruptMaskFromISR>
 8000b36:	0003      	movs	r3, r0
 8000b38:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b3e:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d300      	bcc.n	8000b4c <MyWrapper_xQueueGiveFromISR+0x64>
 8000b4a:	e086      	b.n	8000c5a <MyWrapper_xQueueGiveFromISR+0x172>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b4c:	2317      	movs	r3, #23
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	6a3a      	ldr	r2, [r7, #32]
 8000b52:	2145      	movs	r1, #69	@ 0x45
 8000b54:	5c52      	ldrb	r2, [r2, r1]
 8000b56:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 fab0 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000b60:	0003      	movs	r3, r0
 8000b62:	001a      	movs	r2, r3
 8000b64:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d022      	beq.n	8000bb6 <MyWrapper_xQueueGiveFromISR+0xce>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10b      	bne.n	8000b8e <MyWrapper_xQueueGiveFromISR+0xa6>
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 fa34 	bl	8002fe6 <prvTraceGetQueueType>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b54      	ldr	r3, [pc, #336]	@ (8000cd4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	3330      	adds	r3, #48	@ 0x30
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	001d      	movs	r5, r3
 8000b8c:	e000      	b.n	8000b90 <MyWrapper_xQueueGiveFromISR+0xa8>
 8000b8e:	2535      	movs	r5, #53	@ 0x35
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fa27 	bl	8002fe6 <prvTraceGetQueueType>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000b9e:	5c9c      	ldrb	r4, [r3, r2]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fa7e 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	001a      	movs	r2, r3
 8000bae:	0021      	movs	r1, r4
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	f002 ffff 	bl	8003bb4 <prvTraceStoreKernelCall>
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fa14 	bl	8002fe6 <prvTraceGetQueueType>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	4b44      	ldr	r3, [pc, #272]	@ (8000cd4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000bc4:	5c9c      	ldrb	r4, [r3, r2]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 fa6b 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	b2d9      	uxtb	r1, r3
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	001a      	movs	r2, r3
 8000bde:	0020      	movs	r0, r4
 8000be0:	f003 fa26 	bl	8004030 <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bec:	2317      	movs	r3, #23
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	d111      	bne.n	8000c1c <MyWrapper_xQueueGiveFromISR+0x134>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d029      	beq.n	8000c54 <MyWrapper_xQueueGiveFromISR+0x16c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	3324      	adds	r3, #36	@ 0x24
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fa25 	bl	8002054 <xTaskRemoveFromEventList>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d022      	beq.n	8000c54 <MyWrapper_xQueueGiveFromISR+0x16c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d01f      	beq.n	8000c54 <MyWrapper_xQueueGiveFromISR+0x16c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e01b      	b.n	8000c54 <MyWrapper_xQueueGiveFromISR+0x16c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000c1c:	f000 ffd4 	bl	8001bc8 <uxTaskGetNumberOfTasks>
 8000c20:	0003      	movs	r3, r0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	2117      	movs	r1, #23
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d910      	bls.n	8000c54 <MyWrapper_xQueueGiveFromISR+0x16c>
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c3a:	d102      	bne.n	8000c42 <MyWrapper_xQueueGiveFromISR+0x15a>
 8000c3c:	b672      	cpsid	i
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	e7fd      	b.n	8000c3e <MyWrapper_xQueueGiveFromISR+0x156>
 8000c42:	2317      	movs	r3, #23
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b259      	sxtb	r1, r3
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	2245      	movs	r2, #69	@ 0x45
 8000c52:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c58:	e030      	b.n	8000cbc <MyWrapper_xQueueGiveFromISR+0x1d4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 fa2f 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000c62:	0003      	movs	r3, r0
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MyWrapper_xQueueGiveFromISR+0x1e8>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d022      	beq.n	8000cb8 <MyWrapper_xQueueGiveFromISR+0x1d0>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10b      	bne.n	8000c90 <MyWrapper_xQueueGiveFromISR+0x1a8>
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f002 f9b3 	bl	8002fe6 <prvTraceGetQueueType>
 8000c80:	0003      	movs	r3, r0
 8000c82:	001a      	movs	r2, r3
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000c86:	5c9b      	ldrb	r3, [r3, r2]
 8000c88:	3358      	adds	r3, #88	@ 0x58
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	001d      	movs	r5, r3
 8000c8e:	e000      	b.n	8000c92 <MyWrapper_xQueueGiveFromISR+0x1aa>
 8000c90:	255d      	movs	r5, #93	@ 0x5d
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 f9a6 	bl	8002fe6 <prvTraceGetQueueType>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <MyWrapper_xQueueGiveFromISR+0x1ec>)
 8000ca0:	5c9c      	ldrb	r4, [r3, r2]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f002 f9fd 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000caa:	0003      	movs	r3, r0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	001a      	movs	r2, r3
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	0028      	movs	r0, r5
 8000cb4:	f002 ff7e 	bl	8003bb4 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f002 f89e 	bl	8002e00 <vClearInterruptMaskFromISR>

    return xReturn;
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b00a      	add	sp, #40	@ 0x28
 8000ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	20001dc8 	.word	0x20001dc8
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <xQueueReceive+0x20>
 8000cf2:	b672      	cpsid	i
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	e7fd      	b.n	8000cf4 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d103      	bne.n	8000d06 <xQueueReceive+0x2e>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <xQueueReceive+0x32>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <xQueueReceive+0x34>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <xQueueReceive+0x3e>
 8000d10:	b672      	cpsid	i
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	e7fd      	b.n	8000d12 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d16:	f001 fb87 	bl	8002428 <xTaskGetSchedulerState>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d102      	bne.n	8000d24 <xQueueReceive+0x4c>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <xQueueReceive+0x50>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <xQueueReceive+0x52>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <xQueueReceive+0x5c>
 8000d2e:	b672      	cpsid	i
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	e7fd      	b.n	8000d30 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d34:	f002 f834 	bl	8002da0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <xQueueReceive+0x6e>
 8000d44:	e07d      	b.n	8000e42 <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fa3d 	bl	80011cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d52:	f002 fa52 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000d56:	0003      	movs	r3, r0
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f002 f95f 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	001a      	movs	r2, r3
 8000d62:	4bd2      	ldr	r3, [pc, #840]	@ (80010ac <xQueueReceive+0x3d4>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4013      	ands	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d029      	beq.n	8000dc2 <xQueueReceive+0xea>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 f9a5 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000d76:	0003      	movs	r3, r0
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4bcc      	ldr	r3, [pc, #816]	@ (80010ac <xQueueReceive+0x3d4>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01d      	beq.n	8000dc2 <xQueueReceive+0xea>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 f92c 	bl	8002fe6 <prvTraceGetQueueType>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	001a      	movs	r2, r3
 8000d92:	4bc7      	ldr	r3, [pc, #796]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000d94:	5c9b      	ldrb	r3, [r3, r2]
 8000d96:	3328      	adds	r3, #40	@ 0x28
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	001d      	movs	r5, r3
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 f921 	bl	8002fe6 <prvTraceGetQueueType>
 8000da4:	0003      	movs	r3, r0
 8000da6:	001a      	movs	r2, r3
 8000da8:	4bc1      	ldr	r3, [pc, #772]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000daa:	5c9c      	ldrb	r4, [r3, r2]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f002 f978 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000db4:	0003      	movs	r3, r0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	001a      	movs	r2, r3
 8000dba:	0021      	movs	r1, r4
 8000dbc:	0028      	movs	r0, r5
 8000dbe:	f002 fef9 	bl	8003bb4 <prvTraceStoreKernelCall>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 f90e 	bl	8002fe6 <prvTraceGetQueueType>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4bb8      	ldr	r3, [pc, #736]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000dd0:	5c9c      	ldrb	r4, [r3, r2]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 f965 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	b2dd      	uxtb	r5, r3
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 f900 	bl	8002fe6 <prvTraceGetQueueType>
 8000de6:	0003      	movs	r3, r0
 8000de8:	001a      	movs	r2, r3
 8000dea:	4bb1      	ldr	r3, [pc, #708]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d108      	bne.n	8000e04 <xQueueReceive+0x12c>
 8000df2:	f002 fa02 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000df6:	0003      	movs	r3, r0
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 f901 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	e004      	b.n	8000e0e <xQueueReceive+0x136>
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	001a      	movs	r2, r3
 8000e10:	0029      	movs	r1, r5
 8000e12:	0020      	movs	r0, r4
 8000e14:	f003 f90c 	bl	8004030 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	3310      	adds	r3, #16
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 f911 	bl	8002054 <xTaskRemoveFromEventList>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000e36:	f001 ffa3 	bl	8002d80 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000e3a:	f001 ffc3 	bl	8002dc4 <vPortExitCritical>
                return pdPASS;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e12f      	b.n	80010a2 <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d13b      	bne.n	8000ec0 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e48:	f001 ffbc 	bl	8002dc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e4c:	f002 f9d5 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000e50:	0003      	movs	r3, r0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 f8e2 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	4b93      	ldr	r3, [pc, #588]	@ (80010ac <xQueueReceive+0x3d4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	4013      	ands	r3, r2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d029      	beq.n	8000ebc <xQueueReceive+0x1e4>
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 f928 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000e70:	0003      	movs	r3, r0
 8000e72:	001a      	movs	r2, r3
 8000e74:	4b8d      	ldr	r3, [pc, #564]	@ (80010ac <xQueueReceive+0x3d4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01d      	beq.n	8000ebc <xQueueReceive+0x1e4>
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	0018      	movs	r0, r3
 8000e84:	f002 f8af 	bl	8002fe6 <prvTraceGetQueueType>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	4b88      	ldr	r3, [pc, #544]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	3350      	adds	r3, #80	@ 0x50
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	001d      	movs	r5, r3
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 f8a4 	bl	8002fe6 <prvTraceGetQueueType>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	4b83      	ldr	r3, [pc, #524]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000ea4:	5c9c      	ldrb	r4, [r3, r2]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f002 f8fb 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	0021      	movs	r1, r4
 8000eb6:	0028      	movs	r0, r5
 8000eb8:	f002 fe7c 	bl	8003bb4 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e0f0      	b.n	80010a2 <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 f9a4 	bl	8002218 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ed4:	f001 ff76 	bl	8002dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ed8:	f000 fd5c 	bl	8001994 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000edc:	f001 ff60 	bl	8002da0 <vPortEnterCritical>
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	2244      	movs	r2, #68	@ 0x44
 8000ee4:	5c9b      	ldrb	r3, [r3, r2]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	d103      	bne.n	8000ef4 <xQueueReceive+0x21c>
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2244      	movs	r2, #68	@ 0x44
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2245      	movs	r2, #69	@ 0x45
 8000ef8:	5c9b      	ldrb	r3, [r3, r2]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	d103      	bne.n	8000f08 <xQueueReceive+0x230>
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2245      	movs	r2, #69	@ 0x45
 8000f04:	2100      	movs	r1, #0
 8000f06:	5499      	strb	r1, [r3, r2]
 8000f08:	f001 ff5c 	bl	8002dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f0c:	1d3a      	adds	r2, r7, #4
 8000f0e:	2314      	movs	r3, #20
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f001 f993 	bl	8002240 <xTaskCheckForTimeOut>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d000      	beq.n	8000f20 <xQueueReceive+0x248>
 8000f1e:	e07a      	b.n	8001016 <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f9d6 	bl	80012d4 <prvIsQueueEmpty>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d06d      	beq.n	8001008 <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000f2c:	f002 f965 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000f30:	0003      	movs	r3, r0
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 f872 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80010ac <xQueueReceive+0x3d4>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	4013      	ands	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d029      	beq.n	8000f9c <xQueueReceive+0x2c4>
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f002 f8b8 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8000f50:	0003      	movs	r3, r0
 8000f52:	001a      	movs	r2, r3
 8000f54:	4b55      	ldr	r3, [pc, #340]	@ (80010ac <xQueueReceive+0x3d4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01d      	beq.n	8000f9c <xQueueReceive+0x2c4>
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 f83f 	bl	8002fe6 <prvTraceGetQueueType>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	4b50      	ldr	r3, [pc, #320]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000f6e:	5c9b      	ldrb	r3, [r3, r2]
 8000f70:	3368      	adds	r3, #104	@ 0x68
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	001d      	movs	r5, r3
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 f834 	bl	8002fe6 <prvTraceGetQueueType>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	001a      	movs	r2, r3
 8000f82:	4b4b      	ldr	r3, [pc, #300]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000f84:	5c9c      	ldrb	r4, [r3, r2]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f002 f88b 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	001a      	movs	r2, r3
 8000f94:	0021      	movs	r1, r4
 8000f96:	0028      	movs	r0, r5
 8000f98:	f002 fe0c 	bl	8003bb4 <prvTraceStoreKernelCall>
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f002 f821 	bl	8002fe6 <prvTraceGetQueueType>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	4b41      	ldr	r3, [pc, #260]	@ (80010b0 <xQueueReceive+0x3d8>)
 8000faa:	5c9b      	ldrb	r3, [r3, r2]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d018      	beq.n	8000fe2 <xQueueReceive+0x30a>
 8000fb0:	f002 f923 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f002 f830 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <xQueueReceive+0x3d4>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00a      	beq.n	8000fe2 <xQueueReceive+0x30a>
 8000fcc:	f002 f915 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f002 f814 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f003 f87f 	bl	80040e0 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3324      	adds	r3, #36	@ 0x24
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 ff96 	bl	8001f1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f910 	bl	8001218 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ff8:	f000 fcd8 	bl	80019ac <xTaskResumeAll>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d000      	beq.n	8001002 <xQueueReceive+0x32a>
 8001000:	e698      	b.n	8000d34 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8001002:	f001 febd 	bl	8002d80 <vPortYield>
 8001006:	e695      	b.n	8000d34 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f904 	bl	8001218 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001010:	f000 fccc 	bl	80019ac <xTaskResumeAll>
 8001014:	e68e      	b.n	8000d34 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f8fd 	bl	8001218 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800101e:	f000 fcc5 	bl	80019ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f955 	bl	80012d4 <prvIsQueueEmpty>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d100      	bne.n	8001030 <xQueueReceive+0x358>
 800102e:	e681      	b.n	8000d34 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001030:	f002 f8e3 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8001034:	0003      	movs	r3, r0
 8001036:	0018      	movs	r0, r3
 8001038:	f001 fff0 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800103c:	0003      	movs	r3, r0
 800103e:	001a      	movs	r2, r3
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <xQueueReceive+0x3d4>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	4013      	ands	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d029      	beq.n	80010a0 <xQueueReceive+0x3c8>
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	0018      	movs	r0, r3
 8001050:	f002 f836 	bl	80030c0 <prvTraceGetQueueNumberHigh16>
 8001054:	0003      	movs	r3, r0
 8001056:	001a      	movs	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <xQueueReceive+0x3d4>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4013      	ands	r3, r2
 800105e:	b29b      	uxth	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01d      	beq.n	80010a0 <xQueueReceive+0x3c8>
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	0018      	movs	r0, r3
 8001068:	f001 ffbd 	bl	8002fe6 <prvTraceGetQueueType>
 800106c:	0003      	movs	r3, r0
 800106e:	001a      	movs	r2, r3
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <xQueueReceive+0x3d8>)
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	3350      	adds	r3, #80	@ 0x50
 8001076:	b2db      	uxtb	r3, r3
 8001078:	001d      	movs	r5, r3
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	0018      	movs	r0, r3
 800107e:	f001 ffb2 	bl	8002fe6 <prvTraceGetQueueType>
 8001082:	0003      	movs	r3, r0
 8001084:	001a      	movs	r2, r3
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <xQueueReceive+0x3d8>)
 8001088:	5c9c      	ldrb	r4, [r3, r2]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	0018      	movs	r0, r3
 800108e:	f002 f809 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8001092:	0003      	movs	r3, r0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	001a      	movs	r2, r3
 8001098:	0021      	movs	r1, r4
 800109a:	0028      	movs	r0, r5
 800109c:	f002 fd8a 	bl	8003bb4 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 80010a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b00a      	add	sp, #40	@ 0x28
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	20001dc8 	.word	0x20001dc8
 80010b0:	20000008 	.word	0x20000008

080010b4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	224c      	movs	r2, #76	@ 0x4c
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
    }
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10e      	bne.n	8001132 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d14e      	bne.n	80011ba <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	0018      	movs	r0, r3
 8001122:	f001 f99d 	bl	8002460 <xTaskPriorityDisinherit>
 8001126:	0003      	movs	r3, r0
 8001128:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e043      	b.n	80011ba <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d119      	bne.n	800116c <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6858      	ldr	r0, [r3, #4]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	0019      	movs	r1, r3
 8001144:	f004 fbb6 	bl	80058b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	18d2      	adds	r2, r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	d32b      	bcc.n	80011ba <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	e026      	b.n	80011ba <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68d8      	ldr	r0, [r3, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0019      	movs	r1, r3
 8001178:	f004 fb9c 	bl	80058b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	425b      	negs	r3, r3
 8001186:	18d2      	adds	r2, r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	425b      	negs	r3, r3
 80011a2:	18d2      	adds	r2, r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d105      	bne.n	80011ba <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80011c2:	697b      	ldr	r3, [r7, #20]
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b006      	add	sp, #24
 80011ca:	bd80      	pop	{r7, pc}

080011cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d018      	beq.n	8001210 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	18d2      	adds	r2, r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d303      	bcc.n	8001200 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	f004 fb52 	bl	80058b4 <memcpy>
    }
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001220:	f001 fdbe 	bl	8002da0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	2145      	movs	r1, #69	@ 0x45
 800122c:	5c52      	ldrb	r2, [r2, r1]
 800122e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001230:	e013      	b.n	800125a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	2b00      	cmp	r3, #0
 8001238:	d016      	beq.n	8001268 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3324      	adds	r3, #36	@ 0x24
 800123e:	0018      	movs	r0, r3
 8001240:	f000 ff08 	bl	8002054 <xTaskRemoveFromEventList>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001248:	f001 f848 	bl	80022dc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800124c:	210f      	movs	r1, #15
 800124e:	187b      	adds	r3, r7, r1
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3b01      	subs	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	187b      	adds	r3, r7, r1
 8001258:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800125a:	230f      	movs	r3, #15
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	dce5      	bgt.n	8001232 <prvUnlockQueue+0x1a>
 8001266:	e000      	b.n	800126a <prvUnlockQueue+0x52>
                    break;
 8001268:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2245      	movs	r2, #69	@ 0x45
 800126e:	21ff      	movs	r1, #255	@ 0xff
 8001270:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001272:	f001 fda7 	bl	8002dc4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001276:	f001 fd93 	bl	8002da0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800127a:	230e      	movs	r3, #14
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	2144      	movs	r1, #68	@ 0x44
 8001282:	5c52      	ldrb	r2, [r2, r1]
 8001284:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001286:	e013      	b.n	80012b0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d016      	beq.n	80012be <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3310      	adds	r3, #16
 8001294:	0018      	movs	r0, r3
 8001296:	f000 fedd 	bl	8002054 <xTaskRemoveFromEventList>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800129e:	f001 f81d 	bl	80022dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80012a2:	210e      	movs	r1, #14
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80012b0:	230e      	movs	r3, #14
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dce5      	bgt.n	8001288 <prvUnlockQueue+0x70>
 80012bc:	e000      	b.n	80012c0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80012be:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2244      	movs	r2, #68	@ 0x44
 80012c4:	21ff      	movs	r1, #255	@ 0xff
 80012c6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80012c8:	f001 fd7c 	bl	8002dc4 <vPortExitCritical>
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80012dc:	f001 fd60 	bl	8002da0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80012f2:	f001 fd67 	bl	8002dc4 <vPortExitCritical>

    return xReturn;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001308:	f001 fd4a 	bl	8002da0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001314:	429a      	cmp	r2, r3
 8001316:	d102      	bne.n	800131e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e001      	b.n	8001322 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001322:	f001 fd4f 	bl	8002dc4 <vPortExitCritical>

    return xReturn;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b004      	add	sp, #16
 800132e:	bd80      	pop	{r7, pc}

08001330 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <vQueueAddToRegistry+0x1a>
 8001344:	b672      	cpsid	i
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	e7fd      	b.n	8001346 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d025      	beq.n	800139c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e01f      	b.n	8001396 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001356:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <vQueueAddToRegistry+0xac>)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	3304      	adds	r3, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	d105      	bne.n	8001374 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <vQueueAddToRegistry+0xac>)
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	60bb      	str	r3, [r7, #8]
                    break;
 8001372:	e013      	b.n	800139c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10a      	bne.n	8001390 <vQueueAddToRegistry+0x60>
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <vQueueAddToRegistry+0xac>)
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	00d2      	lsls	r2, r2, #3
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d104      	bne.n	8001390 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	00da      	lsls	r2, r3, #3
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <vQueueAddToRegistry+0xac>)
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d9dc      	bls.n	8001356 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d018      	beq.n	80013d4 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f001 fe18 	bl	8002fe6 <prvTraceGetQueueType>
 80013b6:	0003      	movs	r3, r0
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <vQueueAddToRegistry+0xb0>)
 80013bc:	5c9c      	ldrb	r4, [r3, r2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fe6f 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80013c6:	0003      	movs	r3, r0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	0019      	movs	r1, r3
 80013ce:	0020      	movs	r0, r4
 80013d0:	f003 f812 	bl	80043f8 <prvTraceSetObjectName>
        }
    }
 80013d4:	46c0      	nop			@ (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b005      	add	sp, #20
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	20000034 	.word	0x20000034
 80013e0:	20000008 	.word	0x20000008

080013e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80013f4:	f001 fcd4 	bl	8002da0 <vPortEnterCritical>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2244      	movs	r2, #68	@ 0x44
 80013fc:	5c9b      	ldrb	r3, [r3, r2]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	3301      	adds	r3, #1
 8001402:	d103      	bne.n	800140c <vQueueWaitForMessageRestricted+0x28>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2244      	movs	r2, #68	@ 0x44
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2245      	movs	r2, #69	@ 0x45
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	3301      	adds	r3, #1
 8001416:	d103      	bne.n	8001420 <vQueueWaitForMessageRestricted+0x3c>
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2245      	movs	r2, #69	@ 0x45
 800141c:	2100      	movs	r1, #0
 800141e:	5499      	strb	r1, [r3, r2]
 8001420:	f001 fcd0 	bl	8002dc4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3324      	adds	r3, #36	@ 0x24
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	0018      	movs	r0, r3
 8001436:	f000 fd91 	bl	8001f5c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff feeb 	bl	8001218 <prvUnlockQueue>
    }
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b006      	add	sp, #24
 8001448:	bd80      	pop	{r7, pc}

0800144a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800144a:	b590      	push	{r4, r7, lr}
 800144c:	b08d      	sub	sp, #52	@ 0x34
 800144e:	af04      	add	r7, sp, #16
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	0018      	movs	r0, r3
 8001462:	f001 fd35 	bl	8002ed0 <pvPortMalloc>
 8001466:	0003      	movs	r3, r0
 8001468:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001470:	2060      	movs	r0, #96	@ 0x60
 8001472:	f001 fd2d 	bl	8002ed0 <pvPortMalloc>
 8001476:	0003      	movs	r3, r0
 8001478:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2260      	movs	r2, #96	@ 0x60
 8001484:	2100      	movs	r1, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f004 f9d6 	bl	8005838 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	631a      	str	r2, [r3, #48]	@ 0x30
 8001492:	e006      	b.n	80014a2 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	0018      	movs	r0, r3
 8001498:	f001 fd7c 	bl	8002f94 <vPortFree>
 800149c:	e001      	b.n	80014a2 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d016      	beq.n	80014d6 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	683c      	ldr	r4, [r7, #0]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9303      	str	r3, [sp, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	0023      	movs	r3, r4
 80014c4:	f000 f810 	bl	80014e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f88e 	bl	80015ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	e002      	b.n	80014dc <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014d6:	2301      	movs	r3, #1
 80014d8:	425b      	negs	r3, r3
 80014da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80014dc:	69bb      	ldr	r3, [r7, #24]
    }
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b009      	add	sp, #36	@ 0x24
 80014e4:	bd90      	pop	{r4, r7, pc}
	...

080014e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	001a      	movs	r2, r3
 8001500:	21a5      	movs	r1, #165	@ 0xa5
 8001502:	f004 f999 	bl	8005838 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4936      	ldr	r1, [pc, #216]	@ (80015e8 <prvInitialiseNewTask+0x100>)
 800150e:	468c      	mov	ip, r1
 8001510:	4463      	add	r3, ip
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2207      	movs	r2, #7
 800151c:	4393      	bics	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	d002      	beq.n	800152e <prvInitialiseNewTask+0x46>
 8001528:	b672      	cpsid	i
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	e7fd      	b.n	800152a <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01f      	beq.n	8001574 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e013      	b.n	8001562 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001544:	2134      	movs	r1, #52	@ 0x34
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	18d3      	adds	r3, r2, r3
 800154a:	185b      	adds	r3, r3, r1
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	18d3      	adds	r3, r2, r3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d9e8      	bls.n	800153a <prvInitialiseNewTask+0x52>
 8001568:	e000      	b.n	800156c <prvInitialiseNewTask+0x84>
            {
                break;
 800156a:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800156c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156e:	2243      	movs	r2, #67	@ 0x43
 8001570:	2100      	movs	r1, #0
 8001572:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2b04      	cmp	r3, #4
 8001578:	d902      	bls.n	8001580 <prvInitialiseNewTask+0x98>
 800157a:	b672      	cpsid	i
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	e7fd      	b.n	800157c <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d901      	bls.n	800158a <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	6a3a      	ldr	r2, [r7, #32]
 8001594:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001598:	3304      	adds	r3, #4
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fe5e 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a2:	3318      	adds	r3, #24
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe fe59 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	2205      	movs	r2, #5
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	68f9      	ldr	r1, [r7, #12]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f001 fb4c 	bl	8002c64 <pxPortInitialiseStack>
 80015cc:	0002      	movs	r2, r0
 80015ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b006      	add	sp, #24
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	3fffffff 	.word	0x3fffffff

080015ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80015f4:	f001 fbd4 	bl	8002da0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80015f8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <prvAddNewTaskToReadyList+0x200>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4b7b      	ldr	r3, [pc, #492]	@ (80017ec <prvAddNewTaskToReadyList+0x200>)
 8001600:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001602:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <prvAddNewTaskToReadyList+0x204>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800160a:	4b79      	ldr	r3, [pc, #484]	@ (80017f0 <prvAddNewTaskToReadyList+0x204>)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001610:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <prvAddNewTaskToReadyList+0x200>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d110      	bne.n	800163a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001618:	f000 fea0 	bl	800235c <prvInitialiseTaskLists>
 800161c:	e00d      	b.n	800163a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800161e:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <prvAddNewTaskToReadyList+0x208>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001626:	4b72      	ldr	r3, [pc, #456]	@ (80017f0 <prvAddNewTaskToReadyList+0x204>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	429a      	cmp	r2, r3
 8001632:	d802      	bhi.n	800163a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001634:	4b6e      	ldr	r3, [pc, #440]	@ (80017f0 <prvAddNewTaskToReadyList+0x204>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800163a:	4b6f      	ldr	r3, [pc, #444]	@ (80017f8 <prvAddNewTaskToReadyList+0x20c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	4b6d      	ldr	r3, [pc, #436]	@ (80017f8 <prvAddNewTaskToReadyList+0x20c>)
 8001642:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001644:	4b6c      	ldr	r3, [pc, #432]	@ (80017f8 <prvAddNewTaskToReadyList+0x20c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d065      	beq.n	800171e <prvAddNewTaskToReadyList+0x132>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d04f      	beq.n	80016f8 <prvAddNewTaskToReadyList+0x10c>
 8001658:	2003      	movs	r0, #3
 800165a:	f002 fdd5 	bl	8004208 <prvTraceGetObjectHandle>
 800165e:	0003      	movs	r3, r0
 8001660:	001a      	movs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f001 fce7 	bl	800303a <prvTraceSetTaskNumberLow16>
 800166c:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <prvAddNewTaskToReadyList+0x210>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f001 fcfa 	bl	800306e <prvTraceSetTaskNumberHigh16>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f001 fcbf 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001682:	0003      	movs	r3, r0
 8001684:	b2d9      	uxtb	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3334      	adds	r3, #52	@ 0x34
 800168a:	001a      	movs	r2, r3
 800168c:	2003      	movs	r0, #3
 800168e:	f002 feb3 	bl	80043f8 <prvTraceSetObjectName>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f001 fcb3 	bl	8003000 <prvTraceGetTaskNumberLow16>
 800169a:	0003      	movs	r3, r0
 800169c:	b2d9      	uxtb	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	001a      	movs	r2, r3
 80016a6:	2003      	movs	r0, #3
 80016a8:	f002 fc66 	bl	8003f78 <prvTraceSetPriorityProperty>
 80016ac:	f001 fda5 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80016b0:	0003      	movs	r3, r0
 80016b2:	0018      	movs	r0, r3
 80016b4:	f001 fcb2 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80016b8:	0003      	movs	r3, r0
 80016ba:	001a      	movs	r2, r3
 80016bc:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <prvAddNewTaskToReadyList+0x214>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4013      	ands	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d02a      	beq.n	800171e <prvAddNewTaskToReadyList+0x132>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 fca6 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <prvAddNewTaskToReadyList+0x214>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	4013      	ands	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01e      	beq.n	800171e <prvAddNewTaskToReadyList+0x132>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 fc8c 	bl	8003000 <prvTraceGetTaskNumberLow16>
 80016e8:	0003      	movs	r3, r0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	001a      	movs	r2, r3
 80016ee:	2103      	movs	r1, #3
 80016f0:	201b      	movs	r0, #27
 80016f2:	f002 fa5f 	bl	8003bb4 <prvTraceStoreKernelCall>
 80016f6:	e012      	b.n	800171e <prvAddNewTaskToReadyList+0x132>
 80016f8:	f001 fd7f 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80016fc:	0003      	movs	r3, r0
 80016fe:	0018      	movs	r0, r3
 8001700:	f001 fc8c 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001704:	0003      	movs	r3, r0
 8001706:	001a      	movs	r2, r3
 8001708:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <prvAddNewTaskToReadyList+0x214>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4013      	ands	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <prvAddNewTaskToReadyList+0x132>
 8001714:	2200      	movs	r2, #0
 8001716:	2103      	movs	r1, #3
 8001718:	201b      	movs	r0, #27
 800171a:	f002 fa4b 	bl	8003bb4 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f001 fc7b 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001726:	0003      	movs	r3, r0
 8001728:	001a      	movs	r2, r3
 800172a:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <prvAddNewTaskToReadyList+0x214>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	4013      	ands	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d008      	beq.n	8001748 <prvAddNewTaskToReadyList+0x15c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	0018      	movs	r0, r3
 800173a:	f001 fc61 	bl	8003000 <prvTraceGetTaskNumberLow16>
 800173e:	0003      	movs	r3, r0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	0018      	movs	r0, r3
 8001744:	f002 f928 	bl	8003998 <prvTraceStoreTaskReady>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <prvAddNewTaskToReadyList+0x218>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d903      	bls.n	800175c <prvAddNewTaskToReadyList+0x170>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <prvAddNewTaskToReadyList+0x218>)
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001760:	4929      	ldr	r1, [pc, #164]	@ (8001808 <prvAddNewTaskToReadyList+0x21c>)
 8001762:	0013      	movs	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	189b      	adds	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	18cb      	adds	r3, r1, r3
 800176c:	3304      	adds	r3, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	3204      	adds	r2, #4
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1d1a      	adds	r2, r3, #4
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	0013      	movs	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	189b      	adds	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <prvAddNewTaskToReadyList+0x21c>)
 80017a0:	189a      	adds	r2, r3, r2
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017aa:	4917      	ldr	r1, [pc, #92]	@ (8001808 <prvAddNewTaskToReadyList+0x21c>)
 80017ac:	0013      	movs	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	585b      	ldr	r3, [r3, r1]
 80017b6:	1c58      	adds	r0, r3, #1
 80017b8:	4913      	ldr	r1, [pc, #76]	@ (8001808 <prvAddNewTaskToReadyList+0x21c>)
 80017ba:	0013      	movs	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	189b      	adds	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80017c4:	f001 fafe 	bl	8002dc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <prvAddNewTaskToReadyList+0x208>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <prvAddNewTaskToReadyList+0x204>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	429a      	cmp	r2, r3
 80017dc:	d201      	bcs.n	80017e2 <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80017de:	f001 facf 	bl	8002d80 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	20000130 	.word	0x20000130
 80017f0:	20000084 	.word	0x20000084
 80017f4:	2000013c 	.word	0x2000013c
 80017f8:	2000014c 	.word	0x2000014c
 80017fc:	20001dca 	.word	0x20001dca
 8001800:	20001dc8 	.word	0x20001dc8
 8001804:	20000138 	.word	0x20000138
 8001808:	20000088 	.word	0x20000088

0800180c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d046      	beq.n	80018ac <vTaskDelay+0xa0>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800181e:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <vTaskDelay+0xb4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <vTaskDelay+0x20>
 8001826:	b672      	cpsid	i
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	e7fd      	b.n	8001828 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 800182c:	f000 f8b2 	bl	8001994 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <vTaskDelay+0xb8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f001 fbf1 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800183a:	0003      	movs	r3, r0
 800183c:	001a      	movs	r2, r3
 800183e:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <vTaskDelay+0xbc>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	4013      	ands	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00e      	beq.n	8001868 <vTaskDelay+0x5c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0019      	movs	r1, r3
 800184e:	2089      	movs	r0, #137	@ 0x89
 8001850:	f002 fab4 	bl	8003dbc <prvTraceStoreKernelCallWithNumericParamOnly>
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <vTaskDelay+0xb8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f001 fbd1 	bl	8003000 <prvTraceGetTaskNumberLow16>
 800185e:	0003      	movs	r3, r0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	0018      	movs	r0, r3
 8001864:	f002 fc3c 	bl	80040e0 <prvTraceSetTaskInstanceFinished>
 8001868:	f001 fcc7 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 800186c:	0003      	movs	r3, r0
 800186e:	0018      	movs	r0, r3
 8001870:	f001 fbd4 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001874:	0003      	movs	r3, r0
 8001876:	001a      	movs	r2, r3
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <vTaskDelay+0xbc>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	4013      	ands	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <vTaskDelay+0x8e>
 8001884:	f001 fcb9 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8001888:	0003      	movs	r3, r0
 800188a:	0018      	movs	r0, r3
 800188c:	f001 fbb8 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001890:	0003      	movs	r3, r0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	0018      	movs	r0, r3
 8001896:	f002 fc23 	bl	80040e0 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2100      	movs	r1, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 feac 	bl	80025fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80018a4:	f000 f882 	bl	80019ac <xTaskResumeAll>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <vTaskDelay+0xaa>
        {
            portYIELD_WITHIN_API();
 80018b2:	f001 fa65 	bl	8002d80 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	20000158 	.word	0x20000158
 80018c4:	20000084 	.word	0x20000084
 80018c8:	20001dc8 	.word	0x20001dc8

080018cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80018d2:	4927      	ldr	r1, [pc, #156]	@ (8001970 <vTaskStartScheduler+0xa4>)
 80018d4:	4827      	ldr	r0, [pc, #156]	@ (8001974 <vTaskStartScheduler+0xa8>)
 80018d6:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <vTaskStartScheduler+0xac>)
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	2280      	movs	r2, #128	@ 0x80
 80018e2:	f7ff fdb2 	bl	800144a <xTaskCreate>
 80018e6:	0003      	movs	r3, r0
 80018e8:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d103      	bne.n	80018f8 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80018f0:	f000 fec8 	bl	8002684 <xTimerCreateTimerTask>
 80018f4:	0003      	movs	r3, r0
 80018f6:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12c      	bne.n	8001958 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80018fe:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <vTaskStartScheduler+0xb0>)
 8001902:	2201      	movs	r2, #1
 8001904:	4252      	negs	r2, r2
 8001906:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <vTaskStartScheduler+0xb4>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <vTaskStartScheduler+0xb8>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <vTaskStartScheduler+0xbc>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f001 fc6e 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 800191e:	0003      	movs	r3, r0
 8001920:	0018      	movs	r0, r3
 8001922:	f001 fb7b 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001926:	0003      	movs	r3, r0
 8001928:	001a      	movs	r2, r3
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <vTaskStartScheduler+0xc0>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	4013      	ands	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <vTaskStartScheduler+0x80>
 8001936:	f001 fc60 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 800193a:	0003      	movs	r3, r0
 800193c:	0018      	movs	r0, r3
 800193e:	f001 fb5f 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001942:	0003      	movs	r3, r0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	0018      	movs	r0, r3
 8001948:	f002 faa2 	bl	8003e90 <prvTraceStoreTaskswitch>
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <vTaskStartScheduler+0xbc>)
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001952:	f001 f9f1 	bl	8002d38 <xPortStartScheduler>
 8001956:	e005      	b.n	8001964 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	d102      	bne.n	8001964 <vTaskStartScheduler+0x98>
 800195e:	b672      	cpsid	i
 8001960:	46c0      	nop			@ (mov r8, r8)
 8001962:	e7fd      	b.n	8001960 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <vTaskStartScheduler+0xc4>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	080058e0 	.word	0x080058e0
 8001974:	0800233d 	.word	0x0800233d
 8001978:	20000154 	.word	0x20000154
 800197c:	20000150 	.word	0x20000150
 8001980:	2000013c 	.word	0x2000013c
 8001984:	20000134 	.word	0x20000134
 8001988:	20001db0 	.word	0x20001db0
 800198c:	20001dc8 	.word	0x20001dc8
 8001990:	20000000 	.word	0x20000000

08001994 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <vTaskSuspendAll+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <vTaskSuspendAll+0x14>)
 80019a0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000158 	.word	0x20000158

080019ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80019ba:	4b73      	ldr	r3, [pc, #460]	@ (8001b88 <xTaskResumeAll+0x1dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <xTaskResumeAll+0x1c>
 80019c2:	b672      	cpsid	i
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	e7fd      	b.n	80019c4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80019c8:	f001 f9ea 	bl	8002da0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80019cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001b88 <xTaskResumeAll+0x1dc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b88 <xTaskResumeAll+0x1dc>)
 80019d4:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001b88 <xTaskResumeAll+0x1dc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <xTaskResumeAll+0x34>
 80019de:	e0cc      	b.n	8001b7a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019e0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <xTaskResumeAll+0x1e0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d100      	bne.n	80019ea <xTaskResumeAll+0x3e>
 80019e8:	e0c7      	b.n	8001b7a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ea:	e09e      	b.n	8001b2a <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ec:	4b68      	ldr	r3, [pc, #416]	@ (8001b90 <xTaskResumeAll+0x1e4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6a12      	ldr	r2, [r2, #32]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	69d2      	ldr	r2, [r2, #28]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3318      	adds	r3, #24
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d103      	bne.n	8001a22 <xTaskResumeAll+0x76>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2200      	movs	r2, #0
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	68d2      	ldr	r2, [r2, #12]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6892      	ldr	r2, [r2, #8]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3304      	adds	r3, #4
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d103      	bne.n	8001a60 <xTaskResumeAll+0xb4>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1e5a      	subs	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f001 fad2 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <xTaskResumeAll+0x1e8>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	4013      	ands	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <xTaskResumeAll+0xee>
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f001 fab8 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001a90:	0003      	movs	r3, r0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 ff7f 	bl	8003998 <prvTraceStoreTaskReady>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b98 <xTaskResumeAll+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d903      	bls.n	8001aae <xTaskResumeAll+0x102>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <xTaskResumeAll+0x1ec>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab2:	493a      	ldr	r1, [pc, #232]	@ (8001b9c <xTaskResumeAll+0x1f0>)
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	189b      	adds	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	18cb      	adds	r3, r1, r3
 8001abe:	3304      	adds	r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	3204      	adds	r2, #4
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1d1a      	adds	r2, r3, #4
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ae8:	0013      	movs	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b9c <xTaskResumeAll+0x1f0>)
 8001af2:	189a      	adds	r2, r3, r2
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001afc:	4927      	ldr	r1, [pc, #156]	@ (8001b9c <xTaskResumeAll+0x1f0>)
 8001afe:	0013      	movs	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	189b      	adds	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	585b      	ldr	r3, [r3, r1]
 8001b08:	1c58      	adds	r0, r3, #1
 8001b0a:	4924      	ldr	r1, [pc, #144]	@ (8001b9c <xTaskResumeAll+0x1f0>)
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	189b      	adds	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ba0 <xTaskResumeAll+0x1f4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d302      	bcc.n	8001b2a <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <xTaskResumeAll+0x1f8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <xTaskResumeAll+0x1e4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d000      	beq.n	8001b34 <xTaskResumeAll+0x188>
 8001b32:	e75b      	b.n	80019ec <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001b3a:	f000 fc4d 	bl	80023d8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <xTaskResumeAll+0x1fc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00f      	beq.n	8001b6a <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001b4a:	f000 f847 	bl	8001bdc <xTaskIncrementTick>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d002      	beq.n	8001b58 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <xTaskResumeAll+0x1f8>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f2      	bne.n	8001b4a <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <xTaskResumeAll+0x1fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <xTaskResumeAll+0x1f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001b76:	f001 f903 	bl	8002d80 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001b7a:	f001 f923 	bl	8002dc4 <vPortExitCritical>

    return xAlreadyYielded;
 8001b7e:	693b      	ldr	r3, [r7, #16]
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b006      	add	sp, #24
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000158 	.word	0x20000158
 8001b8c:	20000130 	.word	0x20000130
 8001b90:	2000011c 	.word	0x2000011c
 8001b94:	20001dc8 	.word	0x20001dc8
 8001b98:	20000138 	.word	0x20000138
 8001b9c:	20000088 	.word	0x20000088
 8001ba0:	20000084 	.word	0x20000084
 8001ba4:	20000144 	.word	0x20000144
 8001ba8:	20000140 	.word	0x20000140

08001bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <xTaskGetTickCount+0x18>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	20000134 	.word	0x20000134

08001bc8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	@ (8001bd8 <uxTaskGetNumberOfTasks+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	20000130 	.word	0x20000130

08001bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8001be6:	4b85      	ldr	r3, [pc, #532]	@ (8001dfc <xTaskIncrementTick+0x220>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d003      	beq.n	8001bf6 <xTaskIncrementTick+0x1a>
 8001bee:	4b84      	ldr	r3, [pc, #528]	@ (8001e00 <xTaskIncrementTick+0x224>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <xTaskIncrementTick+0x2a>
 8001bf6:	4b83      	ldr	r3, [pc, #524]	@ (8001e04 <xTaskIncrementTick+0x228>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4b81      	ldr	r3, [pc, #516]	@ (8001e04 <xTaskIncrementTick+0x228>)
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	2000      	movs	r0, #0
 8001c02:	f003 f80f 	bl	8004c24 <prvTracePortGetTimeStamp>
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <xTaskIncrementTick+0x220>)
 8001c08:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001dfc <xTaskIncrementTick+0x220>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d000      	beq.n	8001c14 <xTaskIncrementTick+0x38>
 8001c12:	e0e9      	b.n	8001de8 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <xTaskIncrementTick+0x22c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c1c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <xTaskIncrementTick+0x22c>)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d118      	bne.n	8001c5a <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c28:	4b78      	ldr	r3, [pc, #480]	@ (8001e0c <xTaskIncrementTick+0x230>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <xTaskIncrementTick+0x5c>
 8001c32:	b672      	cpsid	i
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	e7fd      	b.n	8001c34 <xTaskIncrementTick+0x58>
 8001c38:	4b74      	ldr	r3, [pc, #464]	@ (8001e0c <xTaskIncrementTick+0x230>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	4b74      	ldr	r3, [pc, #464]	@ (8001e10 <xTaskIncrementTick+0x234>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b72      	ldr	r3, [pc, #456]	@ (8001e0c <xTaskIncrementTick+0x230>)
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b72      	ldr	r3, [pc, #456]	@ (8001e10 <xTaskIncrementTick+0x234>)
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4b71      	ldr	r3, [pc, #452]	@ (8001e14 <xTaskIncrementTick+0x238>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	4b70      	ldr	r3, [pc, #448]	@ (8001e14 <xTaskIncrementTick+0x238>)
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f000 fbbf 	bl	80023d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e18 <xTaskIncrementTick+0x23c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d200      	bcs.n	8001c66 <xTaskIncrementTick+0x8a>
 8001c64:	e0b9      	b.n	8001dda <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c66:	4b69      	ldr	r3, [pc, #420]	@ (8001e0c <xTaskIncrementTick+0x230>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d104      	bne.n	8001c7a <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c70:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <xTaskIncrementTick+0x23c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	4252      	negs	r2, r2
 8001c76:	601a      	str	r2, [r3, #0]
                    break;
 8001c78:	e0af      	b.n	8001dda <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c7a:	4b64      	ldr	r3, [pc, #400]	@ (8001e0c <xTaskIncrementTick+0x230>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d203      	bcs.n	8001c9a <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c92:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <xTaskIncrementTick+0x23c>)
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001c98:	e09f      	b.n	8001dda <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68d2      	ldr	r2, [r2, #12]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	6892      	ldr	r2, [r2, #8]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d103      	bne.n	8001cc8 <xTaskIncrementTick+0xec>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01e      	beq.n	8001d1e <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	6a12      	ldr	r2, [r2, #32]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	69d2      	ldr	r2, [r2, #28]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3318      	adds	r3, #24
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d103      	bne.n	8001d0e <xTaskIncrementTick+0x132>
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f001 f97b 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001d26:	0003      	movs	r3, r0
 8001d28:	001a      	movs	r2, r3
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <xTaskIncrementTick+0x240>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <xTaskIncrementTick+0x16c>
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f001 f961 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	0018      	movs	r0, r3
 8001d44:	f001 fe28 	bl	8003998 <prvTraceStoreTaskReady>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <xTaskIncrementTick+0x244>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d903      	bls.n	8001d5c <xTaskIncrementTick+0x180>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d58:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <xTaskIncrementTick+0x244>)
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d60:	4930      	ldr	r1, [pc, #192]	@ (8001e24 <xTaskIncrementTick+0x248>)
 8001d62:	0013      	movs	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	189b      	adds	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	18cb      	adds	r3, r1, r3
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	3204      	adds	r2, #4
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1d1a      	adds	r2, r3, #4
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d96:	0013      	movs	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4a21      	ldr	r2, [pc, #132]	@ (8001e24 <xTaskIncrementTick+0x248>)
 8001da0:	189a      	adds	r2, r3, r2
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001daa:	491e      	ldr	r1, [pc, #120]	@ (8001e24 <xTaskIncrementTick+0x248>)
 8001dac:	0013      	movs	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	189b      	adds	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	585b      	ldr	r3, [r3, r1]
 8001db6:	1c58      	adds	r0, r3, #1
 8001db8:	491a      	ldr	r1, [pc, #104]	@ (8001e24 <xTaskIncrementTick+0x248>)
 8001dba:	0013      	movs	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	189b      	adds	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <xTaskIncrementTick+0x24c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d800      	bhi.n	8001dd4 <xTaskIncrementTick+0x1f8>
 8001dd2:	e748      	b.n	8001c66 <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd8:	e745      	b.n	8001c66 <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <xTaskIncrementTick+0x250>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e004      	b.n	8001df2 <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <xTaskIncrementTick+0x224>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <xTaskIncrementTick+0x224>)
 8001df0:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001df2:	69fb      	ldr	r3, [r7, #28]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b008      	add	sp, #32
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000158 	.word	0x20000158
 8001e00:	20000140 	.word	0x20000140
 8001e04:	20001da4 	.word	0x20001da4
 8001e08:	20000134 	.word	0x20000134
 8001e0c:	20000114 	.word	0x20000114
 8001e10:	20000118 	.word	0x20000118
 8001e14:	20000148 	.word	0x20000148
 8001e18:	20000150 	.word	0x20000150
 8001e1c:	20001dc8 	.word	0x20001dc8
 8001e20:	20000138 	.word	0x20000138
 8001e24:	20000088 	.word	0x20000088
 8001e28:	20000084 	.word	0x20000084
 8001e2c:	20000144 	.word	0x20000144

08001e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e36:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <vTaskSwitchContext+0xd0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <vTaskSwitchContext+0xd4>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001e44:	e057      	b.n	8001ef6 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8001e46:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <vTaskSwitchContext+0xd4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f08 <vTaskSwitchContext+0xd8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	e008      	b.n	8001e66 <vTaskSwitchContext+0x36>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <vTaskSwitchContext+0x30>
 8001e5a:	b672      	cpsid	i
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	e7fd      	b.n	8001e5c <vTaskSwitchContext+0x2c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4929      	ldr	r1, [pc, #164]	@ (8001f0c <vTaskSwitchContext+0xdc>)
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	585b      	ldr	r3, [r3, r1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ed      	beq.n	8001e54 <vTaskSwitchContext+0x24>
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	189b      	adds	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <vTaskSwitchContext+0xdc>)
 8001e84:	189b      	adds	r3, r3, r2
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3308      	adds	r3, #8
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d104      	bne.n	8001ea8 <vTaskSwitchContext+0x78>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <vTaskSwitchContext+0xe0>)
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <vTaskSwitchContext+0xd8>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <vTaskSwitchContext+0xe4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f001 f99c 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f001 f8a9 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	001a      	movs	r2, r3
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <vTaskSwitchContext+0xe8>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <vTaskSwitchContext+0xc0>
 8001eda:	f001 f98e 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f001 f88d 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	0018      	movs	r0, r3
 8001eec:	f001 ffd0 	bl	8003e90 <prvTraceStoreTaskswitch>
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <vTaskSwitchContext+0xe4>)
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	20000158 	.word	0x20000158
 8001f04:	20000144 	.word	0x20000144
 8001f08:	20000138 	.word	0x20000138
 8001f0c:	20000088 	.word	0x20000088
 8001f10:	20000084 	.word	0x20000084
 8001f14:	20001db0 	.word	0x20001db0
 8001f18:	20001dc8 	.word	0x20001dc8

08001f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <vTaskPlaceOnEventList+0x16>
 8001f2c:	b672      	cpsid	i
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	e7fd      	b.n	8001f2e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <vTaskPlaceOnEventList+0x3c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3318      	adds	r3, #24
 8001f38:	001a      	movs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe f997 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fb57 	bl	80025fc <prvAddCurrentTaskToDelayedList>
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	20000084 	.word	0x20000084

08001f5c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <vTaskPlaceOnEventListRestricted+0x18>
 8001f6e:	b672      	cpsid	i
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	e7fd      	b.n	8001f70 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b33      	ldr	r3, [pc, #204]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	61da      	str	r2, [r3, #28]
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	3218      	adds	r2, #24
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3318      	adds	r3, #24
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f001 f828 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	001a      	movs	r2, r3
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <vTaskPlaceOnEventListRestricted+0xf0>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d011      	beq.n	8002000 <vTaskPlaceOnEventListRestricted+0xa4>
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <vTaskPlaceOnEventListRestricted+0xf4>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	18d3      	adds	r3, r2, r3
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	2088      	movs	r0, #136	@ 0x88
 8001fe8:	f001 fee8 	bl	8003dbc <prvTraceStoreKernelCallWithNumericParamOnly>
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <vTaskPlaceOnEventListRestricted+0xec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f001 f805 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f002 f870 	bl	80040e0 <prvTraceSetTaskInstanceFinished>
 8002000:	f001 f8fb 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8002004:	0003      	movs	r3, r0
 8002006:	0018      	movs	r0, r3
 8002008:	f001 f808 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800200c:	0003      	movs	r3, r0
 800200e:	001a      	movs	r2, r3
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <vTaskPlaceOnEventListRestricted+0xf0>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4013      	ands	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <vTaskPlaceOnEventListRestricted+0xd6>
 800201c:	f001 f8ed 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8002020:	0003      	movs	r3, r0
 8002022:	0018      	movs	r0, r3
 8002024:	f000 ffec 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8002028:	0003      	movs	r3, r0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	0018      	movs	r0, r3
 800202e:	f002 f857 	bl	80040e0 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0011      	movs	r1, r2
 8002038:	0018      	movs	r0, r3
 800203a:	f000 fadf 	bl	80025fc <prvAddCurrentTaskToDelayedList>
    }
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b006      	add	sp, #24
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	20000084 	.word	0x20000084
 800204c:	20001dc8 	.word	0x20001dc8
 8002050:	20000134 	.word	0x20000134

08002054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <xTaskRemoveFromEventList+0x1c>
 800206a:	b672      	cpsid	i
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	e7fd      	b.n	800206c <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	6a12      	ldr	r2, [r2, #32]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	69d2      	ldr	r2, [r2, #28]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3318      	adds	r3, #24
 8002092:	429a      	cmp	r2, r3
 8002094:	d103      	bne.n	800209e <xTaskRemoveFromEventList+0x4a>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ae:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <xTaskRemoveFromEventList+0x1a8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d172      	bne.n	800219c <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	68d2      	ldr	r2, [r2, #12]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3304      	adds	r3, #4
 80020d8:	429a      	cmp	r2, r3
 80020da:	d103      	bne.n	80020e4 <xTaskRemoveFromEventList+0x90>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 ff90 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80020fc:	0003      	movs	r3, r0
 80020fe:	001a      	movs	r2, r3
 8002100:	4b3f      	ldr	r3, [pc, #252]	@ (8002200 <xTaskRemoveFromEventList+0x1ac>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4013      	ands	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <xTaskRemoveFromEventList+0xca>
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 ff76 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8002114:	0003      	movs	r3, r0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	0018      	movs	r0, r3
 800211a:	f001 fc3d 	bl	8003998 <prvTraceStoreTaskReady>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002122:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <xTaskRemoveFromEventList+0x1b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d903      	bls.n	8002132 <xTaskRemoveFromEventList+0xde>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212e:	4b35      	ldr	r3, [pc, #212]	@ (8002204 <xTaskRemoveFromEventList+0x1b0>)
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <xTaskRemoveFromEventList+0x1b4>)
 8002138:	0013      	movs	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	189b      	adds	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	18cb      	adds	r3, r1, r3
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	3204      	adds	r2, #4
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1d1a      	adds	r2, r3, #4
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216c:	0013      	movs	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	189b      	adds	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4a24      	ldr	r2, [pc, #144]	@ (8002208 <xTaskRemoveFromEventList+0x1b4>)
 8002176:	189a      	adds	r2, r3, r2
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	615a      	str	r2, [r3, #20]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002180:	4921      	ldr	r1, [pc, #132]	@ (8002208 <xTaskRemoveFromEventList+0x1b4>)
 8002182:	0013      	movs	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	189b      	adds	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	585b      	ldr	r3, [r3, r1]
 800218c:	1c58      	adds	r0, r3, #1
 800218e:	491e      	ldr	r1, [pc, #120]	@ (8002208 <xTaskRemoveFromEventList+0x1b4>)
 8002190:	0013      	movs	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	189b      	adds	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	5058      	str	r0, [r3, r1]
 800219a:	e01b      	b.n	80021d4 <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <xTaskRemoveFromEventList+0x1b8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	61da      	str	r2, [r3, #28]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	3218      	adds	r2, #24
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3318      	adds	r3, #24
 80021be:	001a      	movs	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4a11      	ldr	r2, [pc, #68]	@ (800220c <xTaskRemoveFromEventList+0x1b8>)
 80021c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <xTaskRemoveFromEventList+0x1b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <xTaskRemoveFromEventList+0x1b8>)
 80021d2:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <xTaskRemoveFromEventList+0x1bc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	429a      	cmp	r2, r3
 80021e0:	d905      	bls.n	80021ee <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <xTaskRemoveFromEventList+0x1c0>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e001      	b.n	80021f2 <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80021f2:	69fb      	ldr	r3, [r7, #28]
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b008      	add	sp, #32
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000158 	.word	0x20000158
 8002200:	20001dc8 	.word	0x20001dc8
 8002204:	20000138 	.word	0x20000138
 8002208:	20000088 	.word	0x20000088
 800220c:	2000011c 	.word	0x2000011c
 8002210:	20000084 	.word	0x20000084
 8002214:	20000144 	.word	0x20000144

08002218 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <vTaskInternalSetTimeOutState+0x20>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <vTaskInternalSetTimeOutState+0x24>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	605a      	str	r2, [r3, #4]
}
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000148 	.word	0x20000148
 800223c:	20000134 	.word	0x20000134

08002240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <xTaskCheckForTimeOut+0x16>
 8002250:	b672      	cpsid	i
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	e7fd      	b.n	8002252 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <xTaskCheckForTimeOut+0x22>
 800225c:	b672      	cpsid	i
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	e7fd      	b.n	800225e <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8002262:	f000 fd9d 	bl	8002da0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <xTaskCheckForTimeOut+0x94>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <xTaskCheckForTimeOut+0x98>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d00a      	beq.n	8002298 <xTaskCheckForTimeOut+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d305      	bcc.n	8002298 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e016      	b.n	80022c6 <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff ffb1 	bl	8002218 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e004      	b.n	80022c6 <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80022c6:	f000 fd7d 	bl	8002dc4 <vPortExitCritical>

    return xReturn;
 80022ca:	697b      	ldr	r3, [r7, #20]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000134 	.word	0x20000134
 80022d8:	20000148 	.word	0x20000148

080022dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80022e0:	4b02      	ldr	r3, [pc, #8]	@ (80022ec <vTaskMissedYield+0x10>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000144 	.word	0x20000144

080022f0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e001      	b.n	800230e <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 800230e:	68fb      	ldr	r3, [r7, #12]
    }
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}

08002318 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002344:	f000 f842 	bl	80023cc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <prvIdleTask+0x1c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d9f9      	bls.n	8002344 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002350:	f000 fd16 	bl	8002d80 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002354:	e7f6      	b.n	8002344 <prvIdleTask+0x8>
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	20000088 	.word	0x20000088

0800235c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	e00c      	b.n	8002382 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	0013      	movs	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	189b      	adds	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <prvInitialiseTaskLists+0x58>)
 8002374:	189b      	adds	r3, r3, r2
 8002376:	0018      	movs	r0, r3
 8002378:	f7fd ff52 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d9ef      	bls.n	8002368 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <prvInitialiseTaskLists+0x5c>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7fd ff48 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <prvInitialiseTaskLists+0x60>)
 8002392:	0018      	movs	r0, r3
 8002394:	f7fd ff44 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <prvInitialiseTaskLists+0x64>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7fd ff40 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <prvInitialiseTaskLists+0x68>)
 80023a2:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <prvInitialiseTaskLists+0x5c>)
 80023a4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <prvInitialiseTaskLists+0x6c>)
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <prvInitialiseTaskLists+0x60>)
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000088 	.word	0x20000088
 80023b8:	200000ec 	.word	0x200000ec
 80023bc:	20000100 	.word	0x20000100
 80023c0:	2000011c 	.word	0x2000011c
 80023c4:	20000114 	.word	0x20000114
 80023c8:	20000118 	.word	0x20000118

080023cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <prvResetNextTaskUnblockTime+0x2c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <prvResetNextTaskUnblockTime+0x30>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	4252      	negs	r2, r2
 80023ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80023ee:	e005      	b.n	80023fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <prvResetNextTaskUnblockTime+0x2c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <prvResetNextTaskUnblockTime+0x30>)
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	20000114 	.word	0x20000114
 8002408:	20000150 	.word	0x20000150

0800240c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <xTaskGetCurrentTaskHandle+0x18>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002418:	687b      	ldr	r3, [r7, #4]
    }
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	20000084 	.word	0x20000084

08002428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <xTaskGetSchedulerState+0x30>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002436:	2301      	movs	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e008      	b.n	800244e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243c:	4b07      	ldr	r3, [pc, #28]	@ (800245c <xTaskGetSchedulerState+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002444:	2302      	movs	r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800244e:	687b      	ldr	r3, [r7, #4]
    }
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000013c 	.word	0x2000013c
 800245c:	20000158 	.word	0x20000158

08002460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d100      	bne.n	8002478 <xTaskPriorityDisinherit+0x18>
 8002476:	e0b3      	b.n	80025e0 <xTaskPriorityDisinherit+0x180>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002478:	4b5c      	ldr	r3, [pc, #368]	@ (80025ec <xTaskPriorityDisinherit+0x18c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	429a      	cmp	r2, r3
 8002480:	d002      	beq.n	8002488 <xTaskPriorityDisinherit+0x28>
 8002482:	b672      	cpsid	i
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	e7fd      	b.n	8002484 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <xTaskPriorityDisinherit+0x36>
 8002490:	b672      	cpsid	i
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	e7fd      	b.n	8002492 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d100      	bne.n	80024ae <xTaskPriorityDisinherit+0x4e>
 80024ac:	e098      	b.n	80025e0 <xTaskPriorityDisinherit+0x180>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d000      	beq.n	80024b8 <xTaskPriorityDisinherit+0x58>
 80024b6:	e093      	b.n	80025e0 <xTaskPriorityDisinherit+0x180>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3304      	adds	r3, #4
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fd ff0e 	bl	80002de <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fda9 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80024ca:	0003      	movs	r3, r0
 80024cc:	001a      	movs	r2, r3
 80024ce:	4b48      	ldr	r3, [pc, #288]	@ (80025f0 <xTaskPriorityDisinherit+0x190>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	4013      	ands	r3, r2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d023      	beq.n	8002522 <xTaskPriorityDisinherit+0xc2>
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 fd8f 	bl	8003000 <prvTraceGetTaskNumberLow16>
 80024e2:	0003      	movs	r3, r0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	001c      	movs	r4, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fd88 	bl	8003000 <prvTraceGetTaskNumberLow16>
 80024f0:	0003      	movs	r3, r0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	0019      	movs	r1, r3
 80024f6:	2003      	movs	r0, #3
 80024f8:	f001 fd70 	bl	8003fdc <prvTraceGetPriorityProperty>
 80024fc:	0003      	movs	r3, r0
 80024fe:	0022      	movs	r2, r4
 8002500:	2103      	movs	r1, #3
 8002502:	208f      	movs	r0, #143	@ 0x8f
 8002504:	f001 fbbc 	bl	8003c80 <prvTraceStoreKernelCallWithParam>
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fd78 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8002510:	0003      	movs	r3, r0
 8002512:	b2d9      	uxtb	r1, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	b2db      	uxtb	r3, r3
 800251a:	001a      	movs	r2, r3
 800251c:	2003      	movs	r0, #3
 800251e:	f001 fd2b 	bl	8003f78 <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	2205      	movs	r2, #5
 8002530:	1ad2      	subs	r2, r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fd6f 	bl	800301c <prvTraceGetTaskNumberHigh16>
 800253e:	0003      	movs	r3, r0
 8002540:	001a      	movs	r2, r3
 8002542:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <xTaskPriorityDisinherit+0x190>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <xTaskPriorityDisinherit+0x100>
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fd55 	bl	8003000 <prvTraceGetTaskNumberLow16>
 8002556:	0003      	movs	r3, r0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	0018      	movs	r0, r3
 800255c:	f001 fa1c 	bl	8003998 <prvTraceStoreTaskReady>
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002564:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <xTaskPriorityDisinherit+0x194>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d903      	bls.n	8002574 <xTaskPriorityDisinherit+0x114>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002570:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <xTaskPriorityDisinherit+0x194>)
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	491f      	ldr	r1, [pc, #124]	@ (80025f8 <xTaskPriorityDisinherit+0x198>)
 800257a:	0013      	movs	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	189b      	adds	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	18cb      	adds	r3, r1, r3
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	3204      	adds	r2, #4
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1d1a      	adds	r2, r3, #4
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ae:	0013      	movs	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <xTaskPriorityDisinherit+0x198>)
 80025b8:	189a      	adds	r2, r3, r2
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	615a      	str	r2, [r3, #20]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c2:	490d      	ldr	r1, [pc, #52]	@ (80025f8 <xTaskPriorityDisinherit+0x198>)
 80025c4:	0013      	movs	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	189b      	adds	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	585b      	ldr	r3, [r3, r1]
 80025ce:	1c58      	adds	r0, r3, #1
 80025d0:	4909      	ldr	r1, [pc, #36]	@ (80025f8 <xTaskPriorityDisinherit+0x198>)
 80025d2:	0013      	movs	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	189b      	adds	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80025e0:	697b      	ldr	r3, [r7, #20]
    }
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b007      	add	sp, #28
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	20000084 	.word	0x20000084
 80025f0:	20001dc8 	.word	0x20001dc8
 80025f4:	20000138 	.word	0x20000138
 80025f8:	20000088 	.word	0x20000088

080025fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <prvAddCurrentTaskToDelayedList+0x74>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <prvAddCurrentTaskToDelayedList+0x78>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3304      	adds	r3, #4
 8002612:	0018      	movs	r0, r3
 8002614:	f7fd fe63 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <prvAddCurrentTaskToDelayedList+0x78>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d209      	bcs.n	8002644 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <prvAddCurrentTaskToDelayedList+0x78>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3304      	adds	r3, #4
 800263a:	0019      	movs	r1, r3
 800263c:	0010      	movs	r0, r2
 800263e:	f7fd fe18 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002642:	e010      	b.n	8002666 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002644:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <prvAddCurrentTaskToDelayedList+0x80>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <prvAddCurrentTaskToDelayedList+0x78>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3304      	adds	r3, #4
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f7fd fe0e 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <prvAddCurrentTaskToDelayedList+0x84>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	d202      	bcs.n	8002666 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <prvAddCurrentTaskToDelayedList+0x84>)
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	20000134 	.word	0x20000134
 8002674:	20000084 	.word	0x20000084
 8002678:	20000118 	.word	0x20000118
 800267c:	20000114 	.word	0x20000114
 8002680:	20000150 	.word	0x20000150

08002684 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800268e:	f000 faa5 	bl	8002bdc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <xTimerCreateTimerTask+0x44>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800269a:	490c      	ldr	r1, [pc, #48]	@ (80026cc <xTimerCreateTimerTask+0x48>)
 800269c:	480c      	ldr	r0, [pc, #48]	@ (80026d0 <xTimerCreateTimerTask+0x4c>)
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <xTimerCreateTimerTask+0x50>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2303      	movs	r3, #3
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	f7fe fece 	bl	800144a <xTaskCreate>
 80026ae:	0003      	movs	r3, r0
 80026b0:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <xTimerCreateTimerTask+0x3a>
 80026b8:	b672      	cpsid	i
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	e7fd      	b.n	80026ba <xTimerCreateTimerTask+0x36>
        return xReturn;
 80026be:	687b      	ldr	r3, [r7, #4]
    }
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000018c 	.word	0x2000018c
 80026cc:	080058e8 	.word	0x080058e8
 80026d0:	08002819 	.word	0x08002819
 80026d4:	20000190 	.word	0x20000190

080026d8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026e4:	e02e      	b.n	8002744 <prvReloadTimer+0x6c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 80026f0:	f000 fd83 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80026f4:	0003      	movs	r3, r0
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fc90 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <prvReloadTimer+0x8c>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <prvReloadTimer+0x62>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fd28 	bl	8003164 <prvTraceGetTimerNumberHigh16>
 8002714:	0003      	movs	r3, r0
 8002716:	001a      	movs	r2, r3
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <prvReloadTimer+0x8c>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <prvReloadTimer+0x62>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fd0e 	bl	8003148 <prvTraceGetTimerNumberLow16>
 800272c:	0003      	movs	r3, r0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	001a      	movs	r2, r3
 8002732:	2105      	movs	r1, #5
 8002734:	20db      	movs	r0, #219	@ 0xdb
 8002736:	f001 fa3d 	bl	8003bb4 <prvTraceStoreKernelCall>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	0010      	movs	r0, r2
 8002742:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	18d1      	adds	r1, r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f901 	bl	8002958 <prvInsertTimerInActiveList>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d1c5      	bne.n	80026e6 <prvReloadTimer+0xe>
        }
    }
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20001dc8 	.word	0x20001dc8

08002768 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002772:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <prvProcessExpiredTimer+0xa8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3304      	adds	r3, #4
 8002780:	0018      	movs	r0, r3
 8002782:	f7fd fdac 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2228      	movs	r2, #40	@ 0x28
 800278a:	5c9b      	ldrb	r3, [r3, r2]
 800278c:	001a      	movs	r2, r3
 800278e:	2304      	movs	r3, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d006      	beq.n	80027a2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff ff9c 	bl	80026d8 <prvReloadTimer>
 80027a0:	e008      	b.n	80027b4 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2228      	movs	r2, #40	@ 0x28
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4393      	bics	r3, r2
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2228      	movs	r2, #40	@ 0x28
 80027b2:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 80027b4:	f000 fd21 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 80027b8:	0003      	movs	r3, r0
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 fc2e 	bl	800301c <prvTraceGetTaskNumberHigh16>
 80027c0:	0003      	movs	r3, r0
 80027c2:	001a      	movs	r2, r3
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <prvProcessExpiredTimer+0xac>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	4013      	ands	r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d016      	beq.n	80027fe <prvProcessExpiredTimer+0x96>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fcc6 	bl	8003164 <prvTraceGetTimerNumberHigh16>
 80027d8:	0003      	movs	r3, r0
 80027da:	001a      	movs	r2, r3
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <prvProcessExpiredTimer+0xac>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <prvProcessExpiredTimer+0x96>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fcac 	bl	8003148 <prvTraceGetTimerNumberLow16>
 80027f0:	0003      	movs	r3, r0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	001a      	movs	r2, r3
 80027f6:	2105      	movs	r1, #5
 80027f8:	20db      	movs	r0, #219	@ 0xdb
 80027fa:	f001 f9db 	bl	8003bb4 <prvTraceStoreKernelCall>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	0010      	movs	r0, r2
 8002806:	4798      	blx	r3
    }
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000184 	.word	0x20000184
 8002814:	20001dc8 	.word	0x20001dc8

08002818 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002820:	2308      	movs	r3, #8
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	0018      	movs	r0, r3
 8002826:	f000 f855 	bl	80028d4 <prvGetNextExpireTime>
 800282a:	0003      	movs	r3, r0
 800282c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f805 	bl	8002844 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800283a:	f000 f8cf 	bl	80029dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	e7ee      	b.n	8002820 <prvTimerTask+0x8>
	...

08002844 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800284e:	f7ff f8a1 	bl	8001994 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002852:	2308      	movs	r3, #8
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f85e 	bl	8002918 <prvSampleTimeNow>
 800285c:	0003      	movs	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d12b      	bne.n	80028be <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <prvProcessTimerOrBlockTask+0x42>
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d808      	bhi.n	8002886 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002874:	f7ff f89a 	bl	80019ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0011      	movs	r1, r2
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff ff72 	bl	8002768 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002884:	e01d      	b.n	80028c2 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <prvProcessTimerOrBlockTask+0x88>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <prvProcessTimerOrBlockTask+0x56>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <prvProcessTimerOrBlockTask+0x58>
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <prvProcessTimerOrBlockTask+0x8c>)
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	0019      	movs	r1, r3
 80028ac:	f7fe fd9a 	bl	80013e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80028b0:	f7ff f87c 	bl	80019ac <xTaskResumeAll>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d104      	bne.n	80028c2 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80028b8:	f000 fa62 	bl	8002d80 <vPortYield>
    }
 80028bc:	e001      	b.n	80028c2 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80028be:	f7ff f875 	bl	80019ac <xTaskResumeAll>
    }
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000188 	.word	0x20000188
 80028d0:	2000018c 	.word	0x2000018c

080028d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <prvGetNextExpireTime+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <prvGetNextExpireTime+0x16>
 80028e6:	2201      	movs	r2, #1
 80028e8:	e000      	b.n	80028ec <prvGetNextExpireTime+0x18>
 80028ea:	2200      	movs	r2, #0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <prvGetNextExpireTime+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e001      	b.n	8002908 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002908:	68fb      	ldr	r3, [r7, #12]
    }
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	20000184 	.word	0x20000184

08002918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002920:	f7ff f944 	bl	8001bac <xTaskGetTickCount>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <prvSampleTimeNow+0x3c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	429a      	cmp	r2, r3
 8002930:	d205      	bcs.n	800293e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002932:	f000 f92b 	bl	8002b8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e002      	b.n	8002944 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <prvSampleTimeNow+0x3c>)
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800294a:	68fb      	ldr	r3, [r7, #12]
    }
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000194 	.word	0x20000194

08002958 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d812      	bhi.n	80029a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	1ad2      	subs	r2, r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800298c:	2301      	movs	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e01b      	b.n	80029ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <prvInsertTimerInActiveList+0x7c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3304      	adds	r3, #4
 800299a:	0019      	movs	r1, r3
 800299c:	0010      	movs	r0, r2
 800299e:	f7fd fc68 	bl	8000272 <vListInsert>
 80029a2:	e012      	b.n	80029ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d206      	bcs.n	80029ba <prvInsertTimerInActiveList+0x62>
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d302      	bcc.n	80029ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e007      	b.n	80029ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <prvInsertTimerInActiveList+0x80>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f7fd fc54 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80029ca:	697b      	ldr	r3, [r7, #20]
    }
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000188 	.word	0x20000188
 80029d8:	20000184 	.word	0x20000184

080029dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029e2:	e0be      	b.n	8002b62 <prvProcessReceivedCommands+0x186>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da00      	bge.n	80029ee <prvProcessReceivedCommands+0x12>
 80029ec:	e0b9      	b.n	8002b62 <prvProcessReceivedCommands+0x186>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3304      	adds	r3, #4
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fd fc6c 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a06:	003b      	movs	r3, r7
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff ff85 	bl	8002918 <prvSampleTimeNow>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b09      	cmp	r3, #9
 8002a18:	d900      	bls.n	8002a1c <prvProcessReceivedCommands+0x40>
 8002a1a:	e09f      	b.n	8002b5c <prvProcessReceivedCommands+0x180>
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	4b58      	ldr	r3, [pc, #352]	@ (8002b80 <prvProcessReceivedCommands+0x1a4>)
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2228      	movs	r2, #40	@ 0x28
 8002a2a:	5c9b      	ldrb	r3, [r3, r2]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b2d9      	uxtb	r1, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2228      	movs	r2, #40	@ 0x28
 8002a36:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	18d1      	adds	r1, r2, r3
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f7ff ff85 	bl	8002958 <prvInsertTimerInActiveList>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d100      	bne.n	8002a54 <prvProcessReceivedCommands+0x78>
 8002a52:	e085      	b.n	8002b60 <prvProcessReceivedCommands+0x184>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2228      	movs	r2, #40	@ 0x28
 8002a58:	5c9b      	ldrb	r3, [r3, r2]
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00a      	beq.n	8002a78 <prvProcessReceivedCommands+0x9c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	18d1      	adds	r1, r2, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fe31 	bl	80026d8 <prvReloadTimer>
 8002a76:	e008      	b.n	8002a8a <prvProcessReceivedCommands+0xae>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2228      	movs	r2, #40	@ 0x28
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4393      	bics	r3, r2
 8002a82:	b2d9      	uxtb	r1, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2228      	movs	r2, #40	@ 0x28
 8002a88:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 8002a8a:	f000 fbb6 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 fac3 	bl	800301c <prvTraceGetTaskNumberHigh16>
 8002a96:	0003      	movs	r3, r0
 8002a98:	001a      	movs	r2, r3
 8002a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b84 <prvProcessReceivedCommands+0x1a8>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <prvProcessReceivedCommands+0xf8>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 fb5b 	bl	8003164 <prvTraceGetTimerNumberHigh16>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <prvProcessReceivedCommands+0x1a8>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <prvProcessReceivedCommands+0xf8>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fb41 	bl	8003148 <prvTraceGetTimerNumberLow16>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	001a      	movs	r2, r3
 8002acc:	2105      	movs	r1, #5
 8002ace:	20db      	movs	r0, #219	@ 0xdb
 8002ad0:	f001 f870 	bl	8003bb4 <prvTraceStoreKernelCall>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	0010      	movs	r0, r2
 8002adc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002ade:	e03f      	b.n	8002b60 <prvProcessReceivedCommands+0x184>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2228      	movs	r2, #40	@ 0x28
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4393      	bics	r3, r2
 8002aea:	b2d9      	uxtb	r1, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2228      	movs	r2, #40	@ 0x28
 8002af0:	5499      	strb	r1, [r3, r2]
                        break;
 8002af2:	e036      	b.n	8002b62 <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2228      	movs	r2, #40	@ 0x28
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b2d9      	uxtb	r1, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2228      	movs	r2, #40	@ 0x28
 8002b04:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <prvProcessReceivedCommands+0x140>
 8002b16:	b672      	cpsid	i
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	e7fd      	b.n	8002b18 <prvProcessReceivedCommands+0x13c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	18d1      	adds	r1, r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ff15 	bl	8002958 <prvInsertTimerInActiveList>
                        break;
 8002b2e:	e018      	b.n	8002b62 <prvProcessReceivedCommands+0x186>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2228      	movs	r2, #40	@ 0x28
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	001a      	movs	r2, r3
 8002b38:	2302      	movs	r3, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d104      	bne.n	8002b48 <prvProcessReceivedCommands+0x16c>
                            {
                                vPortFree( pxTimer );
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fa27 	bl	8002f94 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002b46:	e00c      	b.n	8002b62 <prvProcessReceivedCommands+0x186>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2228      	movs	r2, #40	@ 0x28
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4393      	bics	r3, r2
 8002b52:	b2d9      	uxtb	r1, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2228      	movs	r2, #40	@ 0x28
 8002b58:	5499      	strb	r1, [r3, r2]
                        break;
 8002b5a:	e002      	b.n	8002b62 <prvProcessReceivedCommands+0x186>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	e000      	b.n	8002b62 <prvProcessReceivedCommands+0x186>
                        break;
 8002b60:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <prvProcessReceivedCommands+0x1ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1d39      	adds	r1, r7, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fe f8b4 	bl	8000cd8 <xQueueReceive>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d000      	beq.n	8002b76 <prvProcessReceivedCommands+0x19a>
 8002b74:	e736      	b.n	80029e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b006      	add	sp, #24
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	0800610c 	.word	0x0800610c
 8002b84:	20001dc8 	.word	0x20001dc8
 8002b88:	2000018c 	.word	0x2000018c

08002b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b92:	e00b      	b.n	8002bac <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <prvSwitchTimerLists+0x48>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	425a      	negs	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	0011      	movs	r1, r2
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff fdde 	bl	8002768 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <prvSwitchTimerLists+0x48>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ee      	bne.n	8002b94 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <prvSwitchTimerLists+0x48>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <prvSwitchTimerLists+0x4c>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <prvSwitchTimerLists+0x48>)
 8002bc2:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <prvSwitchTimerLists+0x4c>)
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
    }
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	20000184 	.word	0x20000184
 8002bd8:	20000188 	.word	0x20000188

08002bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002be0:	f000 f8de 	bl	8002da0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <prvCheckForValidListAndQueue+0x5c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d120      	bne.n	8002c2e <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <prvCheckForValidListAndQueue+0x60>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7fd fb16 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <prvCheckForValidListAndQueue+0x64>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7fd fb12 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <prvCheckForValidListAndQueue+0x68>)
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <prvCheckForValidListAndQueue+0x60>)
 8002c00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <prvCheckForValidListAndQueue+0x6c>)
 8002c04:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <prvCheckForValidListAndQueue+0x64>)
 8002c06:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002c08:	2200      	movs	r2, #0
 8002c0a:	210c      	movs	r1, #12
 8002c0c:	200a      	movs	r0, #10
 8002c0e:	f7fd fc19 	bl	8000444 <xQueueGenericCreate>
 8002c12:	0002      	movs	r2, r0
 8002c14:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <prvCheckForValidListAndQueue+0x5c>)
 8002c16:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <prvCheckForValidListAndQueue+0x5c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <prvCheckForValidListAndQueue+0x5c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <prvCheckForValidListAndQueue+0x70>)
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe fb81 	bl	8001330 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002c2e:	f000 f8c9 	bl	8002dc4 <vPortExitCritical>
    }
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	2000018c 	.word	0x2000018c
 8002c3c:	2000015c 	.word	0x2000015c
 8002c40:	20000170 	.word	0x20000170
 8002c44:	20000184 	.word	0x20000184
 8002c48:	20000188 	.word	0x20000188
 8002c4c:	080058f0 	.word	0x080058f0

08002c50 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        }
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3b04      	subs	r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2280      	movs	r2, #128	@ 0x80
 8002c7a:	0452      	lsls	r2, r2, #17
 8002c7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b04      	subs	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3b04      	subs	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002c90:	4a08      	ldr	r2, [pc, #32]	@ (8002cb4 <pxPortInitialiseStack+0x50>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b14      	subs	r3, #20
 8002c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3b20      	subs	r3, #32
 8002ca6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	08002cb9 	.word	0x08002cb9

08002cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <prvTaskExitError+0x2c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	d002      	beq.n	8002cd0 <prvTaskExitError+0x18>
 8002cca:	b672      	cpsid	i
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	e7fd      	b.n	8002ccc <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002cd0:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0fc      	beq.n	8002cd4 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002d00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002d00:	4a0b      	ldr	r2, [pc, #44]	@ (8002d30 <pxCurrentTCBConst2>)
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	3020      	adds	r0, #32
 8002d08:	f380 8809 	msr	PSP, r0
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f380 8814 	msr	CONTROL, r0
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002d18:	46ae      	mov	lr, r5
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	bc04      	pop	{r2}
 8002d1e:	b662      	cpsie	i
 8002d20:	4718      	bx	r3
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46c0      	nop			@ (mov r8, r8)

08002d30 <pxCurrentTCBConst2>:
 8002d30:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46c0      	nop			@ (mov r8, r8)

08002d38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <xPortStartScheduler+0x40>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <xPortStartScheduler+0x40>)
 8002d42:	21ff      	movs	r1, #255	@ 0xff
 8002d44:	0409      	lsls	r1, r1, #16
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <xPortStartScheduler+0x40>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <xPortStartScheduler+0x40>)
 8002d50:	21ff      	movs	r1, #255	@ 0xff
 8002d52:	0609      	lsls	r1, r1, #24
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d58:	f000 f898 	bl	8002e8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <xPortStartScheduler+0x44>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002d62:	f7ff ffcd 	bl	8002d00 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d66:	f7ff f863 	bl	8001e30 <vTaskSwitchContext>
    prvTaskExitError();
 8002d6a:	f7ff ffa5 	bl	8002cb8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	e000ed20 	.word	0xe000ed20
 8002d7c:	20000004 	.word	0x20000004

08002d80 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <vPortYield+0x1c>)
 8002d86:	2280      	movs	r2, #128	@ 0x80
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002d8c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002d90:	f3bf 8f6f 	isb	sy
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002da4:	b672      	cpsid	i
    uxCriticalNesting++;
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <vPortEnterCritical+0x20>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <vPortEnterCritical+0x20>)
 8002dae:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002db0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002db4:	f3bf 8f6f 	isb	sy
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <vPortExitCritical+0x2c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <vPortExitCritical+0x12>
 8002dd0:	b672      	cpsid	i
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	e7fd      	b.n	8002dd2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <vPortExitCritical+0x2c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	1e5a      	subs	r2, r3, #1
 8002ddc:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <vPortExitCritical+0x2c>)
 8002dde:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <vPortExitCritical+0x2c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d100      	bne.n	8002dea <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002de8:	b662      	cpsie	i
    }
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000004 	.word	0x20000004

08002df4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002df4:	f3ef 8010 	mrs	r0, PRIMASK
 8002df8:	b672      	cpsid	i
 8002dfa:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002dfc:	46c0      	nop			@ (mov r8, r8)
 8002dfe:	0018      	movs	r0, r3

08002e00 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002e00:	f380 8810 	msr	PRIMASK, r0
 8002e04:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002e06:	46c0      	nop			@ (mov r8, r8)
	...

08002e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e10:	f3ef 8009 	mrs	r0, PSP
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <pxCurrentTCBConst>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	3820      	subs	r0, #32
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002e1e:	4644      	mov	r4, r8
 8002e20:	464d      	mov	r5, r9
 8002e22:	4656      	mov	r6, sl
 8002e24:	465f      	mov	r7, fp
 8002e26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002e28:	b508      	push	{r3, lr}
 8002e2a:	b672      	cpsid	i
 8002e2c:	f7ff f800 	bl	8001e30 <vTaskSwitchContext>
 8002e30:	b662      	cpsie	i
 8002e32:	bc0c      	pop	{r2, r3}
 8002e34:	6811      	ldr	r1, [r2, #0]
 8002e36:	6808      	ldr	r0, [r1, #0]
 8002e38:	3010      	adds	r0, #16
 8002e3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002e3c:	46a0      	mov	r8, r4
 8002e3e:	46a9      	mov	r9, r5
 8002e40:	46b2      	mov	sl, r6
 8002e42:	46bb      	mov	fp, r7
 8002e44:	f380 8809 	msr	PSP, r0
 8002e48:	3820      	subs	r0, #32
 8002e4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002e4c:	4718      	bx	r3
 8002e4e:	46c0      	nop			@ (mov r8, r8)

08002e50 <pxCurrentTCBConst>:
 8002e50:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46c0      	nop			@ (mov r8, r8)

08002e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e5e:	f7ff ffc9 	bl	8002df4 <ulSetInterruptMaskFromISR>
 8002e62:	0003      	movs	r3, r0
 8002e64:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e66:	f7fe feb9 	bl	8001bdc <xTaskIncrementTick>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d003      	beq.n	8002e76 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SysTick_Handler+0x30>)
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	0552      	lsls	r2, r2, #21
 8002e74:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ffc1 	bl	8002e00 <vClearInterruptMaskFromISR>
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	22fa      	movs	r2, #250	@ 0xfa
 8002ea2:	0091      	lsls	r1, r2, #2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fd f92f 	bl	8000108 <__udivsi3>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	001a      	movs	r2, r3
 8002eae:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002eb0:	3a01      	subs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eb4:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	e000e010 	.word	0xe000e010
 8002ec4:	e000e018 	.word	0xe000e018
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	e000e014 	.word	0xe000e014

08002ed0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2207      	movs	r2, #7
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	4393      	bics	r3, r2
 8002eea:	3308      	adds	r3, #8
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d205      	bcs.n	8002efe <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	3308      	adds	r3, #8
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002f02:	f7fe fd47 	bl	8001994 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002f06:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <pvPortMalloc+0xb4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <pvPortMalloc+0xb8>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	4393      	bics	r3, r2
 8002f14:	001a      	movs	r2, r3
 8002f16:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <pvPortMalloc+0xb4>)
 8002f18:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01a      	beq.n	8002f56 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002f20:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002f28:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <pvPortMalloc+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d813      	bhi.n	8002f56 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002f2e:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	18d2      	adds	r2, r2, r3
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90b      	bls.n	8002f56 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <pvPortMalloc+0xb4>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	18d3      	adds	r3, r2, r3
 8002f48:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	18d2      	adds	r2, r2, r3
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <pvPortMalloc+0xbc>)
 8002f54:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <pvPortMalloc+0x9a>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	0019      	movs	r1, r3
 8002f62:	2094      	movs	r0, #148	@ 0x94
 8002f64:	f000 fd80 	bl	8003a68 <vTraceStoreMemMangEvent>
 8002f68:	e005      	b.n	8002f76 <pvPortMalloc+0xa6>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	20e8      	movs	r0, #232	@ 0xe8
 8002f72:	f000 fd79 	bl	8003a68 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8002f76:	f7fe fd19 	bl	80019ac <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b004      	add	sp, #16
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20001d9c 	.word	0x20001d9c
 8002f88:	2000019f 	.word	0x2000019f
 8002f8c:	20001d98 	.word	0x20001d98
 8002f90:	00001bf7 	.word	0x00001bf7

08002f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <vPortFree+0x14>
 8002fa2:	b672      	cpsid	i
 8002fa4:	46c0      	nop			@ (mov r8, r8)
 8002fa6:	e7fd      	b.n	8002fa4 <vPortFree+0x10>
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8002fb4:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <xPortGetFreeHeapSize+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a03      	ldr	r2, [pc, #12]	@ (8002fc8 <xPortGetFreeHeapSize+0x18>)
 8002fba:	1ad3      	subs	r3, r2, r3
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	20001d98 	.word	0x20001d98
 8002fc8:	00001bf8 	.word	0x00001bf8

08002fcc <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fe f86c 	bl	80010b4 <uxQueueGetQueueNumber>
 8002fdc:	0003      	movs	r3, r0
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fe f875 	bl	80010e0 <ucQueueGetQueueType>
 8002ff6:	0003      	movs	r3, r0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff f970 	bl	80022f0 <uxTaskGetTaskNumber>
 8003010:	0003      	movs	r3, r0
 8003012:	b29b      	uxth	r3, r3
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff f962 	bl	80022f0 <uxTaskGetTaskNumber>
 800302c:	0003      	movs	r3, r0
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	b29b      	uxth	r3, r3
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}

0800303a <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	000a      	movs	r2, r1
 8003044:	1cbb      	adds	r3, r7, #2
 8003046:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f7ff f950 	bl	80022f0 <uxTaskGetTaskNumber>
 8003050:	0003      	movs	r3, r0
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff f959 	bl	8002318 <vTaskSetTaskNumber>
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}

0800306e <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	000a      	movs	r2, r1
 8003078:	1cbb      	adds	r3, r7, #2
 800307a:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff f936 	bl	80022f0 <uxTaskGetTaskNumber>
 8003084:	0003      	movs	r3, r0
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	0c1a      	lsrs	r2, r3, #16
 800308a:	1cbb      	adds	r3, r7, #2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0011      	movs	r1, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff f93e 	bl	8002318 <vTaskSetTaskNumber>
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff ff8c 	bl	8002fcc <prvTraceGetQueueNumber>
 80030b4:	0003      	movs	r3, r0
 80030b6:	b29b      	uxth	r3, r3
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff ff7e 	bl	8002fcc <prvTraceGetQueueNumber>
 80030d0:	0003      	movs	r3, r0
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	b29b      	uxth	r3, r3
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	000a      	movs	r2, r1
 80030e8:	1cbb      	adds	r3, r7, #2
 80030ea:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7ff ff6c 	bl	8002fcc <prvTraceGetQueueNumber>
 80030f4:	0003      	movs	r3, r0
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	1cbb      	adds	r3, r7, #2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f7fd ffdf 	bl	80010c8 <vQueueSetQueueNumber>
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}

08003112 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	000a      	movs	r2, r1
 800311c:	1cbb      	adds	r3, r7, #2
 800311e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ff52 	bl	8002fcc <prvTraceGetQueueNumber>
 8003128:	0003      	movs	r3, r0
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	0c1a      	lsrs	r2, r3, #16
 800312e:	1cbb      	adds	r3, r7, #2
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd ffc4 	bl	80010c8 <vQueueSetQueueNumber>
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvTraceGetTimerNumberLow16>:

#if (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetTimerNumberLow16(void* pvTimer)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fd7c 	bl	8002c50 <uxTimerGetTimerNumber>
 8003158:	0003      	movs	r3, r0
 800315a:	b29b      	uxth	r3, r3
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}

08003164 <prvTraceGetTimerNumberHigh16>:

uint16_t prvTraceGetTimerNumberHigh16(void* pvTimer)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff fd6e 	bl	8002c50 <uxTimerGetTimerNumber>
 8003174:	0003      	movs	r3, r0
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	b29b      	uxth	r3, r3
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b002      	add	sp, #8
 8003180:	bd80      	pop	{r7, pc}

08003182 <vTraceSetQueueName>:
};

#if (TRC_CFG_SCHEDULING_ONLY == 0)

void vTraceSetQueueName(void* pvQueue, const char* szName)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0018      	movs	r0, r3
 8003190:	f7ff ff88 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 8003194:	0003      	movs	r3, r0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	0019      	movs	r1, r3
 800319c:	2000      	movs	r0, #0
 800319e:	f001 f92b 	bl	80043f8 <prvTraceSetObjectName>
}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}

080031aa <vTraceSetSemaphoreName>:

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff ff74 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80031bc:	0003      	movs	r3, r0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	0019      	movs	r1, r3
 80031c4:	2001      	movs	r0, #1
 80031c6:	f001 f917 	bl	80043f8 <prvTraceSetObjectName>
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <vTraceSetMutexName>:

void vTraceSetMutexName(void* pvMutex, const char* szName)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_MUTEX, TRACE_GET_OBJECT_NUMBER(QUEUE, pvMutex), szName);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff ff60 	bl	80030a4 <prvTraceGetQueueNumberLow16>
 80031e4:	0003      	movs	r3, r0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	0019      	movs	r1, r3
 80031ec:	2002      	movs	r0, #2
 80031ee:	f001 f903 	bl	80043f8 <prvTraceSetObjectName>
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}

080031fa <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 80031fe:	f7ff f905 	bl	800240c <xTaskGetCurrentTaskHandle>
 8003202:	0003      	movs	r3, r0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 800322c:	4b62      	ldr	r3, [pc, #392]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2209      	movs	r2, #9
 8003232:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8003234:	4b60      	ldr	r3, [pc, #384]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2250      	movs	r2, #80	@ 0x50
 800323a:	2102      	movs	r1, #2
 800323c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800323e:	4b5e      	ldr	r3, [pc, #376]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2251      	movs	r2, #81	@ 0x51
 8003244:	2106      	movs	r1, #6
 8003246:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003248:	4b5b      	ldr	r3, [pc, #364]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2252      	movs	r2, #82	@ 0x52
 800324e:	2102      	movs	r1, #2
 8003250:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8003252:	4b59      	ldr	r3, [pc, #356]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2253      	movs	r2, #83	@ 0x53
 8003258:	2106      	movs	r1, #6
 800325a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 800325c:	4b56      	ldr	r3, [pc, #344]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2254      	movs	r2, #84	@ 0x54
 8003262:	2104      	movs	r1, #4
 8003264:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2255      	movs	r2, #85	@ 0x55
 800326c:	2101      	movs	r1, #1
 800326e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8003270:	4b51      	ldr	r3, [pc, #324]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2256      	movs	r2, #86	@ 0x56
 8003276:	2102      	movs	r1, #2
 8003278:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 800327a:	4b4f      	ldr	r3, [pc, #316]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2257      	movs	r2, #87	@ 0x57
 8003280:	2102      	movs	r1, #2
 8003282:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8003284:	4b4c      	ldr	r3, [pc, #304]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2258      	movs	r2, #88	@ 0x58
 800328a:	2102      	movs	r1, #2
 800328c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	225c      	movs	r2, #92	@ 0x5c
 8003294:	210f      	movs	r1, #15
 8003296:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8003298:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	225d      	movs	r2, #93	@ 0x5d
 800329e:	210f      	movs	r1, #15
 80032a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80032a2:	4b45      	ldr	r3, [pc, #276]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	225e      	movs	r2, #94	@ 0x5e
 80032a8:	210f      	movs	r1, #15
 80032aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80032ac:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	225f      	movs	r2, #95	@ 0x5f
 80032b2:	210f      	movs	r1, #15
 80032b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80032b6:	4b40      	ldr	r3, [pc, #256]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2260      	movs	r2, #96	@ 0x60
 80032bc:	210f      	movs	r1, #15
 80032be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80032c0:	4b3d      	ldr	r3, [pc, #244]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2261      	movs	r2, #97	@ 0x61
 80032c6:	210f      	movs	r1, #15
 80032c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80032ca:	4b3b      	ldr	r3, [pc, #236]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2262      	movs	r2, #98	@ 0x62
 80032d0:	210f      	movs	r1, #15
 80032d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80032d4:	4b38      	ldr	r3, [pc, #224]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2263      	movs	r2, #99	@ 0x63
 80032da:	210f      	movs	r1, #15
 80032dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80032de:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2264      	movs	r2, #100	@ 0x64
 80032e4:	210f      	movs	r1, #15
 80032e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 80032e8:	4b33      	ldr	r3, [pc, #204]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2268      	movs	r2, #104	@ 0x68
 80032ee:	2110      	movs	r1, #16
 80032f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 80032f2:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2269      	movs	r2, #105	@ 0x69
 80032f8:	2110      	movs	r1, #16
 80032fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 80032fc:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	226a      	movs	r2, #106	@ 0x6a
 8003302:	2110      	movs	r1, #16
 8003304:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8003306:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	226b      	movs	r2, #107	@ 0x6b
 800330c:	2113      	movs	r1, #19
 800330e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003310:	4b29      	ldr	r3, [pc, #164]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	226c      	movs	r2, #108	@ 0x6c
 8003316:	2111      	movs	r1, #17
 8003318:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 800331a:	4b27      	ldr	r3, [pc, #156]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	226d      	movs	r2, #109	@ 0x6d
 8003320:	2110      	movs	r1, #16
 8003322:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8003324:	4b24      	ldr	r3, [pc, #144]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	226e      	movs	r2, #110	@ 0x6e
 800332a:	2113      	movs	r1, #19
 800332c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800332e:	4b22      	ldr	r3, [pc, #136]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	226f      	movs	r2, #111	@ 0x6f
 8003334:	2113      	movs	r1, #19
 8003336:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003338:	4b1f      	ldr	r3, [pc, #124]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2270      	movs	r2, #112	@ 0x70
 800333e:	2113      	movs	r1, #19
 8003340:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8003342:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2274      	movs	r2, #116	@ 0x74
 8003348:	2100      	movs	r1, #0
 800334a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 800334c:	4b1a      	ldr	r3, [pc, #104]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2276      	movs	r2, #118	@ 0x76
 8003352:	2120      	movs	r1, #32
 8003354:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8003356:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2278      	movs	r2, #120	@ 0x78
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8003360:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	227a      	movs	r2, #122	@ 0x7a
 8003366:	21a0      	movs	r1, #160	@ 0xa0
 8003368:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800336a:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	227c      	movs	r2, #124	@ 0x7c
 8003370:	2189      	movs	r1, #137	@ 0x89
 8003372:	0049      	lsls	r1, r1, #1
 8003374:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	227e      	movs	r2, #126	@ 0x7e
 800337c:	21ab      	movs	r1, #171	@ 0xab
 800337e:	0049      	lsls	r1, r1, #1
 8003380:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2280      	movs	r2, #128	@ 0x80
 8003388:	21b3      	movs	r1, #179	@ 0xb3
 800338a:	0049      	lsls	r1, r1, #1
 800338c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2282      	movs	r2, #130	@ 0x82
 8003394:	21c6      	movs	r1, #198	@ 0xc6
 8003396:	0049      	lsls	r1, r1, #1
 8003398:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2284      	movs	r2, #132	@ 0x84
 80033a0:	21d9      	movs	r1, #217	@ 0xd9
 80033a2:	0049      	lsls	r1, r1, #1
 80033a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80033a6:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	22ec      	movs	r2, #236	@ 0xec
 80033ac:	0052      	lsls	r2, r2, #1
 80033ae:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200031f8 	.word	0x200031f8

080033bc <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80033c6:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	825a      	strh	r2, [r3, #18]
 80033cc:	4b3e      	ldr	r3, [pc, #248]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033ce:	8a5a      	ldrh	r2, [r3, #18]
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033d2:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 80033d4:	4b3c      	ldr	r3, [pc, #240]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	829a      	strh	r2, [r3, #20]
 80033da:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033dc:	8a9a      	ldrh	r2, [r3, #20]
 80033de:	4b3a      	ldr	r3, [pc, #232]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033e0:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 80033e2:	4b39      	ldr	r3, [pc, #228]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	82da      	strh	r2, [r3, #22]
 80033e8:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033ea:	8ada      	ldrh	r2, [r3, #22]
 80033ec:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033ee:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 80033f0:	4b35      	ldr	r3, [pc, #212]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033f2:	220a      	movs	r2, #10
 80033f4:	831a      	strh	r2, [r3, #24]
 80033f6:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033f8:	8b1a      	ldrh	r2, [r3, #24]
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80033fc:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 80033fe:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003400:	2210      	movs	r2, #16
 8003402:	835a      	strh	r2, [r3, #26]
 8003404:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003406:	8b5a      	ldrh	r2, [r3, #26]
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800340a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800340c:	4b2e      	ldr	r3, [pc, #184]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800340e:	2214      	movs	r2, #20
 8003410:	839a      	strh	r2, [r3, #28]
 8003412:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003414:	8b9a      	ldrh	r2, [r3, #28]
 8003416:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003418:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800341a:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800341c:	2215      	movs	r2, #21
 800341e:	83da      	strh	r2, [r3, #30]
 8003420:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003422:	8bda      	ldrh	r2, [r3, #30]
 8003424:	4b28      	ldr	r3, [pc, #160]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003426:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800342a:	2217      	movs	r2, #23
 800342c:	841a      	strh	r2, [r3, #32]
 800342e:	4b26      	ldr	r3, [pc, #152]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003430:	8c1a      	ldrh	r2, [r3, #32]
 8003432:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003434:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003438:	2219      	movs	r2, #25
 800343a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800343c:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800343e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003442:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003444:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003446:	2201      	movs	r2, #1
 8003448:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800344a:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800344c:	2207      	movs	r2, #7
 800344e:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003452:	2209      	movs	r2, #9
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8003456:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003458:	220f      	movs	r2, #15
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800345e:	2213      	movs	r2, #19
 8003460:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8003462:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003464:	2214      	movs	r2, #20
 8003466:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003468:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800346a:	2216      	movs	r2, #22
 800346c:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 800346e:	4b16      	ldr	r3, [pc, #88]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003470:	2218      	movs	r2, #24
 8003472:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8003474:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003476:	221a      	movs	r2, #26
 8003478:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	e00a      	b.n	8003496 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003480:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3318      	adds	r3, #24
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	18d3      	adds	r3, r2, r3
 800348a:	3306      	adds	r3, #6
 800348c:	2200      	movs	r2, #0
 800348e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3301      	adds	r3, #1
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d9f1      	bls.n	8003480 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e009      	b.n	80034b6 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80034a2:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80034a4:	2148      	movs	r1, #72	@ 0x48
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	185b      	adds	r3, r3, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b1a      	cmp	r3, #26
 80034ba:	d9f2      	bls.n	80034a2 <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	20001dcc 	.word	0x20001dcc

080034cc <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	0002      	movs	r2, r0
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d816      	bhi.n	800350e <pszTraceGetErrorNotEnoughHandles+0x42>
 80034e0:	009a      	lsls	r2, r3, #2
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 80034ea:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <pszTraceGetErrorNotEnoughHandles+0x50>)
 80034ec:	e010      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 80034ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <pszTraceGetErrorNotEnoughHandles+0x54>)
 80034f0:	e00e      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 80034f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <pszTraceGetErrorNotEnoughHandles+0x58>)
 80034f4:	e00c      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 80034f8:	e00a      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <pszTraceGetErrorNotEnoughHandles+0x60>)
 80034fc:	e008      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 80034fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <pszTraceGetErrorNotEnoughHandles+0x64>)
 8003500:	e006      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8003504:	e004      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8003506:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003508:	e002      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800350a:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <pszTraceGetErrorNotEnoughHandles+0x70>)
 800350c:	e000      	b.n	8003510 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	08006134 	.word	0x08006134
 800351c:	080058f8 	.word	0x080058f8
 8003520:	08005940 	.word	0x08005940
 8003524:	08005988 	.word	0x08005988
 8003528:	080059dc 	.word	0x080059dc
 800352c:	08005a28 	.word	0x08005a28
 8003530:	08005a74 	.word	0x08005a74
 8003534:	08005ac0 	.word	0x08005ac0
 8003538:	08005b14 	.word	0x08005b14
 800353c:	08005b6c 	.word	0x08005b6c
 8003540:	08005bc8 	.word	0x08005bc8

08003544 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 800354c:	f000 f8ec 	bl	8003728 <xTraceInitialize>
 8003550:	0003      	movs	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8003556:	2301      	movs	r3, #1
 8003558:	e021      	b.n	800359e <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10b      	bne.n	8003578 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8003560:	f7ff fe5c 	bl	800321c <xTraceKernelPortEnable>
 8003564:	0003      	movs	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 800356a:	2301      	movs	r3, #1
 800356c:	e017      	b.n	800359e <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 800356e:	f000 f8a9 	bl	80036c4 <prvTraceInitTimestamps>

		prvTraceStart();
 8003572:	f000 f825 	bl	80035c0 <prvTraceStart>
 8003576:	e011      	b.n	800359c <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d105      	bne.n	800358a <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <xTraceEnable+0x64>)
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fff5 	bl	8004570 <prvTraceError>

		return TRC_FAIL;
 8003586:	2301      	movs	r3, #1
 8003588:	e009      	b.n	800359e <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <xTraceEnable+0x68>)
 8003592:	0018      	movs	r0, r3
 8003594:	f000 ffec 	bl	8004570 <prvTraceError>

		return TRC_FAIL;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	08005bf8 	.word	0x08005bf8
 80035ac:	08005c38 	.word	0x08005c38

080035b0 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	prvTraceStop();
 80035b4:	f000 f86e 	bl	8003694 <prvTraceStop>

	return TRC_SUCCESS;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80035c6:	2417      	movs	r4, #23
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 80035ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <prvTraceStart+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d050      	beq.n	8003678 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80035d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003684 <prvTraceStart+0xc4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d04d      	beq.n	800367c <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 80035e0:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <prvTraceStart+0xc8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d14a      	bne.n	800367e <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80035ee:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	2301      	movs	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	4b23      	ldr	r3, [pc, #140]	@ (800368c <prvTraceStart+0xcc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4b21      	ldr	r3, [pc, #132]	@ (800368c <prvTraceStart+0xcc>)
 8003606:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8003608:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <prvTraceStart+0xc4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8003610:	f7ff fdf3 	bl	80031fa <prvTraceGetCurrentTaskHandle>
 8003614:	0003      	movs	r3, r0
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fcf2 	bl	8003000 <prvTraceGetTaskNumberLow16>
 800361c:	0003      	movs	r3, r0
 800361e:	001a      	movs	r2, r3
 8003620:	0025      	movs	r5, r4
 8003622:	197b      	adds	r3, r7, r5
 8003624:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8003626:	197b      	adds	r3, r7, r5
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800362e:	197c      	adds	r4, r7, r5
 8003630:	2003      	movs	r0, #3
 8003632:	f000 fde9 	bl	8004208 <prvTraceGetObjectHandle>
 8003636:	0003      	movs	r3, r0
 8003638:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800363a:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <prvTraceStart+0xd0>)
 800363c:	197b      	adds	r3, r7, r5
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	0019      	movs	r1, r3
 8003642:	2003      	movs	r0, #3
 8003644:	f000 fed8 	bl	80043f8 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8003648:	197b      	adds	r3, r7, r5
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	0019      	movs	r1, r3
 8003650:	2003      	movs	r0, #3
 8003652:	f000 fc91 	bl	8003f78 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8003656:	2317      	movs	r3, #23
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 fc17 	bl	8003e90 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003662:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <prvTraceStart+0xcc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <prvTraceStart+0xcc>)
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	e002      	b.n	800367e <prvTraceStart+0xbe>
		return;
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	e000      	b.n	800367e <prvTraceStart+0xbe>
		return; /* Already running */
 800367c:	46c0      	nop			@ (mov r8, r8)
	}
}
 800367e:	46bd      	mov	sp, r7
 8003680:	b006      	add	sp, #24
 8003682:	bdb0      	pop	{r4, r5, r7, pc}
 8003684:	200031f8 	.word	0x200031f8
 8003688:	20001e30 	.word	0x20001e30
 800368c:	20001db4 	.word	0x20001db4
 8003690:	08005c78 	.word	0x08005c78

08003694 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <prvTraceStop+0x28>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <prvTraceStop+0x28>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <prvTraceStop+0x2c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <prvTraceStop+0x2c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4798      	blx	r3
	}
}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200031f8 	.word	0x200031f8
 80036c0:	20001dc0 	.word	0x20001dc0

080036c4 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <prvTraceInitTimestamps+0x14>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <prvTraceInitTimestamps+0x18>)
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	e000e018 	.word	0xe000e018
 80036dc:	20001dc4 	.word	0x20001dc4

080036e0 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2100      	movs	r1, #0
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 feec 	bl	80044cc <prvTraceOpenSymbol>
 80036f4:	0002      	movs	r2, r0
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8003710:	230c      	movs	r3, #12
 8003712:	18fa      	adds	r2, r7, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0011      	movs	r1, r2
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ffe1 	bl	80036e0 <xTraceStringRegister>

	return trcStr;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}

08003728 <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 800372c:	4b7f      	ldr	r3, [pc, #508]	@ (800392c <xTraceInitialize+0x204>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8003734:	2300      	movs	r3, #0
 8003736:	e0f6      	b.n	8003926 <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8003738:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <xTraceInitialize+0x208>)
 800373a:	2201      	movs	r2, #1
 800373c:	4252      	negs	r2, r2
 800373e:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8003740:	4b7c      	ldr	r3, [pc, #496]	@ (8003934 <xTraceInitialize+0x20c>)
 8003742:	2201      	movs	r2, #1
 8003744:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8003746:	4b7c      	ldr	r3, [pc, #496]	@ (8003938 <xTraceInitialize+0x210>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 800374c:	4b7b      	ldr	r3, [pc, #492]	@ (800393c <xTraceInitialize+0x214>)
 800374e:	4a7c      	ldr	r2, [pc, #496]	@ (8003940 <xTraceInitialize+0x218>)
 8003750:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8003752:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <xTraceInitialize+0x21c>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b7c      	ldr	r3, [pc, #496]	@ (8003948 <xTraceInitialize+0x220>)
 8003758:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 800375a:	4b7c      	ldr	r3, [pc, #496]	@ (800394c <xTraceInitialize+0x224>)
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fd54 	bl	800320a <xTraceKernelPortInitialize>
 8003762:	0003      	movs	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 8003768:	2301      	movs	r3, #1
 800376a:	e0dc      	b.n	8003926 <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800376c:	4b73      	ldr	r3, [pc, #460]	@ (800393c <xTraceInitialize+0x214>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a77      	ldr	r2, [pc, #476]	@ (8003950 <xTraceInitialize+0x228>)
 8003772:	2100      	movs	r1, #0
 8003774:	0018      	movs	r0, r3
 8003776:	f002 f85f 	bl	8005838 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800377a:	4b70      	ldr	r3, [pc, #448]	@ (800393c <xTraceInitialize+0x214>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	@ (8003954 <xTraceInitialize+0x22c>)
 8003780:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8003782:	4b6e      	ldr	r3, [pc, #440]	@ (800393c <xTraceInitialize+0x214>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2207      	movs	r2, #7
 8003788:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800378a:	4b6c      	ldr	r3, [pc, #432]	@ (800393c <xTraceInitialize+0x214>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003792:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <xTraceInitialize+0x214>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <xTraceInitialize+0x228>)
 8003798:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800379a:	4b68      	ldr	r3, [pc, #416]	@ (800393c <xTraceInitialize+0x214>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	22fa      	movs	r2, #250	@ 0xfa
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 80037a4:	4b65      	ldr	r3, [pc, #404]	@ (800393c <xTraceInitialize+0x214>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <xTraceInitialize+0x230>)
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80037ac:	4b63      	ldr	r3, [pc, #396]	@ (800393c <xTraceInitialize+0x214>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80037b4:	4b61      	ldr	r3, [pc, #388]	@ (800393c <xTraceInitialize+0x214>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80037bc:	f7ff fd34 	bl	8003228 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80037c0:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <xTraceInitialize+0x214>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2398      	movs	r3, #152	@ 0x98
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4964      	ldr	r1, [pc, #400]	@ (800395c <xTraceInitialize+0x234>)
 80037ca:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80037cc:	4b5b      	ldr	r3, [pc, #364]	@ (800393c <xTraceInitialize+0x214>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	2399      	movs	r3, #153	@ 0x99
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	21c8      	movs	r1, #200	@ 0xc8
 80037d6:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80037d8:	4b58      	ldr	r3, [pc, #352]	@ (800393c <xTraceInitialize+0x214>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	239a      	movs	r3, #154	@ 0x9a
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	2101      	movs	r1, #1
 80037e2:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <xTraceInitialize+0x214>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	23ef      	movs	r3, #239	@ 0xef
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	495c      	ldr	r1, [pc, #368]	@ (8003960 <xTraceInitialize+0x238>)
 80037ee:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80037f0:	4b52      	ldr	r3, [pc, #328]	@ (800393c <xTraceInitialize+0x214>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	22f0      	movs	r2, #240	@ 0xf0
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4694      	mov	ip, r2
 80037fa:	4463      	add	r3, ip
 80037fc:	4959      	ldr	r1, [pc, #356]	@ (8003964 <xTraceInitialize+0x23c>)
 80037fe:	2250      	movs	r2, #80	@ 0x50
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fdd5 	bl	80043b0 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8003806:	4b4d      	ldr	r3, [pc, #308]	@ (800393c <xTraceInitialize+0x214>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	2382      	movs	r3, #130	@ 0x82
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4956      	ldr	r1, [pc, #344]	@ (8003968 <xTraceInitialize+0x240>)
 8003810:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <xTraceInitialize+0x214>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a55      	ldr	r2, [pc, #340]	@ (800396c <xTraceInitialize+0x244>)
 8003818:	210a      	movs	r1, #10
 800381a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 800381c:	4b47      	ldr	r3, [pc, #284]	@ (800393c <xTraceInitialize+0x214>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a53      	ldr	r2, [pc, #332]	@ (8003970 <xTraceInitialize+0x248>)
 8003822:	210b      	movs	r1, #11
 8003824:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 8003826:	4b45      	ldr	r3, [pc, #276]	@ (800393c <xTraceInitialize+0x214>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <xTraceInitialize+0x24c>)
 800382c:	210c      	movs	r1, #12
 800382e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8003830:	4b42      	ldr	r3, [pc, #264]	@ (800393c <xTraceInitialize+0x214>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <xTraceInitialize+0x250>)
 8003836:	210d      	movs	r1, #13
 8003838:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <xTraceInitialize+0x214>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <xTraceInitialize+0x254>)
 8003840:	2171      	movs	r1, #113	@ 0x71
 8003842:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8003844:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <xTraceInitialize+0x214>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a4d      	ldr	r2, [pc, #308]	@ (8003980 <xTraceInitialize+0x258>)
 800384a:	2172      	movs	r1, #114	@ 0x72
 800384c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <xTraceInitialize+0x214>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a4c      	ldr	r2, [pc, #304]	@ (8003984 <xTraceInitialize+0x25c>)
 8003854:	2173      	movs	r1, #115	@ 0x73
 8003856:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8003858:	4b38      	ldr	r3, [pc, #224]	@ (800393c <xTraceInitialize+0x214>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a4a      	ldr	r2, [pc, #296]	@ (8003988 <xTraceInitialize+0x260>)
 800385e:	2174      	movs	r1, #116	@ 0x74
 8003860:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8003862:	4b36      	ldr	r3, [pc, #216]	@ (800393c <xTraceInitialize+0x214>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	239e      	movs	r3, #158	@ 0x9e
 8003868:	015b      	lsls	r3, r3, #5
 800386a:	21f1      	movs	r1, #241	@ 0xf1
 800386c:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 800386e:	4b33      	ldr	r3, [pc, #204]	@ (800393c <xTraceInitialize+0x214>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a46      	ldr	r2, [pc, #280]	@ (800398c <xTraceInitialize+0x264>)
 8003874:	21f2      	movs	r1, #242	@ 0xf2
 8003876:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 8003878:	4b30      	ldr	r3, [pc, #192]	@ (800393c <xTraceInitialize+0x214>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a44      	ldr	r2, [pc, #272]	@ (8003990 <xTraceInitialize+0x268>)
 800387e:	21f3      	movs	r1, #243	@ 0xf3
 8003880:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8003882:	4b2e      	ldr	r3, [pc, #184]	@ (800393c <xTraceInitialize+0x214>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a43      	ldr	r2, [pc, #268]	@ (8003994 <xTraceInitialize+0x26c>)
 8003888:	21f4      	movs	r1, #244	@ 0xf4
 800388a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 800388c:	f7ff fd96 	bl	80033bc <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8003890:	4b2a      	ldr	r3, [pc, #168]	@ (800393c <xTraceInitialize+0x214>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	22f4      	movs	r2, #244	@ 0xf4
 8003896:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <xTraceInitialize+0x214>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	22f3      	movs	r2, #243	@ 0xf3
 800389e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80038a0:	4b26      	ldr	r3, [pc, #152]	@ (800393c <xTraceInitialize+0x214>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	22f2      	movs	r2, #242	@ 0xf2
 80038a6:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <xTraceInitialize+0x214>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	22f1      	movs	r2, #241	@ 0xf1
 80038ae:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80038b0:	4b22      	ldr	r3, [pc, #136]	@ (800393c <xTraceInitialize+0x214>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2274      	movs	r2, #116	@ 0x74
 80038b6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80038b8:	4b20      	ldr	r3, [pc, #128]	@ (800393c <xTraceInitialize+0x214>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2273      	movs	r2, #115	@ 0x73
 80038be:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80038c0:	4b1e      	ldr	r3, [pc, #120]	@ (800393c <xTraceInitialize+0x214>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2272      	movs	r2, #114	@ 0x72
 80038c6:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80038c8:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <xTraceInitialize+0x214>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2271      	movs	r2, #113	@ 0x71
 80038ce:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <xTraceInitialize+0x214>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2204      	movs	r2, #4
 80038d6:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80038d8:	4b18      	ldr	r3, [pc, #96]	@ (800393c <xTraceInitialize+0x214>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2203      	movs	r2, #3
 80038de:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80038e0:	4b16      	ldr	r3, [pc, #88]	@ (800393c <xTraceInitialize+0x214>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2202      	movs	r2, #2
 80038e6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80038e8:	4b14      	ldr	r3, [pc, #80]	@ (800393c <xTraceInitialize+0x214>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <xTraceInitialize+0x210>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <xTraceInitialize+0x214>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	22f0      	movs	r2, #240	@ 0xf0
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	1898      	adds	r0, r3, r2
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <xTraceInitialize+0x210>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2250      	movs	r2, #80	@ 0x50
 8003908:	0019      	movs	r1, r3
 800390a:	f000 fd51 	bl	80043b0 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <xTraceInitialize+0x214>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	23ee      	movs	r3, #238	@ 0xee
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	2101      	movs	r1, #1
 8003918:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 800391a:	f7ff febb 	bl	8003694 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 800391e:	4b03      	ldr	r3, [pc, #12]	@ (800392c <xTraceInitialize+0x204>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200031fc 	.word	0x200031fc
 8003930:	20001dc8 	.word	0x20001dc8
 8003934:	20001dca 	.word	0x20001dca
 8003938:	20001e30 	.word	0x20001e30
 800393c:	200031f8 	.word	0x200031f8
 8003940:	20001e34 	.word	0x20001e34
 8003944:	e000e018 	.word	0xe000e018
 8003948:	20001dc4 	.word	0x20001dc4
 800394c:	20001da0 	.word	0x20001da0
 8003950:	000013c4 	.word	0x000013c4
 8003954:	00001aa1 	.word	0x00001aa1
 8003958:	f0f0f0f0 	.word	0xf0f0f0f0
 800395c:	f1f1f1f1 	.word	0xf1f1f1f1
 8003960:	f2f2f2f2 	.word	0xf2f2f2f2
 8003964:	08005cf4 	.word	0x08005cf4
 8003968:	f3f3f3f3 	.word	0xf3f3f3f3
 800396c:	000013b8 	.word	0x000013b8
 8003970:	000013b9 	.word	0x000013b9
 8003974:	000013ba 	.word	0x000013ba
 8003978:	000013bb 	.word	0x000013bb
 800397c:	000013bc 	.word	0x000013bc
 8003980:	000013bd 	.word	0x000013bd
 8003984:	000013be 	.word	0x000013be
 8003988:	000013bf 	.word	0x000013bf
 800398c:	000013c1 	.word	0x000013c1
 8003990:	000013c2 	.word	0x000013c2
 8003994:	000013c3 	.word	0x000013c3

08003998 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	0002      	movs	r2, r0
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d04d      	beq.n	8003a48 <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80039ac:	4b29      	ldr	r3, [pc, #164]	@ (8003a54 <prvTraceStoreTaskReady+0xbc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04b      	beq.n	8003a4c <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80039b4:	4b28      	ldr	r3, [pc, #160]	@ (8003a58 <prvTraceStoreTaskReady+0xc0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80039bc:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <prvTraceStoreTaskReady+0xc4>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fdd6 	bl	8004570 <prvTraceError>
		return;
 80039c4:	e043      	b.n	8003a4e <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80039cc:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a58 <prvTraceStoreTaskReady+0xc0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <prvTraceStoreTaskReady+0xc0>)
 80039e4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <prvTraceStoreTaskReady+0xc8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80039f0:	251a      	movs	r5, #26
 80039f2:	197c      	adds	r4, r7, r5
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <prvTraceStoreTaskReady+0xcc>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 feae 	bl	8004758 <prvTraceGetDTS>
 80039fc:	0003      	movs	r3, r0
 80039fe:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8003a00:	2419      	movs	r4, #25
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	1dfa      	adds	r2, r7, #7
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8003a0a:	f000 fb89 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	197a      	adds	r2, r7, r5
 8003a22:	8812      	ldrh	r2, [r2, #0]
 8003a24:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	193a      	adds	r2, r7, r4
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003a2e:	f000 fe69 	bl	8004704 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <prvTraceStoreTaskReady+0xc0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1e5a      	subs	r2, r3, #1
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <prvTraceStoreTaskReady+0xc0>)
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	e002      	b.n	8003a4e <prvTraceStoreTaskReady+0xb6>
		return;
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	e000      	b.n	8003a4e <prvTraceStoreTaskReady+0xb6>
		return;
 8003a4c:	46c0      	nop			@ (mov r8, r8)
}
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b008      	add	sp, #32
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}
 8003a54:	20000010 	.word	0x20000010
 8003a58:	20001db4 	.word	0x20001db4
 8003a5c:	08005d08 	.word	0x08005d08
 8003a60:	200031f8 	.word	0x200031f8
 8003a64:	0000ffff 	.word	0x0000ffff

08003a68 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	b08e      	sub	sp, #56	@ 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8003a74:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d100      	bne.n	8003a7e <vTraceStoreMemMangEvent+0x16>
 8003a7c:	e090      	b.n	8003ba0 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da03      	bge.n	8003a8c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	425b      	negs	r3, r3
 8003a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8a:	e001      	b.n	8003a90 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a96:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	4b41      	ldr	r3, [pc, #260]	@ (8003bac <vTraceStoreMemMangEvent+0x144>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4b3f      	ldr	r3, [pc, #252]	@ (8003bac <vTraceStoreMemMangEvent+0x144>)
 8003aae:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8003ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	188a      	adds	r2, r1, r2
 8003ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8003ac6:	4b38      	ldr	r3, [pc, #224]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003acc:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d905      	bls.n	8003ae2 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b33      	ldr	r3, [pc, #204]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8003ae2:	4b31      	ldr	r3, [pc, #196]	@ (8003ba8 <vTraceStoreMemMangEvent+0x140>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d04e      	beq.n	8003b8a <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8003aec:	20ff      	movs	r0, #255	@ 0xff
 8003aee:	f000 fe33 	bl	8004758 <prvTraceGetDTS>
 8003af2:	0003      	movs	r3, r0
 8003af4:	001a      	movs	r2, r3
 8003af6:	242f      	movs	r4, #47	@ 0x2f
 8003af8:	193b      	adds	r3, r7, r4
 8003afa:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb0 <vTraceStoreMemMangEvent+0x148>)
 8003b00:	0019      	movs	r1, r3
 8003b02:	0010      	movs	r0, r2
 8003b04:	f000 f92c 	bl	8003d60 <prvTraceGetParam>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	252c      	movs	r5, #44	@ 0x2c
 8003b0c:	197b      	adds	r3, r7, r5
 8003b0e:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003b10:	f000 fb06 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003b14:	0003      	movs	r3, r0
 8003b16:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d035      	beq.n	8003b8a <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	193a      	adds	r2, r7, r4
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	197a      	adds	r2, r7, r5
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003b34:	f000 fde6 	bl	8004704 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <vTraceStoreMemMangEvent+0x148>)
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	0010      	movs	r0, r2
 8003b40:	f000 f90e 	bl	8003d60 <prvTraceGetParam>
 8003b44:	0002      	movs	r2, r0
 8003b46:	2426      	movs	r4, #38	@ 0x26
 8003b48:	193b      	adds	r3, r7, r4
 8003b4a:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8003b4c:	2525      	movs	r5, #37	@ 0x25
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003b54:	f000 fae4 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	193a      	adds	r2, r7, r4
 8003b66:	8812      	ldrh	r2, [r2, #0]
 8003b68:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	197a      	adds	r2, r7, r5
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8003b86:	f000 fdbd 	bl	8004704 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8003b8a:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <vTraceStoreMemMangEvent+0x144>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1e5a      	subs	r2, r3, #1
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <vTraceStoreMemMangEvent+0x144>)
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f383 8810 	msr	PRIMASK, r3
}
 8003b9e:	e000      	b.n	8003ba2 <vTraceStoreMemMangEvent+0x13a>
		return;
 8003ba0:	46c0      	nop			@ (mov r8, r8)
}
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b00e      	add	sp, #56	@ 0x38
 8003ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba8:	200031f8 	.word	0x200031f8
 8003bac:	20001db4 	.word	0x20001db4
 8003bb0:	0000ffff 	.word	0x0000ffff

08003bb4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b08a      	sub	sp, #40	@ 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	230b      	movs	r3, #11
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	1c0a      	adds	r2, r1, #0
 8003bc4:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8003bc6:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <prvTraceStoreKernelCall+0xb8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <prvTraceStoreKernelCall+0xbc>)
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 fccd 	bl	8004570 <prvTraceError>
		return;
 8003bd6:	e045      	b.n	8003c64 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 8003bd8:	4b26      	ldr	r3, [pc, #152]	@ (8003c74 <prvTraceStoreKernelCall+0xc0>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d040      	beq.n	8003c62 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	617b      	str	r3, [r7, #20]
  return(result);
 8003be6:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <prvTraceStoreKernelCall+0xb8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <prvTraceStoreKernelCall+0xb8>)
 8003bfe:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <prvTraceStoreKernelCall+0xc4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d020      	beq.n	8003c4c <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003c0a:	2522      	movs	r5, #34	@ 0x22
 8003c0c:	197c      	adds	r4, r7, r5
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <prvTraceStoreKernelCall+0xc8>)
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 fda1 	bl	8004758 <prvTraceGetDTS>
 8003c16:	0003      	movs	r3, r0
 8003c18:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003c1a:	2421      	movs	r4, #33	@ 0x21
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003c22:	f000 fa7d 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003c26:	0003      	movs	r3, r0
 8003c28:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	197a      	adds	r2, r7, r5
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	193a      	adds	r2, r7, r4
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003c48:	f000 fd5c 	bl	8004704 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003c4c:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <prvTraceStoreKernelCall+0xb8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1e5a      	subs	r2, r3, #1
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <prvTraceStoreKernelCall+0xb8>)
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	e000      	b.n	8003c64 <prvTraceStoreKernelCall+0xb0>
		return;
 8003c62:	46c0      	nop			@ (mov r8, r8)
}
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b00a      	add	sp, #40	@ 0x28
 8003c68:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	20001db4 	.word	0x20001db4
 8003c70:	08005d40 	.word	0x08005d40
 8003c74:	20001dbc 	.word	0x20001dbc
 8003c78:	200031f8 	.word	0x200031f8
 8003c7c:	0000ffff 	.word	0x0000ffff

08003c80 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b08b      	sub	sp, #44	@ 0x2c
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	230b      	movs	r3, #11
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	1c0a      	adds	r2, r1, #0
 8003c92:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 8003c94:	4b2e      	ldr	r3, [pc, #184]	@ (8003d50 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <prvTraceStoreKernelCallWithParam+0xd4>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 fc66 	bl	8004570 <prvTraceError>
		return;
 8003ca4:	e051      	b.n	8003d4a <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8003caa:	617b      	str	r3, [r7, #20]
  return(result);
 8003cac:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003cc4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003cc6:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <prvTraceStoreKernelCallWithParam+0xd8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d031      	beq.n	8003d34 <prvTraceStoreKernelCallWithParam+0xb4>
 8003cd0:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <prvTraceStoreKernelCallWithParam+0xdc>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02d      	beq.n	8003d34 <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8003cd8:	20ff      	movs	r0, #255	@ 0xff
 8003cda:	f000 fd3d 	bl	8004758 <prvTraceGetDTS>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	2423      	movs	r4, #35	@ 0x23
 8003ce4:	193b      	adds	r3, r7, r4
 8003ce6:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0019      	movs	r1, r3
 8003cec:	20ff      	movs	r0, #255	@ 0xff
 8003cee:	f000 f837 	bl	8003d60 <prvTraceGetParam>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	2522      	movs	r5, #34	@ 0x22
 8003cf6:	197b      	adds	r3, r7, r5
 8003cf8:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003cfa:	2621      	movs	r6, #33	@ 0x21
 8003cfc:	19bb      	adds	r3, r7, r6
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8003d02:	f000 fa0d 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003d06:	0003      	movs	r3, r0
 8003d08:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	193a      	adds	r2, r7, r4
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	19ba      	adds	r2, r7, r6
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	197a      	adds	r2, r7, r5
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003d30:	f000 fce8 	bl	8004704 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <prvTraceStoreKernelCallWithParam+0xd0>)
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
}
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b00b      	add	sp, #44	@ 0x2c
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d50:	20001db4 	.word	0x20001db4
 8003d54:	08005d78 	.word	0x08005d78
 8003d58:	200031f8 	.word	0x200031f8
 8003d5c:	20001dbc 	.word	0x20001dbc

08003d60 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d801      	bhi.n	8003d76 <prvTraceGetParam+0x16>
	{
		return param;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	e01e      	b.n	8003db4 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8003d76:	f000 f9d3 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d014      	beq.n	8003dae <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	4013      	ands	r3, r2
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4013      	ands	r3, r2
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003daa:	f000 fcab 	bl	8004704 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4013      	ands	r3, r2
	}
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8003dbc:	b5b0      	push	{r4, r5, r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8003dc6:	2326      	movs	r3, #38	@ 0x26
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2200      	movs	r2, #0
 8003dcc:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8003dce:	4b2b      	ldr	r3, [pc, #172]	@ (8003e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 fbc9 	bl	8004570 <prvTraceError>
		return;
 8003dde:	e04a      	b.n	8003e76 <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de0:	f3ef 8310 	mrs	r3, PRIMASK
 8003de4:	613b      	str	r3, [r7, #16]
  return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	2301      	movs	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f383 8810 	msr	PRIMASK, r3
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003dfe:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003e00:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02a      	beq.n	8003e60 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003e88 <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d026      	beq.n	8003e60 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8003e12:	20ff      	movs	r0, #255	@ 0xff
 8003e14:	f000 fca0 	bl	8004758 <prvTraceGetDTS>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	241f      	movs	r4, #31
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f7ff ff99 	bl	8003d60 <prvTraceGetParam>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	2526      	movs	r5, #38	@ 0x26
 8003e32:	197b      	adds	r3, r7, r5
 8003e34:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003e36:	f000 f973 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	193a      	adds	r2, r7, r4
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	197a      	adds	r2, r7, r5
 8003e58:	8812      	ldrh	r2, [r2, #0]
 8003e5a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003e5c:	f000 fc52 	bl	8004704 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
}
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b00a      	add	sp, #40	@ 0x28
 8003e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7c:	20001db4 	.word	0x20001db4
 8003e80:	08005db0 	.word	0x08005db0
 8003e84:	200031f8 	.word	0x200031f8
 8003e88:	20001dbc 	.word	0x20001dbc
 8003e8c:	0000ffff 	.word	0x0000ffff

08003e90 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0002      	movs	r2, r0
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <prvTraceStoreTaskswitch+0xd8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f68 <prvTraceStoreTaskswitch+0xd8>)
 8003eba:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f6c <prvTraceStoreTaskswitch+0xdc>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	1dfa      	adds	r2, r7, #7
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d03f      	beq.n	8003f48 <prvTraceStoreTaskswitch+0xb8>
 8003ec8:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <prvTraceStoreTaskswitch+0xe0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03a      	beq.n	8003f48 <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003ed2:	231a      	movs	r3, #26
 8003ed4:	18fc      	adds	r4, r7, r3
 8003ed6:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <prvTraceStoreTaskswitch+0xe4>)
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f000 fc3d 	bl	8004758 <prvTraceGetDTS>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8003ee2:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <prvTraceStoreTaskswitch+0xdc>)
 8003ee4:	1dfa      	adds	r2, r7, #7
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8003eea:	2319      	movs	r3, #25
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <prvTraceStoreTaskswitch+0xdc>)
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003ef4:	f000 f914 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003f02:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <prvTraceStoreTaskswitch+0xdc>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	0019      	movs	r1, r3
 8003f08:	2003      	movs	r0, #3
 8003f0a:	f000 f8c1 	bl	8004090 <prvTraceGetObjectState>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d103      	bne.n	8003f1c <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2207      	movs	r2, #7
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e002      	b.n	8003f22 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2206      	movs	r2, #6
 8003f20:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	221a      	movs	r2, #26
 8003f26:	18ba      	adds	r2, r7, r2
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2219      	movs	r2, #25
 8003f30:	18ba      	adds	r2, r7, r2
 8003f32:	7812      	ldrb	r2, [r2, #0]
 8003f34:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <prvTraceStoreTaskswitch+0xdc>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	2003      	movs	r0, #3
 8003f40:	f000 f876 	bl	8004030 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8003f44:	f000 fbde 	bl	8004704 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <prvTraceStoreTaskswitch+0xd8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <prvTraceStoreTaskswitch+0xd8>)
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b009      	add	sp, #36	@ 0x24
 8003f64:	bd90      	pop	{r4, r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	20001db4 	.word	0x20001db4
 8003f6c:	20001dbc 	.word	0x20001dbc
 8003f70:	200031f8 	.word	0x200031f8
 8003f74:	0000ffff 	.word	0x0000ffff

08003f78 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	0004      	movs	r4, r0
 8003f80:	0008      	movs	r0, r1
 8003f82:	0011      	movs	r1, r2
 8003f84:	1dfb      	adds	r3, r7, #7
 8003f86:	1c22      	adds	r2, r4, #0
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	1dbb      	adds	r3, r7, #6
 8003f8c:	1c02      	adds	r2, r0, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	1d7b      	adds	r3, r7, #5
 8003f92:	1c0a      	adds	r2, r1, #0
 8003f94:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <prvTraceSetPriorityProperty+0x60>)
 8003f98:	681c      	ldr	r4, [r3, #0]
 8003f9a:	1dfb      	adds	r3, r7, #7
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	1dbb      	adds	r3, r7, #6
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f8e5 	bl	8004174 <uiIndexOfObject>
 8003faa:	0003      	movs	r3, r0
 8003fac:	0018      	movs	r0, r3
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <prvTraceSetPriorityProperty+0x60>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	215c      	movs	r1, #92	@ 0x5c
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	185b      	adds	r3, r3, r1
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	18c3      	adds	r3, r0, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	2288      	movs	r2, #136	@ 0x88
 8003fc4:	18e3      	adds	r3, r4, r3
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	1d7a      	adds	r2, r7, #5
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bd90      	pop	{r4, r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	200031f8 	.word	0x200031f8

08003fdc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	1dbb      	adds	r3, r7, #6
 8003fea:	1c0a      	adds	r2, r1, #0
 8003fec:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8003fee:	4b0f      	ldr	r3, [pc, #60]	@ (800402c <prvTraceGetPriorityProperty+0x50>)
 8003ff0:	681c      	ldr	r4, [r3, #0]
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	1dbb      	adds	r3, r7, #6
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 f8b9 	bl	8004174 <uiIndexOfObject>
 8004002:	0003      	movs	r3, r0
 8004004:	0018      	movs	r0, r3
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <prvTraceGetPriorityProperty+0x50>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	215c      	movs	r1, #92	@ 0x5c
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	185b      	adds	r3, r3, r1
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	18c3      	adds	r3, r0, r3
 8004018:	3301      	adds	r3, #1
 800401a:	2288      	movs	r2, #136	@ 0x88
 800401c:	18e3      	adds	r3, r4, r3
 800401e:	189b      	adds	r3, r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b003      	add	sp, #12
 8004028:	bd90      	pop	{r4, r7, pc}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	200031f8 	.word	0x200031f8

08004030 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	0004      	movs	r4, r0
 8004038:	0008      	movs	r0, r1
 800403a:	0011      	movs	r1, r2
 800403c:	1dfb      	adds	r3, r7, #7
 800403e:	1c22      	adds	r2, r4, #0
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	1c02      	adds	r2, r0, #0
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	1d7b      	adds	r3, r7, #5
 800404a:	1c0a      	adds	r2, r1, #0
 800404c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <prvTraceSetObjectState+0x5c>)
 8004050:	681c      	ldr	r4, [r3, #0]
 8004052:	1dfb      	adds	r3, r7, #7
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	1dbb      	adds	r3, r7, #6
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f889 	bl	8004174 <uiIndexOfObject>
 8004062:	0003      	movs	r3, r0
 8004064:	0018      	movs	r0, r3
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <prvTraceSetObjectState+0x5c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	1dfb      	adds	r3, r7, #7
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	215c      	movs	r1, #92	@ 0x5c
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	185b      	adds	r3, r3, r1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	18c3      	adds	r3, r0, r3
 8004078:	2288      	movs	r2, #136	@ 0x88
 800407a:	18e3      	adds	r3, r4, r3
 800407c:	189b      	adds	r3, r3, r2
 800407e:	1d7a      	adds	r2, r7, #5
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	701a      	strb	r2, [r3, #0]
}
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b003      	add	sp, #12
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	200031f8 	.word	0x200031f8

08004090 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	0002      	movs	r2, r0
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	1dbb      	adds	r3, r7, #6
 800409e:	1c0a      	adds	r2, r1, #0
 80040a0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <prvTraceGetObjectState+0x4c>)
 80040a4:	681c      	ldr	r4, [r3, #0]
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f85f 	bl	8004174 <uiIndexOfObject>
 80040b6:	0003      	movs	r3, r0
 80040b8:	0018      	movs	r0, r3
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <prvTraceGetObjectState+0x4c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	1dfb      	adds	r3, r7, #7
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	215c      	movs	r1, #92	@ 0x5c
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	185b      	adds	r3, r3, r1
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	18c3      	adds	r3, r0, r3
 80040cc:	2288      	movs	r2, #136	@ 0x88
 80040ce:	18e3      	adds	r3, r4, r3
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	781b      	ldrb	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b003      	add	sp, #12
 80040da:	bd90      	pop	{r4, r7, pc}
 80040dc:	200031f8 	.word	0x200031f8

080040e0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	0002      	movs	r2, r0
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <prvTraceSetTaskInstanceFinished+0x3c>)
 80040ee:	681c      	ldr	r4, [r3, #0]
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2103      	movs	r1, #3
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f83c 	bl	8004174 <uiIndexOfObject>
 80040fc:	0003      	movs	r3, r0
 80040fe:	0019      	movs	r1, r3
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <prvTraceSetTaskInstanceFinished+0x3c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	225f      	movs	r2, #95	@ 0x5f
 8004106:	5c9b      	ldrb	r3, [r3, r2]
 8004108:	18cb      	adds	r3, r1, r3
 800410a:	2288      	movs	r2, #136	@ 0x88
 800410c:	18e3      	adds	r3, r4, r3
 800410e:	189b      	adds	r3, r3, r2
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
#endif
}
 8004114:	46c0      	nop			@ (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b003      	add	sp, #12
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	200031f8 	.word	0x200031f8

08004120 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 800412e:	2300      	movs	r3, #0
 8004130:	e018      	b.n	8004164 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004132:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	23fa      	movs	r3, #250	@ 0xfa
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d305      	bcc.n	800414c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <prvTraceNextFreeEventBufferSlot+0x50>)
 8004142:	0018      	movs	r0, r3
 8004144:	f000 fa14 	bl	8004570 <prvTraceError>
		return (void*)0;
 8004148:	2300      	movs	r3, #0
 800414a:	e00b      	b.n	8004164 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <prvTraceNextFreeEventBufferSlot+0x4c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	2182      	movs	r1, #130	@ 0x82
 800415a:	00c9      	lsls	r1, r1, #3
 800415c:	468c      	mov	ip, r1
 800415e:	4463      	add	r3, ip
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	3304      	adds	r3, #4
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	200031f8 	.word	0x200031f8
 8004170:	08005de8 	.word	0x08005de8

08004174 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	0002      	movs	r2, r0
 800417c:	1dfb      	adds	r3, r7, #7
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	1dbb      	adds	r3, r7, #6
 8004182:	1c0a      	adds	r2, r1, #0
 8004184:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b08      	cmp	r3, #8
 800418c:	d82e      	bhi.n	80041ec <uiIndexOfObject+0x78>
 800418e:	1dfb      	adds	r3, r7, #7
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02a      	beq.n	80041ec <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8004196:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <uiIndexOfObject+0x8c>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2150      	movs	r1, #80	@ 0x50
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	185b      	adds	r3, r3, r1
 80041a4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80041a6:	1dfa      	adds	r2, r7, #7
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d81e      	bhi.n	80041ec <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80041ae:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <uiIndexOfObject+0x8c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	1dbb      	adds	r3, r7, #6
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	3338      	adds	r3, #56	@ 0x38
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	18d3      	adds	r3, r2, r3
 80041bc:	3304      	adds	r3, #4
 80041be:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80041c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <uiIndexOfObject+0x8c>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	1dbb      	adds	r3, r7, #6
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2068      	movs	r0, #104	@ 0x68
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	181b      	adds	r3, r3, r0
 80041ce:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80041d0:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4353      	muls	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	200e      	movs	r0, #14
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	188a      	adds	r2, r1, r2
 80041e4:	801a      	strh	r2, [r3, #0]
		return index;
 80041e6:	183b      	adds	r3, r7, r0
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	e004      	b.n	80041f6 <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <uiIndexOfObject+0x90>)
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 f9be 	bl	8004570 <prvTraceError>
	return 0;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	200031f8 	.word	0x200031f8
 8004204:	08005e10 	.word	0x08005e10

08004208 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b089      	sub	sp, #36	@ 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	0002      	movs	r2, r0
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004214:	f3ef 8310 	mrs	r3, PRIMASK
 8004218:	60fb      	str	r3, [r7, #12]
  return(result);
 800421a:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	2301      	movs	r3, #1
 8004220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			@ (mov r8, r8)
 800422a:	4b4c      	ldr	r3, [pc, #304]	@ (800435c <prvTraceGetObjectHandle+0x154>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <prvTraceGetObjectHandle+0x154>)
 8004232:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 800423a:	0052      	lsls	r2, r2, #1
 800423c:	5ad3      	ldrh	r3, [r2, r3]
 800423e:	001a      	movs	r2, r3
 8004240:	4b48      	ldr	r3, [pc, #288]	@ (8004364 <prvTraceGetObjectHandle+0x15c>)
 8004242:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8004244:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <prvTraceGetObjectHandle+0x15c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a45      	ldr	r2, [pc, #276]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 800424a:	2148      	movs	r1, #72	@ 0x48
 800424c:	18d3      	adds	r3, r2, r3
 800424e:	185b      	adds	r3, r3, r1
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d117      	bne.n	8004286 <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8004256:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <prvTraceGetObjectHandle+0x15c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	493f      	ldr	r1, [pc, #252]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 8004262:	3308      	adds	r3, #8
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	18cb      	adds	r3, r1, r3
 8004268:	3302      	adds	r3, #2
 800426a:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 800426c:	b2db      	uxtb	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8004272:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <prvTraceGetObjectHandle+0x15c>)
 8004274:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8004276:	3201      	adds	r2, #1
 8004278:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800427a:	4a39      	ldr	r2, [pc, #228]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 800427c:	2148      	movs	r1, #72	@ 0x48
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	185b      	adds	r3, r3, r1
 8004282:	1c02      	adds	r2, r0, #0
 8004284:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8004286:	4b37      	ldr	r3, [pc, #220]	@ (8004364 <prvTraceGetObjectHandle+0x15c>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	241f      	movs	r4, #31
 800428c:	193b      	adds	r3, r7, r4
 800428e:	4934      	ldr	r1, [pc, #208]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 8004290:	2048      	movs	r0, #72	@ 0x48
 8004292:	188a      	adds	r2, r1, r2
 8004294:	1812      	adds	r2, r2, r0
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	4b30      	ldr	r3, [pc, #192]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042a0:	0052      	lsls	r2, r2, #1
 80042a2:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	492d      	ldr	r1, [pc, #180]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042aa:	3310      	adds	r3, #16
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	18cb      	adds	r3, r1, r3
 80042b0:	3304      	adds	r3, #4
 80042b2:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d90c      	bls.n	80042d2 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff f905 	bl	80034cc <pszTraceGetErrorNotEnoughHandles>
 80042c2:	0003      	movs	r3, r0
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f953 	bl	8004570 <prvTraceError>
		handle = 0;
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e031      	b.n	8004336 <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	4a22      	ldr	r2, [pc, #136]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042d8:	0059      	lsls	r1, r3, #1
 80042da:	5a8a      	ldrh	r2, [r1, r2]
 80042dc:	3201      	adds	r2, #1
 80042de:	b291      	uxth	r1, r2
 80042e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80042e6:	1dfb      	adds	r3, r7, #7
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042ec:	0052      	lsls	r2, r2, #1
 80042ee:	5ad3      	ldrh	r3, [r2, r3]
 80042f0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80042f2:	1dfb      	adds	r3, r7, #7
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 80042f8:	3308      	adds	r3, #8
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	3302      	adds	r3, #2
 8004300:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8004302:	1acb      	subs	r3, r1, r3
 8004304:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8004306:	1dfb      	adds	r3, r7, #7
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 800430c:	3318      	adds	r3, #24
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	3306      	adds	r3, #6
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	001a      	movs	r2, r3
		if (hndCount >
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4293      	cmp	r3, r2
 800431c:	dd0b      	ble.n	8004336 <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8004326:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8004328:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <prvTraceGetObjectHandle+0x158>)
 800432a:	3318      	adds	r3, #24
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	3306      	adds	r3, #6
 8004332:	1c0a      	adds	r2, r1, #0
 8004334:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8004336:	4b09      	ldr	r3, [pc, #36]	@ (800435c <prvTraceGetObjectHandle+0x154>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	4b07      	ldr	r3, [pc, #28]	@ (800435c <prvTraceGetObjectHandle+0x154>)
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			@ (mov r8, r8)

	return handle;
 800434c:	231f      	movs	r3, #31
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	781b      	ldrb	r3, [r3, #0]
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b009      	add	sp, #36	@ 0x24
 8004358:	bd90      	pop	{r4, r7, pc}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	20001db4 	.word	0x20001db4
 8004360:	20001dcc 	.word	0x20001dcc
 8004364:	20003200 	.word	0x20003200

08004368 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8004368:	b5b0      	push	{r4, r5, r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	0002      	movs	r2, r0
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	1dbb      	adds	r3, r7, #6
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800437a:	250e      	movs	r5, #14
 800437c:	197c      	adds	r4, r7, r5
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fef3 	bl	8004174 <uiIndexOfObject>
 800438e:	0003      	movs	r3, r0
 8004390:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <prvMarkObjectAsUsed+0x44>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	197b      	adds	r3, r7, r5
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2188      	movs	r1, #136	@ 0x88
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	185b      	adds	r3, r3, r1
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bdb0      	pop	{r4, r5, r7, pc}
 80043ac:	200031f8 	.word	0x200031f8

080043b0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e010      	b.n	80043e4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	18d2      	adds	r2, r2, r3
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	18cb      	adds	r3, r1, r3
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	18d3      	adds	r3, r2, r3
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3ea      	bcc.n	80043c2 <prvStrncpy+0x12>
			break;
	}
}
 80043ec:	e000      	b.n	80043f0 <prvStrncpy+0x40>
			break;
 80043ee:	46c0      	nop			@ (mov r8, r8)
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b006      	add	sp, #24
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	603a      	str	r2, [r7, #0]
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	1c02      	adds	r2, r0, #0
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	1c0a      	adds	r2, r1, #0
 800440a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8004412:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <prvTraceSetObjectName+0xbc>)
 8004414:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d904      	bls.n	8004428 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800441e:	4b26      	ldr	r3, [pc, #152]	@ (80044b8 <prvTraceSetObjectName+0xc0>)
 8004420:	0018      	movs	r0, r3
 8004422:	f000 f8a5 	bl	8004570 <prvTraceError>
		return;
 8004426:	e041      	b.n	80044ac <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8004430:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <prvTraceSetObjectName+0xc4>)
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f89c 	bl	8004570 <prvTraceError>
		return;
 8004438:	e038      	b.n	80044ac <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800443a:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <prvTraceSetObjectName+0xc8>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2150      	movs	r1, #80	@ 0x50
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	185b      	adds	r3, r3, r1
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	1dba      	adds	r2, r7, #6
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d909      	bls.n	8004466 <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8004452:	1dfb      	adds	r3, r7, #7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff f838 	bl	80034cc <pszTraceGetErrorNotEnoughHandles>
 800445c:	0003      	movs	r3, r0
 800445e:	0018      	movs	r0, r3
 8004460:	f000 f886 	bl	8004570 <prvTraceError>
 8004464:	e022      	b.n	80044ac <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8004466:	1dfb      	adds	r3, r7, #7
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	1dbb      	adds	r3, r7, #6
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	0011      	movs	r1, r2
 8004470:	0018      	movs	r0, r3
 8004472:	f7ff fe7f 	bl	8004174 <uiIndexOfObject>
 8004476:	0003      	movs	r3, r0
 8004478:	001a      	movs	r2, r3
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <prvTraceSetObjectName+0xcc>)
 800447c:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <prvTraceSetObjectName+0xd0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d112      	bne.n	80044ac <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004486:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <prvTraceSetObjectName+0xc8>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <prvTraceSetObjectName+0xcc>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	3388      	adds	r3, #136	@ 0x88
 8004490:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <prvTraceSetObjectName+0xc8>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	215c      	movs	r1, #92	@ 0x5c
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	185b      	adds	r3, r3, r1
 80044a0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80044a2:	001a      	movs	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	0019      	movs	r1, r3
 80044a8:	f7ff ff82 	bl	80043b0 <prvStrncpy>
		}
	}
}
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	08005e80 	.word	0x08005e80
 80044b8:	08005e84 	.word	0x08005e84
 80044bc:	08005eb4 	.word	0x08005eb4
 80044c0:	200031f8 	.word	0x200031f8
 80044c4:	20003204 	.word	0x20003204
 80044c8:	20001e30 	.word	0x20001e30

080044cc <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 80044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ce:	b089      	sub	sp, #36	@ 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 80044d6:	240b      	movs	r4, #11
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
	crc = 0;
 80044de:	250a      	movs	r5, #10
 80044e0:	197b      	adds	r3, r7, r5
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 80044e6:	193a      	adds	r2, r7, r4
 80044e8:	1979      	adds	r1, r7, r5
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 fb67 	bl	8004bc0 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f2:	f3ef 8310 	mrs	r3, PRIMASK
 80044f6:	613b      	str	r3, [r7, #16]
  return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	4b18      	ldr	r3, [pc, #96]	@ (800456c <prvTraceOpenSymbol+0xa0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	4b17      	ldr	r3, [pc, #92]	@ (800456c <prvTraceOpenSymbol+0xa0>)
 8004510:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8004512:	197b      	adds	r3, r7, r5
 8004514:	7819      	ldrb	r1, [r3, #0]
 8004516:	193b      	adds	r3, r7, r4
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9f1 	bl	8004904 <prvTraceLookupSymbolTableEntry>
 8004522:	0002      	movs	r2, r0
 8004524:	261e      	movs	r6, #30
 8004526:	19bb      	adds	r3, r7, r6
 8004528:	801a      	strh	r2, [r3, #0]
	if (!result)
 800452a:	19bb      	adds	r3, r7, r6
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8004532:	197b      	adds	r3, r7, r5
 8004534:	7819      	ldrb	r1, [r3, #0]
 8004536:	193b      	adds	r3, r7, r4
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa6b 	bl	8004a18 <prvTraceCreateSymbolTableEntry>
 8004542:	0002      	movs	r2, r0
 8004544:	19bb      	adds	r3, r7, r6
 8004546:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 8004548:	4b08      	ldr	r3, [pc, #32]	@ (800456c <prvTraceOpenSymbol+0xa0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1e5a      	subs	r2, r3, #1
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <prvTraceOpenSymbol+0xa0>)
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			@ (mov r8, r8)

	return result;
 800455e:	231e      	movs	r3, #30
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	881b      	ldrh	r3, [r3, #0]
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	b009      	add	sp, #36	@ 0x24
 800456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800456c:	20001db4 	.word	0x20001db4

08004570 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8004578:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <prvTraceError+0x54>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <prvTraceError+0x14>
	{
		xTraceDisable();
 8004580:	f7ff f816 	bl	80035b0 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8004584:	4b10      	ldr	r3, [pc, #64]	@ (80045c8 <prvTraceError+0x58>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d117      	bne.n	80045bc <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 800458c:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <prvTraceError+0x58>)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 8004592:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <prvTraceError+0x54>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <prvTraceError+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	22f0      	movs	r2, #240	@ 0xf0
 80045a0:	0092      	lsls	r2, r2, #2
 80045a2:	1898      	adds	r0, r3, r2
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <prvTraceError+0x58>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2250      	movs	r2, #80	@ 0x50
 80045aa:	0019      	movs	r1, r3
 80045ac:	f7ff ff00 	bl	80043b0 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <prvTraceError+0x54>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	23ee      	movs	r3, #238	@ 0xee
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	2101      	movs	r1, #1
 80045ba:	50d1      	str	r1, [r2, r3]
		}
	}
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200031f8 	.word	0x200031f8
 80045c8:	20001e30 	.word	0x20001e30

080045cc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80045e0:	e080      	b.n	80046e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80045e2:	4b46      	ldr	r3, [pc, #280]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	18d3      	adds	r3, r2, r3
 80045ec:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4942      	ldr	r1, [pc, #264]	@ (8004700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80045f8:	18d3      	adds	r3, r2, r3
 80045fa:	185b      	adds	r3, r3, r1
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b98      	cmp	r3, #152	@ 0x98
 8004600:	d931      	bls.n	8004666 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8004602:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	493d      	ldr	r1, [pc, #244]	@ (8004700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	185b      	adds	r3, r3, r1
 8004610:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004612:	2ba7      	cmp	r3, #167	@ 0xa7
 8004614:	d827      	bhi.n	8004666 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8004616:	4b39      	ldr	r3, [pc, #228]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4938      	ldr	r1, [pc, #224]	@ (8004700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004620:	18d3      	adds	r3, r2, r3
 8004622:	185b      	adds	r3, r3, r1
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	210f      	movs	r1, #15
 8004628:	187b      	adds	r3, r7, r1
 800462a:	3268      	adds	r2, #104	@ 0x68
 800462c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800462e:	187b      	adds	r3, r7, r1
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	18d2      	adds	r2, r2, r3
 8004636:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d24d      	bcs.n	80046dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004640:	4b2e      	ldr	r3, [pc, #184]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	2082      	movs	r0, #130	@ 0x82
 800464a:	00c0      	lsls	r0, r0, #3
 800464c:	4684      	mov	ip, r0
 800464e:	4463      	add	r3, ip
 8004650:	18d3      	adds	r3, r2, r3
 8004652:	1d18      	adds	r0, r3, #4
 8004654:	187b      	adds	r3, r7, r1
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	001a      	movs	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	f001 f8ea 	bl	8005838 <memset>
		{
 8004664:	e03a      	b.n	80046dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8004666:	4b25      	ldr	r3, [pc, #148]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4924      	ldr	r1, [pc, #144]	@ (8004700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004670:	18d3      	adds	r3, r2, r3
 8004672:	185b      	adds	r3, r3, r1
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d131      	bne.n	80046de <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	4b1f      	ldr	r3, [pc, #124]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	d20f      	bcs.n	80046a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8004688:	4b1c      	ldr	r3, [pc, #112]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	2182      	movs	r1, #130	@ 0x82
 8004692:	00c9      	lsls	r1, r1, #3
 8004694:	468c      	mov	ip, r1
 8004696:	4463      	add	r3, ip
 8004698:	18d3      	adds	r3, r2, r3
 800469a:	3304      	adds	r3, #4
 800469c:	2208      	movs	r2, #8
 800469e:	2100      	movs	r1, #0
 80046a0:	0018      	movs	r0, r3
 80046a2:	f001 f8c9 	bl	8005838 <memset>
 80046a6:	e01a      	b.n	80046de <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80046a8:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a14      	ldr	r2, [pc, #80]	@ (8004700 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80046ae:	4694      	mov	ip, r2
 80046b0:	4463      	add	r3, ip
 80046b2:	2204      	movs	r2, #4
 80046b4:	2100      	movs	r1, #0
 80046b6:	0018      	movs	r0, r3
 80046b8:	f001 f8be 	bl	8005838 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80046bc:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	2182      	movs	r1, #130	@ 0x82
 80046c6:	00c9      	lsls	r1, r1, #3
 80046c8:	468c      	mov	ip, r1
 80046ca:	4463      	add	r3, ip
 80046cc:	18d3      	adds	r3, r2, r3
 80046ce:	3304      	adds	r3, #4
 80046d0:	2204      	movs	r2, #4
 80046d2:	2100      	movs	r1, #0
 80046d4:	0018      	movs	r0, r3
 80046d6:	f001 f8af 	bl	8005838 <memset>
 80046da:	e000      	b.n	80046de <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 80046dc:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 80046e4:	1dfb      	adds	r3, r7, #7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d200      	bcs.n	80046f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 80046ee:	e778      	b.n	80045e2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b006      	add	sp, #24
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	200031f8 	.word	0x200031f8
 8004700:	00000414 	.word	0x00000414

08004704 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01c      	beq.n	800474c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	3201      	adds	r2, #1
 800471a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	3201      	adds	r2, #1
 8004724:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	23fa      	movs	r3, #250	@ 0xfa
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	429a      	cmp	r2, r3
 8004732:	d307      	bcc.n	8004744 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8004734:	4b07      	ldr	r3, [pc, #28]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <prvTraceUpdateCounters+0x50>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004744:	2001      	movs	r0, #1
 8004746:	f7ff ff41 	bl	80045cc <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800474a:	e000      	b.n	800474e <prvTraceUpdateCounters+0x4a>
		return;
 800474c:	46c0      	nop			@ (mov r8, r8)
#endif
}
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	200031f8 	.word	0x200031f8

08004758 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	0002      	movs	r2, r0
 8004760:	1dbb      	adds	r3, r7, #6
 8004762:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8004770:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 800477a:	4b5b      	ldr	r3, [pc, #364]	@ (80048e8 <prvTraceGetDTS+0x190>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8004782:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <prvTraceGetDTS+0x190>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b57      	ldr	r3, [pc, #348]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	0892      	lsrs	r2, r2, #2
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
 800478e:	e00b      	b.n	80047a8 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004790:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <prvTraceGetDTS+0x194>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b56      	ldr	r3, [pc, #344]	@ (80048f0 <prvTraceGetDTS+0x198>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d005      	beq.n	80047a8 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800479c:	4b55      	ldr	r3, [pc, #340]	@ (80048f4 <prvTraceGetDTS+0x19c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b50      	ldr	r3, [pc, #320]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0892      	lsrs	r2, r2, #2
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80047a8:	230c      	movs	r3, #12
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 fa39 	bl	8004c24 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4b50      	ldr	r3, [pc, #320]	@ (80048f8 <prvTraceGetDTS+0x1a0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b4e      	ldr	r3, [pc, #312]	@ (80048f8 <prvTraceGetDTS+0x1a0>)
 80047c0:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 80047c2:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d047      	beq.n	800485c <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80047cc:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d921      	bls.n	800481c <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80047d8:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	0019      	movs	r1, r3
 80047e6:	6938      	ldr	r0, [r7, #16]
 80047e8:	f7fb fc8e 	bl	8000108 <__udivsi3>
 80047ec:	0003      	movs	r3, r0
 80047ee:	001a      	movs	r2, r3
 80047f0:	4b3c      	ldr	r3, [pc, #240]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	18a2      	adds	r2, r4, r2
 80047f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80047f8:	4b3a      	ldr	r3, [pc, #232]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f7fb fd03 	bl	8000214 <__aeabi_uidivmod>
 800480e:	000b      	movs	r3, r1
 8004810:	001a      	movs	r2, r3
 8004812:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	18a2      	adds	r2, r4, r2
 8004818:	629a      	str	r2, [r3, #40]	@ 0x28
 800481a:	e007      	b.n	800482c <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800481c:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004822:	4b30      	ldr	r3, [pc, #192]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	188a      	adds	r2, r1, r2
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800482c:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004832:	4b2c      	ldr	r3, [pc, #176]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	429a      	cmp	r2, r3
 800483a:	d313      	bcc.n	8004864 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800483c:	4b29      	ldr	r3, [pc, #164]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	3201      	adds	r2, #1
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8004846:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800484c:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	1a8a      	subs	r2, r1, r2
 8004858:	629a      	str	r2, [r3, #40]	@ 0x28
 800485a:	e003      	b.n	8004864 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800485c:	4b21      	ldr	r3, [pc, #132]	@ (80048e4 <prvTraceGetDTS+0x18c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	429a      	cmp	r2, r3
 800486c:	d92f      	bls.n	80048ce <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800486e:	f7ff fc57 	bl	8004120 <prvTraceNextFreeEventBufferSlot>
 8004872:	0003      	movs	r3, r0
 8004874:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d028      	beq.n	80048ce <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 800487c:	1dbb      	adds	r3, r7, #6
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <prvTraceGetDTS+0x1a4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10b      	bne.n	800489e <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	22a9      	movs	r2, #169	@ 0xa9
 800488a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	b29a      	uxth	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	705a      	strb	r2, [r3, #1]
 800489c:	e015      	b.n	80048ca <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 800489e:	1dbb      	adds	r3, r7, #6
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	2bff      	cmp	r3, #255	@ 0xff
 80048a4:	d10d      	bne.n	80048c2 <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	22a8      	movs	r2, #168	@ 0xa8
 80048aa:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	705a      	strb	r2, [r3, #1]
 80048c0:	e003      	b.n	80048ca <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80048c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <prvTraceGetDTS+0x1a8>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff fe53 	bl	8004570 <prvTraceError>
			}
			prvTraceUpdateCounters();
 80048ca:	f7ff ff1b 	bl	8004704 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1dba      	adds	r2, r7, #6
 80048d4:	8812      	ldrh	r2, [r2, #0]
 80048d6:	4013      	ands	r3, r2
 80048d8:	b29b      	uxth	r3, r3
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b007      	add	sp, #28
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	200031f8 	.word	0x200031f8
 80048e8:	20001db8 	.word	0x20001db8
 80048ec:	e000e018 	.word	0xe000e018
 80048f0:	20001dc4 	.word	0x20001dc4
 80048f4:	20000014 	.word	0x20000014
 80048f8:	20003208 	.word	0x20003208
 80048fc:	0000ffff 	.word	0x0000ffff
 8004900:	08005ee4 	.word	0x08005ee4

08004904 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	0008      	movs	r0, r1
 800490e:	0011      	movs	r1, r2
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	240b      	movs	r4, #11
 8004914:	193b      	adds	r3, r7, r4
 8004916:	1c02      	adds	r2, r0, #0
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	230a      	movs	r3, #10
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	1c0a      	adds	r2, r1, #0
 8004920:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004922:	4b3c      	ldr	r3, [pc, #240]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	193b      	adds	r3, r7, r4
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	2316      	movs	r3, #22
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	3299      	adds	r2, #153	@ 0x99
 8004930:	32ff      	adds	r2, #255	@ 0xff
 8004932:	0052      	lsls	r2, r2, #1
 8004934:	188a      	adds	r2, r1, r2
 8004936:	3204      	adds	r2, #4
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 800493c:	e05c      	b.n	80049f8 <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 800493e:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	2016      	movs	r0, #22
 8004944:	183b      	adds	r3, r7, r0
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	239b      	movs	r3, #155	@ 0x9b
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	188a      	adds	r2, r1, r2
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	22ff      	movs	r2, #255	@ 0xff
 800495a:	4013      	ands	r3, r2
 800495c:	4299      	cmp	r1, r3
 800495e:	d131      	bne.n	80049c4 <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8004960:	4b2c      	ldr	r3, [pc, #176]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	183b      	adds	r3, r7, r0
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	1cda      	adds	r2, r3, #3
 800496a:	239b      	movs	r3, #155	@ 0x9b
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	188a      	adds	r2, r1, r2
 8004970:	18d3      	adds	r3, r2, r3
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	001a      	movs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	429a      	cmp	r2, r3
 800497c:	d122      	bne.n	80049c4 <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 800497e:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	183b      	adds	r3, r7, r0
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	240a      	movs	r4, #10
 800498a:	193b      	adds	r3, r7, r4
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	18d2      	adds	r2, r2, r3
 8004990:	239b      	movs	r3, #155	@ 0x9b
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	188a      	adds	r2, r1, r2
 8004996:	18d3      	adds	r3, r2, r3
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d112      	bne.n	80049c4 <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 800499e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	3304      	adds	r3, #4
 80049a8:	219a      	movs	r1, #154	@ 0x9a
 80049aa:	0089      	lsls	r1, r1, #2
 80049ac:	468c      	mov	ip, r1
 80049ae:	4463      	add	r3, ip
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	1d18      	adds	r0, r3, #4
 80049b4:	193b      	adds	r3, r7, r4
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	0019      	movs	r1, r3
 80049bc:	f000 ff44 	bl	8005848 <strncmp>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d01f      	beq.n	8004a04 <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 80049c4:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	2416      	movs	r4, #22
 80049ca:	193b      	adds	r3, r7, r4
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	239b      	movs	r3, #155	@ 0x9b
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	188a      	adds	r2, r1, r2
 80049d4:	18d3      	adds	r3, r2, r3
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0018      	movs	r0, r3
 80049da:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <prvTraceLookupSymbolTableEntry+0x110>)
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	193b      	adds	r3, r7, r4
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	239b      	movs	r3, #155	@ 0x9b
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	188a      	adds	r2, r1, r2
 80049ea:	18d3      	adds	r3, r2, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	1882      	adds	r2, r0, r2
 80049f6:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 80049f8:	2316      	movs	r3, #22
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d19d      	bne.n	800493e <prvTraceLookupSymbolTableEntry+0x3a>
 8004a02:	e000      	b.n	8004a06 <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 8004a04:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 8004a06:	2316      	movs	r3, #22
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	881b      	ldrh	r3, [r3, #0]
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b007      	add	sp, #28
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	200031f8 	.word	0x200031f8

08004a18 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 8004a18:	b5b0      	push	{r4, r5, r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	0008      	movs	r0, r1
 8004a22:	0011      	movs	r1, r2
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	230b      	movs	r3, #11
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	1c02      	adds	r2, r0, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	200a      	movs	r0, #10
 8004a30:	183b      	adds	r3, r7, r0
 8004a32:	1c0a      	adds	r2, r1, #0
 8004a34:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	239a      	movs	r3, #154	@ 0x9a
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	58d2      	ldr	r2, [r2, r3]
 8004a44:	183b      	adds	r3, r7, r0
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	18d3      	adds	r3, r2, r3
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a4e:	d906      	bls.n	8004a5e <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8004a50:	4b5a      	ldr	r3, [pc, #360]	@ (8004bbc <prvTraceCreateSymbolTableEntry+0x1a4>)
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff fd8c 	bl	8004570 <prvTraceError>
		ret = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e0a7      	b.n	8004bae <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004a5e:	4b56      	ldr	r3, [pc, #344]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	250b      	movs	r5, #11
 8004a64:	197b      	adds	r3, r7, r5
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	3399      	adds	r3, #153	@ 0x99
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	18d3      	adds	r3, r2, r3
 8004a70:	3304      	adds	r3, #4
 8004a72:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 8004a74:	4b50      	ldr	r3, [pc, #320]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004a76:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8004a78:	4b4f      	ldr	r3, [pc, #316]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	239a      	movs	r3, #154	@ 0x9a
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004a82:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8004a84:	239b      	movs	r3, #155	@ 0x9b
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	188a      	adds	r2, r1, r2
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	1c02      	adds	r2, r0, #0
 8004a8e:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8004a90:	4b49      	ldr	r3, [pc, #292]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	197b      	adds	r3, r7, r5
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	3399      	adds	r3, #153	@ 0x99
 8004a9a:	33ff      	adds	r3, #255	@ 0xff
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	18d3      	adds	r3, r2, r3
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 8004aa8:	4b43      	ldr	r3, [pc, #268]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004aaa:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8004aac:	4b42      	ldr	r3, [pc, #264]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	239a      	movs	r3, #154	@ 0x9a
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	58d3      	ldr	r3, [r2, r3]
 8004ab6:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8004ab8:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 8004aba:	239b      	movs	r3, #155	@ 0x9b
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	188a      	adds	r2, r1, r2
 8004ac0:	18d3      	adds	r3, r2, r3
 8004ac2:	1c02      	adds	r2, r0, #0
 8004ac4:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 8004ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004ac8:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8004aca:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	239a      	movs	r3, #154	@ 0x9a
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	58d3      	ldr	r3, [r2, r3]
 8004ad4:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 8004ada:	239b      	movs	r3, #155	@ 0x9b
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	188a      	adds	r2, r1, r2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	1c02      	adds	r2, r0, #0
 8004ae4:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 8004aea:	4b33      	ldr	r3, [pc, #204]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004aec:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8004aee:	4b32      	ldr	r3, [pc, #200]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	239a      	movs	r3, #154	@ 0x9a
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	58d3      	ldr	r3, [r2, r3]
 8004af8:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 8004afa:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8004afc:	239b      	movs	r3, #155	@ 0x9b
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	188a      	adds	r2, r1, r2
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	1c02      	adds	r2, r0, #0
 8004b06:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004b08:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	239a      	movs	r3, #154	@ 0x9a
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	58cb      	ldr	r3, [r1, r3]
 8004b16:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004b18:	219a      	movs	r1, #154	@ 0x9a
 8004b1a:	0089      	lsls	r1, r1, #2
 8004b1c:	468c      	mov	ip, r1
 8004b1e:	4463      	add	r3, ip
 8004b20:	18d3      	adds	r3, r2, r3
 8004b22:	1d18      	adds	r0, r3, #4
 8004b24:	240a      	movs	r4, #10
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	f7ff fc3f 	bl	80043b0 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8004b32:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b34:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8004b36:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	239a      	movs	r3, #154	@ 0x9a
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	58d2      	ldr	r2, [r2, r3]
 8004b40:	0020      	movs	r0, r4
 8004b42:	183b      	adds	r3, r7, r0
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	18d3      	adds	r3, r2, r3
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	239b      	movs	r3, #155	@ 0x9b
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	188a      	adds	r2, r1, r2
 8004b50:	18d3      	adds	r3, r2, r3
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004b56:	4b18      	ldr	r3, [pc, #96]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	239a      	movs	r3, #154	@ 0x9a
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 8004b60:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b62:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004b64:	197b      	adds	r3, r7, r5
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b289      	uxth	r1, r1
 8004b6a:	3399      	adds	r3, #153	@ 0x99
 8004b6c:	33ff      	adds	r3, #255	@ 0xff
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	3304      	adds	r3, #4
 8004b74:	1c0a      	adds	r2, r1, #0
 8004b76:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8004b78:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	239a      	movs	r3, #154	@ 0x9a
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	58d2      	ldr	r2, [r2, r3]
 8004b82:	183b      	adds	r3, r7, r0
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	18d1      	adds	r1, r2, r3
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	3105      	adds	r1, #5
 8004b8e:	239a      	movs	r3, #154	@ 0x9a
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8004b94:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <prvTraceCreateSymbolTableEntry+0x1a0>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	239a      	movs	r3, #154	@ 0x9a
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	58d3      	ldr	r3, [r2, r3]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	183a      	adds	r2, r7, r0
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	3205      	adds	r2, #5
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8004bae:	697b      	ldr	r3, [r7, #20]
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b006      	add	sp, #24
 8004bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb8:	200031f8 	.word	0x200031f8
 8004bbc:	08005f08 	.word	0x08005f08

08004bc0 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8004bcc:	2301      	movs	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 8004bda:	e008      	b.n	8004bee <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8004bdc:	2317      	movs	r3, #23
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	18d3      	adds	r3, r2, r3
 8004be6:	61bb      	str	r3, [r7, #24]
			length++;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	60fa      	str	r2, [r7, #12]
 8004bf4:	2117      	movs	r1, #23
 8004bf6:	187a      	adds	r2, r7, r1
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	7013      	strb	r3, [r2, #0]
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1eb      	bne.n	8004bdc <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	223f      	movs	r2, #63	@ 0x3f
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	701a      	strb	r2, [r3, #0]
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b008      	add	sp, #32
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004c34:	4b2d      	ldr	r3, [pc, #180]	@ (8004cec <prvTracePortGetTimeStamp+0xc8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d107      	bne.n	8004c4c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04f      	beq.n	8004ce2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8004c42:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf0 <prvTracePortGetTimeStamp+0xcc>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
		return;
 8004c4a:	e04a      	b.n	8004ce2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8004c4c:	4b29      	ldr	r3, [pc, #164]	@ (8004cf4 <prvTracePortGetTimeStamp+0xd0>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <prvTracePortGetTimeStamp+0xd4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8004c5a:	4b28      	ldr	r3, [pc, #160]	@ (8004cfc <prvTracePortGetTimeStamp+0xd8>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <prvTracePortGetTimeStamp+0xdc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db03      	blt.n	8004c72 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <prvTracePortGetTimeStamp+0xd8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8004c72:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <prvTracePortGetTimeStamp+0xdc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8004c78:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <prvTracePortGetTimeStamp+0xd8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d107      	bne.n	8004c92 <prvTracePortGetTimeStamp+0x6e>
 8004c82:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <prvTracePortGetTimeStamp+0xe0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d202      	bcs.n	8004c92 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8004c98:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <prvTracePortGetTimeStamp+0xd0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	435a      	muls	r2, r3
 8004ca4:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <prvTracePortGetTimeStamp+0xcc>)
 8004ca6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <prvTracePortGetTimeStamp+0xd0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	435a      	muls	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	089a      	lsrs	r2, r3, #2
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf0 <prvTracePortGetTimeStamp+0xcc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	18d2      	adds	r2, r2, r3
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <prvTracePortGetTimeStamp+0xcc>)
 8004cc4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <prvTracePortGetTimeStamp+0xd8>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <prvTracePortGetTimeStamp+0xcc>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8004cda:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <prvTracePortGetTimeStamp+0xe0>)
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e000      	b.n	8004ce4 <prvTracePortGetTimeStamp+0xc0>
		return;
 8004ce2:	46c0      	nop			@ (mov r8, r8)
}
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b004      	add	sp, #16
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	20001da8 	.word	0x20001da8
 8004cf0:	20001dac 	.word	0x20001dac
 8004cf4:	e000e014 	.word	0xe000e014
 8004cf8:	e000e018 	.word	0xe000e018
 8004cfc:	2000320c 	.word	0x2000320c
 8004d00:	20001da4 	.word	0x20001da4
 8004d04:	20003210 	.word	0x20003210

08004d08 <main>:
// Define the message_t type as an array of 60 char
typedef uint8_t message_t[64];		// typedef uint8_t msg_t[64];

// Main function
int main()
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8004d0e:	f000 f8ff 	bl	8004f10 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8004d12:	f000 fbdf 	bl	80054d4 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8004d16:	f000 fc29 	bl	800556c <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8004d1a:	f000 fc75 	bl	8005608 <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8004d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004e98 <main+0x190>)
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 fb91 	bl	8005448 <my_printf>

	// Initialize NVIC
	//BSP_NVIC_Init();

	// Start Trace Recording
	vTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 8004d26:	2001      	movs	r0, #1
 8004d28:	f7fe fc0c 	bl	8003544 <xTraceEnable>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8004d2c:	f7fe f940 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004d30:	0003      	movs	r3, r0
 8004d32:	607b      	str	r3, [r7, #4]
	my_printf("\r\nFree Heap Size is %d bytes\r\n", free_heap_size);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <main+0x194>)
 8004d38:	0011      	movs	r1, r2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fb84 	bl	8005448 <my_printf>


	// Create Semaphore object (this is not a 'give')
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8004d40:	4b57      	ldr	r3, [pc, #348]	@ (8004ea0 <main+0x198>)
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 fb80 	bl	8005448 <my_printf>
	xSem = xSemaphoreCreateBinary();
 8004d48:	2203      	movs	r2, #3
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7fb fb79 	bl	8000444 <xQueueGenericCreate>
 8004d52:	0002      	movs	r2, r0
 8004d54:	4b53      	ldr	r3, [pc, #332]	@ (8004ea4 <main+0x19c>)
 8004d56:	601a      	str	r2, [r3, #0]
	vTraceSetSemaphoreName(xSem, "xSEM");
 8004d58:	4b52      	ldr	r3, [pc, #328]	@ (8004ea4 <main+0x19c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a52      	ldr	r2, [pc, #328]	@ (8004ea8 <main+0x1a0>)
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fe fa22 	bl	80031aa <vTraceSetSemaphoreName>
	free_heap_size = xPortGetFreeHeapSize();
 8004d66:	f7fe f923 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4b4e      	ldr	r3, [pc, #312]	@ (8004eac <main+0x1a4>)
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 fb67 	bl	8005448 <my_printf>

	// Create Queue to hold console messages
	my_printf("\r\nNow creating Message Queue...\r\n");
 8004d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb0 <main+0x1a8>)
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 fb63 	bl	8005448 <my_printf>
	xConsoleQueue = xQueueCreate(4, sizeof(message_t));
 8004d82:	2200      	movs	r2, #0
 8004d84:	2140      	movs	r1, #64	@ 0x40
 8004d86:	2004      	movs	r0, #4
 8004d88:	f7fb fb5c 	bl	8000444 <xQueueGenericCreate>
 8004d8c:	0002      	movs	r2, r0
 8004d8e:	4b49      	ldr	r3, [pc, #292]	@ (8004eb4 <main+0x1ac>)
 8004d90:	601a      	str	r2, [r3, #0]
	vTraceSetQueueName(xConsoleQueue, "Console Queue");
 8004d92:	4b48      	ldr	r3, [pc, #288]	@ (8004eb4 <main+0x1ac>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a48      	ldr	r2, [pc, #288]	@ (8004eb8 <main+0x1b0>)
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fe f9f1 	bl	8003182 <vTraceSetQueueName>
	free_heap_size = xPortGetFreeHeapSize();
 8004da0:	f7fe f906 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004da4:	0003      	movs	r3, r0
 8004da6:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4b40      	ldr	r3, [pc, #256]	@ (8004eac <main+0x1a4>)
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f000 fb4a 	bl	8005448 <my_printf>

	// Create a Mutex for accessing the console
	my_printf("\r\nNow creating Mutex...\r\n");
 8004db4:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <main+0x1b4>)
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fb46 	bl	8005448 <my_printf>
	xConsoleMutex = xSemaphoreCreateMutex();
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	f7fb fc81 	bl	80006c4 <xQueueCreateMutex>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec0 <main+0x1b8>)
 8004dc6:	601a      	str	r2, [r3, #0]
	vTraceSetMutexName(xConsoleMutex, "Console Mutex");
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec0 <main+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec4 <main+0x1bc>)
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fe f9fe 	bl	80031d2 <vTraceSetMutexName>
	free_heap_size = xPortGetFreeHeapSize();
 8004dd6:	f7fe f8eb 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4b32      	ldr	r3, [pc, #200]	@ (8004eac <main+0x1a4>)
 8004de2:	0011      	movs	r1, r2
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 fb2f 	bl	8005448 <my_printf>

	// Register the Trace User Event Channels
	my_printf("\r\nNow registering Trace events...\r\n");
 8004dea:	4b37      	ldr	r3, [pc, #220]	@ (8004ec8 <main+0x1c0>)
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 fb2b 	bl	8005448 <my_printf>
	ue1 = xTraceRegisterString("ticks");
 8004df2:	4b36      	ldr	r3, [pc, #216]	@ (8004ecc <main+0x1c4>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fe fc85 	bl	8003704 <xTraceRegisterString>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <main+0x1c8>)
 8004dfe:	601a      	str	r2, [r3, #0]
	ue2 = xTraceRegisterString("msg");
 8004e00:	4b34      	ldr	r3, [pc, #208]	@ (8004ed4 <main+0x1cc>)
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fe fc7e 	bl	8003704 <xTraceRegisterString>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <main+0x1d0>)
 8004e0c:	601a      	str	r2, [r3, #0]
	ue3 = xTraceRegisterString("HWM");
 8004e0e:	4b33      	ldr	r3, [pc, #204]	@ (8004edc <main+0x1d4>)
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7fe fc77 	bl	8003704 <xTraceRegisterString>
 8004e16:	0002      	movs	r2, r0
 8004e18:	4b31      	ldr	r3, [pc, #196]	@ (8004ee0 <main+0x1d8>)
 8004e1a:	601a      	str	r2, [r3, #0]
	free_heap_size = xPortGetFreeHeapSize();
 8004e1c:	f7fe f8c8 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004e20:	0003      	movs	r3, r0
 8004e22:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	4b21      	ldr	r3, [pc, #132]	@ (8004eac <main+0x1a4>)
 8004e28:	0011      	movs	r1, r2
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 fb0c 	bl	8005448 <my_printf>

	// Create Tasks
	my_printf("\r\nNow creating Tasks...\r\n");
 8004e30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee4 <main+0x1dc>)
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fb08 	bl	8005448 <my_printf>
	xTaskCreate(vTask1,	"Task_1",	128, NULL, 2, &vTask1_handle);
 8004e38:	492b      	ldr	r1, [pc, #172]	@ (8004ee8 <main+0x1e0>)
 8004e3a:	482c      	ldr	r0, [pc, #176]	@ (8004eec <main+0x1e4>)
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef0 <main+0x1e8>)
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	2302      	movs	r3, #2
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	2280      	movs	r2, #128	@ 0x80
 8004e48:	f7fc faff 	bl	800144a <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2",	128, NULL, 3, &vTask2_handle);
 8004e4c:	4929      	ldr	r1, [pc, #164]	@ (8004ef4 <main+0x1ec>)
 8004e4e:	482a      	ldr	r0, [pc, #168]	@ (8004ef8 <main+0x1f0>)
 8004e50:	4b2a      	ldr	r3, [pc, #168]	@ (8004efc <main+0x1f4>)
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2303      	movs	r3, #3
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2280      	movs	r2, #128	@ 0x80
 8004e5c:	f7fc faf5 	bl	800144a <xTaskCreate>
	xTaskCreate(vTaskHWM,	"Task_HWM",	128, NULL, 1, &vTaskHWM_handle);
 8004e60:	4927      	ldr	r1, [pc, #156]	@ (8004f00 <main+0x1f8>)
 8004e62:	4828      	ldr	r0, [pc, #160]	@ (8004f04 <main+0x1fc>)
 8004e64:	4b28      	ldr	r3, [pc, #160]	@ (8004f08 <main+0x200>)
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	f7fc faeb 	bl	800144a <xTaskCreate>
	free_heap_size = xPortGetFreeHeapSize();
 8004e74:	f7fe f89c 	bl	8002fb0 <xPortGetFreeHeapSize>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <main+0x1a4>)
 8004e80:	0011      	movs	r1, r2
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 fae0 	bl	8005448 <my_printf>

	// Give a nice name to the Queue in the trace recorder
	// vTraceSetQueueName(xConsoleQueue, "Console Queue");

	// Start the Scheduler
	my_printf("\r\nNow Starting Scheduler...\r\n");
 8004e88:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <main+0x204>)
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f000 fadc 	bl	8005448 <my_printf>
	vTaskStartScheduler();
 8004e90:	f7fc fd1c 	bl	80018cc <vTaskStartScheduler>

	while(1)
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	e7fd      	b.n	8004e94 <main+0x18c>
 8004e98:	08005f50 	.word	0x08005f50
 8004e9c:	08005f64 	.word	0x08005f64
 8004ea0:	08005f84 	.word	0x08005f84
 8004ea4:	20003220 	.word	0x20003220
 8004ea8:	08005fac 	.word	0x08005fac
 8004eac:	08005fb4 	.word	0x08005fb4
 8004eb0:	08005fd4 	.word	0x08005fd4
 8004eb4:	20003228 	.word	0x20003228
 8004eb8:	08005ff8 	.word	0x08005ff8
 8004ebc:	08006008 	.word	0x08006008
 8004ec0:	20003224 	.word	0x20003224
 8004ec4:	08006024 	.word	0x08006024
 8004ec8:	08006034 	.word	0x08006034
 8004ecc:	08006058 	.word	0x08006058
 8004ed0:	2000322c 	.word	0x2000322c
 8004ed4:	08006060 	.word	0x08006060
 8004ed8:	20003230 	.word	0x20003230
 8004edc:	08006064 	.word	0x08006064
 8004ee0:	20003234 	.word	0x20003234
 8004ee4:	08006068 	.word	0x08006068
 8004ee8:	08006084 	.word	0x08006084
 8004eec:	08005045 	.word	0x08005045
 8004ef0:	20003214 	.word	0x20003214
 8004ef4:	0800608c 	.word	0x0800608c
 8004ef8:	08005055 	.word	0x08005055
 8004efc:	20003218 	.word	0x20003218
 8004f00:	08006094 	.word	0x08006094
 8004f04:	08005065 	.word	0x08005065
 8004f08:	2000321c 	.word	0x2000321c
 8004f0c:	080060a0 	.word	0x080060a0

08004f10 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8004f1a:	4b44      	ldr	r3, [pc, #272]	@ (800502c <SystemClock_Config+0x11c>)
 8004f1c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8004f1e:	4b44      	ldr	r3, [pc, #272]	@ (8005030 <SystemClock_Config+0x120>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b43      	ldr	r3, [pc, #268]	@ (8005030 <SystemClock_Config+0x120>)
 8004f24:	2180      	movs	r1, #128	@ 0x80
 8004f26:	02c9      	lsls	r1, r1, #11
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8004f2c:	4b40      	ldr	r3, [pc, #256]	@ (8005030 <SystemClock_Config+0x120>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <SystemClock_Config+0x120>)
 8004f32:	2180      	movs	r1, #128	@ 0x80
 8004f34:	0249      	lsls	r1, r1, #9
 8004f36:	430a      	orrs	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005030 <SystemClock_Config+0x120>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	4013      	ands	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]
		timeout--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <SystemClock_Config+0x48>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8004f58:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <SystemClock_Config+0x120>)
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4b34      	ldr	r3, [pc, #208]	@ (8005030 <SystemClock_Config+0x120>)
 8004f5e:	4935      	ldr	r1, [pc, #212]	@ (8005034 <SystemClock_Config+0x124>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8004f64:	4b32      	ldr	r3, [pc, #200]	@ (8005030 <SystemClock_Config+0x120>)
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b31      	ldr	r3, [pc, #196]	@ (8005030 <SystemClock_Config+0x120>)
 8004f6a:	2180      	movs	r1, #128	@ 0x80
 8004f6c:	0249      	lsls	r1, r1, #9
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8004f72:	4b2f      	ldr	r3, [pc, #188]	@ (8005030 <SystemClock_Config+0x120>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004f78:	4b2d      	ldr	r3, [pc, #180]	@ (8005030 <SystemClock_Config+0x120>)
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005030 <SystemClock_Config+0x120>)
 8004f7e:	492e      	ldr	r1, [pc, #184]	@ (8005038 <SystemClock_Config+0x128>)
 8004f80:	400a      	ands	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8004f84:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <SystemClock_Config+0x120>)
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4b29      	ldr	r3, [pc, #164]	@ (8005030 <SystemClock_Config+0x120>)
 8004f8a:	2180      	movs	r1, #128	@ 0x80
 8004f8c:	0349      	lsls	r1, r1, #13
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8004f92:	4b27      	ldr	r3, [pc, #156]	@ (8005030 <SystemClock_Config+0x120>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b26      	ldr	r3, [pc, #152]	@ (8005030 <SystemClock_Config+0x120>)
 8004f98:	2180      	movs	r1, #128	@ 0x80
 8004f9a:	0449      	lsls	r1, r1, #17
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004fa0:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <SystemClock_Config+0x120>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	049b      	lsls	r3, r3, #18
 8004fa8:	4013      	ands	r3, r2
 8004faa:	607b      	str	r3, [r7, #4]
		timeout--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <SystemClock_Config+0xae>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005030 <SystemClock_Config+0x120>)
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <SystemClock_Config+0x120>)
 8004fc4:	21f0      	movs	r1, #240	@ 0xf0
 8004fc6:	438a      	bics	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004fca:	4a19      	ldr	r2, [pc, #100]	@ (8005030 <SystemClock_Config+0x120>)
 8004fcc:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <SystemClock_Config+0x120>)
 8004fce:	6852      	ldr	r2, [r2, #4]
 8004fd0:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8004fd2:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <SystemClock_Config+0x120>)
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4b16      	ldr	r3, [pc, #88]	@ (8005030 <SystemClock_Config+0x120>)
 8004fd8:	4918      	ldr	r1, [pc, #96]	@ (800503c <SystemClock_Config+0x12c>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004fde:	4a14      	ldr	r2, [pc, #80]	@ (8005030 <SystemClock_Config+0x120>)
 8004fe0:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <SystemClock_Config+0x120>)
 8004fe2:	6852      	ldr	r2, [r2, #4]
 8004fe4:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004fe6:	4b16      	ldr	r3, [pc, #88]	@ (8005040 <SystemClock_Config+0x130>)
 8004fe8:	2211      	movs	r2, #17
 8004fea:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8004fec:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <SystemClock_Config+0x120>)
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <SystemClock_Config+0x120>)
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	438a      	bics	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <SystemClock_Config+0x120>)
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <SystemClock_Config+0x120>)
 8004ffe:	2102      	movs	r1, #2
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8005004:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <SystemClock_Config+0x120>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	220c      	movs	r2, #12
 800500a:	4013      	ands	r3, r2
 800500c:	603b      	str	r3, [r7, #0]
		timeout--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b01      	subs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d002      	beq.n	8005020 <SystemClock_Config+0x110>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f1      	bne.n	8005004 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8005020:	f000 fb84 	bl	800572c <SystemCoreClockUpdate>
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	000f4240 	.word	0x000f4240
 8005030:	40021000 	.word	0x40021000
 8005034:	fffe7fff 	.word	0xfffe7fff
 8005038:	ffc3ffff 	.word	0xffc3ffff
 800503c:	fffff8ff 	.word	0xfffff8ff
 8005040:	40022000 	.word	0x40022000

08005044 <vTask1>:

/*
 *	Task_1
 */
void vTask1 (void *pvParameters)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Wait for 100ms
		vTaskDelay(100);
 800504c:	2064      	movs	r0, #100	@ 0x64
 800504e:	f7fc fbdd 	bl	800180c <vTaskDelay>
 8005052:	e7fb      	b.n	800504c <vTask1+0x8>

08005054 <vTask2>:

/*
 *	Task_2
 */
void vTask2 (void *pvParameters)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Wait for 100ms
		vTaskDelay(100);
 800505c:	2064      	movs	r0, #100	@ 0x64
 800505e:	f7fc fbd5 	bl	800180c <vTaskDelay>
 8005062:	e7fb      	b.n	800505c <vTask2+0x8>

08005064 <vTaskHWM>:

/*
 * vTaskHWM
 */
void vTaskHWM (void *pvParameters)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	uint32_t	free_heap_size;

	while(1)
	{
		// Periodically Report Free Heap size after scheduler has started
		free_heap_size = xPortGetFreeHeapSize();
 800506c:	f7fd ffa0 	bl	8002fb0 <xPortGetFreeHeapSize>
 8005070:	0003      	movs	r3, r0
 8005072:	60fb      	str	r3, [r7, #12]
		my_printf("Free Heap Size is %d bytes\r", free_heap_size);
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <vTaskHWM+0x2c>)
 8005078:	0011      	movs	r1, r2
 800507a:	0018      	movs	r0, r3
 800507c:	f000 f9e4 	bl	8005448 <my_printf>

		// Wait for 500ms
		vTaskDelay(500);
 8005080:	23fa      	movs	r3, #250	@ 0xfa
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	0018      	movs	r0, r3
 8005086:	f7fc fbc1 	bl	800180c <vTaskDelay>
		free_heap_size = xPortGetFreeHeapSize();
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	e7ee      	b.n	800506c <vTaskHWM+0x8>
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	080060c0 	.word	0x080060c0

08005094 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	if (str) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <printchar+0x26>
		**str = c;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
		++(*str);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 80050b8:	e00a      	b.n	80050d0 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <printchar+0x44>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2240      	movs	r2, #64	@ 0x40
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	d1f9      	bne.n	80050bc <printchar+0x28>
		USART2->TDR = c;
 80050c8:	4b03      	ldr	r3, [pc, #12]	@ (80050d8 <printchar+0x44>)
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	b292      	uxth	r2, r2
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40004400 	.word	0x40004400

080050dc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	46c6      	mov	lr, r8
 80050e0:	b500      	push	{lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80050ee:	2400      	movs	r4, #0
 80050f0:	2320      	movs	r3, #32
 80050f2:	4698      	mov	r8, r3

	if (width > 0) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd16      	ble.n	8005128 <prints+0x4c>
		register int len = 0;
 80050fa:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80050fc:	68be      	ldr	r6, [r7, #8]
 80050fe:	e001      	b.n	8005104 <prints+0x28>
 8005100:	3501      	adds	r5, #1
 8005102:	3601      	adds	r6, #1
 8005104:	7833      	ldrb	r3, [r6, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1fa      	bne.n	8005100 <prints+0x24>
		if (len >= width) width = 0;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429d      	cmp	r5, r3
 800510e:	db02      	blt.n	8005116 <prints+0x3a>
 8005110:	2300      	movs	r3, #0
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e002      	b.n	800511c <prints+0x40>
		else width -= len;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1b5b      	subs	r3, r3, r5
 800511a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2202      	movs	r2, #2
 8005120:	4013      	ands	r3, r2
 8005122:	d001      	beq.n	8005128 <prints+0x4c>
 8005124:	2330      	movs	r3, #48	@ 0x30
 8005126:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	4013      	ands	r3, r2
 800512e:	d119      	bne.n	8005164 <prints+0x88>
		for ( ; width > 0; --width) {
 8005130:	e008      	b.n	8005144 <prints+0x68>
			printchar (out, padchar);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4641      	mov	r1, r8
 8005136:	0018      	movs	r0, r3
 8005138:	f7ff ffac 	bl	8005094 <printchar>
			++pc;
 800513c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3b01      	subs	r3, #1
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	dcf3      	bgt.n	8005132 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 800514a:	e00b      	b.n	8005164 <prints+0x88>
		printchar (out, *string);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	001a      	movs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0011      	movs	r1, r2
 8005156:	0018      	movs	r0, r3
 8005158:	f7ff ff9c 	bl	8005094 <printchar>
		++pc;
 800515c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3301      	adds	r3, #1
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ef      	bne.n	800514c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 800516c:	e008      	b.n	8005180 <prints+0xa4>
		printchar (out, padchar);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4641      	mov	r1, r8
 8005172:	0018      	movs	r0, r3
 8005174:	f7ff ff8e 	bl	8005094 <printchar>
		++pc;
 8005178:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3b01      	subs	r3, #1
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	dcf3      	bgt.n	800516e <prints+0x92>
	}

	return pc;
 8005186:	0023      	movs	r3, r4
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b004      	add	sp, #16
 800518e:	bc80      	pop	{r7}
 8005190:	46b8      	mov	r8, r7
 8005192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005194 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8005194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005196:	46ce      	mov	lr, r9
 8005198:	4647      	mov	r7, r8
 800519a:	b580      	push	{r7, lr}
 800519c:	b089      	sub	sp, #36	@ 0x24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	4699      	mov	r9, r3
 80051ac:	2600      	movs	r6, #0
	register unsigned int u = i;
 80051ae:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10e      	bne.n	80051d4 <printi+0x40>
		print_buf[0] = '0';
 80051b6:	2114      	movs	r1, #20
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	2230      	movs	r2, #48	@ 0x30
 80051bc:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	2200      	movs	r2, #0
 80051c2:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80051c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c8:	1879      	adds	r1, r7, r1
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff ff86 	bl	80050dc <prints>
 80051d0:	0003      	movs	r3, r0
 80051d2:	e04e      	b.n	8005272 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <printi+0x5c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0a      	cmp	r3, #10
 80051de:	d107      	bne.n	80051f0 <printi+0x5c>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da04      	bge.n	80051f0 <printi+0x5c>
		neg = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	4699      	mov	r9, r3
		u = -i;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	425b      	negs	r3, r3
 80051ee:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80051f0:	2314      	movs	r3, #20
 80051f2:	18fc      	adds	r4, r7, r3
 80051f4:	340b      	adds	r4, #11
	*s = '\0';
 80051f6:	2300      	movs	r3, #0
 80051f8:	7023      	strb	r3, [r4, #0]

	while (u) {
 80051fa:	e019      	b.n	8005230 <printi+0x9c>
		t = u % b;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0019      	movs	r1, r3
 8005200:	0028      	movs	r0, r5
 8005202:	f7fb f807 	bl	8000214 <__aeabi_uidivmod>
 8005206:	000b      	movs	r3, r1
 8005208:	4698      	mov	r8, r3
		if( t >= 10 )
 800520a:	4643      	mov	r3, r8
 800520c:	2b09      	cmp	r3, #9
 800520e:	dd02      	ble.n	8005216 <printi+0x82>
			t += letbase - '0' - 10;
 8005210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005212:	3b3a      	subs	r3, #58	@ 0x3a
 8005214:	4498      	add	r8, r3
		*--s = t + '0';
 8005216:	4643      	mov	r3, r8
 8005218:	b2db      	uxtb	r3, r3
 800521a:	3c01      	subs	r4, #1
 800521c:	3330      	adds	r3, #48	@ 0x30
 800521e:	b2db      	uxtb	r3, r3
 8005220:	7023      	strb	r3, [r4, #0]
		u /= b;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0019      	movs	r1, r3
 8005226:	0028      	movs	r0, r5
 8005228:	f7fa ff6e 	bl	8000108 <__udivsi3>
 800522c:	0003      	movs	r3, r0
 800522e:	001d      	movs	r5, r3
	while (u) {
 8005230:	2d00      	cmp	r5, #0
 8005232:	d1e3      	bne.n	80051fc <printi+0x68>
	}

	if (neg) {
 8005234:	464b      	mov	r3, r9
 8005236:	2b00      	cmp	r3, #0
 8005238:	d013      	beq.n	8005262 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800523a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <printi+0xc8>
 8005240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	d009      	beq.n	800525c <printi+0xc8>
			printchar (out, '-');
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	212d      	movs	r1, #45	@ 0x2d
 800524c:	0018      	movs	r0, r3
 800524e:	f7ff ff21 	bl	8005094 <printchar>
			++pc;
 8005252:	3601      	adds	r6, #1
			--width;
 8005254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005256:	3b01      	subs	r3, #1
 8005258:	643b      	str	r3, [r7, #64]	@ 0x40
 800525a:	e002      	b.n	8005262 <printi+0xce>
		}
		else {
			*--s = '-';
 800525c:	3c01      	subs	r4, #1
 800525e:	232d      	movs	r3, #45	@ 0x2d
 8005260:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8005262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	0021      	movs	r1, r4
 800526a:	f7ff ff37 	bl	80050dc <prints>
 800526e:	0003      	movs	r3, r0
 8005270:	18f3      	adds	r3, r6, r3
}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b009      	add	sp, #36	@ 0x24
 8005278:	bcc0      	pop	{r6, r7}
 800527a:	46b9      	mov	r9, r7
 800527c:	46b0      	mov	r8, r6
 800527e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005280 <print>:

static int print(char **out, const char *format, va_list args )
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b08b      	sub	sp, #44	@ 0x2c
 8005284:	af04      	add	r7, sp, #16
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 800528c:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 800528e:	e0c6      	b.n	800541e <print+0x19e>
		if (*format == '%') {
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b25      	cmp	r3, #37	@ 0x25
 8005296:	d000      	beq.n	800529a <print+0x1a>
 8005298:	e0b2      	b.n	8005400 <print+0x180>
			++format;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	3301      	adds	r3, #1
 800529e:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80052a0:	2600      	movs	r6, #0
 80052a2:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d100      	bne.n	80052ae <print+0x2e>
 80052ac:	e0bd      	b.n	800542a <print+0x1aa>
			if (*format == '%') goto out;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b25      	cmp	r3, #37	@ 0x25
 80052b4:	d100      	bne.n	80052b8 <print+0x38>
 80052b6:	e0a5      	b.n	8005404 <print+0x184>
			if (*format == '-') {
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80052be:	d10a      	bne.n	80052d6 <print+0x56>
				++format;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80052c6:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80052c8:	e005      	b.n	80052d6 <print+0x56>
				++format;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80052d0:	2302      	movs	r3, #2
 80052d2:	4333      	orrs	r3, r6
 80052d4:	001e      	movs	r6, r3
			while (*format == '0') {
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b30      	cmp	r3, #48	@ 0x30
 80052dc:	d0f5      	beq.n	80052ca <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80052de:	e00b      	b.n	80052f8 <print+0x78>
				width *= 10;
 80052e0:	002b      	movs	r3, r5
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	195b      	adds	r3, r3, r5
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	001d      	movs	r5, r3
				width += *format - '0';
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	3b30      	subs	r3, #48	@ 0x30
 80052f0:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80052fe:	d903      	bls.n	8005308 <print+0x88>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b39      	cmp	r3, #57	@ 0x39
 8005306:	d9eb      	bls.n	80052e0 <print+0x60>
			}
			if( *format == 's' ) {
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b73      	cmp	r3, #115	@ 0x73
 800530e:	d10f      	bne.n	8005330 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800531a:	d000      	beq.n	800531e <print+0x9e>
 800531c:	e000      	b.n	8005320 <print+0xa0>
 800531e:	4949      	ldr	r1, [pc, #292]	@ (8005444 <print+0x1c4>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	0033      	movs	r3, r6
 8005324:	002a      	movs	r2, r5
 8005326:	f7ff fed9 	bl	80050dc <prints>
 800532a:	0003      	movs	r3, r0
 800532c:	18e4      	adds	r4, r4, r3
				continue;
 800532e:	e073      	b.n	8005418 <print+0x198>
			}
			if( *format == 'd' ) {
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b64      	cmp	r3, #100	@ 0x64
 8005336:	d10f      	bne.n	8005358 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	1d1a      	adds	r2, r3, #4
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	2361      	movs	r3, #97	@ 0x61
 8005344:	9302      	str	r3, [sp, #8]
 8005346:	9601      	str	r6, [sp, #4]
 8005348:	9500      	str	r5, [sp, #0]
 800534a:	2301      	movs	r3, #1
 800534c:	220a      	movs	r2, #10
 800534e:	f7ff ff21 	bl	8005194 <printi>
 8005352:	0003      	movs	r3, r0
 8005354:	18e4      	adds	r4, r4, r3
				continue;
 8005356:	e05f      	b.n	8005418 <print+0x198>
			}
			if( *format == 'x' ) {
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b78      	cmp	r3, #120	@ 0x78
 800535e:	d10f      	bne.n	8005380 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	2361      	movs	r3, #97	@ 0x61
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	9601      	str	r6, [sp, #4]
 8005370:	9500      	str	r5, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	2210      	movs	r2, #16
 8005376:	f7ff ff0d 	bl	8005194 <printi>
 800537a:	0003      	movs	r3, r0
 800537c:	18e4      	adds	r4, r4, r3
				continue;
 800537e:	e04b      	b.n	8005418 <print+0x198>
			}
			if( *format == 'X' ) {
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b58      	cmp	r3, #88	@ 0x58
 8005386:	d10f      	bne.n	80053a8 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1d1a      	adds	r2, r3, #4
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	2341      	movs	r3, #65	@ 0x41
 8005394:	9302      	str	r3, [sp, #8]
 8005396:	9601      	str	r6, [sp, #4]
 8005398:	9500      	str	r5, [sp, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	2210      	movs	r2, #16
 800539e:	f7ff fef9 	bl	8005194 <printi>
 80053a2:	0003      	movs	r3, r0
 80053a4:	18e4      	adds	r4, r4, r3
				continue;
 80053a6:	e037      	b.n	8005418 <print+0x198>
			}
			if( *format == 'u' ) {
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b75      	cmp	r3, #117	@ 0x75
 80053ae:	d10f      	bne.n	80053d0 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	6819      	ldr	r1, [r3, #0]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	2361      	movs	r3, #97	@ 0x61
 80053bc:	9302      	str	r3, [sp, #8]
 80053be:	9601      	str	r6, [sp, #4]
 80053c0:	9500      	str	r5, [sp, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	220a      	movs	r2, #10
 80053c6:	f7ff fee5 	bl	8005194 <printi>
 80053ca:	0003      	movs	r3, r0
 80053cc:	18e4      	adds	r4, r4, r3
				continue;
 80053ce:	e023      	b.n	8005418 <print+0x198>
			}
			if( *format == 'c' ) {
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b63      	cmp	r3, #99	@ 0x63
 80053d6:	d11f      	bne.n	8005418 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1d1a      	adds	r2, r3, #4
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	2114      	movs	r1, #20
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	2200      	movs	r2, #0
 80053ec:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80053ee:	1879      	adds	r1, r7, r1
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	0033      	movs	r3, r6
 80053f4:	002a      	movs	r2, r5
 80053f6:	f7ff fe71 	bl	80050dc <prints>
 80053fa:	0003      	movs	r3, r0
 80053fc:	18e4      	adds	r4, r4, r3
				continue;
 80053fe:	e00b      	b.n	8005418 <print+0x198>
			}
		}
		else {
		out:
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	e000      	b.n	8005406 <print+0x186>
			if (*format == '%') goto out;
 8005404:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	001a      	movs	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	0011      	movs	r1, r2
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff fe3f 	bl	8005094 <printchar>
			++pc;
 8005416:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3301      	adds	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d000      	beq.n	8005428 <print+0x1a8>
 8005426:	e733      	b.n	8005290 <print+0x10>
 8005428:	e000      	b.n	800542c <print+0x1ac>
			if (*format == '\0') break;
 800542a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <print+0x1ba>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800543a:	0023      	movs	r3, r4
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b007      	add	sp, #28
 8005442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005444:	08006104 	.word	0x08006104

08005448 <my_printf>:

int my_printf(const char *format, ...)
{
 8005448:	b40f      	push	{r0, r1, r2, r3}
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8005450:	2314      	movs	r3, #20
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	0019      	movs	r1, r3
 800545c:	2000      	movs	r0, #0
 800545e:	f7ff ff0f 	bl	8005280 <print>
 8005462:	0003      	movs	r3, r0
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bc80      	pop	{r7}
 800546c:	bc08      	pop	{r3}
 800546e:	b004      	add	sp, #16
 8005470:	4718      	bx	r3

08005472 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	af00      	add	r7, sp, #0
}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	e7fd      	b.n	8005480 <HardFault_Handler+0x4>

08005484 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 800548e:	4b0e      	ldr	r3, [pc, #56]	@ (80054c8 <EXTI4_15_IRQHandler+0x44>)
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	019b      	lsls	r3, r3, #6
 8005496:	4013      	ands	r3, r2
 8005498:	d011      	beq.n	80054be <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <EXTI4_15_IRQHandler+0x44>)
 800549c:	2280      	movs	r2, #128	@ 0x80
 800549e:	0192      	lsls	r2, r2, #6
 80054a0:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <EXTI4_15_IRQHandler+0x48>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1d3a      	adds	r2, r7, #4
 80054a8:	0011      	movs	r1, r2
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fb fb0c 	bl	8000ac8 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <EXTI4_15_IRQHandler+0x3a>
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <EXTI4_15_IRQHandler+0x4c>)
 80054b8:	2280      	movs	r2, #128	@ 0x80
 80054ba:	0552      	lsls	r2, r2, #21
 80054bc:	601a      	str	r2, [r3, #0]
	}
}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b002      	add	sp, #8
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	40010400 	.word	0x40010400
 80054cc:	20003220 	.word	0x20003220
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80054d8:	4b22      	ldr	r3, [pc, #136]	@ (8005564 <BSP_LED_Init+0x90>)
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <BSP_LED_Init+0x90>)
 80054de:	2180      	movs	r1, #128	@ 0x80
 80054e0:	0289      	lsls	r1, r1, #10
 80054e2:	430a      	orrs	r2, r1
 80054e4:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80054e6:	2390      	movs	r3, #144	@ 0x90
 80054e8:	05db      	lsls	r3, r3, #23
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2390      	movs	r3, #144	@ 0x90
 80054ee:	05db      	lsls	r3, r3, #23
 80054f0:	491d      	ldr	r1, [pc, #116]	@ (8005568 <BSP_LED_Init+0x94>)
 80054f2:	400a      	ands	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80054f6:	2390      	movs	r3, #144	@ 0x90
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	2390      	movs	r3, #144	@ 0x90
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	2180      	movs	r1, #128	@ 0x80
 8005502:	00c9      	lsls	r1, r1, #3
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8005508:	2390      	movs	r3, #144	@ 0x90
 800550a:	05db      	lsls	r3, r3, #23
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	2390      	movs	r3, #144	@ 0x90
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	2120      	movs	r1, #32
 8005514:	438a      	bics	r2, r1
 8005516:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8005518:	2390      	movs	r3, #144	@ 0x90
 800551a:	05db      	lsls	r3, r3, #23
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	2390      	movs	r3, #144	@ 0x90
 8005520:	05db      	lsls	r3, r3, #23
 8005522:	4911      	ldr	r1, [pc, #68]	@ (8005568 <BSP_LED_Init+0x94>)
 8005524:	400a      	ands	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8005528:	2390      	movs	r3, #144	@ 0x90
 800552a:	05db      	lsls	r3, r3, #23
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	2390      	movs	r3, #144	@ 0x90
 8005530:	05db      	lsls	r3, r3, #23
 8005532:	21c0      	movs	r1, #192	@ 0xc0
 8005534:	0109      	lsls	r1, r1, #4
 8005536:	430a      	orrs	r2, r1
 8005538:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800553a:	2390      	movs	r3, #144	@ 0x90
 800553c:	05db      	lsls	r3, r3, #23
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	2390      	movs	r3, #144	@ 0x90
 8005542:	05db      	lsls	r3, r3, #23
 8005544:	4908      	ldr	r1, [pc, #32]	@ (8005568 <BSP_LED_Init+0x94>)
 8005546:	400a      	ands	r2, r1
 8005548:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800554a:	2390      	movs	r3, #144	@ 0x90
 800554c:	05db      	lsls	r3, r3, #23
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	2390      	movs	r3, #144	@ 0x90
 8005552:	05db      	lsls	r3, r3, #23
 8005554:	2180      	movs	r1, #128	@ 0x80
 8005556:	0389      	lsls	r1, r1, #14
 8005558:	430a      	orrs	r2, r1
 800555a:	619a      	str	r2, [r3, #24]
}
 800555c:	46c0      	nop			@ (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	40021000 	.word	0x40021000
 8005568:	fffff3ff 	.word	0xfffff3ff

0800556c <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8005570:	4b1f      	ldr	r3, [pc, #124]	@ (80055f0 <BSP_PB_Init+0x84>)
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	4b1e      	ldr	r3, [pc, #120]	@ (80055f0 <BSP_PB_Init+0x84>)
 8005576:	2180      	movs	r1, #128	@ 0x80
 8005578:	0309      	lsls	r1, r1, #12
 800557a:	430a      	orrs	r2, r1
 800557c:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <BSP_PB_Init+0x88>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b1c      	ldr	r3, [pc, #112]	@ (80055f4 <BSP_PB_Init+0x88>)
 8005584:	491c      	ldr	r1, [pc, #112]	@ (80055f8 <BSP_PB_Init+0x8c>)
 8005586:	400a      	ands	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800558a:	4a1a      	ldr	r2, [pc, #104]	@ (80055f4 <BSP_PB_Init+0x88>)
 800558c:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <BSP_PB_Init+0x88>)
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8005592:	4b18      	ldr	r3, [pc, #96]	@ (80055f4 <BSP_PB_Init+0x88>)
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	4b17      	ldr	r3, [pc, #92]	@ (80055f4 <BSP_PB_Init+0x88>)
 8005598:	4917      	ldr	r1, [pc, #92]	@ (80055f8 <BSP_PB_Init+0x8c>)
 800559a:	400a      	ands	r2, r1
 800559c:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800559e:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <BSP_PB_Init+0x84>)
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <BSP_PB_Init+0x84>)
 80055a4:	2101      	movs	r1, #1
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 80055aa:	4b14      	ldr	r3, [pc, #80]	@ (80055fc <BSP_PB_Init+0x90>)
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	4b13      	ldr	r3, [pc, #76]	@ (80055fc <BSP_PB_Init+0x90>)
 80055b0:	21f0      	movs	r1, #240	@ 0xf0
 80055b2:	438a      	bics	r2, r1
 80055b4:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 80055b6:	4b11      	ldr	r3, [pc, #68]	@ (80055fc <BSP_PB_Init+0x90>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <BSP_PB_Init+0x90>)
 80055bc:	2120      	movs	r1, #32
 80055be:	430a      	orrs	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 80055c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <BSP_PB_Init+0x94>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <BSP_PB_Init+0x94>)
 80055c8:	2180      	movs	r1, #128	@ 0x80
 80055ca:	0189      	lsls	r1, r1, #6
 80055cc:	430a      	orrs	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <BSP_PB_Init+0x94>)
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <BSP_PB_Init+0x94>)
 80055d6:	490b      	ldr	r1, [pc, #44]	@ (8005604 <BSP_PB_Init+0x98>)
 80055d8:	400a      	ands	r2, r1
 80055da:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 80055dc:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <BSP_PB_Init+0x94>)
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <BSP_PB_Init+0x94>)
 80055e2:	2180      	movs	r1, #128	@ 0x80
 80055e4:	0189      	lsls	r1, r1, #6
 80055e6:	430a      	orrs	r2, r1
 80055e8:	60da      	str	r2, [r3, #12]
}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	48000800 	.word	0x48000800
 80055f8:	f3ffffff 	.word	0xf3ffffff
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400
 8005604:	ffffdfff 	.word	0xffffdfff

08005608 <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800560c:	4b2b      	ldr	r3, [pc, #172]	@ (80056bc <BSP_Console_Init+0xb4>)
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	4b2a      	ldr	r3, [pc, #168]	@ (80056bc <BSP_Console_Init+0xb4>)
 8005612:	2180      	movs	r1, #128	@ 0x80
 8005614:	0289      	lsls	r1, r1, #10
 8005616:	430a      	orrs	r2, r1
 8005618:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 800561a:	2390      	movs	r3, #144	@ 0x90
 800561c:	05db      	lsls	r3, r3, #23
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2390      	movs	r3, #144	@ 0x90
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	21f0      	movs	r1, #240	@ 0xf0
 8005626:	438a      	bics	r2, r1
 8005628:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 800562a:	2390      	movs	r3, #144	@ 0x90
 800562c:	05db      	lsls	r3, r3, #23
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2390      	movs	r3, #144	@ 0x90
 8005632:	05db      	lsls	r3, r3, #23
 8005634:	21a0      	movs	r1, #160	@ 0xa0
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 800563a:	2390      	movs	r3, #144	@ 0x90
 800563c:	05db      	lsls	r3, r3, #23
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	2390      	movs	r3, #144	@ 0x90
 8005642:	05db      	lsls	r3, r3, #23
 8005644:	491e      	ldr	r1, [pc, #120]	@ (80056c0 <BSP_Console_Init+0xb8>)
 8005646:	400a      	ands	r2, r1
 8005648:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800564a:	2390      	movs	r3, #144	@ 0x90
 800564c:	05db      	lsls	r3, r3, #23
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	2390      	movs	r3, #144	@ 0x90
 8005652:	05db      	lsls	r3, r3, #23
 8005654:	2188      	movs	r1, #136	@ 0x88
 8005656:	0149      	lsls	r1, r1, #5
 8005658:	430a      	orrs	r2, r1
 800565a:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800565c:	4b17      	ldr	r3, [pc, #92]	@ (80056bc <BSP_Console_Init+0xb4>)
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	4b16      	ldr	r3, [pc, #88]	@ (80056bc <BSP_Console_Init+0xb4>)
 8005662:	2180      	movs	r1, #128	@ 0x80
 8005664:	0289      	lsls	r1, r1, #10
 8005666:	430a      	orrs	r2, r1
 8005668:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800566a:	4b16      	ldr	r3, [pc, #88]	@ (80056c4 <BSP_Console_Init+0xbc>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <BSP_Console_Init+0xbc>)
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8005676:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <BSP_Console_Init+0xbc>)
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 800567c:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <BSP_Console_Init+0xb4>)
 800567e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005680:	4b0e      	ldr	r3, [pc, #56]	@ (80056bc <BSP_Console_Init+0xb4>)
 8005682:	4911      	ldr	r1, [pc, #68]	@ (80056c8 <BSP_Console_Init+0xc0>)
 8005684:	400a      	ands	r2, r1
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8005688:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <BSP_Console_Init+0xbc>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <BSP_Console_Init+0xbc>)
 800568e:	2180      	movs	r1, #128	@ 0x80
 8005690:	0209      	lsls	r1, r1, #8
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <BSP_Console_Init+0xbc>)
 8005698:	4a0c      	ldr	r2, [pc, #48]	@ (80056cc <BSP_Console_Init+0xc4>)
 800569a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800569c:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <BSP_Console_Init+0xbc>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <BSP_Console_Init+0xbc>)
 80056a2:	210c      	movs	r1, #12
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <BSP_Console_Init+0xbc>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <BSP_Console_Init+0xbc>)
 80056ae:	2101      	movs	r1, #1
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	46c0      	nop			@ (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	40021000 	.word	0x40021000
 80056c0:	ffff00ff 	.word	0xffff00ff
 80056c4:	40004400 	.word	0x40004400
 80056c8:	fffcffff 	.word	0xfffcffff
 80056cc:	00000341 	.word	0x00000341

080056d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056d0:	480d      	ldr	r0, [pc, #52]	@ (8005708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80056d4:	f000 f825 	bl	8005722 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056d8:	480c      	ldr	r0, [pc, #48]	@ (800570c <LoopForever+0x6>)
  ldr r1, =_edata
 80056da:	490d      	ldr	r1, [pc, #52]	@ (8005710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005714 <LoopForever+0xe>)
  movs r3, #0
 80056de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056e0:	e002      	b.n	80056e8 <LoopCopyDataInit>

080056e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056e6:	3304      	adds	r3, #4

080056e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056ec:	d3f9      	bcc.n	80056e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056f0:	4c0a      	ldr	r4, [pc, #40]	@ (800571c <LoopForever+0x16>)
  movs r3, #0
 80056f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056f4:	e001      	b.n	80056fa <LoopFillZerobss>

080056f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056f8:	3204      	adds	r2, #4

080056fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056fc:	d3fb      	bcc.n	80056f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80056fe:	f000 f8b5 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005702:	f7ff fb01 	bl	8004d08 <main>

08005706 <LoopForever>:

LoopForever:
    b LoopForever
 8005706:	e7fe      	b.n	8005706 <LoopForever>
  ldr   r0, =_estack
 8005708:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800570c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005710:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005714:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 8005718:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800571c:	20003238 	.word	0x20003238

08005720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005720:	e7fe      	b.n	8005720 <ADC1_COMP_IRQHandler>

08005722 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	2300      	movs	r3, #0
 8005740:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005742:	4b38      	ldr	r3, [pc, #224]	@ (8005824 <SystemCoreClockUpdate+0xf8>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	220c      	movs	r2, #12
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b08      	cmp	r3, #8
 8005750:	d011      	beq.n	8005776 <SystemCoreClockUpdate+0x4a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d84f      	bhi.n	80057f8 <SystemCoreClockUpdate+0xcc>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <SystemCoreClockUpdate+0x3a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d004      	beq.n	800576e <SystemCoreClockUpdate+0x42>
 8005764:	e048      	b.n	80057f8 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005766:	4b30      	ldr	r3, [pc, #192]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 8005768:	4a30      	ldr	r2, [pc, #192]	@ (800582c <SystemCoreClockUpdate+0x100>)
 800576a:	601a      	str	r2, [r3, #0]
      break;
 800576c:	e048      	b.n	8005800 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800576e:	4b2e      	ldr	r3, [pc, #184]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 8005770:	4a2e      	ldr	r2, [pc, #184]	@ (800582c <SystemCoreClockUpdate+0x100>)
 8005772:	601a      	str	r2, [r3, #0]
      break;
 8005774:	e044      	b.n	8005800 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005776:	4b2b      	ldr	r3, [pc, #172]	@ (8005824 <SystemCoreClockUpdate+0xf8>)
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	23f0      	movs	r3, #240	@ 0xf0
 800577c:	039b      	lsls	r3, r3, #14
 800577e:	4013      	ands	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005782:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <SystemCoreClockUpdate+0xf8>)
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	23c0      	movs	r3, #192	@ 0xc0
 8005788:	025b      	lsls	r3, r3, #9
 800578a:	4013      	ands	r3, r2
 800578c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	0c9b      	lsrs	r3, r3, #18
 8005792:	3302      	adds	r3, #2
 8005794:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8005796:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <SystemCoreClockUpdate+0xf8>)
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	220f      	movs	r2, #15
 800579c:	4013      	ands	r3, r2
 800579e:	3301      	adds	r3, #1
 80057a0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	025b      	lsls	r3, r3, #9
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d10a      	bne.n	80057c2 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	481f      	ldr	r0, [pc, #124]	@ (800582c <SystemCoreClockUpdate+0x100>)
 80057b0:	f7fa fcaa 	bl	8000108 <__udivsi3>
 80057b4:	0003      	movs	r3, r0
 80057b6:	001a      	movs	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	435a      	muls	r2, r3
 80057bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 80057be:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80057c0:	e01e      	b.n	8005800 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	23c0      	movs	r3, #192	@ 0xc0
 80057c6:	025b      	lsls	r3, r3, #9
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d10a      	bne.n	80057e2 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	4818      	ldr	r0, [pc, #96]	@ (8005830 <SystemCoreClockUpdate+0x104>)
 80057d0:	f7fa fc9a 	bl	8000108 <__udivsi3>
 80057d4:	0003      	movs	r3, r0
 80057d6:	001a      	movs	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	435a      	muls	r2, r3
 80057dc:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 80057de:	601a      	str	r2, [r3, #0]
      break;
 80057e0:	e00e      	b.n	8005800 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	4811      	ldr	r0, [pc, #68]	@ (800582c <SystemCoreClockUpdate+0x100>)
 80057e6:	f7fa fc8f 	bl	8000108 <__udivsi3>
 80057ea:	0003      	movs	r3, r0
 80057ec:	001a      	movs	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	435a      	muls	r2, r3
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 80057f4:	601a      	str	r2, [r3, #0]
      break;
 80057f6:	e003      	b.n	8005800 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80057f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 80057fa:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <SystemCoreClockUpdate+0x100>)
 80057fc:	601a      	str	r2, [r3, #0]
      break;
 80057fe:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <SystemCoreClockUpdate+0xf8>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	220f      	movs	r2, #15
 8005808:	4013      	ands	r3, r2
 800580a:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <SystemCoreClockUpdate+0x108>)
 800580c:	5cd3      	ldrb	r3, [r2, r3]
 800580e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	40da      	lsrs	r2, r3
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <SystemCoreClockUpdate+0xfc>)
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40021000 	.word	0x40021000
 8005828:	20000014 	.word	0x20000014
 800582c:	007a1200 	.word	0x007a1200
 8005830:	02dc6c00 	.word	0x02dc6c00
 8005834:	08006158 	.word	0x08006158

08005838 <memset>:
 8005838:	0003      	movs	r3, r0
 800583a:	1882      	adds	r2, r0, r2
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	7019      	strb	r1, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <strncmp>:
 8005848:	b530      	push	{r4, r5, lr}
 800584a:	0005      	movs	r5, r0
 800584c:	1e10      	subs	r0, r2, #0
 800584e:	d00b      	beq.n	8005868 <strncmp+0x20>
 8005850:	2400      	movs	r4, #0
 8005852:	3a01      	subs	r2, #1
 8005854:	5d2b      	ldrb	r3, [r5, r4]
 8005856:	5d08      	ldrb	r0, [r1, r4]
 8005858:	4283      	cmp	r3, r0
 800585a:	d104      	bne.n	8005866 <strncmp+0x1e>
 800585c:	42a2      	cmp	r2, r4
 800585e:	d002      	beq.n	8005866 <strncmp+0x1e>
 8005860:	3401      	adds	r4, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f6      	bne.n	8005854 <strncmp+0xc>
 8005866:	1a18      	subs	r0, r3, r0
 8005868:	bd30      	pop	{r4, r5, pc}
	...

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	2600      	movs	r6, #0
 8005870:	4c0c      	ldr	r4, [pc, #48]	@ (80058a4 <__libc_init_array+0x38>)
 8005872:	4d0d      	ldr	r5, [pc, #52]	@ (80058a8 <__libc_init_array+0x3c>)
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	2600      	movs	r6, #0
 800587e:	f000 f823 	bl	80058c8 <_init>
 8005882:	4c0a      	ldr	r4, [pc, #40]	@ (80058ac <__libc_init_array+0x40>)
 8005884:	4d0a      	ldr	r5, [pc, #40]	@ (80058b0 <__libc_init_array+0x44>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	00b3      	lsls	r3, r6, #2
 8005892:	58eb      	ldr	r3, [r5, r3]
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	00b3      	lsls	r3, r6, #2
 800589c:	58eb      	ldr	r3, [r5, r3]
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	08006168 	.word	0x08006168
 80058a8:	08006168 	.word	0x08006168
 80058ac:	0800616c 	.word	0x0800616c
 80058b0:	08006168 	.word	0x08006168

080058b4 <memcpy>:
 80058b4:	2300      	movs	r3, #0
 80058b6:	b510      	push	{r4, lr}
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d100      	bne.n	80058be <memcpy+0xa>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	5ccc      	ldrb	r4, [r1, r3]
 80058c0:	54c4      	strb	r4, [r0, r3]
 80058c2:	3301      	adds	r3, #1
 80058c4:	e7f8      	b.n	80058b8 <memcpy+0x4>
	...

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
