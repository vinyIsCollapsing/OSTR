
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002700  08002700  00003700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002780  08002780  00003780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002784  08002784  00003784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002788  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001988  2000000c  08002794  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001994  08002794  00004994  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000045d0  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000119e  00000000  00000000  00008604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000560  00000000  00000000  000097a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000003f8  00000000  00000000  00009d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000174f  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000073c6  00000000  00000000  0000b84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000669a9  00000000  00000000  00012c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000795be  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000117c  00000000  00000000  00079604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  0007a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026e8 	.word	0x080026e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026e8 	.word	0x080026e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}

0800032e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <xQueueGenericReset+0x1e>
 8000346:	b672      	cpsid	i
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e7fd      	b.n	8000348 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <xQueueGenericReset+0x26>
 8000352:	e06a      	b.n	800042a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000358:	2b00      	cmp	r3, #0
 800035a:	d066      	beq.n	800042a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	2400      	movs	r4, #0
 8000366:	0c15      	lsrs	r5, r2, #16
 8000368:	0c19      	lsrs	r1, r3, #16
 800036a:	b2a8      	uxth	r0, r5
 800036c:	2800      	cmp	r0, #0
 800036e:	d104      	bne.n	800037a <xQueueGenericReset+0x4c>
 8000370:	b288      	uxth	r0, r1
 8000372:	2800      	cmp	r0, #0
 8000374:	d013      	beq.n	800039e <xQueueGenericReset+0x70>
 8000376:	1c10      	adds	r0, r2, #0
 8000378:	e004      	b.n	8000384 <xQueueGenericReset+0x56>
 800037a:	b289      	uxth	r1, r1
 800037c:	2900      	cmp	r1, #0
 800037e:	d10d      	bne.n	800039c <xQueueGenericReset+0x6e>
 8000380:	1c29      	adds	r1, r5, #0
 8000382:	1c18      	adds	r0, r3, #0
 8000384:	b292      	uxth	r2, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	435a      	muls	r2, r3
 800038a:	b283      	uxth	r3, r0
 800038c:	b289      	uxth	r1, r1
 800038e:	434b      	muls	r3, r1
 8000390:	0c12      	lsrs	r2, r2, #16
 8000392:	189b      	adds	r3, r3, r2
 8000394:	141b      	asrs	r3, r3, #16
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <xQueueGenericReset+0x70>
 800039c:	2401      	movs	r4, #1
 800039e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003a0:	d143      	bne.n	800042a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80003a2:	f001 fc15 	bl	8001bd0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	434b      	muls	r3, r1
 80003b4:	18d2      	adds	r2, r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	434b      	muls	r3, r1
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2244      	movs	r2, #68	@ 0x44
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2245      	movs	r2, #69	@ 0x45
 80003ea:	21ff      	movs	r1, #255	@ 0xff
 80003ec:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10d      	bne.n	8000410 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3310      	adds	r3, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fed9 	bl	80011b8 <xTaskRemoveFromEventList>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d00c      	beq.n	8000424 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800040a:	f001 fbd1 	bl	8001bb0 <vPortYield>
 800040e:	e009      	b.n	8000424 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3310      	adds	r3, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff03 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3324      	adds	r3, #36	@ 0x24
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000424:	f001 fbe6 	bl	8001bf4 <vPortExitCritical>
 8000428:	e001      	b.n	800042e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <xQueueGenericReset+0x10c>
 8000434:	b672      	cpsid	i
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}

08000444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	b08b      	sub	sp, #44	@ 0x2c
 8000448:	af02      	add	r7, sp, #8
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d047      	beq.n	80004ec <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045c:	2000      	movs	r0, #0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0c19      	lsrs	r1, r3, #16
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c1e      	adds	r6, r3, #0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0c1b      	lsrs	r3, r3, #16
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	1c15      	adds	r5, r2, #0
 800046e:	b28a      	uxth	r2, r1
 8000470:	2a00      	cmp	r2, #0
 8000472:	d105      	bne.n	8000480 <xQueueGenericCreate+0x3c>
 8000474:	b29a      	uxth	r2, r3
 8000476:	2a00      	cmp	r2, #0
 8000478:	d013      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	1c34      	adds	r4, r6, #0
 800047e:	e003      	b.n	8000488 <xQueueGenericCreate+0x44>
 8000480:	b29b      	uxth	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10c      	bne.n	80004a0 <xQueueGenericCreate+0x5c>
 8000486:	1c2c      	adds	r4, r5, #0
 8000488:	b2b3      	uxth	r3, r6
 800048a:	b2aa      	uxth	r2, r5
 800048c:	435a      	muls	r2, r3
 800048e:	b2a3      	uxth	r3, r4
 8000490:	b289      	uxth	r1, r1
 8000492:	434b      	muls	r3, r1
 8000494:	0c12      	lsrs	r2, r2, #16
 8000496:	189b      	adds	r3, r3, r2
 8000498:	141b      	asrs	r3, r3, #16
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 80004a0:	2001      	movs	r0, #1
 80004a2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a4:	d122      	bne.n	80004ec <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004ac:	3349      	adds	r3, #73	@ 0x49
 80004ae:	d81d      	bhi.n	80004ec <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4353      	muls	r3, r2
 80004b6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3348      	adds	r3, #72	@ 0x48
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc1f 	bl	8001d00 <pvPortMalloc>
 80004c2:	0003      	movs	r3, r0
 80004c4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d015      	beq.n	80004f8 <xQueueGenericCreate+0xb4>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3348      	adds	r3, #72	@ 0x48
 80004d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781c      	ldrb	r4, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f000 f80c 	bl	8000502 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004ea:	e005      	b.n	80004f8 <xQueueGenericCreate+0xb4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <xQueueGenericCreate+0xb4>
 80004f2:	b672      	cpsid	i
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	e7fd      	b.n	80004f4 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004f8:	69fb      	ldr	r3, [r7, #28]
    }
 80004fa:	0018      	movs	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b009      	add	sp, #36	@ 0x24
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000502 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	001a      	movs	r2, r3
 8000510:	1cfb      	adds	r3, r7, #3
 8000512:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d103      	bne.n	8000522 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	69ba      	ldr	r2, [r7, #24]
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	e002      	b.n	8000528 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	2101      	movs	r1, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fef8 	bl	800032e <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bd80      	pop	{r7, pc}

08000546 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b08a      	sub	sp, #40	@ 0x28
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000552:	2300      	movs	r3, #0
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <xQueueReceive+0x20>
 8000560:	b672      	cpsid	i
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	e7fd      	b.n	8000562 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <xQueueReceive+0x2e>
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <xQueueReceive+0x32>
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <xQueueReceive+0x34>
 8000578:	2300      	movs	r3, #0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <xQueueReceive+0x3e>
 800057e:	b672      	cpsid	i
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000584:	f000 ffb8 	bl	80014f8 <xTaskGetSchedulerState>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d102      	bne.n	8000592 <xQueueReceive+0x4c>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <xQueueReceive+0x50>
 8000592:	2301      	movs	r3, #1
 8000594:	e000      	b.n	8000598 <xQueueReceive+0x52>
 8000596:	2300      	movs	r3, #0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d102      	bne.n	80005a2 <xQueueReceive+0x5c>
 800059c:	b672      	cpsid	i
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	e7fd      	b.n	800059e <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005a2:	f001 fb15 	bl	8001bd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005aa:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d01a      	beq.n	80005e8 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 f87c 	bl	80006b6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	6a3b      	ldr	r3, [r7, #32]
 80005c4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d008      	beq.n	80005e0 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ce:	6a3b      	ldr	r3, [r7, #32]
 80005d0:	3310      	adds	r3, #16
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fdf0 	bl	80011b8 <xTaskRemoveFromEventList>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005dc:	f001 fae8 	bl	8001bb0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005e0:	f001 fb08 	bl	8001bf4 <vPortExitCritical>
                return pdPASS;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e062      	b.n	80006ae <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005ee:	f001 fb01 	bl	8001bf4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e05b      	b.n	80006ae <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005fc:	2314      	movs	r3, #20
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fea5 	bl	8001350 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800060a:	f001 faf3 	bl	8001bf4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800060e:	f000 fb1d 	bl	8000c4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000612:	f001 fadd 	bl	8001bd0 <vPortEnterCritical>
 8000616:	6a3b      	ldr	r3, [r7, #32]
 8000618:	2244      	movs	r2, #68	@ 0x44
 800061a:	5c9b      	ldrb	r3, [r3, r2]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	3301      	adds	r3, #1
 8000620:	d103      	bne.n	800062a <xQueueReceive+0xe4>
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	2244      	movs	r2, #68	@ 0x44
 8000626:	2100      	movs	r1, #0
 8000628:	5499      	strb	r1, [r3, r2]
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	2245      	movs	r2, #69	@ 0x45
 800062e:	5c9b      	ldrb	r3, [r3, r2]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	3301      	adds	r3, #1
 8000634:	d103      	bne.n	800063e <xQueueReceive+0xf8>
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	2245      	movs	r2, #69	@ 0x45
 800063a:	2100      	movs	r1, #0
 800063c:	5499      	strb	r1, [r3, r2]
 800063e:	f001 fad9 	bl	8001bf4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	2314      	movs	r3, #20
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fe94 	bl	8001378 <xTaskCheckForTimeOut>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d11e      	bne.n	8000692 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	0018      	movs	r0, r3
 8000658:	f000 f8b1 	bl	80007be <prvIsQueueEmpty>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d011      	beq.n	8000684 <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	3324      	adds	r3, #36	@ 0x24
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fd45 	bl	80010f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f846 	bl	8000702 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000676:	f000 faf5 	bl	8000c64 <xTaskResumeAll>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d191      	bne.n	80005a2 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 800067e:	f001 fa97 	bl	8001bb0 <vPortYield>
 8000682:	e78e      	b.n	80005a2 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f83b 	bl	8000702 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800068c:	f000 faea 	bl	8000c64 <xTaskResumeAll>
 8000690:	e787      	b.n	80005a2 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	0018      	movs	r0, r3
 8000696:	f000 f834 	bl	8000702 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800069a:	f000 fae3 	bl	8000c64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 f88c 	bl	80007be <prvIsQueueEmpty>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d100      	bne.n	80006ac <xQueueReceive+0x166>
 80006aa:	e77a      	b.n	80005a2 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b00a      	add	sp, #40	@ 0x28
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d018      	beq.n	80006fa <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	18d2      	adds	r2, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d303      	bcc.n	80006ea <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68d9      	ldr	r1, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 ffed 	bl	80026d4 <memcpy>
    }
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}

08000702 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800070a:	f001 fa61 	bl	8001bd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800070e:	230f      	movs	r3, #15
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	2145      	movs	r1, #69	@ 0x45
 8000716:	5c52      	ldrb	r2, [r2, r1]
 8000718:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800071a:	e013      	b.n	8000744 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000720:	2b00      	cmp	r3, #0
 8000722:	d016      	beq.n	8000752 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3324      	adds	r3, #36	@ 0x24
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fd45 	bl	80011b8 <xTaskRemoveFromEventList>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000732:	f000 fe6f 	bl	8001414 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000736:	210f      	movs	r1, #15
 8000738:	187b      	adds	r3, r7, r1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	dce5      	bgt.n	800071c <prvUnlockQueue+0x1a>
 8000750:	e000      	b.n	8000754 <prvUnlockQueue+0x52>
                    break;
 8000752:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2245      	movs	r2, #69	@ 0x45
 8000758:	21ff      	movs	r1, #255	@ 0xff
 800075a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800075c:	f001 fa4a 	bl	8001bf4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000760:	f001 fa36 	bl	8001bd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000764:	230e      	movs	r3, #14
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	2144      	movs	r1, #68	@ 0x44
 800076c:	5c52      	ldrb	r2, [r2, r1]
 800076e:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000770:	e013      	b.n	800079a <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d016      	beq.n	80007a8 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3310      	adds	r3, #16
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd1a 	bl	80011b8 <xTaskRemoveFromEventList>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8000788:	f000 fe44 	bl	8001414 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800078c:	210e      	movs	r1, #14
 800078e:	187b      	adds	r3, r7, r1
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b01      	subs	r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	187b      	adds	r3, r7, r1
 8000798:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800079a:	230e      	movs	r3, #14
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dce5      	bgt.n	8000772 <prvUnlockQueue+0x70>
 80007a6:	e000      	b.n	80007aa <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80007a8:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2244      	movs	r2, #68	@ 0x44
 80007ae:	21ff      	movs	r1, #255	@ 0xff
 80007b0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80007b2:	f001 fa1f 	bl	8001bf4 <vPortExitCritical>
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b004      	add	sp, #16
 80007bc:	bd80      	pop	{r7, pc}

080007be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80007c6:	f001 fa03 	bl	8001bd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e001      	b.n	80007dc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80007dc:	f001 fa0a 	bl	8001bf4 <vPortExitCritical>

    return xReturn;
 80007e0:	68fb      	ldr	r3, [r7, #12]
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b004      	add	sp, #16
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <vQueueAddToRegistry+0x1a>
 8000800:	b672      	cpsid	i
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	e7fd      	b.n	8000802 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d025      	beq.n	8000858 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e01f      	b.n	8000852 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <vQueueAddToRegistry+0x88>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d105      	bne.n	8000830 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	00da      	lsls	r2, r3, #3
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <vQueueAddToRegistry+0x88>)
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	60bb      	str	r3, [r7, #8]
                    break;
 800082e:	e013      	b.n	8000858 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10a      	bne.n	800084c <vQueueAddToRegistry+0x60>
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <vQueueAddToRegistry+0x88>)
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	00d2      	lsls	r2, r2, #3
 800083c:	58d3      	ldr	r3, [r2, r3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d104      	bne.n	800084c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	00da      	lsls	r2, r3, #3
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <vQueueAddToRegistry+0x88>)
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d9dc      	bls.n	8000812 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	20000028 	.word	0x20000028

08000878 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000888:	f001 f9a2 	bl	8001bd0 <vPortEnterCritical>
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2244      	movs	r2, #68	@ 0x44
 8000890:	5c9b      	ldrb	r3, [r3, r2]
 8000892:	b25b      	sxtb	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	d103      	bne.n	80008a0 <vQueueWaitForMessageRestricted+0x28>
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2244      	movs	r2, #68	@ 0x44
 800089c:	2100      	movs	r1, #0
 800089e:	5499      	strb	r1, [r3, r2]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2245      	movs	r2, #69	@ 0x45
 80008a4:	5c9b      	ldrb	r3, [r3, r2]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	d103      	bne.n	80008b4 <vQueueWaitForMessageRestricted+0x3c>
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2245      	movs	r2, #69	@ 0x45
 80008b0:	2100      	movs	r1, #0
 80008b2:	5499      	strb	r1, [r3, r2]
 80008b4:	f001 f99e 	bl	8001bf4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d106      	bne.n	80008ce <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3324      	adds	r3, #36	@ 0x24
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	68b9      	ldr	r1, [r7, #8]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fc35 	bl	8001138 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff16 	bl	8000702 <prvUnlockQueue>
    }
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b006      	add	sp, #24
 80008dc:	bd80      	pop	{r7, pc}

080008de <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008de:	b590      	push	{r4, r7, lr}
 80008e0:	b08d      	sub	sp, #52	@ 0x34
 80008e2:	af04      	add	r7, sp, #16
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fa03 	bl	8001d00 <pvPortMalloc>
 80008fa:	0003      	movs	r3, r0
 80008fc:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d016      	beq.n	8000932 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000904:	204c      	movs	r0, #76	@ 0x4c
 8000906:	f001 f9fb 	bl	8001d00 <pvPortMalloc>
 800090a:	0003      	movs	r3, r0
 800090c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d009      	beq.n	8000928 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	224c      	movs	r2, #76	@ 0x4c
 8000918:	2100      	movs	r1, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f001 feae 	bl	800267c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
 8000926:	e006      	b.n	8000936 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fa3a 	bl	8001da4 <vPortFree>
 8000930:	e001      	b.n	8000936 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d016      	beq.n	800096a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	683c      	ldr	r4, [r7, #0]
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	2300      	movs	r3, #0
 8000948:	9303      	str	r3, [sp, #12]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	0023      	movs	r3, r4
 8000958:	f000 f810 	bl	800097c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f882 	bl	8000a68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	e002      	b.n	8000970 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
 800096e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000970:	69bb      	ldr	r3, [r7, #24]
    }
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b009      	add	sp, #36	@ 0x24
 8000978:	bd90      	pop	{r4, r7, pc}
	...

0800097c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800098a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4934      	ldr	r1, [pc, #208]	@ (8000a64 <prvInitialiseNewTask+0xe8>)
 8000992:	468c      	mov	ip, r1
 8000994:	4463      	add	r3, ip
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2207      	movs	r2, #7
 80009a0:	4393      	bics	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	2207      	movs	r2, #7
 80009a8:	4013      	ands	r3, r2
 80009aa:	d002      	beq.n	80009b2 <prvInitialiseNewTask+0x36>
 80009ac:	b672      	cpsid	i
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	e7fd      	b.n	80009ae <prvInitialiseNewTask+0x32>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d01f      	beq.n	80009f8 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e013      	b.n	80009e6 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	18d3      	adds	r3, r2, r3
 80009c4:	7818      	ldrb	r0, [r3, #0]
 80009c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009c8:	2134      	movs	r1, #52	@ 0x34
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	185b      	adds	r3, r3, r1
 80009d0:	1c02      	adds	r2, r0, #0
 80009d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d006      	beq.n	80009ee <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d9e8      	bls.n	80009be <prvInitialiseNewTask+0x42>
 80009ec:	e000      	b.n	80009f0 <prvInitialiseNewTask+0x74>
            {
                break;
 80009ee:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f2:	2243      	movs	r2, #67	@ 0x43
 80009f4:	2100      	movs	r1, #0
 80009f6:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d902      	bls.n	8000a04 <prvInitialiseNewTask+0x88>
 80009fe:	b672      	cpsid	i
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <prvInitialiseNewTask+0x84>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d901      	bls.n	8000a0e <prvInitialiseNewTask+0x92>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	6a3a      	ldr	r2, [r7, #32]
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a16:	3304      	adds	r3, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fc1f 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a20:	3318      	adds	r3, #24
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fc1a 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a2c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	2205      	movs	r2, #5
 8000a32:	1ad2      	subs	r2, r2, r3
 8000a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a36:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	68f9      	ldr	r1, [r7, #12]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f829 	bl	8001a9c <pxPortInitialiseStack>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <prvInitialiseNewTask+0xe0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b006      	add	sp, #24
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	3fffffff 	.word	0x3fffffff

08000a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a70:	f001 f8ae 	bl	8001bd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a74:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <prvAddNewTaskToReadyList+0xfc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b64 <prvAddNewTaskToReadyList+0xfc>)
 8000a7c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b68 <prvAddNewTaskToReadyList+0x100>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d109      	bne.n	8000a9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a86:	4b38      	ldr	r3, [pc, #224]	@ (8000b68 <prvAddNewTaskToReadyList+0x100>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a8c:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <prvAddNewTaskToReadyList+0xfc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d110      	bne.n	8000ab6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a94:	f000 fcd8 	bl	8001448 <prvInitialiseTaskLists>
 8000a98:	e00d      	b.n	8000ab6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <prvAddNewTaskToReadyList+0x104>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d109      	bne.n	8000ab6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <prvAddNewTaskToReadyList+0x100>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d802      	bhi.n	8000ab6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <prvAddNewTaskToReadyList+0x100>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <prvAddNewTaskToReadyList+0x108>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <prvAddNewTaskToReadyList+0x108>)
 8000abe:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <prvAddNewTaskToReadyList+0x10c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d903      	bls.n	8000ad4 <prvAddNewTaskToReadyList+0x6c>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <prvAddNewTaskToReadyList+0x10c>)
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ad8:	4927      	ldr	r1, [pc, #156]	@ (8000b78 <prvAddNewTaskToReadyList+0x110>)
 8000ada:	0013      	movs	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	18cb      	adds	r3, r1, r3
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	3204      	adds	r2, #4
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	1d1a      	adds	r2, r3, #4
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b0e:	0013      	movs	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	189b      	adds	r3, r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4a18      	ldr	r2, [pc, #96]	@ (8000b78 <prvAddNewTaskToReadyList+0x110>)
 8000b18:	189a      	adds	r2, r3, r2
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b22:	4915      	ldr	r1, [pc, #84]	@ (8000b78 <prvAddNewTaskToReadyList+0x110>)
 8000b24:	0013      	movs	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	189b      	adds	r3, r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	585b      	ldr	r3, [r3, r1]
 8000b2e:	1c58      	adds	r0, r3, #1
 8000b30:	4911      	ldr	r1, [pc, #68]	@ (8000b78 <prvAddNewTaskToReadyList+0x110>)
 8000b32:	0013      	movs	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b3c:	f001 f85a 	bl	8001bf4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <prvAddNewTaskToReadyList+0x104>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <prvAddNewTaskToReadyList+0xf2>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <prvAddNewTaskToReadyList+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d201      	bcs.n	8000b5a <prvAddNewTaskToReadyList+0xf2>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b56:	f001 f82b 	bl	8001bb0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	20000124 	.word	0x20000124
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	20000130 	.word	0x20000130
 8000b70:	20000140 	.word	0x20000140
 8000b74:	2000012c 	.word	0x2000012c
 8000b78:	2000007c 	.word	0x2000007c

08000b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d011      	beq.n	8000bb2 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <vTaskDelay+0x48>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <vTaskDelay+0x20>
 8000b96:	b672      	cpsid	i
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	e7fd      	b.n	8000b98 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8000b9c:	f000 f856 	bl	8000c4c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fcc3 	bl	8001530 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000baa:	f000 f85b 	bl	8000c64 <xTaskResumeAll>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <vTaskDelay+0x40>
        {
            portYIELD_WITHIN_API();
 8000bb8:	f000 fffa 	bl	8001bb0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b004      	add	sp, #16
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000014c 	.word	0x2000014c

08000bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000bce:	4918      	ldr	r1, [pc, #96]	@ (8000c30 <vTaskStartScheduler+0x68>)
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <vTaskStartScheduler+0x6c>)
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <vTaskStartScheduler+0x70>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	f7ff fe7e 	bl	80008de <xTaskCreate>
 8000be2:	0003      	movs	r3, r0
 8000be4:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8000bec:	f000 fce4 	bl	80015b8 <xTimerCreateTimerTask>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10d      	bne.n	8000c16 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8000bfa:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <vTaskStartScheduler+0x74>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4252      	negs	r2, r2
 8000c02:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <vTaskStartScheduler+0x78>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <vTaskStartScheduler+0x7c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000c10:	f000 ffaa 	bl	8001b68 <xPortStartScheduler>
 8000c14:	e005      	b.n	8000c22 <vTaskStartScheduler+0x5a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <vTaskStartScheduler+0x5a>
 8000c1c:	b672      	cpsid	i
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	e7fd      	b.n	8000c1e <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <vTaskStartScheduler+0x80>)
 8000c24:	681b      	ldr	r3, [r3, #0]
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	08002700 	.word	0x08002700
 8000c34:	08001429 	.word	0x08001429
 8000c38:	20000148 	.word	0x20000148
 8000c3c:	20000144 	.word	0x20000144
 8000c40:	20000130 	.word	0x20000130
 8000c44:	20000128 	.word	0x20000128
 8000c48:	20000000 	.word	0x20000000

08000c4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <vTaskSuspendAll+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	4b02      	ldr	r3, [pc, #8]	@ (8000c60 <vTaskSuspendAll+0x14>)
 8000c58:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000014c 	.word	0x2000014c

08000c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000c72:	4b69      	ldr	r3, [pc, #420]	@ (8000e18 <xTaskResumeAll+0x1b4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <xTaskResumeAll+0x1c>
 8000c7a:	b672      	cpsid	i
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	e7fd      	b.n	8000c7c <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c80:	f000 ffa6 	bl	8001bd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c84:	4b64      	ldr	r3, [pc, #400]	@ (8000e18 <xTaskResumeAll+0x1b4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	4b63      	ldr	r3, [pc, #396]	@ (8000e18 <xTaskResumeAll+0x1b4>)
 8000c8c:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c8e:	4b62      	ldr	r3, [pc, #392]	@ (8000e18 <xTaskResumeAll+0x1b4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d000      	beq.n	8000c98 <xTaskResumeAll+0x34>
 8000c96:	e0b7      	b.n	8000e08 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c98:	4b60      	ldr	r3, [pc, #384]	@ (8000e1c <xTaskResumeAll+0x1b8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d100      	bne.n	8000ca2 <xTaskResumeAll+0x3e>
 8000ca0:	e0b2      	b.n	8000e08 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ca2:	e089      	b.n	8000db8 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8000e20 <xTaskResumeAll+0x1bc>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	6a12      	ldr	r2, [r2, #32]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	69d2      	ldr	r2, [r2, #28]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d103      	bne.n	8000cda <xTaskResumeAll+0x76>
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	6a1a      	ldr	r2, [r3, #32]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1e5a      	subs	r2, r3, #1
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	68d2      	ldr	r2, [r2, #12]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	6892      	ldr	r2, [r2, #8]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d103      	bne.n	8000d18 <xTaskResumeAll+0xb4>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <xTaskResumeAll+0x1c0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d903      	bls.n	8000d3c <xTaskResumeAll+0xd8>
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d38:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <xTaskResumeAll+0x1c0>)
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d40:	4939      	ldr	r1, [pc, #228]	@ (8000e28 <xTaskResumeAll+0x1c4>)
 8000d42:	0013      	movs	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18cb      	adds	r3, r1, r3
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	3204      	adds	r2, #4
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	1d1a      	adds	r2, r3, #4
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d76:	0013      	movs	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <xTaskResumeAll+0x1c4>)
 8000d80:	189a      	adds	r2, r3, r2
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d8a:	4927      	ldr	r1, [pc, #156]	@ (8000e28 <xTaskResumeAll+0x1c4>)
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	189b      	adds	r3, r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	585b      	ldr	r3, [r3, r1]
 8000d96:	1c58      	adds	r0, r3, #1
 8000d98:	4923      	ldr	r1, [pc, #140]	@ (8000e28 <xTaskResumeAll+0x1c4>)
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	189b      	adds	r3, r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da8:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <xTaskResumeAll+0x1c8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d302      	bcc.n	8000db8 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <xTaskResumeAll+0x1cc>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <xTaskResumeAll+0x1bc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d000      	beq.n	8000dc2 <xTaskResumeAll+0x15e>
 8000dc0:	e770      	b.n	8000ca4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000dc8:	f000 fb7c 	bl	80014c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <xTaskResumeAll+0x1d0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00f      	beq.n	8000df8 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000dd8:	f000 f83c 	bl	8000e54 <xTaskIncrementTick>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d002      	beq.n	8000de6 <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <xTaskResumeAll+0x1cc>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f2      	bne.n	8000dd8 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <xTaskResumeAll+0x1d0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <xTaskResumeAll+0x1cc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000e04:	f000 fed4 	bl	8001bb0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000e08:	f000 fef4 	bl	8001bf4 <vPortExitCritical>

    return xAlreadyYielded;
 8000e0c:	693b      	ldr	r3, [r7, #16]
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b006      	add	sp, #24
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	2000014c 	.word	0x2000014c
 8000e1c:	20000124 	.word	0x20000124
 8000e20:	20000110 	.word	0x20000110
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	2000007c 	.word	0x2000007c
 8000e2c:	20000078 	.word	0x20000078
 8000e30:	20000138 	.word	0x20000138
 8000e34:	20000134 	.word	0x20000134

08000e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <xTaskGetTickCount+0x18>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	20000128 	.word	0x20000128

08000e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e5e:	4b72      	ldr	r3, [pc, #456]	@ (8001028 <xTaskIncrementTick+0x1d4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <xTaskIncrementTick+0x14>
 8000e66:	e0d4      	b.n	8001012 <xTaskIncrementTick+0x1be>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e68:	4b70      	ldr	r3, [pc, #448]	@ (800102c <xTaskIncrementTick+0x1d8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000e70:	4b6e      	ldr	r3, [pc, #440]	@ (800102c <xTaskIncrementTick+0x1d8>)
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d118      	bne.n	8000eae <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001030 <xTaskIncrementTick+0x1dc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <xTaskIncrementTick+0x38>
 8000e86:	b672      	cpsid	i
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	e7fd      	b.n	8000e88 <xTaskIncrementTick+0x34>
 8000e8c:	4b68      	ldr	r3, [pc, #416]	@ (8001030 <xTaskIncrementTick+0x1dc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	4b68      	ldr	r3, [pc, #416]	@ (8001034 <xTaskIncrementTick+0x1e0>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b66      	ldr	r3, [pc, #408]	@ (8001030 <xTaskIncrementTick+0x1dc>)
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4b66      	ldr	r3, [pc, #408]	@ (8001034 <xTaskIncrementTick+0x1e0>)
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	4b65      	ldr	r3, [pc, #404]	@ (8001038 <xTaskIncrementTick+0x1e4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	4b64      	ldr	r3, [pc, #400]	@ (8001038 <xTaskIncrementTick+0x1e4>)
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	f000 fb0b 	bl	80014c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000eae:	4b63      	ldr	r3, [pc, #396]	@ (800103c <xTaskIncrementTick+0x1e8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d200      	bcs.n	8000eba <xTaskIncrementTick+0x66>
 8000eb8:	e0a4      	b.n	8001004 <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eba:	4b5d      	ldr	r3, [pc, #372]	@ (8001030 <xTaskIncrementTick+0x1dc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d104      	bne.n	8000ece <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <xTaskIncrementTick+0x1e8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4252      	negs	r2, r2
 8000eca:	601a      	str	r2, [r3, #0]
                    break;
 8000ecc:	e09a      	b.n	8001004 <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ece:	4b58      	ldr	r3, [pc, #352]	@ (8001030 <xTaskIncrementTick+0x1dc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d203      	bcs.n	8000eee <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ee6:	4b55      	ldr	r3, [pc, #340]	@ (800103c <xTaskIncrementTick+0x1e8>)
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000eec:	e08a      	b.n	8001004 <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68d2      	ldr	r2, [r2, #12]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	6892      	ldr	r2, [r2, #8]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d103      	bne.n	8000f1c <xTaskIncrementTick+0xc8>
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01e      	beq.n	8000f72 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	6a12      	ldr	r2, [r2, #32]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	69d2      	ldr	r2, [r2, #28]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	3318      	adds	r3, #24
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d103      	bne.n	8000f62 <xTaskIncrementTick+0x10e>
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f76:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <xTaskIncrementTick+0x1ec>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d903      	bls.n	8000f86 <xTaskIncrementTick+0x132>
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <xTaskIncrementTick+0x1ec>)
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8a:	492e      	ldr	r1, [pc, #184]	@ (8001044 <xTaskIncrementTick+0x1f0>)
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	189b      	adds	r3, r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	18cb      	adds	r3, r1, r3
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	3204      	adds	r2, #4
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <xTaskIncrementTick+0x1f0>)
 8000fca:	189a      	adds	r2, r3, r2
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fd4:	491b      	ldr	r1, [pc, #108]	@ (8001044 <xTaskIncrementTick+0x1f0>)
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	585b      	ldr	r3, [r3, r1]
 8000fe0:	1c58      	adds	r0, r3, #1
 8000fe2:	4918      	ldr	r1, [pc, #96]	@ (8001044 <xTaskIncrementTick+0x1f0>)
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	189b      	adds	r3, r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <xTaskIncrementTick+0x1f4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d800      	bhi.n	8000ffe <xTaskIncrementTick+0x1aa>
 8000ffc:	e75d      	b.n	8000eba <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001002:	e75a      	b.n	8000eba <xTaskIncrementTick+0x66>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <xTaskIncrementTick+0x1f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	e004      	b.n	800101c <xTaskIncrementTick+0x1c8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <xTaskIncrementTick+0x1fc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <xTaskIncrementTick+0x1fc>)
 800101a:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800101c:	69fb      	ldr	r3, [r7, #28]
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b008      	add	sp, #32
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	2000014c 	.word	0x2000014c
 800102c:	20000128 	.word	0x20000128
 8001030:	20000108 	.word	0x20000108
 8001034:	2000010c 	.word	0x2000010c
 8001038:	2000013c 	.word	0x2000013c
 800103c:	20000144 	.word	0x20000144
 8001040:	2000012c 	.word	0x2000012c
 8001044:	2000007c 	.word	0x2000007c
 8001048:	20000078 	.word	0x20000078
 800104c:	20000138 	.word	0x20000138
 8001050:	20000134 	.word	0x20000134

08001054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <vTaskSwitchContext+0x90>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <vTaskSwitchContext+0x94>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001068:	e038      	b.n	80010dc <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <vTaskSwitchContext+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <vTaskSwitchContext+0x98>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e008      	b.n	800108a <vTaskSwitchContext+0x36>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <vTaskSwitchContext+0x30>
 800107e:	b672      	cpsid	i
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	e7fd      	b.n	8001080 <vTaskSwitchContext+0x2c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4919      	ldr	r1, [pc, #100]	@ (80010f0 <vTaskSwitchContext+0x9c>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	0013      	movs	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	189b      	adds	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	585b      	ldr	r3, [r3, r1]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ed      	beq.n	8001078 <vTaskSwitchContext+0x24>
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	0013      	movs	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <vTaskSwitchContext+0x9c>)
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3308      	adds	r3, #8
 80010be:	429a      	cmp	r2, r3
 80010c0:	d104      	bne.n	80010cc <vTaskSwitchContext+0x78>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <vTaskSwitchContext+0xa0>)
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <vTaskSwitchContext+0x98>)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000014c 	.word	0x2000014c
 80010e8:	20000138 	.word	0x20000138
 80010ec:	2000012c 	.word	0x2000012c
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	20000078 	.word	0x20000078

080010f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <vTaskPlaceOnEventList+0x16>
 8001108:	b672      	cpsid	i
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	e7fd      	b.n	800110a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <vTaskPlaceOnEventList+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3318      	adds	r3, #24
 8001114:	001a      	movs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff f8a9 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2101      	movs	r1, #1
 8001124:	0018      	movs	r0, r3
 8001126:	f000 fa03 	bl	8001530 <prvAddCurrentTaskToDelayedList>
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	20000078 	.word	0x20000078

08001138 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <vTaskPlaceOnEventListRestricted+0x18>
 800114a:	b672      	cpsid	i
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	e7fd      	b.n	800114c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <vTaskPlaceOnEventListRestricted+0x7c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	61da      	str	r2, [r3, #28]
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <vTaskPlaceOnEventListRestricted+0x7c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	6892      	ldr	r2, [r2, #8]
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <vTaskPlaceOnEventListRestricted+0x7c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	3218      	adds	r2, #24
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <vTaskPlaceOnEventListRestricted+0x7c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3318      	adds	r3, #24
 800117a:	001a      	movs	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <vTaskPlaceOnEventListRestricted+0x7c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8001198:	2301      	movs	r3, #1
 800119a:	425b      	negs	r3, r3
 800119c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 f9c3 	bl	8001530 <prvAddCurrentTaskToDelayedList>
    }
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b006      	add	sp, #24
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	20000078 	.word	0x20000078

080011b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <xTaskRemoveFromEventList+0x1c>
 80011ce:	b672      	cpsid	i
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	e7fd      	b.n	80011d0 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	6a12      	ldr	r2, [r2, #32]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69d2      	ldr	r2, [r2, #28]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	3318      	adds	r3, #24
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d103      	bne.n	8001202 <xTaskRemoveFromEventList+0x4a>
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001212:	4b49      	ldr	r3, [pc, #292]	@ (8001338 <xTaskRemoveFromEventList+0x180>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d15d      	bne.n	80012d6 <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	68d2      	ldr	r2, [r2, #12]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	6892      	ldr	r2, [r2, #8]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3304      	adds	r3, #4
 800123c:	429a      	cmp	r2, r3
 800123e:	d103      	bne.n	8001248 <xTaskRemoveFromEventList+0x90>
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <xTaskRemoveFromEventList+0x184>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d903      	bls.n	800126c <xTaskRemoveFromEventList+0xb4>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <xTaskRemoveFromEventList+0x184>)
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001270:	4933      	ldr	r1, [pc, #204]	@ (8001340 <xTaskRemoveFromEventList+0x188>)
 8001272:	0013      	movs	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	189b      	adds	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	18cb      	adds	r3, r1, r3
 800127c:	3304      	adds	r3, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	3204      	adds	r2, #4
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1d1a      	adds	r2, r3, #4
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a6:	0013      	movs	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4a24      	ldr	r2, [pc, #144]	@ (8001340 <xTaskRemoveFromEventList+0x188>)
 80012b0:	189a      	adds	r2, r3, r2
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ba:	4921      	ldr	r1, [pc, #132]	@ (8001340 <xTaskRemoveFromEventList+0x188>)
 80012bc:	0013      	movs	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	189b      	adds	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	585b      	ldr	r3, [r3, r1]
 80012c6:	1c58      	adds	r0, r3, #1
 80012c8:	491d      	ldr	r1, [pc, #116]	@ (8001340 <xTaskRemoveFromEventList+0x188>)
 80012ca:	0013      	movs	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	189b      	adds	r3, r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	5058      	str	r0, [r3, r1]
 80012d4:	e01b      	b.n	800130e <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <xTaskRemoveFromEventList+0x18c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	61da      	str	r2, [r3, #28]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	621a      	str	r2, [r3, #32]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	3218      	adds	r2, #24
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3318      	adds	r3, #24
 80012f8:	001a      	movs	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4a10      	ldr	r2, [pc, #64]	@ (8001344 <xTaskRemoveFromEventList+0x18c>)
 8001302:	629a      	str	r2, [r3, #40]	@ 0x28
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <xTaskRemoveFromEventList+0x18c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <xTaskRemoveFromEventList+0x18c>)
 800130c:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <xTaskRemoveFromEventList+0x190>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001318:	429a      	cmp	r2, r3
 800131a:	d905      	bls.n	8001328 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <xTaskRemoveFromEventList+0x194>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e001      	b.n	800132c <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800132c:	69fb      	ldr	r3, [r7, #28]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b008      	add	sp, #32
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	2000014c 	.word	0x2000014c
 800133c:	2000012c 	.word	0x2000012c
 8001340:	2000007c 	.word	0x2000007c
 8001344:	20000110 	.word	0x20000110
 8001348:	20000078 	.word	0x20000078
 800134c:	20000138 	.word	0x20000138

08001350 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <vTaskInternalSetTimeOutState+0x20>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <vTaskInternalSetTimeOutState+0x24>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000013c 	.word	0x2000013c
 8001374:	20000128 	.word	0x20000128

08001378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <xTaskCheckForTimeOut+0x16>
 8001388:	b672      	cpsid	i
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	e7fd      	b.n	800138a <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <xTaskCheckForTimeOut+0x22>
 8001394:	b672      	cpsid	i
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	e7fd      	b.n	8001396 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 800139a:	f000 fc19 	bl	8001bd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800139e:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <xTaskCheckForTimeOut+0x94>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <xTaskCheckForTimeOut+0x98>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d00a      	beq.n	80013d0 <xTaskCheckForTimeOut+0x58>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d305      	bcc.n	80013d0 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e016      	b.n	80013fe <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d20c      	bcs.n	80013f4 <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad2      	subs	r2, r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff ffb1 	bl	8001350 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e004      	b.n	80013fe <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80013fe:	f000 fbf9 	bl	8001bf4 <vPortExitCritical>

    return xReturn;
 8001402:	697b      	ldr	r3, [r7, #20]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000128 	.word	0x20000128
 8001410:	2000013c 	.word	0x2000013c

08001414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001418:	4b02      	ldr	r3, [pc, #8]	@ (8001424 <vTaskMissedYield+0x10>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000138 	.word	0x20000138

08001428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001430:	f000 f842 	bl	80014b8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <prvIdleTask+0x1c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d9f9      	bls.n	8001430 <prvIdleTask+0x8>
            {
                taskYIELD();
 800143c:	f000 fbb8 	bl	8001bb0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8001440:	e7f6      	b.n	8001430 <prvIdleTask+0x8>
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	2000007c 	.word	0x2000007c

08001448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e00c      	b.n	800146e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	0013      	movs	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	189b      	adds	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <prvInitialiseTaskLists+0x58>)
 8001460:	189b      	adds	r3, r3, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f7fe fedc 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d9ef      	bls.n	8001454 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <prvInitialiseTaskLists+0x5c>)
 8001476:	0018      	movs	r0, r3
 8001478:	f7fe fed2 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <prvInitialiseTaskLists+0x60>)
 800147e:	0018      	movs	r0, r3
 8001480:	f7fe fece 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <prvInitialiseTaskLists+0x64>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7fe feca 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <prvInitialiseTaskLists+0x68>)
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <prvInitialiseTaskLists+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <prvInitialiseTaskLists+0x6c>)
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <prvInitialiseTaskLists+0x60>)
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000007c 	.word	0x2000007c
 80014a4:	200000e0 	.word	0x200000e0
 80014a8:	200000f4 	.word	0x200000f4
 80014ac:	20000110 	.word	0x20000110
 80014b0:	20000108 	.word	0x20000108
 80014b4:	2000010c 	.word	0x2000010c

080014b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80014bc:	46c0      	nop			@ (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <prvResetNextTaskUnblockTime+0x2c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d104      	bne.n	80014dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <prvResetNextTaskUnblockTime+0x30>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	4252      	negs	r2, r2
 80014d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80014da:	e005      	b.n	80014e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <prvResetNextTaskUnblockTime+0x2c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <prvResetNextTaskUnblockTime+0x30>)
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	20000108 	.word	0x20000108
 80014f4:	20000144 	.word	0x20000144

080014f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <xTaskGetSchedulerState+0x30>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001506:	2301      	movs	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e008      	b.n	800151e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <xTaskGetSchedulerState+0x34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001514:	2302      	movs	r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	e001      	b.n	800151e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800151e:	687b      	ldr	r3, [r7, #4]
    }
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000130 	.word	0x20000130
 800152c:	2000014c 	.word	0x2000014c

08001530 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <prvAddCurrentTaskToDelayedList+0x74>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x78>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fec9 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x78>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d209      	bcs.n	8001578 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <prvAddCurrentTaskToDelayedList+0x7c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x78>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f7fe fe7e 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001576:	e010      	b.n	800159a <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <prvAddCurrentTaskToDelayedList+0x80>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x78>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3304      	adds	r3, #4
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f7fe fe74 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <prvAddCurrentTaskToDelayedList+0x84>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d202      	bcs.n	800159a <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <prvAddCurrentTaskToDelayedList+0x84>)
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	20000128 	.word	0x20000128
 80015a8:	20000078 	.word	0x20000078
 80015ac:	2000010c 	.word	0x2000010c
 80015b0:	20000108 	.word	0x20000108
 80015b4:	20000144 	.word	0x20000144

080015b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80015c2:	f000 fa31 	bl	8001a28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <xTimerCreateTimerTask+0x44>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80015ce:	490c      	ldr	r1, [pc, #48]	@ (8001600 <xTimerCreateTimerTask+0x48>)
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <xTimerCreateTimerTask+0x4c>)
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <xTimerCreateTimerTask+0x50>)
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2303      	movs	r3, #3
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	f7ff f97e 	bl	80008de <xTaskCreate>
 80015e2:	0003      	movs	r3, r0
 80015e4:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <xTimerCreateTimerTask+0x3a>
 80015ec:	b672      	cpsid	i
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	e7fd      	b.n	80015ee <xTimerCreateTimerTask+0x36>
        return xReturn;
 80015f2:	687b      	ldr	r3, [r7, #4]
    }
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000180 	.word	0x20000180
 8001600:	08002708 	.word	0x08002708
 8001604:	080016b5 	.word	0x080016b5
 8001608:	20000184 	.word	0x20000184

0800160c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001618:	e009      	b.n	800162e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	18d3      	adds	r3, r2, r3
 8001622:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	0010      	movs	r0, r2
 800162c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	18d1      	adds	r1, r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f8da 	bl	80017f4 <prvInsertTimerInActiveList>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d1ea      	bne.n	800161a <prvReloadTimer+0xe>
        }
    }
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <prvProcessExpiredTimer+0x60>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3304      	adds	r3, #4
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fe38 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2224      	movs	r2, #36	@ 0x24
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	001a      	movs	r2, r3
 8001676:	2304      	movs	r3, #4
 8001678:	4013      	ands	r3, r2
 800167a:	d006      	beq.n	800168a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ffc2 	bl	800160c <prvReloadTimer>
 8001688:	e008      	b.n	800169c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2224      	movs	r2, #36	@ 0x24
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2201      	movs	r2, #1
 8001692:	4393      	bics	r3, r2
 8001694:	b2d9      	uxtb	r1, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2224      	movs	r2, #36	@ 0x24
 800169a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	0010      	movs	r0, r2
 80016a4:	4798      	blx	r3
    }
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	20000178 	.word	0x20000178

080016b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80016bc:	2308      	movs	r3, #8
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	0018      	movs	r0, r3
 80016c2:	f000 f855 	bl	8001770 <prvGetNextExpireTime>
 80016c6:	0003      	movs	r3, r0
 80016c8:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	0011      	movs	r1, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f805 	bl	80016e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80016d6:	f000 f8cf 	bl	8001878 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	e7ee      	b.n	80016bc <prvTimerTask+0x8>
	...

080016e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80016ea:	f7ff faaf 	bl	8000c4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80016ee:	2308      	movs	r3, #8
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f85e 	bl	80017b4 <prvSampleTimeNow>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12b      	bne.n	800175a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10c      	bne.n	8001722 <prvProcessTimerOrBlockTask+0x42>
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d808      	bhi.n	8001722 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8001710:	f7ff faa8 	bl	8000c64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff ff98 	bl	8001650 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001720:	e01d      	b.n	800175e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <prvProcessTimerOrBlockTask+0x88>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <prvProcessTimerOrBlockTask+0x56>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <prvProcessTimerOrBlockTask+0x58>
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <prvProcessTimerOrBlockTask+0x8c>)
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	0019      	movs	r1, r3
 8001748:	f7ff f896 	bl	8000878 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800174c:	f7ff fa8a 	bl	8000c64 <xTaskResumeAll>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d104      	bne.n	800175e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8001754:	f000 fa2c 	bl	8001bb0 <vPortYield>
    }
 8001758:	e001      	b.n	800175e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 800175a:	f7ff fa83 	bl	8000c64 <xTaskResumeAll>
    }
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	2000017c 	.word	0x2000017c
 800176c:	20000180 	.word	0x20000180

08001770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001778:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <prvGetNextExpireTime+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <prvGetNextExpireTime+0x16>
 8001782:	2201      	movs	r2, #1
 8001784:	e000      	b.n	8001788 <prvGetNextExpireTime+0x18>
 8001786:	2200      	movs	r2, #0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <prvGetNextExpireTime+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e001      	b.n	80017a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80017a4:	68fb      	ldr	r3, [r7, #12]
    }
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000178 	.word	0x20000178

080017b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80017bc:	f7ff fb3c 	bl	8000e38 <xTaskGetTickCount>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <prvSampleTimeNow+0x3c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d205      	bcs.n	80017da <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80017ce:	f000 f903 	bl	80019d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e002      	b.n	80017e0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <prvSampleTimeNow+0x3c>)
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80017e6:	68fb      	ldr	r3, [r7, #12]
    }
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000188 	.word	0x20000188

080017f4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d812      	bhi.n	8001840 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	1ad2      	subs	r2, r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e01b      	b.n	8001866 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <prvInsertTimerInActiveList+0x7c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	0019      	movs	r1, r3
 8001838:	0010      	movs	r0, r2
 800183a:	f7fe fd1a 	bl	8000272 <vListInsert>
 800183e:	e012      	b.n	8001866 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d206      	bcs.n	8001856 <prvInsertTimerInActiveList+0x62>
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d302      	bcc.n	8001856 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e007      	b.n	8001866 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <prvInsertTimerInActiveList+0x80>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	0019      	movs	r1, r3
 8001860:	0010      	movs	r0, r2
 8001862:	f7fe fd06 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001866:	697b      	ldr	r3, [r7, #20]
    }
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b006      	add	sp, #24
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000017c 	.word	0x2000017c
 8001874:	20000178 	.word	0x20000178

08001878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800187e:	e098      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <prvProcessReceivedCommands+0x12>
 8001888:	e093      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3304      	adds	r3, #4
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe fd1e 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80018a2:	003b      	movs	r3, r7
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff ff85 	bl	80017b4 <prvSampleTimeNow>
 80018aa:	0003      	movs	r3, r0
 80018ac:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d900      	bls.n	80018b8 <prvProcessReceivedCommands+0x40>
 80018b6:	e079      	b.n	80019ac <prvProcessReceivedCommands+0x134>
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <prvProcessReceivedCommands+0x158>)
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2224      	movs	r2, #36	@ 0x24
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b2d9      	uxtb	r1, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2224      	movs	r2, #36	@ 0x24
 80018d2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	18d1      	adds	r1, r2, r3
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff ff85 	bl	80017f4 <prvInsertTimerInActiveList>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d060      	beq.n	80019b0 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2224      	movs	r2, #36	@ 0x24
 80018f2:	5c9b      	ldrb	r3, [r3, r2]
 80018f4:	001a      	movs	r2, r3
 80018f6:	2304      	movs	r3, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	d00a      	beq.n	8001912 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	18d1      	adds	r1, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fe7e 	bl	800160c <prvReloadTimer>
 8001910:	e008      	b.n	8001924 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2224      	movs	r2, #36	@ 0x24
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	2201      	movs	r2, #1
 800191a:	4393      	bics	r3, r2
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2224      	movs	r2, #36	@ 0x24
 8001922:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	0010      	movs	r0, r2
 800192c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800192e:	e03f      	b.n	80019b0 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2224      	movs	r2, #36	@ 0x24
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	2201      	movs	r2, #1
 8001938:	4393      	bics	r3, r2
 800193a:	b2d9      	uxtb	r1, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2224      	movs	r2, #36	@ 0x24
 8001940:	5499      	strb	r1, [r3, r2]
                        break;
 8001942:	e036      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2224      	movs	r2, #36	@ 0x24
 8001948:	5c9b      	ldrb	r3, [r3, r2]
 800194a:	2201      	movs	r2, #1
 800194c:	4313      	orrs	r3, r2
 800194e:	b2d9      	uxtb	r1, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2224      	movs	r2, #36	@ 0x24
 8001954:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <prvProcessReceivedCommands+0xf4>
 8001966:	b672      	cpsid	i
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	e7fd      	b.n	8001968 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	18d1      	adds	r1, r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	6978      	ldr	r0, [r7, #20]
 800197a:	f7ff ff3b 	bl	80017f4 <prvInsertTimerInActiveList>
                        break;
 800197e:	e018      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2224      	movs	r2, #36	@ 0x24
 8001984:	5c9b      	ldrb	r3, [r3, r2]
 8001986:	001a      	movs	r2, r3
 8001988:	2302      	movs	r3, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d104      	bne.n	8001998 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 fa07 	bl	8001da4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001996:	e00c      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2224      	movs	r2, #36	@ 0x24
 800199c:	5c9b      	ldrb	r3, [r3, r2]
 800199e:	2201      	movs	r2, #1
 80019a0:	4393      	bics	r3, r2
 80019a2:	b2d9      	uxtb	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2224      	movs	r2, #36	@ 0x24
 80019a8:	5499      	strb	r1, [r3, r2]
                        break;
 80019aa:	e002      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	e000      	b.n	80019b2 <prvProcessReceivedCommands+0x13a>
                        break;
 80019b0:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <prvProcessReceivedCommands+0x15c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1d39      	adds	r1, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7fe fdc3 	bl	8000546 <xQueueReceive>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d000      	beq.n	80019c6 <prvProcessReceivedCommands+0x14e>
 80019c4:	e75c      	b.n	8001880 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46c0      	nop			@ (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b006      	add	sp, #24
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	08002748 	.word	0x08002748
 80019d4:	20000180 	.word	0x20000180

080019d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80019de:	e00b      	b.n	80019f8 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <prvSwitchTimerLists+0x48>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80019ea:	2301      	movs	r3, #1
 80019ec:	425a      	negs	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fe2c 	bl	8001650 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <prvSwitchTimerLists+0x48>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <prvSwitchTimerLists+0x48>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <prvSwitchTimerLists+0x4c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <prvSwitchTimerLists+0x48>)
 8001a0e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <prvSwitchTimerLists+0x4c>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
    }
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	20000178 	.word	0x20000178
 8001a24:	2000017c 	.word	0x2000017c

08001a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001a2c:	f000 f8d0 	bl	8001bd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <prvCheckForValidListAndQueue+0x5c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d120      	bne.n	8001a7a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <prvCheckForValidListAndQueue+0x60>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7fe fbf0 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <prvCheckForValidListAndQueue+0x64>)
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7fe fbec 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <prvCheckForValidListAndQueue+0x68>)
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <prvCheckForValidListAndQueue+0x60>)
 8001a4c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <prvCheckForValidListAndQueue+0x6c>)
 8001a50:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <prvCheckForValidListAndQueue+0x64>)
 8001a52:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001a54:	2200      	movs	r2, #0
 8001a56:	210c      	movs	r1, #12
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f7fe fcf3 	bl	8000444 <xQueueGenericCreate>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <prvCheckForValidListAndQueue+0x5c>)
 8001a62:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <prvCheckForValidListAndQueue+0x5c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <prvCheckForValidListAndQueue+0x5c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <prvCheckForValidListAndQueue+0x70>)
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7fe feb9 	bl	80007ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001a7a:	f000 f8bb 	bl	8001bf4 <vPortExitCritical>
    }
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000180 	.word	0x20000180
 8001a88:	20000150 	.word	0x20000150
 8001a8c:	20000164 	.word	0x20000164
 8001a90:	20000178 	.word	0x20000178
 8001a94:	2000017c 	.word	0x2000017c
 8001a98:	08002710 	.word	0x08002710

08001a9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	0452      	lsls	r2, r2, #17
 8001ab4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3b04      	subs	r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8001ac8:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <pxPortInitialiseStack+0x50>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b14      	subs	r3, #20
 8001ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b20      	subs	r3, #32
 8001ade:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	08001af1 	.word	0x08001af1

08001af0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <prvTaskExitError+0x2c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	d002      	beq.n	8001b08 <prvTaskExitError+0x18>
 8001b02:	b672      	cpsid	i
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	e7fd      	b.n	8001b04 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8001b08:	b672      	cpsid	i

    while( ulDummy == 0 )
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0fc      	beq.n	8001b0c <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000004 	.word	0x20000004

08001b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	0000      	movs	r0, r0
 8001b2c:	0000      	movs	r0, r0
	...

08001b30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <pxCurrentTCBConst2>)
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	3020      	adds	r0, #32
 8001b38:	f380 8809 	msr	PSP, r0
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f380 8814 	msr	CONTROL, r0
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001b48:	46ae      	mov	lr, r5
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	bc04      	pop	{r2}
 8001b4e:	b662      	cpsie	i
 8001b50:	4718      	bx	r3
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46c0      	nop			@ (mov r8, r8)

08001b60 <pxCurrentTCBConst2>:
 8001b60:	20000078 	.word	0x20000078
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46c0      	nop			@ (mov r8, r8)

08001b68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <xPortStartScheduler+0x40>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <xPortStartScheduler+0x40>)
 8001b72:	21ff      	movs	r1, #255	@ 0xff
 8001b74:	0409      	lsls	r1, r1, #16
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <xPortStartScheduler+0x40>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <xPortStartScheduler+0x40>)
 8001b80:	21ff      	movs	r1, #255	@ 0xff
 8001b82:	0609      	lsls	r1, r1, #24
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b88:	f000 f898 	bl	8001cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <xPortStartScheduler+0x44>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8001b92:	f7ff ffcd 	bl	8001b30 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001b96:	f7ff fa5d 	bl	8001054 <vTaskSwitchContext>
    prvTaskExitError();
 8001b9a:	f7ff ffa9 	bl	8001af0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	e000ed20 	.word	0xe000ed20
 8001bac:	20000004 	.word	0x20000004

08001bb0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <vPortYield+0x1c>)
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0552      	lsls	r2, r2, #21
 8001bba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8001bbc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8001bc0:	f3bf 8f6f 	isb	sy
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	e000ed04 	.word	0xe000ed04

08001bd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8001bd4:	b672      	cpsid	i
    uxCriticalNesting++;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <vPortEnterCritical+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <vPortEnterCritical+0x20>)
 8001bde:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8001be0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8001be4:	f3bf 8f6f 	isb	sy
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <vPortExitCritical+0x2c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <vPortExitCritical+0x12>
 8001c00:	b672      	cpsid	i
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	e7fd      	b.n	8001c02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <vPortExitCritical+0x2c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <vPortExitCritical+0x2c>)
 8001c0e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <vPortExitCritical+0x2c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d100      	bne.n	8001c1a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8001c18:	b662      	cpsie	i
    }
}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000004 	.word	0x20000004

08001c24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8001c24:	f3ef 8010 	mrs	r0, PRIMASK
 8001c28:	b672      	cpsid	i
 8001c2a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	0018      	movs	r0, r3

08001c30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8001c30:	f380 8810 	msr	PRIMASK, r0
 8001c34:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001c36:	46c0      	nop			@ (mov r8, r8)
	...

08001c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001c40:	f3ef 8009 	mrs	r0, PSP
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <pxCurrentTCBConst>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	3820      	subs	r0, #32
 8001c4a:	6010      	str	r0, [r2, #0]
 8001c4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001c4e:	4644      	mov	r4, r8
 8001c50:	464d      	mov	r5, r9
 8001c52:	4656      	mov	r6, sl
 8001c54:	465f      	mov	r7, fp
 8001c56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001c58:	b508      	push	{r3, lr}
 8001c5a:	b672      	cpsid	i
 8001c5c:	f7ff f9fa 	bl	8001054 <vTaskSwitchContext>
 8001c60:	b662      	cpsie	i
 8001c62:	bc0c      	pop	{r2, r3}
 8001c64:	6811      	ldr	r1, [r2, #0]
 8001c66:	6808      	ldr	r0, [r1, #0]
 8001c68:	3010      	adds	r0, #16
 8001c6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001c6c:	46a0      	mov	r8, r4
 8001c6e:	46a9      	mov	r9, r5
 8001c70:	46b2      	mov	sl, r6
 8001c72:	46bb      	mov	fp, r7
 8001c74:	f380 8809 	msr	PSP, r0
 8001c78:	3820      	subs	r0, #32
 8001c7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001c7c:	4718      	bx	r3
 8001c7e:	46c0      	nop			@ (mov r8, r8)

08001c80 <pxCurrentTCBConst>:
 8001c80:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46c0      	nop			@ (mov r8, r8)

08001c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c8e:	f7ff ffc9 	bl	8001c24 <ulSetInterruptMaskFromISR>
 8001c92:	0003      	movs	r3, r0
 8001c94:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c96:	f7ff f8dd 	bl	8000e54 <xTaskIncrementTick>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d003      	beq.n	8001ca6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <SysTick_Handler+0x30>)
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	0552      	lsls	r2, r2, #21
 8001ca4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ffc1 	bl	8001c30 <vClearInterruptMaskFromISR>
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <vPortSetupTimerInterrupt+0x34>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <vPortSetupTimerInterrupt+0x38>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <vPortSetupTimerInterrupt+0x3c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	22fa      	movs	r2, #250	@ 0xfa
 8001cd2:	0091      	lsls	r1, r2, #2
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fa17 	bl	8000108 <__udivsi3>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	001a      	movs	r2, r3
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <vPortSetupTimerInterrupt+0x40>)
 8001ce0:	3a01      	subs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ce4:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <vPortSetupTimerInterrupt+0x34>)
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	e000e010 	.word	0xe000e010
 8001cf4:	e000e018 	.word	0xe000e018
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	e000e014 	.word	0xe000e014

08001d00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4393      	bics	r3, r2
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d205      	bcs.n	8001d2e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2207      	movs	r2, #7
 8001d26:	4393      	bics	r3, r2
 8001d28:	3308      	adds	r3, #8
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	e001      	b.n	8001d32 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001d32:	f7fe ff8b 	bl	8000c4c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <pvPortMalloc+0x94>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <pvPortMalloc+0x98>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	4393      	bics	r3, r2
 8001d44:	001a      	movs	r2, r3
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <pvPortMalloc+0x94>)
 8001d48:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01a      	beq.n	8001d86 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001d58:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <pvPortMalloc+0xa0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d813      	bhi.n	8001d86 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	18d2      	adds	r2, r2, r3
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d90b      	bls.n	8001d86 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <pvPortMalloc+0x94>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	18d3      	adds	r3, r2, r3
 8001d78:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	18d2      	adds	r2, r2, r3
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <pvPortMalloc+0x9c>)
 8001d84:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001d86:	f7fe ff6d 	bl	8000c64 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b004      	add	sp, #16
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20001990 	.word	0x20001990
 8001d98:	20000193 	.word	0x20000193
 8001d9c:	2000198c 	.word	0x2000198c
 8001da0:	000017f7 	.word	0x000017f7

08001da4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <vPortFree+0x14>
 8001db2:	b672      	cpsid	i
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	e7fd      	b.n	8001db4 <vPortFree+0x10>
}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <main>:
                         UBaseType_t                  uxPriority,
                         TaskHandle_t * const         pxCreatedTask );

// Main function
int main()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8001dc6:	f000 f827 	bl	8001e18 <SystemClock_Config>
	// Initialize LED pin
	BSP_LED_Init();
 8001dca:	f000 fae5 	bl	8002398 <BSP_LED_Init>
	// Initialize Debug Console
	BSP_Console_Init();
 8001dce:	f000 fb3d 	bl	800244c <BSP_Console_Init>
	// Create Tasks
	xTaskCreate(vTask1, "Task_1", 256, NULL, 1, NULL);
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	005a      	lsls	r2, r3, #1
 8001dd6:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <main+0x48>)
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <main+0x4c>)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	f7fe fd7b 	bl	80008de <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 2, NULL);
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	005a      	lsls	r2, r3, #1
 8001dec:	4908      	ldr	r1, [pc, #32]	@ (8001e10 <main+0x50>)
 8001dee:	4809      	ldr	r0, [pc, #36]	@ (8001e14 <main+0x54>)
 8001df0:	2300      	movs	r3, #0
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2302      	movs	r3, #2
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f7fe fd70 	bl	80008de <xTaskCreate>
	// Start the Scheduler
	vTaskStartScheduler();
 8001dfe:	f7fe fee3 	bl	8000bc8 <vTaskStartScheduler>
	while(1)
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	e7fd      	b.n	8001e02 <main+0x42>
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	08002718 	.word	0x08002718
 8001e0c:	08001f4d 	.word	0x08001f4d
 8001e10:	08002720 	.word	0x08002720
 8001e14:	08001f69 	.word	0x08001f69

08001e18 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 8001e22:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <SystemClock_Config+0x11c>)
 8001e24:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	02c9      	lsls	r1, r1, #11
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8001e34:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e3a:	2180      	movs	r1, #128	@ 0x80
 8001e3c:	0249      	lsls	r1, r1, #9
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	029b      	lsls	r3, r3, #10
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
		timeout--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <SystemClock_Config+0x48>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e66:	4935      	ldr	r1, [pc, #212]	@ (8001f3c <SystemClock_Config+0x124>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8001e6c:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	0249      	lsls	r1, r1, #9
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e86:	492e      	ldr	r1, [pc, #184]	@ (8001f40 <SystemClock_Config+0x128>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	0349      	lsls	r1, r1, #13
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8001e9a:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <SystemClock_Config+0x120>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	0449      	lsls	r1, r1, #17
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <SystemClock_Config+0x120>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	049b      	lsls	r3, r3, #18
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	607b      	str	r3, [r7, #4]
		timeout--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <SystemClock_Config+0xae>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ecc:	21f0      	movs	r1, #240	@ 0xf0
 8001ece:	438a      	bics	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001ed2:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ed6:	6852      	ldr	r2, [r2, #4]
 8001ed8:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <SystemClock_Config+0x120>)
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ee0:	4918      	ldr	r1, [pc, #96]	@ (8001f44 <SystemClock_Config+0x12c>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8001ee6:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <SystemClock_Config+0x120>)
 8001eea:	6852      	ldr	r2, [r2, #4]
 8001eec:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <SystemClock_Config+0x130>)
 8001ef0:	2211      	movs	r2, #17
 8001ef2:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <SystemClock_Config+0x120>)
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <SystemClock_Config+0x120>)
 8001efa:	2103      	movs	r1, #3
 8001efc:	438a      	bics	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <SystemClock_Config+0x120>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <SystemClock_Config+0x120>)
 8001f06:	2102      	movs	r1, #2
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <SystemClock_Config+0x120>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	603b      	str	r3, [r7, #0]
		timeout--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d002      	beq.n	8001f28 <SystemClock_Config+0x110>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f1      	bne.n	8001f0c <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8001f28:	f000 fb22 	bl	8002570 <SystemCoreClockUpdate>
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	000f4240 	.word	0x000f4240
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	fffe7fff 	.word	0xfffe7fff
 8001f40:	ffc3ffff 	.word	0xffc3ffff
 8001f44:	fffff8ff 	.word	0xfffff8ff
 8001f48:	40022000 	.word	0x40022000

08001f4c <vTask1>:

/*
 *	Task1 toggles LED every 300ms
 */
void vTask1 (void *pvParameters)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LED_Toggle();
 8001f54:	f000 fa6c 	bl	8002430 <BSP_LED_Toggle>
		vTaskDelay(300);
 8001f58:	2396      	movs	r3, #150	@ 0x96
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7fe fe0d 	bl	8000b7c <vTaskDelay>
		BSP_LED_Toggle();
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	e7f6      	b.n	8001f54 <vTask1+0x8>
	...

08001f68 <vTask2>:
}
/*
 *	Task2 sends a message to console every 1s
 */
void vTask2 (void *pvParameters)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint16_t count;
	count = 0;
 8001f70:	230e      	movs	r3, #14
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		my_printf("Hello %2d from task2\r\n", count);
 8001f78:	240e      	movs	r4, #14
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <vTask2+0x3c>)
 8001f80:	0011      	movs	r1, r2
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 f9ea 	bl	800235c <my_printf>
		count++;
 8001f88:	0021      	movs	r1, r4
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	3201      	adds	r2, #1
 8001f92:	801a      	strh	r2, [r3, #0]
		vTaskDelay(1000);
 8001f94:	23fa      	movs	r3, #250	@ 0xfa
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe fdef 	bl	8000b7c <vTaskDelay>
		my_printf("Hello %2d from task2\r\n", count);
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	e7ea      	b.n	8001f78 <vTask2+0x10>
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	08002728 	.word	0x08002728

08001fa8 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	if (str) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <printchar+0x26>
		**str = c;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8001fcc:	e00a      	b.n	8001fe4 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <printchar+0x44>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b40      	cmp	r3, #64	@ 0x40
 8001fda:	d1f9      	bne.n	8001fd0 <printchar+0x28>
		USART2->TDR = c;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <printchar+0x44>)
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40004400 	.word	0x40004400

08001ff0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	46c6      	mov	lr, r8
 8001ff4:	b500      	push	{lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8002002:	2400      	movs	r4, #0
 8002004:	2320      	movs	r3, #32
 8002006:	4698      	mov	r8, r3

	if (width > 0) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	dd16      	ble.n	800203c <prints+0x4c>
		register int len = 0;
 800200e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8002010:	68be      	ldr	r6, [r7, #8]
 8002012:	e001      	b.n	8002018 <prints+0x28>
 8002014:	3501      	adds	r5, #1
 8002016:	3601      	adds	r6, #1
 8002018:	7833      	ldrb	r3, [r6, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1fa      	bne.n	8002014 <prints+0x24>
		if (len >= width) width = 0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429d      	cmp	r5, r3
 8002022:	db02      	blt.n	800202a <prints+0x3a>
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	e002      	b.n	8002030 <prints+0x40>
		else width -= len;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1b5b      	subs	r3, r3, r5
 800202e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d001      	beq.n	800203c <prints+0x4c>
 8002038:	2330      	movs	r3, #48	@ 0x30
 800203a:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d119      	bne.n	8002078 <prints+0x88>
		for ( ; width > 0; --width) {
 8002044:	e008      	b.n	8002058 <prints+0x68>
			printchar (out, padchar);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4641      	mov	r1, r8
 800204a:	0018      	movs	r0, r3
 800204c:	f7ff ffac 	bl	8001fa8 <printchar>
			++pc;
 8002050:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3b01      	subs	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dcf3      	bgt.n	8002046 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 800205e:	e00b      	b.n	8002078 <prints+0x88>
		printchar (out, *string);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	001a      	movs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0011      	movs	r1, r2
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff ff9c 	bl	8001fa8 <printchar>
		++pc;
 8002070:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3301      	adds	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ef      	bne.n	8002060 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8002080:	e008      	b.n	8002094 <prints+0xa4>
		printchar (out, padchar);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4641      	mov	r1, r8
 8002086:	0018      	movs	r0, r3
 8002088:	f7ff ff8e 	bl	8001fa8 <printchar>
		++pc;
 800208c:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3b01      	subs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	dcf3      	bgt.n	8002082 <prints+0x92>
	}

	return pc;
 800209a:	0023      	movs	r3, r4
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bc80      	pop	{r7}
 80020a4:	46b8      	mov	r8, r7
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	46ce      	mov	lr, r9
 80020ac:	4647      	mov	r7, r8
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b089      	sub	sp, #36	@ 0x24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	4699      	mov	r9, r3
 80020c0:	2600      	movs	r6, #0
	register unsigned int u = i;
 80020c2:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10e      	bne.n	80020e8 <printi+0x40>
		print_buf[0] = '0';
 80020ca:	2114      	movs	r1, #20
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2230      	movs	r2, #48	@ 0x30
 80020d0:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2200      	movs	r2, #0
 80020d6:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80020d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020dc:	1879      	adds	r1, r7, r1
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff ff86 	bl	8001ff0 <prints>
 80020e4:	0003      	movs	r3, r0
 80020e6:	e04e      	b.n	8002186 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <printi+0x5c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0a      	cmp	r3, #10
 80020f2:	d107      	bne.n	8002104 <printi+0x5c>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da04      	bge.n	8002104 <printi+0x5c>
		neg = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	4699      	mov	r9, r3
		u = -i;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	425b      	negs	r3, r3
 8002102:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002104:	2314      	movs	r3, #20
 8002106:	18fc      	adds	r4, r7, r3
 8002108:	340b      	adds	r4, #11
	*s = '\0';
 800210a:	2300      	movs	r3, #0
 800210c:	7023      	strb	r3, [r4, #0]

	while (u) {
 800210e:	e019      	b.n	8002144 <printi+0x9c>
		t = u % b;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0019      	movs	r1, r3
 8002114:	0028      	movs	r0, r5
 8002116:	f7fe f87d 	bl	8000214 <__aeabi_uidivmod>
 800211a:	000b      	movs	r3, r1
 800211c:	4698      	mov	r8, r3
		if( t >= 10 )
 800211e:	4643      	mov	r3, r8
 8002120:	2b09      	cmp	r3, #9
 8002122:	dd02      	ble.n	800212a <printi+0x82>
			t += letbase - '0' - 10;
 8002124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002126:	3b3a      	subs	r3, #58	@ 0x3a
 8002128:	4498      	add	r8, r3
		*--s = t + '0';
 800212a:	4643      	mov	r3, r8
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3c01      	subs	r4, #1
 8002130:	3330      	adds	r3, #48	@ 0x30
 8002132:	b2db      	uxtb	r3, r3
 8002134:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0019      	movs	r1, r3
 800213a:	0028      	movs	r0, r5
 800213c:	f7fd ffe4 	bl	8000108 <__udivsi3>
 8002140:	0003      	movs	r3, r0
 8002142:	001d      	movs	r5, r3
	while (u) {
 8002144:	2d00      	cmp	r5, #0
 8002146:	d1e3      	bne.n	8002110 <printi+0x68>
	}

	if (neg) {
 8002148:	464b      	mov	r3, r9
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800214e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00d      	beq.n	8002170 <printi+0xc8>
 8002154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d009      	beq.n	8002170 <printi+0xc8>
			printchar (out, '-');
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212d      	movs	r1, #45	@ 0x2d
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff21 	bl	8001fa8 <printchar>
			++pc;
 8002166:	3601      	adds	r6, #1
			--width;
 8002168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216a:	3b01      	subs	r3, #1
 800216c:	643b      	str	r3, [r7, #64]	@ 0x40
 800216e:	e002      	b.n	8002176 <printi+0xce>
		}
		else {
			*--s = '-';
 8002170:	3c01      	subs	r4, #1
 8002172:	232d      	movs	r3, #45	@ 0x2d
 8002174:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8002176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	0021      	movs	r1, r4
 800217e:	f7ff ff37 	bl	8001ff0 <prints>
 8002182:	0003      	movs	r3, r0
 8002184:	18f3      	adds	r3, r6, r3
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b009      	add	sp, #36	@ 0x24
 800218c:	bcc0      	pop	{r6, r7}
 800218e:	46b9      	mov	r9, r7
 8002190:	46b0      	mov	r8, r6
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002194 <print>:

static int print(char **out, const char *format, va_list args )
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b08b      	sub	sp, #44	@ 0x2c
 8002198:	af04      	add	r7, sp, #16
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80021a0:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80021a2:	e0c6      	b.n	8002332 <print+0x19e>
		if (*format == '%') {
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b25      	cmp	r3, #37	@ 0x25
 80021aa:	d000      	beq.n	80021ae <print+0x1a>
 80021ac:	e0b2      	b.n	8002314 <print+0x180>
			++format;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80021b4:	2600      	movs	r6, #0
 80021b6:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <print+0x2e>
 80021c0:	e0bd      	b.n	800233e <print+0x1aa>
			if (*format == '%') goto out;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b25      	cmp	r3, #37	@ 0x25
 80021c8:	d100      	bne.n	80021cc <print+0x38>
 80021ca:	e0a5      	b.n	8002318 <print+0x184>
			if (*format == '-') {
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80021d2:	d10a      	bne.n	80021ea <print+0x56>
				++format;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80021da:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80021dc:	e005      	b.n	80021ea <print+0x56>
				++format;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80021e4:	2302      	movs	r3, #2
 80021e6:	4333      	orrs	r3, r6
 80021e8:	001e      	movs	r6, r3
			while (*format == '0') {
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b30      	cmp	r3, #48	@ 0x30
 80021f0:	d0f5      	beq.n	80021de <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80021f2:	e00b      	b.n	800220c <print+0x78>
				width *= 10;
 80021f4:	002b      	movs	r3, r5
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	195b      	adds	r3, r3, r5
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	001d      	movs	r5, r3
				width += *format - '0';
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3b30      	subs	r3, #48	@ 0x30
 8002204:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b2f      	cmp	r3, #47	@ 0x2f
 8002212:	d903      	bls.n	800221c <print+0x88>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b39      	cmp	r3, #57	@ 0x39
 800221a:	d9eb      	bls.n	80021f4 <print+0x60>
			}
			if( *format == 's' ) {
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b73      	cmp	r3, #115	@ 0x73
 8002222:	d10f      	bne.n	8002244 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800222e:	d000      	beq.n	8002232 <print+0x9e>
 8002230:	e000      	b.n	8002234 <print+0xa0>
 8002232:	4949      	ldr	r1, [pc, #292]	@ (8002358 <print+0x1c4>)
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	0033      	movs	r3, r6
 8002238:	002a      	movs	r2, r5
 800223a:	f7ff fed9 	bl	8001ff0 <prints>
 800223e:	0003      	movs	r3, r0
 8002240:	18e4      	adds	r4, r4, r3
				continue;
 8002242:	e073      	b.n	800232c <print+0x198>
			}
			if( *format == 'd' ) {
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b64      	cmp	r3, #100	@ 0x64
 800224a:	d10f      	bne.n	800226c <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1d1a      	adds	r2, r3, #4
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	2361      	movs	r3, #97	@ 0x61
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	9601      	str	r6, [sp, #4]
 800225c:	9500      	str	r5, [sp, #0]
 800225e:	2301      	movs	r3, #1
 8002260:	220a      	movs	r2, #10
 8002262:	f7ff ff21 	bl	80020a8 <printi>
 8002266:	0003      	movs	r3, r0
 8002268:	18e4      	adds	r4, r4, r3
				continue;
 800226a:	e05f      	b.n	800232c <print+0x198>
			}
			if( *format == 'x' ) {
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b78      	cmp	r3, #120	@ 0x78
 8002272:	d10f      	bne.n	8002294 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	2361      	movs	r3, #97	@ 0x61
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	9601      	str	r6, [sp, #4]
 8002284:	9500      	str	r5, [sp, #0]
 8002286:	2300      	movs	r3, #0
 8002288:	2210      	movs	r2, #16
 800228a:	f7ff ff0d 	bl	80020a8 <printi>
 800228e:	0003      	movs	r3, r0
 8002290:	18e4      	adds	r4, r4, r3
				continue;
 8002292:	e04b      	b.n	800232c <print+0x198>
			}
			if( *format == 'X' ) {
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b58      	cmp	r3, #88	@ 0x58
 800229a:	d10f      	bne.n	80022bc <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1d1a      	adds	r2, r3, #4
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	2341      	movs	r3, #65	@ 0x41
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	9601      	str	r6, [sp, #4]
 80022ac:	9500      	str	r5, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	2210      	movs	r2, #16
 80022b2:	f7ff fef9 	bl	80020a8 <printi>
 80022b6:	0003      	movs	r3, r0
 80022b8:	18e4      	adds	r4, r4, r3
				continue;
 80022ba:	e037      	b.n	800232c <print+0x198>
			}
			if( *format == 'u' ) {
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b75      	cmp	r3, #117	@ 0x75
 80022c2:	d10f      	bne.n	80022e4 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	2361      	movs	r3, #97	@ 0x61
 80022d0:	9302      	str	r3, [sp, #8]
 80022d2:	9601      	str	r6, [sp, #4]
 80022d4:	9500      	str	r5, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	220a      	movs	r2, #10
 80022da:	f7ff fee5 	bl	80020a8 <printi>
 80022de:	0003      	movs	r3, r0
 80022e0:	18e4      	adds	r4, r4, r3
				continue;
 80022e2:	e023      	b.n	800232c <print+0x198>
			}
			if( *format == 'c' ) {
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b63      	cmp	r3, #99	@ 0x63
 80022ea:	d11f      	bne.n	800232c <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	2114      	movs	r1, #20
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	2200      	movs	r2, #0
 8002300:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8002302:	1879      	adds	r1, r7, r1
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	0033      	movs	r3, r6
 8002308:	002a      	movs	r2, r5
 800230a:	f7ff fe71 	bl	8001ff0 <prints>
 800230e:	0003      	movs	r3, r0
 8002310:	18e4      	adds	r4, r4, r3
				continue;
 8002312:	e00b      	b.n	800232c <print+0x198>
			}
		}
		else {
		out:
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	e000      	b.n	800231a <print+0x186>
			if (*format == '%') goto out;
 8002318:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	001a      	movs	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fe3f 	bl	8001fa8 <printchar>
			++pc;
 800232a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <print+0x1a8>
 800233a:	e733      	b.n	80021a4 <print+0x10>
 800233c:	e000      	b.n	8002340 <print+0x1ac>
			if (*format == '\0') break;
 800233e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <print+0x1ba>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800234e:	0023      	movs	r3, r4
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b007      	add	sp, #28
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002358:	08002740 	.word	0x08002740

0800235c <my_printf>:

int my_printf(const char *format, ...)
{
 800235c:	b40f      	push	{r0, r1, r2, r3}
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8002364:	2314      	movs	r3, #20
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	0019      	movs	r1, r3
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff0f 	bl	8002194 <print>
 8002376:	0003      	movs	r3, r0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bc80      	pop	{r7}
 8002380:	bc08      	pop	{r3}
 8002382:	b004      	add	sp, #16
 8002384:	4718      	bx	r3

08002386 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
}
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002394:	46c0      	nop			@ (mov r8, r8)
 8002396:	e7fd      	b.n	8002394 <HardFault_Handler+0x4>

08002398 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <BSP_LED_Init+0x90>)
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <BSP_LED_Init+0x90>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0289      	lsls	r1, r1, #10
 80023a6:	430a      	orrs	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80023aa:	2390      	movs	r3, #144	@ 0x90
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2390      	movs	r3, #144	@ 0x90
 80023b2:	05db      	lsls	r3, r3, #23
 80023b4:	491d      	ldr	r1, [pc, #116]	@ (800242c <BSP_LED_Init+0x94>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80023ba:	2390      	movs	r3, #144	@ 0x90
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2390      	movs	r3, #144	@ 0x90
 80023c2:	05db      	lsls	r3, r3, #23
 80023c4:	2180      	movs	r1, #128	@ 0x80
 80023c6:	00c9      	lsls	r1, r1, #3
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 80023cc:	2390      	movs	r3, #144	@ 0x90
 80023ce:	05db      	lsls	r3, r3, #23
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	2390      	movs	r3, #144	@ 0x90
 80023d4:	05db      	lsls	r3, r3, #23
 80023d6:	2120      	movs	r1, #32
 80023d8:	438a      	bics	r2, r1
 80023da:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 80023dc:	2390      	movs	r3, #144	@ 0x90
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	2390      	movs	r3, #144	@ 0x90
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	4911      	ldr	r1, [pc, #68]	@ (800242c <BSP_LED_Init+0x94>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80023ec:	2390      	movs	r3, #144	@ 0x90
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	2390      	movs	r3, #144	@ 0x90
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	21c0      	movs	r1, #192	@ 0xc0
 80023f8:	0109      	lsls	r1, r1, #4
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80023fe:	2390      	movs	r3, #144	@ 0x90
 8002400:	05db      	lsls	r3, r3, #23
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	2390      	movs	r3, #144	@ 0x90
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	4908      	ldr	r1, [pc, #32]	@ (800242c <BSP_LED_Init+0x94>)
 800240a:	400a      	ands	r2, r1
 800240c:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800240e:	2390      	movs	r3, #144	@ 0x90
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	2390      	movs	r3, #144	@ 0x90
 8002416:	05db      	lsls	r3, r3, #23
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	0389      	lsls	r1, r1, #14
 800241c:	430a      	orrs	r2, r1
 800241e:	619a      	str	r2, [r3, #24]
}
 8002420:	46c0      	nop			@ (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	40021000 	.word	0x40021000
 800242c:	fffff3ff 	.word	0xfffff3ff

08002430 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8002434:	2390      	movs	r3, #144	@ 0x90
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	2390      	movs	r3, #144	@ 0x90
 800243c:	05db      	lsls	r3, r3, #23
 800243e:	2120      	movs	r1, #32
 8002440:	404a      	eors	r2, r1
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002450:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <BSP_Console_Init+0xb4>)
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <BSP_Console_Init+0xb4>)
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	0289      	lsls	r1, r1, #10
 800245a:	430a      	orrs	r2, r1
 800245c:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 800245e:	2390      	movs	r3, #144	@ 0x90
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2390      	movs	r3, #144	@ 0x90
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	21f0      	movs	r1, #240	@ 0xf0
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 800246e:	2390      	movs	r3, #144	@ 0x90
 8002470:	05db      	lsls	r3, r3, #23
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2390      	movs	r3, #144	@ 0x90
 8002476:	05db      	lsls	r3, r3, #23
 8002478:	21a0      	movs	r1, #160	@ 0xa0
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 800247e:	2390      	movs	r3, #144	@ 0x90
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	2390      	movs	r3, #144	@ 0x90
 8002486:	05db      	lsls	r3, r3, #23
 8002488:	491e      	ldr	r1, [pc, #120]	@ (8002504 <BSP_Console_Init+0xb8>)
 800248a:	400a      	ands	r2, r1
 800248c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800248e:	2390      	movs	r3, #144	@ 0x90
 8002490:	05db      	lsls	r3, r3, #23
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	2390      	movs	r3, #144	@ 0x90
 8002496:	05db      	lsls	r3, r3, #23
 8002498:	2188      	movs	r1, #136	@ 0x88
 800249a:	0149      	lsls	r1, r1, #5
 800249c:	430a      	orrs	r2, r1
 800249e:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <BSP_Console_Init+0xb4>)
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <BSP_Console_Init+0xb4>)
 80024a6:	2180      	movs	r1, #128	@ 0x80
 80024a8:	0289      	lsls	r1, r1, #10
 80024aa:	430a      	orrs	r2, r1
 80024ac:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <BSP_Console_Init+0xb4>)
 80024c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <BSP_Console_Init+0xb4>)
 80024c6:	4911      	ldr	r1, [pc, #68]	@ (800250c <BSP_Console_Init+0xc0>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	0209      	lsls	r1, r1, #8
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <BSP_Console_Init+0xc4>)
 80024de:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024e6:	210c      	movs	r1, #12
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <BSP_Console_Init+0xbc>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	40021000 	.word	0x40021000
 8002504:	ffff00ff 	.word	0xffff00ff
 8002508:	40004400 	.word	0x40004400
 800250c:	fffcffff 	.word	0xfffcffff
 8002510:	00000341 	.word	0x00000341

08002514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002514:	480d      	ldr	r0, [pc, #52]	@ (800254c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002516:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002518:	f000 f825 	bl	8002566 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480c      	ldr	r0, [pc, #48]	@ (8002550 <LoopForever+0x6>)
  ldr r1, =_edata
 800251e:	490d      	ldr	r1, [pc, #52]	@ (8002554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <LoopForever+0xe>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002534:	4c0a      	ldr	r4, [pc, #40]	@ (8002560 <LoopForever+0x16>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002542:	f000 f8a3 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002546:	f7ff fc3b 	bl	8001dc0 <main>

0800254a <LoopForever>:

LoopForever:
    b LoopForever
 800254a:	e7fe      	b.n	800254a <LoopForever>
  ldr   r0, =_estack
 800254c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002558:	08002788 	.word	0x08002788
  ldr r2, =_sbss
 800255c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002560:	20001994 	.word	0x20001994

08002564 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_COMP_IRQHandler>

08002566 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <SystemCoreClockUpdate+0xf8>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d011      	beq.n	80025ba <SystemCoreClockUpdate+0x4a>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d84f      	bhi.n	800263c <SystemCoreClockUpdate+0xcc>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <SystemCoreClockUpdate+0x3a>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d004      	beq.n	80025b2 <SystemCoreClockUpdate+0x42>
 80025a8:	e048      	b.n	800263c <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80025aa:	4b30      	ldr	r3, [pc, #192]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 80025ac:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <SystemCoreClockUpdate+0x100>)
 80025ae:	601a      	str	r2, [r3, #0]
      break;
 80025b0:	e048      	b.n	8002644 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 80025b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002670 <SystemCoreClockUpdate+0x100>)
 80025b6:	601a      	str	r2, [r3, #0]
      break;
 80025b8:	e044      	b.n	8002644 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80025ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <SystemCoreClockUpdate+0xf8>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	23f0      	movs	r3, #240	@ 0xf0
 80025c0:	039b      	lsls	r3, r3, #14
 80025c2:	4013      	ands	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <SystemCoreClockUpdate+0xf8>)
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	23c0      	movs	r3, #192	@ 0xc0
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	4013      	ands	r3, r2
 80025d0:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	3302      	adds	r3, #2
 80025d8:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <SystemCoreClockUpdate+0xf8>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	220f      	movs	r2, #15
 80025e0:	4013      	ands	r3, r2
 80025e2:	3301      	adds	r3, #1
 80025e4:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10a      	bne.n	8002606 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80025f0:	6839      	ldr	r1, [r7, #0]
 80025f2:	481f      	ldr	r0, [pc, #124]	@ (8002670 <SystemCoreClockUpdate+0x100>)
 80025f4:	f7fd fd88 	bl	8000108 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	435a      	muls	r2, r3
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 8002602:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8002604:	e01e      	b.n	8002644 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	23c0      	movs	r3, #192	@ 0xc0
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	429a      	cmp	r2, r3
 800260e:	d10a      	bne.n	8002626 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	4818      	ldr	r0, [pc, #96]	@ (8002674 <SystemCoreClockUpdate+0x104>)
 8002614:	f7fd fd78 	bl	8000108 <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	435a      	muls	r2, r3
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 8002622:	601a      	str	r2, [r3, #0]
      break;
 8002624:	e00e      	b.n	8002644 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	4811      	ldr	r0, [pc, #68]	@ (8002670 <SystemCoreClockUpdate+0x100>)
 800262a:	f7fd fd6d 	bl	8000108 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	001a      	movs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	435a      	muls	r2, r3
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 8002638:	601a      	str	r2, [r3, #0]
      break;
 800263a:	e003      	b.n	8002644 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 800263e:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <SystemCoreClockUpdate+0x100>)
 8002640:	601a      	str	r2, [r3, #0]
      break;
 8002642:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <SystemCoreClockUpdate+0xf8>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	220f      	movs	r2, #15
 800264c:	4013      	ands	r3, r2
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <SystemCoreClockUpdate+0x108>)
 8002650:	5cd3      	ldrb	r3, [r2, r3]
 8002652:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	40da      	lsrs	r2, r3
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <SystemCoreClockUpdate+0xfc>)
 800265e:	601a      	str	r2, [r3, #0]
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	20000008 	.word	0x20000008
 8002670:	007a1200 	.word	0x007a1200
 8002674:	02dc6c00 	.word	0x02dc6c00
 8002678:	08002770 	.word	0x08002770

0800267c <memset>:
 800267c:	0003      	movs	r3, r0
 800267e:	1882      	adds	r2, r0, r2
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	7019      	strb	r1, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2600      	movs	r6, #0
 8002690:	4c0c      	ldr	r4, [pc, #48]	@ (80026c4 <__libc_init_array+0x38>)
 8002692:	4d0d      	ldr	r5, [pc, #52]	@ (80026c8 <__libc_init_array+0x3c>)
 8002694:	1b64      	subs	r4, r4, r5
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	2600      	movs	r6, #0
 800269e:	f000 f823 	bl	80026e8 <_init>
 80026a2:	4c0a      	ldr	r4, [pc, #40]	@ (80026cc <__libc_init_array+0x40>)
 80026a4:	4d0a      	ldr	r5, [pc, #40]	@ (80026d0 <__libc_init_array+0x44>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	00b3      	lsls	r3, r6, #2
 80026b2:	58eb      	ldr	r3, [r5, r3]
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	00b3      	lsls	r3, r6, #2
 80026bc:	58eb      	ldr	r3, [r5, r3]
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	08002780 	.word	0x08002780
 80026c8:	08002780 	.word	0x08002780
 80026cc:	08002784 	.word	0x08002784
 80026d0:	08002780 	.word	0x08002780

080026d4 <memcpy>:
 80026d4:	2300      	movs	r3, #0
 80026d6:	b510      	push	{r4, lr}
 80026d8:	429a      	cmp	r2, r3
 80026da:	d100      	bne.n	80026de <memcpy+0xa>
 80026dc:	bd10      	pop	{r4, pc}
 80026de:	5ccc      	ldrb	r4, [r1, r3]
 80026e0:	54c4      	strb	r4, [r0, r3]
 80026e2:	3301      	adds	r3, #1
 80026e4:	e7f8      	b.n	80026d8 <memcpy+0x4>
	...

080026e8 <_init>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr

080026f4 <_fini>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr
