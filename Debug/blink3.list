
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080056fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e00  20000018  08005714  00007018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002e18  08005714  00007e18  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007907  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001942  00000000  00000000  0000e947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000858  00000000  00000000  00010290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000648  00000000  00000000  00010ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001ed0  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ada1  00000000  00000000  00013000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00074774  00000000  00000000  0001dda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00092515  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cbc  00000000  00000000  00092558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00094214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005014 	.word	0x08005014

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005014 	.word	0x08005014

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	d103      	bne.n	8000290 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00c      	b.n	80002aa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3308      	adds	r3, #8
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <vListInsert+0x2c>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d2f6      	bcs.n	8000298 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}

080002de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	6892      	ldr	r2, [r2, #8]
 80002f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	6852      	ldr	r2, [r2, #4]
 80002fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d103      	bne.n	8000312 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bd80      	pop	{r7, pc}

0800032e <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000338:	2301      	movs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <xQueueGenericReset+0x1e>
 8000346:	b672      	cpsid	i
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e7fd      	b.n	8000348 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <xQueueGenericReset+0x26>
 8000352:	e06a      	b.n	800042a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000358:	2b00      	cmp	r3, #0
 800035a:	d066      	beq.n	800042a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	2400      	movs	r4, #0
 8000366:	0c15      	lsrs	r5, r2, #16
 8000368:	0c19      	lsrs	r1, r3, #16
 800036a:	b2a8      	uxth	r0, r5
 800036c:	2800      	cmp	r0, #0
 800036e:	d104      	bne.n	800037a <xQueueGenericReset+0x4c>
 8000370:	b288      	uxth	r0, r1
 8000372:	2800      	cmp	r0, #0
 8000374:	d013      	beq.n	800039e <xQueueGenericReset+0x70>
 8000376:	1c10      	adds	r0, r2, #0
 8000378:	e004      	b.n	8000384 <xQueueGenericReset+0x56>
 800037a:	b289      	uxth	r1, r1
 800037c:	2900      	cmp	r1, #0
 800037e:	d10d      	bne.n	800039c <xQueueGenericReset+0x6e>
 8000380:	1c29      	adds	r1, r5, #0
 8000382:	1c18      	adds	r0, r3, #0
 8000384:	b292      	uxth	r2, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	435a      	muls	r2, r3
 800038a:	b283      	uxth	r3, r0
 800038c:	b289      	uxth	r1, r1
 800038e:	434b      	muls	r3, r1
 8000390:	0c12      	lsrs	r2, r2, #16
 8000392:	189b      	adds	r3, r3, r2
 8000394:	141b      	asrs	r3, r3, #16
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <xQueueGenericReset+0x70>
 800039c:	2401      	movs	r4, #1
 800039e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80003a0:	d143      	bne.n	800042a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80003a2:	f002 fc6d 	bl	8002c80 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	434b      	muls	r3, r1
 80003b4:	18d2      	adds	r2, r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	434b      	muls	r3, r1
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	2244      	movs	r2, #68	@ 0x44
 80003e2:	21ff      	movs	r1, #255	@ 0xff
 80003e4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2245      	movs	r2, #69	@ 0x45
 80003ea:	21ff      	movs	r1, #255	@ 0xff
 80003ec:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10d      	bne.n	8000410 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3310      	adds	r3, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fee3 	bl	80021cc <xTaskRemoveFromEventList>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d00c      	beq.n	8000424 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800040a:	f002 fc29 	bl	8002c60 <vPortYield>
 800040e:	e009      	b.n	8000424 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3310      	adds	r3, #16
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff03 	bl	8000220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	3324      	adds	r3, #36	@ 0x24
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fefe 	bl	8000220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000424:	f002 fc3e 	bl	8002ca4 <vPortExitCritical>
 8000428:	e001      	b.n	800042e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <xQueueGenericReset+0x10c>
 8000434:	b672      	cpsid	i
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}

08000444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	b08b      	sub	sp, #44	@ 0x2c
 8000448:	af02      	add	r7, sp, #8
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d065      	beq.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045c:	2000      	movs	r0, #0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0c19      	lsrs	r1, r3, #16
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c1e      	adds	r6, r3, #0
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0c1b      	lsrs	r3, r3, #16
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	1c15      	adds	r5, r2, #0
 800046e:	b28a      	uxth	r2, r1
 8000470:	2a00      	cmp	r2, #0
 8000472:	d105      	bne.n	8000480 <xQueueGenericCreate+0x3c>
 8000474:	b29a      	uxth	r2, r3
 8000476:	2a00      	cmp	r2, #0
 8000478:	d013      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	1c34      	adds	r4, r6, #0
 800047e:	e003      	b.n	8000488 <xQueueGenericCreate+0x44>
 8000480:	b29b      	uxth	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10c      	bne.n	80004a0 <xQueueGenericCreate+0x5c>
 8000486:	1c2c      	adds	r4, r5, #0
 8000488:	b2b3      	uxth	r3, r6
 800048a:	b2aa      	uxth	r2, r5
 800048c:	435a      	muls	r2, r3
 800048e:	b2a3      	uxth	r3, r4
 8000490:	b289      	uxth	r1, r1
 8000492:	434b      	muls	r3, r1
 8000494:	0c12      	lsrs	r2, r2, #16
 8000496:	189b      	adds	r3, r3, r2
 8000498:	141b      	asrs	r3, r3, #16
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <xQueueGenericCreate+0x5e>
 80004a0:	2001      	movs	r0, #1
 80004a2:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a4:	d140      	bne.n	8000528 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004ac:	3351      	adds	r3, #81	@ 0x51
 80004ae:	d83b      	bhi.n	8000528 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4353      	muls	r3, r2
 80004b6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3350      	adds	r3, #80	@ 0x50
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 fc77 	bl	8002db0 <pvPortMalloc>
 80004c2:	0003      	movs	r3, r0
 80004c4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00f      	beq.n	80004ec <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	3350      	adds	r3, #80	@ 0x50
 80004d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781c      	ldrb	r4, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f000 f82f 	bl	8000548 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004ea:	e023      	b.n	8000534 <xQueueGenericCreate+0xf0>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 80004ec:	f002 fda2 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80004f0:	0003      	movs	r3, r0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fcf4 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80004f8:	0003      	movs	r3, r0
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <xQueueGenericCreate+0xfc>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4013      	ands	r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d015      	beq.n	8000534 <xQueueGenericCreate+0xf0>
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <xQueueGenericCreate+0x100>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	3340      	adds	r3, #64	@ 0x40
 8000512:	b2db      	uxtb	r3, r3
 8000514:	0018      	movs	r0, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <xQueueGenericCreate+0x100>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f003 fa41 	bl	80039a8 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8000526:	e005      	b.n	8000534 <xQueueGenericCreate+0xf0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <xQueueGenericCreate+0xf2>
 800052e:	b672      	cpsid	i
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <xQueueGenericCreate+0xec>
            if( pxNewQueue != NULL )
 8000534:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000536:	69fb      	ldr	r3, [r7, #28]
    }
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	@ 0x24
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	200019c8 	.word	0x200019c8
 8000544:	20000008 	.word	0x20000008

08000548 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	001a      	movs	r2, r3
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff fed5 	bl	800032e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	1cfa      	adds	r2, r7, #3
 8000588:	214c      	movs	r1, #76	@ 0x4c
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fc8a 	bl	8002eaa <prvTraceGetQueueType>
 8000596:	0003      	movs	r3, r0
 8000598:	001a      	movs	r2, r3
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fc92 	bl	8003ec8 <prvTraceGetObjectHandle>
 80005a4:	0003      	movs	r3, r0
 80005a6:	001a      	movs	r2, r3
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fcf8 	bl	8002fa2 <prvTraceSetQueueNumberLow16>
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <prvInitialiseNewQueue+0x140>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fd0b 	bl	8002fd6 <prvTraceSetQueueNumberHigh16>
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fc71 	bl	8002eaa <prvTraceGetQueueType>
 80005c8:	0003      	movs	r3, r0
 80005ca:	001a      	movs	r2, r3
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 80005ce:	5c9c      	ldrb	r4, [r3, r2]
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fcc8 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 80005d8:	0003      	movs	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	0019      	movs	r1, r3
 80005de:	0020      	movs	r0, r4
 80005e0:	f003 fd22 	bl	8004028 <prvMarkObjectAsUsed>
 80005e4:	f002 fd26 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80005e8:	0003      	movs	r3, r0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fc78 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <prvInitialiseNewQueue+0x144>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4013      	ands	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d029      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fcbe 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <prvInitialiseNewQueue+0x144>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4013      	ands	r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01d      	beq.n	8000654 <prvInitialiseNewQueue+0x10c>
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fc45 	bl	8002eaa <prvTraceGetQueueType>
 8000620:	0003      	movs	r3, r0
 8000622:	001a      	movs	r2, r3
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000626:	5c9b      	ldrb	r3, [r3, r2]
 8000628:	3318      	adds	r3, #24
 800062a:	b2db      	uxtb	r3, r3
 800062c:	001d      	movs	r5, r3
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fc3a 	bl	8002eaa <prvTraceGetQueueType>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 800063c:	5c9c      	ldrb	r4, [r3, r2]
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fc91 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000646:	0003      	movs	r3, r0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	001a      	movs	r2, r3
 800064c:	0021      	movs	r1, r4
 800064e:	0028      	movs	r0, r5
 8000650:	f003 f9aa 	bl	80039a8 <prvTraceStoreKernelCall>
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fc27 	bl	8002eaa <prvTraceGetQueueType>
 800065c:	0003      	movs	r3, r0
 800065e:	001a      	movs	r2, r3
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <prvInitialiseNewQueue+0x13c>)
 8000662:	5c9c      	ldrb	r4, [r3, r2]
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fc7e 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 800066c:	0003      	movs	r3, r0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	0020      	movs	r0, r4
 8000676:	f003 fb3b 	bl	8003cf0 <prvTraceSetObjectState>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000008 	.word	0x20000008
 8000688:	200019ca 	.word	0x200019ca
 800068c:	200019c8 	.word	0x200019c8

08000690 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <xQueueGenericSend+0x22>
 80006ac:	b672      	cpsid	i
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	e7fd      	b.n	80006ae <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d103      	bne.n	80006c0 <xQueueGenericSend+0x30>
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <xQueueGenericSend+0x34>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e000      	b.n	80006c6 <xQueueGenericSend+0x36>
 80006c4:	2300      	movs	r3, #0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <xQueueGenericSend+0x40>
 80006ca:	b672      	cpsid	i
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	e7fd      	b.n	80006cc <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d103      	bne.n	80006de <xQueueGenericSend+0x4e>
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d101      	bne.n	80006e2 <xQueueGenericSend+0x52>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <xQueueGenericSend+0x54>
 80006e2:	2300      	movs	r3, #0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <xQueueGenericSend+0x5e>
 80006e8:	b672      	cpsid	i
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	e7fd      	b.n	80006ea <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006ee:	f001 ff57 	bl	80025a0 <xTaskGetSchedulerState>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d102      	bne.n	80006fc <xQueueGenericSend+0x6c>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <xQueueGenericSend+0x70>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <xQueueGenericSend+0x72>
 8000700:	2300      	movs	r3, #0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <xQueueGenericSend+0x7c>
 8000706:	b672      	cpsid	i
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	e7fd      	b.n	8000708 <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800070c:	f002 fab8 	bl	8002c80 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000718:	429a      	cmp	r2, r3
 800071a:	d303      	bcc.n	8000724 <xQueueGenericSend+0x94>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d000      	beq.n	8000724 <xQueueGenericSend+0x94>
 8000722:	e07f      	b.n	8000824 <xQueueGenericSend+0x194>
            {
                traceQUEUE_SEND( pxQueue );
 8000724:	f002 fc86 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f002 fbd8 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	4bc7      	ldr	r3, [pc, #796]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4013      	ands	r3, r2
 800073a:	b29b      	uxth	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d02e      	beq.n	800079e <xQueueGenericSend+0x10e>
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	0018      	movs	r0, r3
 8000744:	f002 fc1e 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000748:	0003      	movs	r3, r0
 800074a:	001a      	movs	r2, r3
 800074c:	4bc1      	ldr	r3, [pc, #772]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	4013      	ands	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d022      	beq.n	800079e <xQueueGenericSend+0x10e>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10b      	bne.n	8000776 <xQueueGenericSend+0xe6>
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fba2 	bl	8002eaa <prvTraceGetQueueType>
 8000766:	0003      	movs	r3, r0
 8000768:	001a      	movs	r2, r3
 800076a:	4bbb      	ldr	r3, [pc, #748]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 800076c:	5c9b      	ldrb	r3, [r3, r2]
 800076e:	3320      	adds	r3, #32
 8000770:	b2db      	uxtb	r3, r3
 8000772:	001d      	movs	r5, r3
 8000774:	e000      	b.n	8000778 <xQueueGenericSend+0xe8>
 8000776:	2525      	movs	r5, #37	@ 0x25
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fb95 	bl	8002eaa <prvTraceGetQueueType>
 8000780:	0003      	movs	r3, r0
 8000782:	001a      	movs	r2, r3
 8000784:	4bb4      	ldr	r3, [pc, #720]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000786:	5c9c      	ldrb	r4, [r3, r2]
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fbec 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000790:	0003      	movs	r3, r0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	001a      	movs	r2, r3
 8000796:	0021      	movs	r1, r4
 8000798:	0028      	movs	r0, r5
 800079a:	f003 f905 	bl	80039a8 <prvTraceStoreKernelCall>
 800079e:	6a3b      	ldr	r3, [r7, #32]
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fb82 	bl	8002eaa <prvTraceGetQueueType>
 80007a6:	0003      	movs	r3, r0
 80007a8:	001a      	movs	r2, r3
 80007aa:	4bab      	ldr	r3, [pc, #684]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 80007ac:	5c9c      	ldrb	r4, [r3, r2]
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fbd9 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 80007b6:	0003      	movs	r3, r0
 80007b8:	b2dd      	uxtb	r5, r3
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fb74 	bl	8002eaa <prvTraceGetQueueType>
 80007c2:	0003      	movs	r3, r0
 80007c4:	001a      	movs	r2, r3
 80007c6:	4ba4      	ldr	r3, [pc, #656]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 80007c8:	5c9b      	ldrb	r3, [r3, r2]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d005      	beq.n	80007da <xQueueGenericSend+0x14a>
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	e000      	b.n	80007dc <xQueueGenericSend+0x14c>
 80007da:	2300      	movs	r3, #0
 80007dc:	001a      	movs	r2, r3
 80007de:	0029      	movs	r1, r5
 80007e0:	0020      	movs	r0, r4
 80007e2:	f003 fa85 	bl	8003cf0 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fd22 	bl	8001236 <prvCopyDataToQueue>
 80007f2:	0003      	movs	r3, r0
 80007f4:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <xQueueGenericSend+0x182>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	3324      	adds	r3, #36	@ 0x24
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fce2 	bl	80021cc <xTaskRemoveFromEventList>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d007      	beq.n	800081c <xQueueGenericSend+0x18c>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800080c:	f002 fa28 	bl	8002c60 <vPortYield>
 8000810:	e004      	b.n	800081c <xQueueGenericSend+0x18c>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <xQueueGenericSend+0x18c>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000818:	f002 fa22 	bl	8002c60 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800081c:	f002 fa42 	bl	8002ca4 <vPortExitCritical>
                return pdPASS;
 8000820:	2301      	movs	r3, #1
 8000822:	e113      	b.n	8000a4c <xQueueGenericSend+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d140      	bne.n	80008ac <xQueueGenericSend+0x21c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800082a:	f002 fa3b 	bl	8002ca4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800082e:	f002 fc01 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000832:	0003      	movs	r3, r0
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fb53 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 800083a:	0003      	movs	r3, r0
 800083c:	001a      	movs	r2, r3
 800083e:	4b85      	ldr	r3, [pc, #532]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	4013      	ands	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d02e      	beq.n	80008a8 <xQueueGenericSend+0x218>
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	0018      	movs	r0, r3
 800084e:	f002 fb99 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	4b7f      	ldr	r3, [pc, #508]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4013      	ands	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d022      	beq.n	80008a8 <xQueueGenericSend+0x218>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <xQueueGenericSend+0x1f0>
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fb1d 	bl	8002eaa <prvTraceGetQueueType>
 8000870:	0003      	movs	r3, r0
 8000872:	001a      	movs	r2, r3
 8000874:	4b78      	ldr	r3, [pc, #480]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000876:	5c9b      	ldrb	r3, [r3, r2]
 8000878:	3348      	adds	r3, #72	@ 0x48
 800087a:	b2db      	uxtb	r3, r3
 800087c:	001d      	movs	r5, r3
 800087e:	e000      	b.n	8000882 <xQueueGenericSend+0x1f2>
 8000880:	254d      	movs	r5, #77	@ 0x4d
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fb10 	bl	8002eaa <prvTraceGetQueueType>
 800088a:	0003      	movs	r3, r0
 800088c:	001a      	movs	r2, r3
 800088e:	4b72      	ldr	r3, [pc, #456]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000890:	5c9c      	ldrb	r4, [r3, r2]
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	0018      	movs	r0, r3
 8000896:	f002 fb67 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 800089a:	0003      	movs	r3, r0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	001a      	movs	r2, r3
 80008a0:	0021      	movs	r1, r4
 80008a2:	0028      	movs	r0, r5
 80008a4:	f003 f880 	bl	80039a8 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e0cf      	b.n	8000a4c <xQueueGenericSend+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d106      	bne.n	80008c0 <xQueueGenericSend+0x230>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008b2:	2314      	movs	r3, #20
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fd6a 	bl	8002390 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008bc:	2301      	movs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008c0:	f002 f9f0 	bl	8002ca4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008c4:	f001 f92c 	bl	8001b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008c8:	f002 f9da 	bl	8002c80 <vPortEnterCritical>
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	2244      	movs	r2, #68	@ 0x44
 80008d0:	5c9b      	ldrb	r3, [r3, r2]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	d103      	bne.n	80008e0 <xQueueGenericSend+0x250>
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	2244      	movs	r2, #68	@ 0x44
 80008dc:	2100      	movs	r1, #0
 80008de:	5499      	strb	r1, [r3, r2]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	2245      	movs	r2, #69	@ 0x45
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	d103      	bne.n	80008f4 <xQueueGenericSend+0x264>
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	2245      	movs	r2, #69	@ 0x45
 80008f0:	2100      	movs	r1, #0
 80008f2:	5499      	strb	r1, [r3, r2]
 80008f4:	f002 f9d6 	bl	8002ca4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008f8:	1d3a      	adds	r2, r7, #4
 80008fa:	2314      	movs	r3, #20
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fd59 	bl	80023b8 <xTaskCheckForTimeOut>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d15c      	bne.n	80009c4 <xQueueGenericSend+0x334>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fd88 	bl	8001422 <prvIsQueueFull>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d04f      	beq.n	80009b6 <xQueueGenericSend+0x326>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8000916:	f002 fb8d 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 800091a:	0003      	movs	r3, r0
 800091c:	0018      	movs	r0, r3
 800091e:	f002 fadf 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4013      	ands	r3, r2
 800092c:	b29b      	uxth	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d02e      	beq.n	8000990 <xQueueGenericSend+0x300>
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fb25 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4013      	ands	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d022      	beq.n	8000990 <xQueueGenericSend+0x300>
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10b      	bne.n	8000968 <xQueueGenericSend+0x2d8>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	0018      	movs	r0, r3
 8000954:	f002 faa9 	bl	8002eaa <prvTraceGetQueueType>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 800095e:	5c9b      	ldrb	r3, [r3, r2]
 8000960:	3370      	adds	r3, #112	@ 0x70
 8000962:	b2db      	uxtb	r3, r3
 8000964:	001d      	movs	r5, r3
 8000966:	e000      	b.n	800096a <xQueueGenericSend+0x2da>
 8000968:	2575      	movs	r5, #117	@ 0x75
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fa9c 	bl	8002eaa <prvTraceGetQueueType>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000978:	5c9c      	ldrb	r4, [r3, r2]
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	0018      	movs	r0, r3
 800097e:	f002 faf3 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000982:	0003      	movs	r3, r0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	001a      	movs	r2, r3
 8000988:	0021      	movs	r1, r4
 800098a:	0028      	movs	r0, r5
 800098c:	f003 f80c 	bl	80039a8 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	3310      	adds	r3, #16
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fb7b 	bl	8002094 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fcca 	bl	800133a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009a6:	f001 f8c7 	bl	8001b38 <xTaskResumeAll>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d000      	beq.n	80009b0 <xQueueGenericSend+0x320>
 80009ae:	e6ad      	b.n	800070c <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 80009b0:	f002 f956 	bl	8002c60 <vPortYield>
 80009b4:	e6aa      	b.n	800070c <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fcbe 	bl	800133a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009be:	f001 f8bb 	bl	8001b38 <xTaskResumeAll>
 80009c2:	e6a3      	b.n	800070c <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fcb7 	bl	800133a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009cc:	f001 f8b4 	bl	8001b38 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80009d0:	f002 fb30 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80009d4:	0003      	movs	r3, r0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 fa82 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80009dc:	0003      	movs	r3, r0
 80009de:	001a      	movs	r2, r3
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4013      	ands	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02e      	beq.n	8000a4a <xQueueGenericSend+0x3ba>
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 fac8 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 80009f4:	0003      	movs	r3, r0
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <xQueueGenericSend+0x3c4>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4013      	ands	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d022      	beq.n	8000a4a <xQueueGenericSend+0x3ba>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10b      	bne.n	8000a22 <xQueueGenericSend+0x392>
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fa4c 	bl	8002eaa <prvTraceGetQueueType>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000a18:	5c9b      	ldrb	r3, [r3, r2]
 8000a1a:	3348      	adds	r3, #72	@ 0x48
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	001d      	movs	r5, r3
 8000a20:	e000      	b.n	8000a24 <xQueueGenericSend+0x394>
 8000a22:	254d      	movs	r5, #77	@ 0x4d
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fa3f 	bl	8002eaa <prvTraceGetQueueType>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	001a      	movs	r2, r3
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <xQueueGenericSend+0x3c8>)
 8000a32:	5c9c      	ldrb	r4, [r3, r2]
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fa96 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	001a      	movs	r2, r3
 8000a42:	0021      	movs	r1, r4
 8000a44:	0028      	movs	r0, r5
 8000a46:	f002 ffaf 	bl	80039a8 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8000a4a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00a      	add	sp, #40	@ 0x28
 8000a52:	bdb0      	pop	{r4, r5, r7, pc}
 8000a54:	200019c8 	.word	0x200019c8
 8000a58:	20000008 	.word	0x20000008

08000a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <xQueueReceive+0x20>
 8000a76:	b672      	cpsid	i
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <xQueueReceive+0x2e>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <xQueueReceive+0x32>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <xQueueReceive+0x34>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <xQueueReceive+0x3e>
 8000a94:	b672      	cpsid	i
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	e7fd      	b.n	8000a96 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a9a:	f001 fd81 	bl	80025a0 <xTaskGetSchedulerState>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d102      	bne.n	8000aa8 <xQueueReceive+0x4c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <xQueueReceive+0x50>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <xQueueReceive+0x52>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <xQueueReceive+0x5c>
 8000ab2:	b672      	cpsid	i
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ab8:	f002 f8e2 	bl	8002c80 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <xQueueReceive+0x6e>
 8000ac8:	e07d      	b.n	8000bc6 <xQueueReceive+0x16a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fc0c 	bl	80012ee <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000ad6:	f002 faad 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000ada:	0003      	movs	r3, r0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 f9ff 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4bd2      	ldr	r3, [pc, #840]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4013      	ands	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d029      	beq.n	8000b46 <xQueueReceive+0xea>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 fa45 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000afa:	0003      	movs	r3, r0
 8000afc:	001a      	movs	r2, r3
 8000afe:	4bcc      	ldr	r3, [pc, #816]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01d      	beq.n	8000b46 <xQueueReceive+0xea>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f9cc 	bl	8002eaa <prvTraceGetQueueType>
 8000b12:	0003      	movs	r3, r0
 8000b14:	001a      	movs	r2, r3
 8000b16:	4bc7      	ldr	r3, [pc, #796]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b18:	5c9b      	ldrb	r3, [r3, r2]
 8000b1a:	3328      	adds	r3, #40	@ 0x28
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	001d      	movs	r5, r3
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 f9c1 	bl	8002eaa <prvTraceGetQueueType>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	4bc1      	ldr	r3, [pc, #772]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b2e:	5c9c      	ldrb	r4, [r3, r2]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 fa18 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	0021      	movs	r1, r4
 8000b40:	0028      	movs	r0, r5
 8000b42:	f002 ff31 	bl	80039a8 <prvTraceStoreKernelCall>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f002 f9ae 	bl	8002eaa <prvTraceGetQueueType>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	001a      	movs	r2, r3
 8000b52:	4bb8      	ldr	r3, [pc, #736]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b54:	5c9c      	ldrb	r4, [r3, r2]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 fa05 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	b2dd      	uxtb	r5, r3
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 f9a0 	bl	8002eaa <prvTraceGetQueueType>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	4bb1      	ldr	r3, [pc, #708]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000b70:	5c9b      	ldrb	r3, [r3, r2]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d108      	bne.n	8000b88 <xQueueReceive+0x12c>
 8000b76:	f002 fa5d 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 f9a1 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8000b82:	0003      	movs	r3, r0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	e004      	b.n	8000b92 <xQueueReceive+0x136>
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	001a      	movs	r2, r3
 8000b94:	0029      	movs	r1, r5
 8000b96:	0020      	movs	r0, r4
 8000b98:	f003 f8aa 	bl	8003cf0 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <xQueueReceive+0x162>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	3310      	adds	r3, #16
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fb0b 	bl	80021cc <xTaskRemoveFromEventList>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <xQueueReceive+0x162>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bba:	f002 f851 	bl	8002c60 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bbe:	f002 f871 	bl	8002ca4 <vPortExitCritical>
                return pdPASS;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e12f      	b.n	8000e26 <xQueueReceive+0x3ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d13b      	bne.n	8000c44 <xQueueReceive+0x1e8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bcc:	f002 f86a 	bl	8002ca4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bd0:	f002 fa30 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 f982 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	001a      	movs	r2, r3
 8000be0:	4b93      	ldr	r3, [pc, #588]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	4013      	ands	r3, r2
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d029      	beq.n	8000c40 <xQueueReceive+0x1e4>
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 f9c8 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01d      	beq.n	8000c40 <xQueueReceive+0x1e4>
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 f94f 	bl	8002eaa <prvTraceGetQueueType>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4b88      	ldr	r3, [pc, #544]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000c12:	5c9b      	ldrb	r3, [r3, r2]
 8000c14:	3350      	adds	r3, #80	@ 0x50
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	001d      	movs	r5, r3
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 f944 	bl	8002eaa <prvTraceGetQueueType>
 8000c22:	0003      	movs	r3, r0
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b83      	ldr	r3, [pc, #524]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000c28:	5c9c      	ldrb	r4, [r3, r2]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 f99b 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000c32:	0003      	movs	r3, r0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	001a      	movs	r2, r3
 8000c38:	0021      	movs	r1, r4
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	f002 feb4 	bl	80039a8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e0f0      	b.n	8000e26 <xQueueReceive+0x3ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <xQueueReceive+0x1fc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 fb9e 	bl	8002390 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c58:	f002 f824 	bl	8002ca4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c5c:	f000 ff60 	bl	8001b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c60:	f002 f80e 	bl	8002c80 <vPortEnterCritical>
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2244      	movs	r2, #68	@ 0x44
 8000c68:	5c9b      	ldrb	r3, [r3, r2]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	d103      	bne.n	8000c78 <xQueueReceive+0x21c>
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	2244      	movs	r2, #68	@ 0x44
 8000c74:	2100      	movs	r1, #0
 8000c76:	5499      	strb	r1, [r3, r2]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2245      	movs	r2, #69	@ 0x45
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	d103      	bne.n	8000c8c <xQueueReceive+0x230>
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2245      	movs	r2, #69	@ 0x45
 8000c88:	2100      	movs	r1, #0
 8000c8a:	5499      	strb	r1, [r3, r2]
 8000c8c:	f002 f80a 	bl	8002ca4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	2314      	movs	r3, #20
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fb8d 	bl	80023b8 <xTaskCheckForTimeOut>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d000      	beq.n	8000ca4 <xQueueReceive+0x248>
 8000ca2:	e07a      	b.n	8000d9a <xQueueReceive+0x33e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fba5 	bl	80013f6 <prvIsQueueEmpty>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d06d      	beq.n	8000d8c <xQueueReceive+0x330>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8000cb0:	f002 f9c0 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f002 f912 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d029      	beq.n	8000d20 <xQueueReceive+0x2c4>
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 f958 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b55      	ldr	r3, [pc, #340]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01d      	beq.n	8000d20 <xQueueReceive+0x2c4>
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f002 f8df 	bl	8002eaa <prvTraceGetQueueType>
 8000cec:	0003      	movs	r3, r0
 8000cee:	001a      	movs	r2, r3
 8000cf0:	4b50      	ldr	r3, [pc, #320]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000cf2:	5c9b      	ldrb	r3, [r3, r2]
 8000cf4:	3368      	adds	r3, #104	@ 0x68
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	001d      	movs	r5, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f002 f8d4 	bl	8002eaa <prvTraceGetQueueType>
 8000d02:	0003      	movs	r3, r0
 8000d04:	001a      	movs	r2, r3
 8000d06:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000d08:	5c9c      	ldrb	r4, [r3, r2]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 f92b 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000d12:	0003      	movs	r3, r0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	001a      	movs	r2, r3
 8000d18:	0021      	movs	r1, r4
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	f002 fe44 	bl	80039a8 <prvTraceStoreKernelCall>
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 f8c1 	bl	8002eaa <prvTraceGetQueueType>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000d2e:	5c9b      	ldrb	r3, [r3, r2]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d018      	beq.n	8000d66 <xQueueReceive+0x30a>
 8000d34:	f002 f97e 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 f8d0 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <xQueueReceive+0x30a>
 8000d50:	f002 f970 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000d54:	0003      	movs	r3, r0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 f8b4 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f003 f81d 	bl	8003da0 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3324      	adds	r3, #36	@ 0x24
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 f990 	bl	8002094 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fadf 	bl	800133a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d7c:	f000 fedc 	bl	8001b38 <xTaskResumeAll>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d000      	beq.n	8000d86 <xQueueReceive+0x32a>
 8000d84:	e698      	b.n	8000ab8 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8000d86:	f001 ff6b 	bl	8002c60 <vPortYield>
 8000d8a:	e695      	b.n	8000ab8 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 fad3 	bl	800133a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d94:	f000 fed0 	bl	8001b38 <xTaskResumeAll>
 8000d98:	e68e      	b.n	8000ab8 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 facc 	bl	800133a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000da2:	f000 fec9 	bl	8001b38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fb24 	bl	80013f6 <prvIsQueueEmpty>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d100      	bne.n	8000db4 <xQueueReceive+0x358>
 8000db2:	e681      	b.n	8000ab8 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000db4:	f002 f93e 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000db8:	0003      	movs	r3, r0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f002 f890 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d029      	beq.n	8000e24 <xQueueReceive+0x3c8>
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 f8d6 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	001a      	movs	r2, r3
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <xQueueReceive+0x3d4>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	4013      	ands	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01d      	beq.n	8000e24 <xQueueReceive+0x3c8>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f002 f85d 	bl	8002eaa <prvTraceGetQueueType>
 8000df0:	0003      	movs	r3, r0
 8000df2:	001a      	movs	r2, r3
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	3350      	adds	r3, #80	@ 0x50
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	001d      	movs	r5, r3
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f002 f852 	bl	8002eaa <prvTraceGetQueueType>
 8000e06:	0003      	movs	r3, r0
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <xQueueReceive+0x3d8>)
 8000e0c:	5c9c      	ldrb	r4, [r3, r2]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f002 f8a9 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000e16:	0003      	movs	r3, r0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	0028      	movs	r0, r5
 8000e20:	f002 fdc2 	bl	80039a8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8000e24:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b00a      	add	sp, #40	@ 0x28
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	200019c8 	.word	0x200019c8
 8000e34:	20000008 	.word	0x20000008

08000e38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	61bb      	str	r3, [r7, #24]
    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <xQueueSemaphoreTake+0x1e>
 8000e50:	b672      	cpsid	i
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	e7fd      	b.n	8000e52 <xQueueSemaphoreTake+0x1a>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <xQueueSemaphoreTake+0x2c>
 8000e5e:	b672      	cpsid	i
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	e7fd      	b.n	8000e60 <xQueueSemaphoreTake+0x28>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e64:	f001 fb9c 	bl	80025a0 <xTaskGetSchedulerState>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d102      	bne.n	8000e72 <xQueueSemaphoreTake+0x3a>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <xQueueSemaphoreTake+0x3e>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <xQueueSemaphoreTake+0x40>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <xQueueSemaphoreTake+0x4a>
 8000e7c:	b672      	cpsid	i
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	e7fd      	b.n	8000e7e <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e82:	f001 fefd 	bl	8002c80 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8a:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d100      	bne.n	8000e94 <xQueueSemaphoreTake+0x5c>
 8000e92:	e077      	b.n	8000f84 <xQueueSemaphoreTake+0x14c>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000e94:	f002 f8ce 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f002 f820 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4bd1      	ldr	r3, [pc, #836]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d029      	beq.n	8000f04 <xQueueSemaphoreTake+0xcc>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 f866 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	001a      	movs	r2, r3
 8000ebc:	4bcb      	ldr	r3, [pc, #812]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01d      	beq.n	8000f04 <xQueueSemaphoreTake+0xcc>
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 ffed 	bl	8002eaa <prvTraceGetQueueType>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	4bc6      	ldr	r3, [pc, #792]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	3328      	adds	r3, #40	@ 0x28
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	001d      	movs	r5, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 ffe2 	bl	8002eaa <prvTraceGetQueueType>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4bc1      	ldr	r3, [pc, #772]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000eec:	5c9c      	ldrb	r4, [r3, r2]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f002 f839 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	001a      	movs	r2, r3
 8000efc:	0021      	movs	r1, r4
 8000efe:	0028      	movs	r0, r5
 8000f00:	f002 fd52 	bl	80039a8 <prvTraceStoreKernelCall>
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 ffcf 	bl	8002eaa <prvTraceGetQueueType>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	001a      	movs	r2, r3
 8000f10:	4bb7      	ldr	r3, [pc, #732]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000f12:	5c9c      	ldrb	r4, [r3, r2]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f002 f826 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	b2dd      	uxtb	r5, r3
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f001 ffc1 	bl	8002eaa <prvTraceGetQueueType>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	4bb0      	ldr	r3, [pc, #704]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000f2e:	5c9b      	ldrb	r3, [r3, r2]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d108      	bne.n	8000f46 <xQueueSemaphoreTake+0x10e>
 8000f34:	f002 f87e 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 ffc2 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8000f40:	0003      	movs	r3, r0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	e004      	b.n	8000f50 <xQueueSemaphoreTake+0x118>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	001a      	movs	r2, r3
 8000f52:	0029      	movs	r1, r5
 8000f54:	0020      	movs	r0, r4
 8000f56:	f002 fecb 	bl	8003cf0 <prvTraceSetObjectState>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	639a      	str	r2, [r3, #56]	@ 0x38
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <xQueueSemaphoreTake+0x144>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 f92c 	bl	80021cc <xTaskRemoveFromEventList>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <xQueueSemaphoreTake+0x144>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f78:	f001 fe72 	bl	8002c60 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f7c:	f001 fe92 	bl	8002ca4 <vPortExitCritical>
                return pdPASS;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e12f      	b.n	80011e4 <xQueueSemaphoreTake+0x3ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d13b      	bne.n	8001002 <xQueueSemaphoreTake+0x1ca>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000f8a:	f001 fe8b 	bl	8002ca4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f8e:	f002 f851 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0018      	movs	r0, r3
 8000f96:	f001 ffa3 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	4b93      	ldr	r3, [pc, #588]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d029      	beq.n	8000ffe <xQueueSemaphoreTake+0x1c6>
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 ffe9 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d01d      	beq.n	8000ffe <xQueueSemaphoreTake+0x1c6>
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 ff70 	bl	8002eaa <prvTraceGetQueueType>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b88      	ldr	r3, [pc, #544]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	3350      	adds	r3, #80	@ 0x50
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	001d      	movs	r5, r3
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 ff65 	bl	8002eaa <prvTraceGetQueueType>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	4b82      	ldr	r3, [pc, #520]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 8000fe6:	5c9c      	ldrb	r4, [r3, r2]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 ffbc 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	0028      	movs	r0, r5
 8000ffa:	f002 fcd5 	bl	80039a8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e0f0      	b.n	80011e4 <xQueueSemaphoreTake+0x3ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <xQueueSemaphoreTake+0x1de>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001008:	230c      	movs	r3, #12
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	0018      	movs	r0, r3
 800100e:	f001 f9bf 	bl	8002390 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001016:	f001 fe45 	bl	8002ca4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800101a:	f000 fd81 	bl	8001b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800101e:	f001 fe2f 	bl	8002c80 <vPortEnterCritical>
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2244      	movs	r2, #68	@ 0x44
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	3301      	adds	r3, #1
 800102c:	d103      	bne.n	8001036 <xQueueSemaphoreTake+0x1fe>
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2244      	movs	r2, #68	@ 0x44
 8001032:	2100      	movs	r1, #0
 8001034:	5499      	strb	r1, [r3, r2]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2245      	movs	r2, #69	@ 0x45
 800103a:	5c9b      	ldrb	r3, [r3, r2]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	d103      	bne.n	800104a <xQueueSemaphoreTake+0x212>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2245      	movs	r2, #69	@ 0x45
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]
 800104a:	f001 fe2b 	bl	8002ca4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800104e:	003a      	movs	r2, r7
 8001050:	230c      	movs	r3, #12
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f001 f9ae 	bl	80023b8 <xTaskCheckForTimeOut>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d000      	beq.n	8001062 <xQueueSemaphoreTake+0x22a>
 8001060:	e07a      	b.n	8001158 <xQueueSemaphoreTake+0x320>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	0018      	movs	r0, r3
 8001066:	f000 f9c6 	bl	80013f6 <prvIsQueueEmpty>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d06d      	beq.n	800114a <xQueueSemaphoreTake+0x312>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800106e:	f001 ffe1 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001072:	0003      	movs	r3, r0
 8001074:	0018      	movs	r0, r3
 8001076:	f001 ff33 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 800107a:	0003      	movs	r3, r0
 800107c:	001a      	movs	r2, r3
 800107e:	4b5b      	ldr	r3, [pc, #364]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	4013      	ands	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d029      	beq.n	80010de <xQueueSemaphoreTake+0x2a6>
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	0018      	movs	r0, r3
 800108e:	f001 ff79 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8001092:	0003      	movs	r3, r0
 8001094:	001a      	movs	r2, r3
 8001096:	4b55      	ldr	r3, [pc, #340]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4013      	ands	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01d      	beq.n	80010de <xQueueSemaphoreTake+0x2a6>
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 ff00 	bl	8002eaa <prvTraceGetQueueType>
 80010aa:	0003      	movs	r3, r0
 80010ac:	001a      	movs	r2, r3
 80010ae:	4b50      	ldr	r3, [pc, #320]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 80010b0:	5c9b      	ldrb	r3, [r3, r2]
 80010b2:	3368      	adds	r3, #104	@ 0x68
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	001d      	movs	r5, r3
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fef5 	bl	8002eaa <prvTraceGetQueueType>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 80010c6:	5c9c      	ldrb	r4, [r3, r2]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 ff4c 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 80010d0:	0003      	movs	r3, r0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	001a      	movs	r2, r3
 80010d6:	0021      	movs	r1, r4
 80010d8:	0028      	movs	r0, r5
 80010da:	f002 fc65 	bl	80039a8 <prvTraceStoreKernelCall>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 fee2 	bl	8002eaa <prvTraceGetQueueType>
 80010e6:	0003      	movs	r3, r0
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b41      	ldr	r3, [pc, #260]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d018      	beq.n	8001124 <xQueueSemaphoreTake+0x2ec>
 80010f2:	f001 ff9f 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80010f6:	0003      	movs	r3, r0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fef1 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80010fe:	0003      	movs	r3, r0
 8001100:	001a      	movs	r2, r3
 8001102:	4b3a      	ldr	r3, [pc, #232]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4013      	ands	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00a      	beq.n	8001124 <xQueueSemaphoreTake+0x2ec>
 800110e:	f001 ff91 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001112:	0003      	movs	r3, r0
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fed5 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800111a:	0003      	movs	r3, r0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	0018      	movs	r0, r3
 8001120:	f002 fe3e 	bl	8003da0 <prvTraceSetTaskInstanceFinished>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	3324      	adds	r3, #36	@ 0x24
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f000 ffb1 	bl	8002094 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f900 	bl	800133a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800113a:	f000 fcfd 	bl	8001b38 <xTaskResumeAll>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d000      	beq.n	8001144 <xQueueSemaphoreTake+0x30c>
 8001142:	e69e      	b.n	8000e82 <xQueueSemaphoreTake+0x4a>
                {
                    portYIELD_WITHIN_API();
 8001144:	f001 fd8c 	bl	8002c60 <vPortYield>
 8001148:	e69b      	b.n	8000e82 <xQueueSemaphoreTake+0x4a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f8f4 	bl	800133a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001152:	f000 fcf1 	bl	8001b38 <xTaskResumeAll>
 8001156:	e694      	b.n	8000e82 <xQueueSemaphoreTake+0x4a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f8ed 	bl	800133a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001160:	f000 fcea 	bl	8001b38 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	0018      	movs	r0, r3
 8001168:	f000 f945 	bl	80013f6 <prvIsQueueEmpty>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d100      	bne.n	8001172 <xQueueSemaphoreTake+0x33a>
 8001170:	e687      	b.n	8000e82 <xQueueSemaphoreTake+0x4a>
                        taskEXIT_CRITICAL();
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001172:	f001 ff5f 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001176:	0003      	movs	r3, r0
 8001178:	0018      	movs	r0, r3
 800117a:	f001 feb1 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 800117e:	0003      	movs	r3, r0
 8001180:	001a      	movs	r2, r3
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	4013      	ands	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d029      	beq.n	80011e2 <xQueueSemaphoreTake+0x3aa>
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	0018      	movs	r0, r3
 8001192:	f001 fef7 	bl	8002f84 <prvTraceGetQueueNumberHigh16>
 8001196:	0003      	movs	r3, r0
 8001198:	001a      	movs	r2, r3
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <xQueueSemaphoreTake+0x3b4>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	4013      	ands	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01d      	beq.n	80011e2 <xQueueSemaphoreTake+0x3aa>
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fe7e 	bl	8002eaa <prvTraceGetQueueType>
 80011ae:	0003      	movs	r3, r0
 80011b0:	001a      	movs	r2, r3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 80011b4:	5c9b      	ldrb	r3, [r3, r2]
 80011b6:	3350      	adds	r3, #80	@ 0x50
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	001d      	movs	r5, r3
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 fe73 	bl	8002eaa <prvTraceGetQueueType>
 80011c4:	0003      	movs	r3, r0
 80011c6:	001a      	movs	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <xQueueSemaphoreTake+0x3b8>)
 80011ca:	5c9c      	ldrb	r4, [r3, r2]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 feca 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 80011d4:	0003      	movs	r3, r0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	001a      	movs	r2, r3
 80011da:	0021      	movs	r1, r4
 80011dc:	0028      	movs	r0, r5
 80011de:	f002 fbe3 	bl	80039a8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 80011e2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b008      	add	sp, #32
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	200019c8 	.word	0x200019c8
 80011f0:	20000008 	.word	0x20000008

080011f4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	224c      	movs	r2, #76	@ 0x4c
 800122c:	5c9b      	ldrb	r3, [r3, r2]
    }
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}

08001236 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124a:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d043      	beq.n	80012dc <prvCopyDataToQueue+0xa6>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d119      	bne.n	800128e <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6858      	ldr	r0, [r3, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	0019      	movs	r1, r3
 8001266:	f003 fecb 	bl	8005000 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	18d2      	adds	r2, r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	429a      	cmp	r2, r3
 8001282:	d32b      	bcc.n	80012dc <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	e026      	b.n	80012dc <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68d8      	ldr	r0, [r3, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	0019      	movs	r1, r3
 800129a:	f003 feb1 	bl	8005000 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	425b      	negs	r3, r3
 80012a8:	18d2      	adds	r2, r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d207      	bcs.n	80012ca <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	425b      	negs	r3, r3
 80012c4:	18d2      	adds	r2, r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d105      	bne.n	80012dc <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3b01      	subs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80012e4:	693b      	ldr	r3, [r7, #16]
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b006      	add	sp, #24
 80012ec:	bd80      	pop	{r7, pc}

080012ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d018      	beq.n	8001332 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	18d2      	adds	r2, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	429a      	cmp	r2, r3
 8001318:	d303      	bcc.n	8001322 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0018      	movs	r0, r3
 800132e:	f003 fe67 	bl	8005000 <memcpy>
    }
}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}

0800133a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001342:	f001 fc9d 	bl	8002c80 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	2145      	movs	r1, #69	@ 0x45
 800134e:	5c52      	ldrb	r2, [r2, r1]
 8001350:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001352:	e013      	b.n	800137c <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	2b00      	cmp	r3, #0
 800135a:	d016      	beq.n	800138a <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3324      	adds	r3, #36	@ 0x24
 8001360:	0018      	movs	r0, r3
 8001362:	f000 ff33 	bl	80021cc <xTaskRemoveFromEventList>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800136a:	f001 f873 	bl	8002454 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800136e:	210f      	movs	r1, #15
 8001370:	187b      	adds	r3, r7, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	187b      	adds	r3, r7, r1
 800137a:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800137c:	230f      	movs	r3, #15
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	dce5      	bgt.n	8001354 <prvUnlockQueue+0x1a>
 8001388:	e000      	b.n	800138c <prvUnlockQueue+0x52>
                    break;
 800138a:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2245      	movs	r2, #69	@ 0x45
 8001390:	21ff      	movs	r1, #255	@ 0xff
 8001392:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001394:	f001 fc86 	bl	8002ca4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001398:	f001 fc72 	bl	8002c80 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800139c:	230e      	movs	r3, #14
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	2144      	movs	r1, #68	@ 0x44
 80013a4:	5c52      	ldrb	r2, [r2, r1]
 80013a6:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013a8:	e013      	b.n	80013d2 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d016      	beq.n	80013e0 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3310      	adds	r3, #16
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 ff08 	bl	80021cc <xTaskRemoveFromEventList>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80013c0:	f001 f848 	bl	8002454 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80013c4:	210e      	movs	r1, #14
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013d2:	230e      	movs	r3, #14
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dce5      	bgt.n	80013aa <prvUnlockQueue+0x70>
 80013de:	e000      	b.n	80013e2 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80013e0:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2244      	movs	r2, #68	@ 0x44
 80013e6:	21ff      	movs	r1, #255	@ 0xff
 80013e8:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80013ea:	f001 fc5b 	bl	8002ca4 <vPortExitCritical>
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80013fe:	f001 fc3f 	bl	8002c80 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800140a:	2301      	movs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e001      	b.n	8001414 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001414:	f001 fc46 	bl	8002ca4 <vPortExitCritical>

    return xReturn;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}

08001422 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800142a:	f001 fc29 	bl	8002c80 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001436:	429a      	cmp	r2, r3
 8001438:	d102      	bne.n	8001440 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800143a:	2301      	movs	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e001      	b.n	8001444 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001444:	f001 fc2e 	bl	8002ca4 <vPortExitCritical>

    return xReturn;
 8001448:	68fb      	ldr	r3, [r7, #12]
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <vQueueAddToRegistry+0x1a>
 8001468:	b672      	cpsid	i
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	e7fd      	b.n	800146a <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d025      	beq.n	80014c0 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e01f      	b.n	80014ba <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800147a:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <vQueueAddToRegistry+0xac>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	3304      	adds	r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d105      	bne.n	8001498 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	00da      	lsls	r2, r3, #3
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <vQueueAddToRegistry+0xac>)
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	60bb      	str	r3, [r7, #8]
                    break;
 8001496:	e013      	b.n	80014c0 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10a      	bne.n	80014b4 <vQueueAddToRegistry+0x60>
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <vQueueAddToRegistry+0xac>)
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	58d3      	ldr	r3, [r2, r3]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	00da      	lsls	r2, r3, #3
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <vQueueAddToRegistry+0xac>)
 80014b0:	18d3      	adds	r3, r2, r3
 80014b2:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d9dc      	bls.n	800147a <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <vQueueAddToRegistry+0xa4>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f001 fce8 	bl	8002eaa <prvTraceGetQueueType>
 80014da:	0003      	movs	r3, r0
 80014dc:	001a      	movs	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <vQueueAddToRegistry+0xb0>)
 80014e0:	5c9c      	ldrb	r4, [r3, r2]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f001 fd3f 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 80014ea:	0003      	movs	r3, r0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	0019      	movs	r1, r3
 80014f2:	0020      	movs	r0, r4
 80014f4:	f002 fde0 	bl	80040b8 <prvTraceSetObjectName>
        }
    }
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b005      	add	sp, #20
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	20000034 	.word	0x20000034
 8001504:	20000008 	.word	0x20000008

08001508 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001518:	f001 fbb2 	bl	8002c80 <vPortEnterCritical>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2244      	movs	r2, #68	@ 0x44
 8001520:	5c9b      	ldrb	r3, [r3, r2]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	3301      	adds	r3, #1
 8001526:	d103      	bne.n	8001530 <vQueueWaitForMessageRestricted+0x28>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2244      	movs	r2, #68	@ 0x44
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2245      	movs	r2, #69	@ 0x45
 8001534:	5c9b      	ldrb	r3, [r3, r2]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	d103      	bne.n	8001544 <vQueueWaitForMessageRestricted+0x3c>
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2245      	movs	r2, #69	@ 0x45
 8001540:	2100      	movs	r1, #0
 8001542:	5499      	strb	r1, [r3, r2]
 8001544:	f001 fbae 	bl	8002ca4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154c:	2b00      	cmp	r3, #0
 800154e:	d106      	bne.n	800155e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3324      	adds	r3, #36	@ 0x24
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fdbb 	bl	80020d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff feea 	bl	800133a <prvUnlockQueue>
    }
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b006      	add	sp, #24
 800156c:	bd80      	pop	{r7, pc}

0800156e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b08d      	sub	sp, #52	@ 0x34
 8001572:	af04      	add	r7, sp, #16
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	1dbb      	adds	r3, r7, #6
 800157c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800157e:	1dbb      	adds	r3, r7, #6
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	0018      	movs	r0, r3
 8001586:	f001 fc13 	bl	8002db0 <pvPortMalloc>
 800158a:	0003      	movs	r3, r0
 800158c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d016      	beq.n	80015c2 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001594:	2054      	movs	r0, #84	@ 0x54
 8001596:	f001 fc0b 	bl	8002db0 <pvPortMalloc>
 800159a:	0003      	movs	r3, r0
 800159c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d009      	beq.n	80015b8 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2254      	movs	r2, #84	@ 0x54
 80015a8:	2100      	movs	r1, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f003 fcfc 	bl	8004fa8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b6:	e006      	b.n	80015c6 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f001 fc5a 	bl	8002e74 <vPortFree>
 80015c0:	e001      	b.n	80015c6 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d016      	beq.n	80015fa <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	683c      	ldr	r4, [r7, #0]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9303      	str	r3, [sp, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	0023      	movs	r3, r4
 80015e8:	f000 f810 	bl	800160c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f88a 	bl	8001708 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	e002      	b.n	8001600 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80015fa:	2301      	movs	r3, #1
 80015fc:	425b      	negs	r3, r3
 80015fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001600:	69bb      	ldr	r3, [r7, #24]
    }
 8001602:	0018      	movs	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	b009      	add	sp, #36	@ 0x24
 8001608:	bd90      	pop	{r4, r7, pc}
	...

0800160c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	001a      	movs	r2, r3
 8001624:	21a5      	movs	r1, #165	@ 0xa5
 8001626:	f003 fcbf 	bl	8004fa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4934      	ldr	r1, [pc, #208]	@ (8001704 <prvInitialiseNewTask+0xf8>)
 8001632:	468c      	mov	ip, r1
 8001634:	4463      	add	r3, ip
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2207      	movs	r2, #7
 8001640:	4393      	bics	r3, r2
 8001642:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2207      	movs	r2, #7
 8001648:	4013      	ands	r3, r2
 800164a:	d002      	beq.n	8001652 <prvInitialiseNewTask+0x46>
 800164c:	b672      	cpsid	i
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	e7fd      	b.n	800164e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01f      	beq.n	8001698 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e013      	b.n	8001686 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	7818      	ldrb	r0, [r3, #0]
 8001666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001668:	2134      	movs	r1, #52	@ 0x34
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	185b      	adds	r3, r3, r1
 8001670:	1c02      	adds	r2, r0, #0
 8001672:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d9e8      	bls.n	800165e <prvInitialiseNewTask+0x52>
 800168c:	e000      	b.n	8001690 <prvInitialiseNewTask+0x84>
            {
                break;
 800168e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001692:	2243      	movs	r2, #67	@ 0x43
 8001694:	2100      	movs	r1, #0
 8001696:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d902      	bls.n	80016a4 <prvInitialiseNewTask+0x98>
 800169e:	b672      	cpsid	i
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	e7fd      	b.n	80016a0 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d901      	bls.n	80016ae <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016aa:	2304      	movs	r3, #4
 80016ac:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b6:	3304      	adds	r3, #4
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7fe fdcf 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c0:	3318      	adds	r3, #24
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7fe fdca 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	2205      	movs	r2, #5
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80016d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 fa2d 	bl	8002b44 <pxPortInitialiseStack>
 80016ea:	0002      	movs	r2, r0
 80016ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <prvInitialiseNewTask+0xf0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b006      	add	sp, #24
 8001702:	bd80      	pop	{r7, pc}
 8001704:	3fffffff 	.word	0x3fffffff

08001708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001710:	f001 fab6 	bl	8002c80 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001714:	4b7c      	ldr	r3, [pc, #496]	@ (8001908 <prvAddNewTaskToReadyList+0x200>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	4b7b      	ldr	r3, [pc, #492]	@ (8001908 <prvAddNewTaskToReadyList+0x200>)
 800171c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800171e:	4b7b      	ldr	r3, [pc, #492]	@ (800190c <prvAddNewTaskToReadyList+0x204>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001726:	4b79      	ldr	r3, [pc, #484]	@ (800190c <prvAddNewTaskToReadyList+0x204>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800172c:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <prvAddNewTaskToReadyList+0x200>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d110      	bne.n	8001756 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001734:	f000 fece 	bl	80024d4 <prvInitialiseTaskLists>
 8001738:	e00d      	b.n	8001756 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800173a:	4b75      	ldr	r3, [pc, #468]	@ (8001910 <prvAddNewTaskToReadyList+0x208>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001742:	4b72      	ldr	r3, [pc, #456]	@ (800190c <prvAddNewTaskToReadyList+0x204>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	429a      	cmp	r2, r3
 800174e:	d802      	bhi.n	8001756 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001750:	4b6e      	ldr	r3, [pc, #440]	@ (800190c <prvAddNewTaskToReadyList+0x204>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001756:	4b6f      	ldr	r3, [pc, #444]	@ (8001914 <prvAddNewTaskToReadyList+0x20c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	4b6d      	ldr	r3, [pc, #436]	@ (8001914 <prvAddNewTaskToReadyList+0x20c>)
 800175e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001760:	4b6c      	ldr	r3, [pc, #432]	@ (8001914 <prvAddNewTaskToReadyList+0x20c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d065      	beq.n	800183a <prvAddNewTaskToReadyList+0x132>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d04f      	beq.n	8001814 <prvAddNewTaskToReadyList+0x10c>
 8001774:	2003      	movs	r0, #3
 8001776:	f002 fba7 	bl	8003ec8 <prvTraceGetObjectHandle>
 800177a:	0003      	movs	r3, r0
 800177c:	001a      	movs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f001 fbbb 	bl	8002efe <prvTraceSetTaskNumberLow16>
 8001788:	4b63      	ldr	r3, [pc, #396]	@ (8001918 <prvAddNewTaskToReadyList+0x210>)
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f001 fbce 	bl	8002f32 <prvTraceSetTaskNumberHigh16>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f001 fb93 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800179e:	0003      	movs	r3, r0
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3334      	adds	r3, #52	@ 0x34
 80017a6:	001a      	movs	r2, r3
 80017a8:	2003      	movs	r0, #3
 80017aa:	f002 fc85 	bl	80040b8 <prvTraceSetObjectName>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f001 fb87 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 80017b6:	0003      	movs	r3, r0
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	001a      	movs	r2, r3
 80017c2:	2003      	movs	r0, #3
 80017c4:	f002 fa62 	bl	8003c8c <prvTraceSetPriorityProperty>
 80017c8:	f001 fc34 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80017cc:	0003      	movs	r3, r0
 80017ce:	0018      	movs	r0, r3
 80017d0:	f001 fb86 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80017d4:	0003      	movs	r3, r0
 80017d6:	001a      	movs	r2, r3
 80017d8:	4b50      	ldr	r3, [pc, #320]	@ (800191c <prvAddNewTaskToReadyList+0x214>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	4013      	ands	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d02a      	beq.n	800183a <prvAddNewTaskToReadyList+0x132>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f001 fb7a 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80017ec:	0003      	movs	r3, r0
 80017ee:	001a      	movs	r2, r3
 80017f0:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <prvAddNewTaskToReadyList+0x214>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4013      	ands	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01e      	beq.n	800183a <prvAddNewTaskToReadyList+0x132>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0018      	movs	r0, r3
 8001800:	f001 fb60 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8001804:	0003      	movs	r3, r0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	001a      	movs	r2, r3
 800180a:	2103      	movs	r1, #3
 800180c:	201b      	movs	r0, #27
 800180e:	f002 f8cb 	bl	80039a8 <prvTraceStoreKernelCall>
 8001812:	e012      	b.n	800183a <prvAddNewTaskToReadyList+0x132>
 8001814:	f001 fc0e 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001818:	0003      	movs	r3, r0
 800181a:	0018      	movs	r0, r3
 800181c:	f001 fb60 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8001820:	0003      	movs	r3, r0
 8001822:	001a      	movs	r2, r3
 8001824:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <prvAddNewTaskToReadyList+0x214>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	4013      	ands	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <prvAddNewTaskToReadyList+0x132>
 8001830:	2200      	movs	r2, #0
 8001832:	2103      	movs	r1, #3
 8001834:	201b      	movs	r0, #27
 8001836:	f002 f8b7 	bl	80039a8 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f001 fb4f 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8001842:	0003      	movs	r3, r0
 8001844:	001a      	movs	r2, r3
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <prvAddNewTaskToReadyList+0x214>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	4013      	ands	r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <prvAddNewTaskToReadyList+0x15c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f001 fb35 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800185a:	0003      	movs	r3, r0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	0018      	movs	r0, r3
 8001860:	f001 ff94 	bl	800378c <prvTraceStoreTaskReady>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <prvAddNewTaskToReadyList+0x218>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d903      	bls.n	8001878 <prvAddNewTaskToReadyList+0x170>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <prvAddNewTaskToReadyList+0x218>)
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	4929      	ldr	r1, [pc, #164]	@ (8001924 <prvAddNewTaskToReadyList+0x21c>)
 800187e:	0013      	movs	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	189b      	adds	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	18cb      	adds	r3, r1, r3
 8001888:	3304      	adds	r3, #4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	3204      	adds	r2, #4
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b2:	0013      	movs	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <prvAddNewTaskToReadyList+0x21c>)
 80018bc:	189a      	adds	r2, r3, r2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c6:	4917      	ldr	r1, [pc, #92]	@ (8001924 <prvAddNewTaskToReadyList+0x21c>)
 80018c8:	0013      	movs	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	189b      	adds	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	585b      	ldr	r3, [r3, r1]
 80018d2:	1c58      	adds	r0, r3, #1
 80018d4:	4913      	ldr	r1, [pc, #76]	@ (8001924 <prvAddNewTaskToReadyList+0x21c>)
 80018d6:	0013      	movs	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80018e0:	f001 f9e0 	bl	8002ca4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <prvAddNewTaskToReadyList+0x208>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <prvAddNewTaskToReadyList+0x204>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d201      	bcs.n	80018fe <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80018fa:	f001 f9b1 	bl	8002c60 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	20000130 	.word	0x20000130
 800190c:	20000084 	.word	0x20000084
 8001910:	2000013c 	.word	0x2000013c
 8001914:	2000014c 	.word	0x2000014c
 8001918:	200019ca 	.word	0x200019ca
 800191c:	200019c8 	.word	0x200019c8
 8001920:	20000138 	.word	0x20000138
 8001924:	20000088 	.word	0x20000088

08001928 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <xTaskDelayUntil+0x1a>
 800193c:	b672      	cpsid	i
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	e7fd      	b.n	800193e <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <xTaskDelayUntil+0x26>
 8001948:	b672      	cpsid	i
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	e7fd      	b.n	800194a <xTaskDelayUntil+0x22>
        configASSERT( uxSchedulerSuspended == 0 );
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <xTaskDelayUntil+0x120>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <xTaskDelayUntil+0x34>
 8001956:	b672      	cpsid	i
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	e7fd      	b.n	8001958 <xTaskDelayUntil+0x30>

        vTaskSuspendAll();
 800195c:	f000 f8e0 	bl	8001b20 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001960:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <xTaskDelayUntil+0x124>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20b      	bcs.n	8001992 <xTaskDelayUntil+0x6a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d211      	bcs.n	80019a8 <xTaskDelayUntil+0x80>
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d90d      	bls.n	80019a8 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 800198c:	2301      	movs	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <xTaskDelayUntil+0x80>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d303      	bcc.n	80019a4 <xTaskDelayUntil+0x7c>
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d901      	bls.n	80019a8 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03b      	beq.n	8001a2c <xTaskDelayUntil+0x104>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80019b4:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <xTaskDelayUntil+0x128>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f001 fa91 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80019be:	0003      	movs	r3, r0
 80019c0:	001a      	movs	r2, r3
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <xTaskDelayUntil+0x12c>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	4013      	ands	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00e      	beq.n	80019ec <xTaskDelayUntil+0xc4>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0019      	movs	r1, r3
 80019d2:	2088      	movs	r0, #136	@ 0x88
 80019d4:	f002 f87c 	bl	8003ad0 <prvTraceStoreKernelCallWithNumericParamOnly>
 80019d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <xTaskDelayUntil+0x128>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 fa71 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 80019e2:	0003      	movs	r3, r0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	0018      	movs	r0, r3
 80019e8:	f002 f9da 	bl	8003da0 <prvTraceSetTaskInstanceFinished>
 80019ec:	f001 fb22 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 80019f0:	0003      	movs	r3, r0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f001 fa74 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 80019f8:	0003      	movs	r3, r0
 80019fa:	001a      	movs	r2, r3
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <xTaskDelayUntil+0x12c>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	4013      	ands	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <xTaskDelayUntil+0xf6>
 8001a08:	f001 fb14 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f001 fa58 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8001a14:	0003      	movs	r3, r0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f002 f9c1 	bl	8003da0 <prvTraceSetTaskInstanceFinished>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fdd6 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001a2c:	f000 f884 	bl	8001b38 <xTaskResumeAll>
 8001a30:	0003      	movs	r3, r0
 8001a32:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <xTaskDelayUntil+0x116>
        {
            portYIELD_WITHIN_API();
 8001a3a:	f001 f911 	bl	8002c60 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8001a3e:	697b      	ldr	r3, [r7, #20]
    }
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b006      	add	sp, #24
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000158 	.word	0x20000158
 8001a4c:	20000134 	.word	0x20000134
 8001a50:	20000084 	.word	0x20000084
 8001a54:	200019c8 	.word	0x200019c8

08001a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001a5e:	4927      	ldr	r1, [pc, #156]	@ (8001afc <vTaskStartScheduler+0xa4>)
 8001a60:	4827      	ldr	r0, [pc, #156]	@ (8001b00 <vTaskStartScheduler+0xa8>)
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <vTaskStartScheduler+0xac>)
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	f7ff fd7e 	bl	800156e <xTaskCreate>
 8001a72:	0003      	movs	r3, r0
 8001a74:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d103      	bne.n	8001a84 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001a7c:	f000 fdf0 	bl	8002660 <xTimerCreateTimerTask>
 8001a80:	0003      	movs	r3, r0
 8001a82:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d12c      	bne.n	8001ae4 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001a8a:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <vTaskStartScheduler+0xb0>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4252      	negs	r2, r2
 8001a92:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <vTaskStartScheduler+0xb4>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <vTaskStartScheduler+0xb8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <vTaskStartScheduler+0xbc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f001 fac5 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	0018      	movs	r0, r3
 8001aae:	f001 fa17 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <vTaskStartScheduler+0xc0>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	4013      	ands	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <vTaskStartScheduler+0x80>
 8001ac2:	f001 fab7 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f001 f9fb 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f002 f866 	bl	8003ba4 <prvTraceStoreTaskswitch>
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <vTaskStartScheduler+0xbc>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001ade:	f001 f89b 	bl	8002c18 <xPortStartScheduler>
 8001ae2:	e005      	b.n	8001af0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <vTaskStartScheduler+0x98>
 8001aea:	b672      	cpsid	i
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	e7fd      	b.n	8001aec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <vTaskStartScheduler+0xc4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0800502c 	.word	0x0800502c
 8001b00:	080024b5 	.word	0x080024b5
 8001b04:	20000154 	.word	0x20000154
 8001b08:	20000150 	.word	0x20000150
 8001b0c:	2000013c 	.word	0x2000013c
 8001b10:	20000134 	.word	0x20000134
 8001b14:	200019b0 	.word	0x200019b0
 8001b18:	200019c8 	.word	0x200019c8
 8001b1c:	20000000 	.word	0x20000000

08001b20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <vTaskSuspendAll+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <vTaskSuspendAll+0x14>)
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000158 	.word	0x20000158

08001b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001b46:	4b73      	ldr	r3, [pc, #460]	@ (8001d14 <xTaskResumeAll+0x1dc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <xTaskResumeAll+0x1c>
 8001b4e:	b672      	cpsid	i
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	e7fd      	b.n	8001b50 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001b54:	f001 f894 	bl	8002c80 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001b58:	4b6e      	ldr	r3, [pc, #440]	@ (8001d14 <xTaskResumeAll+0x1dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d14 <xTaskResumeAll+0x1dc>)
 8001b60:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b62:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <xTaskResumeAll+0x1dc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d000      	beq.n	8001b6c <xTaskResumeAll+0x34>
 8001b6a:	e0cc      	b.n	8001d06 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d18 <xTaskResumeAll+0x1e0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <xTaskResumeAll+0x3e>
 8001b74:	e0c7      	b.n	8001d06 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b76:	e09e      	b.n	8001cb6 <xTaskResumeAll+0x17e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b78:	4b68      	ldr	r3, [pc, #416]	@ (8001d1c <xTaskResumeAll+0x1e4>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6a12      	ldr	r2, [r2, #32]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	69d2      	ldr	r2, [r2, #28]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d103      	bne.n	8001bae <xTaskResumeAll+0x76>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	68d2      	ldr	r2, [r2, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3304      	adds	r3, #4
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d103      	bne.n	8001bec <xTaskResumeAll+0xb4>
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 f96e 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8001c04:	0003      	movs	r3, r0
 8001c06:	001a      	movs	r2, r3
 8001c08:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <xTaskResumeAll+0x1e8>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <xTaskResumeAll+0xee>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f001 f954 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	0018      	movs	r0, r3
 8001c22:	f001 fdb3 	bl	800378c <prvTraceStoreTaskReady>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <xTaskResumeAll+0x1ec>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d903      	bls.n	8001c3a <xTaskResumeAll+0x102>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c36:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <xTaskResumeAll+0x1ec>)
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3e:	493a      	ldr	r1, [pc, #232]	@ (8001d28 <xTaskResumeAll+0x1f0>)
 8001c40:	0013      	movs	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	18cb      	adds	r3, r1, r3
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	3204      	adds	r2, #4
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	1d1a      	adds	r2, r3, #4
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c74:	0013      	movs	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d28 <xTaskResumeAll+0x1f0>)
 8001c7e:	189a      	adds	r2, r3, r2
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c88:	4927      	ldr	r1, [pc, #156]	@ (8001d28 <xTaskResumeAll+0x1f0>)
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	585b      	ldr	r3, [r3, r1]
 8001c94:	1c58      	adds	r0, r3, #1
 8001c96:	4924      	ldr	r1, [pc, #144]	@ (8001d28 <xTaskResumeAll+0x1f0>)
 8001c98:	0013      	movs	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <xTaskResumeAll+0x1f4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d302      	bcc.n	8001cb6 <xTaskResumeAll+0x17e>
                    {
                        xYieldPending = pdTRUE;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <xTaskResumeAll+0x1f8>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cb6:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <xTaskResumeAll+0x1e4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d000      	beq.n	8001cc0 <xTaskResumeAll+0x188>
 8001cbe:	e75b      	b.n	8001b78 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <xTaskResumeAll+0x192>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001cc6:	f000 fc43 	bl	8002550 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <xTaskResumeAll+0x1fc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00f      	beq.n	8001cf6 <xTaskResumeAll+0x1be>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001cd6:	f000 f83d 	bl	8001d54 <xTaskIncrementTick>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d002      	beq.n	8001ce4 <xTaskResumeAll+0x1ac>
                            {
                                xYieldPending = pdTRUE;
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <xTaskResumeAll+0x1f8>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f2      	bne.n	8001cd6 <xTaskResumeAll+0x19e>

                        xPendedTicks = 0;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <xTaskResumeAll+0x1fc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <xTaskResumeAll+0x1f8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001d02:	f000 ffad 	bl	8002c60 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d06:	f000 ffcd 	bl	8002ca4 <vPortExitCritical>

    return xAlreadyYielded;
 8001d0a:	693b      	ldr	r3, [r7, #16]
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b006      	add	sp, #24
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000158 	.word	0x20000158
 8001d18:	20000130 	.word	0x20000130
 8001d1c:	2000011c 	.word	0x2000011c
 8001d20:	200019c8 	.word	0x200019c8
 8001d24:	20000138 	.word	0x20000138
 8001d28:	20000088 	.word	0x20000088
 8001d2c:	20000084 	.word	0x20000084
 8001d30:	20000144 	.word	0x20000144
 8001d34:	20000140 	.word	0x20000140

08001d38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001d3e:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <xTaskGetTickCount+0x18>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	20000134 	.word	0x20000134

08001d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8001d5e:	4b85      	ldr	r3, [pc, #532]	@ (8001f74 <xTaskIncrementTick+0x220>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d003      	beq.n	8001d6e <xTaskIncrementTick+0x1a>
 8001d66:	4b84      	ldr	r3, [pc, #528]	@ (8001f78 <xTaskIncrementTick+0x224>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <xTaskIncrementTick+0x2a>
 8001d6e:	4b83      	ldr	r3, [pc, #524]	@ (8001f7c <xTaskIncrementTick+0x228>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4b81      	ldr	r3, [pc, #516]	@ (8001f7c <xTaskIncrementTick+0x228>)
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f002 fbd1 	bl	8004520 <prvTracePortGetTimeStamp>
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f74 <xTaskIncrementTick+0x220>)
 8001d80:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d82:	4b7c      	ldr	r3, [pc, #496]	@ (8001f74 <xTaskIncrementTick+0x220>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d000      	beq.n	8001d8c <xTaskIncrementTick+0x38>
 8001d8a:	e0e9      	b.n	8001f60 <xTaskIncrementTick+0x20c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8001f80 <xTaskIncrementTick+0x22c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d94:	4b7a      	ldr	r3, [pc, #488]	@ (8001f80 <xTaskIncrementTick+0x22c>)
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d118      	bne.n	8001dd2 <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001da0:	4b78      	ldr	r3, [pc, #480]	@ (8001f84 <xTaskIncrementTick+0x230>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <xTaskIncrementTick+0x5c>
 8001daa:	b672      	cpsid	i
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	e7fd      	b.n	8001dac <xTaskIncrementTick+0x58>
 8001db0:	4b74      	ldr	r3, [pc, #464]	@ (8001f84 <xTaskIncrementTick+0x230>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	4b74      	ldr	r3, [pc, #464]	@ (8001f88 <xTaskIncrementTick+0x234>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b72      	ldr	r3, [pc, #456]	@ (8001f84 <xTaskIncrementTick+0x230>)
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	4b72      	ldr	r3, [pc, #456]	@ (8001f88 <xTaskIncrementTick+0x234>)
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	4b71      	ldr	r3, [pc, #452]	@ (8001f8c <xTaskIncrementTick+0x238>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <xTaskIncrementTick+0x238>)
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f000 fbbf 	bl	8002550 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8001f90 <xTaskIncrementTick+0x23c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d200      	bcs.n	8001dde <xTaskIncrementTick+0x8a>
 8001ddc:	e0b9      	b.n	8001f52 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dde:	4b69      	ldr	r3, [pc, #420]	@ (8001f84 <xTaskIncrementTick+0x230>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <xTaskIncrementTick+0x9e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de8:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <xTaskIncrementTick+0x23c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	4252      	negs	r2, r2
 8001dee:	601a      	str	r2, [r3, #0]
                    break;
 8001df0:	e0af      	b.n	8001f52 <xTaskIncrementTick+0x1fe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001df2:	4b64      	ldr	r3, [pc, #400]	@ (8001f84 <xTaskIncrementTick+0x230>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d203      	bcs.n	8001e12 <xTaskIncrementTick+0xbe>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e0a:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <xTaskIncrementTick+0x23c>)
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001e10:	e09f      	b.n	8001f52 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68d2      	ldr	r2, [r2, #12]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	6892      	ldr	r2, [r2, #8]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	3304      	adds	r3, #4
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d103      	bne.n	8001e40 <xTaskIncrementTick+0xec>
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01e      	beq.n	8001e96 <xTaskIncrementTick+0x142>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	6a12      	ldr	r2, [r2, #32]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	69d2      	ldr	r2, [r2, #28]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d103      	bne.n	8001e86 <xTaskIncrementTick+0x132>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	1e5a      	subs	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f001 f821 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <xTaskIncrementTick+0x240>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <xTaskIncrementTick+0x16c>
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f001 f807 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f001 fc66 	bl	800378c <prvTraceStoreTaskReady>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec4:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <xTaskIncrementTick+0x244>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d903      	bls.n	8001ed4 <xTaskIncrementTick+0x180>
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <xTaskIncrementTick+0x244>)
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed8:	4930      	ldr	r1, [pc, #192]	@ (8001f9c <xTaskIncrementTick+0x248>)
 8001eda:	0013      	movs	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	189b      	adds	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	18cb      	adds	r3, r1, r3
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	3204      	adds	r2, #4
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1d1a      	adds	r2, r3, #4
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0e:	0013      	movs	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	189b      	adds	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <xTaskIncrementTick+0x248>)
 8001f18:	189a      	adds	r2, r3, r2
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	615a      	str	r2, [r3, #20]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f22:	491e      	ldr	r1, [pc, #120]	@ (8001f9c <xTaskIncrementTick+0x248>)
 8001f24:	0013      	movs	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	585b      	ldr	r3, [r3, r1]
 8001f2e:	1c58      	adds	r0, r3, #1
 8001f30:	491a      	ldr	r1, [pc, #104]	@ (8001f9c <xTaskIncrementTick+0x248>)
 8001f32:	0013      	movs	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <xTaskIncrementTick+0x24c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d800      	bhi.n	8001f4c <xTaskIncrementTick+0x1f8>
 8001f4a:	e748      	b.n	8001dde <xTaskIncrementTick+0x8a>
                        {
                            xSwitchRequired = pdTRUE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f50:	e745      	b.n	8001dde <xTaskIncrementTick+0x8a>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <xTaskIncrementTick+0x250>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <xTaskIncrementTick+0x216>
            {
                xSwitchRequired = pdTRUE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e004      	b.n	8001f6a <xTaskIncrementTick+0x216>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <xTaskIncrementTick+0x224>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <xTaskIncrementTick+0x224>)
 8001f68:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b008      	add	sp, #32
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000158 	.word	0x20000158
 8001f78:	20000140 	.word	0x20000140
 8001f7c:	200019a4 	.word	0x200019a4
 8001f80:	20000134 	.word	0x20000134
 8001f84:	20000114 	.word	0x20000114
 8001f88:	20000118 	.word	0x20000118
 8001f8c:	20000148 	.word	0x20000148
 8001f90:	20000150 	.word	0x20000150
 8001f94:	200019c8 	.word	0x200019c8
 8001f98:	20000138 	.word	0x20000138
 8001f9c:	20000088 	.word	0x20000088
 8001fa0:	20000084 	.word	0x20000084
 8001fa4:	20000144 	.word	0x20000144

08001fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fae:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <vTaskSwitchContext+0xd0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <vTaskSwitchContext+0xd4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001fbc:	e057      	b.n	800206e <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <vTaskSwitchContext+0xd4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <vTaskSwitchContext+0xd8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e008      	b.n	8001fde <vTaskSwitchContext+0x36>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <vTaskSwitchContext+0x30>
 8001fd2:	b672      	cpsid	i
 8001fd4:	46c0      	nop			@ (mov r8, r8)
 8001fd6:	e7fd      	b.n	8001fd4 <vTaskSwitchContext+0x2c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4929      	ldr	r1, [pc, #164]	@ (8002084 <vTaskSwitchContext+0xdc>)
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	585b      	ldr	r3, [r3, r1]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ed      	beq.n	8001fcc <vTaskSwitchContext+0x24>
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	189b      	adds	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4a22      	ldr	r2, [pc, #136]	@ (8002084 <vTaskSwitchContext+0xdc>)
 8001ffc:	189b      	adds	r3, r3, r2
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3308      	adds	r3, #8
 8002012:	429a      	cmp	r2, r3
 8002014:	d104      	bne.n	8002020 <vTaskSwitchContext+0x78>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <vTaskSwitchContext+0xe0>)
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <vTaskSwitchContext+0xd8>)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <vTaskSwitchContext+0xe4>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f000 fffd 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 800203a:	0003      	movs	r3, r0
 800203c:	0018      	movs	r0, r3
 800203e:	f000 ff4f 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8002042:	0003      	movs	r3, r0
 8002044:	001a      	movs	r2, r3
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <vTaskSwitchContext+0xe8>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	4013      	ands	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <vTaskSwitchContext+0xc0>
 8002052:	f000 ffef 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8002056:	0003      	movs	r3, r0
 8002058:	0018      	movs	r0, r3
 800205a:	f000 ff33 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800205e:	0003      	movs	r3, r0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	0018      	movs	r0, r3
 8002064:	f001 fd9e 	bl	8003ba4 <prvTraceStoreTaskswitch>
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <vTaskSwitchContext+0xe4>)
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	20000158 	.word	0x20000158
 800207c:	20000144 	.word	0x20000144
 8002080:	20000138 	.word	0x20000138
 8002084:	20000088 	.word	0x20000088
 8002088:	20000084 	.word	0x20000084
 800208c:	200019b0 	.word	0x200019b0
 8002090:	200019c8 	.word	0x200019c8

08002094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <vTaskPlaceOnEventList+0x16>
 80020a4:	b672      	cpsid	i
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	e7fd      	b.n	80020a6 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <vTaskPlaceOnEventList+0x3c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3318      	adds	r3, #24
 80020b0:	001a      	movs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0011      	movs	r1, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe f8db 	bl	8000272 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fa89 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000084 	.word	0x20000084

080020d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <vTaskPlaceOnEventListRestricted+0x18>
 80020e6:	b672      	cpsid	i
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	e7fd      	b.n	80020e8 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	4b33      	ldr	r3, [pc, #204]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	61da      	str	r2, [r3, #28]
 80020fa:	4b31      	ldr	r3, [pc, #196]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	6892      	ldr	r2, [r2, #8]
 8002102:	621a      	str	r2, [r3, #32]
 8002104:	4b2e      	ldr	r3, [pc, #184]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	3218      	adds	r2, #24
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3318      	adds	r3, #24
 8002116:	001a      	movs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8002134:	2301      	movs	r3, #1
 8002136:	425b      	negs	r3, r3
 8002138:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fece 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <vTaskPlaceOnEventListRestricted+0xf0>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	4013      	ands	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d011      	beq.n	8002178 <vTaskPlaceOnEventListRestricted+0xa4>
 8002154:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <vTaskPlaceOnEventListRestricted+0xf4>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	18d3      	adds	r3, r2, r3
 800215c:	0019      	movs	r1, r3
 800215e:	2088      	movs	r0, #136	@ 0x88
 8002160:	f001 fcb6 	bl	8003ad0 <prvTraceStoreKernelCallWithNumericParamOnly>
 8002164:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <vTaskPlaceOnEventListRestricted+0xec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 feab 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800216e:	0003      	movs	r3, r0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	0018      	movs	r0, r3
 8002174:	f001 fe14 	bl	8003da0 <prvTraceSetTaskInstanceFinished>
 8002178:	f000 ff5c 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 800217c:	0003      	movs	r3, r0
 800217e:	0018      	movs	r0, r3
 8002180:	f000 feae 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8002184:	0003      	movs	r3, r0
 8002186:	001a      	movs	r2, r3
 8002188:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <vTaskPlaceOnEventListRestricted+0xf0>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <vTaskPlaceOnEventListRestricted+0xd6>
 8002194:	f000 ff4e 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8002198:	0003      	movs	r3, r0
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fe92 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 80021a0:	0003      	movs	r3, r0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 fdfb 	bl	8003da0 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 fa11 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
    }
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b006      	add	sp, #24
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	20000084 	.word	0x20000084
 80021c4:	200019c8 	.word	0x200019c8
 80021c8:	20000134 	.word	0x20000134

080021cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <xTaskRemoveFromEventList+0x1c>
 80021e2:	b672      	cpsid	i
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	e7fd      	b.n	80021e4 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	6a12      	ldr	r2, [r2, #32]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	69d2      	ldr	r2, [r2, #28]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3318      	adds	r3, #24
 800220a:	429a      	cmp	r2, r3
 800220c:	d103      	bne.n	8002216 <xTaskRemoveFromEventList+0x4a>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002226:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <xTaskRemoveFromEventList+0x1a8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d172      	bne.n	8002314 <xTaskRemoveFromEventList+0x148>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	68d2      	ldr	r2, [r2, #12]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	3304      	adds	r3, #4
 8002250:	429a      	cmp	r2, r3
 8002252:	d103      	bne.n	800225c <xTaskRemoveFromEventList+0x90>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fe36 	bl	8002ee0 <prvTraceGetTaskNumberHigh16>
 8002274:	0003      	movs	r3, r0
 8002276:	001a      	movs	r2, r3
 8002278:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <xTaskRemoveFromEventList+0x1ac>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <xTaskRemoveFromEventList+0xca>
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fe1c 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 800228c:	0003      	movs	r3, r0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	0018      	movs	r0, r3
 8002292:	f001 fa7b 	bl	800378c <prvTraceStoreTaskReady>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <xTaskRemoveFromEventList+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d903      	bls.n	80022aa <xTaskRemoveFromEventList+0xde>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a6:	4b35      	ldr	r3, [pc, #212]	@ (800237c <xTaskRemoveFromEventList+0x1b0>)
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ae:	4934      	ldr	r1, [pc, #208]	@ (8002380 <xTaskRemoveFromEventList+0x1b4>)
 80022b0:	0013      	movs	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	18cb      	adds	r3, r1, r3
 80022ba:	3304      	adds	r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	3204      	adds	r2, #4
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e4:	0013      	movs	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	189b      	adds	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4a24      	ldr	r2, [pc, #144]	@ (8002380 <xTaskRemoveFromEventList+0x1b4>)
 80022ee:	189a      	adds	r2, r3, r2
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f8:	4921      	ldr	r1, [pc, #132]	@ (8002380 <xTaskRemoveFromEventList+0x1b4>)
 80022fa:	0013      	movs	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	585b      	ldr	r3, [r3, r1]
 8002304:	1c58      	adds	r0, r3, #1
 8002306:	491e      	ldr	r1, [pc, #120]	@ (8002380 <xTaskRemoveFromEventList+0x1b4>)
 8002308:	0013      	movs	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	189b      	adds	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	5058      	str	r0, [r3, r1]
 8002312:	e01b      	b.n	800234c <xTaskRemoveFromEventList+0x180>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <xTaskRemoveFromEventList+0x1b8>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	61da      	str	r2, [r3, #28]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	621a      	str	r2, [r3, #32]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	3218      	adds	r2, #24
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3318      	adds	r3, #24
 8002336:	001a      	movs	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <xTaskRemoveFromEventList+0x1b8>)
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <xTaskRemoveFromEventList+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <xTaskRemoveFromEventList+0x1b8>)
 800234a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <xTaskRemoveFromEventList+0x1bc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	429a      	cmp	r2, r3
 8002358:	d905      	bls.n	8002366 <xTaskRemoveFromEventList+0x19a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <xTaskRemoveFromEventList+0x1c0>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e001      	b.n	800236a <xTaskRemoveFromEventList+0x19e>
    }
    else
    {
        xReturn = pdFALSE;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800236a:	69fb      	ldr	r3, [r7, #28]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b008      	add	sp, #32
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000158 	.word	0x20000158
 8002378:	200019c8 	.word	0x200019c8
 800237c:	20000138 	.word	0x20000138
 8002380:	20000088 	.word	0x20000088
 8002384:	2000011c 	.word	0x2000011c
 8002388:	20000084 	.word	0x20000084
 800238c:	20000144 	.word	0x20000144

08002390 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <vTaskInternalSetTimeOutState+0x20>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <vTaskInternalSetTimeOutState+0x24>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]
}
 80023a8:	46c0      	nop			@ (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000148 	.word	0x20000148
 80023b4:	20000134 	.word	0x20000134

080023b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <xTaskCheckForTimeOut+0x16>
 80023c8:	b672      	cpsid	i
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	e7fd      	b.n	80023ca <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <xTaskCheckForTimeOut+0x22>
 80023d4:	b672      	cpsid	i
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	e7fd      	b.n	80023d6 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 80023da:	f000 fc51 	bl	8002c80 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <xTaskCheckForTimeOut+0x94>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <xTaskCheckForTimeOut+0x98>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d00a      	beq.n	8002410 <xTaskCheckForTimeOut+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d305      	bcc.n	8002410 <xTaskCheckForTimeOut+0x58>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e016      	b.n	800243e <xTaskCheckForTimeOut+0x86>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <xTaskCheckForTimeOut+0x7c>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad2      	subs	r2, r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff ffb1 	bl	8002390 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e004      	b.n	800243e <xTaskCheckForTimeOut+0x86>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800243a:	2301      	movs	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800243e:	f000 fc31 	bl	8002ca4 <vPortExitCritical>

    return xReturn;
 8002442:	697b      	ldr	r3, [r7, #20]
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000134 	.word	0x20000134
 8002450:	20000148 	.word	0x20000148

08002454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002458:	4b02      	ldr	r3, [pc, #8]	@ (8002464 <vTaskMissedYield+0x10>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000144 	.word	0x20000144

08002468 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e001      	b.n	8002486 <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8002486:	68fb      	ldr	r3, [r7, #12]
    }
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}

08002490 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80024bc:	f000 f842 	bl	8002544 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <prvIdleTask+0x1c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d9f9      	bls.n	80024bc <prvIdleTask+0x8>
            {
                taskYIELD();
 80024c8:	f000 fbca 	bl	8002c60 <vPortYield>
        prvCheckTasksWaitingTermination();
 80024cc:	e7f6      	b.n	80024bc <prvIdleTask+0x8>
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	20000088 	.word	0x20000088

080024d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e00c      	b.n	80024fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	0013      	movs	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4a10      	ldr	r2, [pc, #64]	@ (800252c <prvInitialiseTaskLists+0x58>)
 80024ec:	189b      	adds	r3, r3, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fd fe96 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3301      	adds	r3, #1
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d9ef      	bls.n	80024e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <prvInitialiseTaskLists+0x5c>)
 8002502:	0018      	movs	r0, r3
 8002504:	f7fd fe8c 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <prvInitialiseTaskLists+0x60>)
 800250a:	0018      	movs	r0, r3
 800250c:	f7fd fe88 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <prvInitialiseTaskLists+0x64>)
 8002512:	0018      	movs	r0, r3
 8002514:	f7fd fe84 	bl	8000220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002518:	4b08      	ldr	r3, [pc, #32]	@ (800253c <prvInitialiseTaskLists+0x68>)
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <prvInitialiseTaskLists+0x5c>)
 800251c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <prvInitialiseTaskLists+0x6c>)
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <prvInitialiseTaskLists+0x60>)
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000088 	.word	0x20000088
 8002530:	200000ec 	.word	0x200000ec
 8002534:	20000100 	.word	0x20000100
 8002538:	2000011c 	.word	0x2000011c
 800253c:	20000114 	.word	0x20000114
 8002540:	20000118 	.word	0x20000118

08002544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <prvResetNextTaskUnblockTime+0x2c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <prvResetNextTaskUnblockTime+0x30>)
 8002560:	2201      	movs	r2, #1
 8002562:	4252      	negs	r2, r2
 8002564:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002566:	e005      	b.n	8002574 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <prvResetNextTaskUnblockTime+0x2c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <prvResetNextTaskUnblockTime+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	20000114 	.word	0x20000114
 8002580:	20000150 	.word	0x20000150

08002584 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <xTaskGetCurrentTaskHandle+0x18>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002590:	687b      	ldr	r3, [r7, #4]
    }
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	20000084 	.word	0x20000084

080025a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <xTaskGetSchedulerState+0x30>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80025ae:	2301      	movs	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	e008      	b.n	80025c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <xTaskGetSchedulerState+0x34>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80025bc:	2302      	movs	r3, #2
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e001      	b.n	80025c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80025c6:	687b      	ldr	r3, [r7, #4]
    }
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000013c 	.word	0x2000013c
 80025d4:	20000158 	.word	0x20000158

080025d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <prvAddCurrentTaskToDelayedList+0x74>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <prvAddCurrentTaskToDelayedList+0x78>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3304      	adds	r3, #4
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7fd fe75 	bl	80002de <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	18d3      	adds	r3, r2, r3
 80025fa:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <prvAddCurrentTaskToDelayedList+0x78>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d209      	bcs.n	8002620 <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <prvAddCurrentTaskToDelayedList+0x7c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <prvAddCurrentTaskToDelayedList+0x78>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3304      	adds	r3, #4
 8002616:	0019      	movs	r1, r3
 8002618:	0010      	movs	r0, r2
 800261a:	f7fd fe2a 	bl	8000272 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800261e:	e010      	b.n	8002642 <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002620:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <prvAddCurrentTaskToDelayedList+0x80>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <prvAddCurrentTaskToDelayedList+0x78>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	0019      	movs	r1, r3
 800262c:	0010      	movs	r0, r2
 800262e:	f7fd fe20 	bl	8000272 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <prvAddCurrentTaskToDelayedList+0x84>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d202      	bcs.n	8002642 <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <prvAddCurrentTaskToDelayedList+0x84>)
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b004      	add	sp, #16
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	20000134 	.word	0x20000134
 8002650:	20000084 	.word	0x20000084
 8002654:	20000118 	.word	0x20000118
 8002658:	20000114 	.word	0x20000114
 800265c:	20000150 	.word	0x20000150

08002660 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800266a:	f000 fa31 	bl	8002ad0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <xTimerCreateTimerTask+0x44>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002676:	490c      	ldr	r1, [pc, #48]	@ (80026a8 <xTimerCreateTimerTask+0x48>)
 8002678:	480c      	ldr	r0, [pc, #48]	@ (80026ac <xTimerCreateTimerTask+0x4c>)
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <xTimerCreateTimerTask+0x50>)
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2303      	movs	r3, #3
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	2280      	movs	r2, #128	@ 0x80
 8002686:	f7fe ff72 	bl	800156e <xTaskCreate>
 800268a:	0003      	movs	r3, r0
 800268c:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <xTimerCreateTimerTask+0x3a>
 8002694:	b672      	cpsid	i
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	e7fd      	b.n	8002696 <xTimerCreateTimerTask+0x36>
        return xReturn;
 800269a:	687b      	ldr	r3, [r7, #4]
    }
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000018c 	.word	0x2000018c
 80026a8:	08005034 	.word	0x08005034
 80026ac:	0800275d 	.word	0x0800275d
 80026b0:	20000190 	.word	0x20000190

080026b4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026c0:	e009      	b.n	80026d6 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	18d3      	adds	r3, r2, r3
 80026ca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	0010      	movs	r0, r2
 80026d4:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	18d1      	adds	r1, r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8da 	bl	800289c <prvInsertTimerInActiveList>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d1ea      	bne.n	80026c2 <prvReloadTimer+0xe>
        }
    }
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <prvProcessExpiredTimer+0x60>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3304      	adds	r3, #4
 8002710:	0018      	movs	r0, r3
 8002712:	f7fd fde4 	bl	80002de <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2228      	movs	r2, #40	@ 0x28
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	001a      	movs	r2, r3
 800271e:	2304      	movs	r3, #4
 8002720:	4013      	ands	r3, r2
 8002722:	d006      	beq.n	8002732 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	0018      	movs	r0, r3
 800272c:	f7ff ffc2 	bl	80026b4 <prvReloadTimer>
 8002730:	e008      	b.n	8002744 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2228      	movs	r2, #40	@ 0x28
 8002736:	5c9b      	ldrb	r3, [r3, r2]
 8002738:	2201      	movs	r2, #1
 800273a:	4393      	bics	r3, r2
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2228      	movs	r2, #40	@ 0x28
 8002742:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	0010      	movs	r0, r2
 800274c:	4798      	blx	r3
    }
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	20000184 	.word	0x20000184

0800275c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002764:	2308      	movs	r3, #8
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f855 	bl	8002818 <prvGetNextExpireTime>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f805 	bl	8002788 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800277e:	f000 f8cf 	bl	8002920 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	e7ee      	b.n	8002764 <prvTimerTask+0x8>
	...

08002788 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002792:	f7ff f9c5 	bl	8001b20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002796:	2308      	movs	r3, #8
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	0018      	movs	r0, r3
 800279c:	f000 f85e 	bl	800285c <prvSampleTimeNow>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12b      	bne.n	8002802 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10c      	bne.n	80027ca <prvProcessTimerOrBlockTask+0x42>
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d808      	bhi.n	80027ca <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80027b8:	f7ff f9be 	bl	8001b38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff ff98 	bl	80026f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027c8:	e01d      	b.n	8002806 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <prvProcessTimerOrBlockTask+0x88>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <prvProcessTimerOrBlockTask+0x56>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <prvProcessTimerOrBlockTask+0x58>
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <prvProcessTimerOrBlockTask+0x8c>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	0019      	movs	r1, r3
 80027f0:	f7fe fe8a 	bl	8001508 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027f4:	f7ff f9a0 	bl	8001b38 <xTaskResumeAll>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d104      	bne.n	8002806 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80027fc:	f000 fa30 	bl	8002c60 <vPortYield>
    }
 8002800:	e001      	b.n	8002806 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002802:	f7ff f999 	bl	8001b38 <xTaskResumeAll>
    }
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b004      	add	sp, #16
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	20000188 	.word	0x20000188
 8002814:	2000018c 	.word	0x2000018c

08002818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <prvGetNextExpireTime+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <prvGetNextExpireTime+0x16>
 800282a:	2201      	movs	r2, #1
 800282c:	e000      	b.n	8002830 <prvGetNextExpireTime+0x18>
 800282e:	2200      	movs	r2, #0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <prvGetNextExpireTime+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e001      	b.n	800284c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800284c:	68fb      	ldr	r3, [r7, #12]
    }
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	20000184 	.word	0x20000184

0800285c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002864:	f7ff fa68 	bl	8001d38 <xTaskGetTickCount>
 8002868:	0003      	movs	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <prvSampleTimeNow+0x3c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	429a      	cmp	r2, r3
 8002874:	d205      	bcs.n	8002882 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002876:	f000 f903 	bl	8002a80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e002      	b.n	8002888 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <prvSampleTimeNow+0x3c>)
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800288e:	68fb      	ldr	r3, [r7, #12]
    }
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000194 	.word	0x20000194

0800289c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d812      	bhi.n	80028e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	1ad2      	subs	r2, r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e01b      	b.n	800290e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <prvInsertTimerInActiveList+0x7c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3304      	adds	r3, #4
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f7fd fcc6 	bl	8000272 <vListInsert>
 80028e6:	e012      	b.n	800290e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d206      	bcs.n	80028fe <prvInsertTimerInActiveList+0x62>
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e007      	b.n	800290e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <prvInsertTimerInActiveList+0x80>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3304      	adds	r3, #4
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f7fd fcb2 	bl	8000272 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800290e:	697b      	ldr	r3, [r7, #20]
    }
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b006      	add	sp, #24
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000188 	.word	0x20000188
 800291c:	20000184 	.word	0x20000184

08002920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002926:	e098      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da00      	bge.n	8002932 <prvProcessReceivedCommands+0x12>
 8002930:	e093      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3304      	adds	r3, #4
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fcca 	bl	80002de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800294a:	003b      	movs	r3, r7
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ff85 	bl	800285c <prvSampleTimeNow>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b09      	cmp	r3, #9
 800295c:	d900      	bls.n	8002960 <prvProcessReceivedCommands+0x40>
 800295e:	e079      	b.n	8002a54 <prvProcessReceivedCommands+0x134>
 8002960:	009a      	lsls	r2, r3, #2
 8002962:	4b45      	ldr	r3, [pc, #276]	@ (8002a78 <prvProcessReceivedCommands+0x158>)
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2228      	movs	r2, #40	@ 0x28
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2201      	movs	r2, #1
 8002972:	4313      	orrs	r3, r2
 8002974:	b2d9      	uxtb	r1, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2228      	movs	r2, #40	@ 0x28
 800297a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	18d1      	adds	r1, r2, r3
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f7ff ff85 	bl	800289c <prvInsertTimerInActiveList>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d060      	beq.n	8002a58 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2228      	movs	r2, #40	@ 0x28
 800299a:	5c9b      	ldrb	r3, [r3, r2]
 800299c:	001a      	movs	r2, r3
 800299e:	2304      	movs	r3, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	d00a      	beq.n	80029ba <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	18d1      	adds	r1, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff fe7e 	bl	80026b4 <prvReloadTimer>
 80029b8:	e008      	b.n	80029cc <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2228      	movs	r2, #40	@ 0x28
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4393      	bics	r3, r2
 80029c4:	b2d9      	uxtb	r1, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2228      	movs	r2, #40	@ 0x28
 80029ca:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	0010      	movs	r0, r2
 80029d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80029d6:	e03f      	b.n	8002a58 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2228      	movs	r2, #40	@ 0x28
 80029dc:	5c9b      	ldrb	r3, [r3, r2]
 80029de:	2201      	movs	r2, #1
 80029e0:	4393      	bics	r3, r2
 80029e2:	b2d9      	uxtb	r1, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2228      	movs	r2, #40	@ 0x28
 80029e8:	5499      	strb	r1, [r3, r2]
                        break;
 80029ea:	e036      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2228      	movs	r2, #40	@ 0x28
 80029f0:	5c9b      	ldrb	r3, [r3, r2]
 80029f2:	2201      	movs	r2, #1
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b2d9      	uxtb	r1, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2228      	movs	r2, #40	@ 0x28
 80029fc:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <prvProcessReceivedCommands+0xf4>
 8002a0e:	b672      	cpsid	i
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	e7fd      	b.n	8002a10 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	18d1      	adds	r1, r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff ff3b 	bl	800289c <prvInsertTimerInActiveList>
                        break;
 8002a26:	e018      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2228      	movs	r2, #40	@ 0x28
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2302      	movs	r3, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d104      	bne.n	8002a40 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 fa1b 	bl	8002e74 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a3e:	e00c      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2228      	movs	r2, #40	@ 0x28
 8002a44:	5c9b      	ldrb	r3, [r3, r2]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4393      	bics	r3, r2
 8002a4a:	b2d9      	uxtb	r1, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2228      	movs	r2, #40	@ 0x28
 8002a50:	5499      	strb	r1, [r3, r2]
                        break;
 8002a52:	e002      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	e000      	b.n	8002a5a <prvProcessReceivedCommands+0x13a>
                        break;
 8002a58:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <prvProcessReceivedCommands+0x15c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1d39      	adds	r1, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fd fffa 	bl	8000a5c <xQueueReceive>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d000      	beq.n	8002a6e <prvProcessReceivedCommands+0x14e>
 8002a6c:	e75c      	b.n	8002928 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	08005698 	.word	0x08005698
 8002a7c:	2000018c 	.word	0x2000018c

08002a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a86:	e00b      	b.n	8002aa0 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <prvSwitchTimerLists+0x48>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002a92:	2301      	movs	r3, #1
 8002a94:	425a      	negs	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff fe2c 	bl	80026f8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <prvSwitchTimerLists+0x48>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ee      	bne.n	8002a88 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <prvSwitchTimerLists+0x48>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <prvSwitchTimerLists+0x4c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <prvSwitchTimerLists+0x48>)
 8002ab6:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <prvSwitchTimerLists+0x4c>)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
    }
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	20000184 	.word	0x20000184
 8002acc:	20000188 	.word	0x20000188

08002ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ad4:	f000 f8d4 	bl	8002c80 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <prvCheckForValidListAndQueue+0x5c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d120      	bne.n	8002b22 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <prvCheckForValidListAndQueue+0x60>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7fd fb9c 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <prvCheckForValidListAndQueue+0x64>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fd fb98 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <prvCheckForValidListAndQueue+0x68>)
 8002af2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b30 <prvCheckForValidListAndQueue+0x60>)
 8002af4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002af6:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <prvCheckForValidListAndQueue+0x6c>)
 8002af8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <prvCheckForValidListAndQueue+0x64>)
 8002afa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002afc:	2200      	movs	r2, #0
 8002afe:	210c      	movs	r1, #12
 8002b00:	200a      	movs	r0, #10
 8002b02:	f7fd fc9f 	bl	8000444 <xQueueGenericCreate>
 8002b06:	0002      	movs	r2, r0
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <prvCheckForValidListAndQueue+0x5c>)
 8002b0a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b0c:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <prvCheckForValidListAndQueue+0x5c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <prvCheckForValidListAndQueue+0x5c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <prvCheckForValidListAndQueue+0x70>)
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7fe fc99 	bl	8001454 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b22:	f000 f8bf 	bl	8002ca4 <vPortExitCritical>
    }
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	2000018c 	.word	0x2000018c
 8002b30:	2000015c 	.word	0x2000015c
 8002b34:	20000170 	.word	0x20000170
 8002b38:	20000184 	.word	0x20000184
 8002b3c:	20000188 	.word	0x20000188
 8002b40:	0800503c 	.word	0x0800503c

08002b44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b04      	subs	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	0452      	lsls	r2, r2, #17
 8002b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b04      	subs	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002b70:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <pxPortInitialiseStack+0x50>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b14      	subs	r3, #20
 8002b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b20      	subs	r3, #32
 8002b86:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	08002b99 	.word	0x08002b99

08002b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <prvTaskExitError+0x2c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	d002      	beq.n	8002bb0 <prvTaskExitError+0x18>
 8002baa:	b672      	cpsid	i
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	e7fd      	b.n	8002bac <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002bb0:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0fc      	beq.n	8002bb4 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002bcc:	46c0      	nop			@ (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002be0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002be0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <pxCurrentTCBConst2>)
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	3020      	adds	r0, #32
 8002be8:	f380 8809 	msr	PSP, r0
 8002bec:	2002      	movs	r0, #2
 8002bee:	f380 8814 	msr	CONTROL, r0
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002bf8:	46ae      	mov	lr, r5
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	bc04      	pop	{r2}
 8002bfe:	b662      	cpsie	i
 8002c00:	4718      	bx	r3
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46c0      	nop			@ (mov r8, r8)

08002c10 <pxCurrentTCBConst2>:
 8002c10:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46c0      	nop			@ (mov r8, r8)

08002c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <xPortStartScheduler+0x40>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <xPortStartScheduler+0x40>)
 8002c22:	21ff      	movs	r1, #255	@ 0xff
 8002c24:	0409      	lsls	r1, r1, #16
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <xPortStartScheduler+0x40>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <xPortStartScheduler+0x40>)
 8002c30:	21ff      	movs	r1, #255	@ 0xff
 8002c32:	0609      	lsls	r1, r1, #24
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c38:	f000 f898 	bl	8002d6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <xPortStartScheduler+0x44>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002c42:	f7ff ffcd 	bl	8002be0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c46:	f7ff f9af 	bl	8001fa8 <vTaskSwitchContext>
    prvTaskExitError();
 8002c4a:	f7ff ffa5 	bl	8002b98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	e000ed20 	.word	0xe000ed20
 8002c5c:	20000004 	.word	0x20000004

08002c60 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <vPortYield+0x1c>)
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	0552      	lsls	r2, r2, #21
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002c6c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002c70:	f3bf 8f6f 	isb	sy
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002c84:	b672      	cpsid	i
    uxCriticalNesting++;
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <vPortEnterCritical+0x20>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <vPortEnterCritical+0x20>)
 8002c8e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002c90:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002c94:	f3bf 8f6f 	isb	sy
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <vPortExitCritical+0x2c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <vPortExitCritical+0x12>
 8002cb0:	b672      	cpsid	i
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	e7fd      	b.n	8002cb2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <vPortExitCritical+0x2c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <vPortExitCritical+0x2c>)
 8002cbe:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002cc0:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <vPortExitCritical+0x2c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8002cc8:	b662      	cpsie	i
    }
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002cd4:	f3ef 8010 	mrs	r0, PRIMASK
 8002cd8:	b672      	cpsid	i
 8002cda:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	0018      	movs	r0, r3

08002ce0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002ce0:	f380 8810 	msr	PRIMASK, r0
 8002ce4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
	...

08002cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002cf0:	f3ef 8009 	mrs	r0, PSP
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <pxCurrentTCBConst>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	3820      	subs	r0, #32
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002cfe:	4644      	mov	r4, r8
 8002d00:	464d      	mov	r5, r9
 8002d02:	4656      	mov	r6, sl
 8002d04:	465f      	mov	r7, fp
 8002d06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002d08:	b508      	push	{r3, lr}
 8002d0a:	b672      	cpsid	i
 8002d0c:	f7ff f94c 	bl	8001fa8 <vTaskSwitchContext>
 8002d10:	b662      	cpsie	i
 8002d12:	bc0c      	pop	{r2, r3}
 8002d14:	6811      	ldr	r1, [r2, #0]
 8002d16:	6808      	ldr	r0, [r1, #0]
 8002d18:	3010      	adds	r0, #16
 8002d1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002d1c:	46a0      	mov	r8, r4
 8002d1e:	46a9      	mov	r9, r5
 8002d20:	46b2      	mov	sl, r6
 8002d22:	46bb      	mov	fp, r7
 8002d24:	f380 8809 	msr	PSP, r0
 8002d28:	3820      	subs	r0, #32
 8002d2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002d2c:	4718      	bx	r3
 8002d2e:	46c0      	nop			@ (mov r8, r8)

08002d30 <pxCurrentTCBConst>:
 8002d30:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46c0      	nop			@ (mov r8, r8)

08002d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d3e:	f7ff ffc9 	bl	8002cd4 <ulSetInterruptMaskFromISR>
 8002d42:	0003      	movs	r3, r0
 8002d44:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d46:	f7ff f805 	bl	8001d54 <xTaskIncrementTick>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d003      	beq.n	8002d56 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <SysTick_Handler+0x30>)
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	0552      	lsls	r2, r2, #21
 8002d54:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff ffc1 	bl	8002ce0 <vClearInterruptMaskFromISR>
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <vPortSetupTimerInterrupt+0x34>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <vPortSetupTimerInterrupt+0x38>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <vPortSetupTimerInterrupt+0x3c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	22fa      	movs	r2, #250	@ 0xfa
 8002d82:	0091      	lsls	r1, r2, #2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd f9bf 	bl	8000108 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <vPortSetupTimerInterrupt+0x40>)
 8002d90:	3a01      	subs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d94:	4b02      	ldr	r3, [pc, #8]	@ (8002da0 <vPortSetupTimerInterrupt+0x34>)
 8002d96:	2207      	movs	r2, #7
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	e000e010 	.word	0xe000e010
 8002da4:	e000e018 	.word	0xe000e018
 8002da8:	20000014 	.word	0x20000014
 8002dac:	e000e014 	.word	0xe000e014

08002db0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	4393      	bics	r3, r2
 8002dca:	3308      	adds	r3, #8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d205      	bcs.n	8002dde <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	3308      	adds	r3, #8
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	e001      	b.n	8002de2 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002de2:	f7fe fe9d 	bl	8001b20 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002de6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <pvPortMalloc+0xb4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <pvPortMalloc+0xb8>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	4393      	bics	r3, r2
 8002df4:	001a      	movs	r2, r3
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <pvPortMalloc+0xb4>)
 8002df8:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002e08:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <pvPortMalloc+0xc0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d813      	bhi.n	8002e36 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	18d2      	adds	r2, r2, r3
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d90b      	bls.n	8002e36 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <pvPortMalloc+0xb4>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	18d3      	adds	r3, r2, r3
 8002e28:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	18d2      	adds	r2, r2, r3
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <pvPortMalloc+0xbc>)
 8002e34:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <pvPortMalloc+0x9a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	0019      	movs	r1, r3
 8002e42:	2094      	movs	r0, #148	@ 0x94
 8002e44:	f000 fd0a 	bl	800385c <vTraceStoreMemMangEvent>
 8002e48:	e005      	b.n	8002e56 <pvPortMalloc+0xa6>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	20e8      	movs	r0, #232	@ 0xe8
 8002e52:	f000 fd03 	bl	800385c <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8002e56:	f7fe fe6f 	bl	8001b38 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000199c 	.word	0x2000199c
 8002e68:	2000019f 	.word	0x2000019f
 8002e6c:	20001998 	.word	0x20001998
 8002e70:	000017f7 	.word	0x000017f7

08002e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <vPortFree+0x14>
 8002e82:	b672      	cpsid	i
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	e7fd      	b.n	8002e84 <vPortFree+0x10>
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fe f9aa 	bl	80011f4 <uxQueueGetQueueNumber>
 8002ea0:	0003      	movs	r3, r0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fe f9b3 	bl	8001220 <ucQueueGetQueueType>
 8002eba:	0003      	movs	r3, r0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7ff faca 	bl	8002468 <uxTaskGetTaskNumber>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	b29b      	uxth	r3, r3
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff fabc 	bl	8002468 <uxTaskGetTaskNumber>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b29b      	uxth	r3, r3
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}

08002efe <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	000a      	movs	r2, r1
 8002f08:	1cbb      	adds	r3, r7, #2
 8002f0a:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff faaa 	bl	8002468 <uxTaskGetTaskNumber>
 8002f14:	0003      	movs	r3, r0
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	1cbb      	adds	r3, r7, #2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0011      	movs	r1, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff fab3 	bl	8002490 <vTaskSetTaskNumber>
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	000a      	movs	r2, r1
 8002f3c:	1cbb      	adds	r3, r7, #2
 8002f3e:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff fa90 	bl	8002468 <uxTaskGetTaskNumber>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	0c1a      	lsrs	r2, r3, #16
 8002f4e:	1cbb      	adds	r3, r7, #2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fa98 	bl	8002490 <vTaskSetTaskNumber>
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff ff8c 	bl	8002e90 <prvTraceGetQueueNumber>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	b29b      	uxth	r3, r3
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff ff7e 	bl	8002e90 <prvTraceGetQueueNumber>
 8002f94:	0003      	movs	r3, r0
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	b29b      	uxth	r3, r3
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	000a      	movs	r2, r1
 8002fac:	1cbb      	adds	r3, r7, #2
 8002fae:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff6c 	bl	8002e90 <prvTraceGetQueueNumber>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	1cbb      	adds	r3, r7, #2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fe f91d 	bl	8001208 <vQueueSetQueueNumber>
}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	000a      	movs	r2, r1
 8002fe0:	1cbb      	adds	r3, r7, #2
 8002fe2:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff ff52 	bl	8002e90 <prvTraceGetQueueNumber>
 8002fec:	0003      	movs	r3, r0
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	0c1a      	lsrs	r2, r3, #16
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0011      	movs	r1, r2
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fe f902 	bl	8001208 <vQueueSetQueueNumber>
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <vTraceSetSemaphoreName>:
{
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
}

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ffa5 	bl	8002f68 <prvTraceGetQueueNumberLow16>
 800301e:	0003      	movs	r3, r0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	0019      	movs	r1, r3
 8003026:	2001      	movs	r0, #1
 8003028:	f001 f846 	bl	80040b8 <prvTraceSetObjectName>
}
 800302c:	46c0      	nop			@ (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}

08003034 <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8003038:	f7ff faa4 	bl	8002584 <xTaskGetCurrentTaskHandle>
 800303c:	0003      	movs	r3, r0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}

08003056 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8003068:	4b62      	ldr	r3, [pc, #392]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2209      	movs	r2, #9
 800306e:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8003070:	4b60      	ldr	r3, [pc, #384]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2250      	movs	r2, #80	@ 0x50
 8003076:	2102      	movs	r1, #2
 8003078:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 800307a:	4b5e      	ldr	r3, [pc, #376]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2251      	movs	r2, #81	@ 0x51
 8003080:	2106      	movs	r1, #6
 8003082:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003084:	4b5b      	ldr	r3, [pc, #364]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2252      	movs	r2, #82	@ 0x52
 800308a:	2102      	movs	r1, #2
 800308c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800308e:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2253      	movs	r2, #83	@ 0x53
 8003094:	2106      	movs	r1, #6
 8003096:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8003098:	4b56      	ldr	r3, [pc, #344]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2254      	movs	r2, #84	@ 0x54
 800309e:	2104      	movs	r1, #4
 80030a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 80030a2:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2255      	movs	r2, #85	@ 0x55
 80030a8:	2101      	movs	r1, #1
 80030aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80030ac:	4b51      	ldr	r3, [pc, #324]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2256      	movs	r2, #86	@ 0x56
 80030b2:	2102      	movs	r1, #2
 80030b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80030b6:	4b4f      	ldr	r3, [pc, #316]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2257      	movs	r2, #87	@ 0x57
 80030bc:	2102      	movs	r1, #2
 80030be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80030c0:	4b4c      	ldr	r3, [pc, #304]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2258      	movs	r2, #88	@ 0x58
 80030c6:	2102      	movs	r1, #2
 80030c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	225c      	movs	r2, #92	@ 0x5c
 80030d0:	210f      	movs	r1, #15
 80030d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80030d4:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	225d      	movs	r2, #93	@ 0x5d
 80030da:	210f      	movs	r1, #15
 80030dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80030de:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	225e      	movs	r2, #94	@ 0x5e
 80030e4:	210f      	movs	r1, #15
 80030e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80030e8:	4b42      	ldr	r3, [pc, #264]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	225f      	movs	r2, #95	@ 0x5f
 80030ee:	210f      	movs	r1, #15
 80030f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80030f2:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2260      	movs	r2, #96	@ 0x60
 80030f8:	210f      	movs	r1, #15
 80030fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80030fc:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2261      	movs	r2, #97	@ 0x61
 8003102:	210f      	movs	r1, #15
 8003104:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8003106:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2262      	movs	r2, #98	@ 0x62
 800310c:	210f      	movs	r1, #15
 800310e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8003110:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2263      	movs	r2, #99	@ 0x63
 8003116:	210f      	movs	r1, #15
 8003118:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800311a:	4b36      	ldr	r3, [pc, #216]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2264      	movs	r2, #100	@ 0x64
 8003120:	210f      	movs	r1, #15
 8003122:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8003124:	4b33      	ldr	r3, [pc, #204]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2268      	movs	r2, #104	@ 0x68
 800312a:	2110      	movs	r1, #16
 800312c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800312e:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2269      	movs	r2, #105	@ 0x69
 8003134:	2110      	movs	r1, #16
 8003136:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8003138:	4b2e      	ldr	r3, [pc, #184]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	226a      	movs	r2, #106	@ 0x6a
 800313e:	2110      	movs	r1, #16
 8003140:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8003142:	4b2c      	ldr	r3, [pc, #176]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	226b      	movs	r2, #107	@ 0x6b
 8003148:	2113      	movs	r1, #19
 800314a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 800314c:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	226c      	movs	r2, #108	@ 0x6c
 8003152:	2111      	movs	r1, #17
 8003154:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8003156:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	226d      	movs	r2, #109	@ 0x6d
 800315c:	2110      	movs	r1, #16
 800315e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8003160:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	226e      	movs	r2, #110	@ 0x6e
 8003166:	2113      	movs	r1, #19
 8003168:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 800316a:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	226f      	movs	r2, #111	@ 0x6f
 8003170:	2113      	movs	r1, #19
 8003172:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2270      	movs	r2, #112	@ 0x70
 800317a:	2113      	movs	r1, #19
 800317c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800317e:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2274      	movs	r2, #116	@ 0x74
 8003184:	2100      	movs	r1, #0
 8003186:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2276      	movs	r2, #118	@ 0x76
 800318e:	2120      	movs	r1, #32
 8003190:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8003192:	4b18      	ldr	r3, [pc, #96]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2278      	movs	r2, #120	@ 0x78
 8003198:	2180      	movs	r1, #128	@ 0x80
 800319a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 800319c:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	227a      	movs	r2, #122	@ 0x7a
 80031a2:	21a0      	movs	r1, #160	@ 0xa0
 80031a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 80031a6:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	227c      	movs	r2, #124	@ 0x7c
 80031ac:	2189      	movs	r1, #137	@ 0x89
 80031ae:	0049      	lsls	r1, r1, #1
 80031b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80031b2:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	227e      	movs	r2, #126	@ 0x7e
 80031b8:	21ab      	movs	r1, #171	@ 0xab
 80031ba:	0049      	lsls	r1, r1, #1
 80031bc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80031be:	4b0d      	ldr	r3, [pc, #52]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	21b3      	movs	r1, #179	@ 0xb3
 80031c6:	0049      	lsls	r1, r1, #1
 80031c8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2282      	movs	r2, #130	@ 0x82
 80031d0:	21c6      	movs	r1, #198	@ 0xc6
 80031d2:	0049      	lsls	r1, r1, #1
 80031d4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80031d6:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2284      	movs	r2, #132	@ 0x84
 80031dc:	21d9      	movs	r1, #217	@ 0xd9
 80031de:	0049      	lsls	r1, r1, #1
 80031e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ec      	movs	r2, #236	@ 0xec
 80031e8:	0052      	lsls	r2, r2, #1
 80031ea:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20002df8 	.word	0x20002df8

080031f8 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8003202:	4b40      	ldr	r3, [pc, #256]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003204:	2200      	movs	r2, #0
 8003206:	825a      	strh	r2, [r3, #18]
 8003208:	4b3e      	ldr	r3, [pc, #248]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800320a:	8a5a      	ldrh	r2, [r3, #18]
 800320c:	4b3d      	ldr	r3, [pc, #244]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800320e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8003210:	4b3c      	ldr	r3, [pc, #240]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003212:	2202      	movs	r2, #2
 8003214:	829a      	strh	r2, [r3, #20]
 8003216:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003218:	8a9a      	ldrh	r2, [r3, #20]
 800321a:	4b3a      	ldr	r3, [pc, #232]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800321c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 800321e:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003220:	2208      	movs	r2, #8
 8003222:	82da      	strh	r2, [r3, #22]
 8003224:	4b37      	ldr	r3, [pc, #220]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003226:	8ada      	ldrh	r2, [r3, #22]
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800322a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800322c:	4b35      	ldr	r3, [pc, #212]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800322e:	220a      	movs	r2, #10
 8003230:	831a      	strh	r2, [r3, #24]
 8003232:	4b34      	ldr	r3, [pc, #208]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003234:	8b1a      	ldrh	r2, [r3, #24]
 8003236:	4b33      	ldr	r3, [pc, #204]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003238:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800323a:	4b32      	ldr	r3, [pc, #200]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800323c:	2210      	movs	r2, #16
 800323e:	835a      	strh	r2, [r3, #26]
 8003240:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003242:	8b5a      	ldrh	r2, [r3, #26]
 8003244:	4b2f      	ldr	r3, [pc, #188]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003246:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003248:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800324a:	2214      	movs	r2, #20
 800324c:	839a      	strh	r2, [r3, #28]
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003250:	8b9a      	ldrh	r2, [r3, #28]
 8003252:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003254:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003256:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003258:	2215      	movs	r2, #21
 800325a:	83da      	strh	r2, [r3, #30]
 800325c:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800325e:	8bda      	ldrh	r2, [r3, #30]
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003262:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003264:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003266:	2217      	movs	r2, #23
 8003268:	841a      	strh	r2, [r3, #32]
 800326a:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800326c:	8c1a      	ldrh	r2, [r3, #32]
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003270:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8003272:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003274:	2219      	movs	r2, #25
 8003276:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003278:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800327a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800327c:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800327e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8003280:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003282:	2201      	movs	r2, #1
 8003284:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003286:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003288:	2207      	movs	r2, #7
 800328a:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800328e:	2209      	movs	r2, #9
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8003292:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8003294:	220f      	movs	r2, #15
 8003296:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800329a:	2213      	movs	r2, #19
 800329c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032a0:	2214      	movs	r2, #20
 80032a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032a6:	2216      	movs	r2, #22
 80032a8:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032ac:	2218      	movs	r2, #24
 80032ae:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032b2:	221a      	movs	r2, #26
 80032b4:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	e00a      	b.n	80032d2 <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80032bc:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3318      	adds	r3, #24
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	18d3      	adds	r3, r2, r3
 80032c6:	3306      	adds	r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d9f1      	bls.n	80032bc <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	e009      	b.n	80032f2 <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80032de:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80032e0:	2148      	movs	r1, #72	@ 0x48
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	185b      	adds	r3, r3, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3301      	adds	r3, #1
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b1a      	cmp	r3, #26
 80032f6:	d9f2      	bls.n	80032de <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b002      	add	sp, #8
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	200019cc 	.word	0x200019cc

08003308 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d816      	bhi.n	800334a <pszTraceGetErrorNotEnoughHandles+0x42>
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8003328:	e010      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 800332a:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <pszTraceGetErrorNotEnoughHandles+0x54>)
 800332c:	e00e      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8003330:	e00c      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8003334:	e00a      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8003338:	e008      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <pszTraceGetErrorNotEnoughHandles+0x64>)
 800333c:	e006      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8003340:	e004      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003344:	e002      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8003346:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003348:	e000      	b.n	800334c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800334a:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}
 8003354:	080056c0 	.word	0x080056c0
 8003358:	08005044 	.word	0x08005044
 800335c:	0800508c 	.word	0x0800508c
 8003360:	080050d4 	.word	0x080050d4
 8003364:	08005128 	.word	0x08005128
 8003368:	08005174 	.word	0x08005174
 800336c:	080051c0 	.word	0x080051c0
 8003370:	0800520c 	.word	0x0800520c
 8003374:	08005260 	.word	0x08005260
 8003378:	080052b8 	.word	0x080052b8
 800337c:	08005314 	.word	0x08005314

08003380 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8003388:	f000 f8c8 	bl	800351c <xTraceInitialize>
 800338c:	0003      	movs	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 8003392:	2301      	movs	r3, #1
 8003394:	e021      	b.n	80033da <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10b      	bne.n	80033b4 <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 800339c:	f7ff fe5b 	bl	8003056 <xTraceKernelPortEnable>
 80033a0:	0003      	movs	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e017      	b.n	80033da <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 80033aa:	f000 f8a9 	bl	8003500 <prvTraceInitTimestamps>

		prvTraceStart();
 80033ae:	f000 f825 	bl	80033fc <prvTraceStart>
 80033b2:	e011      	b.n	80033d8 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d105      	bne.n	80033c6 <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80033ba:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <xTraceEnable+0x64>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 fee5 	bl	800418c <prvTraceError>

		return TRC_FAIL;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e009      	b.n	80033da <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <xTraceEnable+0x68>)
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fedc 	bl	800418c <prvTraceError>

		return TRC_FAIL;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	08005344 	.word	0x08005344
 80033e8:	08005384 	.word	0x08005384

080033ec <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	prvTraceStop();
 80033f0:	f000 f86e 	bl	80034d0 <prvTraceStop>

	return TRC_SUCCESS;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8003402:	2417      	movs	r4, #23
 8003404:	193b      	adds	r3, r7, r4
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 800340a:	4b2d      	ldr	r3, [pc, #180]	@ (80034c0 <prvTraceStart+0xc4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d050      	beq.n	80034b4 <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8003412:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <prvTraceStart+0xc4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	2b01      	cmp	r3, #1
 800341a:	d04d      	beq.n	80034b8 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <prvTraceStart+0xc8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d14a      	bne.n	80034ba <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003424:	f3ef 8310 	mrs	r3, PRIMASK
 8003428:	60bb      	str	r3, [r7, #8]
  return(result);
 800342a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	2301      	movs	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f383 8810 	msr	PRIMASK, r3
}
 8003438:	46c0      	nop			@ (mov r8, r8)
 800343a:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <prvTraceStart+0xcc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <prvTraceStart+0xcc>)
 8003442:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 8003444:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <prvTraceStart+0xc4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 800344c:	f7ff fdf2 	bl	8003034 <prvTraceGetCurrentTaskHandle>
 8003450:	0003      	movs	r3, r0
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fd36 	bl	8002ec4 <prvTraceGetTaskNumberLow16>
 8003458:	0003      	movs	r3, r0
 800345a:	001a      	movs	r2, r3
 800345c:	0025      	movs	r5, r4
 800345e:	197b      	adds	r3, r7, r5
 8003460:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 8003462:	197b      	adds	r3, r7, r5
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800346a:	197c      	adds	r4, r7, r5
 800346c:	2003      	movs	r0, #3
 800346e:	f000 fd2b 	bl	8003ec8 <prvTraceGetObjectHandle>
 8003472:	0003      	movs	r3, r0
 8003474:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <prvTraceStart+0xd0>)
 8003478:	197b      	adds	r3, r7, r5
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	0019      	movs	r1, r3
 800347e:	2003      	movs	r0, #3
 8003480:	f000 fe1a 	bl	80040b8 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8003484:	197b      	adds	r3, r7, r5
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	0019      	movs	r1, r3
 800348c:	2003      	movs	r0, #3
 800348e:	f000 fbfd 	bl	8003c8c <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8003492:	2317      	movs	r3, #23
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 fb83 	bl	8003ba4 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 800349e:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <prvTraceStart+0xcc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <prvTraceStart+0xcc>)
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	e002      	b.n	80034ba <prvTraceStart+0xbe>
		return;
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	e000      	b.n	80034ba <prvTraceStart+0xbe>
		return; /* Already running */
 80034b8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b006      	add	sp, #24
 80034be:	bdb0      	pop	{r4, r5, r7, pc}
 80034c0:	20002df8 	.word	0x20002df8
 80034c4:	20001a30 	.word	0x20001a30
 80034c8:	200019b4 	.word	0x200019b4
 80034cc:	080053c4 	.word	0x080053c4

080034d0 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80034d4:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <prvTraceStop+0x28>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <prvTraceStop+0x28>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <prvTraceStop+0x2c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <prvTraceStop+0x2c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4798      	blx	r3
	}
}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20002df8 	.word	0x20002df8
 80034fc:	200019c0 	.word	0x200019c0

08003500 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <prvTraceInitTimestamps+0x14>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <prvTraceInitTimestamps+0x18>)
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	e000e018 	.word	0xe000e018
 8003518:	200019c4 	.word	0x200019c4

0800351c <xTraceInitialize>:
	return trcStr;
}
#endif

traceResult xTraceInitialize(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8003520:	4b7f      	ldr	r3, [pc, #508]	@ (8003720 <xTraceInitialize+0x204>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8003528:	2300      	movs	r3, #0
 800352a:	e0f6      	b.n	800371a <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 800352c:	4b7d      	ldr	r3, [pc, #500]	@ (8003724 <xTraceInitialize+0x208>)
 800352e:	2201      	movs	r2, #1
 8003530:	4252      	negs	r2, r2
 8003532:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8003534:	4b7c      	ldr	r3, [pc, #496]	@ (8003728 <xTraceInitialize+0x20c>)
 8003536:	2201      	movs	r2, #1
 8003538:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 800353a:	4b7c      	ldr	r3, [pc, #496]	@ (800372c <xTraceInitialize+0x210>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8003540:	4b7b      	ldr	r3, [pc, #492]	@ (8003730 <xTraceInitialize+0x214>)
 8003542:	4a7c      	ldr	r2, [pc, #496]	@ (8003734 <xTraceInitialize+0x218>)
 8003544:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8003546:	4b7c      	ldr	r3, [pc, #496]	@ (8003738 <xTraceInitialize+0x21c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <xTraceInitialize+0x220>)
 800354c:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 800354e:	4b7c      	ldr	r3, [pc, #496]	@ (8003740 <xTraceInitialize+0x224>)
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fd77 	bl	8003044 <xTraceKernelPortInitialize>
 8003556:	0003      	movs	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 800355c:	2301      	movs	r3, #1
 800355e:	e0dc      	b.n	800371a <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <xTraceInitialize+0x214>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a77      	ldr	r2, [pc, #476]	@ (8003744 <xTraceInitialize+0x228>)
 8003566:	2100      	movs	r1, #0
 8003568:	0018      	movs	r0, r3
 800356a:	f001 fd1d 	bl	8004fa8 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800356e:	4b70      	ldr	r3, [pc, #448]	@ (8003730 <xTraceInitialize+0x214>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	@ (8003748 <xTraceInitialize+0x22c>)
 8003574:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8003576:	4b6e      	ldr	r3, [pc, #440]	@ (8003730 <xTraceInitialize+0x214>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2207      	movs	r2, #7
 800357c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800357e:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <xTraceInitialize+0x214>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003586:	4b6a      	ldr	r3, [pc, #424]	@ (8003730 <xTraceInitialize+0x214>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6e      	ldr	r2, [pc, #440]	@ (8003744 <xTraceInitialize+0x228>)
 800358c:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800358e:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <xTraceInitialize+0x214>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	22fa      	movs	r2, #250	@ 0xfa
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8003598:	4b65      	ldr	r3, [pc, #404]	@ (8003730 <xTraceInitialize+0x214>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6b      	ldr	r2, [pc, #428]	@ (800374c <xTraceInitialize+0x230>)
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80035a0:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <xTraceInitialize+0x214>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80035a8:	4b61      	ldr	r3, [pc, #388]	@ (8003730 <xTraceInitialize+0x214>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 80035b0:	f7ff fd58 	bl	8003064 <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80035b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003730 <xTraceInitialize+0x214>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2398      	movs	r3, #152	@ 0x98
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4964      	ldr	r1, [pc, #400]	@ (8003750 <xTraceInitialize+0x234>)
 80035be:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80035c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <xTraceInitialize+0x214>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2399      	movs	r3, #153	@ 0x99
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	21c8      	movs	r1, #200	@ 0xc8
 80035ca:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80035cc:	4b58      	ldr	r3, [pc, #352]	@ (8003730 <xTraceInitialize+0x214>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	239a      	movs	r3, #154	@ 0x9a
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	2101      	movs	r1, #1
 80035d6:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80035d8:	4b55      	ldr	r3, [pc, #340]	@ (8003730 <xTraceInitialize+0x214>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	23ef      	movs	r3, #239	@ 0xef
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	495c      	ldr	r1, [pc, #368]	@ (8003754 <xTraceInitialize+0x238>)
 80035e2:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80035e4:	4b52      	ldr	r3, [pc, #328]	@ (8003730 <xTraceInitialize+0x214>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	22f0      	movs	r2, #240	@ 0xf0
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4694      	mov	ip, r2
 80035ee:	4463      	add	r3, ip
 80035f0:	4959      	ldr	r1, [pc, #356]	@ (8003758 <xTraceInitialize+0x23c>)
 80035f2:	2250      	movs	r2, #80	@ 0x50
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fd3b 	bl	8004070 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80035fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003730 <xTraceInitialize+0x214>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2382      	movs	r3, #130	@ 0x82
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4956      	ldr	r1, [pc, #344]	@ (800375c <xTraceInitialize+0x240>)
 8003604:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8003606:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <xTraceInitialize+0x214>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a55      	ldr	r2, [pc, #340]	@ (8003760 <xTraceInitialize+0x244>)
 800360c:	210a      	movs	r1, #10
 800360e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8003610:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <xTraceInitialize+0x214>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a53      	ldr	r2, [pc, #332]	@ (8003764 <xTraceInitialize+0x248>)
 8003616:	210b      	movs	r1, #11
 8003618:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 800361a:	4b45      	ldr	r3, [pc, #276]	@ (8003730 <xTraceInitialize+0x214>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a52      	ldr	r2, [pc, #328]	@ (8003768 <xTraceInitialize+0x24c>)
 8003620:	210c      	movs	r1, #12
 8003622:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8003624:	4b42      	ldr	r3, [pc, #264]	@ (8003730 <xTraceInitialize+0x214>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a50      	ldr	r2, [pc, #320]	@ (800376c <xTraceInitialize+0x250>)
 800362a:	210d      	movs	r1, #13
 800362c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 800362e:	4b40      	ldr	r3, [pc, #256]	@ (8003730 <xTraceInitialize+0x214>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4f      	ldr	r2, [pc, #316]	@ (8003770 <xTraceInitialize+0x254>)
 8003634:	2171      	movs	r1, #113	@ 0x71
 8003636:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8003638:	4b3d      	ldr	r3, [pc, #244]	@ (8003730 <xTraceInitialize+0x214>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4d      	ldr	r2, [pc, #308]	@ (8003774 <xTraceInitialize+0x258>)
 800363e:	2172      	movs	r1, #114	@ 0x72
 8003640:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8003642:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <xTraceInitialize+0x214>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4c      	ldr	r2, [pc, #304]	@ (8003778 <xTraceInitialize+0x25c>)
 8003648:	2173      	movs	r1, #115	@ 0x73
 800364a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 800364c:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <xTraceInitialize+0x214>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <xTraceInitialize+0x260>)
 8003652:	2174      	movs	r1, #116	@ 0x74
 8003654:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8003656:	4b36      	ldr	r3, [pc, #216]	@ (8003730 <xTraceInitialize+0x214>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	239e      	movs	r3, #158	@ 0x9e
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	21f1      	movs	r1, #241	@ 0xf1
 8003660:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 8003662:	4b33      	ldr	r3, [pc, #204]	@ (8003730 <xTraceInitialize+0x214>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a46      	ldr	r2, [pc, #280]	@ (8003780 <xTraceInitialize+0x264>)
 8003668:	21f2      	movs	r1, #242	@ 0xf2
 800366a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 800366c:	4b30      	ldr	r3, [pc, #192]	@ (8003730 <xTraceInitialize+0x214>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a44      	ldr	r2, [pc, #272]	@ (8003784 <xTraceInitialize+0x268>)
 8003672:	21f3      	movs	r1, #243	@ 0xf3
 8003674:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8003676:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <xTraceInitialize+0x214>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a43      	ldr	r2, [pc, #268]	@ (8003788 <xTraceInitialize+0x26c>)
 800367c:	21f4      	movs	r1, #244	@ 0xf4
 800367e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 8003680:	f7ff fdba 	bl	80031f8 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8003684:	4b2a      	ldr	r3, [pc, #168]	@ (8003730 <xTraceInitialize+0x214>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	22f4      	movs	r2, #244	@ 0xf4
 800368a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 800368c:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <xTraceInitialize+0x214>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	22f3      	movs	r2, #243	@ 0xf3
 8003692:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003694:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <xTraceInitialize+0x214>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	22f2      	movs	r2, #242	@ 0xf2
 800369a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 800369c:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <xTraceInitialize+0x214>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	22f1      	movs	r2, #241	@ 0xf1
 80036a2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80036a4:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <xTraceInitialize+0x214>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2274      	movs	r2, #116	@ 0x74
 80036aa:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80036ac:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <xTraceInitialize+0x214>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2273      	movs	r2, #115	@ 0x73
 80036b2:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <xTraceInitialize+0x214>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2272      	movs	r2, #114	@ 0x72
 80036ba:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <xTraceInitialize+0x214>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2271      	movs	r2, #113	@ 0x71
 80036c2:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <xTraceInitialize+0x214>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2204      	movs	r2, #4
 80036ca:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80036cc:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <xTraceInitialize+0x214>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2203      	movs	r2, #3
 80036d2:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80036d4:	4b16      	ldr	r3, [pc, #88]	@ (8003730 <xTraceInitialize+0x214>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2202      	movs	r2, #2
 80036da:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80036dc:	4b14      	ldr	r3, [pc, #80]	@ (8003730 <xTraceInitialize+0x214>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <xTraceInitialize+0x210>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80036ec:	4b10      	ldr	r3, [pc, #64]	@ (8003730 <xTraceInitialize+0x214>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	22f0      	movs	r2, #240	@ 0xf0
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	1898      	adds	r0, r3, r2
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <xTraceInitialize+0x210>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2250      	movs	r2, #80	@ 0x50
 80036fc:	0019      	movs	r1, r3
 80036fe:	f000 fcb7 	bl	8004070 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <xTraceInitialize+0x214>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	23ee      	movs	r3, #238	@ 0xee
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	2101      	movs	r1, #1
 800370c:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 800370e:	f7ff fedf 	bl	80034d0 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8003712:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <xTraceInitialize+0x204>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20002dfc 	.word	0x20002dfc
 8003724:	200019c8 	.word	0x200019c8
 8003728:	200019ca 	.word	0x200019ca
 800372c:	20001a30 	.word	0x20001a30
 8003730:	20002df8 	.word	0x20002df8
 8003734:	20001a34 	.word	0x20001a34
 8003738:	e000e018 	.word	0xe000e018
 800373c:	200019c4 	.word	0x200019c4
 8003740:	200019a0 	.word	0x200019a0
 8003744:	000013c4 	.word	0x000013c4
 8003748:	00001aa1 	.word	0x00001aa1
 800374c:	f0f0f0f0 	.word	0xf0f0f0f0
 8003750:	f1f1f1f1 	.word	0xf1f1f1f1
 8003754:	f2f2f2f2 	.word	0xf2f2f2f2
 8003758:	080053d0 	.word	0x080053d0
 800375c:	f3f3f3f3 	.word	0xf3f3f3f3
 8003760:	000013b8 	.word	0x000013b8
 8003764:	000013b9 	.word	0x000013b9
 8003768:	000013ba 	.word	0x000013ba
 800376c:	000013bb 	.word	0x000013bb
 8003770:	000013bc 	.word	0x000013bc
 8003774:	000013bd 	.word	0x000013bd
 8003778:	000013be 	.word	0x000013be
 800377c:	000013bf 	.word	0x000013bf
 8003780:	000013c1 	.word	0x000013c1
 8003784:	000013c2 	.word	0x000013c2
 8003788:	000013c3 	.word	0x000013c3

0800378c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	0002      	movs	r2, r0
 8003794:	1dfb      	adds	r3, r7, #7
 8003796:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d04d      	beq.n	800383c <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80037a0:	4b29      	ldr	r3, [pc, #164]	@ (8003848 <prvTraceStoreTaskReady+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d04b      	beq.n	8003840 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <prvTraceStoreTaskReady+0xc0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80037b0:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <prvTraceStoreTaskReady+0xc4>)
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fcea 	bl	800418c <prvTraceError>
		return;
 80037b8:	e043      	b.n	8003842 <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	60fb      	str	r3, [r7, #12]
  return(result);
 80037c0:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	2301      	movs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <prvTraceStoreTaskReady+0xc0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <prvTraceStoreTaskReady+0xc0>)
 80037d8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80037da:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <prvTraceStoreTaskReady+0xc8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80037e4:	251a      	movs	r5, #26
 80037e6:	197c      	adds	r4, r7, r5
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <prvTraceStoreTaskReady+0xcc>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fdc2 	bl	8004374 <prvTraceGetDTS>
 80037f0:	0003      	movs	r3, r0
 80037f2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 80037f4:	2419      	movs	r4, #25
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	1dfa      	adds	r2, r7, #7
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80037fe:	f000 faef 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003802:	0003      	movs	r3, r0
 8003804:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2202      	movs	r2, #2
 8003810:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	197a      	adds	r2, r7, r5
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	193a      	adds	r2, r7, r4
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003822:	f000 fd7d 	bl	8004320 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <prvTraceStoreTaskReady+0xc0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	4b07      	ldr	r3, [pc, #28]	@ (800384c <prvTraceStoreTaskReady+0xc0>)
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	e002      	b.n	8003842 <prvTraceStoreTaskReady+0xb6>
		return;
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	e000      	b.n	8003842 <prvTraceStoreTaskReady+0xb6>
		return;
 8003840:	46c0      	nop			@ (mov r8, r8)
}
 8003842:	46bd      	mov	sp, r7
 8003844:	b008      	add	sp, #32
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	20000010 	.word	0x20000010
 800384c:	200019b4 	.word	0x200019b4
 8003850:	080053e4 	.word	0x080053e4
 8003854:	20002df8 	.word	0x20002df8
 8003858:	0000ffff 	.word	0x0000ffff

0800385c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 800385c:	b5b0      	push	{r4, r5, r7, lr}
 800385e:	b08e      	sub	sp, #56	@ 0x38
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 8003868:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <vTraceStoreMemMangEvent+0x16>
 8003870:	e090      	b.n	8003994 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	da03      	bge.n	8003880 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	425b      	negs	r3, r3
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34
 800387e:	e001      	b.n	8003884 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003884:	f3ef 8310 	mrs	r3, PRIMASK
 8003888:	61bb      	str	r3, [r7, #24]
  return(result);
 800388a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 800388c:	633b      	str	r3, [r7, #48]	@ 0x30
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	4b41      	ldr	r3, [pc, #260]	@ (80039a0 <vTraceStoreMemMangEvent+0x144>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	4b3f      	ldr	r3, [pc, #252]	@ (80039a0 <vTraceStoreMemMangEvent+0x144>)
 80038a2:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80038aa:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4b3a      	ldr	r3, [pc, #232]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	188a      	adds	r2, r1, r2
 80038b8:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 80038ba:	4b38      	ldr	r3, [pc, #224]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c0:	4b36      	ldr	r3, [pc, #216]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d905      	bls.n	80038d6 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 80038ca:	4b34      	ldr	r3, [pc, #208]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <vTraceStoreMemMangEvent+0x140>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d04e      	beq.n	800397e <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 80038e0:	20ff      	movs	r0, #255	@ 0xff
 80038e2:	f000 fd47 	bl	8004374 <prvTraceGetDTS>
 80038e6:	0003      	movs	r3, r0
 80038e8:	001a      	movs	r2, r3
 80038ea:	242f      	movs	r4, #47	@ 0x2f
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	4a2c      	ldr	r2, [pc, #176]	@ (80039a4 <vTraceStoreMemMangEvent+0x148>)
 80038f4:	0019      	movs	r1, r3
 80038f6:	0010      	movs	r0, r2
 80038f8:	f000 f8bc 	bl	8003a74 <prvTraceGetParam>
 80038fc:	0002      	movs	r2, r0
 80038fe:	252c      	movs	r5, #44	@ 0x2c
 8003900:	197b      	adds	r3, r7, r5
 8003902:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003904:	f000 fa6c 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003908:	0003      	movs	r3, r0
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d035      	beq.n	800397e <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	193a      	adds	r2, r7, r4
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	197a      	adds	r2, r7, r5
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003928:	f000 fcfa 	bl	8004320 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <vTraceStoreMemMangEvent+0x148>)
 8003930:	0019      	movs	r1, r3
 8003932:	0010      	movs	r0, r2
 8003934:	f000 f89e 	bl	8003a74 <prvTraceGetParam>
 8003938:	0002      	movs	r2, r0
 800393a:	2426      	movs	r4, #38	@ 0x26
 800393c:	193b      	adds	r3, r7, r4
 800393e:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8003940:	2525      	movs	r5, #37	@ 0x25
 8003942:	197b      	adds	r3, r7, r5
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003948:	f000 fa4a 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 800394c:	0003      	movs	r3, r0
 800394e:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d013      	beq.n	800397e <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	193a      	adds	r2, r7, r4
 800395a:	8812      	ldrh	r2, [r2, #0]
 800395c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	197a      	adds	r2, r7, r5
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3301      	adds	r3, #1
 800396c:	b2da      	uxtb	r2, r3
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003978:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 800397a:	f000 fcd1 	bl	8004320 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 800397e:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <vTraceStoreMemMangEvent+0x144>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1e5a      	subs	r2, r3, #1
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <vTraceStoreMemMangEvent+0x144>)
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	e000      	b.n	8003996 <vTraceStoreMemMangEvent+0x13a>
		return;
 8003994:	46c0      	nop			@ (mov r8, r8)
}
 8003996:	46bd      	mov	sp, r7
 8003998:	b00e      	add	sp, #56	@ 0x38
 800399a:	bdb0      	pop	{r4, r5, r7, pc}
 800399c:	20002df8 	.word	0x20002df8
 80039a0:	200019b4 	.word	0x200019b4
 80039a4:	0000ffff 	.word	0x0000ffff

080039a8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	230b      	movs	r3, #11
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	1c0a      	adds	r2, r1, #0
 80039b8:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80039ba:	4b29      	ldr	r3, [pc, #164]	@ (8003a60 <prvTraceStoreKernelCall+0xb8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <prvTraceStoreKernelCall+0xbc>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 fbe1 	bl	800418c <prvTraceError>
		return;
 80039ca:	e045      	b.n	8003a58 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 80039cc:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <prvTraceStoreKernelCall+0xc0>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d040      	beq.n	8003a56 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	617b      	str	r3, [r7, #20]
  return(result);
 80039da:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003a60 <prvTraceStoreKernelCall+0xb8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <prvTraceStoreKernelCall+0xb8>)
 80039f2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 80039f4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <prvTraceStoreKernelCall+0xc4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80039fe:	2522      	movs	r5, #34	@ 0x22
 8003a00:	197c      	adds	r4, r7, r5
 8003a02:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <prvTraceStoreKernelCall+0xc8>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fcb5 	bl	8004374 <prvTraceGetDTS>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003a0e:	2421      	movs	r4, #33	@ 0x21
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003a16:	f000 f9e3 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	197a      	adds	r2, r7, r5
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	193a      	adds	r2, r7, r4
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003a3c:	f000 fc70 	bl	8004320 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <prvTraceStoreKernelCall+0xb8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <prvTraceStoreKernelCall+0xb8>)
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	e000      	b.n	8003a58 <prvTraceStoreKernelCall+0xb0>
		return;
 8003a56:	46c0      	nop			@ (mov r8, r8)
}
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b00a      	add	sp, #40	@ 0x28
 8003a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	200019b4 	.word	0x200019b4
 8003a64:	0800541c 	.word	0x0800541c
 8003a68:	200019bc 	.word	0x200019bc
 8003a6c:	20002df8 	.word	0x20002df8
 8003a70:	0000ffff 	.word	0x0000ffff

08003a74 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d801      	bhi.n	8003a8a <prvTraceGetParam+0x16>
	{
		return param;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	e01e      	b.n	8003ac8 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8003a8a:	f000 f9a9 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d014      	beq.n	8003ac2 <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003abe:	f000 fc2f 	bl	8004320 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4013      	ands	r3, r2
	}
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8003ada:	2326      	movs	r3, #38	@ 0x26
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8003aea:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 fb4d 	bl	800418c <prvTraceError>
		return;
 8003af2:	e04a      	b.n	8003b8a <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af4:	f3ef 8310 	mrs	r3, PRIMASK
 8003af8:	613b      	str	r3, [r7, #16]
  return(result);
 8003afa:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b12:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8003b14:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02a      	beq.n	8003b74 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b9c <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d026      	beq.n	8003b74 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8003b26:	20ff      	movs	r0, #255	@ 0xff
 8003b28:	f000 fc24 	bl	8004374 <prvTraceGetDTS>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	001a      	movs	r2, r3
 8003b30:	241f      	movs	r4, #31
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	f7ff ff99 	bl	8003a74 <prvTraceGetParam>
 8003b42:	0002      	movs	r2, r0
 8003b44:	2526      	movs	r5, #38	@ 0x26
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8003b4a:	f000 f949 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	193a      	adds	r2, r7, r4
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	197a      	adds	r2, r7, r5
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003b70:	f000 fbd6 	bl	8004320 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
}
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b00a      	add	sp, #40	@ 0x28
 8003b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b90:	200019b4 	.word	0x200019b4
 8003b94:	0800548c 	.word	0x0800548c
 8003b98:	20002df8 	.word	0x20002df8
 8003b9c:	200019bc 	.word	0x200019bc
 8003ba0:	0000ffff 	.word	0x0000ffff

08003ba4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b089      	sub	sp, #36	@ 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	0002      	movs	r2, r0
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <prvTraceStoreTaskswitch+0xd8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <prvTraceStoreTaskswitch+0xd8>)
 8003bce:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <prvTraceStoreTaskswitch+0xdc>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	1dfa      	adds	r2, r7, #7
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d03f      	beq.n	8003c5c <prvTraceStoreTaskswitch+0xb8>
 8003bdc:	4b29      	ldr	r3, [pc, #164]	@ (8003c84 <prvTraceStoreTaskswitch+0xe0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03a      	beq.n	8003c5c <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003be6:	231a      	movs	r3, #26
 8003be8:	18fc      	adds	r4, r7, r3
 8003bea:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <prvTraceStoreTaskswitch+0xe4>)
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fbc1 	bl	8004374 <prvTraceGetDTS>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8003bf6:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <prvTraceStoreTaskswitch+0xdc>)
 8003bf8:	1dfa      	adds	r2, r7, #7
 8003bfa:	7812      	ldrb	r2, [r2, #0]
 8003bfc:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8003bfe:	2319      	movs	r3, #25
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <prvTraceStoreTaskswitch+0xdc>)
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8003c08:	f000 f8ea 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d022      	beq.n	8003c5c <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8003c16:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <prvTraceStoreTaskswitch+0xdc>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 f897 	bl	8003d50 <prvTraceGetObjectState>
 8003c22:	0003      	movs	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d103      	bne.n	8003c30 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e002      	b.n	8003c36 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2206      	movs	r2, #6
 8003c34:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	221a      	movs	r2, #26
 8003c3a:	18ba      	adds	r2, r7, r2
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2219      	movs	r2, #25
 8003c44:	18ba      	adds	r2, r7, r2
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <prvTraceStoreTaskswitch+0xdc>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	0019      	movs	r1, r3
 8003c52:	2003      	movs	r0, #3
 8003c54:	f000 f84c 	bl	8003cf0 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8003c58:	f000 fb62 	bl	8004320 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <prvTraceStoreTaskswitch+0xd8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <prvTraceStoreTaskswitch+0xd8>)
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			@ (mov r8, r8)
}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b009      	add	sp, #36	@ 0x24
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	200019b4 	.word	0x200019b4
 8003c80:	200019bc 	.word	0x200019bc
 8003c84:	20002df8 	.word	0x20002df8
 8003c88:	0000ffff 	.word	0x0000ffff

08003c8c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	0004      	movs	r4, r0
 8003c94:	0008      	movs	r0, r1
 8003c96:	0011      	movs	r1, r2
 8003c98:	1dfb      	adds	r3, r7, #7
 8003c9a:	1c22      	adds	r2, r4, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	1dbb      	adds	r3, r7, #6
 8003ca0:	1c02      	adds	r2, r0, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	1d7b      	adds	r3, r7, #5
 8003ca6:	1c0a      	adds	r2, r1, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <prvTraceSetPriorityProperty+0x60>)
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	1dbb      	adds	r3, r7, #6
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 f8bb 	bl	8003e34 <uiIndexOfObject>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <prvTraceSetPriorityProperty+0x60>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	215c      	movs	r1, #92	@ 0x5c
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	185b      	adds	r3, r3, r1
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	18c3      	adds	r3, r0, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	2288      	movs	r2, #136	@ 0x88
 8003cd8:	18e3      	adds	r3, r4, r3
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	1d7a      	adds	r2, r7, #5
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	701a      	strb	r2, [r3, #0]
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b003      	add	sp, #12
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	20002df8 	.word	0x20002df8

08003cf0 <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0004      	movs	r4, r0
 8003cf8:	0008      	movs	r0, r1
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	1dfb      	adds	r3, r7, #7
 8003cfe:	1c22      	adds	r2, r4, #0
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	1dbb      	adds	r3, r7, #6
 8003d04:	1c02      	adds	r2, r0, #0
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	1d7b      	adds	r3, r7, #5
 8003d0a:	1c0a      	adds	r2, r1, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <prvTraceSetObjectState+0x5c>)
 8003d10:	681c      	ldr	r4, [r3, #0]
 8003d12:	1dfb      	adds	r3, r7, #7
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	1dbb      	adds	r3, r7, #6
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 f889 	bl	8003e34 <uiIndexOfObject>
 8003d22:	0003      	movs	r3, r0
 8003d24:	0018      	movs	r0, r3
 8003d26:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <prvTraceSetObjectState+0x5c>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	215c      	movs	r1, #92	@ 0x5c
 8003d30:	18d3      	adds	r3, r2, r3
 8003d32:	185b      	adds	r3, r3, r1
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	18c3      	adds	r3, r0, r3
 8003d38:	2288      	movs	r2, #136	@ 0x88
 8003d3a:	18e3      	adds	r3, r4, r3
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	1d7a      	adds	r2, r7, #5
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	701a      	strb	r2, [r3, #0]
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	20002df8 	.word	0x20002df8

08003d50 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	0002      	movs	r2, r0
 8003d58:	1dfb      	adds	r3, r7, #7
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	1c0a      	adds	r2, r1, #0
 8003d60:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8003d62:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <prvTraceGetObjectState+0x4c>)
 8003d64:	681c      	ldr	r4, [r3, #0]
 8003d66:	1dfb      	adds	r3, r7, #7
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f85f 	bl	8003e34 <uiIndexOfObject>
 8003d76:	0003      	movs	r3, r0
 8003d78:	0018      	movs	r0, r3
 8003d7a:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <prvTraceGetObjectState+0x4c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	215c      	movs	r1, #92	@ 0x5c
 8003d84:	18d3      	adds	r3, r2, r3
 8003d86:	185b      	adds	r3, r3, r1
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	18c3      	adds	r3, r0, r3
 8003d8c:	2288      	movs	r2, #136	@ 0x88
 8003d8e:	18e3      	adds	r3, r4, r3
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	781b      	ldrb	r3, [r3, #0]
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b003      	add	sp, #12
 8003d9a:	bd90      	pop	{r4, r7, pc}
 8003d9c:	20002df8 	.word	0x20002df8

08003da0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	0002      	movs	r2, r0
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <prvTraceSetTaskInstanceFinished+0x3c>)
 8003dae:	681c      	ldr	r4, [r3, #0]
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2103      	movs	r1, #3
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f83c 	bl	8003e34 <uiIndexOfObject>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <prvTraceSetTaskInstanceFinished+0x3c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	225f      	movs	r2, #95	@ 0x5f
 8003dc6:	5c9b      	ldrb	r3, [r3, r2]
 8003dc8:	18cb      	adds	r3, r1, r3
 8003dca:	2288      	movs	r2, #136	@ 0x88
 8003dcc:	18e3      	adds	r3, r4, r3
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
#endif
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b003      	add	sp, #12
 8003dda:	bd90      	pop	{r4, r7, pc}
 8003ddc:	20002df8 	.word	0x20002df8

08003de0 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e018      	b.n	8003e24 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8003df2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	23fa      	movs	r3, #250	@ 0xfa
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d305      	bcc.n	8003e0c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <prvTraceNextFreeEventBufferSlot+0x50>)
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f9c2 	bl	800418c <prvTraceError>
		return (void*)0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e00b      	b.n	8003e24 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <prvTraceNextFreeEventBufferSlot+0x4c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	2182      	movs	r1, #130	@ 0x82
 8003e1a:	00c9      	lsls	r1, r1, #3
 8003e1c:	468c      	mov	ip, r1
 8003e1e:	4463      	add	r3, ip
 8003e20:	18d3      	adds	r3, r2, r3
 8003e22:	3304      	adds	r3, #4
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	20002df8 	.word	0x20002df8
 8003e30:	080054c4 	.word	0x080054c4

08003e34 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	1dbb      	adds	r3, r7, #6
 8003e42:	1c0a      	adds	r2, r1, #0
 8003e44:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003e46:	1dbb      	adds	r3, r7, #6
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d82e      	bhi.n	8003eac <uiIndexOfObject+0x78>
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d02a      	beq.n	8003eac <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8003e56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <uiIndexOfObject+0x8c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2150      	movs	r1, #80	@ 0x50
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	185b      	adds	r3, r3, r1
 8003e64:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8003e66:	1dfa      	adds	r2, r7, #7
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d81e      	bhi.n	8003eac <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003e6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <uiIndexOfObject+0x8c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	1dbb      	adds	r3, r7, #6
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3338      	adds	r3, #56	@ 0x38
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003e80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <uiIndexOfObject+0x8c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	1dbb      	adds	r3, r7, #6
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2068      	movs	r0, #104	@ 0x68
 8003e8a:	18d3      	adds	r3, r2, r3
 8003e8c:	181b      	adds	r3, r3, r0
 8003e8e:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003e90:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8003e92:	1dfb      	adds	r3, r7, #7
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4353      	muls	r3, r2
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	200e      	movs	r0, #14
 8003ea0:	183b      	adds	r3, r7, r0
 8003ea2:	188a      	adds	r2, r1, r2
 8003ea4:	801a      	strh	r2, [r3, #0]
		return index;
 8003ea6:	183b      	adds	r3, r7, r0
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	e004      	b.n	8003eb6 <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <uiIndexOfObject+0x90>)
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 f96c 	bl	800418c <prvTraceError>
	return 0;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	20002df8 	.word	0x20002df8
 8003ec4:	080054ec 	.word	0x080054ec

08003ec8 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	0002      	movs	r2, r0
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eda:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	4b4c      	ldr	r3, [pc, #304]	@ (800401c <prvTraceGetObjectHandle+0x154>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <prvTraceGetObjectHandle+0x154>)
 8003ef2:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8003ef4:	1dfb      	adds	r3, r7, #7
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003efa:	0052      	lsls	r2, r2, #1
 8003efc:	5ad3      	ldrh	r3, [r2, r3]
 8003efe:	001a      	movs	r2, r3
 8003f00:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <prvTraceGetObjectHandle+0x15c>)
 8003f02:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8003f04:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <prvTraceGetObjectHandle+0x15c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a45      	ldr	r2, [pc, #276]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f0a:	2148      	movs	r1, #72	@ 0x48
 8003f0c:	18d3      	adds	r3, r2, r3
 8003f0e:	185b      	adds	r3, r3, r1
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d117      	bne.n	8003f46 <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8003f16:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <prvTraceGetObjectHandle+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8003f1c:	1dfb      	adds	r3, r7, #7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	493f      	ldr	r1, [pc, #252]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f22:	3308      	adds	r3, #8
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	18cb      	adds	r3, r1, r3
 8003f28:	3302      	adds	r3, #2
 8003f2a:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003f32:	4b3c      	ldr	r3, [pc, #240]	@ (8004024 <prvTraceGetObjectHandle+0x15c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8003f36:	3201      	adds	r2, #1
 8003f38:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8003f3a:	4a39      	ldr	r2, [pc, #228]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f3c:	2148      	movs	r1, #72	@ 0x48
 8003f3e:	18d3      	adds	r3, r2, r3
 8003f40:	185b      	adds	r3, r3, r1
 8003f42:	1c02      	adds	r2, r0, #0
 8003f44:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <prvTraceGetObjectHandle+0x15c>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	241f      	movs	r4, #31
 8003f4c:	193b      	adds	r3, r7, r4
 8003f4e:	4934      	ldr	r1, [pc, #208]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f50:	2048      	movs	r0, #72	@ 0x48
 8003f52:	188a      	adds	r2, r1, r2
 8003f54:	1812      	adds	r2, r2, r0
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	4b30      	ldr	r3, [pc, #192]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f60:	0052      	lsls	r2, r2, #1
 8003f62:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	492d      	ldr	r1, [pc, #180]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	18cb      	adds	r3, r1, r3
 8003f70:	3304      	adds	r3, #4
 8003f72:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d90c      	bls.n	8003f92 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff f9c3 	bl	8003308 <pszTraceGetErrorNotEnoughHandles>
 8003f82:	0003      	movs	r3, r0
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f901 	bl	800418c <prvTraceError>
		handle = 0;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e031      	b.n	8003ff6 <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4a22      	ldr	r2, [pc, #136]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003f98:	0059      	lsls	r1, r3, #1
 8003f9a:	5a8a      	ldrh	r2, [r1, r2]
 8003f9c:	3201      	adds	r2, #1
 8003f9e:	b291      	uxth	r1, r2
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003fa6:	1dfb      	adds	r3, r7, #7
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003fac:	0052      	lsls	r2, r2, #1
 8003fae:	5ad3      	ldrh	r3, [r2, r3]
 8003fb0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003fb8:	3308      	adds	r3, #8
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8003fc2:	1acb      	subs	r3, r1, r3
 8003fc4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8003fc6:	1dfb      	adds	r3, r7, #7
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003fcc:	3318      	adds	r3, #24
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	3306      	adds	r3, #6
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	001a      	movs	r2, r3
		if (hndCount >
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	dd0b      	ble.n	8003ff6 <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8003fe6:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8004020 <prvTraceGetObjectHandle+0x158>)
 8003fea:	3318      	adds	r3, #24
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	1c0a      	adds	r2, r1, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <prvTraceGetObjectHandle+0x154>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <prvTraceGetObjectHandle+0x154>)
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			@ (mov r8, r8)

	return handle;
 800400c:	231f      	movs	r3, #31
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	781b      	ldrb	r3, [r3, #0]
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b009      	add	sp, #36	@ 0x24
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	200019b4 	.word	0x200019b4
 8004020:	200019cc 	.word	0x200019cc
 8004024:	20002e00 	.word	0x20002e00

08004028 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8004028:	b5b0      	push	{r4, r5, r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	0002      	movs	r2, r0
 8004030:	1dfb      	adds	r3, r7, #7
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	1c0a      	adds	r2, r1, #0
 8004038:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800403a:	250e      	movs	r5, #14
 800403c:	197c      	adds	r4, r7, r5
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff fef3 	bl	8003e34 <uiIndexOfObject>
 800404e:	0003      	movs	r3, r0
 8004050:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8004052:	4b06      	ldr	r3, [pc, #24]	@ (800406c <prvMarkObjectAsUsed+0x44>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	197b      	adds	r3, r7, r5
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2188      	movs	r1, #136	@ 0x88
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	185b      	adds	r3, r3, r1
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
}
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bdb0      	pop	{r4, r5, r7, pc}
 800406c:	20002df8 	.word	0x20002df8

08004070 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e010      	b.n	80040a4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	18d2      	adds	r2, r2, r3
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	18cb      	adds	r3, r1, r3
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3301      	adds	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3ea      	bcc.n	8004082 <prvStrncpy+0x12>
			break;
	}
}
 80040ac:	e000      	b.n	80040b0 <prvStrncpy+0x40>
			break;
 80040ae:	46c0      	nop			@ (mov r8, r8)
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b006      	add	sp, #24
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	603a      	str	r2, [r7, #0]
 80040c0:	1dfb      	adds	r3, r7, #7
 80040c2:	1c02      	adds	r2, r0, #0
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	1dbb      	adds	r3, r7, #6
 80040c8:	1c0a      	adds	r2, r1, #0
 80040ca:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <prvTraceSetObjectName+0x1e>
	{
		name = "";
 80040d2:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <prvTraceSetObjectName+0xbc>)
 80040d4:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 80040d6:	1dfb      	adds	r3, r7, #7
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d904      	bls.n	80040e8 <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80040de:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <prvTraceSetObjectName+0xc0>)
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 f853 	bl	800418c <prvTraceError>
		return;
 80040e6:	e041      	b.n	800416c <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80040f0:	4b22      	ldr	r3, [pc, #136]	@ (800417c <prvTraceSetObjectName+0xc4>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f84a 	bl	800418c <prvTraceError>
		return;
 80040f8:	e038      	b.n	800416c <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80040fa:	4b21      	ldr	r3, [pc, #132]	@ (8004180 <prvTraceSetObjectName+0xc8>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	1dfb      	adds	r3, r7, #7
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2150      	movs	r1, #80	@ 0x50
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	185b      	adds	r3, r3, r1
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	1dba      	adds	r2, r7, #6
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d909      	bls.n	8004126 <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	f7ff f8f6 	bl	8003308 <pszTraceGetErrorNotEnoughHandles>
 800411c:	0003      	movs	r3, r0
 800411e:	0018      	movs	r0, r3
 8004120:	f000 f834 	bl	800418c <prvTraceError>
 8004124:	e022      	b.n	800416c <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8004126:	1dfb      	adds	r3, r7, #7
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	1dbb      	adds	r3, r7, #6
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	0011      	movs	r1, r2
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fe7f 	bl	8003e34 <uiIndexOfObject>
 8004136:	0003      	movs	r3, r0
 8004138:	001a      	movs	r2, r3
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <prvTraceSetObjectName+0xcc>)
 800413c:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <prvTraceSetObjectName+0xd0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d112      	bne.n	800416c <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <prvTraceSetObjectName+0xc8>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <prvTraceSetObjectName+0xcc>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	3388      	adds	r3, #136	@ 0x88
 8004150:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <prvTraceSetObjectName+0xc8>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	215c      	movs	r1, #92	@ 0x5c
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	185b      	adds	r3, r3, r1
 8004160:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004162:	001a      	movs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	0019      	movs	r1, r3
 8004168:	f7ff ff82 	bl	8004070 <prvStrncpy>
		}
	}
}
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	0800555c 	.word	0x0800555c
 8004178:	08005560 	.word	0x08005560
 800417c:	08005590 	.word	0x08005590
 8004180:	20002df8 	.word	0x20002df8
 8004184:	20002e04 	.word	0x20002e04
 8004188:	20001a30 	.word	0x20001a30

0800418c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8004194:	4b12      	ldr	r3, [pc, #72]	@ (80041e0 <prvTraceError+0x54>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <prvTraceError+0x14>
	{
		xTraceDisable();
 800419c:	f7ff f926 	bl	80033ec <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <prvTraceError+0x58>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d117      	bne.n	80041d8 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <prvTraceError+0x58>)
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 80041ae:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <prvTraceError+0x54>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <prvTraceError+0x54>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	22f0      	movs	r2, #240	@ 0xf0
 80041bc:	0092      	lsls	r2, r2, #2
 80041be:	1898      	adds	r0, r3, r2
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <prvTraceError+0x58>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2250      	movs	r2, #80	@ 0x50
 80041c6:	0019      	movs	r1, r3
 80041c8:	f7ff ff52 	bl	8004070 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80041cc:	4b04      	ldr	r3, [pc, #16]	@ (80041e0 <prvTraceError+0x54>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	23ee      	movs	r3, #238	@ 0xee
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	2101      	movs	r1, #1
 80041d6:	50d1      	str	r1, [r2, r3]
		}
	}
}
 80041d8:	46c0      	nop			@ (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20002df8 	.word	0x20002df8
 80041e4:	20001a30 	.word	0x20001a30

080041e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	0002      	movs	r2, r0
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 80041fc:	e080      	b.n	8004300 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80041fe:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800420a:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4942      	ldr	r1, [pc, #264]	@ (800431c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	185b      	adds	r3, r3, r1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b98      	cmp	r3, #152	@ 0x98
 800421c:	d931      	bls.n	8004282 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800421e:	4b3e      	ldr	r3, [pc, #248]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	493d      	ldr	r1, [pc, #244]	@ (800431c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	185b      	adds	r3, r3, r1
 800422c:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800422e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004230:	d827      	bhi.n	8004282 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8004232:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4938      	ldr	r1, [pc, #224]	@ (800431c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	185b      	adds	r3, r3, r1
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	210f      	movs	r1, #15
 8004244:	187b      	adds	r3, r7, r1
 8004246:	3268      	adds	r2, #104	@ 0x68
 8004248:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800424a:	187b      	adds	r3, r7, r1
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	18d2      	adds	r2, r2, r3
 8004252:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d24d      	bcs.n	80042f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800425c:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	2082      	movs	r0, #130	@ 0x82
 8004266:	00c0      	lsls	r0, r0, #3
 8004268:	4684      	mov	ip, r0
 800426a:	4463      	add	r3, ip
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	1d18      	adds	r0, r3, #4
 8004270:	187b      	adds	r3, r7, r1
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	001a      	movs	r2, r3
 800427a:	2100      	movs	r1, #0
 800427c:	f000 fe94 	bl	8004fa8 <memset>
		{
 8004280:	e03a      	b.n	80042f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4924      	ldr	r1, [pc, #144]	@ (800431c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	185b      	adds	r3, r3, r1
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d131      	bne.n	80042fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d20f      	bcs.n	80042c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 80042a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	2182      	movs	r1, #130	@ 0x82
 80042ae:	00c9      	lsls	r1, r1, #3
 80042b0:	468c      	mov	ip, r1
 80042b2:	4463      	add	r3, ip
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	3304      	adds	r3, #4
 80042b8:	2208      	movs	r2, #8
 80042ba:	2100      	movs	r1, #0
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 fe73 	bl	8004fa8 <memset>
 80042c2:	e01a      	b.n	80042fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a14      	ldr	r2, [pc, #80]	@ (800431c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 80042ca:	4694      	mov	ip, r2
 80042cc:	4463      	add	r3, ip
 80042ce:	2204      	movs	r2, #4
 80042d0:	2100      	movs	r1, #0
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 fe68 	bl	8004fa8 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	2182      	movs	r1, #130	@ 0x82
 80042e2:	00c9      	lsls	r1, r1, #3
 80042e4:	468c      	mov	ip, r1
 80042e6:	4463      	add	r3, ip
 80042e8:	18d3      	adds	r3, r2, r3
 80042ea:	3304      	adds	r3, #4
 80042ec:	2204      	movs	r2, #4
 80042ee:	2100      	movs	r1, #0
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 fe59 	bl	8004fa8 <memset>
 80042f6:	e000      	b.n	80042fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 80042f8:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	3301      	adds	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	429a      	cmp	r2, r3
 8004308:	d200      	bcs.n	800430c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 800430a:	e778      	b.n	80041fe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	20002df8 	.word	0x20002df8
 800431c:	00000414 	.word	0x00000414

08004320 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8004324:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01c      	beq.n	8004368 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	3201      	adds	r2, #1
 8004336:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	3201      	adds	r2, #1
 8004340:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	23fa      	movs	r3, #250	@ 0xfa
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d307      	bcc.n	8004360 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <prvTraceUpdateCounters+0x50>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8004360:	2001      	movs	r0, #1
 8004362:	f7ff ff41 	bl	80041e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8004366:	e000      	b.n	800436a <prvTraceUpdateCounters+0x4a>
		return;
 8004368:	46c0      	nop			@ (mov r8, r8)
#endif
}
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	20002df8 	.word	0x20002df8

08004374 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	0002      	movs	r2, r0
 800437c:	1dbb      	adds	r3, r7, #6
 800437e:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 800438c:	4b5c      	ldr	r3, [pc, #368]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 8004396:	4b5b      	ldr	r3, [pc, #364]	@ (8004504 <prvTraceGetDTS+0x190>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800439e:	4b59      	ldr	r3, [pc, #356]	@ (8004504 <prvTraceGetDTS+0x190>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b57      	ldr	r3, [pc, #348]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0892      	lsrs	r2, r2, #2
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80043aa:	e00b      	b.n	80043c4 <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 80043ac:	4b56      	ldr	r3, [pc, #344]	@ (8004508 <prvTraceGetDTS+0x194>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b56      	ldr	r3, [pc, #344]	@ (800450c <prvTraceGetDTS+0x198>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d005      	beq.n	80043c4 <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80043b8:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <prvTraceGetDTS+0x19c>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b50      	ldr	r3, [pc, #320]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0892      	lsrs	r2, r2, #2
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 80043c4:	230c      	movs	r3, #12
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f8a9 	bl	8004520 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4b50      	ldr	r3, [pc, #320]	@ (8004514 <prvTraceGetDTS+0x1a0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <prvTraceGetDTS+0x1a0>)
 80043dc:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 80043de:	4b48      	ldr	r3, [pc, #288]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d047      	beq.n	8004478 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 80043e8:	4b45      	ldr	r3, [pc, #276]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d921      	bls.n	8004438 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80043f4:	4b42      	ldr	r3, [pc, #264]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80043fa:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <prvTraceGetDTS+0x18c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	0019      	movs	r1, r3
 8004402:	6938      	ldr	r0, [r7, #16]
 8004404:	f7fb fe80 	bl	8000108 <__udivsi3>
 8004408:	0003      	movs	r3, r0
 800440a:	001a      	movs	r2, r3
 800440c:	4b3c      	ldr	r3, [pc, #240]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	18a2      	adds	r2, r4, r2
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004414:	4b3a      	ldr	r3, [pc, #232]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800441a:	4b39      	ldr	r3, [pc, #228]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f7fb fef5 	bl	8000214 <__aeabi_uidivmod>
 800442a:	000b      	movs	r3, r1
 800442c:	001a      	movs	r2, r3
 800442e:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	18a2      	adds	r2, r4, r2
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28
 8004436:	e007      	b.n	8004448 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8004438:	4b31      	ldr	r3, [pc, #196]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800443e:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	188a      	adds	r2, r1, r2
 8004446:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004448:	4b2d      	ldr	r3, [pc, #180]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800444e:	4b2c      	ldr	r3, [pc, #176]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	429a      	cmp	r2, r3
 8004456:	d313      	bcc.n	8004480 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8004458:	4b29      	ldr	r3, [pc, #164]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	3201      	adds	r2, #1
 8004460:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8004462:	4b27      	ldr	r3, [pc, #156]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004468:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <prvTraceGetDTS+0x18c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1a8a      	subs	r2, r1, r2
 8004474:	629a      	str	r2, [r3, #40]	@ 0x28
 8004476:	e003      	b.n	8004480 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004478:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <prvTraceGetDTS+0x18c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004480:	1dbb      	adds	r3, r7, #6
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d92f      	bls.n	80044ea <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800448a:	f7ff fca9 	bl	8003de0 <prvTraceNextFreeEventBufferSlot>
 800448e:	0003      	movs	r3, r0
 8004490:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d028      	beq.n	80044ea <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 8004498:	1dbb      	adds	r3, r7, #6
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <prvTraceGetDTS+0x1a4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10b      	bne.n	80044ba <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	22a9      	movs	r2, #169	@ 0xa9
 80044a6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	705a      	strb	r2, [r3, #1]
 80044b8:	e015      	b.n	80044e6 <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 80044ba:	1dbb      	adds	r3, r7, #6
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2bff      	cmp	r3, #255	@ 0xff
 80044c0:	d10d      	bne.n	80044de <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	22a8      	movs	r2, #168	@ 0xa8
 80044c6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	705a      	strb	r2, [r3, #1]
 80044dc:	e003      	b.n	80044e6 <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 80044de:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <prvTraceGetDTS+0x1a8>)
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7ff fe53 	bl	800418c <prvTraceError>
			}
			prvTraceUpdateCounters();
 80044e6:	f7ff ff1b 	bl	8004320 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	1dba      	adds	r2, r7, #6
 80044f0:	8812      	ldrh	r2, [r2, #0]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b007      	add	sp, #28
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	20002df8 	.word	0x20002df8
 8004504:	200019b8 	.word	0x200019b8
 8004508:	e000e018 	.word	0xe000e018
 800450c:	200019c4 	.word	0x200019c4
 8004510:	20000014 	.word	0x20000014
 8004514:	20002e08 	.word	0x20002e08
 8004518:	0000ffff 	.word	0x0000ffff
 800451c:	080055c0 	.word	0x080055c0

08004520 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004530:	4b2d      	ldr	r3, [pc, #180]	@ (80045e8 <prvTracePortGetTimeStamp+0xc8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d04f      	beq.n	80045de <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 800453e:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <prvTracePortGetTimeStamp+0xcc>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
		return;
 8004546:	e04a      	b.n	80045de <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8004548:	4b29      	ldr	r3, [pc, #164]	@ (80045f0 <prvTracePortGetTimeStamp+0xd0>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <prvTracePortGetTimeStamp+0xd4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	3301      	adds	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8004556:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <prvTracePortGetTimeStamp+0xd8>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <prvTracePortGetTimeStamp+0xdc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	db03      	blt.n	800456e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8004566:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <prvTracePortGetTimeStamp+0xd8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e002      	b.n	8004574 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 800456e:	4b23      	ldr	r3, [pc, #140]	@ (80045fc <prvTracePortGetTimeStamp+0xdc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8004574:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <prvTracePortGetTimeStamp+0xd8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	429a      	cmp	r2, r3
 800457c:	d107      	bne.n	800458e <prvTracePortGetTimeStamp+0x6e>
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <prvTracePortGetTimeStamp+0xe0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d202      	bcs.n	800458e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d016      	beq.n	80045c2 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <prvTracePortGetTimeStamp+0xd0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	435a      	muls	r2, r3
 80045a0:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <prvTracePortGetTimeStamp+0xcc>)
 80045a2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 80045a4:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <prvTracePortGetTimeStamp+0xd0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	2203      	movs	r2, #3
 80045ac:	4013      	ands	r3, r2
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	435a      	muls	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	18d3      	adds	r3, r2, r3
 80045b6:	089a      	lsrs	r2, r3, #2
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <prvTracePortGetTimeStamp+0xcc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	18d2      	adds	r2, r2, r3
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <prvTracePortGetTimeStamp+0xcc>)
 80045c0:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <prvTracePortGetTimeStamp+0xd8>)
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 80045ce:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <prvTracePortGetTimeStamp+0xcc>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <prvTracePortGetTimeStamp+0xe0>)
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e000      	b.n	80045e0 <prvTracePortGetTimeStamp+0xc0>
		return;
 80045de:	46c0      	nop			@ (mov r8, r8)
}
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b004      	add	sp, #16
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	200019a8 	.word	0x200019a8
 80045ec:	200019ac 	.word	0x200019ac
 80045f0:	e000e014 	.word	0xe000e014
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20002e0c 	.word	0x20002e0c
 80045fc:	200019a4 	.word	0x200019a4
 8004600:	20002e10 	.word	0x20002e10

08004604 <main>:
                         UBaseType_t                  uxPriority,
                         TaskHandle_t * const         pxCreatedTask );

// Main function
int main()
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 800460a:	f000 f845 	bl	8004698 <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 800460e:	f000 fb37 	bl	8004c80 <BSP_LED_Init>
	BSP_PB_Init();
 8004612:	f000 fb8f 	bl	8004d34 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8004616:	f000 fbaf 	bl	8004d78 <BSP_Console_Init>
	my_printf("Console ready!\r\n");
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <main+0x78>)
 800461c:	0018      	movs	r0, r3
 800461e:	f000 fb11 	bl	8004c44 <my_printf>

	// Start Trace Recording
	xTraceEnable(TRC_START);
 8004622:	2001      	movs	r0, #1
 8004624:	f7fe feac 	bl	8003380 <xTraceEnable>
	// Create Semaphore object (this is not a 'give')
	xSem = xSemaphoreCreateBinary();
 8004628:	2203      	movs	r2, #3
 800462a:	2100      	movs	r1, #0
 800462c:	2001      	movs	r0, #1
 800462e:	f7fb ff09 	bl	8000444 <xQueueGenericCreate>
 8004632:	0002      	movs	r2, r0
 8004634:	4b12      	ldr	r3, [pc, #72]	@ (8004680 <main+0x7c>)
 8004636:	601a      	str	r2, [r3, #0]
	// Give a nice name to the Semaphore in the trace recorder
	vTraceSetSemaphoreName(xSem, "xSEM");
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <main+0x7c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a11      	ldr	r2, [pc, #68]	@ (8004684 <main+0x80>)
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f7fe fce3 	bl	800300c <vTraceSetSemaphoreName>
	// Create Tasks
	xTaskCreate(vTask1, "Task_1", 256, NULL, 2, NULL);
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	005a      	lsls	r2, r3, #1
 800464a:	490f      	ldr	r1, [pc, #60]	@ (8004688 <main+0x84>)
 800464c:	480f      	ldr	r0, [pc, #60]	@ (800468c <main+0x88>)
 800464e:	2300      	movs	r3, #0
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	2302      	movs	r3, #2
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	f7fc ff89 	bl	800156e <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 1, NULL);
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	005a      	lsls	r2, r3, #1
 8004660:	490b      	ldr	r1, [pc, #44]	@ (8004690 <main+0x8c>)
 8004662:	480c      	ldr	r0, [pc, #48]	@ (8004694 <main+0x90>)
 8004664:	2300      	movs	r3, #0
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	2301      	movs	r3, #1
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	f7fc ff7e 	bl	800156e <xTaskCreate>
	// Start the Scheduler
	vTaskStartScheduler();
 8004672:	f7fd f9f1 	bl	8001a58 <vTaskStartScheduler>

	while(1)
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	e7fd      	b.n	8004676 <main+0x72>
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	0800562c 	.word	0x0800562c
 8004680:	20002e14 	.word	0x20002e14
 8004684:	08005640 	.word	0x08005640
 8004688:	08005648 	.word	0x08005648
 800468c:	080047cd 	.word	0x080047cd
 8004690:	08005650 	.word	0x08005650
 8004694:	08004825 	.word	0x08004825

08004698 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 80046a2:	4b44      	ldr	r3, [pc, #272]	@ (80047b4 <SystemClock_Config+0x11c>)
 80046a4:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 80046a6:	4b44      	ldr	r3, [pc, #272]	@ (80047b8 <SystemClock_Config+0x120>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b43      	ldr	r3, [pc, #268]	@ (80047b8 <SystemClock_Config+0x120>)
 80046ac:	2180      	movs	r1, #128	@ 0x80
 80046ae:	02c9      	lsls	r1, r1, #11
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 80046b4:	4b40      	ldr	r3, [pc, #256]	@ (80047b8 <SystemClock_Config+0x120>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b3f      	ldr	r3, [pc, #252]	@ (80047b8 <SystemClock_Config+0x120>)
 80046ba:	2180      	movs	r1, #128	@ 0x80
 80046bc:	0249      	lsls	r1, r1, #9
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 80046c2:	4b3d      	ldr	r3, [pc, #244]	@ (80047b8 <SystemClock_Config+0x120>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	4013      	ands	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
		timeout--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <SystemClock_Config+0x48>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80046e0:	4b35      	ldr	r3, [pc, #212]	@ (80047b8 <SystemClock_Config+0x120>)
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4b34      	ldr	r3, [pc, #208]	@ (80047b8 <SystemClock_Config+0x120>)
 80046e6:	4935      	ldr	r1, [pc, #212]	@ (80047bc <SystemClock_Config+0x124>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80046ec:	4b32      	ldr	r3, [pc, #200]	@ (80047b8 <SystemClock_Config+0x120>)
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <SystemClock_Config+0x120>)
 80046f2:	2180      	movs	r1, #128	@ 0x80
 80046f4:	0249      	lsls	r1, r1, #9
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80046fa:	4b2f      	ldr	r3, [pc, #188]	@ (80047b8 <SystemClock_Config+0x120>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8004700:	4b2d      	ldr	r3, [pc, #180]	@ (80047b8 <SystemClock_Config+0x120>)
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b2c      	ldr	r3, [pc, #176]	@ (80047b8 <SystemClock_Config+0x120>)
 8004706:	492e      	ldr	r1, [pc, #184]	@ (80047c0 <SystemClock_Config+0x128>)
 8004708:	400a      	ands	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 800470c:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <SystemClock_Config+0x120>)
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <SystemClock_Config+0x120>)
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	0349      	lsls	r1, r1, #13
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <SystemClock_Config+0x120>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <SystemClock_Config+0x120>)
 8004720:	2180      	movs	r1, #128	@ 0x80
 8004722:	0449      	lsls	r1, r1, #17
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <SystemClock_Config+0x120>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2380      	movs	r3, #128	@ 0x80
 800472e:	049b      	lsls	r3, r3, #18
 8004730:	4013      	ands	r3, r2
 8004732:	607b      	str	r3, [r7, #4]
		timeout--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <SystemClock_Config+0xae>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8004746:	4b1c      	ldr	r3, [pc, #112]	@ (80047b8 <SystemClock_Config+0x120>)
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <SystemClock_Config+0x120>)
 800474c:	21f0      	movs	r1, #240	@ 0xf0
 800474e:	438a      	bics	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004752:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <SystemClock_Config+0x120>)
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <SystemClock_Config+0x120>)
 8004756:	6852      	ldr	r2, [r2, #4]
 8004758:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 800475a:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <SystemClock_Config+0x120>)
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <SystemClock_Config+0x120>)
 8004760:	4918      	ldr	r1, [pc, #96]	@ (80047c4 <SystemClock_Config+0x12c>)
 8004762:	400a      	ands	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8004766:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <SystemClock_Config+0x120>)
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <SystemClock_Config+0x120>)
 800476a:	6852      	ldr	r2, [r2, #4]
 800476c:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800476e:	4b16      	ldr	r3, [pc, #88]	@ (80047c8 <SystemClock_Config+0x130>)
 8004770:	2211      	movs	r2, #17
 8004772:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8004774:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <SystemClock_Config+0x120>)
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <SystemClock_Config+0x120>)
 800477a:	2103      	movs	r1, #3
 800477c:	438a      	bics	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004780:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <SystemClock_Config+0x120>)
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <SystemClock_Config+0x120>)
 8004786:	2102      	movs	r1, #2
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <SystemClock_Config+0x120>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	220c      	movs	r2, #12
 8004792:	4013      	ands	r3, r2
 8004794:	603b      	str	r3, [r7, #0]
		timeout--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b01      	subs	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d002      	beq.n	80047a8 <SystemClock_Config+0x110>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f1      	bne.n	800478c <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 80047a8:	f000 fb78 	bl	8004e9c <SystemCoreClockUpdate>
}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	000f4240 	.word	0x000f4240
 80047b8:	40021000 	.word	0x40021000
 80047bc:	fffe7fff 	.word	0xfffe7fff
 80047c0:	ffc3ffff 	.word	0xffc3ffff
 80047c4:	fffff8ff 	.word	0xfffff8ff
 80047c8:	40022000 	.word	0x40022000

080047cc <vTask1>:

/*
 *	Task1 toggles LED every 10ms
 */
void vTask1 (void *pvParameters)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	portTickType	xLastWakeTime;
	uint16_t	count;
	count = 0;
 80047d4:	230e      	movs	r3, #14
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	801a      	strh	r2, [r3, #0]
	// Initialize timing
	xLastWakeTime = xTaskGetTickCount();
 80047dc:	f7fd faac 	bl	8001d38 <xTaskGetTickCount>
 80047e0:	0003      	movs	r3, r0
 80047e2:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		BSP_LED_Toggle();
 80047e4:	f000 fa98 	bl	8004d18 <BSP_LED_Toggle>
		count++;
 80047e8:	240e      	movs	r4, #14
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	193b      	adds	r3, r7, r4
 80047f0:	3201      	adds	r2, #1
 80047f2:	801a      	strh	r2, [r3, #0]
		// Release semaphore every 10 count
		if (count == 10)
 80047f4:	193b      	adds	r3, r7, r4
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	2b0a      	cmp	r3, #10
 80047fa:	d109      	bne.n	8004810 <vTask1+0x44>
		{
			xSemaphoreGive(xSem);
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <vTask1+0x54>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	2300      	movs	r3, #0
 8004802:	2200      	movs	r2, #0
 8004804:	2100      	movs	r1, #0
 8004806:	f7fb ff43 	bl	8000690 <xQueueGenericSend>
			count = 0;
 800480a:	193b      	adds	r3, r7, r4
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]
		}
		// Wait here for 10ms since last wakeup
		vTaskDelayUntil (&xLastWakeTime, (10/portTICK_RATE_MS));
 8004810:	2308      	movs	r3, #8
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	210a      	movs	r1, #10
 8004816:	0018      	movs	r0, r3
 8004818:	f7fd f886 	bl	8001928 <xTaskDelayUntil>
		BSP_LED_Toggle();
 800481c:	e7e2      	b.n	80047e4 <vTask1+0x18>
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	20002e14 	.word	0x20002e14

08004824 <vTask2>:

/*
 *	Task_2 sends a message to console when xSem semaphore is given
 */
void vTask2 (void *pvParameters)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE   xStatus;
	uint16_t        count;
	count = 0;
 800482c:	230e      	movs	r3, #14
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	801a      	strh	r2, [r3, #0]
	// Take the semaphore once to make sure it is empty
	xSemaphoreTake(xSem, 0);
 8004834:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <vTask2+0x60>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2100      	movs	r1, #0
 800483a:	0018      	movs	r0, r3
 800483c:	f7fc fafc 	bl	8000e38 <xQueueSemaphoreTake>
	while(1)
	{
		// Wait here for Semaphore with 2s timeout
		xStatus = xSemaphoreTake(xSem, 2000);
 8004840:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <vTask2+0x60>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	22fa      	movs	r2, #250	@ 0xfa
 8004846:	00d2      	lsls	r2, r2, #3
 8004848:	0011      	movs	r1, r2
 800484a:	0018      	movs	r0, r3
 800484c:	f7fc faf4 	bl	8000e38 <xQueueSemaphoreTake>
 8004850:	0003      	movs	r3, r0
 8004852:	60bb      	str	r3, [r7, #8]
		// Test the result of the take attempt
		if (xStatus == pdPASS)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10e      	bne.n	8004878 <vTask2+0x54>
		{
			// The semaphore was taken as expected
			// Display console message
			my_printf("Hello %2d from task2\r\n", count);
 800485a:	240e      	movs	r4, #14
 800485c:	193b      	adds	r3, r7, r4
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <vTask2+0x64>)
 8004862:	0011      	movs	r1, r2
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f9ed 	bl	8004c44 <my_printf>
			count++;
 800486a:	0021      	movs	r1, r4
 800486c:	187b      	adds	r3, r7, r1
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	187b      	adds	r3, r7, r1
 8004872:	3201      	adds	r2, #1
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e7e3      	b.n	8004840 <vTask2+0x1c>
		}
		else
		{
			// The 2s timeout elapsed without Semaphore being taken
			// Display another message
			my_printf("Hey! Where is my semaphore?\r\n");
 8004878:	4b04      	ldr	r3, [pc, #16]	@ (800488c <vTask2+0x68>)
 800487a:	0018      	movs	r0, r3
 800487c:	f000 f9e2 	bl	8004c44 <my_printf>
		xStatus = xSemaphoreTake(xSem, 2000);
 8004880:	e7de      	b.n	8004840 <vTask2+0x1c>
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	20002e14 	.word	0x20002e14
 8004888:	08005658 	.word	0x08005658
 800488c:	08005670 	.word	0x08005670

08004890 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
	if (str) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <printchar+0x26>
		**str = c;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
		++(*str);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 80048b4:	e00a      	b.n	80048cc <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <printchar+0x44>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2240      	movs	r2, #64	@ 0x40
 80048be:	4013      	ands	r3, r2
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d1f9      	bne.n	80048b8 <printchar+0x28>
		USART2->TDR = c;
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <printchar+0x44>)
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	b292      	uxth	r2, r2
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40004400 	.word	0x40004400

080048d8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	46c6      	mov	lr, r8
 80048dc:	b500      	push	{lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80048ea:	2400      	movs	r4, #0
 80048ec:	2320      	movs	r3, #32
 80048ee:	4698      	mov	r8, r3

	if (width > 0) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dd16      	ble.n	8004924 <prints+0x4c>
		register int len = 0;
 80048f6:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80048f8:	68be      	ldr	r6, [r7, #8]
 80048fa:	e001      	b.n	8004900 <prints+0x28>
 80048fc:	3501      	adds	r5, #1
 80048fe:	3601      	adds	r6, #1
 8004900:	7833      	ldrb	r3, [r6, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1fa      	bne.n	80048fc <prints+0x24>
		if (len >= width) width = 0;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	429d      	cmp	r5, r3
 800490a:	db02      	blt.n	8004912 <prints+0x3a>
 800490c:	2300      	movs	r3, #0
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e002      	b.n	8004918 <prints+0x40>
		else width -= len;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1b5b      	subs	r3, r3, r5
 8004916:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	d001      	beq.n	8004924 <prints+0x4c>
 8004920:	2330      	movs	r3, #48	@ 0x30
 8004922:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	4013      	ands	r3, r2
 800492a:	d119      	bne.n	8004960 <prints+0x88>
		for ( ; width > 0; --width) {
 800492c:	e008      	b.n	8004940 <prints+0x68>
			printchar (out, padchar);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4641      	mov	r1, r8
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff ffac 	bl	8004890 <printchar>
			++pc;
 8004938:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dcf3      	bgt.n	800492e <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8004946:	e00b      	b.n	8004960 <prints+0x88>
		printchar (out, *string);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	001a      	movs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff ff9c 	bl	8004890 <printchar>
		++pc;
 8004958:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3301      	adds	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ef      	bne.n	8004948 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8004968:	e008      	b.n	800497c <prints+0xa4>
		printchar (out, padchar);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4641      	mov	r1, r8
 800496e:	0018      	movs	r0, r3
 8004970:	f7ff ff8e 	bl	8004890 <printchar>
		++pc;
 8004974:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3b01      	subs	r3, #1
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	dcf3      	bgt.n	800496a <prints+0x92>
	}

	return pc;
 8004982:	0023      	movs	r3, r4
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bc80      	pop	{r7}
 800498c:	46b8      	mov	r8, r7
 800498e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004990 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004992:	46ce      	mov	lr, r9
 8004994:	4647      	mov	r7, r8
 8004996:	b580      	push	{r7, lr}
 8004998:	b089      	sub	sp, #36	@ 0x24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	4699      	mov	r9, r3
 80049a8:	2600      	movs	r6, #0
	register unsigned int u = i;
 80049aa:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10e      	bne.n	80049d0 <printi+0x40>
		print_buf[0] = '0';
 80049b2:	2114      	movs	r1, #20
 80049b4:	187b      	adds	r3, r7, r1
 80049b6:	2230      	movs	r2, #48	@ 0x30
 80049b8:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80049ba:	187b      	adds	r3, r7, r1
 80049bc:	2200      	movs	r2, #0
 80049be:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80049c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049c4:	1879      	adds	r1, r7, r1
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ff86 	bl	80048d8 <prints>
 80049cc:	0003      	movs	r3, r0
 80049ce:	e04e      	b.n	8004a6e <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <printi+0x5c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b0a      	cmp	r3, #10
 80049da:	d107      	bne.n	80049ec <printi+0x5c>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da04      	bge.n	80049ec <printi+0x5c>
		neg = 1;
 80049e2:	2301      	movs	r3, #1
 80049e4:	4699      	mov	r9, r3
		u = -i;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	425b      	negs	r3, r3
 80049ea:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80049ec:	2314      	movs	r3, #20
 80049ee:	18fc      	adds	r4, r7, r3
 80049f0:	340b      	adds	r4, #11
	*s = '\0';
 80049f2:	2300      	movs	r3, #0
 80049f4:	7023      	strb	r3, [r4, #0]

	while (u) {
 80049f6:	e019      	b.n	8004a2c <printi+0x9c>
		t = u % b;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0019      	movs	r1, r3
 80049fc:	0028      	movs	r0, r5
 80049fe:	f7fb fc09 	bl	8000214 <__aeabi_uidivmod>
 8004a02:	000b      	movs	r3, r1
 8004a04:	4698      	mov	r8, r3
		if( t >= 10 )
 8004a06:	4643      	mov	r3, r8
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	dd02      	ble.n	8004a12 <printi+0x82>
			t += letbase - '0' - 10;
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a0e:	3b3a      	subs	r3, #58	@ 0x3a
 8004a10:	4498      	add	r8, r3
		*--s = t + '0';
 8004a12:	4643      	mov	r3, r8
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3c01      	subs	r4, #1
 8004a18:	3330      	adds	r3, #48	@ 0x30
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	7023      	strb	r3, [r4, #0]
		u /= b;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0019      	movs	r1, r3
 8004a22:	0028      	movs	r0, r5
 8004a24:	f7fb fb70 	bl	8000108 <__udivsi3>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	001d      	movs	r5, r3
	while (u) {
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	d1e3      	bne.n	80049f8 <printi+0x68>
	}

	if (neg) {
 8004a30:	464b      	mov	r3, r9
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8004a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <printi+0xc8>
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3e:	2202      	movs	r2, #2
 8004a40:	4013      	ands	r3, r2
 8004a42:	d009      	beq.n	8004a58 <printi+0xc8>
			printchar (out, '-');
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	212d      	movs	r1, #45	@ 0x2d
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff ff21 	bl	8004890 <printchar>
			++pc;
 8004a4e:	3601      	adds	r6, #1
			--width;
 8004a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a52:	3b01      	subs	r3, #1
 8004a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a56:	e002      	b.n	8004a5e <printi+0xce>
		}
		else {
			*--s = '-';
 8004a58:	3c01      	subs	r4, #1
 8004a5a:	232d      	movs	r3, #45	@ 0x2d
 8004a5c:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	0021      	movs	r1, r4
 8004a66:	f7ff ff37 	bl	80048d8 <prints>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	18f3      	adds	r3, r6, r3
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b009      	add	sp, #36	@ 0x24
 8004a74:	bcc0      	pop	{r6, r7}
 8004a76:	46b9      	mov	r9, r7
 8004a78:	46b0      	mov	r8, r6
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a7c <print>:

static int print(char **out, const char *format, va_list args )
{
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	b08b      	sub	sp, #44	@ 0x2c
 8004a80:	af04      	add	r7, sp, #16
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8004a88:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8004a8a:	e0c6      	b.n	8004c1a <print+0x19e>
		if (*format == '%') {
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b25      	cmp	r3, #37	@ 0x25
 8004a92:	d000      	beq.n	8004a96 <print+0x1a>
 8004a94:	e0b2      	b.n	8004bfc <print+0x180>
			++format;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d100      	bne.n	8004aaa <print+0x2e>
 8004aa8:	e0bd      	b.n	8004c26 <print+0x1aa>
			if (*format == '%') goto out;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b25      	cmp	r3, #37	@ 0x25
 8004ab0:	d100      	bne.n	8004ab4 <print+0x38>
 8004ab2:	e0a5      	b.n	8004c00 <print+0x184>
			if (*format == '-') {
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b2d      	cmp	r3, #45	@ 0x2d
 8004aba:	d10a      	bne.n	8004ad2 <print+0x56>
				++format;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8004ac2:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8004ac4:	e005      	b.n	8004ad2 <print+0x56>
				++format;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8004acc:	2302      	movs	r3, #2
 8004ace:	4333      	orrs	r3, r6
 8004ad0:	001e      	movs	r6, r3
			while (*format == '0') {
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b30      	cmp	r3, #48	@ 0x30
 8004ad8:	d0f5      	beq.n	8004ac6 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004ada:	e00b      	b.n	8004af4 <print+0x78>
				width *= 10;
 8004adc:	002b      	movs	r3, r5
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	195b      	adds	r3, r3, r5
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	001d      	movs	r5, r3
				width += *format - '0';
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	3b30      	subs	r3, #48	@ 0x30
 8004aec:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b2f      	cmp	r3, #47	@ 0x2f
 8004afa:	d903      	bls.n	8004b04 <print+0x88>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b39      	cmp	r3, #57	@ 0x39
 8004b02:	d9eb      	bls.n	8004adc <print+0x60>
			}
			if( *format == 's' ) {
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b73      	cmp	r3, #115	@ 0x73
 8004b0a:	d10f      	bne.n	8004b2c <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 8004b16:	d000      	beq.n	8004b1a <print+0x9e>
 8004b18:	e000      	b.n	8004b1c <print+0xa0>
 8004b1a:	4949      	ldr	r1, [pc, #292]	@ (8004c40 <print+0x1c4>)
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	0033      	movs	r3, r6
 8004b20:	002a      	movs	r2, r5
 8004b22:	f7ff fed9 	bl	80048d8 <prints>
 8004b26:	0003      	movs	r3, r0
 8004b28:	18e4      	adds	r4, r4, r3
				continue;
 8004b2a:	e073      	b.n	8004c14 <print+0x198>
			}
			if( *format == 'd' ) {
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b64      	cmp	r3, #100	@ 0x64
 8004b32:	d10f      	bne.n	8004b54 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	2361      	movs	r3, #97	@ 0x61
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	9601      	str	r6, [sp, #4]
 8004b44:	9500      	str	r5, [sp, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	220a      	movs	r2, #10
 8004b4a:	f7ff ff21 	bl	8004990 <printi>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	18e4      	adds	r4, r4, r3
				continue;
 8004b52:	e05f      	b.n	8004c14 <print+0x198>
			}
			if( *format == 'x' ) {
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b78      	cmp	r3, #120	@ 0x78
 8004b5a:	d10f      	bne.n	8004b7c <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	2361      	movs	r3, #97	@ 0x61
 8004b68:	9302      	str	r3, [sp, #8]
 8004b6a:	9601      	str	r6, [sp, #4]
 8004b6c:	9500      	str	r5, [sp, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2210      	movs	r2, #16
 8004b72:	f7ff ff0d 	bl	8004990 <printi>
 8004b76:	0003      	movs	r3, r0
 8004b78:	18e4      	adds	r4, r4, r3
				continue;
 8004b7a:	e04b      	b.n	8004c14 <print+0x198>
			}
			if( *format == 'X' ) {
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b58      	cmp	r3, #88	@ 0x58
 8004b82:	d10f      	bne.n	8004ba4 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1d1a      	adds	r2, r3, #4
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	2341      	movs	r3, #65	@ 0x41
 8004b90:	9302      	str	r3, [sp, #8]
 8004b92:	9601      	str	r6, [sp, #4]
 8004b94:	9500      	str	r5, [sp, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	2210      	movs	r2, #16
 8004b9a:	f7ff fef9 	bl	8004990 <printi>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	18e4      	adds	r4, r4, r3
				continue;
 8004ba2:	e037      	b.n	8004c14 <print+0x198>
			}
			if( *format == 'u' ) {
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b75      	cmp	r3, #117	@ 0x75
 8004baa:	d10f      	bne.n	8004bcc <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	2361      	movs	r3, #97	@ 0x61
 8004bb8:	9302      	str	r3, [sp, #8]
 8004bba:	9601      	str	r6, [sp, #4]
 8004bbc:	9500      	str	r5, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	220a      	movs	r2, #10
 8004bc2:	f7ff fee5 	bl	8004990 <printi>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	18e4      	adds	r4, r4, r3
				continue;
 8004bca:	e023      	b.n	8004c14 <print+0x198>
			}
			if( *format == 'c' ) {
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b63      	cmp	r3, #99	@ 0x63
 8004bd2:	d11f      	bne.n	8004c14 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	2114      	movs	r1, #20
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	2200      	movs	r2, #0
 8004be8:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8004bea:	1879      	adds	r1, r7, r1
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	0033      	movs	r3, r6
 8004bf0:	002a      	movs	r2, r5
 8004bf2:	f7ff fe71 	bl	80048d8 <prints>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	18e4      	adds	r4, r4, r3
				continue;
 8004bfa:	e00b      	b.n	8004c14 <print+0x198>
			}
		}
		else {
		out:
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	e000      	b.n	8004c02 <print+0x186>
			if (*format == '%') goto out;
 8004c00:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	001a      	movs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff fe3f 	bl	8004890 <printchar>
			++pc;
 8004c12:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d000      	beq.n	8004c24 <print+0x1a8>
 8004c22:	e733      	b.n	8004a8c <print+0x10>
 8004c24:	e000      	b.n	8004c28 <print+0x1ac>
			if (*format == '\0') break;
 8004c26:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <print+0x1ba>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8004c36:	0023      	movs	r3, r4
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b007      	add	sp, #28
 8004c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c40:	08005690 	.word	0x08005690

08004c44 <my_printf>:

int my_printf(const char *format, ...)
{
 8004c44:	b40f      	push	{r0, r1, r2, r3}
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8004c4c:	2314      	movs	r3, #20
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	0019      	movs	r1, r3
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7ff ff0f 	bl	8004a7c <print>
 8004c5e:	0003      	movs	r3, r0
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b002      	add	sp, #8
 8004c66:	bc80      	pop	{r7}
 8004c68:	bc08      	pop	{r3}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	4718      	bx	r3

08004c6e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	af00      	add	r7, sp, #0
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	e7fd      	b.n	8004c7c <HardFault_Handler+0x4>

08004c80 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004c84:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <BSP_LED_Init+0x90>)
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <BSP_LED_Init+0x90>)
 8004c8a:	2180      	movs	r1, #128	@ 0x80
 8004c8c:	0289      	lsls	r1, r1, #10
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8004c92:	2390      	movs	r3, #144	@ 0x90
 8004c94:	05db      	lsls	r3, r3, #23
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	2390      	movs	r3, #144	@ 0x90
 8004c9a:	05db      	lsls	r3, r3, #23
 8004c9c:	491d      	ldr	r1, [pc, #116]	@ (8004d14 <BSP_LED_Init+0x94>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8004ca2:	2390      	movs	r3, #144	@ 0x90
 8004ca4:	05db      	lsls	r3, r3, #23
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2390      	movs	r3, #144	@ 0x90
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	2180      	movs	r1, #128	@ 0x80
 8004cae:	00c9      	lsls	r1, r1, #3
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8004cb4:	2390      	movs	r3, #144	@ 0x90
 8004cb6:	05db      	lsls	r3, r3, #23
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	2390      	movs	r3, #144	@ 0x90
 8004cbc:	05db      	lsls	r3, r3, #23
 8004cbe:	2120      	movs	r1, #32
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8004cc4:	2390      	movs	r3, #144	@ 0x90
 8004cc6:	05db      	lsls	r3, r3, #23
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	2390      	movs	r3, #144	@ 0x90
 8004ccc:	05db      	lsls	r3, r3, #23
 8004cce:	4911      	ldr	r1, [pc, #68]	@ (8004d14 <BSP_LED_Init+0x94>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8004cd4:	2390      	movs	r3, #144	@ 0x90
 8004cd6:	05db      	lsls	r3, r3, #23
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	2390      	movs	r3, #144	@ 0x90
 8004cdc:	05db      	lsls	r3, r3, #23
 8004cde:	21c0      	movs	r1, #192	@ 0xc0
 8004ce0:	0109      	lsls	r1, r1, #4
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 8004ce6:	2390      	movs	r3, #144	@ 0x90
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	2390      	movs	r3, #144	@ 0x90
 8004cee:	05db      	lsls	r3, r3, #23
 8004cf0:	4908      	ldr	r1, [pc, #32]	@ (8004d14 <BSP_LED_Init+0x94>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 8004cf6:	2390      	movs	r3, #144	@ 0x90
 8004cf8:	05db      	lsls	r3, r3, #23
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	2390      	movs	r3, #144	@ 0x90
 8004cfe:	05db      	lsls	r3, r3, #23
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	0389      	lsls	r1, r1, #14
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	40021000 	.word	0x40021000
 8004d14:	fffff3ff 	.word	0xfffff3ff

08004d18 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8004d1c:	2390      	movs	r3, #144	@ 0x90
 8004d1e:	05db      	lsls	r3, r3, #23
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	2390      	movs	r3, #144	@ 0x90
 8004d24:	05db      	lsls	r3, r3, #23
 8004d26:	2120      	movs	r1, #32
 8004d28:	404a      	eors	r2, r1
 8004d2a:	615a      	str	r2, [r3, #20]
}
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <BSP_PB_Init>:

void BSP_PB_Init()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <BSP_PB_Init+0x38>)
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <BSP_PB_Init+0x38>)
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	0309      	lsls	r1, r1, #12
 8004d42:	430a      	orrs	r2, r1
 8004d44:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d4c:	4909      	ldr	r1, [pc, #36]	@ (8004d74 <BSP_PB_Init+0x40>)
 8004d4e:	400a      	ands	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 8004d52:	4a07      	ldr	r2, [pc, #28]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8004d5a:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4b04      	ldr	r3, [pc, #16]	@ (8004d70 <BSP_PB_Init+0x3c>)
 8004d60:	4904      	ldr	r1, [pc, #16]	@ (8004d74 <BSP_PB_Init+0x40>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	60da      	str	r2, [r3, #12]
}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	48000800 	.word	0x48000800
 8004d74:	f3ffffff 	.word	0xf3ffffff

08004d78 <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	4b2a      	ldr	r3, [pc, #168]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004d82:	2180      	movs	r1, #128	@ 0x80
 8004d84:	0289      	lsls	r1, r1, #10
 8004d86:	430a      	orrs	r2, r1
 8004d88:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8004d8a:	2390      	movs	r3, #144	@ 0x90
 8004d8c:	05db      	lsls	r3, r3, #23
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2390      	movs	r3, #144	@ 0x90
 8004d92:	05db      	lsls	r3, r3, #23
 8004d94:	21f0      	movs	r1, #240	@ 0xf0
 8004d96:	438a      	bics	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8004d9a:	2390      	movs	r3, #144	@ 0x90
 8004d9c:	05db      	lsls	r3, r3, #23
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2390      	movs	r3, #144	@ 0x90
 8004da2:	05db      	lsls	r3, r3, #23
 8004da4:	21a0      	movs	r1, #160	@ 0xa0
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8004daa:	2390      	movs	r3, #144	@ 0x90
 8004dac:	05db      	lsls	r3, r3, #23
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	2390      	movs	r3, #144	@ 0x90
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	491e      	ldr	r1, [pc, #120]	@ (8004e30 <BSP_Console_Init+0xb8>)
 8004db6:	400a      	ands	r2, r1
 8004db8:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8004dba:	2390      	movs	r3, #144	@ 0x90
 8004dbc:	05db      	lsls	r3, r3, #23
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	2390      	movs	r3, #144	@ 0x90
 8004dc2:	05db      	lsls	r3, r3, #23
 8004dc4:	2188      	movs	r1, #136	@ 0x88
 8004dc6:	0149      	lsls	r1, r1, #5
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8004dcc:	4b17      	ldr	r3, [pc, #92]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004dd2:	2180      	movs	r1, #128	@ 0x80
 8004dd4:	0289      	lsls	r1, r1, #10
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8004dda:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8004de0:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8004de6:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <BSP_Console_Init+0xb4>)
 8004df2:	4911      	ldr	r1, [pc, #68]	@ (8004e38 <BSP_Console_Init+0xc0>)
 8004df4:	400a      	ands	r2, r1
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8004df8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	0209      	lsls	r1, r1, #8
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004e08:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <BSP_Console_Init+0xc4>)
 8004e0a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8004e0c:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004e12:	210c      	movs	r1, #12
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <BSP_Console_Init+0xbc>)
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	ffff00ff 	.word	0xffff00ff
 8004e34:	40004400 	.word	0x40004400
 8004e38:	fffcffff 	.word	0xfffcffff
 8004e3c:	00000341 	.word	0x00000341

08004e40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e40:	480d      	ldr	r0, [pc, #52]	@ (8004e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e44:	f000 f825 	bl	8004e92 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e48:	480c      	ldr	r0, [pc, #48]	@ (8004e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8004e4a:	490d      	ldr	r1, [pc, #52]	@ (8004e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e84 <LoopForever+0xe>)
  movs r3, #0
 8004e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e50:	e002      	b.n	8004e58 <LoopCopyDataInit>

08004e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e56:	3304      	adds	r3, #4

08004e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e5c:	d3f9      	bcc.n	8004e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e60:	4c0a      	ldr	r4, [pc, #40]	@ (8004e8c <LoopForever+0x16>)
  movs r3, #0
 8004e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e64:	e001      	b.n	8004e6a <LoopFillZerobss>

08004e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e68:	3204      	adds	r2, #4

08004e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e6c:	d3fb      	bcc.n	8004e66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004e6e:	f000 f8a3 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e72:	f7ff fbc7 	bl	8004604 <main>

08004e76 <LoopForever>:

LoopForever:
    b LoopForever
 8004e76:	e7fe      	b.n	8004e76 <LoopForever>
  ldr   r0, =_estack
 8004e78:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e80:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8004e84:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8004e88:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004e8c:	20002e18 	.word	0x20002e18

08004e90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e90:	e7fe      	b.n	8004e90 <ADC1_COMP_IRQHandler>

08004e92 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004eb2:	4b38      	ldr	r3, [pc, #224]	@ (8004f94 <SystemCoreClockUpdate+0xf8>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	220c      	movs	r2, #12
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d011      	beq.n	8004ee6 <SystemCoreClockUpdate+0x4a>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d84f      	bhi.n	8004f68 <SystemCoreClockUpdate+0xcc>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <SystemCoreClockUpdate+0x3a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d004      	beq.n	8004ede <SystemCoreClockUpdate+0x42>
 8004ed4:	e048      	b.n	8004f68 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004ed6:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004ed8:	4a30      	ldr	r2, [pc, #192]	@ (8004f9c <SystemCoreClockUpdate+0x100>)
 8004eda:	601a      	str	r2, [r3, #0]
      break;
 8004edc:	e048      	b.n	8004f70 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8004ede:	4b2e      	ldr	r3, [pc, #184]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f9c <SystemCoreClockUpdate+0x100>)
 8004ee2:	601a      	str	r2, [r3, #0]
      break;
 8004ee4:	e044      	b.n	8004f70 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f94 <SystemCoreClockUpdate+0xf8>)
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	23f0      	movs	r3, #240	@ 0xf0
 8004eec:	039b      	lsls	r3, r3, #14
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004ef2:	4b28      	ldr	r3, [pc, #160]	@ (8004f94 <SystemCoreClockUpdate+0xf8>)
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	23c0      	movs	r3, #192	@ 0xc0
 8004ef8:	025b      	lsls	r3, r3, #9
 8004efa:	4013      	ands	r3, r2
 8004efc:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	0c9b      	lsrs	r3, r3, #18
 8004f02:	3302      	adds	r3, #2
 8004f04:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8004f06:	4b23      	ldr	r3, [pc, #140]	@ (8004f94 <SystemCoreClockUpdate+0xf8>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	220f      	movs	r2, #15
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	3301      	adds	r3, #1
 8004f10:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	025b      	lsls	r3, r3, #9
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d10a      	bne.n	8004f32 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	481f      	ldr	r0, [pc, #124]	@ (8004f9c <SystemCoreClockUpdate+0x100>)
 8004f20:	f7fb f8f2 	bl	8000108 <__udivsi3>
 8004f24:	0003      	movs	r3, r0
 8004f26:	001a      	movs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	435a      	muls	r2, r3
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f2e:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8004f30:	e01e      	b.n	8004f70 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	23c0      	movs	r3, #192	@ 0xc0
 8004f36:	025b      	lsls	r3, r3, #9
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10a      	bne.n	8004f52 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4818      	ldr	r0, [pc, #96]	@ (8004fa0 <SystemCoreClockUpdate+0x104>)
 8004f40:	f7fb f8e2 	bl	8000108 <__udivsi3>
 8004f44:	0003      	movs	r3, r0
 8004f46:	001a      	movs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	435a      	muls	r2, r3
 8004f4c:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f4e:	601a      	str	r2, [r3, #0]
      break;
 8004f50:	e00e      	b.n	8004f70 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	4811      	ldr	r0, [pc, #68]	@ (8004f9c <SystemCoreClockUpdate+0x100>)
 8004f56:	f7fb f8d7 	bl	8000108 <__udivsi3>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	435a      	muls	r2, r3
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f64:	601a      	str	r2, [r3, #0]
      break;
 8004f66:	e003      	b.n	8004f70 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f9c <SystemCoreClockUpdate+0x100>)
 8004f6c:	601a      	str	r2, [r3, #0]
      break;
 8004f6e:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <SystemCoreClockUpdate+0xf8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	220f      	movs	r2, #15
 8004f78:	4013      	ands	r3, r2
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <SystemCoreClockUpdate+0x108>)
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	40da      	lsrs	r2, r3
 8004f88:	4b03      	ldr	r3, [pc, #12]	@ (8004f98 <SystemCoreClockUpdate+0xfc>)
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	20000014 	.word	0x20000014
 8004f9c:	007a1200 	.word	0x007a1200
 8004fa0:	02dc6c00 	.word	0x02dc6c00
 8004fa4:	080056e4 	.word	0x080056e4

08004fa8 <memset>:
 8004fa8:	0003      	movs	r3, r0
 8004faa:	1882      	adds	r2, r0, r2
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <memset+0xa>
 8004fb0:	4770      	bx	lr
 8004fb2:	7019      	strb	r1, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	e7f9      	b.n	8004fac <memset+0x4>

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	2600      	movs	r6, #0
 8004fbc:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff0 <__libc_init_array+0x38>)
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004ff4 <__libc_init_array+0x3c>)
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	2600      	movs	r6, #0
 8004fca:	f000 f823 	bl	8005014 <_init>
 8004fce:	4c0a      	ldr	r4, [pc, #40]	@ (8004ff8 <__libc_init_array+0x40>)
 8004fd0:	4d0a      	ldr	r5, [pc, #40]	@ (8004ffc <__libc_init_array+0x44>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	00b3      	lsls	r3, r6, #2
 8004fde:	58eb      	ldr	r3, [r5, r3]
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	00b3      	lsls	r3, r6, #2
 8004fe8:	58eb      	ldr	r3, [r5, r3]
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	080056f4 	.word	0x080056f4
 8004ff4:	080056f4 	.word	0x080056f4
 8004ff8:	080056f8 	.word	0x080056f8
 8004ffc:	080056f4 	.word	0x080056f4

08005000 <memcpy>:
 8005000:	2300      	movs	r3, #0
 8005002:	b510      	push	{r4, lr}
 8005004:	429a      	cmp	r2, r3
 8005006:	d100      	bne.n	800500a <memcpy+0xa>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	5ccc      	ldrb	r4, [r1, r3]
 800500c:	54c4      	strb	r4, [r0, r3]
 800500e:	3301      	adds	r3, #1
 8005010:	e7f8      	b.n	8005004 <memcpy+0x4>
	...

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
