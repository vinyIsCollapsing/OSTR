
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008520  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080090ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003220  20000018  08009104  0000b018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003238  08009104  0000b238  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008d58  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c43  00000000  00000000  00013d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000978  00000000  00000000  000159e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000072e  00000000  00000000  00016358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001f00  00000000  00000000  00016a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b861  00000000  00000000  00018986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075d64  00000000  00000000  000241e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00099f4b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002450  00000000  00000000  00099f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  0009c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080085c8 	.word	0x080085c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080085c8 	.word	0x080085c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 f944 	bl	80014b4 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fc97 	bl	8000b64 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 faed 	bl	800081c <__aeabi_fsub>
 8000242:	f000 fc8f 	bl	8000b64 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_d2uiz>:
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	2200      	movs	r2, #0
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <__aeabi_d2uiz+0x38>)
 8000256:	0004      	movs	r4, r0
 8000258:	000d      	movs	r5, r1
 800025a:	f001 f8f1 	bl	8001440 <__aeabi_dcmpge>
 800025e:	2800      	cmp	r0, #0
 8000260:	d104      	bne.n	800026c <__aeabi_d2uiz+0x1c>
 8000262:	0020      	movs	r0, r4
 8000264:	0029      	movs	r1, r5
 8000266:	f001 f87b 	bl	8001360 <__aeabi_d2iz>
 800026a:	bd70      	pop	{r4, r5, r6, pc}
 800026c:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <__aeabi_d2uiz+0x38>)
 800026e:	2200      	movs	r2, #0
 8000270:	0020      	movs	r0, r4
 8000272:	0029      	movs	r1, r5
 8000274:	f000 fcd8 	bl	8000c28 <__aeabi_dsub>
 8000278:	f001 f872 	bl	8001360 <__aeabi_d2iz>
 800027c:	2380      	movs	r3, #128	@ 0x80
 800027e:	061b      	lsls	r3, r3, #24
 8000280:	469c      	mov	ip, r3
 8000282:	4460      	add	r0, ip
 8000284:	e7f1      	b.n	800026a <__aeabi_d2uiz+0x1a>
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	41e00000 	.word	0x41e00000

0800028c <__aeabi_fadd>:
 800028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028e:	46ce      	mov	lr, r9
 8000290:	4647      	mov	r7, r8
 8000292:	0243      	lsls	r3, r0, #9
 8000294:	0a5a      	lsrs	r2, r3, #9
 8000296:	024e      	lsls	r6, r1, #9
 8000298:	0045      	lsls	r5, r0, #1
 800029a:	0fc4      	lsrs	r4, r0, #31
 800029c:	0048      	lsls	r0, r1, #1
 800029e:	4691      	mov	r9, r2
 80002a0:	0e2d      	lsrs	r5, r5, #24
 80002a2:	0a72      	lsrs	r2, r6, #9
 80002a4:	0e00      	lsrs	r0, r0, #24
 80002a6:	4694      	mov	ip, r2
 80002a8:	b580      	push	{r7, lr}
 80002aa:	099b      	lsrs	r3, r3, #6
 80002ac:	0fc9      	lsrs	r1, r1, #31
 80002ae:	09b6      	lsrs	r6, r6, #6
 80002b0:	1a2a      	subs	r2, r5, r0
 80002b2:	428c      	cmp	r4, r1
 80002b4:	d021      	beq.n	80002fa <__aeabi_fadd+0x6e>
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	dd0d      	ble.n	80002d6 <__aeabi_fadd+0x4a>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d12d      	bne.n	800031a <__aeabi_fadd+0x8e>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fadd+0x38>
 80002c2:	e08d      	b.n	80003e0 <__aeabi_fadd+0x154>
 80002c4:	1e51      	subs	r1, r2, #1
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	d100      	bne.n	80002cc <__aeabi_fadd+0x40>
 80002ca:	e11d      	b.n	8000508 <__aeabi_fadd+0x27c>
 80002cc:	2aff      	cmp	r2, #255	@ 0xff
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x46>
 80002d0:	e0ab      	b.n	800042a <__aeabi_fadd+0x19e>
 80002d2:	000a      	movs	r2, r1
 80002d4:	e027      	b.n	8000326 <__aeabi_fadd+0x9a>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d04d      	beq.n	8000376 <__aeabi_fadd+0xea>
 80002da:	1b42      	subs	r2, r0, r5
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d000      	beq.n	80002e2 <__aeabi_fadd+0x56>
 80002e0:	e0cc      	b.n	800047c <__aeabi_fadd+0x1f0>
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d100      	bne.n	80002e8 <__aeabi_fadd+0x5c>
 80002e6:	e079      	b.n	80003dc <__aeabi_fadd+0x150>
 80002e8:	1e54      	subs	r4, r2, #1
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fadd+0x64>
 80002ee:	e128      	b.n	8000542 <__aeabi_fadd+0x2b6>
 80002f0:	2aff      	cmp	r2, #255	@ 0xff
 80002f2:	d100      	bne.n	80002f6 <__aeabi_fadd+0x6a>
 80002f4:	e097      	b.n	8000426 <__aeabi_fadd+0x19a>
 80002f6:	0022      	movs	r2, r4
 80002f8:	e0c5      	b.n	8000486 <__aeabi_fadd+0x1fa>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	dc00      	bgt.n	8000300 <__aeabi_fadd+0x74>
 80002fe:	e096      	b.n	800042e <__aeabi_fadd+0x1a2>
 8000300:	2800      	cmp	r0, #0
 8000302:	d04f      	beq.n	80003a4 <__aeabi_fadd+0x118>
 8000304:	2dff      	cmp	r5, #255	@ 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0x7e>
 8000308:	e08f      	b.n	800042a <__aeabi_fadd+0x19e>
 800030a:	2180      	movs	r1, #128	@ 0x80
 800030c:	04c9      	lsls	r1, r1, #19
 800030e:	430e      	orrs	r6, r1
 8000310:	2a1b      	cmp	r2, #27
 8000312:	dd51      	ble.n	80003b8 <__aeabi_fadd+0x12c>
 8000314:	002a      	movs	r2, r5
 8000316:	3301      	adds	r3, #1
 8000318:	e018      	b.n	800034c <__aeabi_fadd+0xc0>
 800031a:	2dff      	cmp	r5, #255	@ 0xff
 800031c:	d100      	bne.n	8000320 <__aeabi_fadd+0x94>
 800031e:	e084      	b.n	800042a <__aeabi_fadd+0x19e>
 8000320:	2180      	movs	r1, #128	@ 0x80
 8000322:	04c9      	lsls	r1, r1, #19
 8000324:	430e      	orrs	r6, r1
 8000326:	2101      	movs	r1, #1
 8000328:	2a1b      	cmp	r2, #27
 800032a:	dc08      	bgt.n	800033e <__aeabi_fadd+0xb2>
 800032c:	0031      	movs	r1, r6
 800032e:	2020      	movs	r0, #32
 8000330:	40d1      	lsrs	r1, r2
 8000332:	1a82      	subs	r2, r0, r2
 8000334:	4096      	lsls	r6, r2
 8000336:	0032      	movs	r2, r6
 8000338:	1e50      	subs	r0, r2, #1
 800033a:	4182      	sbcs	r2, r0
 800033c:	4311      	orrs	r1, r2
 800033e:	1a5b      	subs	r3, r3, r1
 8000340:	015a      	lsls	r2, r3, #5
 8000342:	d459      	bmi.n	80003f8 <__aeabi_fadd+0x16c>
 8000344:	2107      	movs	r1, #7
 8000346:	002a      	movs	r2, r5
 8000348:	4019      	ands	r1, r3
 800034a:	d049      	beq.n	80003e0 <__aeabi_fadd+0x154>
 800034c:	210f      	movs	r1, #15
 800034e:	4019      	ands	r1, r3
 8000350:	2904      	cmp	r1, #4
 8000352:	d000      	beq.n	8000356 <__aeabi_fadd+0xca>
 8000354:	3304      	adds	r3, #4
 8000356:	0159      	lsls	r1, r3, #5
 8000358:	d542      	bpl.n	80003e0 <__aeabi_fadd+0x154>
 800035a:	1c50      	adds	r0, r2, #1
 800035c:	2afe      	cmp	r2, #254	@ 0xfe
 800035e:	d03a      	beq.n	80003d6 <__aeabi_fadd+0x14a>
 8000360:	019b      	lsls	r3, r3, #6
 8000362:	b2c0      	uxtb	r0, r0
 8000364:	0a5b      	lsrs	r3, r3, #9
 8000366:	05c0      	lsls	r0, r0, #23
 8000368:	4318      	orrs	r0, r3
 800036a:	07e4      	lsls	r4, r4, #31
 800036c:	4320      	orrs	r0, r4
 800036e:	bcc0      	pop	{r6, r7}
 8000370:	46b9      	mov	r9, r7
 8000372:	46b0      	mov	r8, r6
 8000374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000376:	20fe      	movs	r0, #254	@ 0xfe
 8000378:	4680      	mov	r8, r0
 800037a:	1c6f      	adds	r7, r5, #1
 800037c:	0038      	movs	r0, r7
 800037e:	4647      	mov	r7, r8
 8000380:	4207      	tst	r7, r0
 8000382:	d000      	beq.n	8000386 <__aeabi_fadd+0xfa>
 8000384:	e08e      	b.n	80004a4 <__aeabi_fadd+0x218>
 8000386:	2d00      	cmp	r5, #0
 8000388:	d000      	beq.n	800038c <__aeabi_fadd+0x100>
 800038a:	e0b4      	b.n	80004f6 <__aeabi_fadd+0x26a>
 800038c:	2b00      	cmp	r3, #0
 800038e:	d100      	bne.n	8000392 <__aeabi_fadd+0x106>
 8000390:	e0db      	b.n	800054a <__aeabi_fadd+0x2be>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d06c      	beq.n	8000470 <__aeabi_fadd+0x1e4>
 8000396:	1b98      	subs	r0, r3, r6
 8000398:	0145      	lsls	r5, r0, #5
 800039a:	d400      	bmi.n	800039e <__aeabi_fadd+0x112>
 800039c:	e0f7      	b.n	800058e <__aeabi_fadd+0x302>
 800039e:	000c      	movs	r4, r1
 80003a0:	1af3      	subs	r3, r6, r3
 80003a2:	e03d      	b.n	8000420 <__aeabi_fadd+0x194>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d01b      	beq.n	80003e0 <__aeabi_fadd+0x154>
 80003a8:	1e51      	subs	r1, r2, #1
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	d100      	bne.n	80003b0 <__aeabi_fadd+0x124>
 80003ae:	e082      	b.n	80004b6 <__aeabi_fadd+0x22a>
 80003b0:	2aff      	cmp	r2, #255	@ 0xff
 80003b2:	d03a      	beq.n	800042a <__aeabi_fadd+0x19e>
 80003b4:	000a      	movs	r2, r1
 80003b6:	e7ab      	b.n	8000310 <__aeabi_fadd+0x84>
 80003b8:	0031      	movs	r1, r6
 80003ba:	2020      	movs	r0, #32
 80003bc:	40d1      	lsrs	r1, r2
 80003be:	1a82      	subs	r2, r0, r2
 80003c0:	4096      	lsls	r6, r2
 80003c2:	0032      	movs	r2, r6
 80003c4:	1e50      	subs	r0, r2, #1
 80003c6:	4182      	sbcs	r2, r0
 80003c8:	430a      	orrs	r2, r1
 80003ca:	189b      	adds	r3, r3, r2
 80003cc:	015a      	lsls	r2, r3, #5
 80003ce:	d5b9      	bpl.n	8000344 <__aeabi_fadd+0xb8>
 80003d0:	1c6a      	adds	r2, r5, #1
 80003d2:	2dfe      	cmp	r5, #254	@ 0xfe
 80003d4:	d175      	bne.n	80004c2 <__aeabi_fadd+0x236>
 80003d6:	20ff      	movs	r0, #255	@ 0xff
 80003d8:	2300      	movs	r3, #0
 80003da:	e7c4      	b.n	8000366 <__aeabi_fadd+0xda>
 80003dc:	000c      	movs	r4, r1
 80003de:	0033      	movs	r3, r6
 80003e0:	08db      	lsrs	r3, r3, #3
 80003e2:	2aff      	cmp	r2, #255	@ 0xff
 80003e4:	d146      	bne.n	8000474 <__aeabi_fadd+0x1e8>
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f5      	beq.n	80003d6 <__aeabi_fadd+0x14a>
 80003ea:	2280      	movs	r2, #128	@ 0x80
 80003ec:	03d2      	lsls	r2, r2, #15
 80003ee:	4313      	orrs	r3, r2
 80003f0:	025b      	lsls	r3, r3, #9
 80003f2:	20ff      	movs	r0, #255	@ 0xff
 80003f4:	0a5b      	lsrs	r3, r3, #9
 80003f6:	e7b6      	b.n	8000366 <__aeabi_fadd+0xda>
 80003f8:	019f      	lsls	r7, r3, #6
 80003fa:	09bf      	lsrs	r7, r7, #6
 80003fc:	0038      	movs	r0, r7
 80003fe:	f001 f863 	bl	80014c8 <__clzsi2>
 8000402:	3805      	subs	r0, #5
 8000404:	4087      	lsls	r7, r0
 8000406:	4285      	cmp	r5, r0
 8000408:	dc24      	bgt.n	8000454 <__aeabi_fadd+0x1c8>
 800040a:	003b      	movs	r3, r7
 800040c:	2120      	movs	r1, #32
 800040e:	1b42      	subs	r2, r0, r5
 8000410:	3201      	adds	r2, #1
 8000412:	40d3      	lsrs	r3, r2
 8000414:	1a8a      	subs	r2, r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	1e7a      	subs	r2, r7, #1
 800041a:	4197      	sbcs	r7, r2
 800041c:	2200      	movs	r2, #0
 800041e:	433b      	orrs	r3, r7
 8000420:	0759      	lsls	r1, r3, #29
 8000422:	d193      	bne.n	800034c <__aeabi_fadd+0xc0>
 8000424:	e797      	b.n	8000356 <__aeabi_fadd+0xca>
 8000426:	000c      	movs	r4, r1
 8000428:	0033      	movs	r3, r6
 800042a:	08db      	lsrs	r3, r3, #3
 800042c:	e7db      	b.n	80003e6 <__aeabi_fadd+0x15a>
 800042e:	2a00      	cmp	r2, #0
 8000430:	d014      	beq.n	800045c <__aeabi_fadd+0x1d0>
 8000432:	1b42      	subs	r2, r0, r5
 8000434:	2d00      	cmp	r5, #0
 8000436:	d14b      	bne.n	80004d0 <__aeabi_fadd+0x244>
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0d0      	beq.n	80003de <__aeabi_fadd+0x152>
 800043c:	1e51      	subs	r1, r2, #1
 800043e:	2a01      	cmp	r2, #1
 8000440:	d100      	bne.n	8000444 <__aeabi_fadd+0x1b8>
 8000442:	e09e      	b.n	8000582 <__aeabi_fadd+0x2f6>
 8000444:	2aff      	cmp	r2, #255	@ 0xff
 8000446:	d0ef      	beq.n	8000428 <__aeabi_fadd+0x19c>
 8000448:	000a      	movs	r2, r1
 800044a:	2a1b      	cmp	r2, #27
 800044c:	dd5f      	ble.n	800050e <__aeabi_fadd+0x282>
 800044e:	0002      	movs	r2, r0
 8000450:	1c73      	adds	r3, r6, #1
 8000452:	e77b      	b.n	800034c <__aeabi_fadd+0xc0>
 8000454:	4b50      	ldr	r3, [pc, #320]	@ (8000598 <__aeabi_fadd+0x30c>)
 8000456:	1a2a      	subs	r2, r5, r0
 8000458:	403b      	ands	r3, r7
 800045a:	e7e1      	b.n	8000420 <__aeabi_fadd+0x194>
 800045c:	21fe      	movs	r1, #254	@ 0xfe
 800045e:	1c6a      	adds	r2, r5, #1
 8000460:	4211      	tst	r1, r2
 8000462:	d13b      	bne.n	80004dc <__aeabi_fadd+0x250>
 8000464:	2d00      	cmp	r5, #0
 8000466:	d15d      	bne.n	8000524 <__aeabi_fadd+0x298>
 8000468:	2b00      	cmp	r3, #0
 800046a:	d07f      	beq.n	800056c <__aeabi_fadd+0x2e0>
 800046c:	2e00      	cmp	r6, #0
 800046e:	d17f      	bne.n	8000570 <__aeabi_fadd+0x2e4>
 8000470:	2200      	movs	r2, #0
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	025b      	lsls	r3, r3, #9
 8000476:	0a5b      	lsrs	r3, r3, #9
 8000478:	b2d0      	uxtb	r0, r2
 800047a:	e774      	b.n	8000366 <__aeabi_fadd+0xda>
 800047c:	28ff      	cmp	r0, #255	@ 0xff
 800047e:	d0d2      	beq.n	8000426 <__aeabi_fadd+0x19a>
 8000480:	2480      	movs	r4, #128	@ 0x80
 8000482:	04e4      	lsls	r4, r4, #19
 8000484:	4323      	orrs	r3, r4
 8000486:	2401      	movs	r4, #1
 8000488:	2a1b      	cmp	r2, #27
 800048a:	dc07      	bgt.n	800049c <__aeabi_fadd+0x210>
 800048c:	001c      	movs	r4, r3
 800048e:	2520      	movs	r5, #32
 8000490:	40d4      	lsrs	r4, r2
 8000492:	1aaa      	subs	r2, r5, r2
 8000494:	4093      	lsls	r3, r2
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	4193      	sbcs	r3, r2
 800049a:	431c      	orrs	r4, r3
 800049c:	1b33      	subs	r3, r6, r4
 800049e:	0005      	movs	r5, r0
 80004a0:	000c      	movs	r4, r1
 80004a2:	e74d      	b.n	8000340 <__aeabi_fadd+0xb4>
 80004a4:	1b9f      	subs	r7, r3, r6
 80004a6:	017a      	lsls	r2, r7, #5
 80004a8:	d422      	bmi.n	80004f0 <__aeabi_fadd+0x264>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d1a6      	bne.n	80003fc <__aeabi_fadd+0x170>
 80004ae:	2400      	movs	r4, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	e757      	b.n	8000366 <__aeabi_fadd+0xda>
 80004b6:	199b      	adds	r3, r3, r6
 80004b8:	2501      	movs	r5, #1
 80004ba:	3201      	adds	r2, #1
 80004bc:	0159      	lsls	r1, r3, #5
 80004be:	d400      	bmi.n	80004c2 <__aeabi_fadd+0x236>
 80004c0:	e740      	b.n	8000344 <__aeabi_fadd+0xb8>
 80004c2:	2101      	movs	r1, #1
 80004c4:	4835      	ldr	r0, [pc, #212]	@ (800059c <__aeabi_fadd+0x310>)
 80004c6:	4019      	ands	r1, r3
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	4003      	ands	r3, r0
 80004cc:	430b      	orrs	r3, r1
 80004ce:	e7a7      	b.n	8000420 <__aeabi_fadd+0x194>
 80004d0:	28ff      	cmp	r0, #255	@ 0xff
 80004d2:	d0a9      	beq.n	8000428 <__aeabi_fadd+0x19c>
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	04c9      	lsls	r1, r1, #19
 80004d8:	430b      	orrs	r3, r1
 80004da:	e7b6      	b.n	800044a <__aeabi_fadd+0x1be>
 80004dc:	2aff      	cmp	r2, #255	@ 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x256>
 80004e0:	e779      	b.n	80003d6 <__aeabi_fadd+0x14a>
 80004e2:	199b      	adds	r3, r3, r6
 80004e4:	085b      	lsrs	r3, r3, #1
 80004e6:	0759      	lsls	r1, r3, #29
 80004e8:	d000      	beq.n	80004ec <__aeabi_fadd+0x260>
 80004ea:	e72f      	b.n	800034c <__aeabi_fadd+0xc0>
 80004ec:	08db      	lsrs	r3, r3, #3
 80004ee:	e7c1      	b.n	8000474 <__aeabi_fadd+0x1e8>
 80004f0:	000c      	movs	r4, r1
 80004f2:	1af7      	subs	r7, r6, r3
 80004f4:	e782      	b.n	80003fc <__aeabi_fadd+0x170>
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d12c      	bne.n	8000554 <__aeabi_fadd+0x2c8>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d193      	bne.n	8000426 <__aeabi_fadd+0x19a>
 80004fe:	2380      	movs	r3, #128	@ 0x80
 8000500:	2400      	movs	r4, #0
 8000502:	20ff      	movs	r0, #255	@ 0xff
 8000504:	03db      	lsls	r3, r3, #15
 8000506:	e72e      	b.n	8000366 <__aeabi_fadd+0xda>
 8000508:	2501      	movs	r5, #1
 800050a:	1b9b      	subs	r3, r3, r6
 800050c:	e718      	b.n	8000340 <__aeabi_fadd+0xb4>
 800050e:	0019      	movs	r1, r3
 8000510:	2520      	movs	r5, #32
 8000512:	40d1      	lsrs	r1, r2
 8000514:	1aaa      	subs	r2, r5, r2
 8000516:	4093      	lsls	r3, r2
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	4193      	sbcs	r3, r2
 800051c:	430b      	orrs	r3, r1
 800051e:	0005      	movs	r5, r0
 8000520:	199b      	adds	r3, r3, r6
 8000522:	e753      	b.n	80003cc <__aeabi_fadd+0x140>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x29e>
 8000528:	e77e      	b.n	8000428 <__aeabi_fadd+0x19c>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x2a4>
 800052e:	e77c      	b.n	800042a <__aeabi_fadd+0x19e>
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	03d2      	lsls	r2, r2, #15
 8000534:	4591      	cmp	r9, r2
 8000536:	d302      	bcc.n	800053e <__aeabi_fadd+0x2b2>
 8000538:	4594      	cmp	ip, r2
 800053a:	d200      	bcs.n	800053e <__aeabi_fadd+0x2b2>
 800053c:	0033      	movs	r3, r6
 800053e:	08db      	lsrs	r3, r3, #3
 8000540:	e753      	b.n	80003ea <__aeabi_fadd+0x15e>
 8000542:	000c      	movs	r4, r1
 8000544:	1af3      	subs	r3, r6, r3
 8000546:	3501      	adds	r5, #1
 8000548:	e6fa      	b.n	8000340 <__aeabi_fadd+0xb4>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d0af      	beq.n	80004ae <__aeabi_fadd+0x222>
 800054e:	000c      	movs	r4, r1
 8000550:	0033      	movs	r3, r6
 8000552:	e78d      	b.n	8000470 <__aeabi_fadd+0x1e4>
 8000554:	2e00      	cmp	r6, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0x2ce>
 8000558:	e767      	b.n	800042a <__aeabi_fadd+0x19e>
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	03d2      	lsls	r2, r2, #15
 800055e:	4591      	cmp	r9, r2
 8000560:	d3ed      	bcc.n	800053e <__aeabi_fadd+0x2b2>
 8000562:	4594      	cmp	ip, r2
 8000564:	d2eb      	bcs.n	800053e <__aeabi_fadd+0x2b2>
 8000566:	000c      	movs	r4, r1
 8000568:	0033      	movs	r3, r6
 800056a:	e7e8      	b.n	800053e <__aeabi_fadd+0x2b2>
 800056c:	0033      	movs	r3, r6
 800056e:	e77f      	b.n	8000470 <__aeabi_fadd+0x1e4>
 8000570:	199b      	adds	r3, r3, r6
 8000572:	2200      	movs	r2, #0
 8000574:	0159      	lsls	r1, r3, #5
 8000576:	d5b9      	bpl.n	80004ec <__aeabi_fadd+0x260>
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <__aeabi_fadd+0x30c>)
 800057a:	4013      	ands	r3, r2
 800057c:	08db      	lsrs	r3, r3, #3
 800057e:	2201      	movs	r2, #1
 8000580:	e778      	b.n	8000474 <__aeabi_fadd+0x1e8>
 8000582:	199b      	adds	r3, r3, r6
 8000584:	3201      	adds	r2, #1
 8000586:	3501      	adds	r5, #1
 8000588:	0159      	lsls	r1, r3, #5
 800058a:	d49a      	bmi.n	80004c2 <__aeabi_fadd+0x236>
 800058c:	e6da      	b.n	8000344 <__aeabi_fadd+0xb8>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d08d      	beq.n	80004ae <__aeabi_fadd+0x222>
 8000592:	08db      	lsrs	r3, r3, #3
 8000594:	e76e      	b.n	8000474 <__aeabi_fadd+0x1e8>
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	fbffffff 	.word	0xfbffffff
 800059c:	7dffffff 	.word	0x7dffffff

080005a0 <__aeabi_fmul>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	464f      	mov	r7, r9
 80005a4:	4646      	mov	r6, r8
 80005a6:	46d6      	mov	lr, sl
 80005a8:	0243      	lsls	r3, r0, #9
 80005aa:	0a5b      	lsrs	r3, r3, #9
 80005ac:	0045      	lsls	r5, r0, #1
 80005ae:	b5c0      	push	{r6, r7, lr}
 80005b0:	4699      	mov	r9, r3
 80005b2:	1c0f      	adds	r7, r1, #0
 80005b4:	0e2d      	lsrs	r5, r5, #24
 80005b6:	0fc6      	lsrs	r6, r0, #31
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d100      	bne.n	80005be <__aeabi_fmul+0x1e>
 80005bc:	e088      	b.n	80006d0 <__aeabi_fmul+0x130>
 80005be:	2dff      	cmp	r5, #255	@ 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fmul+0x24>
 80005c2:	e08d      	b.n	80006e0 <__aeabi_fmul+0x140>
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	04d2      	lsls	r2, r2, #19
 80005ca:	431a      	orrs	r2, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	4691      	mov	r9, r2
 80005d0:	4698      	mov	r8, r3
 80005d2:	469a      	mov	sl, r3
 80005d4:	3d7f      	subs	r5, #127	@ 0x7f
 80005d6:	027c      	lsls	r4, r7, #9
 80005d8:	007b      	lsls	r3, r7, #1
 80005da:	0a64      	lsrs	r4, r4, #9
 80005dc:	0e1b      	lsrs	r3, r3, #24
 80005de:	0fff      	lsrs	r7, r7, #31
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d068      	beq.n	80006b6 <__aeabi_fmul+0x116>
 80005e4:	2bff      	cmp	r3, #255	@ 0xff
 80005e6:	d021      	beq.n	800062c <__aeabi_fmul+0x8c>
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	00e4      	lsls	r4, r4, #3
 80005ec:	04d2      	lsls	r2, r2, #19
 80005ee:	4314      	orrs	r4, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	3b7f      	subs	r3, #127	@ 0x7f
 80005f4:	195b      	adds	r3, r3, r5
 80005f6:	2100      	movs	r1, #0
 80005f8:	1c5d      	adds	r5, r3, #1
 80005fa:	2a0a      	cmp	r2, #10
 80005fc:	dc2e      	bgt.n	800065c <__aeabi_fmul+0xbc>
 80005fe:	407e      	eors	r6, r7
 8000600:	4642      	mov	r2, r8
 8000602:	2a02      	cmp	r2, #2
 8000604:	dc23      	bgt.n	800064e <__aeabi_fmul+0xae>
 8000606:	3a01      	subs	r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d900      	bls.n	800060e <__aeabi_fmul+0x6e>
 800060c:	e0bd      	b.n	800078a <__aeabi_fmul+0x1ea>
 800060e:	2902      	cmp	r1, #2
 8000610:	d06e      	beq.n	80006f0 <__aeabi_fmul+0x150>
 8000612:	2901      	cmp	r1, #1
 8000614:	d12c      	bne.n	8000670 <__aeabi_fmul+0xd0>
 8000616:	2000      	movs	r0, #0
 8000618:	2200      	movs	r2, #0
 800061a:	05c0      	lsls	r0, r0, #23
 800061c:	07f6      	lsls	r6, r6, #31
 800061e:	4310      	orrs	r0, r2
 8000620:	4330      	orrs	r0, r6
 8000622:	bce0      	pop	{r5, r6, r7}
 8000624:	46ba      	mov	sl, r7
 8000626:	46b1      	mov	r9, r6
 8000628:	46a8      	mov	r8, r5
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	002b      	movs	r3, r5
 800062e:	33ff      	adds	r3, #255	@ 0xff
 8000630:	2c00      	cmp	r4, #0
 8000632:	d065      	beq.n	8000700 <__aeabi_fmul+0x160>
 8000634:	2203      	movs	r2, #3
 8000636:	4641      	mov	r1, r8
 8000638:	4311      	orrs	r1, r2
 800063a:	0032      	movs	r2, r6
 800063c:	3501      	adds	r5, #1
 800063e:	4688      	mov	r8, r1
 8000640:	407a      	eors	r2, r7
 8000642:	35ff      	adds	r5, #255	@ 0xff
 8000644:	290a      	cmp	r1, #10
 8000646:	dd00      	ble.n	800064a <__aeabi_fmul+0xaa>
 8000648:	e0d8      	b.n	80007fc <__aeabi_fmul+0x25c>
 800064a:	0016      	movs	r6, r2
 800064c:	2103      	movs	r1, #3
 800064e:	4640      	mov	r0, r8
 8000650:	2201      	movs	r2, #1
 8000652:	4082      	lsls	r2, r0
 8000654:	20a6      	movs	r0, #166	@ 0xa6
 8000656:	00c0      	lsls	r0, r0, #3
 8000658:	4202      	tst	r2, r0
 800065a:	d020      	beq.n	800069e <__aeabi_fmul+0xfe>
 800065c:	4653      	mov	r3, sl
 800065e:	2b02      	cmp	r3, #2
 8000660:	d046      	beq.n	80006f0 <__aeabi_fmul+0x150>
 8000662:	2b03      	cmp	r3, #3
 8000664:	d100      	bne.n	8000668 <__aeabi_fmul+0xc8>
 8000666:	e0bb      	b.n	80007e0 <__aeabi_fmul+0x240>
 8000668:	4651      	mov	r1, sl
 800066a:	464c      	mov	r4, r9
 800066c:	2901      	cmp	r1, #1
 800066e:	d0d2      	beq.n	8000616 <__aeabi_fmul+0x76>
 8000670:	002b      	movs	r3, r5
 8000672:	337f      	adds	r3, #127	@ 0x7f
 8000674:	2b00      	cmp	r3, #0
 8000676:	dd70      	ble.n	800075a <__aeabi_fmul+0x1ba>
 8000678:	0762      	lsls	r2, r4, #29
 800067a:	d004      	beq.n	8000686 <__aeabi_fmul+0xe6>
 800067c:	220f      	movs	r2, #15
 800067e:	4022      	ands	r2, r4
 8000680:	2a04      	cmp	r2, #4
 8000682:	d000      	beq.n	8000686 <__aeabi_fmul+0xe6>
 8000684:	3404      	adds	r4, #4
 8000686:	0122      	lsls	r2, r4, #4
 8000688:	d503      	bpl.n	8000692 <__aeabi_fmul+0xf2>
 800068a:	4b63      	ldr	r3, [pc, #396]	@ (8000818 <__aeabi_fmul+0x278>)
 800068c:	401c      	ands	r4, r3
 800068e:	002b      	movs	r3, r5
 8000690:	3380      	adds	r3, #128	@ 0x80
 8000692:	2bfe      	cmp	r3, #254	@ 0xfe
 8000694:	dc2c      	bgt.n	80006f0 <__aeabi_fmul+0x150>
 8000696:	01a2      	lsls	r2, r4, #6
 8000698:	0a52      	lsrs	r2, r2, #9
 800069a:	b2d8      	uxtb	r0, r3
 800069c:	e7bd      	b.n	800061a <__aeabi_fmul+0x7a>
 800069e:	2090      	movs	r0, #144	@ 0x90
 80006a0:	0080      	lsls	r0, r0, #2
 80006a2:	4202      	tst	r2, r0
 80006a4:	d127      	bne.n	80006f6 <__aeabi_fmul+0x156>
 80006a6:	38b9      	subs	r0, #185	@ 0xb9
 80006a8:	38ff      	subs	r0, #255	@ 0xff
 80006aa:	4210      	tst	r0, r2
 80006ac:	d06d      	beq.n	800078a <__aeabi_fmul+0x1ea>
 80006ae:	003e      	movs	r6, r7
 80006b0:	46a1      	mov	r9, r4
 80006b2:	468a      	mov	sl, r1
 80006b4:	e7d2      	b.n	800065c <__aeabi_fmul+0xbc>
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d141      	bne.n	800073e <__aeabi_fmul+0x19e>
 80006ba:	2301      	movs	r3, #1
 80006bc:	4642      	mov	r2, r8
 80006be:	431a      	orrs	r2, r3
 80006c0:	4690      	mov	r8, r2
 80006c2:	002b      	movs	r3, r5
 80006c4:	4642      	mov	r2, r8
 80006c6:	2101      	movs	r1, #1
 80006c8:	1c5d      	adds	r5, r3, #1
 80006ca:	2a0a      	cmp	r2, #10
 80006cc:	dd97      	ble.n	80005fe <__aeabi_fmul+0x5e>
 80006ce:	e7c5      	b.n	800065c <__aeabi_fmul+0xbc>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d126      	bne.n	8000722 <__aeabi_fmul+0x182>
 80006d4:	2304      	movs	r3, #4
 80006d6:	4698      	mov	r8, r3
 80006d8:	3b03      	subs	r3, #3
 80006da:	2500      	movs	r5, #0
 80006dc:	469a      	mov	sl, r3
 80006de:	e77a      	b.n	80005d6 <__aeabi_fmul+0x36>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d118      	bne.n	8000716 <__aeabi_fmul+0x176>
 80006e4:	2308      	movs	r3, #8
 80006e6:	4698      	mov	r8, r3
 80006e8:	3b06      	subs	r3, #6
 80006ea:	25ff      	movs	r5, #255	@ 0xff
 80006ec:	469a      	mov	sl, r3
 80006ee:	e772      	b.n	80005d6 <__aeabi_fmul+0x36>
 80006f0:	20ff      	movs	r0, #255	@ 0xff
 80006f2:	2200      	movs	r2, #0
 80006f4:	e791      	b.n	800061a <__aeabi_fmul+0x7a>
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	2600      	movs	r6, #0
 80006fa:	20ff      	movs	r0, #255	@ 0xff
 80006fc:	03d2      	lsls	r2, r2, #15
 80006fe:	e78c      	b.n	800061a <__aeabi_fmul+0x7a>
 8000700:	4641      	mov	r1, r8
 8000702:	2202      	movs	r2, #2
 8000704:	3501      	adds	r5, #1
 8000706:	4311      	orrs	r1, r2
 8000708:	4688      	mov	r8, r1
 800070a:	35ff      	adds	r5, #255	@ 0xff
 800070c:	290a      	cmp	r1, #10
 800070e:	dca5      	bgt.n	800065c <__aeabi_fmul+0xbc>
 8000710:	2102      	movs	r1, #2
 8000712:	407e      	eors	r6, r7
 8000714:	e774      	b.n	8000600 <__aeabi_fmul+0x60>
 8000716:	230c      	movs	r3, #12
 8000718:	4698      	mov	r8, r3
 800071a:	3b09      	subs	r3, #9
 800071c:	25ff      	movs	r5, #255	@ 0xff
 800071e:	469a      	mov	sl, r3
 8000720:	e759      	b.n	80005d6 <__aeabi_fmul+0x36>
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fed0 	bl	80014c8 <__clzsi2>
 8000728:	464a      	mov	r2, r9
 800072a:	1f43      	subs	r3, r0, #5
 800072c:	2576      	movs	r5, #118	@ 0x76
 800072e:	409a      	lsls	r2, r3
 8000730:	2300      	movs	r3, #0
 8000732:	426d      	negs	r5, r5
 8000734:	4691      	mov	r9, r2
 8000736:	4698      	mov	r8, r3
 8000738:	469a      	mov	sl, r3
 800073a:	1a2d      	subs	r5, r5, r0
 800073c:	e74b      	b.n	80005d6 <__aeabi_fmul+0x36>
 800073e:	0020      	movs	r0, r4
 8000740:	f000 fec2 	bl	80014c8 <__clzsi2>
 8000744:	4642      	mov	r2, r8
 8000746:	1f43      	subs	r3, r0, #5
 8000748:	409c      	lsls	r4, r3
 800074a:	1a2b      	subs	r3, r5, r0
 800074c:	3b76      	subs	r3, #118	@ 0x76
 800074e:	2100      	movs	r1, #0
 8000750:	1c5d      	adds	r5, r3, #1
 8000752:	2a0a      	cmp	r2, #10
 8000754:	dc00      	bgt.n	8000758 <__aeabi_fmul+0x1b8>
 8000756:	e752      	b.n	80005fe <__aeabi_fmul+0x5e>
 8000758:	e780      	b.n	800065c <__aeabi_fmul+0xbc>
 800075a:	2201      	movs	r2, #1
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dd00      	ble.n	8000764 <__aeabi_fmul+0x1c4>
 8000762:	e758      	b.n	8000616 <__aeabi_fmul+0x76>
 8000764:	359e      	adds	r5, #158	@ 0x9e
 8000766:	0022      	movs	r2, r4
 8000768:	40ac      	lsls	r4, r5
 800076a:	40da      	lsrs	r2, r3
 800076c:	1e63      	subs	r3, r4, #1
 800076e:	419c      	sbcs	r4, r3
 8000770:	4322      	orrs	r2, r4
 8000772:	0753      	lsls	r3, r2, #29
 8000774:	d004      	beq.n	8000780 <__aeabi_fmul+0x1e0>
 8000776:	230f      	movs	r3, #15
 8000778:	4013      	ands	r3, r2
 800077a:	2b04      	cmp	r3, #4
 800077c:	d000      	beq.n	8000780 <__aeabi_fmul+0x1e0>
 800077e:	3204      	adds	r2, #4
 8000780:	0153      	lsls	r3, r2, #5
 8000782:	d537      	bpl.n	80007f4 <__aeabi_fmul+0x254>
 8000784:	2001      	movs	r0, #1
 8000786:	2200      	movs	r2, #0
 8000788:	e747      	b.n	800061a <__aeabi_fmul+0x7a>
 800078a:	0c21      	lsrs	r1, r4, #16
 800078c:	464a      	mov	r2, r9
 800078e:	0424      	lsls	r4, r4, #16
 8000790:	0c24      	lsrs	r4, r4, #16
 8000792:	0027      	movs	r7, r4
 8000794:	0c10      	lsrs	r0, r2, #16
 8000796:	0412      	lsls	r2, r2, #16
 8000798:	0c12      	lsrs	r2, r2, #16
 800079a:	4344      	muls	r4, r0
 800079c:	4357      	muls	r7, r2
 800079e:	4348      	muls	r0, r1
 80007a0:	4351      	muls	r1, r2
 80007a2:	0c3a      	lsrs	r2, r7, #16
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	1852      	adds	r2, r2, r1
 80007a8:	4294      	cmp	r4, r2
 80007aa:	d903      	bls.n	80007b4 <__aeabi_fmul+0x214>
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	0249      	lsls	r1, r1, #9
 80007b0:	468c      	mov	ip, r1
 80007b2:	4460      	add	r0, ip
 80007b4:	043f      	lsls	r7, r7, #16
 80007b6:	0411      	lsls	r1, r2, #16
 80007b8:	0c3f      	lsrs	r7, r7, #16
 80007ba:	19c9      	adds	r1, r1, r7
 80007bc:	018c      	lsls	r4, r1, #6
 80007be:	1e67      	subs	r7, r4, #1
 80007c0:	41bc      	sbcs	r4, r7
 80007c2:	0c12      	lsrs	r2, r2, #16
 80007c4:	0e89      	lsrs	r1, r1, #26
 80007c6:	1812      	adds	r2, r2, r0
 80007c8:	430c      	orrs	r4, r1
 80007ca:	0192      	lsls	r2, r2, #6
 80007cc:	4314      	orrs	r4, r2
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	d50e      	bpl.n	80007f0 <__aeabi_fmul+0x250>
 80007d2:	2301      	movs	r3, #1
 80007d4:	0862      	lsrs	r2, r4, #1
 80007d6:	401c      	ands	r4, r3
 80007d8:	4314      	orrs	r4, r2
 80007da:	e749      	b.n	8000670 <__aeabi_fmul+0xd0>
 80007dc:	003e      	movs	r6, r7
 80007de:	46a1      	mov	r9, r4
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	464b      	mov	r3, r9
 80007e4:	03d2      	lsls	r2, r2, #15
 80007e6:	431a      	orrs	r2, r3
 80007e8:	0252      	lsls	r2, r2, #9
 80007ea:	20ff      	movs	r0, #255	@ 0xff
 80007ec:	0a52      	lsrs	r2, r2, #9
 80007ee:	e714      	b.n	800061a <__aeabi_fmul+0x7a>
 80007f0:	001d      	movs	r5, r3
 80007f2:	e73d      	b.n	8000670 <__aeabi_fmul+0xd0>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e70e      	b.n	800061a <__aeabi_fmul+0x7a>
 80007fc:	290f      	cmp	r1, #15
 80007fe:	d1ed      	bne.n	80007dc <__aeabi_fmul+0x23c>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	464b      	mov	r3, r9
 8000804:	03d2      	lsls	r2, r2, #15
 8000806:	4213      	tst	r3, r2
 8000808:	d0ea      	beq.n	80007e0 <__aeabi_fmul+0x240>
 800080a:	4214      	tst	r4, r2
 800080c:	d1e8      	bne.n	80007e0 <__aeabi_fmul+0x240>
 800080e:	003e      	movs	r6, r7
 8000810:	20ff      	movs	r0, #255	@ 0xff
 8000812:	4322      	orrs	r2, r4
 8000814:	e701      	b.n	800061a <__aeabi_fmul+0x7a>
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	f7ffffff 	.word	0xf7ffffff

0800081c <__aeabi_fsub>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	4647      	mov	r7, r8
 8000820:	46ce      	mov	lr, r9
 8000822:	024e      	lsls	r6, r1, #9
 8000824:	0243      	lsls	r3, r0, #9
 8000826:	0045      	lsls	r5, r0, #1
 8000828:	0a72      	lsrs	r2, r6, #9
 800082a:	0fc4      	lsrs	r4, r0, #31
 800082c:	0048      	lsls	r0, r1, #1
 800082e:	b580      	push	{r7, lr}
 8000830:	4694      	mov	ip, r2
 8000832:	0a5f      	lsrs	r7, r3, #9
 8000834:	0e2d      	lsrs	r5, r5, #24
 8000836:	099b      	lsrs	r3, r3, #6
 8000838:	0e00      	lsrs	r0, r0, #24
 800083a:	0fc9      	lsrs	r1, r1, #31
 800083c:	09b6      	lsrs	r6, r6, #6
 800083e:	28ff      	cmp	r0, #255	@ 0xff
 8000840:	d024      	beq.n	800088c <__aeabi_fsub+0x70>
 8000842:	2201      	movs	r2, #1
 8000844:	4051      	eors	r1, r2
 8000846:	1a2a      	subs	r2, r5, r0
 8000848:	428c      	cmp	r4, r1
 800084a:	d00f      	beq.n	800086c <__aeabi_fsub+0x50>
 800084c:	2a00      	cmp	r2, #0
 800084e:	dc00      	bgt.n	8000852 <__aeabi_fsub+0x36>
 8000850:	e16a      	b.n	8000b28 <__aeabi_fsub+0x30c>
 8000852:	2800      	cmp	r0, #0
 8000854:	d135      	bne.n	80008c2 <__aeabi_fsub+0xa6>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x40>
 800085a:	e0a2      	b.n	80009a2 <__aeabi_fsub+0x186>
 800085c:	1e51      	subs	r1, r2, #1
 800085e:	2a01      	cmp	r2, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x48>
 8000862:	e124      	b.n	8000aae <__aeabi_fsub+0x292>
 8000864:	2aff      	cmp	r2, #255	@ 0xff
 8000866:	d021      	beq.n	80008ac <__aeabi_fsub+0x90>
 8000868:	000a      	movs	r2, r1
 800086a:	e02f      	b.n	80008cc <__aeabi_fsub+0xb0>
 800086c:	2a00      	cmp	r2, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_fsub+0x56>
 8000870:	e167      	b.n	8000b42 <__aeabi_fsub+0x326>
 8000872:	2800      	cmp	r0, #0
 8000874:	d05e      	beq.n	8000934 <__aeabi_fsub+0x118>
 8000876:	2dff      	cmp	r5, #255	@ 0xff
 8000878:	d018      	beq.n	80008ac <__aeabi_fsub+0x90>
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	04c9      	lsls	r1, r1, #19
 800087e:	430e      	orrs	r6, r1
 8000880:	2a1b      	cmp	r2, #27
 8000882:	dc00      	bgt.n	8000886 <__aeabi_fsub+0x6a>
 8000884:	e076      	b.n	8000974 <__aeabi_fsub+0x158>
 8000886:	002a      	movs	r2, r5
 8000888:	3301      	adds	r3, #1
 800088a:	e032      	b.n	80008f2 <__aeabi_fsub+0xd6>
 800088c:	002a      	movs	r2, r5
 800088e:	3aff      	subs	r2, #255	@ 0xff
 8000890:	4691      	mov	r9, r2
 8000892:	2e00      	cmp	r6, #0
 8000894:	d042      	beq.n	800091c <__aeabi_fsub+0x100>
 8000896:	428c      	cmp	r4, r1
 8000898:	d055      	beq.n	8000946 <__aeabi_fsub+0x12a>
 800089a:	464a      	mov	r2, r9
 800089c:	2a00      	cmp	r2, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fsub+0x86>
 80008a0:	e09c      	b.n	80009dc <__aeabi_fsub+0x1c0>
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x8c>
 80008a6:	e077      	b.n	8000998 <__aeabi_fsub+0x17c>
 80008a8:	000c      	movs	r4, r1
 80008aa:	0033      	movs	r3, r6
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fsub+0x98>
 80008b2:	e06e      	b.n	8000992 <__aeabi_fsub+0x176>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	03d2      	lsls	r2, r2, #15
 80008b8:	4313      	orrs	r3, r2
 80008ba:	025b      	lsls	r3, r3, #9
 80008bc:	20ff      	movs	r0, #255	@ 0xff
 80008be:	0a5b      	lsrs	r3, r3, #9
 80008c0:	e024      	b.n	800090c <__aeabi_fsub+0xf0>
 80008c2:	2dff      	cmp	r5, #255	@ 0xff
 80008c4:	d0f2      	beq.n	80008ac <__aeabi_fsub+0x90>
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	430e      	orrs	r6, r1
 80008cc:	2101      	movs	r1, #1
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dc08      	bgt.n	80008e4 <__aeabi_fsub+0xc8>
 80008d2:	0031      	movs	r1, r6
 80008d4:	2020      	movs	r0, #32
 80008d6:	40d1      	lsrs	r1, r2
 80008d8:	1a82      	subs	r2, r0, r2
 80008da:	4096      	lsls	r6, r2
 80008dc:	0032      	movs	r2, r6
 80008de:	1e50      	subs	r0, r2, #1
 80008e0:	4182      	sbcs	r2, r0
 80008e2:	4311      	orrs	r1, r2
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	015a      	lsls	r2, r3, #5
 80008e8:	d460      	bmi.n	80009ac <__aeabi_fsub+0x190>
 80008ea:	2107      	movs	r1, #7
 80008ec:	002a      	movs	r2, r5
 80008ee:	4019      	ands	r1, r3
 80008f0:	d057      	beq.n	80009a2 <__aeabi_fsub+0x186>
 80008f2:	210f      	movs	r1, #15
 80008f4:	4019      	ands	r1, r3
 80008f6:	2904      	cmp	r1, #4
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0xe0>
 80008fa:	3304      	adds	r3, #4
 80008fc:	0159      	lsls	r1, r3, #5
 80008fe:	d550      	bpl.n	80009a2 <__aeabi_fsub+0x186>
 8000900:	1c50      	adds	r0, r2, #1
 8000902:	2afe      	cmp	r2, #254	@ 0xfe
 8000904:	d045      	beq.n	8000992 <__aeabi_fsub+0x176>
 8000906:	019b      	lsls	r3, r3, #6
 8000908:	b2c0      	uxtb	r0, r0
 800090a:	0a5b      	lsrs	r3, r3, #9
 800090c:	05c0      	lsls	r0, r0, #23
 800090e:	4318      	orrs	r0, r3
 8000910:	07e4      	lsls	r4, r4, #31
 8000912:	4320      	orrs	r0, r4
 8000914:	bcc0      	pop	{r6, r7}
 8000916:	46b9      	mov	r9, r7
 8000918:	46b0      	mov	r8, r6
 800091a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091c:	2201      	movs	r2, #1
 800091e:	4051      	eors	r1, r2
 8000920:	428c      	cmp	r4, r1
 8000922:	d1ba      	bne.n	800089a <__aeabi_fsub+0x7e>
 8000924:	464a      	mov	r2, r9
 8000926:	2a00      	cmp	r2, #0
 8000928:	d010      	beq.n	800094c <__aeabi_fsub+0x130>
 800092a:	2d00      	cmp	r5, #0
 800092c:	d100      	bne.n	8000930 <__aeabi_fsub+0x114>
 800092e:	e098      	b.n	8000a62 <__aeabi_fsub+0x246>
 8000930:	2300      	movs	r3, #0
 8000932:	e7bb      	b.n	80008ac <__aeabi_fsub+0x90>
 8000934:	2e00      	cmp	r6, #0
 8000936:	d034      	beq.n	80009a2 <__aeabi_fsub+0x186>
 8000938:	1e51      	subs	r1, r2, #1
 800093a:	2a01      	cmp	r2, #1
 800093c:	d06e      	beq.n	8000a1c <__aeabi_fsub+0x200>
 800093e:	2aff      	cmp	r2, #255	@ 0xff
 8000940:	d0b4      	beq.n	80008ac <__aeabi_fsub+0x90>
 8000942:	000a      	movs	r2, r1
 8000944:	e79c      	b.n	8000880 <__aeabi_fsub+0x64>
 8000946:	2a00      	cmp	r2, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x130>
 800094a:	e088      	b.n	8000a5e <__aeabi_fsub+0x242>
 800094c:	20fe      	movs	r0, #254	@ 0xfe
 800094e:	1c6a      	adds	r2, r5, #1
 8000950:	4210      	tst	r0, r2
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0x13a>
 8000954:	e092      	b.n	8000a7c <__aeabi_fsub+0x260>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fsub+0x140>
 800095a:	e0a4      	b.n	8000aa6 <__aeabi_fsub+0x28a>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x146>
 8000960:	e0cb      	b.n	8000afa <__aeabi_fsub+0x2de>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x14c>
 8000966:	e0ca      	b.n	8000afe <__aeabi_fsub+0x2e2>
 8000968:	2200      	movs	r2, #0
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	0a5b      	lsrs	r3, r3, #9
 8000970:	b2d0      	uxtb	r0, r2
 8000972:	e7cb      	b.n	800090c <__aeabi_fsub+0xf0>
 8000974:	0031      	movs	r1, r6
 8000976:	2020      	movs	r0, #32
 8000978:	40d1      	lsrs	r1, r2
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	4096      	lsls	r6, r2
 800097e:	0032      	movs	r2, r6
 8000980:	1e50      	subs	r0, r2, #1
 8000982:	4182      	sbcs	r2, r0
 8000984:	430a      	orrs	r2, r1
 8000986:	189b      	adds	r3, r3, r2
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	d5ae      	bpl.n	80008ea <__aeabi_fsub+0xce>
 800098c:	1c6a      	adds	r2, r5, #1
 800098e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000990:	d14a      	bne.n	8000a28 <__aeabi_fsub+0x20c>
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	2300      	movs	r3, #0
 8000996:	e7b9      	b.n	800090c <__aeabi_fsub+0xf0>
 8000998:	22ff      	movs	r2, #255	@ 0xff
 800099a:	2b00      	cmp	r3, #0
 800099c:	d14b      	bne.n	8000a36 <__aeabi_fsub+0x21a>
 800099e:	000c      	movs	r4, r1
 80009a0:	0033      	movs	r3, r6
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	2aff      	cmp	r2, #255	@ 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x18e>
 80009a8:	e781      	b.n	80008ae <__aeabi_fsub+0x92>
 80009aa:	e7df      	b.n	800096c <__aeabi_fsub+0x150>
 80009ac:	019f      	lsls	r7, r3, #6
 80009ae:	09bf      	lsrs	r7, r7, #6
 80009b0:	0038      	movs	r0, r7
 80009b2:	f000 fd89 	bl	80014c8 <__clzsi2>
 80009b6:	3805      	subs	r0, #5
 80009b8:	4087      	lsls	r7, r0
 80009ba:	4285      	cmp	r5, r0
 80009bc:	dc21      	bgt.n	8000a02 <__aeabi_fsub+0x1e6>
 80009be:	003b      	movs	r3, r7
 80009c0:	2120      	movs	r1, #32
 80009c2:	1b42      	subs	r2, r0, r5
 80009c4:	3201      	adds	r2, #1
 80009c6:	40d3      	lsrs	r3, r2
 80009c8:	1a8a      	subs	r2, r1, r2
 80009ca:	4097      	lsls	r7, r2
 80009cc:	1e7a      	subs	r2, r7, #1
 80009ce:	4197      	sbcs	r7, r2
 80009d0:	2200      	movs	r2, #0
 80009d2:	433b      	orrs	r3, r7
 80009d4:	0759      	lsls	r1, r3, #29
 80009d6:	d000      	beq.n	80009da <__aeabi_fsub+0x1be>
 80009d8:	e78b      	b.n	80008f2 <__aeabi_fsub+0xd6>
 80009da:	e78f      	b.n	80008fc <__aeabi_fsub+0xe0>
 80009dc:	20fe      	movs	r0, #254	@ 0xfe
 80009de:	1c6a      	adds	r2, r5, #1
 80009e0:	4210      	tst	r0, r2
 80009e2:	d112      	bne.n	8000a0a <__aeabi_fsub+0x1ee>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d152      	bne.n	8000a8e <__aeabi_fsub+0x272>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d07c      	beq.n	8000ae6 <__aeabi_fsub+0x2ca>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d0bb      	beq.n	8000968 <__aeabi_fsub+0x14c>
 80009f0:	1b9a      	subs	r2, r3, r6
 80009f2:	0150      	lsls	r0, r2, #5
 80009f4:	d400      	bmi.n	80009f8 <__aeabi_fsub+0x1dc>
 80009f6:	e08b      	b.n	8000b10 <__aeabi_fsub+0x2f4>
 80009f8:	2401      	movs	r4, #1
 80009fa:	2200      	movs	r2, #0
 80009fc:	1af3      	subs	r3, r6, r3
 80009fe:	400c      	ands	r4, r1
 8000a00:	e7e8      	b.n	80009d4 <__aeabi_fsub+0x1b8>
 8000a02:	4b56      	ldr	r3, [pc, #344]	@ (8000b5c <__aeabi_fsub+0x340>)
 8000a04:	1a2a      	subs	r2, r5, r0
 8000a06:	403b      	ands	r3, r7
 8000a08:	e7e4      	b.n	80009d4 <__aeabi_fsub+0x1b8>
 8000a0a:	1b9f      	subs	r7, r3, r6
 8000a0c:	017a      	lsls	r2, r7, #5
 8000a0e:	d446      	bmi.n	8000a9e <__aeabi_fsub+0x282>
 8000a10:	2f00      	cmp	r7, #0
 8000a12:	d1cd      	bne.n	80009b0 <__aeabi_fsub+0x194>
 8000a14:	2400      	movs	r4, #0
 8000a16:	2000      	movs	r0, #0
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e777      	b.n	800090c <__aeabi_fsub+0xf0>
 8000a1c:	199b      	adds	r3, r3, r6
 8000a1e:	2501      	movs	r5, #1
 8000a20:	3201      	adds	r2, #1
 8000a22:	0159      	lsls	r1, r3, #5
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_fsub+0x20c>
 8000a26:	e760      	b.n	80008ea <__aeabi_fsub+0xce>
 8000a28:	2101      	movs	r1, #1
 8000a2a:	484d      	ldr	r0, [pc, #308]	@ (8000b60 <__aeabi_fsub+0x344>)
 8000a2c:	4019      	ands	r1, r3
 8000a2e:	085b      	lsrs	r3, r3, #1
 8000a30:	4003      	ands	r3, r0
 8000a32:	430b      	orrs	r3, r1
 8000a34:	e7ce      	b.n	80009d4 <__aeabi_fsub+0x1b8>
 8000a36:	1e57      	subs	r7, r2, #1
 8000a38:	2a01      	cmp	r2, #1
 8000a3a:	d05a      	beq.n	8000af2 <__aeabi_fsub+0x2d6>
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d033      	beq.n	8000aaa <__aeabi_fsub+0x28e>
 8000a42:	2201      	movs	r2, #1
 8000a44:	2f1b      	cmp	r7, #27
 8000a46:	dc07      	bgt.n	8000a58 <__aeabi_fsub+0x23c>
 8000a48:	2120      	movs	r1, #32
 8000a4a:	1bc9      	subs	r1, r1, r7
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	408b      	lsls	r3, r1
 8000a50:	40fa      	lsrs	r2, r7
 8000a52:	1e59      	subs	r1, r3, #1
 8000a54:	418b      	sbcs	r3, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	0005      	movs	r5, r0
 8000a5a:	1ab3      	subs	r3, r6, r2
 8000a5c:	e743      	b.n	80008e6 <__aeabi_fsub+0xca>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d123      	bne.n	8000aaa <__aeabi_fsub+0x28e>
 8000a62:	22ff      	movs	r2, #255	@ 0xff
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d09b      	beq.n	80009a0 <__aeabi_fsub+0x184>
 8000a68:	1e51      	subs	r1, r2, #1
 8000a6a:	2a01      	cmp	r2, #1
 8000a6c:	d0d6      	beq.n	8000a1c <__aeabi_fsub+0x200>
 8000a6e:	2aff      	cmp	r2, #255	@ 0xff
 8000a70:	d01b      	beq.n	8000aaa <__aeabi_fsub+0x28e>
 8000a72:	291b      	cmp	r1, #27
 8000a74:	dd2c      	ble.n	8000ad0 <__aeabi_fsub+0x2b4>
 8000a76:	0002      	movs	r2, r0
 8000a78:	1c73      	adds	r3, r6, #1
 8000a7a:	e73a      	b.n	80008f2 <__aeabi_fsub+0xd6>
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d088      	beq.n	8000992 <__aeabi_fsub+0x176>
 8000a80:	199b      	adds	r3, r3, r6
 8000a82:	085b      	lsrs	r3, r3, #1
 8000a84:	0759      	lsls	r1, r3, #29
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x26e>
 8000a88:	e733      	b.n	80008f2 <__aeabi_fsub+0xd6>
 8000a8a:	08db      	lsrs	r3, r3, #3
 8000a8c:	e76e      	b.n	800096c <__aeabi_fsub+0x150>
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d110      	bne.n	8000ab4 <__aeabi_fsub+0x298>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d043      	beq.n	8000b1e <__aeabi_fsub+0x302>
 8000a96:	2401      	movs	r4, #1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	400c      	ands	r4, r1
 8000a9c:	e706      	b.n	80008ac <__aeabi_fsub+0x90>
 8000a9e:	2401      	movs	r4, #1
 8000aa0:	1af7      	subs	r7, r6, r3
 8000aa2:	400c      	ands	r4, r1
 8000aa4:	e784      	b.n	80009b0 <__aeabi_fsub+0x194>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <__aeabi_fsub+0x298>
 8000aaa:	0033      	movs	r3, r6
 8000aac:	e6fe      	b.n	80008ac <__aeabi_fsub+0x90>
 8000aae:	2501      	movs	r5, #1
 8000ab0:	1b9b      	subs	r3, r3, r6
 8000ab2:	e718      	b.n	80008e6 <__aeabi_fsub+0xca>
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fsub+0x29e>
 8000ab8:	e6f8      	b.n	80008ac <__aeabi_fsub+0x90>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	03d2      	lsls	r2, r2, #15
 8000abe:	4297      	cmp	r7, r2
 8000ac0:	d304      	bcc.n	8000acc <__aeabi_fsub+0x2b0>
 8000ac2:	4594      	cmp	ip, r2
 8000ac4:	d202      	bcs.n	8000acc <__aeabi_fsub+0x2b0>
 8000ac6:	2401      	movs	r4, #1
 8000ac8:	0033      	movs	r3, r6
 8000aca:	400c      	ands	r4, r1
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	e6f1      	b.n	80008b4 <__aeabi_fsub+0x98>
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2520      	movs	r5, #32
 8000ad4:	40ca      	lsrs	r2, r1
 8000ad6:	1a69      	subs	r1, r5, r1
 8000ad8:	408b      	lsls	r3, r1
 8000ada:	1e59      	subs	r1, r3, #1
 8000adc:	418b      	sbcs	r3, r1
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	0005      	movs	r5, r0
 8000ae2:	199b      	adds	r3, r3, r6
 8000ae4:	e750      	b.n	8000988 <__aeabi_fsub+0x16c>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d094      	beq.n	8000a14 <__aeabi_fsub+0x1f8>
 8000aea:	2401      	movs	r4, #1
 8000aec:	0033      	movs	r3, r6
 8000aee:	400c      	ands	r4, r1
 8000af0:	e73a      	b.n	8000968 <__aeabi_fsub+0x14c>
 8000af2:	000c      	movs	r4, r1
 8000af4:	2501      	movs	r5, #1
 8000af6:	1af3      	subs	r3, r6, r3
 8000af8:	e6f5      	b.n	80008e6 <__aeabi_fsub+0xca>
 8000afa:	0033      	movs	r3, r6
 8000afc:	e734      	b.n	8000968 <__aeabi_fsub+0x14c>
 8000afe:	199b      	adds	r3, r3, r6
 8000b00:	2200      	movs	r2, #0
 8000b02:	0159      	lsls	r1, r3, #5
 8000b04:	d5c1      	bpl.n	8000a8a <__aeabi_fsub+0x26e>
 8000b06:	4a15      	ldr	r2, [pc, #84]	@ (8000b5c <__aeabi_fsub+0x340>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	08db      	lsrs	r3, r3, #3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	e72d      	b.n	800096c <__aeabi_fsub+0x150>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x2fa>
 8000b14:	e77e      	b.n	8000a14 <__aeabi_fsub+0x1f8>
 8000b16:	0013      	movs	r3, r2
 8000b18:	2200      	movs	r2, #0
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	e726      	b.n	800096c <__aeabi_fsub+0x150>
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	2400      	movs	r4, #0
 8000b22:	20ff      	movs	r0, #255	@ 0xff
 8000b24:	03db      	lsls	r3, r3, #15
 8000b26:	e6f1      	b.n	800090c <__aeabi_fsub+0xf0>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fsub+0x312>
 8000b2c:	e756      	b.n	80009dc <__aeabi_fsub+0x1c0>
 8000b2e:	1b47      	subs	r7, r0, r5
 8000b30:	003a      	movs	r2, r7
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0x31c>
 8000b36:	e730      	b.n	800099a <__aeabi_fsub+0x17e>
 8000b38:	2280      	movs	r2, #128	@ 0x80
 8000b3a:	04d2      	lsls	r2, r2, #19
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	e77f      	b.n	8000a42 <__aeabi_fsub+0x226>
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x32c>
 8000b46:	e701      	b.n	800094c <__aeabi_fsub+0x130>
 8000b48:	1b41      	subs	r1, r0, r5
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d101      	bne.n	8000b52 <__aeabi_fsub+0x336>
 8000b4e:	000a      	movs	r2, r1
 8000b50:	e788      	b.n	8000a64 <__aeabi_fsub+0x248>
 8000b52:	2280      	movs	r2, #128	@ 0x80
 8000b54:	04d2      	lsls	r2, r2, #19
 8000b56:	4313      	orrs	r3, r2
 8000b58:	e78b      	b.n	8000a72 <__aeabi_fsub+0x256>
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	fbffffff 	.word	0xfbffffff
 8000b60:	7dffffff 	.word	0x7dffffff

08000b64 <__aeabi_f2iz>:
 8000b64:	0241      	lsls	r1, r0, #9
 8000b66:	0042      	lsls	r2, r0, #1
 8000b68:	0fc3      	lsrs	r3, r0, #31
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000b72:	dd03      	ble.n	8000b7c <__aeabi_f2iz+0x18>
 8000b74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000b76:	dd02      	ble.n	8000b7e <__aeabi_f2iz+0x1a>
 8000b78:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <__aeabi_f2iz+0x3c>)
 8000b7a:	1898      	adds	r0, r3, r2
 8000b7c:	4770      	bx	lr
 8000b7e:	2080      	movs	r0, #128	@ 0x80
 8000b80:	0400      	lsls	r0, r0, #16
 8000b82:	4301      	orrs	r1, r0
 8000b84:	2a95      	cmp	r2, #149	@ 0x95
 8000b86:	dc07      	bgt.n	8000b98 <__aeabi_f2iz+0x34>
 8000b88:	2096      	movs	r0, #150	@ 0x96
 8000b8a:	1a82      	subs	r2, r0, r2
 8000b8c:	40d1      	lsrs	r1, r2
 8000b8e:	4248      	negs	r0, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f3      	bne.n	8000b7c <__aeabi_f2iz+0x18>
 8000b94:	0008      	movs	r0, r1
 8000b96:	e7f1      	b.n	8000b7c <__aeabi_f2iz+0x18>
 8000b98:	3a96      	subs	r2, #150	@ 0x96
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	e7f7      	b.n	8000b8e <__aeabi_f2iz+0x2a>
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	7fffffff 	.word	0x7fffffff

08000ba4 <__aeabi_ui2f>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	1e04      	subs	r4, r0, #0
 8000ba8:	d00e      	beq.n	8000bc8 <__aeabi_ui2f+0x24>
 8000baa:	f000 fc8d 	bl	80014c8 <__clzsi2>
 8000bae:	239e      	movs	r3, #158	@ 0x9e
 8000bb0:	0001      	movs	r1, r0
 8000bb2:	1a1b      	subs	r3, r3, r0
 8000bb4:	2b96      	cmp	r3, #150	@ 0x96
 8000bb6:	dc0c      	bgt.n	8000bd2 <__aeabi_ui2f+0x2e>
 8000bb8:	2808      	cmp	r0, #8
 8000bba:	d02f      	beq.n	8000c1c <__aeabi_ui2f+0x78>
 8000bbc:	3908      	subs	r1, #8
 8000bbe:	408c      	lsls	r4, r1
 8000bc0:	0264      	lsls	r4, r4, #9
 8000bc2:	0a64      	lsrs	r4, r4, #9
 8000bc4:	b2d8      	uxtb	r0, r3
 8000bc6:	e001      	b.n	8000bcc <__aeabi_ui2f+0x28>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	05c0      	lsls	r0, r0, #23
 8000bce:	4320      	orrs	r0, r4
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	2b99      	cmp	r3, #153	@ 0x99
 8000bd4:	dc16      	bgt.n	8000c04 <__aeabi_ui2f+0x60>
 8000bd6:	1f42      	subs	r2, r0, #5
 8000bd8:	2805      	cmp	r0, #5
 8000bda:	d000      	beq.n	8000bde <__aeabi_ui2f+0x3a>
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	0022      	movs	r2, r4
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <__aeabi_ui2f+0x80>)
 8000be2:	4002      	ands	r2, r0
 8000be4:	0765      	lsls	r5, r4, #29
 8000be6:	d009      	beq.n	8000bfc <__aeabi_ui2f+0x58>
 8000be8:	250f      	movs	r5, #15
 8000bea:	402c      	ands	r4, r5
 8000bec:	2c04      	cmp	r4, #4
 8000bee:	d005      	beq.n	8000bfc <__aeabi_ui2f+0x58>
 8000bf0:	3204      	adds	r2, #4
 8000bf2:	0154      	lsls	r4, r2, #5
 8000bf4:	d502      	bpl.n	8000bfc <__aeabi_ui2f+0x58>
 8000bf6:	239f      	movs	r3, #159	@ 0x9f
 8000bf8:	4002      	ands	r2, r0
 8000bfa:	1a5b      	subs	r3, r3, r1
 8000bfc:	0192      	lsls	r2, r2, #6
 8000bfe:	0a54      	lsrs	r4, r2, #9
 8000c00:	b2d8      	uxtb	r0, r3
 8000c02:	e7e3      	b.n	8000bcc <__aeabi_ui2f+0x28>
 8000c04:	0002      	movs	r2, r0
 8000c06:	0020      	movs	r0, r4
 8000c08:	321b      	adds	r2, #27
 8000c0a:	4090      	lsls	r0, r2
 8000c0c:	0002      	movs	r2, r0
 8000c0e:	1e50      	subs	r0, r2, #1
 8000c10:	4182      	sbcs	r2, r0
 8000c12:	2005      	movs	r0, #5
 8000c14:	1a40      	subs	r0, r0, r1
 8000c16:	40c4      	lsrs	r4, r0
 8000c18:	4314      	orrs	r4, r2
 8000c1a:	e7e0      	b.n	8000bde <__aeabi_ui2f+0x3a>
 8000c1c:	0264      	lsls	r4, r4, #9
 8000c1e:	2096      	movs	r0, #150	@ 0x96
 8000c20:	0a64      	lsrs	r4, r4, #9
 8000c22:	e7d3      	b.n	8000bcc <__aeabi_ui2f+0x28>
 8000c24:	fbffffff 	.word	0xfbffffff

08000c28 <__aeabi_dsub>:
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	464e      	mov	r6, r9
 8000c2c:	4645      	mov	r5, r8
 8000c2e:	46de      	mov	lr, fp
 8000c30:	4657      	mov	r7, sl
 8000c32:	b5e0      	push	{r5, r6, r7, lr}
 8000c34:	b085      	sub	sp, #20
 8000c36:	9000      	str	r0, [sp, #0]
 8000c38:	9101      	str	r1, [sp, #4]
 8000c3a:	030c      	lsls	r4, r1, #12
 8000c3c:	004f      	lsls	r7, r1, #1
 8000c3e:	0fce      	lsrs	r6, r1, #31
 8000c40:	0a61      	lsrs	r1, r4, #9
 8000c42:	9c00      	ldr	r4, [sp, #0]
 8000c44:	46b0      	mov	r8, r6
 8000c46:	0f64      	lsrs	r4, r4, #29
 8000c48:	430c      	orrs	r4, r1
 8000c4a:	9900      	ldr	r1, [sp, #0]
 8000c4c:	0d7f      	lsrs	r7, r7, #21
 8000c4e:	00c8      	lsls	r0, r1, #3
 8000c50:	0011      	movs	r1, r2
 8000c52:	001a      	movs	r2, r3
 8000c54:	031b      	lsls	r3, r3, #12
 8000c56:	469c      	mov	ip, r3
 8000c58:	9100      	str	r1, [sp, #0]
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	0051      	lsls	r1, r2, #1
 8000c5e:	0d4b      	lsrs	r3, r1, #21
 8000c60:	4699      	mov	r9, r3
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	9d00      	ldr	r5, [sp, #0]
 8000c66:	0fd9      	lsrs	r1, r3, #31
 8000c68:	4663      	mov	r3, ip
 8000c6a:	0f6a      	lsrs	r2, r5, #29
 8000c6c:	0a5b      	lsrs	r3, r3, #9
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	00ea      	lsls	r2, r5, #3
 8000c72:	4694      	mov	ip, r2
 8000c74:	4693      	mov	fp, r2
 8000c76:	4ac1      	ldr	r2, [pc, #772]	@ (8000f7c <__aeabi_dsub+0x354>)
 8000c78:	9003      	str	r0, [sp, #12]
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	4591      	cmp	r9, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dsub+0x5a>
 8000c80:	e0cd      	b.n	8000e1e <__aeabi_dsub+0x1f6>
 8000c82:	2501      	movs	r5, #1
 8000c84:	4069      	eors	r1, r5
 8000c86:	464d      	mov	r5, r9
 8000c88:	1b7d      	subs	r5, r7, r5
 8000c8a:	46aa      	mov	sl, r5
 8000c8c:	428e      	cmp	r6, r1
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dsub+0x6a>
 8000c90:	e080      	b.n	8000d94 <__aeabi_dsub+0x16c>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	dc00      	bgt.n	8000c98 <__aeabi_dsub+0x70>
 8000c96:	e335      	b.n	8001304 <__aeabi_dsub+0x6dc>
 8000c98:	4649      	mov	r1, r9
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dsub+0x78>
 8000c9e:	e0df      	b.n	8000e60 <__aeabi_dsub+0x238>
 8000ca0:	4297      	cmp	r7, r2
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dsub+0x7e>
 8000ca4:	e194      	b.n	8000fd0 <__aeabi_dsub+0x3a8>
 8000ca6:	4652      	mov	r2, sl
 8000ca8:	2501      	movs	r5, #1
 8000caa:	2a38      	cmp	r2, #56	@ 0x38
 8000cac:	dc19      	bgt.n	8000ce2 <__aeabi_dsub+0xba>
 8000cae:	2280      	movs	r2, #128	@ 0x80
 8000cb0:	9b02      	ldr	r3, [sp, #8]
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	4652      	mov	r2, sl
 8000cba:	2a1f      	cmp	r2, #31
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dsub+0x98>
 8000cbe:	e1e3      	b.n	8001088 <__aeabi_dsub+0x460>
 8000cc0:	4653      	mov	r3, sl
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	4661      	mov	r1, ip
 8000cc6:	9d02      	ldr	r5, [sp, #8]
 8000cc8:	1ad2      	subs	r2, r2, r3
 8000cca:	4095      	lsls	r5, r2
 8000ccc:	40d9      	lsrs	r1, r3
 8000cce:	430d      	orrs	r5, r1
 8000cd0:	4661      	mov	r1, ip
 8000cd2:	4091      	lsls	r1, r2
 8000cd4:	000a      	movs	r2, r1
 8000cd6:	1e51      	subs	r1, r2, #1
 8000cd8:	418a      	sbcs	r2, r1
 8000cda:	4315      	orrs	r5, r2
 8000cdc:	9a02      	ldr	r2, [sp, #8]
 8000cde:	40da      	lsrs	r2, r3
 8000ce0:	1aa4      	subs	r4, r4, r2
 8000ce2:	1b45      	subs	r5, r0, r5
 8000ce4:	42a8      	cmp	r0, r5
 8000ce6:	4180      	sbcs	r0, r0
 8000ce8:	4240      	negs	r0, r0
 8000cea:	1a24      	subs	r4, r4, r0
 8000cec:	0223      	lsls	r3, r4, #8
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_dsub+0xca>
 8000cf0:	e13d      	b.n	8000f6e <__aeabi_dsub+0x346>
 8000cf2:	0264      	lsls	r4, r4, #9
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	2c00      	cmp	r4, #0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dsub+0xd4>
 8000cfa:	e147      	b.n	8000f8c <__aeabi_dsub+0x364>
 8000cfc:	0020      	movs	r0, r4
 8000cfe:	f000 fbe3 	bl	80014c8 <__clzsi2>
 8000d02:	0003      	movs	r3, r0
 8000d04:	3b08      	subs	r3, #8
 8000d06:	2120      	movs	r1, #32
 8000d08:	0028      	movs	r0, r5
 8000d0a:	1aca      	subs	r2, r1, r3
 8000d0c:	40d0      	lsrs	r0, r2
 8000d0e:	409c      	lsls	r4, r3
 8000d10:	0002      	movs	r2, r0
 8000d12:	409d      	lsls	r5, r3
 8000d14:	4322      	orrs	r2, r4
 8000d16:	429f      	cmp	r7, r3
 8000d18:	dd00      	ble.n	8000d1c <__aeabi_dsub+0xf4>
 8000d1a:	e177      	b.n	800100c <__aeabi_dsub+0x3e4>
 8000d1c:	1bd8      	subs	r0, r3, r7
 8000d1e:	3001      	adds	r0, #1
 8000d20:	1a09      	subs	r1, r1, r0
 8000d22:	002c      	movs	r4, r5
 8000d24:	408d      	lsls	r5, r1
 8000d26:	40c4      	lsrs	r4, r0
 8000d28:	1e6b      	subs	r3, r5, #1
 8000d2a:	419d      	sbcs	r5, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	40c2      	lsrs	r2, r0
 8000d30:	408b      	lsls	r3, r1
 8000d32:	4325      	orrs	r5, r4
 8000d34:	2700      	movs	r7, #0
 8000d36:	0014      	movs	r4, r2
 8000d38:	431d      	orrs	r5, r3
 8000d3a:	076b      	lsls	r3, r5, #29
 8000d3c:	d009      	beq.n	8000d52 <__aeabi_dsub+0x12a>
 8000d3e:	230f      	movs	r3, #15
 8000d40:	402b      	ands	r3, r5
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d005      	beq.n	8000d52 <__aeabi_dsub+0x12a>
 8000d46:	1d2b      	adds	r3, r5, #4
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	41ad      	sbcs	r5, r5
 8000d4c:	426d      	negs	r5, r5
 8000d4e:	1964      	adds	r4, r4, r5
 8000d50:	001d      	movs	r5, r3
 8000d52:	0223      	lsls	r3, r4, #8
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_dsub+0x130>
 8000d56:	e140      	b.n	8000fda <__aeabi_dsub+0x3b2>
 8000d58:	4a88      	ldr	r2, [pc, #544]	@ (8000f7c <__aeabi_dsub+0x354>)
 8000d5a:	3701      	adds	r7, #1
 8000d5c:	4297      	cmp	r7, r2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dsub+0x13a>
 8000d60:	e101      	b.n	8000f66 <__aeabi_dsub+0x33e>
 8000d62:	2601      	movs	r6, #1
 8000d64:	4643      	mov	r3, r8
 8000d66:	4986      	ldr	r1, [pc, #536]	@ (8000f80 <__aeabi_dsub+0x358>)
 8000d68:	08ed      	lsrs	r5, r5, #3
 8000d6a:	4021      	ands	r1, r4
 8000d6c:	074a      	lsls	r2, r1, #29
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	057c      	lsls	r4, r7, #21
 8000d72:	024d      	lsls	r5, r1, #9
 8000d74:	0b2d      	lsrs	r5, r5, #12
 8000d76:	0d64      	lsrs	r4, r4, #21
 8000d78:	401e      	ands	r6, r3
 8000d7a:	0524      	lsls	r4, r4, #20
 8000d7c:	432c      	orrs	r4, r5
 8000d7e:	07f6      	lsls	r6, r6, #31
 8000d80:	4334      	orrs	r4, r6
 8000d82:	0010      	movs	r0, r2
 8000d84:	0021      	movs	r1, r4
 8000d86:	b005      	add	sp, #20
 8000d88:	bcf0      	pop	{r4, r5, r6, r7}
 8000d8a:	46bb      	mov	fp, r7
 8000d8c:	46b2      	mov	sl, r6
 8000d8e:	46a9      	mov	r9, r5
 8000d90:	46a0      	mov	r8, r4
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_dsub+0x172>
 8000d98:	e2d0      	b.n	800133c <__aeabi_dsub+0x714>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dsub+0x17a>
 8000da0:	e0d4      	b.n	8000f4c <__aeabi_dsub+0x324>
 8000da2:	4661      	mov	r1, ip
 8000da4:	9b02      	ldr	r3, [sp, #8]
 8000da6:	4319      	orrs	r1, r3
 8000da8:	d100      	bne.n	8000dac <__aeabi_dsub+0x184>
 8000daa:	e12b      	b.n	8001004 <__aeabi_dsub+0x3dc>
 8000dac:	1e69      	subs	r1, r5, #1
 8000dae:	2d01      	cmp	r5, #1
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dsub+0x18c>
 8000db2:	e1d9      	b.n	8001168 <__aeabi_dsub+0x540>
 8000db4:	4295      	cmp	r5, r2
 8000db6:	d100      	bne.n	8000dba <__aeabi_dsub+0x192>
 8000db8:	e10a      	b.n	8000fd0 <__aeabi_dsub+0x3a8>
 8000dba:	2501      	movs	r5, #1
 8000dbc:	2938      	cmp	r1, #56	@ 0x38
 8000dbe:	dc17      	bgt.n	8000df0 <__aeabi_dsub+0x1c8>
 8000dc0:	468a      	mov	sl, r1
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	2b1f      	cmp	r3, #31
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_dsub+0x1a2>
 8000dc8:	e1e7      	b.n	800119a <__aeabi_dsub+0x572>
 8000dca:	2220      	movs	r2, #32
 8000dcc:	1ad2      	subs	r2, r2, r3
 8000dce:	9b02      	ldr	r3, [sp, #8]
 8000dd0:	4661      	mov	r1, ip
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	001d      	movs	r5, r3
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	40d9      	lsrs	r1, r3
 8000dda:	4663      	mov	r3, ip
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	001a      	movs	r2, r3
 8000de0:	430d      	orrs	r5, r1
 8000de2:	1e51      	subs	r1, r2, #1
 8000de4:	418a      	sbcs	r2, r1
 8000de6:	4653      	mov	r3, sl
 8000de8:	4315      	orrs	r5, r2
 8000dea:	9a02      	ldr	r2, [sp, #8]
 8000dec:	40da      	lsrs	r2, r3
 8000dee:	18a4      	adds	r4, r4, r2
 8000df0:	182d      	adds	r5, r5, r0
 8000df2:	4285      	cmp	r5, r0
 8000df4:	4180      	sbcs	r0, r0
 8000df6:	4240      	negs	r0, r0
 8000df8:	1824      	adds	r4, r4, r0
 8000dfa:	0223      	lsls	r3, r4, #8
 8000dfc:	d400      	bmi.n	8000e00 <__aeabi_dsub+0x1d8>
 8000dfe:	e0b6      	b.n	8000f6e <__aeabi_dsub+0x346>
 8000e00:	4b5e      	ldr	r3, [pc, #376]	@ (8000f7c <__aeabi_dsub+0x354>)
 8000e02:	3701      	adds	r7, #1
 8000e04:	429f      	cmp	r7, r3
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dsub+0x1e2>
 8000e08:	e0ad      	b.n	8000f66 <__aeabi_dsub+0x33e>
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f80 <__aeabi_dsub+0x358>)
 8000e0e:	086a      	lsrs	r2, r5, #1
 8000e10:	401c      	ands	r4, r3
 8000e12:	4029      	ands	r1, r5
 8000e14:	430a      	orrs	r2, r1
 8000e16:	07e5      	lsls	r5, r4, #31
 8000e18:	4315      	orrs	r5, r2
 8000e1a:	0864      	lsrs	r4, r4, #1
 8000e1c:	e78d      	b.n	8000d3a <__aeabi_dsub+0x112>
 8000e1e:	4a59      	ldr	r2, [pc, #356]	@ (8000f84 <__aeabi_dsub+0x35c>)
 8000e20:	9b02      	ldr	r3, [sp, #8]
 8000e22:	4692      	mov	sl, r2
 8000e24:	4662      	mov	r2, ip
 8000e26:	44ba      	add	sl, r7
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	d02c      	beq.n	8000e86 <__aeabi_dsub+0x25e>
 8000e2c:	428e      	cmp	r6, r1
 8000e2e:	d02e      	beq.n	8000e8e <__aeabi_dsub+0x266>
 8000e30:	4652      	mov	r2, sl
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d060      	beq.n	8000ef8 <__aeabi_dsub+0x2d0>
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dsub+0x214>
 8000e3a:	e0db      	b.n	8000ff4 <__aeabi_dsub+0x3cc>
 8000e3c:	4663      	mov	r3, ip
 8000e3e:	000e      	movs	r6, r1
 8000e40:	9c02      	ldr	r4, [sp, #8]
 8000e42:	08d8      	lsrs	r0, r3, #3
 8000e44:	0762      	lsls	r2, r4, #29
 8000e46:	4302      	orrs	r2, r0
 8000e48:	08e4      	lsrs	r4, r4, #3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dsub+0x22a>
 8000e50:	e254      	b.n	80012fc <__aeabi_dsub+0x6d4>
 8000e52:	2580      	movs	r5, #128	@ 0x80
 8000e54:	032d      	lsls	r5, r5, #12
 8000e56:	4325      	orrs	r5, r4
 8000e58:	032d      	lsls	r5, r5, #12
 8000e5a:	4c48      	ldr	r4, [pc, #288]	@ (8000f7c <__aeabi_dsub+0x354>)
 8000e5c:	0b2d      	lsrs	r5, r5, #12
 8000e5e:	e78c      	b.n	8000d7a <__aeabi_dsub+0x152>
 8000e60:	4661      	mov	r1, ip
 8000e62:	9b02      	ldr	r3, [sp, #8]
 8000e64:	4319      	orrs	r1, r3
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dsub+0x242>
 8000e68:	e0cc      	b.n	8001004 <__aeabi_dsub+0x3dc>
 8000e6a:	0029      	movs	r1, r5
 8000e6c:	3901      	subs	r1, #1
 8000e6e:	2d01      	cmp	r5, #1
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dsub+0x24c>
 8000e72:	e188      	b.n	8001186 <__aeabi_dsub+0x55e>
 8000e74:	4295      	cmp	r5, r2
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x252>
 8000e78:	e0aa      	b.n	8000fd0 <__aeabi_dsub+0x3a8>
 8000e7a:	2501      	movs	r5, #1
 8000e7c:	2938      	cmp	r1, #56	@ 0x38
 8000e7e:	dd00      	ble.n	8000e82 <__aeabi_dsub+0x25a>
 8000e80:	e72f      	b.n	8000ce2 <__aeabi_dsub+0xba>
 8000e82:	468a      	mov	sl, r1
 8000e84:	e718      	b.n	8000cb8 <__aeabi_dsub+0x90>
 8000e86:	2201      	movs	r2, #1
 8000e88:	4051      	eors	r1, r2
 8000e8a:	428e      	cmp	r6, r1
 8000e8c:	d1d0      	bne.n	8000e30 <__aeabi_dsub+0x208>
 8000e8e:	4653      	mov	r3, sl
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dsub+0x26e>
 8000e94:	e0be      	b.n	8001014 <__aeabi_dsub+0x3ec>
 8000e96:	2f00      	cmp	r7, #0
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dsub+0x274>
 8000e9a:	e138      	b.n	800110e <__aeabi_dsub+0x4e6>
 8000e9c:	46ca      	mov	sl, r9
 8000e9e:	0022      	movs	r2, r4
 8000ea0:	4302      	orrs	r2, r0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dsub+0x27e>
 8000ea4:	e1e2      	b.n	800126c <__aeabi_dsub+0x644>
 8000ea6:	4653      	mov	r3, sl
 8000ea8:	1e59      	subs	r1, r3, #1
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dsub+0x288>
 8000eae:	e20d      	b.n	80012cc <__aeabi_dsub+0x6a4>
 8000eb0:	4a32      	ldr	r2, [pc, #200]	@ (8000f7c <__aeabi_dsub+0x354>)
 8000eb2:	4592      	cmp	sl, r2
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dsub+0x290>
 8000eb6:	e1d2      	b.n	800125e <__aeabi_dsub+0x636>
 8000eb8:	2701      	movs	r7, #1
 8000eba:	2938      	cmp	r1, #56	@ 0x38
 8000ebc:	dc13      	bgt.n	8000ee6 <__aeabi_dsub+0x2be>
 8000ebe:	291f      	cmp	r1, #31
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dsub+0x29c>
 8000ec2:	e1ee      	b.n	80012a2 <__aeabi_dsub+0x67a>
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	9b02      	ldr	r3, [sp, #8]
 8000ec8:	1a52      	subs	r2, r2, r1
 8000eca:	0025      	movs	r5, r4
 8000ecc:	0007      	movs	r7, r0
 8000ece:	469a      	mov	sl, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	4090      	lsls	r0, r2
 8000ed4:	4095      	lsls	r5, r2
 8000ed6:	40cf      	lsrs	r7, r1
 8000ed8:	44a2      	add	sl, r4
 8000eda:	1e42      	subs	r2, r0, #1
 8000edc:	4190      	sbcs	r0, r2
 8000ede:	4653      	mov	r3, sl
 8000ee0:	432f      	orrs	r7, r5
 8000ee2:	4307      	orrs	r7, r0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	003d      	movs	r5, r7
 8000ee8:	4465      	add	r5, ip
 8000eea:	4565      	cmp	r5, ip
 8000eec:	4192      	sbcs	r2, r2
 8000eee:	9b02      	ldr	r3, [sp, #8]
 8000ef0:	4252      	negs	r2, r2
 8000ef2:	464f      	mov	r7, r9
 8000ef4:	18d4      	adds	r4, r2, r3
 8000ef6:	e780      	b.n	8000dfa <__aeabi_dsub+0x1d2>
 8000ef8:	4a23      	ldr	r2, [pc, #140]	@ (8000f88 <__aeabi_dsub+0x360>)
 8000efa:	1c7d      	adds	r5, r7, #1
 8000efc:	4215      	tst	r5, r2
 8000efe:	d000      	beq.n	8000f02 <__aeabi_dsub+0x2da>
 8000f00:	e0aa      	b.n	8001058 <__aeabi_dsub+0x430>
 8000f02:	4662      	mov	r2, ip
 8000f04:	0025      	movs	r5, r4
 8000f06:	9b02      	ldr	r3, [sp, #8]
 8000f08:	4305      	orrs	r5, r0
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	2f00      	cmp	r7, #0
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dsub+0x2ea>
 8000f10:	e0f5      	b.n	80010fe <__aeabi_dsub+0x4d6>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dsub+0x2f0>
 8000f16:	e16b      	b.n	80011f0 <__aeabi_dsub+0x5c8>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dsub+0x2f6>
 8000f1c:	e152      	b.n	80011c4 <__aeabi_dsub+0x59c>
 8000f1e:	4663      	mov	r3, ip
 8000f20:	1ac5      	subs	r5, r0, r3
 8000f22:	9b02      	ldr	r3, [sp, #8]
 8000f24:	1ae2      	subs	r2, r4, r3
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	419b      	sbcs	r3, r3
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	021a      	lsls	r2, r3, #8
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_dsub+0x30c>
 8000f32:	e1d5      	b.n	80012e0 <__aeabi_dsub+0x6b8>
 8000f34:	4663      	mov	r3, ip
 8000f36:	1a1d      	subs	r5, r3, r0
 8000f38:	45ac      	cmp	ip, r5
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	2601      	movs	r6, #1
 8000f3e:	9b02      	ldr	r3, [sp, #8]
 8000f40:	4252      	negs	r2, r2
 8000f42:	1b1c      	subs	r4, r3, r4
 8000f44:	4688      	mov	r8, r1
 8000f46:	1aa4      	subs	r4, r4, r2
 8000f48:	400e      	ands	r6, r1
 8000f4a:	e6f6      	b.n	8000d3a <__aeabi_dsub+0x112>
 8000f4c:	4297      	cmp	r7, r2
 8000f4e:	d03f      	beq.n	8000fd0 <__aeabi_dsub+0x3a8>
 8000f50:	4652      	mov	r2, sl
 8000f52:	2501      	movs	r5, #1
 8000f54:	2a38      	cmp	r2, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_dsub+0x332>
 8000f58:	e74a      	b.n	8000df0 <__aeabi_dsub+0x1c8>
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	9b02      	ldr	r3, [sp, #8]
 8000f5e:	0412      	lsls	r2, r2, #16
 8000f60:	4313      	orrs	r3, r2
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	e72d      	b.n	8000dc2 <__aeabi_dsub+0x19a>
 8000f66:	003c      	movs	r4, r7
 8000f68:	2500      	movs	r5, #0
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	e705      	b.n	8000d7a <__aeabi_dsub+0x152>
 8000f6e:	2307      	movs	r3, #7
 8000f70:	402b      	ands	r3, r5
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_dsub+0x350>
 8000f76:	e6e2      	b.n	8000d3e <__aeabi_dsub+0x116>
 8000f78:	e06b      	b.n	8001052 <__aeabi_dsub+0x42a>
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	000007ff 	.word	0x000007ff
 8000f80:	ff7fffff 	.word	0xff7fffff
 8000f84:	fffff801 	.word	0xfffff801
 8000f88:	000007fe 	.word	0x000007fe
 8000f8c:	0028      	movs	r0, r5
 8000f8e:	f000 fa9b 	bl	80014c8 <__clzsi2>
 8000f92:	0003      	movs	r3, r0
 8000f94:	3318      	adds	r3, #24
 8000f96:	2b1f      	cmp	r3, #31
 8000f98:	dc00      	bgt.n	8000f9c <__aeabi_dsub+0x374>
 8000f9a:	e6b4      	b.n	8000d06 <__aeabi_dsub+0xde>
 8000f9c:	002a      	movs	r2, r5
 8000f9e:	3808      	subs	r0, #8
 8000fa0:	4082      	lsls	r2, r0
 8000fa2:	429f      	cmp	r7, r3
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_dsub+0x380>
 8000fa6:	e0b9      	b.n	800111c <__aeabi_dsub+0x4f4>
 8000fa8:	1bdb      	subs	r3, r3, r7
 8000faa:	1c58      	adds	r0, r3, #1
 8000fac:	281f      	cmp	r0, #31
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_dsub+0x38a>
 8000fb0:	e1a0      	b.n	80012f4 <__aeabi_dsub+0x6cc>
 8000fb2:	0015      	movs	r5, r2
 8000fb4:	3b1f      	subs	r3, #31
 8000fb6:	40dd      	lsrs	r5, r3
 8000fb8:	2820      	cmp	r0, #32
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_dsub+0x3a0>
 8000fbc:	2340      	movs	r3, #64	@ 0x40
 8000fbe:	1a1b      	subs	r3, r3, r0
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	1e53      	subs	r3, r2, #1
 8000fc4:	419a      	sbcs	r2, r3
 8000fc6:	4315      	orrs	r5, r2
 8000fc8:	2307      	movs	r3, #7
 8000fca:	2700      	movs	r7, #0
 8000fcc:	402b      	ands	r3, r5
 8000fce:	e7d0      	b.n	8000f72 <__aeabi_dsub+0x34a>
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	0762      	lsls	r2, r4, #29
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	08e4      	lsrs	r4, r4, #3
 8000fd8:	e737      	b.n	8000e4a <__aeabi_dsub+0x222>
 8000fda:	08ea      	lsrs	r2, r5, #3
 8000fdc:	0763      	lsls	r3, r4, #29
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	4bd3      	ldr	r3, [pc, #844]	@ (8001330 <__aeabi_dsub+0x708>)
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	429f      	cmp	r7, r3
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dsub+0x3c2>
 8000fe8:	e72f      	b.n	8000e4a <__aeabi_dsub+0x222>
 8000fea:	0324      	lsls	r4, r4, #12
 8000fec:	0b25      	lsrs	r5, r4, #12
 8000fee:	057c      	lsls	r4, r7, #21
 8000ff0:	0d64      	lsrs	r4, r4, #21
 8000ff2:	e6c2      	b.n	8000d7a <__aeabi_dsub+0x152>
 8000ff4:	46ca      	mov	sl, r9
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	4302      	orrs	r2, r0
 8000ffa:	d158      	bne.n	80010ae <__aeabi_dsub+0x486>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	000e      	movs	r6, r1
 8001000:	9c02      	ldr	r4, [sp, #8]
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	9b03      	ldr	r3, [sp, #12]
 8001006:	4657      	mov	r7, sl
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	e7e7      	b.n	8000fdc <__aeabi_dsub+0x3b4>
 800100c:	4cc9      	ldr	r4, [pc, #804]	@ (8001334 <__aeabi_dsub+0x70c>)
 800100e:	1aff      	subs	r7, r7, r3
 8001010:	4014      	ands	r4, r2
 8001012:	e692      	b.n	8000d3a <__aeabi_dsub+0x112>
 8001014:	4dc8      	ldr	r5, [pc, #800]	@ (8001338 <__aeabi_dsub+0x710>)
 8001016:	1c7a      	adds	r2, r7, #1
 8001018:	422a      	tst	r2, r5
 800101a:	d000      	beq.n	800101e <__aeabi_dsub+0x3f6>
 800101c:	e084      	b.n	8001128 <__aeabi_dsub+0x500>
 800101e:	0022      	movs	r2, r4
 8001020:	4302      	orrs	r2, r0
 8001022:	2f00      	cmp	r7, #0
 8001024:	d000      	beq.n	8001028 <__aeabi_dsub+0x400>
 8001026:	e0ef      	b.n	8001208 <__aeabi_dsub+0x5e0>
 8001028:	2a00      	cmp	r2, #0
 800102a:	d100      	bne.n	800102e <__aeabi_dsub+0x406>
 800102c:	e0e5      	b.n	80011fa <__aeabi_dsub+0x5d2>
 800102e:	4662      	mov	r2, ip
 8001030:	9902      	ldr	r1, [sp, #8]
 8001032:	430a      	orrs	r2, r1
 8001034:	d100      	bne.n	8001038 <__aeabi_dsub+0x410>
 8001036:	e0c5      	b.n	80011c4 <__aeabi_dsub+0x59c>
 8001038:	4663      	mov	r3, ip
 800103a:	18c5      	adds	r5, r0, r3
 800103c:	468c      	mov	ip, r1
 800103e:	4285      	cmp	r5, r0
 8001040:	4180      	sbcs	r0, r0
 8001042:	4464      	add	r4, ip
 8001044:	4240      	negs	r0, r0
 8001046:	1824      	adds	r4, r4, r0
 8001048:	0223      	lsls	r3, r4, #8
 800104a:	d502      	bpl.n	8001052 <__aeabi_dsub+0x42a>
 800104c:	4bb9      	ldr	r3, [pc, #740]	@ (8001334 <__aeabi_dsub+0x70c>)
 800104e:	3701      	adds	r7, #1
 8001050:	401c      	ands	r4, r3
 8001052:	46ba      	mov	sl, r7
 8001054:	9503      	str	r5, [sp, #12]
 8001056:	e7d5      	b.n	8001004 <__aeabi_dsub+0x3dc>
 8001058:	4662      	mov	r2, ip
 800105a:	1a85      	subs	r5, r0, r2
 800105c:	42a8      	cmp	r0, r5
 800105e:	4192      	sbcs	r2, r2
 8001060:	4252      	negs	r2, r2
 8001062:	4691      	mov	r9, r2
 8001064:	9b02      	ldr	r3, [sp, #8]
 8001066:	1ae3      	subs	r3, r4, r3
 8001068:	001a      	movs	r2, r3
 800106a:	464b      	mov	r3, r9
 800106c:	1ad2      	subs	r2, r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	4691      	mov	r9, r2
 8001072:	021a      	lsls	r2, r3, #8
 8001074:	d46c      	bmi.n	8001150 <__aeabi_dsub+0x528>
 8001076:	464a      	mov	r2, r9
 8001078:	464c      	mov	r4, r9
 800107a:	432a      	orrs	r2, r5
 800107c:	d000      	beq.n	8001080 <__aeabi_dsub+0x458>
 800107e:	e63a      	b.n	8000cf6 <__aeabi_dsub+0xce>
 8001080:	2600      	movs	r6, #0
 8001082:	2400      	movs	r4, #0
 8001084:	2500      	movs	r5, #0
 8001086:	e678      	b.n	8000d7a <__aeabi_dsub+0x152>
 8001088:	9902      	ldr	r1, [sp, #8]
 800108a:	4653      	mov	r3, sl
 800108c:	000d      	movs	r5, r1
 800108e:	3a20      	subs	r2, #32
 8001090:	40d5      	lsrs	r5, r2
 8001092:	2b20      	cmp	r3, #32
 8001094:	d006      	beq.n	80010a4 <__aeabi_dsub+0x47c>
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	000b      	movs	r3, r1
 800109c:	4093      	lsls	r3, r2
 800109e:	4662      	mov	r2, ip
 80010a0:	431a      	orrs	r2, r3
 80010a2:	4693      	mov	fp, r2
 80010a4:	465b      	mov	r3, fp
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	4193      	sbcs	r3, r2
 80010aa:	431d      	orrs	r5, r3
 80010ac:	e619      	b.n	8000ce2 <__aeabi_dsub+0xba>
 80010ae:	4653      	mov	r3, sl
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x490>
 80010b6:	e0c6      	b.n	8001246 <__aeabi_dsub+0x61e>
 80010b8:	4e9d      	ldr	r6, [pc, #628]	@ (8001330 <__aeabi_dsub+0x708>)
 80010ba:	45b2      	cmp	sl, r6
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x498>
 80010be:	e6bd      	b.n	8000e3c <__aeabi_dsub+0x214>
 80010c0:	4688      	mov	r8, r1
 80010c2:	000e      	movs	r6, r1
 80010c4:	2501      	movs	r5, #1
 80010c6:	2a38      	cmp	r2, #56	@ 0x38
 80010c8:	dc10      	bgt.n	80010ec <__aeabi_dsub+0x4c4>
 80010ca:	2a1f      	cmp	r2, #31
 80010cc:	dc7f      	bgt.n	80011ce <__aeabi_dsub+0x5a6>
 80010ce:	2120      	movs	r1, #32
 80010d0:	0025      	movs	r5, r4
 80010d2:	1a89      	subs	r1, r1, r2
 80010d4:	0007      	movs	r7, r0
 80010d6:	4088      	lsls	r0, r1
 80010d8:	408d      	lsls	r5, r1
 80010da:	40d7      	lsrs	r7, r2
 80010dc:	40d4      	lsrs	r4, r2
 80010de:	1e41      	subs	r1, r0, #1
 80010e0:	4188      	sbcs	r0, r1
 80010e2:	9b02      	ldr	r3, [sp, #8]
 80010e4:	433d      	orrs	r5, r7
 80010e6:	1b1b      	subs	r3, r3, r4
 80010e8:	4305      	orrs	r5, r0
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	4662      	mov	r2, ip
 80010ee:	1b55      	subs	r5, r2, r5
 80010f0:	45ac      	cmp	ip, r5
 80010f2:	4192      	sbcs	r2, r2
 80010f4:	9b02      	ldr	r3, [sp, #8]
 80010f6:	4252      	negs	r2, r2
 80010f8:	464f      	mov	r7, r9
 80010fa:	1a9c      	subs	r4, r3, r2
 80010fc:	e5f6      	b.n	8000cec <__aeabi_dsub+0xc4>
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d000      	beq.n	8001104 <__aeabi_dsub+0x4dc>
 8001102:	e0b7      	b.n	8001274 <__aeabi_dsub+0x64c>
 8001104:	2a00      	cmp	r2, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x4e2>
 8001108:	e0f0      	b.n	80012ec <__aeabi_dsub+0x6c4>
 800110a:	2601      	movs	r6, #1
 800110c:	400e      	ands	r6, r1
 800110e:	4663      	mov	r3, ip
 8001110:	9802      	ldr	r0, [sp, #8]
 8001112:	08d9      	lsrs	r1, r3, #3
 8001114:	0742      	lsls	r2, r0, #29
 8001116:	430a      	orrs	r2, r1
 8001118:	08c4      	lsrs	r4, r0, #3
 800111a:	e696      	b.n	8000e4a <__aeabi_dsub+0x222>
 800111c:	4c85      	ldr	r4, [pc, #532]	@ (8001334 <__aeabi_dsub+0x70c>)
 800111e:	1aff      	subs	r7, r7, r3
 8001120:	4014      	ands	r4, r2
 8001122:	0762      	lsls	r2, r4, #29
 8001124:	08e4      	lsrs	r4, r4, #3
 8001126:	e760      	b.n	8000fea <__aeabi_dsub+0x3c2>
 8001128:	4981      	ldr	r1, [pc, #516]	@ (8001330 <__aeabi_dsub+0x708>)
 800112a:	428a      	cmp	r2, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_dsub+0x508>
 800112e:	e0c9      	b.n	80012c4 <__aeabi_dsub+0x69c>
 8001130:	4663      	mov	r3, ip
 8001132:	18c1      	adds	r1, r0, r3
 8001134:	4281      	cmp	r1, r0
 8001136:	4180      	sbcs	r0, r0
 8001138:	9b02      	ldr	r3, [sp, #8]
 800113a:	4240      	negs	r0, r0
 800113c:	18e3      	adds	r3, r4, r3
 800113e:	181b      	adds	r3, r3, r0
 8001140:	07dd      	lsls	r5, r3, #31
 8001142:	085c      	lsrs	r4, r3, #1
 8001144:	2307      	movs	r3, #7
 8001146:	0849      	lsrs	r1, r1, #1
 8001148:	430d      	orrs	r5, r1
 800114a:	0017      	movs	r7, r2
 800114c:	402b      	ands	r3, r5
 800114e:	e710      	b.n	8000f72 <__aeabi_dsub+0x34a>
 8001150:	4663      	mov	r3, ip
 8001152:	1a1d      	subs	r5, r3, r0
 8001154:	45ac      	cmp	ip, r5
 8001156:	4192      	sbcs	r2, r2
 8001158:	2601      	movs	r6, #1
 800115a:	9b02      	ldr	r3, [sp, #8]
 800115c:	4252      	negs	r2, r2
 800115e:	1b1c      	subs	r4, r3, r4
 8001160:	4688      	mov	r8, r1
 8001162:	1aa4      	subs	r4, r4, r2
 8001164:	400e      	ands	r6, r1
 8001166:	e5c6      	b.n	8000cf6 <__aeabi_dsub+0xce>
 8001168:	4663      	mov	r3, ip
 800116a:	18c5      	adds	r5, r0, r3
 800116c:	9b02      	ldr	r3, [sp, #8]
 800116e:	4285      	cmp	r5, r0
 8001170:	4180      	sbcs	r0, r0
 8001172:	469c      	mov	ip, r3
 8001174:	4240      	negs	r0, r0
 8001176:	4464      	add	r4, ip
 8001178:	1824      	adds	r4, r4, r0
 800117a:	2701      	movs	r7, #1
 800117c:	0223      	lsls	r3, r4, #8
 800117e:	d400      	bmi.n	8001182 <__aeabi_dsub+0x55a>
 8001180:	e6f5      	b.n	8000f6e <__aeabi_dsub+0x346>
 8001182:	2702      	movs	r7, #2
 8001184:	e641      	b.n	8000e0a <__aeabi_dsub+0x1e2>
 8001186:	4663      	mov	r3, ip
 8001188:	1ac5      	subs	r5, r0, r3
 800118a:	42a8      	cmp	r0, r5
 800118c:	4180      	sbcs	r0, r0
 800118e:	9b02      	ldr	r3, [sp, #8]
 8001190:	4240      	negs	r0, r0
 8001192:	1ae4      	subs	r4, r4, r3
 8001194:	2701      	movs	r7, #1
 8001196:	1a24      	subs	r4, r4, r0
 8001198:	e5a8      	b.n	8000cec <__aeabi_dsub+0xc4>
 800119a:	9d02      	ldr	r5, [sp, #8]
 800119c:	4652      	mov	r2, sl
 800119e:	002b      	movs	r3, r5
 80011a0:	3a20      	subs	r2, #32
 80011a2:	40d3      	lsrs	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	4653      	mov	r3, sl
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d006      	beq.n	80011ba <__aeabi_dsub+0x592>
 80011ac:	2240      	movs	r2, #64	@ 0x40
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	002b      	movs	r3, r5
 80011b2:	4093      	lsls	r3, r2
 80011b4:	4662      	mov	r2, ip
 80011b6:	431a      	orrs	r2, r3
 80011b8:	4693      	mov	fp, r2
 80011ba:	465d      	mov	r5, fp
 80011bc:	1e6b      	subs	r3, r5, #1
 80011be:	419d      	sbcs	r5, r3
 80011c0:	430d      	orrs	r5, r1
 80011c2:	e615      	b.n	8000df0 <__aeabi_dsub+0x1c8>
 80011c4:	0762      	lsls	r2, r4, #29
 80011c6:	08c0      	lsrs	r0, r0, #3
 80011c8:	4302      	orrs	r2, r0
 80011ca:	08e4      	lsrs	r4, r4, #3
 80011cc:	e70d      	b.n	8000fea <__aeabi_dsub+0x3c2>
 80011ce:	0011      	movs	r1, r2
 80011d0:	0027      	movs	r7, r4
 80011d2:	3920      	subs	r1, #32
 80011d4:	40cf      	lsrs	r7, r1
 80011d6:	2a20      	cmp	r2, #32
 80011d8:	d005      	beq.n	80011e6 <__aeabi_dsub+0x5be>
 80011da:	2140      	movs	r1, #64	@ 0x40
 80011dc:	1a8a      	subs	r2, r1, r2
 80011de:	4094      	lsls	r4, r2
 80011e0:	0025      	movs	r5, r4
 80011e2:	4305      	orrs	r5, r0
 80011e4:	9503      	str	r5, [sp, #12]
 80011e6:	9d03      	ldr	r5, [sp, #12]
 80011e8:	1e6a      	subs	r2, r5, #1
 80011ea:	4195      	sbcs	r5, r2
 80011ec:	433d      	orrs	r5, r7
 80011ee:	e77d      	b.n	80010ec <__aeabi_dsub+0x4c4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dsub+0x5ce>
 80011f4:	e744      	b.n	8001080 <__aeabi_dsub+0x458>
 80011f6:	2601      	movs	r6, #1
 80011f8:	400e      	ands	r6, r1
 80011fa:	4663      	mov	r3, ip
 80011fc:	08d9      	lsrs	r1, r3, #3
 80011fe:	9b02      	ldr	r3, [sp, #8]
 8001200:	075a      	lsls	r2, r3, #29
 8001202:	430a      	orrs	r2, r1
 8001204:	08dc      	lsrs	r4, r3, #3
 8001206:	e6f0      	b.n	8000fea <__aeabi_dsub+0x3c2>
 8001208:	2a00      	cmp	r2, #0
 800120a:	d028      	beq.n	800125e <__aeabi_dsub+0x636>
 800120c:	4662      	mov	r2, ip
 800120e:	9f02      	ldr	r7, [sp, #8]
 8001210:	08c0      	lsrs	r0, r0, #3
 8001212:	433a      	orrs	r2, r7
 8001214:	d100      	bne.n	8001218 <__aeabi_dsub+0x5f0>
 8001216:	e6dc      	b.n	8000fd2 <__aeabi_dsub+0x3aa>
 8001218:	0762      	lsls	r2, r4, #29
 800121a:	4310      	orrs	r0, r2
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	08e4      	lsrs	r4, r4, #3
 8001220:	0312      	lsls	r2, r2, #12
 8001222:	4214      	tst	r4, r2
 8001224:	d009      	beq.n	800123a <__aeabi_dsub+0x612>
 8001226:	08fd      	lsrs	r5, r7, #3
 8001228:	4215      	tst	r5, r2
 800122a:	d106      	bne.n	800123a <__aeabi_dsub+0x612>
 800122c:	4663      	mov	r3, ip
 800122e:	2601      	movs	r6, #1
 8001230:	002c      	movs	r4, r5
 8001232:	08d8      	lsrs	r0, r3, #3
 8001234:	077b      	lsls	r3, r7, #29
 8001236:	4318      	orrs	r0, r3
 8001238:	400e      	ands	r6, r1
 800123a:	0f42      	lsrs	r2, r0, #29
 800123c:	00c0      	lsls	r0, r0, #3
 800123e:	08c0      	lsrs	r0, r0, #3
 8001240:	0752      	lsls	r2, r2, #29
 8001242:	4302      	orrs	r2, r0
 8001244:	e601      	b.n	8000e4a <__aeabi_dsub+0x222>
 8001246:	4663      	mov	r3, ip
 8001248:	1a1d      	subs	r5, r3, r0
 800124a:	45ac      	cmp	ip, r5
 800124c:	4192      	sbcs	r2, r2
 800124e:	9b02      	ldr	r3, [sp, #8]
 8001250:	4252      	negs	r2, r2
 8001252:	1b1c      	subs	r4, r3, r4
 8001254:	000e      	movs	r6, r1
 8001256:	4688      	mov	r8, r1
 8001258:	2701      	movs	r7, #1
 800125a:	1aa4      	subs	r4, r4, r2
 800125c:	e546      	b.n	8000cec <__aeabi_dsub+0xc4>
 800125e:	4663      	mov	r3, ip
 8001260:	08d9      	lsrs	r1, r3, #3
 8001262:	9b02      	ldr	r3, [sp, #8]
 8001264:	075a      	lsls	r2, r3, #29
 8001266:	430a      	orrs	r2, r1
 8001268:	08dc      	lsrs	r4, r3, #3
 800126a:	e5ee      	b.n	8000e4a <__aeabi_dsub+0x222>
 800126c:	4663      	mov	r3, ip
 800126e:	9c02      	ldr	r4, [sp, #8]
 8001270:	9303      	str	r3, [sp, #12]
 8001272:	e6c7      	b.n	8001004 <__aeabi_dsub+0x3dc>
 8001274:	08c0      	lsrs	r0, r0, #3
 8001276:	2a00      	cmp	r2, #0
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x654>
 800127a:	e6aa      	b.n	8000fd2 <__aeabi_dsub+0x3aa>
 800127c:	0762      	lsls	r2, r4, #29
 800127e:	4310      	orrs	r0, r2
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	08e4      	lsrs	r4, r4, #3
 8001284:	0312      	lsls	r2, r2, #12
 8001286:	4214      	tst	r4, r2
 8001288:	d0d7      	beq.n	800123a <__aeabi_dsub+0x612>
 800128a:	9f02      	ldr	r7, [sp, #8]
 800128c:	08fd      	lsrs	r5, r7, #3
 800128e:	4215      	tst	r5, r2
 8001290:	d1d3      	bne.n	800123a <__aeabi_dsub+0x612>
 8001292:	4663      	mov	r3, ip
 8001294:	2601      	movs	r6, #1
 8001296:	08d8      	lsrs	r0, r3, #3
 8001298:	077b      	lsls	r3, r7, #29
 800129a:	002c      	movs	r4, r5
 800129c:	4318      	orrs	r0, r3
 800129e:	400e      	ands	r6, r1
 80012a0:	e7cb      	b.n	800123a <__aeabi_dsub+0x612>
 80012a2:	000a      	movs	r2, r1
 80012a4:	0027      	movs	r7, r4
 80012a6:	3a20      	subs	r2, #32
 80012a8:	40d7      	lsrs	r7, r2
 80012aa:	2920      	cmp	r1, #32
 80012ac:	d005      	beq.n	80012ba <__aeabi_dsub+0x692>
 80012ae:	2240      	movs	r2, #64	@ 0x40
 80012b0:	1a52      	subs	r2, r2, r1
 80012b2:	4094      	lsls	r4, r2
 80012b4:	0025      	movs	r5, r4
 80012b6:	4305      	orrs	r5, r0
 80012b8:	9503      	str	r5, [sp, #12]
 80012ba:	9d03      	ldr	r5, [sp, #12]
 80012bc:	1e6a      	subs	r2, r5, #1
 80012be:	4195      	sbcs	r5, r2
 80012c0:	432f      	orrs	r7, r5
 80012c2:	e610      	b.n	8000ee6 <__aeabi_dsub+0x2be>
 80012c4:	0014      	movs	r4, r2
 80012c6:	2500      	movs	r5, #0
 80012c8:	2200      	movs	r2, #0
 80012ca:	e556      	b.n	8000d7a <__aeabi_dsub+0x152>
 80012cc:	9b02      	ldr	r3, [sp, #8]
 80012ce:	4460      	add	r0, ip
 80012d0:	4699      	mov	r9, r3
 80012d2:	4560      	cmp	r0, ip
 80012d4:	4192      	sbcs	r2, r2
 80012d6:	444c      	add	r4, r9
 80012d8:	4252      	negs	r2, r2
 80012da:	0005      	movs	r5, r0
 80012dc:	18a4      	adds	r4, r4, r2
 80012de:	e74c      	b.n	800117a <__aeabi_dsub+0x552>
 80012e0:	001a      	movs	r2, r3
 80012e2:	001c      	movs	r4, r3
 80012e4:	432a      	orrs	r2, r5
 80012e6:	d000      	beq.n	80012ea <__aeabi_dsub+0x6c2>
 80012e8:	e6b3      	b.n	8001052 <__aeabi_dsub+0x42a>
 80012ea:	e6c9      	b.n	8001080 <__aeabi_dsub+0x458>
 80012ec:	2480      	movs	r4, #128	@ 0x80
 80012ee:	2600      	movs	r6, #0
 80012f0:	0324      	lsls	r4, r4, #12
 80012f2:	e5ae      	b.n	8000e52 <__aeabi_dsub+0x22a>
 80012f4:	2120      	movs	r1, #32
 80012f6:	2500      	movs	r5, #0
 80012f8:	1a09      	subs	r1, r1, r0
 80012fa:	e517      	b.n	8000d2c <__aeabi_dsub+0x104>
 80012fc:	2200      	movs	r2, #0
 80012fe:	2500      	movs	r5, #0
 8001300:	4c0b      	ldr	r4, [pc, #44]	@ (8001330 <__aeabi_dsub+0x708>)
 8001302:	e53a      	b.n	8000d7a <__aeabi_dsub+0x152>
 8001304:	2d00      	cmp	r5, #0
 8001306:	d100      	bne.n	800130a <__aeabi_dsub+0x6e2>
 8001308:	e5f6      	b.n	8000ef8 <__aeabi_dsub+0x2d0>
 800130a:	464b      	mov	r3, r9
 800130c:	1bda      	subs	r2, r3, r7
 800130e:	4692      	mov	sl, r2
 8001310:	2f00      	cmp	r7, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_dsub+0x6ee>
 8001314:	e66f      	b.n	8000ff6 <__aeabi_dsub+0x3ce>
 8001316:	2a38      	cmp	r2, #56	@ 0x38
 8001318:	dc05      	bgt.n	8001326 <__aeabi_dsub+0x6fe>
 800131a:	2680      	movs	r6, #128	@ 0x80
 800131c:	0436      	lsls	r6, r6, #16
 800131e:	4334      	orrs	r4, r6
 8001320:	4688      	mov	r8, r1
 8001322:	000e      	movs	r6, r1
 8001324:	e6d1      	b.n	80010ca <__aeabi_dsub+0x4a2>
 8001326:	4688      	mov	r8, r1
 8001328:	000e      	movs	r6, r1
 800132a:	2501      	movs	r5, #1
 800132c:	e6de      	b.n	80010ec <__aeabi_dsub+0x4c4>
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	ff7fffff 	.word	0xff7fffff
 8001338:	000007fe 	.word	0x000007fe
 800133c:	2d00      	cmp	r5, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_dsub+0x71a>
 8001340:	e668      	b.n	8001014 <__aeabi_dsub+0x3ec>
 8001342:	464b      	mov	r3, r9
 8001344:	1bd9      	subs	r1, r3, r7
 8001346:	2f00      	cmp	r7, #0
 8001348:	d101      	bne.n	800134e <__aeabi_dsub+0x726>
 800134a:	468a      	mov	sl, r1
 800134c:	e5a7      	b.n	8000e9e <__aeabi_dsub+0x276>
 800134e:	2701      	movs	r7, #1
 8001350:	2938      	cmp	r1, #56	@ 0x38
 8001352:	dd00      	ble.n	8001356 <__aeabi_dsub+0x72e>
 8001354:	e5c7      	b.n	8000ee6 <__aeabi_dsub+0x2be>
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	e5af      	b.n	8000ebe <__aeabi_dsub+0x296>
 800135e:	46c0      	nop			@ (mov r8, r8)

08001360 <__aeabi_d2iz>:
 8001360:	000b      	movs	r3, r1
 8001362:	0002      	movs	r2, r0
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d16      	ldr	r5, [pc, #88]	@ (80013c0 <__aeabi_d2iz+0x60>)
 8001368:	030c      	lsls	r4, r1, #12
 800136a:	b082      	sub	sp, #8
 800136c:	0049      	lsls	r1, r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0fde      	lsrs	r6, r3, #31
 800137a:	42a9      	cmp	r1, r5
 800137c:	dd04      	ble.n	8001388 <__aeabi_d2iz+0x28>
 800137e:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <__aeabi_d2iz+0x64>)
 8001380:	4281      	cmp	r1, r0
 8001382:	dd03      	ble.n	800138c <__aeabi_d2iz+0x2c>
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <__aeabi_d2iz+0x68>)
 8001386:	18f0      	adds	r0, r6, r3
 8001388:	b002      	add	sp, #8
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	2080      	movs	r0, #128	@ 0x80
 800138e:	0340      	lsls	r0, r0, #13
 8001390:	4320      	orrs	r0, r4
 8001392:	4c0e      	ldr	r4, [pc, #56]	@ (80013cc <__aeabi_d2iz+0x6c>)
 8001394:	1a64      	subs	r4, r4, r1
 8001396:	2c1f      	cmp	r4, #31
 8001398:	dd08      	ble.n	80013ac <__aeabi_d2iz+0x4c>
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <__aeabi_d2iz+0x70>)
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	0003      	movs	r3, r0
 80013a2:	4258      	negs	r0, r3
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d1ef      	bne.n	8001388 <__aeabi_d2iz+0x28>
 80013a8:	0018      	movs	r0, r3
 80013aa:	e7ed      	b.n	8001388 <__aeabi_d2iz+0x28>
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <__aeabi_d2iz+0x74>)
 80013ae:	9a00      	ldr	r2, [sp, #0]
 80013b0:	469c      	mov	ip, r3
 80013b2:	0003      	movs	r3, r0
 80013b4:	4461      	add	r1, ip
 80013b6:	408b      	lsls	r3, r1
 80013b8:	40e2      	lsrs	r2, r4
 80013ba:	4313      	orrs	r3, r2
 80013bc:	e7f1      	b.n	80013a2 <__aeabi_d2iz+0x42>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	000003fe 	.word	0x000003fe
 80013c4:	0000041d 	.word	0x0000041d
 80013c8:	7fffffff 	.word	0x7fffffff
 80013cc:	00000433 	.word	0x00000433
 80013d0:	00000413 	.word	0x00000413
 80013d4:	fffffbed 	.word	0xfffffbed

080013d8 <__aeabi_cdrcmple>:
 80013d8:	4684      	mov	ip, r0
 80013da:	0010      	movs	r0, r2
 80013dc:	4662      	mov	r2, ip
 80013de:	468c      	mov	ip, r1
 80013e0:	0019      	movs	r1, r3
 80013e2:	4663      	mov	r3, ip
 80013e4:	e000      	b.n	80013e8 <__aeabi_cdcmpeq>
 80013e6:	46c0      	nop			@ (mov r8, r8)

080013e8 <__aeabi_cdcmpeq>:
 80013e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013ea:	f000 fa09 	bl	8001800 <__ledf2>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d401      	bmi.n	80013f6 <__aeabi_cdcmpeq+0xe>
 80013f2:	2100      	movs	r1, #0
 80013f4:	42c8      	cmn	r0, r1
 80013f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013f8 <__aeabi_dcmpeq>:
 80013f8:	b510      	push	{r4, lr}
 80013fa:	f000 f949 	bl	8001690 <__eqdf2>
 80013fe:	4240      	negs	r0, r0
 8001400:	3001      	adds	r0, #1
 8001402:	bd10      	pop	{r4, pc}

08001404 <__aeabi_dcmplt>:
 8001404:	b510      	push	{r4, lr}
 8001406:	f000 f9fb 	bl	8001800 <__ledf2>
 800140a:	2800      	cmp	r0, #0
 800140c:	db01      	blt.n	8001412 <__aeabi_dcmplt+0xe>
 800140e:	2000      	movs	r0, #0
 8001410:	bd10      	pop	{r4, pc}
 8001412:	2001      	movs	r0, #1
 8001414:	bd10      	pop	{r4, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)

08001418 <__aeabi_dcmple>:
 8001418:	b510      	push	{r4, lr}
 800141a:	f000 f9f1 	bl	8001800 <__ledf2>
 800141e:	2800      	cmp	r0, #0
 8001420:	dd01      	ble.n	8001426 <__aeabi_dcmple+0xe>
 8001422:	2000      	movs	r0, #0
 8001424:	bd10      	pop	{r4, pc}
 8001426:	2001      	movs	r0, #1
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			@ (mov r8, r8)

0800142c <__aeabi_dcmpgt>:
 800142c:	b510      	push	{r4, lr}
 800142e:	f000 f973 	bl	8001718 <__gedf2>
 8001432:	2800      	cmp	r0, #0
 8001434:	dc01      	bgt.n	800143a <__aeabi_dcmpgt+0xe>
 8001436:	2000      	movs	r0, #0
 8001438:	bd10      	pop	{r4, pc}
 800143a:	2001      	movs	r0, #1
 800143c:	bd10      	pop	{r4, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)

08001440 <__aeabi_dcmpge>:
 8001440:	b510      	push	{r4, lr}
 8001442:	f000 f969 	bl	8001718 <__gedf2>
 8001446:	2800      	cmp	r0, #0
 8001448:	da01      	bge.n	800144e <__aeabi_dcmpge+0xe>
 800144a:	2000      	movs	r0, #0
 800144c:	bd10      	pop	{r4, pc}
 800144e:	2001      	movs	r0, #1
 8001450:	bd10      	pop	{r4, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)

08001454 <__aeabi_cfrcmple>:
 8001454:	4684      	mov	ip, r0
 8001456:	0008      	movs	r0, r1
 8001458:	4661      	mov	r1, ip
 800145a:	e7ff      	b.n	800145c <__aeabi_cfcmpeq>

0800145c <__aeabi_cfcmpeq>:
 800145c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800145e:	f000 f8c9 	bl	80015f4 <__lesf2>
 8001462:	2800      	cmp	r0, #0
 8001464:	d401      	bmi.n	800146a <__aeabi_cfcmpeq+0xe>
 8001466:	2100      	movs	r1, #0
 8001468:	42c8      	cmn	r0, r1
 800146a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800146c <__aeabi_fcmpeq>:
 800146c:	b510      	push	{r4, lr}
 800146e:	f000 f849 	bl	8001504 <__eqsf2>
 8001472:	4240      	negs	r0, r0
 8001474:	3001      	adds	r0, #1
 8001476:	bd10      	pop	{r4, pc}

08001478 <__aeabi_fcmplt>:
 8001478:	b510      	push	{r4, lr}
 800147a:	f000 f8bb 	bl	80015f4 <__lesf2>
 800147e:	2800      	cmp	r0, #0
 8001480:	db01      	blt.n	8001486 <__aeabi_fcmplt+0xe>
 8001482:	2000      	movs	r0, #0
 8001484:	bd10      	pop	{r4, pc}
 8001486:	2001      	movs	r0, #1
 8001488:	bd10      	pop	{r4, pc}
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_fcmple>:
 800148c:	b510      	push	{r4, lr}
 800148e:	f000 f8b1 	bl	80015f4 <__lesf2>
 8001492:	2800      	cmp	r0, #0
 8001494:	dd01      	ble.n	800149a <__aeabi_fcmple+0xe>
 8001496:	2000      	movs	r0, #0
 8001498:	bd10      	pop	{r4, pc}
 800149a:	2001      	movs	r0, #1
 800149c:	bd10      	pop	{r4, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)

080014a0 <__aeabi_fcmpgt>:
 80014a0:	b510      	push	{r4, lr}
 80014a2:	f000 f857 	bl	8001554 <__gesf2>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	dc01      	bgt.n	80014ae <__aeabi_fcmpgt+0xe>
 80014aa:	2000      	movs	r0, #0
 80014ac:	bd10      	pop	{r4, pc}
 80014ae:	2001      	movs	r0, #1
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)

080014b4 <__aeabi_fcmpge>:
 80014b4:	b510      	push	{r4, lr}
 80014b6:	f000 f84d 	bl	8001554 <__gesf2>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	da01      	bge.n	80014c2 <__aeabi_fcmpge+0xe>
 80014be:	2000      	movs	r0, #0
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	2001      	movs	r0, #1
 80014c4:	bd10      	pop	{r4, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)

080014c8 <__clzsi2>:
 80014c8:	211c      	movs	r1, #28
 80014ca:	2301      	movs	r3, #1
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	4298      	cmp	r0, r3
 80014d0:	d301      	bcc.n	80014d6 <__clzsi2+0xe>
 80014d2:	0c00      	lsrs	r0, r0, #16
 80014d4:	3910      	subs	r1, #16
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	4298      	cmp	r0, r3
 80014da:	d301      	bcc.n	80014e0 <__clzsi2+0x18>
 80014dc:	0a00      	lsrs	r0, r0, #8
 80014de:	3908      	subs	r1, #8
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	4298      	cmp	r0, r3
 80014e4:	d301      	bcc.n	80014ea <__clzsi2+0x22>
 80014e6:	0900      	lsrs	r0, r0, #4
 80014e8:	3904      	subs	r1, #4
 80014ea:	a202      	add	r2, pc, #8	@ (adr r2, 80014f4 <__clzsi2+0x2c>)
 80014ec:	5c10      	ldrb	r0, [r2, r0]
 80014ee:	1840      	adds	r0, r0, r1
 80014f0:	4770      	bx	lr
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	02020304 	.word	0x02020304
 80014f8:	01010101 	.word	0x01010101
	...

08001504 <__eqsf2>:
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	0042      	lsls	r2, r0, #1
 8001508:	024e      	lsls	r6, r1, #9
 800150a:	004c      	lsls	r4, r1, #1
 800150c:	0245      	lsls	r5, r0, #9
 800150e:	0a6d      	lsrs	r5, r5, #9
 8001510:	0e12      	lsrs	r2, r2, #24
 8001512:	0fc3      	lsrs	r3, r0, #31
 8001514:	0a76      	lsrs	r6, r6, #9
 8001516:	0e24      	lsrs	r4, r4, #24
 8001518:	0fc9      	lsrs	r1, r1, #31
 800151a:	2aff      	cmp	r2, #255	@ 0xff
 800151c:	d010      	beq.n	8001540 <__eqsf2+0x3c>
 800151e:	2cff      	cmp	r4, #255	@ 0xff
 8001520:	d00c      	beq.n	800153c <__eqsf2+0x38>
 8001522:	2001      	movs	r0, #1
 8001524:	42a2      	cmp	r2, r4
 8001526:	d10a      	bne.n	800153e <__eqsf2+0x3a>
 8001528:	42b5      	cmp	r5, r6
 800152a:	d108      	bne.n	800153e <__eqsf2+0x3a>
 800152c:	428b      	cmp	r3, r1
 800152e:	d00f      	beq.n	8001550 <__eqsf2+0x4c>
 8001530:	2a00      	cmp	r2, #0
 8001532:	d104      	bne.n	800153e <__eqsf2+0x3a>
 8001534:	0028      	movs	r0, r5
 8001536:	1e43      	subs	r3, r0, #1
 8001538:	4198      	sbcs	r0, r3
 800153a:	e000      	b.n	800153e <__eqsf2+0x3a>
 800153c:	2001      	movs	r0, #1
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	2001      	movs	r0, #1
 8001542:	2cff      	cmp	r4, #255	@ 0xff
 8001544:	d1fb      	bne.n	800153e <__eqsf2+0x3a>
 8001546:	4335      	orrs	r5, r6
 8001548:	d1f9      	bne.n	800153e <__eqsf2+0x3a>
 800154a:	404b      	eors	r3, r1
 800154c:	0018      	movs	r0, r3
 800154e:	e7f6      	b.n	800153e <__eqsf2+0x3a>
 8001550:	2000      	movs	r0, #0
 8001552:	e7f4      	b.n	800153e <__eqsf2+0x3a>

08001554 <__gesf2>:
 8001554:	b530      	push	{r4, r5, lr}
 8001556:	0042      	lsls	r2, r0, #1
 8001558:	0244      	lsls	r4, r0, #9
 800155a:	024d      	lsls	r5, r1, #9
 800155c:	0fc3      	lsrs	r3, r0, #31
 800155e:	0048      	lsls	r0, r1, #1
 8001560:	0a64      	lsrs	r4, r4, #9
 8001562:	0e12      	lsrs	r2, r2, #24
 8001564:	0a6d      	lsrs	r5, r5, #9
 8001566:	0e00      	lsrs	r0, r0, #24
 8001568:	0fc9      	lsrs	r1, r1, #31
 800156a:	2aff      	cmp	r2, #255	@ 0xff
 800156c:	d019      	beq.n	80015a2 <__gesf2+0x4e>
 800156e:	28ff      	cmp	r0, #255	@ 0xff
 8001570:	d00b      	beq.n	800158a <__gesf2+0x36>
 8001572:	2a00      	cmp	r2, #0
 8001574:	d11e      	bne.n	80015b4 <__gesf2+0x60>
 8001576:	2800      	cmp	r0, #0
 8001578:	d10b      	bne.n	8001592 <__gesf2+0x3e>
 800157a:	2d00      	cmp	r5, #0
 800157c:	d027      	beq.n	80015ce <__gesf2+0x7a>
 800157e:	2c00      	cmp	r4, #0
 8001580:	d134      	bne.n	80015ec <__gesf2+0x98>
 8001582:	2900      	cmp	r1, #0
 8001584:	d02f      	beq.n	80015e6 <__gesf2+0x92>
 8001586:	0008      	movs	r0, r1
 8001588:	bd30      	pop	{r4, r5, pc}
 800158a:	2d00      	cmp	r5, #0
 800158c:	d128      	bne.n	80015e0 <__gesf2+0x8c>
 800158e:	2a00      	cmp	r2, #0
 8001590:	d101      	bne.n	8001596 <__gesf2+0x42>
 8001592:	2c00      	cmp	r4, #0
 8001594:	d0f5      	beq.n	8001582 <__gesf2+0x2e>
 8001596:	428b      	cmp	r3, r1
 8001598:	d107      	bne.n	80015aa <__gesf2+0x56>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <__gesf2+0x92>
 800159e:	0018      	movs	r0, r3
 80015a0:	e7f2      	b.n	8001588 <__gesf2+0x34>
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d11c      	bne.n	80015e0 <__gesf2+0x8c>
 80015a6:	28ff      	cmp	r0, #255	@ 0xff
 80015a8:	d014      	beq.n	80015d4 <__gesf2+0x80>
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	2302      	movs	r3, #2
 80015ae:	4018      	ands	r0, r3
 80015b0:	3801      	subs	r0, #1
 80015b2:	e7e9      	b.n	8001588 <__gesf2+0x34>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d0f8      	beq.n	80015aa <__gesf2+0x56>
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d1f6      	bne.n	80015aa <__gesf2+0x56>
 80015bc:	4282      	cmp	r2, r0
 80015be:	dcf4      	bgt.n	80015aa <__gesf2+0x56>
 80015c0:	dbeb      	blt.n	800159a <__gesf2+0x46>
 80015c2:	42ac      	cmp	r4, r5
 80015c4:	d8f1      	bhi.n	80015aa <__gesf2+0x56>
 80015c6:	2000      	movs	r0, #0
 80015c8:	42ac      	cmp	r4, r5
 80015ca:	d2dd      	bcs.n	8001588 <__gesf2+0x34>
 80015cc:	e7e5      	b.n	800159a <__gesf2+0x46>
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d0da      	beq.n	8001588 <__gesf2+0x34>
 80015d2:	e7ea      	b.n	80015aa <__gesf2+0x56>
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d103      	bne.n	80015e0 <__gesf2+0x8c>
 80015d8:	428b      	cmp	r3, r1
 80015da:	d1e6      	bne.n	80015aa <__gesf2+0x56>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7d3      	b.n	8001588 <__gesf2+0x34>
 80015e0:	2002      	movs	r0, #2
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7d0      	b.n	8001588 <__gesf2+0x34>
 80015e6:	2001      	movs	r0, #1
 80015e8:	4240      	negs	r0, r0
 80015ea:	e7cd      	b.n	8001588 <__gesf2+0x34>
 80015ec:	428b      	cmp	r3, r1
 80015ee:	d0e8      	beq.n	80015c2 <__gesf2+0x6e>
 80015f0:	e7db      	b.n	80015aa <__gesf2+0x56>
 80015f2:	46c0      	nop			@ (mov r8, r8)

080015f4 <__lesf2>:
 80015f4:	b530      	push	{r4, r5, lr}
 80015f6:	0042      	lsls	r2, r0, #1
 80015f8:	0244      	lsls	r4, r0, #9
 80015fa:	024d      	lsls	r5, r1, #9
 80015fc:	0fc3      	lsrs	r3, r0, #31
 80015fe:	0048      	lsls	r0, r1, #1
 8001600:	0a64      	lsrs	r4, r4, #9
 8001602:	0e12      	lsrs	r2, r2, #24
 8001604:	0a6d      	lsrs	r5, r5, #9
 8001606:	0e00      	lsrs	r0, r0, #24
 8001608:	0fc9      	lsrs	r1, r1, #31
 800160a:	2aff      	cmp	r2, #255	@ 0xff
 800160c:	d01a      	beq.n	8001644 <__lesf2+0x50>
 800160e:	28ff      	cmp	r0, #255	@ 0xff
 8001610:	d00e      	beq.n	8001630 <__lesf2+0x3c>
 8001612:	2a00      	cmp	r2, #0
 8001614:	d11e      	bne.n	8001654 <__lesf2+0x60>
 8001616:	2800      	cmp	r0, #0
 8001618:	d10e      	bne.n	8001638 <__lesf2+0x44>
 800161a:	2d00      	cmp	r5, #0
 800161c:	d02a      	beq.n	8001674 <__lesf2+0x80>
 800161e:	2c00      	cmp	r4, #0
 8001620:	d00c      	beq.n	800163c <__lesf2+0x48>
 8001622:	428b      	cmp	r3, r1
 8001624:	d01d      	beq.n	8001662 <__lesf2+0x6e>
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	2302      	movs	r3, #2
 800162a:	4018      	ands	r0, r3
 800162c:	3801      	subs	r0, #1
 800162e:	e010      	b.n	8001652 <__lesf2+0x5e>
 8001630:	2d00      	cmp	r5, #0
 8001632:	d10d      	bne.n	8001650 <__lesf2+0x5c>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d120      	bne.n	800167a <__lesf2+0x86>
 8001638:	2c00      	cmp	r4, #0
 800163a:	d11e      	bne.n	800167a <__lesf2+0x86>
 800163c:	2900      	cmp	r1, #0
 800163e:	d023      	beq.n	8001688 <__lesf2+0x94>
 8001640:	0008      	movs	r0, r1
 8001642:	e006      	b.n	8001652 <__lesf2+0x5e>
 8001644:	2c00      	cmp	r4, #0
 8001646:	d103      	bne.n	8001650 <__lesf2+0x5c>
 8001648:	28ff      	cmp	r0, #255	@ 0xff
 800164a:	d1ec      	bne.n	8001626 <__lesf2+0x32>
 800164c:	2d00      	cmp	r5, #0
 800164e:	d017      	beq.n	8001680 <__lesf2+0x8c>
 8001650:	2002      	movs	r0, #2
 8001652:	bd30      	pop	{r4, r5, pc}
 8001654:	2800      	cmp	r0, #0
 8001656:	d0e6      	beq.n	8001626 <__lesf2+0x32>
 8001658:	428b      	cmp	r3, r1
 800165a:	d1e4      	bne.n	8001626 <__lesf2+0x32>
 800165c:	4282      	cmp	r2, r0
 800165e:	dce2      	bgt.n	8001626 <__lesf2+0x32>
 8001660:	db04      	blt.n	800166c <__lesf2+0x78>
 8001662:	42ac      	cmp	r4, r5
 8001664:	d8df      	bhi.n	8001626 <__lesf2+0x32>
 8001666:	2000      	movs	r0, #0
 8001668:	42ac      	cmp	r4, r5
 800166a:	d2f2      	bcs.n	8001652 <__lesf2+0x5e>
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <__lesf2+0x94>
 8001670:	0018      	movs	r0, r3
 8001672:	e7ee      	b.n	8001652 <__lesf2+0x5e>
 8001674:	2c00      	cmp	r4, #0
 8001676:	d0ec      	beq.n	8001652 <__lesf2+0x5e>
 8001678:	e7d5      	b.n	8001626 <__lesf2+0x32>
 800167a:	428b      	cmp	r3, r1
 800167c:	d1d3      	bne.n	8001626 <__lesf2+0x32>
 800167e:	e7f5      	b.n	800166c <__lesf2+0x78>
 8001680:	2000      	movs	r0, #0
 8001682:	428b      	cmp	r3, r1
 8001684:	d0e5      	beq.n	8001652 <__lesf2+0x5e>
 8001686:	e7ce      	b.n	8001626 <__lesf2+0x32>
 8001688:	2001      	movs	r0, #1
 800168a:	4240      	negs	r0, r0
 800168c:	e7e1      	b.n	8001652 <__lesf2+0x5e>
 800168e:	46c0      	nop			@ (mov r8, r8)

08001690 <__eqdf2>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	4657      	mov	r7, sl
 8001694:	46de      	mov	lr, fp
 8001696:	464e      	mov	r6, r9
 8001698:	4645      	mov	r5, r8
 800169a:	b5e0      	push	{r5, r6, r7, lr}
 800169c:	000d      	movs	r5, r1
 800169e:	0004      	movs	r4, r0
 80016a0:	0fe8      	lsrs	r0, r5, #31
 80016a2:	4683      	mov	fp, r0
 80016a4:	0309      	lsls	r1, r1, #12
 80016a6:	0fd8      	lsrs	r0, r3, #31
 80016a8:	0b09      	lsrs	r1, r1, #12
 80016aa:	4682      	mov	sl, r0
 80016ac:	4819      	ldr	r0, [pc, #100]	@ (8001714 <__eqdf2+0x84>)
 80016ae:	468c      	mov	ip, r1
 80016b0:	031f      	lsls	r7, r3, #12
 80016b2:	0069      	lsls	r1, r5, #1
 80016b4:	005e      	lsls	r6, r3, #1
 80016b6:	0d49      	lsrs	r1, r1, #21
 80016b8:	0b3f      	lsrs	r7, r7, #12
 80016ba:	0d76      	lsrs	r6, r6, #21
 80016bc:	4281      	cmp	r1, r0
 80016be:	d018      	beq.n	80016f2 <__eqdf2+0x62>
 80016c0:	4286      	cmp	r6, r0
 80016c2:	d00f      	beq.n	80016e4 <__eqdf2+0x54>
 80016c4:	2001      	movs	r0, #1
 80016c6:	42b1      	cmp	r1, r6
 80016c8:	d10d      	bne.n	80016e6 <__eqdf2+0x56>
 80016ca:	45bc      	cmp	ip, r7
 80016cc:	d10b      	bne.n	80016e6 <__eqdf2+0x56>
 80016ce:	4294      	cmp	r4, r2
 80016d0:	d109      	bne.n	80016e6 <__eqdf2+0x56>
 80016d2:	45d3      	cmp	fp, sl
 80016d4:	d01c      	beq.n	8001710 <__eqdf2+0x80>
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d105      	bne.n	80016e6 <__eqdf2+0x56>
 80016da:	4660      	mov	r0, ip
 80016dc:	4320      	orrs	r0, r4
 80016de:	1e43      	subs	r3, r0, #1
 80016e0:	4198      	sbcs	r0, r3
 80016e2:	e000      	b.n	80016e6 <__eqdf2+0x56>
 80016e4:	2001      	movs	r0, #1
 80016e6:	bcf0      	pop	{r4, r5, r6, r7}
 80016e8:	46bb      	mov	fp, r7
 80016ea:	46b2      	mov	sl, r6
 80016ec:	46a9      	mov	r9, r5
 80016ee:	46a0      	mov	r8, r4
 80016f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f2:	2001      	movs	r0, #1
 80016f4:	428e      	cmp	r6, r1
 80016f6:	d1f6      	bne.n	80016e6 <__eqdf2+0x56>
 80016f8:	4661      	mov	r1, ip
 80016fa:	4339      	orrs	r1, r7
 80016fc:	000f      	movs	r7, r1
 80016fe:	4317      	orrs	r7, r2
 8001700:	4327      	orrs	r7, r4
 8001702:	d1f0      	bne.n	80016e6 <__eqdf2+0x56>
 8001704:	465b      	mov	r3, fp
 8001706:	4652      	mov	r2, sl
 8001708:	1a98      	subs	r0, r3, r2
 800170a:	1e43      	subs	r3, r0, #1
 800170c:	4198      	sbcs	r0, r3
 800170e:	e7ea      	b.n	80016e6 <__eqdf2+0x56>
 8001710:	2000      	movs	r0, #0
 8001712:	e7e8      	b.n	80016e6 <__eqdf2+0x56>
 8001714:	000007ff 	.word	0x000007ff

08001718 <__gedf2>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	4657      	mov	r7, sl
 800171c:	464e      	mov	r6, r9
 800171e:	4645      	mov	r5, r8
 8001720:	46de      	mov	lr, fp
 8001722:	b5e0      	push	{r5, r6, r7, lr}
 8001724:	000d      	movs	r5, r1
 8001726:	030f      	lsls	r7, r1, #12
 8001728:	0b39      	lsrs	r1, r7, #12
 800172a:	b083      	sub	sp, #12
 800172c:	0004      	movs	r4, r0
 800172e:	4680      	mov	r8, r0
 8001730:	9101      	str	r1, [sp, #4]
 8001732:	0058      	lsls	r0, r3, #1
 8001734:	0fe9      	lsrs	r1, r5, #31
 8001736:	4f31      	ldr	r7, [pc, #196]	@ (80017fc <__gedf2+0xe4>)
 8001738:	0d40      	lsrs	r0, r0, #21
 800173a:	468c      	mov	ip, r1
 800173c:	006e      	lsls	r6, r5, #1
 800173e:	0319      	lsls	r1, r3, #12
 8001740:	4682      	mov	sl, r0
 8001742:	4691      	mov	r9, r2
 8001744:	0d76      	lsrs	r6, r6, #21
 8001746:	0b09      	lsrs	r1, r1, #12
 8001748:	0fd8      	lsrs	r0, r3, #31
 800174a:	42be      	cmp	r6, r7
 800174c:	d01f      	beq.n	800178e <__gedf2+0x76>
 800174e:	45ba      	cmp	sl, r7
 8001750:	d00f      	beq.n	8001772 <__gedf2+0x5a>
 8001752:	2e00      	cmp	r6, #0
 8001754:	d12f      	bne.n	80017b6 <__gedf2+0x9e>
 8001756:	4655      	mov	r5, sl
 8001758:	9e01      	ldr	r6, [sp, #4]
 800175a:	4334      	orrs	r4, r6
 800175c:	2d00      	cmp	r5, #0
 800175e:	d127      	bne.n	80017b0 <__gedf2+0x98>
 8001760:	430a      	orrs	r2, r1
 8001762:	d03a      	beq.n	80017da <__gedf2+0xc2>
 8001764:	2c00      	cmp	r4, #0
 8001766:	d145      	bne.n	80017f4 <__gedf2+0xdc>
 8001768:	2800      	cmp	r0, #0
 800176a:	d11a      	bne.n	80017a2 <__gedf2+0x8a>
 800176c:	2001      	movs	r0, #1
 800176e:	4240      	negs	r0, r0
 8001770:	e017      	b.n	80017a2 <__gedf2+0x8a>
 8001772:	4311      	orrs	r1, r2
 8001774:	d13b      	bne.n	80017ee <__gedf2+0xd6>
 8001776:	2e00      	cmp	r6, #0
 8001778:	d102      	bne.n	8001780 <__gedf2+0x68>
 800177a:	9f01      	ldr	r7, [sp, #4]
 800177c:	4327      	orrs	r7, r4
 800177e:	d0f3      	beq.n	8001768 <__gedf2+0x50>
 8001780:	4584      	cmp	ip, r0
 8001782:	d109      	bne.n	8001798 <__gedf2+0x80>
 8001784:	4663      	mov	r3, ip
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <__gedf2+0x54>
 800178a:	4660      	mov	r0, ip
 800178c:	e009      	b.n	80017a2 <__gedf2+0x8a>
 800178e:	9f01      	ldr	r7, [sp, #4]
 8001790:	4327      	orrs	r7, r4
 8001792:	d12c      	bne.n	80017ee <__gedf2+0xd6>
 8001794:	45b2      	cmp	sl, r6
 8001796:	d024      	beq.n	80017e2 <__gedf2+0xca>
 8001798:	4663      	mov	r3, ip
 800179a:	2002      	movs	r0, #2
 800179c:	3b01      	subs	r3, #1
 800179e:	4018      	ands	r0, r3
 80017a0:	3801      	subs	r0, #1
 80017a2:	b003      	add	sp, #12
 80017a4:	bcf0      	pop	{r4, r5, r6, r7}
 80017a6:	46bb      	mov	fp, r7
 80017a8:	46b2      	mov	sl, r6
 80017aa:	46a9      	mov	r9, r5
 80017ac:	46a0      	mov	r8, r4
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d0d9      	beq.n	8001768 <__gedf2+0x50>
 80017b4:	e7e4      	b.n	8001780 <__gedf2+0x68>
 80017b6:	4654      	mov	r4, sl
 80017b8:	2c00      	cmp	r4, #0
 80017ba:	d0ed      	beq.n	8001798 <__gedf2+0x80>
 80017bc:	4584      	cmp	ip, r0
 80017be:	d1eb      	bne.n	8001798 <__gedf2+0x80>
 80017c0:	4556      	cmp	r6, sl
 80017c2:	dce9      	bgt.n	8001798 <__gedf2+0x80>
 80017c4:	dbde      	blt.n	8001784 <__gedf2+0x6c>
 80017c6:	9b01      	ldr	r3, [sp, #4]
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d8e5      	bhi.n	8001798 <__gedf2+0x80>
 80017cc:	d1da      	bne.n	8001784 <__gedf2+0x6c>
 80017ce:	45c8      	cmp	r8, r9
 80017d0:	d8e2      	bhi.n	8001798 <__gedf2+0x80>
 80017d2:	2000      	movs	r0, #0
 80017d4:	45c8      	cmp	r8, r9
 80017d6:	d2e4      	bcs.n	80017a2 <__gedf2+0x8a>
 80017d8:	e7d4      	b.n	8001784 <__gedf2+0x6c>
 80017da:	2000      	movs	r0, #0
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d0e0      	beq.n	80017a2 <__gedf2+0x8a>
 80017e0:	e7da      	b.n	8001798 <__gedf2+0x80>
 80017e2:	4311      	orrs	r1, r2
 80017e4:	d103      	bne.n	80017ee <__gedf2+0xd6>
 80017e6:	4584      	cmp	ip, r0
 80017e8:	d1d6      	bne.n	8001798 <__gedf2+0x80>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e7d9      	b.n	80017a2 <__gedf2+0x8a>
 80017ee:	2002      	movs	r0, #2
 80017f0:	4240      	negs	r0, r0
 80017f2:	e7d6      	b.n	80017a2 <__gedf2+0x8a>
 80017f4:	4584      	cmp	ip, r0
 80017f6:	d0e6      	beq.n	80017c6 <__gedf2+0xae>
 80017f8:	e7ce      	b.n	8001798 <__gedf2+0x80>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	000007ff 	.word	0x000007ff

08001800 <__ledf2>:
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	4657      	mov	r7, sl
 8001804:	464e      	mov	r6, r9
 8001806:	4645      	mov	r5, r8
 8001808:	46de      	mov	lr, fp
 800180a:	b5e0      	push	{r5, r6, r7, lr}
 800180c:	000d      	movs	r5, r1
 800180e:	030f      	lsls	r7, r1, #12
 8001810:	0004      	movs	r4, r0
 8001812:	4680      	mov	r8, r0
 8001814:	0fe8      	lsrs	r0, r5, #31
 8001816:	0b39      	lsrs	r1, r7, #12
 8001818:	4684      	mov	ip, r0
 800181a:	b083      	sub	sp, #12
 800181c:	0058      	lsls	r0, r3, #1
 800181e:	4f30      	ldr	r7, [pc, #192]	@ (80018e0 <__ledf2+0xe0>)
 8001820:	0d40      	lsrs	r0, r0, #21
 8001822:	9101      	str	r1, [sp, #4]
 8001824:	031e      	lsls	r6, r3, #12
 8001826:	0069      	lsls	r1, r5, #1
 8001828:	4682      	mov	sl, r0
 800182a:	4691      	mov	r9, r2
 800182c:	0d49      	lsrs	r1, r1, #21
 800182e:	0b36      	lsrs	r6, r6, #12
 8001830:	0fd8      	lsrs	r0, r3, #31
 8001832:	42b9      	cmp	r1, r7
 8001834:	d020      	beq.n	8001878 <__ledf2+0x78>
 8001836:	45ba      	cmp	sl, r7
 8001838:	d00f      	beq.n	800185a <__ledf2+0x5a>
 800183a:	2900      	cmp	r1, #0
 800183c:	d12b      	bne.n	8001896 <__ledf2+0x96>
 800183e:	9901      	ldr	r1, [sp, #4]
 8001840:	430c      	orrs	r4, r1
 8001842:	4651      	mov	r1, sl
 8001844:	2900      	cmp	r1, #0
 8001846:	d137      	bne.n	80018b8 <__ledf2+0xb8>
 8001848:	4332      	orrs	r2, r6
 800184a:	d038      	beq.n	80018be <__ledf2+0xbe>
 800184c:	2c00      	cmp	r4, #0
 800184e:	d144      	bne.n	80018da <__ledf2+0xda>
 8001850:	2800      	cmp	r0, #0
 8001852:	d119      	bne.n	8001888 <__ledf2+0x88>
 8001854:	2001      	movs	r0, #1
 8001856:	4240      	negs	r0, r0
 8001858:	e016      	b.n	8001888 <__ledf2+0x88>
 800185a:	4316      	orrs	r6, r2
 800185c:	d113      	bne.n	8001886 <__ledf2+0x86>
 800185e:	2900      	cmp	r1, #0
 8001860:	d102      	bne.n	8001868 <__ledf2+0x68>
 8001862:	9f01      	ldr	r7, [sp, #4]
 8001864:	4327      	orrs	r7, r4
 8001866:	d0f3      	beq.n	8001850 <__ledf2+0x50>
 8001868:	4584      	cmp	ip, r0
 800186a:	d020      	beq.n	80018ae <__ledf2+0xae>
 800186c:	4663      	mov	r3, ip
 800186e:	2002      	movs	r0, #2
 8001870:	3b01      	subs	r3, #1
 8001872:	4018      	ands	r0, r3
 8001874:	3801      	subs	r0, #1
 8001876:	e007      	b.n	8001888 <__ledf2+0x88>
 8001878:	9f01      	ldr	r7, [sp, #4]
 800187a:	4327      	orrs	r7, r4
 800187c:	d103      	bne.n	8001886 <__ledf2+0x86>
 800187e:	458a      	cmp	sl, r1
 8001880:	d1f4      	bne.n	800186c <__ledf2+0x6c>
 8001882:	4316      	orrs	r6, r2
 8001884:	d01f      	beq.n	80018c6 <__ledf2+0xc6>
 8001886:	2002      	movs	r0, #2
 8001888:	b003      	add	sp, #12
 800188a:	bcf0      	pop	{r4, r5, r6, r7}
 800188c:	46bb      	mov	fp, r7
 800188e:	46b2      	mov	sl, r6
 8001890:	46a9      	mov	r9, r5
 8001892:	46a0      	mov	r8, r4
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	4654      	mov	r4, sl
 8001898:	2c00      	cmp	r4, #0
 800189a:	d0e7      	beq.n	800186c <__ledf2+0x6c>
 800189c:	4584      	cmp	ip, r0
 800189e:	d1e5      	bne.n	800186c <__ledf2+0x6c>
 80018a0:	4551      	cmp	r1, sl
 80018a2:	dce3      	bgt.n	800186c <__ledf2+0x6c>
 80018a4:	db03      	blt.n	80018ae <__ledf2+0xae>
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	42b3      	cmp	r3, r6
 80018aa:	d8df      	bhi.n	800186c <__ledf2+0x6c>
 80018ac:	d00f      	beq.n	80018ce <__ledf2+0xce>
 80018ae:	4663      	mov	r3, ip
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0cf      	beq.n	8001854 <__ledf2+0x54>
 80018b4:	4660      	mov	r0, ip
 80018b6:	e7e7      	b.n	8001888 <__ledf2+0x88>
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d0c9      	beq.n	8001850 <__ledf2+0x50>
 80018bc:	e7d4      	b.n	8001868 <__ledf2+0x68>
 80018be:	2000      	movs	r0, #0
 80018c0:	2c00      	cmp	r4, #0
 80018c2:	d0e1      	beq.n	8001888 <__ledf2+0x88>
 80018c4:	e7d2      	b.n	800186c <__ledf2+0x6c>
 80018c6:	4584      	cmp	ip, r0
 80018c8:	d1d0      	bne.n	800186c <__ledf2+0x6c>
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7dc      	b.n	8001888 <__ledf2+0x88>
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d8cc      	bhi.n	800186c <__ledf2+0x6c>
 80018d2:	2000      	movs	r0, #0
 80018d4:	45c8      	cmp	r8, r9
 80018d6:	d2d7      	bcs.n	8001888 <__ledf2+0x88>
 80018d8:	e7e9      	b.n	80018ae <__ledf2+0xae>
 80018da:	4584      	cmp	ip, r0
 80018dc:	d0e3      	beq.n	80018a6 <__ledf2+0xa6>
 80018de:	e7c5      	b.n	800186c <__ledf2+0x6c>
 80018e0:	000007ff 	.word	0x000007ff

080018e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3308      	adds	r3, #8
 80018f0:	001a      	movs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4252      	negs	r2, r2
 80018fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3308      	adds	r3, #8
 8001902:	001a      	movs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3308      	adds	r3, #8
 800190c:	001a      	movs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}

08001936 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	d103      	bne.n	8001954 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e00c      	b.n	800196e <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3308      	adds	r3, #8
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e002      	b.n	8001962 <vListInsert+0x2c>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	429a      	cmp	r2, r3
 800196c:	d2f6      	bcs.n	800195c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6892      	ldr	r2, [r2, #8]
 80019b8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6852      	ldr	r2, [r2, #4]
 80019c2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d103      	bne.n	80019d6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80019fe:	2301      	movs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d106      	bne.n	8001a1a <xQueueGenericReset+0x26>
 8001a0c:	2397      	movs	r3, #151	@ 0x97
 8001a0e:	005a      	lsls	r2, r3, #1
 8001a10:	4b42      	ldr	r3, [pc, #264]	@ (8001b1c <xQueueGenericReset+0x128>)
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f006 f92f 	bl	8007c78 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d100      	bne.n	8001a22 <xQueueGenericReset+0x2e>
 8001a20:	e06a      	b.n	8001af8 <xQueueGenericReset+0x104>
        ( pxQueue->uxLength >= 1U ) &&
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d066      	beq.n	8001af8 <xQueueGenericReset+0x104>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a32:	2400      	movs	r4, #0
 8001a34:	0c15      	lsrs	r5, r2, #16
 8001a36:	0c19      	lsrs	r1, r3, #16
 8001a38:	b2a8      	uxth	r0, r5
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d104      	bne.n	8001a48 <xQueueGenericReset+0x54>
 8001a3e:	b288      	uxth	r0, r1
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d013      	beq.n	8001a6c <xQueueGenericReset+0x78>
 8001a44:	1c10      	adds	r0, r2, #0
 8001a46:	e004      	b.n	8001a52 <xQueueGenericReset+0x5e>
 8001a48:	b289      	uxth	r1, r1
 8001a4a:	2900      	cmp	r1, #0
 8001a4c:	d10d      	bne.n	8001a6a <xQueueGenericReset+0x76>
 8001a4e:	1c29      	adds	r1, r5, #0
 8001a50:	1c18      	adds	r0, r3, #0
 8001a52:	b292      	uxth	r2, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	435a      	muls	r2, r3
 8001a58:	b283      	uxth	r3, r0
 8001a5a:	b289      	uxth	r1, r1
 8001a5c:	434b      	muls	r3, r1
 8001a5e:	0c12      	lsrs	r2, r2, #16
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	141b      	asrs	r3, r3, #16
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d000      	beq.n	8001a6c <xQueueGenericReset+0x78>
 8001a6a:	2401      	movs	r4, #1
 8001a6c:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8001a6e:	d143      	bne.n	8001af8 <xQueueGenericReset+0x104>
    {
        taskENTER_CRITICAL();
 8001a70:	f003 fa1e 	bl	8004eb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	434b      	muls	r3, r1
 8001a82:	18d2      	adds	r2, r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	434b      	muls	r3, r1
 8001aa6:	18d2      	adds	r2, r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2244      	movs	r2, #68	@ 0x44
 8001ab0:	21ff      	movs	r1, #255	@ 0xff
 8001ab2:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2245      	movs	r2, #69	@ 0x45
 8001ab8:	21ff      	movs	r1, #255	@ 0xff
 8001aba:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <xQueueGenericReset+0xea>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d013      	beq.n	8001af2 <xQueueGenericReset+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3310      	adds	r3, #16
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f002 f908 	bl	8003ce4 <xTaskRemoveFromEventList>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d00c      	beq.n	8001af2 <xQueueGenericReset+0xfe>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ad8:	f003 f9da 	bl	8004e90 <vPortYield>
 8001adc:	e009      	b.n	8001af2 <xQueueGenericReset+0xfe>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff fefe 	bl	80018e4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3324      	adds	r3, #36	@ 0x24
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff fef9 	bl	80018e4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001af2:	f003 f9ef 	bl	8004ed4 <vPortExitCritical>
 8001af6:	e001      	b.n	8001afc <xQueueGenericReset+0x108>
    }
    else
    {
        xReturn = pdFAIL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <xQueueGenericReset+0x11e>
 8001b02:	2364      	movs	r3, #100	@ 0x64
 8001b04:	33ff      	adds	r3, #255	@ 0xff
 8001b06:	001a      	movs	r2, r3
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <xQueueGenericReset+0x128>)
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f006 f8b3 	bl	8007c78 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	080085e0 	.word	0x080085e0

08001b20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b22:	b08b      	sub	sp, #44	@ 0x2c
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d065      	beq.n	8001c04 <xQueueGenericCreate+0xe4>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b38:	2000      	movs	r0, #0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0c19      	lsrs	r1, r3, #16
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c1e      	adds	r6, r3, #0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	1c15      	adds	r5, r2, #0
 8001b4a:	b28a      	uxth	r2, r1
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d105      	bne.n	8001b5c <xQueueGenericCreate+0x3c>
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d013      	beq.n	8001b7e <xQueueGenericCreate+0x5e>
 8001b56:	1c19      	adds	r1, r3, #0
 8001b58:	1c34      	adds	r4, r6, #0
 8001b5a:	e003      	b.n	8001b64 <xQueueGenericCreate+0x44>
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <xQueueGenericCreate+0x5c>
 8001b62:	1c2c      	adds	r4, r5, #0
 8001b64:	b2b3      	uxth	r3, r6
 8001b66:	b2aa      	uxth	r2, r5
 8001b68:	435a      	muls	r2, r3
 8001b6a:	b2a3      	uxth	r3, r4
 8001b6c:	b289      	uxth	r1, r1
 8001b6e:	434b      	muls	r3, r1
 8001b70:	0c12      	lsrs	r2, r2, #16
 8001b72:	189b      	adds	r3, r3, r2
 8001b74:	141b      	asrs	r3, r3, #16
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d000      	beq.n	8001b7e <xQueueGenericCreate+0x5e>
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b80:	d140      	bne.n	8001c04 <xQueueGenericCreate+0xe4>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b88:	3351      	adds	r3, #81	@ 0x51
 8001b8a:	d83b      	bhi.n	8001c04 <xQueueGenericCreate+0xe4>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	4353      	muls	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	3350      	adds	r3, #80	@ 0x50
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f003 fa29 	bl	8004ff0 <pvPortMalloc>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00f      	beq.n	8001bc8 <xQueueGenericCreate+0xa8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3350      	adds	r3, #80	@ 0x50
 8001bb0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781c      	ldrb	r4, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	0023      	movs	r3, r4
 8001bc2:	f000 f837 	bl	8001c34 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001bc6:	e028      	b.n	8001c1a <xQueueGenericCreate+0xfa>
            }
            else
            {
                traceQUEUE_CREATE_FAILED( ucQueueType );
 8001bc8:	f003 fbb1 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f003 fabe 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <xQueueGenericCreate+0x108>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01a      	beq.n	8001c1a <xQueueGenericCreate+0xfa>
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <xQueueGenericCreate+0x10c>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	3340      	adds	r3, #64	@ 0x40
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <xQueueGenericCreate+0x10c>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	f004 fbfb 	bl	80063f8 <prvTraceStoreKernelCall>
            if( pxNewQueue != NULL )
 8001c02:	e00a      	b.n	8001c1a <xQueueGenericCreate+0xfa>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d108      	bne.n	8001c1c <xQueueGenericCreate+0xfc>
 8001c0a:	23f2      	movs	r3, #242	@ 0xf2
 8001c0c:	005a      	lsls	r2, r3, #1
 8001c0e:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <xQueueGenericCreate+0x110>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f006 f830 	bl	8007c78 <vAssertCalled>
 8001c18:	e000      	b.n	8001c1c <xQueueGenericCreate+0xfc>
            if( pxNewQueue != NULL )
 8001c1a:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
    }
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b009      	add	sp, #36	@ 0x24
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	20001dc8 	.word	0x20001dc8
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	080085e0 	.word	0x080085e0

08001c34 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	001a      	movs	r2, r3
 8001c42:	1cfb      	adds	r3, r7, #3
 8001c44:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff fec2 	bl	80019f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	1cfa      	adds	r2, r7, #3
 8001c74:	214c      	movs	r1, #76	@ 0x4c
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	545a      	strb	r2, [r3, r1]
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f003 fa4c 	bl	800511a <prvTraceGetQueueType>
 8001c82:	0003      	movs	r3, r0
 8001c84:	001a      	movs	r2, r3
 8001c86:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <prvInitialiseNewQueue+0x13c>)
 8001c88:	5c9b      	ldrb	r3, [r3, r2]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f004 fede 	bl	8006a4c <prvTraceGetObjectHandle>
 8001c90:	0003      	movs	r3, r0
 8001c92:	001a      	movs	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f003 faba 	bl	8005212 <prvTraceSetQueueNumberLow16>
 8001c9e:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <prvInitialiseNewQueue+0x140>)
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f003 facd 	bl	8005246 <prvTraceSetQueueNumberHigh16>
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 fa33 	bl	800511a <prvTraceGetQueueType>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <prvInitialiseNewQueue+0x13c>)
 8001cba:	5c9c      	ldrb	r4, [r3, r2]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f003 fa8a 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	0019      	movs	r1, r3
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f004 ff6e 	bl	8006bac <prvMarkObjectAsUsed>
 8001cd0:	f003 fb2d 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f003 fa3a 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	001a      	movs	r2, r3
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <prvInitialiseNewQueue+0x144>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d029      	beq.n	8001d40 <prvInitialiseNewQueue+0x10c>
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f003 fa80 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <prvInitialiseNewQueue+0x144>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01d      	beq.n	8001d40 <prvInitialiseNewQueue+0x10c>
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f003 fa07 	bl	800511a <prvTraceGetQueueType>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	001a      	movs	r2, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <prvInitialiseNewQueue+0x13c>)
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	3318      	adds	r3, #24
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	001d      	movs	r5, r3
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f003 f9fc 	bl	800511a <prvTraceGetQueueType>
 8001d22:	0003      	movs	r3, r0
 8001d24:	001a      	movs	r2, r3
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <prvInitialiseNewQueue+0x13c>)
 8001d28:	5c9c      	ldrb	r4, [r3, r2]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f003 fa53 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8001d32:	0003      	movs	r3, r0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	001a      	movs	r2, r3
 8001d38:	0021      	movs	r1, r4
 8001d3a:	0028      	movs	r0, r5
 8001d3c:	f004 fb5c 	bl	80063f8 <prvTraceStoreKernelCall>
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f003 f9e9 	bl	800511a <prvTraceGetQueueType>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <prvInitialiseNewQueue+0x13c>)
 8001d4e:	5c9c      	ldrb	r4, [r3, r2]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f003 fa40 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0020      	movs	r0, r4
 8001d62:	f004 fd87 	bl	8006874 <prvTraceSetObjectState>
}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20001dca 	.word	0x20001dca
 8001d78:	20001dc8 	.word	0x20001dc8

08001d7c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00e      	beq.n	8001da8 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	f000 f820 	bl	8001de8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	0002      	movs	r2, r0
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fea7 	bl	8001b20 <xQueueGenericCreate>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ffcf 	bl	8001d7c <prvInitialiseMutex>

        return xNewQueue;
 8001dde:	68fb      	ldr	r3, [r7, #12]
    }
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <xQueueGenericSend+0x2a>
 8001e04:	23d3      	movs	r3, #211	@ 0xd3
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	4bcb      	ldr	r3, [pc, #812]	@ (8002138 <xQueueGenericSend+0x350>)
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f005 ff33 	bl	8007c78 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <xQueueGenericSend+0x38>
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <xQueueGenericSend+0x3c>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <xQueueGenericSend+0x3e>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <xQueueGenericSend+0x4e>
 8001e2a:	4ac4      	ldr	r2, [pc, #784]	@ (800213c <xQueueGenericSend+0x354>)
 8001e2c:	4bc2      	ldr	r3, [pc, #776]	@ (8002138 <xQueueGenericSend+0x350>)
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f005 ff21 	bl	8007c78 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d103      	bne.n	8001e44 <xQueueGenericSend+0x5c>
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <xQueueGenericSend+0x60>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <xQueueGenericSend+0x62>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <xQueueGenericSend+0x72>
 8001e4e:	4abc      	ldr	r2, [pc, #752]	@ (8002140 <xQueueGenericSend+0x358>)
 8001e50:	4bb9      	ldr	r3, [pc, #740]	@ (8002138 <xQueueGenericSend+0x350>)
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f005 ff0f 	bl	8007c78 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e5a:	f002 f977 	bl	800414c <xTaskGetSchedulerState>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d102      	bne.n	8001e68 <xQueueGenericSend+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <xQueueGenericSend+0x84>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <xQueueGenericSend+0x86>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d105      	bne.n	8001e7e <xQueueGenericSend+0x96>
 8001e72:	4ab4      	ldr	r2, [pc, #720]	@ (8002144 <xQueueGenericSend+0x35c>)
 8001e74:	4bb0      	ldr	r3, [pc, #704]	@ (8002138 <xQueueGenericSend+0x350>)
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f005 fefd 	bl	8007c78 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e7e:	f003 f817 	bl	8004eb0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d303      	bcc.n	8001e96 <xQueueGenericSend+0xae>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d000      	beq.n	8001e96 <xQueueGenericSend+0xae>
 8001e94:	e07f      	b.n	8001f96 <xQueueGenericSend+0x1ae>
            {
                traceQUEUE_SEND( pxQueue );
 8001e96:	f003 fa4a 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f003 f957 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	@ (8002148 <xQueueGenericSend+0x360>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d02e      	beq.n	8001f10 <xQueueGenericSend+0x128>
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f003 f99d 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8002148 <xQueueGenericSend+0x360>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d022      	beq.n	8001f10 <xQueueGenericSend+0x128>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <xQueueGenericSend+0x100>
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f003 f921 	bl	800511a <prvTraceGetQueueType>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	001a      	movs	r2, r3
 8001edc:	4b9b      	ldr	r3, [pc, #620]	@ (800214c <xQueueGenericSend+0x364>)
 8001ede:	5c9b      	ldrb	r3, [r3, r2]
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	001d      	movs	r5, r3
 8001ee6:	e000      	b.n	8001eea <xQueueGenericSend+0x102>
 8001ee8:	2525      	movs	r5, #37	@ 0x25
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f003 f914 	bl	800511a <prvTraceGetQueueType>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	4b95      	ldr	r3, [pc, #596]	@ (800214c <xQueueGenericSend+0x364>)
 8001ef8:	5c9c      	ldrb	r4, [r3, r2]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f003 f96b 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8001f02:	0003      	movs	r3, r0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	001a      	movs	r2, r3
 8001f08:	0021      	movs	r1, r4
 8001f0a:	0028      	movs	r0, r5
 8001f0c:	f004 fa74 	bl	80063f8 <prvTraceStoreKernelCall>
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f003 f901 	bl	800511a <prvTraceGetQueueType>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	4b8b      	ldr	r3, [pc, #556]	@ (800214c <xQueueGenericSend+0x364>)
 8001f1e:	5c9c      	ldrb	r4, [r3, r2]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f003 f958 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	b2dd      	uxtb	r5, r3
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f003 f8f3 	bl	800511a <prvTraceGetQueueType>
 8001f34:	0003      	movs	r3, r0
 8001f36:	001a      	movs	r2, r3
 8001f38:	4b84      	ldr	r3, [pc, #528]	@ (800214c <xQueueGenericSend+0x364>)
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d005      	beq.n	8001f4c <xQueueGenericSend+0x164>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e000      	b.n	8001f4e <xQueueGenericSend+0x166>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	001a      	movs	r2, r3
 8001f50:	0029      	movs	r1, r5
 8001f52:	0020      	movs	r0, r4
 8001f54:	f004 fc8e 	bl	8006874 <prvTraceSetObjectState>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 febb 	bl	8002cda <prvCopyDataToQueue>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <xQueueGenericSend+0x19c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	3324      	adds	r3, #36	@ 0x24
 8001f74:	0018      	movs	r0, r3
 8001f76:	f001 feb5 	bl	8003ce4 <xTaskRemoveFromEventList>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d007      	beq.n	8001f8e <xQueueGenericSend+0x1a6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f7e:	f002 ff87 	bl	8004e90 <vPortYield>
 8001f82:	e004      	b.n	8001f8e <xQueueGenericSend+0x1a6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <xQueueGenericSend+0x1a6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001f8a:	f002 ff81 	bl	8004e90 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f8e:	f002 ffa1 	bl	8004ed4 <vPortExitCritical>
                return pdPASS;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e120      	b.n	80021d8 <xQueueGenericSend+0x3f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d140      	bne.n	800201e <xQueueGenericSend+0x236>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f9c:	f002 ff9a 	bl	8004ed4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001fa0:	f003 f9c5 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f003 f8d2 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8001fac:	0003      	movs	r3, r0
 8001fae:	001a      	movs	r2, r3
 8001fb0:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <xQueueGenericSend+0x360>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02e      	beq.n	800201a <xQueueGenericSend+0x232>
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f003 f918 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <xQueueGenericSend+0x360>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d022      	beq.n	800201a <xQueueGenericSend+0x232>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <xQueueGenericSend+0x20a>
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f003 f89c 	bl	800511a <prvTraceGetQueueType>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	4b59      	ldr	r3, [pc, #356]	@ (800214c <xQueueGenericSend+0x364>)
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	3348      	adds	r3, #72	@ 0x48
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	001d      	movs	r5, r3
 8001ff0:	e000      	b.n	8001ff4 <xQueueGenericSend+0x20c>
 8001ff2:	254d      	movs	r5, #77	@ 0x4d
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f003 f88f 	bl	800511a <prvTraceGetQueueType>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	001a      	movs	r2, r3
 8002000:	4b52      	ldr	r3, [pc, #328]	@ (800214c <xQueueGenericSend+0x364>)
 8002002:	5c9c      	ldrb	r4, [r3, r2]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	0018      	movs	r0, r3
 8002008:	f003 f8e6 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 800200c:	0003      	movs	r3, r0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	001a      	movs	r2, r3
 8002012:	0021      	movs	r1, r4
 8002014:	0028      	movs	r0, r5
 8002016:	f004 f9ef 	bl	80063f8 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 800201a:	2300      	movs	r3, #0
 800201c:	e0dc      	b.n	80021d8 <xQueueGenericSend+0x3f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <xQueueGenericSend+0x24a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002024:	2314      	movs	r3, #20
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f001 ff45 	bl	8003eb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002032:	f002 ff4f 	bl	8004ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002036:	f001 fac1 	bl	80035bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800203a:	f002 ff39 	bl	8004eb0 <vPortEnterCritical>
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2244      	movs	r2, #68	@ 0x44
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	d103      	bne.n	8002052 <xQueueGenericSend+0x26a>
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2244      	movs	r2, #68	@ 0x44
 800204e:	2100      	movs	r1, #0
 8002050:	5499      	strb	r1, [r3, r2]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2245      	movs	r2, #69	@ 0x45
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	b25b      	sxtb	r3, r3
 800205a:	3301      	adds	r3, #1
 800205c:	d103      	bne.n	8002066 <xQueueGenericSend+0x27e>
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2245      	movs	r2, #69	@ 0x45
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	f002 ff35 	bl	8004ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800206a:	1d3a      	adds	r2, r7, #4
 800206c:	2314      	movs	r3, #20
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	0011      	movs	r1, r2
 8002072:	0018      	movs	r0, r3
 8002074:	f001 ff34 	bl	8003ee0 <xTaskCheckForTimeOut>
 8002078:	1e03      	subs	r3, r0, #0
 800207a:	d169      	bne.n	8002150 <xQueueGenericSend+0x368>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 ff30 	bl	8002ee4 <prvIsQueueFull>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d04f      	beq.n	8002128 <xQueueGenericSend+0x340>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8002088:	f003 f951 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800208c:	0003      	movs	r3, r0
 800208e:	0018      	movs	r0, r3
 8002090:	f003 f85e 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002094:	0003      	movs	r3, r0
 8002096:	001a      	movs	r2, r3
 8002098:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <xQueueGenericSend+0x360>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	4013      	ands	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02e      	beq.n	8002102 <xQueueGenericSend+0x31a>
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f003 f8a4 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80020ac:	0003      	movs	r3, r0
 80020ae:	001a      	movs	r2, r3
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <xQueueGenericSend+0x360>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d022      	beq.n	8002102 <xQueueGenericSend+0x31a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <xQueueGenericSend+0x2f2>
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f003 f828 	bl	800511a <prvTraceGetQueueType>
 80020ca:	0003      	movs	r3, r0
 80020cc:	001a      	movs	r2, r3
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <xQueueGenericSend+0x364>)
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	3370      	adds	r3, #112	@ 0x70
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	001d      	movs	r5, r3
 80020d8:	e000      	b.n	80020dc <xQueueGenericSend+0x2f4>
 80020da:	2575      	movs	r5, #117	@ 0x75
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	0018      	movs	r0, r3
 80020e0:	f003 f81b 	bl	800511a <prvTraceGetQueueType>
 80020e4:	0003      	movs	r3, r0
 80020e6:	001a      	movs	r2, r3
 80020e8:	4b18      	ldr	r3, [pc, #96]	@ (800214c <xQueueGenericSend+0x364>)
 80020ea:	5c9c      	ldrb	r4, [r3, r2]
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f003 f872 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80020f4:	0003      	movs	r3, r0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	001a      	movs	r2, r3
 80020fa:	0021      	movs	r1, r4
 80020fc:	0028      	movs	r0, r5
 80020fe:	f004 f97b 	bl	80063f8 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	3310      	adds	r3, #16
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	0011      	movs	r1, r2
 800210a:	0018      	movs	r0, r3
 800210c:	f001 fd42 	bl	8003b94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fe72 	bl	8002dfc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002118:	f001 fa5c 	bl	80035d4 <xTaskResumeAll>
 800211c:	1e03      	subs	r3, r0, #0
 800211e:	d000      	beq.n	8002122 <xQueueGenericSend+0x33a>
 8002120:	e6ad      	b.n	8001e7e <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 8002122:	f002 feb5 	bl	8004e90 <vPortYield>
 8002126:	e6aa      	b.n	8001e7e <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fe66 	bl	8002dfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002130:	f001 fa50 	bl	80035d4 <xTaskResumeAll>
 8002134:	e6a3      	b.n	8001e7e <xQueueGenericSend+0x96>
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	080085e0 	.word	0x080085e0
 800213c:	0000034d 	.word	0x0000034d
 8002140:	0000034e 	.word	0x0000034e
 8002144:	00000351 	.word	0x00000351
 8002148:	20001dc8 	.word	0x20001dc8
 800214c:	20000008 	.word	0x20000008
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fe52 	bl	8002dfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002158:	f001 fa3c 	bl	80035d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800215c:	f003 f8e7 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002160:	0003      	movs	r3, r0
 8002162:	0018      	movs	r0, r3
 8002164:	f002 fff4 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <xQueueGenericSend+0x3f8>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02e      	beq.n	80021d6 <xQueueGenericSend+0x3ee>
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	0018      	movs	r0, r3
 800217c:	f003 f83a 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8002180:	0003      	movs	r3, r0
 8002182:	001a      	movs	r2, r3
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <xQueueGenericSend+0x3f8>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d022      	beq.n	80021d6 <xQueueGenericSend+0x3ee>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10b      	bne.n	80021ae <xQueueGenericSend+0x3c6>
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	0018      	movs	r0, r3
 800219a:	f002 ffbe 	bl	800511a <prvTraceGetQueueType>
 800219e:	0003      	movs	r3, r0
 80021a0:	001a      	movs	r2, r3
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <xQueueGenericSend+0x3fc>)
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	3348      	adds	r3, #72	@ 0x48
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	001d      	movs	r5, r3
 80021ac:	e000      	b.n	80021b0 <xQueueGenericSend+0x3c8>
 80021ae:	254d      	movs	r5, #77	@ 0x4d
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f002 ffb1 	bl	800511a <prvTraceGetQueueType>
 80021b8:	0003      	movs	r3, r0
 80021ba:	001a      	movs	r2, r3
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <xQueueGenericSend+0x3fc>)
 80021be:	5c9c      	ldrb	r4, [r3, r2]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f003 f808 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80021c8:	0003      	movs	r3, r0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	001a      	movs	r2, r3
 80021ce:	0021      	movs	r1, r4
 80021d0:	0028      	movs	r0, r5
 80021d2:	f004 f911 	bl	80063f8 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 80021d6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b00a      	add	sp, #40	@ 0x28
 80021de:	bdb0      	pop	{r4, r5, r7, pc}
 80021e0:	20001dc8 	.word	0x20001dc8
 80021e4:	20000008 	.word	0x20000008

080021e8 <xQueueGiveFromISR>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f805 	bl	8002208 <MyWrapper_xQueueGiveFromISR>
 80021fe:	0003      	movs	r3, r0
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <MyWrapper_xQueueGiveFromISR+0x22>
 800221e:	4a7a      	ldr	r2, [pc, #488]	@ (8002408 <MyWrapper_xQueueGiveFromISR+0x200>)
 8002220:	4b7a      	ldr	r3, [pc, #488]	@ (800240c <MyWrapper_xQueueGiveFromISR+0x204>)
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f005 fd27 	bl	8007c78 <vAssertCalled>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <MyWrapper_xQueueGiveFromISR+0x36>
 8002232:	4a77      	ldr	r2, [pc, #476]	@ (8002410 <MyWrapper_xQueueGiveFromISR+0x208>)
 8002234:	4b75      	ldr	r3, [pc, #468]	@ (800240c <MyWrapper_xQueueGiveFromISR+0x204>)
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f005 fd1d 	bl	8007c78 <vAssertCalled>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <MyWrapper_xQueueGiveFromISR+0x46>
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <MyWrapper_xQueueGiveFromISR+0x4a>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <MyWrapper_xQueueGiveFromISR+0x4c>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <MyWrapper_xQueueGiveFromISR+0x5c>
 8002258:	4a6e      	ldr	r2, [pc, #440]	@ (8002414 <MyWrapper_xQueueGiveFromISR+0x20c>)
 800225a:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <MyWrapper_xQueueGiveFromISR+0x204>)
 800225c:	0011      	movs	r1, r2
 800225e:	0018      	movs	r0, r3
 8002260:	f005 fd0a 	bl	8007c78 <vAssertCalled>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002264:	f002 fe56 	bl	8004f14 <ulSetInterruptMaskFromISR>
 8002268:	0003      	movs	r3, r0
 800226a:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	429a      	cmp	r2, r3
 800227a:	d300      	bcc.n	800227e <MyWrapper_xQueueGiveFromISR+0x76>
 800227c:	e089      	b.n	8002392 <MyWrapper_xQueueGiveFromISR+0x18a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800227e:	2317      	movs	r3, #23
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	2145      	movs	r1, #69	@ 0x45
 8002286:	5c52      	ldrb	r2, [r2, r1]
 8002288:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	0018      	movs	r0, r3
 800228e:	f002 ffb1 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8002292:	0003      	movs	r3, r0
 8002294:	001a      	movs	r2, r3
 8002296:	4b60      	ldr	r3, [pc, #384]	@ (8002418 <MyWrapper_xQueueGiveFromISR+0x210>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	4013      	ands	r3, r2
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d022      	beq.n	80022e8 <MyWrapper_xQueueGiveFromISR+0xe0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <MyWrapper_xQueueGiveFromISR+0xb8>
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f002 ff35 	bl	800511a <prvTraceGetQueueType>
 80022b0:	0003      	movs	r3, r0
 80022b2:	001a      	movs	r2, r3
 80022b4:	4b59      	ldr	r3, [pc, #356]	@ (800241c <MyWrapper_xQueueGiveFromISR+0x214>)
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	3330      	adds	r3, #48	@ 0x30
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	001d      	movs	r5, r3
 80022be:	e000      	b.n	80022c2 <MyWrapper_xQueueGiveFromISR+0xba>
 80022c0:	2535      	movs	r5, #53	@ 0x35
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f002 ff28 	bl	800511a <prvTraceGetQueueType>
 80022ca:	0003      	movs	r3, r0
 80022cc:	001a      	movs	r2, r3
 80022ce:	4b53      	ldr	r3, [pc, #332]	@ (800241c <MyWrapper_xQueueGiveFromISR+0x214>)
 80022d0:	5c9c      	ldrb	r4, [r3, r2]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f002 ff7f 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80022da:	0003      	movs	r3, r0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	001a      	movs	r2, r3
 80022e0:	0021      	movs	r1, r4
 80022e2:	0028      	movs	r0, r5
 80022e4:	f004 f888 	bl	80063f8 <prvTraceStoreKernelCall>
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f002 ff15 	bl	800511a <prvTraceGetQueueType>
 80022f0:	0003      	movs	r3, r0
 80022f2:	001a      	movs	r2, r3
 80022f4:	4b49      	ldr	r3, [pc, #292]	@ (800241c <MyWrapper_xQueueGiveFromISR+0x214>)
 80022f6:	5c9c      	ldrb	r4, [r3, r2]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f002 ff6c 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002300:	0003      	movs	r3, r0
 8002302:	b2d9      	uxtb	r1, r3
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	001a      	movs	r2, r3
 8002310:	0020      	movs	r0, r4
 8002312:	f004 faaf 	bl	8006874 <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800231e:	2317      	movs	r3, #23
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	d111      	bne.n	800234e <MyWrapper_xQueueGiveFromISR+0x146>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	2b00      	cmp	r3, #0
 8002330:	d02c      	beq.n	800238c <MyWrapper_xQueueGiveFromISR+0x184>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	3324      	adds	r3, #36	@ 0x24
 8002336:	0018      	movs	r0, r3
 8002338:	f001 fcd4 	bl	8003ce4 <xTaskRemoveFromEventList>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d025      	beq.n	800238c <MyWrapper_xQueueGiveFromISR+0x184>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d022      	beq.n	800238c <MyWrapper_xQueueGiveFromISR+0x184>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e01e      	b.n	800238c <MyWrapper_xQueueGiveFromISR+0x184>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800234e:	f001 fa57 	bl	8003800 <uxTaskGetNumberOfTasks>
 8002352:	0003      	movs	r3, r0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	2117      	movs	r1, #23
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d913      	bls.n	800238c <MyWrapper_xQueueGiveFromISR+0x184>
 8002364:	187b      	adds	r3, r7, r1
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b25b      	sxtb	r3, r3
 800236a:	2b7f      	cmp	r3, #127	@ 0x7f
 800236c:	d105      	bne.n	800237a <MyWrapper_xQueueGiveFromISR+0x172>
 800236e:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <MyWrapper_xQueueGiveFromISR+0x218>)
 8002370:	4b26      	ldr	r3, [pc, #152]	@ (800240c <MyWrapper_xQueueGiveFromISR+0x204>)
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f005 fc7f 	bl	8007c78 <vAssertCalled>
 800237a:	2317      	movs	r3, #23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	b259      	sxtb	r1, r3
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2245      	movs	r2, #69	@ 0x45
 800238a:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 800238c:	2301      	movs	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002390:	e030      	b.n	80023f4 <MyWrapper_xQueueGiveFromISR+0x1ec>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	0018      	movs	r0, r3
 8002396:	f002 ff2d 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 800239a:	0003      	movs	r3, r0
 800239c:	001a      	movs	r2, r3
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <MyWrapper_xQueueGiveFromISR+0x210>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	4013      	ands	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d022      	beq.n	80023f0 <MyWrapper_xQueueGiveFromISR+0x1e8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <MyWrapper_xQueueGiveFromISR+0x1c0>
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f002 feb1 	bl	800511a <prvTraceGetQueueType>
 80023b8:	0003      	movs	r3, r0
 80023ba:	001a      	movs	r2, r3
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <MyWrapper_xQueueGiveFromISR+0x214>)
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	3358      	adds	r3, #88	@ 0x58
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	001d      	movs	r5, r3
 80023c6:	e000      	b.n	80023ca <MyWrapper_xQueueGiveFromISR+0x1c2>
 80023c8:	255d      	movs	r5, #93	@ 0x5d
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f002 fea4 	bl	800511a <prvTraceGetQueueType>
 80023d2:	0003      	movs	r3, r0
 80023d4:	001a      	movs	r2, r3
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MyWrapper_xQueueGiveFromISR+0x214>)
 80023d8:	5c9c      	ldrb	r4, [r3, r2]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	0018      	movs	r0, r3
 80023de:	f002 fefb 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80023e2:	0003      	movs	r3, r0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	001a      	movs	r2, r3
 80023e8:	0021      	movs	r1, r4
 80023ea:	0028      	movs	r0, r5
 80023ec:	f004 f804 	bl	80063f8 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f002 fd92 	bl	8004f20 <vClearInterruptMaskFromISR>

    return xReturn;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b00a      	add	sp, #40	@ 0x28
 8002404:	bdb0      	pop	{r4, r5, r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	000004c9 	.word	0x000004c9
 800240c:	080085e0 	.word	0x080085e0
 8002410:	000004cd 	.word	0x000004cd
 8002414:	000004d2 	.word	0x000004d2
 8002418:	20001dc8 	.word	0x20001dc8
 800241c:	20000008 	.word	0x20000008
 8002420:	00000551 	.word	0x00000551

08002424 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <xQueueReceive+0x26>
 800243e:	4acd      	ldr	r2, [pc, #820]	@ (8002774 <xQueueReceive+0x350>)
 8002440:	4bcd      	ldr	r3, [pc, #820]	@ (8002778 <xQueueReceive+0x354>)
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f005 fc17 	bl	8007c78 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <xQueueReceive+0x34>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <xQueueReceive+0x38>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <xQueueReceive+0x3a>
 800245c:	2300      	movs	r3, #0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <xQueueReceive+0x4a>
 8002462:	4ac6      	ldr	r2, [pc, #792]	@ (800277c <xQueueReceive+0x358>)
 8002464:	4bc4      	ldr	r3, [pc, #784]	@ (8002778 <xQueueReceive+0x354>)
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f005 fc05 	bl	8007c78 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800246e:	f001 fe6d 	bl	800414c <xTaskGetSchedulerState>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d102      	bne.n	800247c <xQueueReceive+0x58>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <xQueueReceive+0x5c>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <xQueueReceive+0x5e>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <xQueueReceive+0x6e>
 8002486:	4abe      	ldr	r2, [pc, #760]	@ (8002780 <xQueueReceive+0x35c>)
 8002488:	4bbb      	ldr	r3, [pc, #748]	@ (8002778 <xQueueReceive+0x354>)
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f005 fbf3 	bl	8007c78 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002492:	f002 fd0d 	bl	8004eb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d100      	bne.n	80024a4 <xQueueReceive+0x80>
 80024a2:	e07d      	b.n	80025a0 <xQueueReceive+0x17c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	0011      	movs	r1, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fc80 	bl	8002db0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024b0:	f002 ff3d 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80024b4:	0003      	movs	r3, r0
 80024b6:	0018      	movs	r0, r3
 80024b8:	f002 fe4a 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80024bc:	0003      	movs	r3, r0
 80024be:	001a      	movs	r2, r3
 80024c0:	4bb0      	ldr	r3, [pc, #704]	@ (8002784 <xQueueReceive+0x360>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d029      	beq.n	8002520 <xQueueReceive+0xfc>
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f002 fe90 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80024d4:	0003      	movs	r3, r0
 80024d6:	001a      	movs	r2, r3
 80024d8:	4baa      	ldr	r3, [pc, #680]	@ (8002784 <xQueueReceive+0x360>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	4013      	ands	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01d      	beq.n	8002520 <xQueueReceive+0xfc>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f002 fe17 	bl	800511a <prvTraceGetQueueType>
 80024ec:	0003      	movs	r3, r0
 80024ee:	001a      	movs	r2, r3
 80024f0:	4ba5      	ldr	r3, [pc, #660]	@ (8002788 <xQueueReceive+0x364>)
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	3328      	adds	r3, #40	@ 0x28
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	001d      	movs	r5, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f002 fe0c 	bl	800511a <prvTraceGetQueueType>
 8002502:	0003      	movs	r3, r0
 8002504:	001a      	movs	r2, r3
 8002506:	4ba0      	ldr	r3, [pc, #640]	@ (8002788 <xQueueReceive+0x364>)
 8002508:	5c9c      	ldrb	r4, [r3, r2]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	0018      	movs	r0, r3
 800250e:	f002 fe63 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002512:	0003      	movs	r3, r0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	001a      	movs	r2, r3
 8002518:	0021      	movs	r1, r4
 800251a:	0028      	movs	r0, r5
 800251c:	f003 ff6c 	bl	80063f8 <prvTraceStoreKernelCall>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	0018      	movs	r0, r3
 8002524:	f002 fdf9 	bl	800511a <prvTraceGetQueueType>
 8002528:	0003      	movs	r3, r0
 800252a:	001a      	movs	r2, r3
 800252c:	4b96      	ldr	r3, [pc, #600]	@ (8002788 <xQueueReceive+0x364>)
 800252e:	5c9c      	ldrb	r4, [r3, r2]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	0018      	movs	r0, r3
 8002534:	f002 fe50 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002538:	0003      	movs	r3, r0
 800253a:	b2dd      	uxtb	r5, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	0018      	movs	r0, r3
 8002540:	f002 fdeb 	bl	800511a <prvTraceGetQueueType>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	4b8f      	ldr	r3, [pc, #572]	@ (8002788 <xQueueReceive+0x364>)
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d108      	bne.n	8002562 <xQueueReceive+0x13e>
 8002550:	f002 feed 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002554:	0003      	movs	r3, r0
 8002556:	0018      	movs	r0, r3
 8002558:	f002 fdec 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800255c:	0003      	movs	r3, r0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e004      	b.n	800256c <xQueueReceive+0x148>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	001a      	movs	r2, r3
 800256e:	0029      	movs	r1, r5
 8002570:	0020      	movs	r0, r4
 8002572:	f004 f97f 	bl	8006874 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <xQueueReceive+0x174>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3310      	adds	r3, #16
 800258a:	0018      	movs	r0, r3
 800258c:	f001 fbaa 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <xQueueReceive+0x174>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002594:	f002 fc7c 	bl	8004e90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002598:	f002 fc9c 	bl	8004ed4 <vPortExitCritical>
                return pdPASS;
 800259c:	2301      	movs	r3, #1
 800259e:	e13b      	b.n	8002818 <xQueueReceive+0x3f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13b      	bne.n	800261e <xQueueReceive+0x1fa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025a6:	f002 fc95 	bl	8004ed4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025aa:	f002 fec0 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80025ae:	0003      	movs	r3, r0
 80025b0:	0018      	movs	r0, r3
 80025b2:	f002 fdcd 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80025b6:	0003      	movs	r3, r0
 80025b8:	001a      	movs	r2, r3
 80025ba:	4b72      	ldr	r3, [pc, #456]	@ (8002784 <xQueueReceive+0x360>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	4013      	ands	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d029      	beq.n	800261a <xQueueReceive+0x1f6>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f002 fe13 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002784 <xQueueReceive+0x360>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01d      	beq.n	800261a <xQueueReceive+0x1f6>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f002 fd9a 	bl	800511a <prvTraceGetQueueType>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001a      	movs	r2, r3
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <xQueueReceive+0x364>)
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	3350      	adds	r3, #80	@ 0x50
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	001d      	movs	r5, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 fd8f 	bl	800511a <prvTraceGetQueueType>
 80025fc:	0003      	movs	r3, r0
 80025fe:	001a      	movs	r2, r3
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <xQueueReceive+0x364>)
 8002602:	5c9c      	ldrb	r4, [r3, r2]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	0018      	movs	r0, r3
 8002608:	f002 fde6 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 800260c:	0003      	movs	r3, r0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	001a      	movs	r2, r3
 8002612:	0021      	movs	r1, r4
 8002614:	0028      	movs	r0, r5
 8002616:	f003 feef 	bl	80063f8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 800261a:	2300      	movs	r3, #0
 800261c:	e0fc      	b.n	8002818 <xQueueReceive+0x3f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <xQueueReceive+0x20e>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002624:	2314      	movs	r3, #20
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	0018      	movs	r0, r3
 800262a:	f001 fc45 	bl	8003eb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002632:	f002 fc4f 	bl	8004ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002636:	f000 ffc1 	bl	80035bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800263a:	f002 fc39 	bl	8004eb0 <vPortEnterCritical>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2244      	movs	r2, #68	@ 0x44
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	b25b      	sxtb	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	d103      	bne.n	8002652 <xQueueReceive+0x22e>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2244      	movs	r2, #68	@ 0x44
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2245      	movs	r2, #69	@ 0x45
 8002656:	5c9b      	ldrb	r3, [r3, r2]
 8002658:	b25b      	sxtb	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	d103      	bne.n	8002666 <xQueueReceive+0x242>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2245      	movs	r2, #69	@ 0x45
 8002662:	2100      	movs	r1, #0
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	f002 fc35 	bl	8004ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266a:	1d3a      	adds	r2, r7, #4
 800266c:	2314      	movs	r3, #20
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	0011      	movs	r1, r2
 8002672:	0018      	movs	r0, r3
 8002674:	f001 fc34 	bl	8003ee0 <xTaskCheckForTimeOut>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d000      	beq.n	800267e <xQueueReceive+0x25a>
 800267c:	e086      	b.n	800278c <xQueueReceive+0x368>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fc19 	bl	8002eb8 <prvIsQueueEmpty>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d06d      	beq.n	8002766 <xQueueReceive+0x342>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800268a:	f002 fe50 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800268e:	0003      	movs	r3, r0
 8002690:	0018      	movs	r0, r3
 8002692:	f002 fd5d 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002696:	0003      	movs	r3, r0
 8002698:	001a      	movs	r2, r3
 800269a:	4b3a      	ldr	r3, [pc, #232]	@ (8002784 <xQueueReceive+0x360>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d029      	beq.n	80026fa <xQueueReceive+0x2d6>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f002 fda3 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80026ae:	0003      	movs	r3, r0
 80026b0:	001a      	movs	r2, r3
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <xQueueReceive+0x360>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	4013      	ands	r3, r2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01d      	beq.n	80026fa <xQueueReceive+0x2d6>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f002 fd2a 	bl	800511a <prvTraceGetQueueType>
 80026c6:	0003      	movs	r3, r0
 80026c8:	001a      	movs	r2, r3
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <xQueueReceive+0x364>)
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	3368      	adds	r3, #104	@ 0x68
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	001d      	movs	r5, r3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f002 fd1f 	bl	800511a <prvTraceGetQueueType>
 80026dc:	0003      	movs	r3, r0
 80026de:	001a      	movs	r2, r3
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <xQueueReceive+0x364>)
 80026e2:	5c9c      	ldrb	r4, [r3, r2]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 fd76 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80026ec:	0003      	movs	r3, r0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	001a      	movs	r2, r3
 80026f2:	0021      	movs	r1, r4
 80026f4:	0028      	movs	r0, r5
 80026f6:	f003 fe7f 	bl	80063f8 <prvTraceStoreKernelCall>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f002 fd0c 	bl	800511a <prvTraceGetQueueType>
 8002702:	0003      	movs	r3, r0
 8002704:	001a      	movs	r2, r3
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <xQueueReceive+0x364>)
 8002708:	5c9b      	ldrb	r3, [r3, r2]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d018      	beq.n	8002740 <xQueueReceive+0x31c>
 800270e:	f002 fe0e 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002712:	0003      	movs	r3, r0
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fd1b 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 800271a:	0003      	movs	r3, r0
 800271c:	001a      	movs	r2, r3
 800271e:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <xQueueReceive+0x360>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	4013      	ands	r3, r2
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <xQueueReceive+0x31c>
 800272a:	f002 fe00 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800272e:	0003      	movs	r3, r0
 8002730:	0018      	movs	r0, r3
 8002732:	f002 fcff 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8002736:	0003      	movs	r3, r0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	0018      	movs	r0, r3
 800273c:	f004 f8f2 	bl	8006924 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3324      	adds	r3, #36	@ 0x24
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	0011      	movs	r1, r2
 8002748:	0018      	movs	r0, r3
 800274a:	f001 fa23 	bl	8003b94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fb53 	bl	8002dfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002756:	f000 ff3d 	bl	80035d4 <xTaskResumeAll>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d000      	beq.n	8002760 <xQueueReceive+0x33c>
 800275e:	e698      	b.n	8002492 <xQueueReceive+0x6e>
                {
                    portYIELD_WITHIN_API();
 8002760:	f002 fb96 	bl	8004e90 <vPortYield>
 8002764:	e695      	b.n	8002492 <xQueueReceive+0x6e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 fb47 	bl	8002dfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800276e:	f000 ff31 	bl	80035d4 <xTaskResumeAll>
 8002772:	e68e      	b.n	8002492 <xQueueReceive+0x6e>
 8002774:	0000056b 	.word	0x0000056b
 8002778:	080085e0 	.word	0x080085e0
 800277c:	0000056f 	.word	0x0000056f
 8002780:	00000574 	.word	0x00000574
 8002784:	20001dc8 	.word	0x20001dc8
 8002788:	20000008 	.word	0x20000008
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb34 	bl	8002dfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002794:	f000 ff1e 	bl	80035d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fb8c 	bl	8002eb8 <prvIsQueueEmpty>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d100      	bne.n	80027a6 <xQueueReceive+0x382>
 80027a4:	e675      	b.n	8002492 <xQueueReceive+0x6e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027a6:	f002 fdc2 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80027aa:	0003      	movs	r3, r0
 80027ac:	0018      	movs	r0, r3
 80027ae:	f002 fccf 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80027b2:	0003      	movs	r3, r0
 80027b4:	001a      	movs	r2, r3
 80027b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <xQueueReceive+0x3fc>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	4013      	ands	r3, r2
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d029      	beq.n	8002816 <xQueueReceive+0x3f2>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f002 fd15 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80027ca:	0003      	movs	r3, r0
 80027cc:	001a      	movs	r2, r3
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <xQueueReceive+0x3fc>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01d      	beq.n	8002816 <xQueueReceive+0x3f2>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0018      	movs	r0, r3
 80027de:	f002 fc9c 	bl	800511a <prvTraceGetQueueType>
 80027e2:	0003      	movs	r3, r0
 80027e4:	001a      	movs	r2, r3
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <xQueueReceive+0x400>)
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
 80027ea:	3350      	adds	r3, #80	@ 0x50
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	001d      	movs	r5, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f002 fc91 	bl	800511a <prvTraceGetQueueType>
 80027f8:	0003      	movs	r3, r0
 80027fa:	001a      	movs	r2, r3
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <xQueueReceive+0x400>)
 80027fe:	5c9c      	ldrb	r4, [r3, r2]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	0018      	movs	r0, r3
 8002804:	f002 fce8 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002808:	0003      	movs	r3, r0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	001a      	movs	r2, r3
 800280e:	0021      	movs	r1, r4
 8002810:	0028      	movs	r0, r5
 8002812:	f003 fdf1 	bl	80063f8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8002816:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b00a      	add	sp, #40	@ 0x28
 800281e:	bdb0      	pop	{r4, r5, r7, pc}
 8002820:	20001dc8 	.word	0x20001dc8
 8002824:	20000008 	.word	0x20000008

08002828 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	617b      	str	r3, [r7, #20]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <xQueueSemaphoreTake+0x28>
 8002844:	4ad2      	ldr	r2, [pc, #840]	@ (8002b90 <xQueueSemaphoreTake+0x368>)
 8002846:	4bd3      	ldr	r3, [pc, #844]	@ (8002b94 <xQueueSemaphoreTake+0x36c>)
 8002848:	0011      	movs	r1, r2
 800284a:	0018      	movs	r0, r3
 800284c:	f005 fa14 	bl	8007c78 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <xQueueSemaphoreTake+0x3c>
 8002858:	4acf      	ldr	r2, [pc, #828]	@ (8002b98 <xQueueSemaphoreTake+0x370>)
 800285a:	4bce      	ldr	r3, [pc, #824]	@ (8002b94 <xQueueSemaphoreTake+0x36c>)
 800285c:	0011      	movs	r1, r2
 800285e:	0018      	movs	r0, r3
 8002860:	f005 fa0a 	bl	8007c78 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002864:	f001 fc72 	bl	800414c <xTaskGetSchedulerState>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d102      	bne.n	8002872 <xQueueSemaphoreTake+0x4a>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueSemaphoreTake+0x4e>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueSemaphoreTake+0x50>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <xQueueSemaphoreTake+0x60>
 800287c:	4ac7      	ldr	r2, [pc, #796]	@ (8002b9c <xQueueSemaphoreTake+0x374>)
 800287e:	4bc5      	ldr	r3, [pc, #788]	@ (8002b94 <xQueueSemaphoreTake+0x36c>)
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f005 f9f8 	bl	8007c78 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002888:	f002 fb12 	bl	8004eb0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d100      	bne.n	800289a <xQueueSemaphoreTake+0x72>
 8002898:	e080      	b.n	800299c <xQueueSemaphoreTake+0x174>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800289a:	f002 fd48 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800289e:	0003      	movs	r3, r0
 80028a0:	0018      	movs	r0, r3
 80028a2:	f002 fc55 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80028a6:	0003      	movs	r3, r0
 80028a8:	001a      	movs	r2, r3
 80028aa:	4bbd      	ldr	r3, [pc, #756]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d029      	beq.n	800290a <xQueueSemaphoreTake+0xe2>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f002 fc9b 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80028be:	0003      	movs	r3, r0
 80028c0:	001a      	movs	r2, r3
 80028c2:	4bb7      	ldr	r3, [pc, #732]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	4013      	ands	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01d      	beq.n	800290a <xQueueSemaphoreTake+0xe2>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f002 fc22 	bl	800511a <prvTraceGetQueueType>
 80028d6:	0003      	movs	r3, r0
 80028d8:	001a      	movs	r2, r3
 80028da:	4bb2      	ldr	r3, [pc, #712]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	3328      	adds	r3, #40	@ 0x28
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	001d      	movs	r5, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f002 fc17 	bl	800511a <prvTraceGetQueueType>
 80028ec:	0003      	movs	r3, r0
 80028ee:	001a      	movs	r2, r3
 80028f0:	4bac      	ldr	r3, [pc, #688]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 80028f2:	5c9c      	ldrb	r4, [r3, r2]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f002 fc6e 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80028fc:	0003      	movs	r3, r0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	001a      	movs	r2, r3
 8002902:	0021      	movs	r1, r4
 8002904:	0028      	movs	r0, r5
 8002906:	f003 fd77 	bl	80063f8 <prvTraceStoreKernelCall>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0018      	movs	r0, r3
 800290e:	f002 fc04 	bl	800511a <prvTraceGetQueueType>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	4ba3      	ldr	r3, [pc, #652]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 8002918:	5c9c      	ldrb	r4, [r3, r2]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	0018      	movs	r0, r3
 800291e:	f002 fc5b 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002922:	0003      	movs	r3, r0
 8002924:	b2dd      	uxtb	r5, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	0018      	movs	r0, r3
 800292a:	f002 fbf6 	bl	800511a <prvTraceGetQueueType>
 800292e:	0003      	movs	r3, r0
 8002930:	001a      	movs	r2, r3
 8002932:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d108      	bne.n	800294c <xQueueSemaphoreTake+0x124>
 800293a:	f002 fcf8 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800293e:	0003      	movs	r3, r0
 8002940:	0018      	movs	r0, r3
 8002942:	f002 fbf7 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8002946:	0003      	movs	r3, r0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e004      	b.n	8002956 <xQueueSemaphoreTake+0x12e>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	001a      	movs	r2, r3
 8002958:	0029      	movs	r1, r5
 800295a:	0020      	movs	r0, r4
 800295c:	f003 ff8a 	bl	8006874 <prvTraceSetObjectState>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	1e5a      	subs	r2, r3, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <xQueueSemaphoreTake+0x152>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002970:	f001 fea6 	bl	80046c0 <pvTaskIncrementMutexHeldCount>
 8002974:	0002      	movs	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <xQueueSemaphoreTake+0x16c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3310      	adds	r3, #16
 8002986:	0018      	movs	r0, r3
 8002988:	f001 f9ac 	bl	8003ce4 <xTaskRemoveFromEventList>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <xQueueSemaphoreTake+0x16c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002990:	f002 fa7e 	bl	8004e90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002994:	f002 fa9e 	bl	8004ed4 <vPortExitCritical>
                return pdPASS;
 8002998:	2301      	movs	r3, #1
 800299a:	e15f      	b.n	8002c5c <xQueueSemaphoreTake+0x434>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d13b      	bne.n	8002a1a <xQueueSemaphoreTake+0x1f2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80029a2:	f002 fa97 	bl	8004ed4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029a6:	f002 fcc2 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80029aa:	0003      	movs	r3, r0
 80029ac:	0018      	movs	r0, r3
 80029ae:	f002 fbcf 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80029b2:	0003      	movs	r3, r0
 80029b4:	001a      	movs	r2, r3
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d029      	beq.n	8002a16 <xQueueSemaphoreTake+0x1ee>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 fc15 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 80029ca:	0003      	movs	r3, r0
 80029cc:	001a      	movs	r2, r3
 80029ce:	4b74      	ldr	r3, [pc, #464]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01d      	beq.n	8002a16 <xQueueSemaphoreTake+0x1ee>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0018      	movs	r0, r3
 80029de:	f002 fb9c 	bl	800511a <prvTraceGetQueueType>
 80029e2:	0003      	movs	r3, r0
 80029e4:	001a      	movs	r2, r3
 80029e6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	3350      	adds	r3, #80	@ 0x50
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	001d      	movs	r5, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f002 fb91 	bl	800511a <prvTraceGetQueueType>
 80029f8:	0003      	movs	r3, r0
 80029fa:	001a      	movs	r2, r3
 80029fc:	4b69      	ldr	r3, [pc, #420]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 80029fe:	5c9c      	ldrb	r4, [r3, r2]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f002 fbe8 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	0021      	movs	r1, r4
 8002a10:	0028      	movs	r0, r5
 8002a12:	f003 fcf1 	bl	80063f8 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e120      	b.n	8002c5c <xQueueSemaphoreTake+0x434>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <xQueueSemaphoreTake+0x206>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a20:	230c      	movs	r3, #12
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	0018      	movs	r0, r3
 8002a26:	f001 fa47 	bl	8003eb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a2e:	f002 fa51 	bl	8004ed4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a32:	f000 fdc3 	bl	80035bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a36:	f002 fa3b 	bl	8004eb0 <vPortEnterCritical>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2244      	movs	r2, #68	@ 0x44
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	d103      	bne.n	8002a4e <xQueueSemaphoreTake+0x226>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2244      	movs	r2, #68	@ 0x44
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2245      	movs	r2, #69	@ 0x45
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	d103      	bne.n	8002a62 <xQueueSemaphoreTake+0x23a>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2245      	movs	r2, #69	@ 0x45
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	f002 fa37 	bl	8004ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a66:	003a      	movs	r2, r7
 8002a68:	230c      	movs	r3, #12
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f001 fa36 	bl	8003ee0 <xTaskCheckForTimeOut>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d000      	beq.n	8002a7a <xQueueSemaphoreTake+0x252>
 8002a78:	e096      	b.n	8002ba8 <xQueueSemaphoreTake+0x380>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fa1b 	bl	8002eb8 <prvIsQueueEmpty>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d100      	bne.n	8002a88 <xQueueSemaphoreTake+0x260>
 8002a86:	e07c      	b.n	8002b82 <xQueueSemaphoreTake+0x35a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8002a88:	f002 fc51 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f002 fb5e 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002a94:	0003      	movs	r3, r0
 8002a96:	001a      	movs	r2, r3
 8002a98:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d029      	beq.n	8002af8 <xQueueSemaphoreTake+0x2d0>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f002 fba4 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8002aac:	0003      	movs	r3, r0
 8002aae:	001a      	movs	r2, r3
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01d      	beq.n	8002af8 <xQueueSemaphoreTake+0x2d0>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f002 fb2b 	bl	800511a <prvTraceGetQueueType>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	3368      	adds	r3, #104	@ 0x68
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	001d      	movs	r5, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f002 fb20 	bl	800511a <prvTraceGetQueueType>
 8002ada:	0003      	movs	r3, r0
 8002adc:	001a      	movs	r2, r3
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 8002ae0:	5c9c      	ldrb	r4, [r3, r2]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f002 fb77 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002aea:	0003      	movs	r3, r0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	001a      	movs	r2, r3
 8002af0:	0021      	movs	r1, r4
 8002af2:	0028      	movs	r0, r5
 8002af4:	f003 fc80 	bl	80063f8 <prvTraceStoreKernelCall>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f002 fb0d 	bl	800511a <prvTraceGetQueueType>
 8002b00:	0003      	movs	r3, r0
 8002b02:	001a      	movs	r2, r3
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <xQueueSemaphoreTake+0x37c>)
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d018      	beq.n	8002b3e <xQueueSemaphoreTake+0x316>
 8002b0c:	f002 fc0f 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002b10:	0003      	movs	r3, r0
 8002b12:	0018      	movs	r0, r3
 8002b14:	f002 fb1c 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <xQueueSemaphoreTake+0x378>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <xQueueSemaphoreTake+0x316>
 8002b28:	f002 fc01 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f002 fb00 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8002b34:	0003      	movs	r3, r0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f003 fef3 	bl	8006924 <prvTraceSetTaskInstanceFinished>

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <xQueueSemaphoreTake+0x334>
                    {
                        taskENTER_CRITICAL();
 8002b46:	f002 f9b3 	bl	8004eb0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 fb18 	bl	8004184 <xTaskPriorityInherit>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]
                        }
                        taskEXIT_CRITICAL();
 8002b58:	f002 f9bc 	bl	8004ed4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3324      	adds	r3, #36	@ 0x24
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f001 f815 	bl	8003b94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 f945 	bl	8002dfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b72:	f000 fd2f 	bl	80035d4 <xTaskResumeAll>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d000      	beq.n	8002b7c <xQueueSemaphoreTake+0x354>
 8002b7a:	e685      	b.n	8002888 <xQueueSemaphoreTake+0x60>
                {
                    portYIELD_WITHIN_API();
 8002b7c:	f002 f988 	bl	8004e90 <vPortYield>
 8002b80:	e682      	b.n	8002888 <xQueueSemaphoreTake+0x60>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 f939 	bl	8002dfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b8a:	f000 fd23 	bl	80035d4 <xTaskResumeAll>
 8002b8e:	e67b      	b.n	8002888 <xQueueSemaphoreTake+0x60>
 8002b90:	000005fd 	.word	0x000005fd
 8002b94:	080085e0 	.word	0x080085e0
 8002b98:	00000601 	.word	0x00000601
 8002b9c:	00000606 	.word	0x00000606
 8002ba0:	20001dc8 	.word	0x20001dc8
 8002ba4:	20000008 	.word	0x20000008
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f926 	bl	8002dfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bb0:	f000 fd10 	bl	80035d4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 f97e 	bl	8002eb8 <prvIsQueueEmpty>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d100      	bne.n	8002bc2 <xQueueSemaphoreTake+0x39a>
 8002bc0:	e662      	b.n	8002888 <xQueueSemaphoreTake+0x60>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <xQueueSemaphoreTake+0x3c2>
                    {
                        taskENTER_CRITICAL();
 8002bc8:	f002 f972 	bl	8004eb0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f86d 	bl	8002cae <prvGetDisinheritPriorityAfterTimeout>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 fc81 	bl	80044e8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002be6:	f002 f975 	bl	8004ed4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bea:	f002 fba0 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f002 faad 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <xQueueSemaphoreTake+0x43c>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d029      	beq.n	8002c5a <xQueueSemaphoreTake+0x432>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f002 faf3 	bl	80051f4 <prvTraceGetQueueNumberHigh16>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	001a      	movs	r2, r3
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <xQueueSemaphoreTake+0x43c>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01d      	beq.n	8002c5a <xQueueSemaphoreTake+0x432>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f002 fa7a 	bl	800511a <prvTraceGetQueueType>
 8002c26:	0003      	movs	r3, r0
 8002c28:	001a      	movs	r2, r3
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <xQueueSemaphoreTake+0x440>)
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	3350      	adds	r3, #80	@ 0x50
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	001d      	movs	r5, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f002 fa6f 	bl	800511a <prvTraceGetQueueType>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	001a      	movs	r2, r3
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <xQueueSemaphoreTake+0x440>)
 8002c42:	5c9c      	ldrb	r4, [r3, r2]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f002 fac6 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	001a      	movs	r2, r3
 8002c52:	0021      	movs	r1, r4
 8002c54:	0028      	movs	r0, r5
 8002c56:	f003 fbcf 	bl	80063f8 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8002c5a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b00a      	add	sp, #40	@ 0x28
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	20001dc8 	.word	0x20001dc8
 8002c68:	20000008 	.word	0x20000008

08002c6c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	224c      	movs	r2, #76	@ 0x4c
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
    }
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}

08002cae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e001      	b.n	8002cd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    }
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10e      	bne.n	8002d16 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14e      	bne.n	8002d9e <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f001 fb15 	bl	8004334 <xTaskPriorityDisinherit>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e043      	b.n	8002d9e <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d119      	bne.n	8002d50 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6858      	ldr	r0, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	0019      	movs	r1, r3
 8002d28:	f005 fc44 	bl	80085b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	18d2      	adds	r2, r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d32b      	bcc.n	8002d9e <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e026      	b.n	8002d9e <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68d8      	ldr	r0, [r3, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	f005 fc2a 	bl	80085b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	425b      	negs	r3, r3
 8002d6a:	18d2      	adds	r2, r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	425b      	negs	r3, r3
 8002d86:	18d2      	adds	r2, r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d105      	bne.n	8002d9e <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002da6:	697b      	ldr	r3, [r7, #20]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b006      	add	sp, #24
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	18d2      	adds	r2, r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d303      	bcc.n	8002de4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f005 fbe0 	bl	80085b4 <memcpy>
    }
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e04:	f002 f854 	bl	8004eb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	2145      	movs	r1, #69	@ 0x45
 8002e10:	5c52      	ldrb	r2, [r2, r1]
 8002e12:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e14:	e013      	b.n	8002e3e <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3324      	adds	r3, #36	@ 0x24
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 ff5e 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002e2c:	f001 f8b2 	bl	8003f94 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e30:	210f      	movs	r1, #15
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	dce5      	bgt.n	8002e16 <prvUnlockQueue+0x1a>
 8002e4a:	e000      	b.n	8002e4e <prvUnlockQueue+0x52>
                    break;
 8002e4c:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2245      	movs	r2, #69	@ 0x45
 8002e52:	21ff      	movs	r1, #255	@ 0xff
 8002e54:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002e56:	f002 f83d 	bl	8004ed4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e5a:	f002 f829 	bl	8004eb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e5e:	230e      	movs	r3, #14
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	2144      	movs	r1, #68	@ 0x44
 8002e66:	5c52      	ldrb	r2, [r2, r1]
 8002e68:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e6a:	e013      	b.n	8002e94 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d016      	beq.n	8002ea2 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3310      	adds	r3, #16
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 ff33 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8002e82:	f001 f887 	bl	8003f94 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e86:	210e      	movs	r1, #14
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e94:	230e      	movs	r3, #14
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dce5      	bgt.n	8002e6c <prvUnlockQueue+0x70>
 8002ea0:	e000      	b.n	8002ea4 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8002ea2:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2244      	movs	r2, #68	@ 0x44
 8002ea8:	21ff      	movs	r1, #255	@ 0xff
 8002eaa:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002eac:	f002 f812 	bl	8004ed4 <vPortExitCritical>
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ec0:	f001 fff6 	bl	8004eb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e001      	b.n	8002ed6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ed6:	f001 fffd 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002eec:	f001 ffe0 	bl	8004eb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d102      	bne.n	8002f02 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e001      	b.n	8002f06 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f06:	f001 ffe5 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <vQueueAddToRegistry+0x20>
 8002f28:	4a27      	ldr	r2, [pc, #156]	@ (8002fc8 <vQueueAddToRegistry+0xb4>)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <vQueueAddToRegistry+0xb8>)
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f004 fea2 	bl	8007c78 <vAssertCalled>

        if( pcQueueName != NULL )
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d025      	beq.n	8002f86 <vQueueAddToRegistry+0x72>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e01f      	b.n	8002f80 <vQueueAddToRegistry+0x6c>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002f40:	4a23      	ldr	r2, [pc, #140]	@ (8002fd0 <vQueueAddToRegistry+0xbc>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	18d3      	adds	r3, r2, r3
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d105      	bne.n	8002f5e <vQueueAddToRegistry+0x4a>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	00da      	lsls	r2, r3, #3
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <vQueueAddToRegistry+0xbc>)
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	60bb      	str	r3, [r7, #8]
                    break;
 8002f5c:	e013      	b.n	8002f86 <vQueueAddToRegistry+0x72>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <vQueueAddToRegistry+0x66>
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <vQueueAddToRegistry+0xbc>)
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	00d2      	lsls	r2, r2, #3
 8002f6a:	58d3      	ldr	r3, [r2, r3]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <vQueueAddToRegistry+0x66>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	00da      	lsls	r2, r3, #3
 8002f74:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <vQueueAddToRegistry+0xbc>)
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	d9dc      	bls.n	8002f40 <vQueueAddToRegistry+0x2c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <vQueueAddToRegistry+0xaa>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f002 f8bd 	bl	800511a <prvTraceGetQueueType>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <vQueueAddToRegistry+0xc0>)
 8002fa6:	5c9c      	ldrb	r4, [r3, r2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f002 f914 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	0020      	movs	r0, r4
 8002fba:	f003 fe3f 	bl	8006c3c <prvTraceSetObjectName>
        }
    }
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b005      	add	sp, #20
 8002fc4:	bd90      	pop	{r4, r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	00000ad8 	.word	0x00000ad8
 8002fcc:	080085e0 	.word	0x080085e0
 8002fd0:	20000034 	.word	0x20000034
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fe8:	f001 ff62 	bl	8004eb0 <vPortEnterCritical>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2244      	movs	r2, #68	@ 0x44
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	d103      	bne.n	8003000 <vQueueWaitForMessageRestricted+0x28>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2244      	movs	r2, #68	@ 0x44
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2245      	movs	r2, #69	@ 0x45
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	b25b      	sxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	d103      	bne.n	8003014 <vQueueWaitForMessageRestricted+0x3c>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2245      	movs	r2, #69	@ 0x45
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]
 8003014:	f001 ff5e 	bl	8004ed4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3324      	adds	r3, #36	@ 0x24
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fdd9 	bl	8003be0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	0018      	movs	r0, r3
 8003032:	f7ff fee3 	bl	8002dfc <prvUnlockQueue>
    }
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b006      	add	sp, #24
 800303c:	bd80      	pop	{r7, pc}

0800303e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b08d      	sub	sp, #52	@ 0x34
 8003042:	af04      	add	r7, sp, #16
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800304e:	1dbb      	adds	r3, r7, #6
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	0018      	movs	r0, r3
 8003056:	f001 ffcb 	bl	8004ff0 <pvPortMalloc>
 800305a:	0003      	movs	r3, r0
 800305c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d016      	beq.n	8003092 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003064:	2060      	movs	r0, #96	@ 0x60
 8003066:	f001 ffc3 	bl	8004ff0 <pvPortMalloc>
 800306a:	0003      	movs	r3, r0
 800306c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2260      	movs	r2, #96	@ 0x60
 8003078:	2100      	movs	r1, #0
 800307a:	0018      	movs	r0, r3
 800307c:	f005 fa5c 	bl	8008538 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
 8003086:	e006      	b.n	8003096 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	0018      	movs	r0, r3
 800308c:	f002 f818 	bl	80050c0 <vPortFree>
 8003090:	e001      	b.n	8003096 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d016      	beq.n	80030ca <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	683c      	ldr	r4, [r7, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	0023      	movs	r3, r4
 80030b8:	f000 f810 	bl	80030dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f89a 	bl	80031f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030c4:	2301      	movs	r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e002      	b.n	80030d0 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030ca:	2301      	movs	r3, #1
 80030cc:	425b      	negs	r3, r3
 80030ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030d0:	69bb      	ldr	r3, [r7, #24]
    }
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b009      	add	sp, #36	@ 0x24
 80030d8:	bd90      	pop	{r4, r7, pc}
	...

080030dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	001a      	movs	r2, r3
 80030f4:	21a5      	movs	r1, #165	@ 0xa5
 80030f6:	f005 fa1f 	bl	8008538 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4939      	ldr	r1, [pc, #228]	@ (80031e8 <prvInitialiseNewTask+0x10c>)
 8003102:	468c      	mov	ip, r1
 8003104:	4463      	add	r3, ip
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	18d3      	adds	r3, r2, r3
 800310a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2207      	movs	r2, #7
 8003110:	4393      	bics	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2207      	movs	r2, #7
 8003118:	4013      	ands	r3, r2
 800311a:	d005      	beq.n	8003128 <prvInitialiseNewTask+0x4c>
 800311c:	4a33      	ldr	r2, [pc, #204]	@ (80031ec <prvInitialiseNewTask+0x110>)
 800311e:	4b34      	ldr	r3, [pc, #208]	@ (80031f0 <prvInitialiseNewTask+0x114>)
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f004 fda8 	bl	8007c78 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01f      	beq.n	800316e <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e013      	b.n	800315c <prvInitialiseNewTask+0x80>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	7818      	ldrb	r0, [r3, #0]
 800313c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800313e:	2134      	movs	r1, #52	@ 0x34
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	18d3      	adds	r3, r2, r3
 8003144:	185b      	adds	r3, r3, r1
 8003146:	1c02      	adds	r2, r0, #0
 8003148:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	18d3      	adds	r3, r2, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <prvInitialiseNewTask+0x88>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d9e8      	bls.n	8003134 <prvInitialiseNewTask+0x58>
 8003162:	e000      	b.n	8003166 <prvInitialiseNewTask+0x8a>
            {
                break;
 8003164:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	2243      	movs	r2, #67	@ 0x43
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d905      	bls.n	8003180 <prvInitialiseNewTask+0xa4>
 8003174:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <prvInitialiseNewTask+0x118>)
 8003176:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <prvInitialiseNewTask+0x114>)
 8003178:	0011      	movs	r1, r2
 800317a:	0018      	movs	r0, r3
 800317c:	f004 fd7c 	bl	8007c78 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d901      	bls.n	800318a <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003186:	2304      	movs	r3, #4
 8003188:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003198:	3304      	adds	r3, #4
 800319a:	0018      	movs	r0, r3
 800319c:	f7fe fbc0 	bl	8001920 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	3318      	adds	r3, #24
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fe fbbb 	bl	8001920 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2205      	movs	r2, #5
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f001 fdd0 	bl	8004d6c <pxPortInitialiseStack>
 80031cc:	0002      	movs	r2, r0
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <prvInitialiseNewTask+0x102>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	3fffffff 	.word	0x3fffffff
 80031ec:	0000035d 	.word	0x0000035d
 80031f0:	080085f4 	.word	0x080085f4
 80031f4:	00000392 	.word	0x00000392

080031f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003200:	f001 fe56 	bl	8004eb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003204:	4b7c      	ldr	r3, [pc, #496]	@ (80033f8 <prvAddNewTaskToReadyList+0x200>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <prvAddNewTaskToReadyList+0x200>)
 800320c:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800320e:	4b7b      	ldr	r3, [pc, #492]	@ (80033fc <prvAddNewTaskToReadyList+0x204>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003216:	4b79      	ldr	r3, [pc, #484]	@ (80033fc <prvAddNewTaskToReadyList+0x204>)
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800321c:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <prvAddNewTaskToReadyList+0x200>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d110      	bne.n	8003246 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003224:	f000 fef6 	bl	8004014 <prvInitialiseTaskLists>
 8003228:	e00d      	b.n	8003246 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800322a:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <prvAddNewTaskToReadyList+0x208>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003232:	4b72      	ldr	r3, [pc, #456]	@ (80033fc <prvAddNewTaskToReadyList+0x204>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	429a      	cmp	r2, r3
 800323e:	d802      	bhi.n	8003246 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003240:	4b6e      	ldr	r3, [pc, #440]	@ (80033fc <prvAddNewTaskToReadyList+0x204>)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003246:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <prvAddNewTaskToReadyList+0x20c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4b6d      	ldr	r3, [pc, #436]	@ (8003404 <prvAddNewTaskToReadyList+0x20c>)
 800324e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003250:	4b6c      	ldr	r3, [pc, #432]	@ (8003404 <prvAddNewTaskToReadyList+0x20c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d065      	beq.n	800332a <prvAddNewTaskToReadyList+0x132>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d04f      	beq.n	8003304 <prvAddNewTaskToReadyList+0x10c>
 8003264:	2003      	movs	r0, #3
 8003266:	f003 fbf1 	bl	8006a4c <prvTraceGetObjectHandle>
 800326a:	0003      	movs	r3, r0
 800326c:	001a      	movs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0011      	movs	r1, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f001 ff7b 	bl	800516e <prvTraceSetTaskNumberLow16>
 8003278:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <prvAddNewTaskToReadyList+0x210>)
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f001 ff8e 	bl	80051a2 <prvTraceSetTaskNumberHigh16>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f001 ff53 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800328e:	0003      	movs	r3, r0
 8003290:	b2d9      	uxtb	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3334      	adds	r3, #52	@ 0x34
 8003296:	001a      	movs	r2, r3
 8003298:	2003      	movs	r0, #3
 800329a:	f003 fccf 	bl	8006c3c <prvTraceSetObjectName>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f001 ff47 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80032a6:	0003      	movs	r3, r0
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	001a      	movs	r2, r3
 80032b2:	2003      	movs	r0, #3
 80032b4:	f003 fa82 	bl	80067bc <prvTraceSetPriorityProperty>
 80032b8:	f002 f839 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80032bc:	0003      	movs	r3, r0
 80032be:	0018      	movs	r0, r3
 80032c0:	f001 ff46 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80032c4:	0003      	movs	r3, r0
 80032c6:	001a      	movs	r2, r3
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <prvAddNewTaskToReadyList+0x214>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02a      	beq.n	800332a <prvAddNewTaskToReadyList+0x132>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f001 ff3a 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80032dc:	0003      	movs	r3, r0
 80032de:	001a      	movs	r2, r3
 80032e0:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <prvAddNewTaskToReadyList+0x214>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	4013      	ands	r3, r2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01e      	beq.n	800332a <prvAddNewTaskToReadyList+0x132>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 ff20 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80032f4:	0003      	movs	r3, r0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	001a      	movs	r2, r3
 80032fa:	2103      	movs	r1, #3
 80032fc:	201b      	movs	r0, #27
 80032fe:	f003 f87b 	bl	80063f8 <prvTraceStoreKernelCall>
 8003302:	e012      	b.n	800332a <prvAddNewTaskToReadyList+0x132>
 8003304:	f002 f813 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003308:	0003      	movs	r3, r0
 800330a:	0018      	movs	r0, r3
 800330c:	f001 ff20 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003310:	0003      	movs	r3, r0
 8003312:	001a      	movs	r2, r3
 8003314:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <prvAddNewTaskToReadyList+0x214>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	4013      	ands	r3, r2
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <prvAddNewTaskToReadyList+0x132>
 8003320:	2200      	movs	r2, #0
 8003322:	2103      	movs	r1, #3
 8003324:	201b      	movs	r0, #27
 8003326:	f003 f867 	bl	80063f8 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f001 ff0f 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003332:	0003      	movs	r3, r0
 8003334:	001a      	movs	r2, r3
 8003336:	4b35      	ldr	r3, [pc, #212]	@ (800340c <prvAddNewTaskToReadyList+0x214>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	4013      	ands	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <prvAddNewTaskToReadyList+0x15c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f001 fef5 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800334a:	0003      	movs	r3, r0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	0018      	movs	r0, r3
 8003350:	f002 ff44 	bl	80061dc <prvTraceStoreTaskReady>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <prvAddNewTaskToReadyList+0x218>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d903      	bls.n	8003368 <prvAddNewTaskToReadyList+0x170>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003364:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <prvAddNewTaskToReadyList+0x218>)
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336c:	4929      	ldr	r1, [pc, #164]	@ (8003414 <prvAddNewTaskToReadyList+0x21c>)
 800336e:	0013      	movs	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	189b      	adds	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	18cb      	adds	r3, r1, r3
 8003378:	3304      	adds	r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	3204      	adds	r2, #4
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a2:	0013      	movs	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003414 <prvAddNewTaskToReadyList+0x21c>)
 80033ac:	189a      	adds	r2, r3, r2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	615a      	str	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b6:	4917      	ldr	r1, [pc, #92]	@ (8003414 <prvAddNewTaskToReadyList+0x21c>)
 80033b8:	0013      	movs	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	585b      	ldr	r3, [r3, r1]
 80033c2:	1c58      	adds	r0, r3, #1
 80033c4:	4913      	ldr	r1, [pc, #76]	@ (8003414 <prvAddNewTaskToReadyList+0x21c>)
 80033c6:	0013      	movs	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80033d0:	f001 fd80 	bl	8004ed4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80033d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <prvAddNewTaskToReadyList+0x208>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <prvAddNewTaskToReadyList+0x1f6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033dc:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <prvAddNewTaskToReadyList+0x204>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d201      	bcs.n	80033ee <prvAddNewTaskToReadyList+0x1f6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80033ea:	f001 fd51 	bl	8004e90 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b004      	add	sp, #16
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	20000130 	.word	0x20000130
 80033fc:	20000084 	.word	0x20000084
 8003400:	2000013c 	.word	0x2000013c
 8003404:	2000014c 	.word	0x2000014c
 8003408:	20001dca 	.word	0x20001dca
 800340c:	20001dc8 	.word	0x20001dc8
 8003410:	20000138 	.word	0x20000138
 8003414:	20000088 	.word	0x20000088

08003418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d049      	beq.n	80034be <vTaskDelay+0xa6>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <vTaskDelay+0xb8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <vTaskDelay+0x26>
 8003432:	4a28      	ldr	r2, [pc, #160]	@ (80034d4 <vTaskDelay+0xbc>)
 8003434:	4b28      	ldr	r3, [pc, #160]	@ (80034d8 <vTaskDelay+0xc0>)
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f004 fc1d 	bl	8007c78 <vAssertCalled>
            vTaskSuspendAll();
 800343e:	f000 f8bd 	bl	80035bc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003442:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <vTaskDelay+0xc4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0018      	movs	r0, r3
 8003448:	f001 fe82 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <vTaskDelay+0xc8>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <vTaskDelay+0x62>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0019      	movs	r1, r3
 8003460:	2089      	movs	r0, #137	@ 0x89
 8003462:	f003 f8cd 	bl	8006600 <prvTraceStoreKernelCallWithNumericParamOnly>
 8003466:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <vTaskDelay+0xc4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0018      	movs	r0, r3
 800346c:	f001 fe62 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8003470:	0003      	movs	r3, r0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	0018      	movs	r0, r3
 8003476:	f003 fa55 	bl	8006924 <prvTraceSetTaskInstanceFinished>
 800347a:	f001 ff58 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800347e:	0003      	movs	r3, r0
 8003480:	0018      	movs	r0, r3
 8003482:	f001 fe65 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003486:	0003      	movs	r3, r0
 8003488:	001a      	movs	r2, r3
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <vTaskDelay+0xc8>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <vTaskDelay+0x94>
 8003496:	f001 ff4a 	bl	800532e <prvTraceGetCurrentTaskHandle>
 800349a:	0003      	movs	r3, r0
 800349c:	0018      	movs	r0, r3
 800349e:	f001 fe49 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80034a2:	0003      	movs	r3, r0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	0018      	movs	r0, r3
 80034a8:	f003 fa3c 	bl	8006924 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2100      	movs	r1, #0
 80034b0:	0018      	movs	r0, r3
 80034b2:	f001 f917 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80034b6:	f000 f88d 	bl	80035d4 <xTaskResumeAll>
 80034ba:	0003      	movs	r3, r0
 80034bc:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <vTaskDelay+0xb0>
        {
            portYIELD_WITHIN_API();
 80034c4:	f001 fce4 	bl	8004e90 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000158 	.word	0x20000158
 80034d4:	0000051c 	.word	0x0000051c
 80034d8:	080085f4 	.word	0x080085f4
 80034dc:	20000084 	.word	0x20000084
 80034e0:	20001dc8 	.word	0x20001dc8

080034e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80034ea:	4929      	ldr	r1, [pc, #164]	@ (8003590 <vTaskStartScheduler+0xac>)
 80034ec:	4829      	ldr	r0, [pc, #164]	@ (8003594 <vTaskStartScheduler+0xb0>)
 80034ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003598 <vTaskStartScheduler+0xb4>)
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2300      	movs	r3, #0
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	f7ff fda0 	bl	800303e <xTaskCreate>
 80034fe:	0003      	movs	r3, r0
 8003500:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d103      	bne.n	8003510 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003508:	f001 f930 	bl	800476c <xTimerCreateTimerTask>
 800350c:	0003      	movs	r3, r0
 800350e:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d12c      	bne.n	8003570 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003516:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003518:	4b20      	ldr	r3, [pc, #128]	@ (800359c <vTaskStartScheduler+0xb8>)
 800351a:	2201      	movs	r2, #1
 800351c:	4252      	negs	r2, r2
 800351e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003520:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <vTaskStartScheduler+0xbc>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003526:	4b1f      	ldr	r3, [pc, #124]	@ (80035a4 <vTaskStartScheduler+0xc0>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <vTaskStartScheduler+0xc4>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f001 fefc 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003536:	0003      	movs	r3, r0
 8003538:	0018      	movs	r0, r3
 800353a:	f001 fe09 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 800353e:	0003      	movs	r3, r0
 8003540:	001a      	movs	r2, r3
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <vTaskStartScheduler+0xc8>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <vTaskStartScheduler+0x80>
 800354e:	f001 feee 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003552:	0003      	movs	r3, r0
 8003554:	0018      	movs	r0, r3
 8003556:	f001 fded 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800355a:	0003      	movs	r3, r0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	0018      	movs	r0, r3
 8003560:	f003 f8b8 	bl	80066d4 <prvTraceStoreTaskswitch>
 8003564:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <vTaskStartScheduler+0xc4>)
 8003566:	2202      	movs	r2, #2
 8003568:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800356a:	f001 fc6d 	bl	8004e48 <xPortStartScheduler>
 800356e:	e008      	b.n	8003582 <vTaskStartScheduler+0x9e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3301      	adds	r3, #1
 8003574:	d105      	bne.n	8003582 <vTaskStartScheduler+0x9e>
 8003576:	4a0e      	ldr	r2, [pc, #56]	@ (80035b0 <vTaskStartScheduler+0xcc>)
 8003578:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <vTaskStartScheduler+0xd0>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f004 fb7b 	bl	8007c78 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <vTaskStartScheduler+0xd4>)
 8003584:	681b      	ldr	r3, [r3, #0]
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	08008608 	.word	0x08008608
 8003594:	08003ff5 	.word	0x08003ff5
 8003598:	20000154 	.word	0x20000154
 800359c:	20000150 	.word	0x20000150
 80035a0:	2000013c 	.word	0x2000013c
 80035a4:	20000134 	.word	0x20000134
 80035a8:	20001db0 	.word	0x20001db0
 80035ac:	20001dc8 	.word	0x20001dc8
 80035b0:	00000812 	.word	0x00000812
 80035b4:	080085f4 	.word	0x080085f4
 80035b8:	20000000 	.word	0x20000000

080035bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <vTaskSuspendAll+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	4b02      	ldr	r3, [pc, #8]	@ (80035d0 <vTaskSuspendAll+0x14>)
 80035c8:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000158 	.word	0x20000158

080035d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80035e2:	4b75      	ldr	r3, [pc, #468]	@ (80037b8 <xTaskResumeAll+0x1e4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <xTaskResumeAll+0x22>
 80035ea:	4a74      	ldr	r2, [pc, #464]	@ (80037bc <xTaskResumeAll+0x1e8>)
 80035ec:	4b74      	ldr	r3, [pc, #464]	@ (80037c0 <xTaskResumeAll+0x1ec>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f004 fb41 	bl	8007c78 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035f6:	f001 fc5b 	bl	8004eb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035fa:	4b6f      	ldr	r3, [pc, #444]	@ (80037b8 <xTaskResumeAll+0x1e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	4b6d      	ldr	r3, [pc, #436]	@ (80037b8 <xTaskResumeAll+0x1e4>)
 8003602:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003604:	4b6c      	ldr	r3, [pc, #432]	@ (80037b8 <xTaskResumeAll+0x1e4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d000      	beq.n	800360e <xTaskResumeAll+0x3a>
 800360c:	e0cc      	b.n	80037a8 <xTaskResumeAll+0x1d4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800360e:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <xTaskResumeAll+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <xTaskResumeAll+0x44>
 8003616:	e0c7      	b.n	80037a8 <xTaskResumeAll+0x1d4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003618:	e09e      	b.n	8003758 <xTaskResumeAll+0x184>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361a:	4b6b      	ldr	r3, [pc, #428]	@ (80037c8 <xTaskResumeAll+0x1f4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	6a12      	ldr	r2, [r2, #32]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	69d2      	ldr	r2, [r2, #28]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3318      	adds	r3, #24
 8003644:	429a      	cmp	r2, r3
 8003646:	d103      	bne.n	8003650 <xTaskResumeAll+0x7c>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	@ 0x28
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3304      	adds	r3, #4
 8003682:	429a      	cmp	r2, r3
 8003684:	d103      	bne.n	800368e <xTaskResumeAll+0xba>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f001 fd55 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80036a6:	0003      	movs	r3, r0
 80036a8:	001a      	movs	r2, r3
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <xTaskResumeAll+0x1f8>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <xTaskResumeAll+0xf4>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f001 fd3b 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80036be:	0003      	movs	r3, r0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	0018      	movs	r0, r3
 80036c4:	f002 fd8a 	bl	80061dc <prvTraceStoreTaskReady>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036cc:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <xTaskResumeAll+0x1fc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d903      	bls.n	80036dc <xTaskResumeAll+0x108>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	4b3d      	ldr	r3, [pc, #244]	@ (80037d0 <xTaskResumeAll+0x1fc>)
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	493c      	ldr	r1, [pc, #240]	@ (80037d4 <xTaskResumeAll+0x200>)
 80036e2:	0013      	movs	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	189b      	adds	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	18cb      	adds	r3, r1, r3
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	3204      	adds	r2, #4
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	0013      	movs	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	189b      	adds	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a2d      	ldr	r2, [pc, #180]	@ (80037d4 <xTaskResumeAll+0x200>)
 8003720:	189a      	adds	r2, r3, r2
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	492a      	ldr	r1, [pc, #168]	@ (80037d4 <xTaskResumeAll+0x200>)
 800372c:	0013      	movs	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	189b      	adds	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	585b      	ldr	r3, [r3, r1]
 8003736:	1c58      	adds	r0, r3, #1
 8003738:	4926      	ldr	r1, [pc, #152]	@ (80037d4 <xTaskResumeAll+0x200>)
 800373a:	0013      	movs	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	189b      	adds	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003748:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <xTaskResumeAll+0x204>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <xTaskResumeAll+0x184>
                    {
                        xYieldPending = pdTRUE;
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <xTaskResumeAll+0x208>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <xTaskResumeAll+0x1f4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d000      	beq.n	8003762 <xTaskResumeAll+0x18e>
 8003760:	e75b      	b.n	800361a <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <xTaskResumeAll+0x198>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003768:	f000 fcc8 	bl	80040fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800376c:	4b1c      	ldr	r3, [pc, #112]	@ (80037e0 <xTaskResumeAll+0x20c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00f      	beq.n	8003798 <xTaskResumeAll+0x1c4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003778:	f000 f84c 	bl	8003814 <xTaskIncrementTick>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d002      	beq.n	8003786 <xTaskResumeAll+0x1b2>
                            {
                                xYieldPending = pdTRUE;
 8003780:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <xTaskResumeAll+0x208>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b01      	subs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f2      	bne.n	8003778 <xTaskResumeAll+0x1a4>

                        xPendedTicks = 0;
 8003792:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <xTaskResumeAll+0x20c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003798:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <xTaskResumeAll+0x208>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <xTaskResumeAll+0x1d4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80037a4:	f001 fb74 	bl	8004e90 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80037a8:	f001 fb94 	bl	8004ed4 <vPortExitCritical>

    return xAlreadyYielded;
 80037ac:	693b      	ldr	r3, [r7, #16]
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b006      	add	sp, #24
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000158 	.word	0x20000158
 80037bc:	00000885 	.word	0x00000885
 80037c0:	080085f4 	.word	0x080085f4
 80037c4:	20000130 	.word	0x20000130
 80037c8:	2000011c 	.word	0x2000011c
 80037cc:	20001dc8 	.word	0x20001dc8
 80037d0:	20000138 	.word	0x20000138
 80037d4:	20000088 	.word	0x20000088
 80037d8:	20000084 	.word	0x20000084
 80037dc:	20000144 	.word	0x20000144
 80037e0:	20000140 	.word	0x20000140

080037e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80037ea:	4b04      	ldr	r3, [pc, #16]	@ (80037fc <xTaskGetTickCount+0x18>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80037f0:	687b      	ldr	r3, [r7, #4]
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b002      	add	sp, #8
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	20000134 	.word	0x20000134

08003800 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8003804:	4b02      	ldr	r3, [pc, #8]	@ (8003810 <uxTaskGetNumberOfTasks+0x10>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000130 	.word	0x20000130

08003814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 800381e:	4b87      	ldr	r3, [pc, #540]	@ (8003a3c <xTaskIncrementTick+0x228>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d003      	beq.n	800382e <xTaskIncrementTick+0x1a>
 8003826:	4b86      	ldr	r3, [pc, #536]	@ (8003a40 <xTaskIncrementTick+0x22c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <xTaskIncrementTick+0x2a>
 800382e:	4b85      	ldr	r3, [pc, #532]	@ (8003a44 <xTaskIncrementTick+0x230>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4b83      	ldr	r3, [pc, #524]	@ (8003a44 <xTaskIncrementTick+0x230>)
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	2000      	movs	r0, #0
 800383a:	f003 fe15 	bl	8007468 <prvTracePortGetTimeStamp>
 800383e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a3c <xTaskIncrementTick+0x228>)
 8003840:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003842:	4b7e      	ldr	r3, [pc, #504]	@ (8003a3c <xTaskIncrementTick+0x228>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d000      	beq.n	800384c <xTaskIncrementTick+0x38>
 800384a:	e0ec      	b.n	8003a26 <xTaskIncrementTick+0x212>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800384c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a48 <xTaskIncrementTick+0x234>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003854:	4b7c      	ldr	r3, [pc, #496]	@ (8003a48 <xTaskIncrementTick+0x234>)
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11b      	bne.n	8003898 <xTaskIncrementTick+0x84>
        {
            taskSWITCH_DELAYED_LISTS();
 8003860:	4b7a      	ldr	r3, [pc, #488]	@ (8003a4c <xTaskIncrementTick+0x238>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <xTaskIncrementTick+0x62>
 800386a:	4a79      	ldr	r2, [pc, #484]	@ (8003a50 <xTaskIncrementTick+0x23c>)
 800386c:	4b79      	ldr	r3, [pc, #484]	@ (8003a54 <xTaskIncrementTick+0x240>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f004 fa01 	bl	8007c78 <vAssertCalled>
 8003876:	4b75      	ldr	r3, [pc, #468]	@ (8003a4c <xTaskIncrementTick+0x238>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	4b76      	ldr	r3, [pc, #472]	@ (8003a58 <xTaskIncrementTick+0x244>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b72      	ldr	r3, [pc, #456]	@ (8003a4c <xTaskIncrementTick+0x238>)
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b74      	ldr	r3, [pc, #464]	@ (8003a58 <xTaskIncrementTick+0x244>)
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4b74      	ldr	r3, [pc, #464]	@ (8003a5c <xTaskIncrementTick+0x248>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	4b72      	ldr	r3, [pc, #456]	@ (8003a5c <xTaskIncrementTick+0x248>)
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f000 fc32 	bl	80040fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003898:	4b71      	ldr	r3, [pc, #452]	@ (8003a60 <xTaskIncrementTick+0x24c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d200      	bcs.n	80038a4 <xTaskIncrementTick+0x90>
 80038a2:	e0b9      	b.n	8003a18 <xTaskIncrementTick+0x204>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a4:	4b69      	ldr	r3, [pc, #420]	@ (8003a4c <xTaskIncrementTick+0x238>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <xTaskIncrementTick+0xa4>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <xTaskIncrementTick+0x24c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	4252      	negs	r2, r2
 80038b4:	601a      	str	r2, [r3, #0]
                    break;
 80038b6:	e0af      	b.n	8003a18 <xTaskIncrementTick+0x204>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b8:	4b64      	ldr	r3, [pc, #400]	@ (8003a4c <xTaskIncrementTick+0x238>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d203      	bcs.n	80038d8 <xTaskIncrementTick+0xc4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038d0:	4b63      	ldr	r3, [pc, #396]	@ (8003a60 <xTaskIncrementTick+0x24c>)
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80038d6:	e09f      	b.n	8003a18 <xTaskIncrementTick+0x204>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3304      	adds	r3, #4
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d103      	bne.n	8003906 <xTaskIncrementTick+0xf2>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <xTaskIncrementTick+0x148>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	6a12      	ldr	r2, [r2, #32]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	69d2      	ldr	r2, [r2, #28]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	3318      	adds	r3, #24
 8003940:	429a      	cmp	r2, r3
 8003942:	d103      	bne.n	800394c <xTaskIncrementTick+0x138>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2200      	movs	r2, #0
 8003950:	629a      	str	r2, [r3, #40]	@ 0x28
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	0018      	movs	r0, r3
 8003960:	f001 fbf6 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003964:	0003      	movs	r3, r0
 8003966:	001a      	movs	r2, r3
 8003968:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <xTaskIncrementTick+0x250>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <xTaskIncrementTick+0x172>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	0018      	movs	r0, r3
 8003978:	f001 fbdc 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800397c:	0003      	movs	r3, r0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	0018      	movs	r0, r3
 8003982:	f002 fc2b 	bl	80061dc <prvTraceStoreTaskReady>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398a:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <xTaskIncrementTick+0x254>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d903      	bls.n	800399a <xTaskIncrementTick+0x186>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003996:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <xTaskIncrementTick+0x254>)
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	4933      	ldr	r1, [pc, #204]	@ (8003a6c <xTaskIncrementTick+0x258>)
 80039a0:	0013      	movs	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	18cb      	adds	r3, r1, r3
 80039aa:	3304      	adds	r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	3204      	adds	r2, #4
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d4:	0013      	movs	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4a23      	ldr	r2, [pc, #140]	@ (8003a6c <xTaskIncrementTick+0x258>)
 80039de:	189a      	adds	r2, r3, r2
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	615a      	str	r2, [r3, #20]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e8:	4920      	ldr	r1, [pc, #128]	@ (8003a6c <xTaskIncrementTick+0x258>)
 80039ea:	0013      	movs	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	585b      	ldr	r3, [r3, r1]
 80039f4:	1c58      	adds	r0, r3, #1
 80039f6:	491d      	ldr	r1, [pc, #116]	@ (8003a6c <xTaskIncrementTick+0x258>)
 80039f8:	0013      	movs	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <xTaskIncrementTick+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d800      	bhi.n	8003a12 <xTaskIncrementTick+0x1fe>
 8003a10:	e748      	b.n	80038a4 <xTaskIncrementTick+0x90>
                        {
                            xSwitchRequired = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	e745      	b.n	80038a4 <xTaskIncrementTick+0x90>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <xTaskIncrementTick+0x260>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <xTaskIncrementTick+0x21c>
            {
                xSwitchRequired = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e004      	b.n	8003a30 <xTaskIncrementTick+0x21c>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <xTaskIncrementTick+0x22c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <xTaskIncrementTick+0x22c>)
 8003a2e:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003a30:	69fb      	ldr	r3, [r7, #28]
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b008      	add	sp, #32
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	20000158 	.word	0x20000158
 8003a40:	20000140 	.word	0x20000140
 8003a44:	20001da4 	.word	0x20001da4
 8003a48:	20000134 	.word	0x20000134
 8003a4c:	20000114 	.word	0x20000114
 8003a50:	00000ab7 	.word	0x00000ab7
 8003a54:	080085f4 	.word	0x080085f4
 8003a58:	20000118 	.word	0x20000118
 8003a5c:	20000148 	.word	0x20000148
 8003a60:	20000150 	.word	0x20000150
 8003a64:	20001dc8 	.word	0x20001dc8
 8003a68:	20000138 	.word	0x20000138
 8003a6c:	20000088 	.word	0x20000088
 8003a70:	20000084 	.word	0x20000084
 8003a74:	20000144 	.word	0x20000144

08003a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b70 <vTaskSwitchContext+0xf8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <vTaskSwitchContext+0xfc>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003a8c:	e06b      	b.n	8003b66 <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 8003a8e:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <vTaskSwitchContext+0xfc>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8003a94:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <vTaskSwitchContext+0x100>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b37      	ldr	r3, [pc, #220]	@ (8003b78 <vTaskSwitchContext+0x100>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d808      	bhi.n	8003ab6 <vTaskSwitchContext+0x3e>
 8003aa4:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <vTaskSwitchContext+0x100>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <vTaskSwitchContext+0x100>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3334      	adds	r3, #52	@ 0x34
 8003aae:	0019      	movs	r1, r3
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	f004 f967 	bl	8007d84 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab6:	4b31      	ldr	r3, [pc, #196]	@ (8003b7c <vTaskSwitchContext+0x104>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e00b      	b.n	8003ad6 <vTaskSwitchContext+0x5e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <vTaskSwitchContext+0x58>
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <vTaskSwitchContext+0x108>)
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <vTaskSwitchContext+0x10c>)
 8003ac8:	0011      	movs	r1, r2
 8003aca:	0018      	movs	r0, r3
 8003acc:	f004 f8d4 	bl	8007c78 <vAssertCalled>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	492c      	ldr	r1, [pc, #176]	@ (8003b88 <vTaskSwitchContext+0x110>)
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	0013      	movs	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	585b      	ldr	r3, [r3, r1]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ea      	beq.n	8003abe <vTaskSwitchContext+0x46>
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	0013      	movs	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <vTaskSwitchContext+0x110>)
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d104      	bne.n	8003b18 <vTaskSwitchContext+0xa0>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <vTaskSwitchContext+0x100>)
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <vTaskSwitchContext+0x104>)
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8003b28:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <vTaskSwitchContext+0x114>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f001 fbfe 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003b32:	0003      	movs	r3, r0
 8003b34:	0018      	movs	r0, r3
 8003b36:	f001 fb0b 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <vTaskSwitchContext+0x118>)
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <vTaskSwitchContext+0xe8>
 8003b4a:	f001 fbf0 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	0018      	movs	r0, r3
 8003b52:	f001 faef 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8003b56:	0003      	movs	r3, r0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f002 fdba 	bl	80066d4 <prvTraceStoreTaskswitch>
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <vTaskSwitchContext+0x114>)
 8003b62:	2202      	movs	r2, #2
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000158 	.word	0x20000158
 8003b74:	20000144 	.word	0x20000144
 8003b78:	20000084 	.word	0x20000084
 8003b7c:	20000138 	.word	0x20000138
 8003b80:	00000bf6 	.word	0x00000bf6
 8003b84:	080085f4 	.word	0x080085f4
 8003b88:	20000088 	.word	0x20000088
 8003b8c:	20001db0 	.word	0x20001db0
 8003b90:	20001dc8 	.word	0x20001dc8

08003b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <vTaskPlaceOnEventList+0x1c>
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd4 <vTaskPlaceOnEventList+0x40>)
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <vTaskPlaceOnEventList+0x44>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f004 f864 	bl	8007c78 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <vTaskPlaceOnEventList+0x48>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0011      	movs	r1, r2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7fd feba 	bl	8001936 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 fd8c 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	00000c0e 	.word	0x00000c0e
 8003bd8:	080085f4 	.word	0x080085f4
 8003bdc:	20000084 	.word	0x20000084

08003be0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <vTaskPlaceOnEventListRestricted+0x1e>
 8003bf2:	4a37      	ldr	r2, [pc, #220]	@ (8003cd0 <vTaskPlaceOnEventListRestricted+0xf0>)
 8003bf4:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <vTaskPlaceOnEventListRestricted+0xf4>)
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f004 f83d 	bl	8007c78 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	61da      	str	r2, [r3, #28]
 8003c0c:	4b32      	ldr	r3, [pc, #200]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	6892      	ldr	r2, [r2, #8]
 8003c14:	621a      	str	r2, [r3, #32]
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	3218      	adds	r2, #24
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3318      	adds	r3, #24
 8003c28:	001a      	movs	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <vTaskPlaceOnEventListRestricted+0x6c>
        {
            xTicksToWait = portMAX_DELAY;
 8003c46:	2301      	movs	r3, #1
 8003c48:	425b      	negs	r3, r3
 8003c4a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003c4c:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f001 fa7d 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003c56:	0003      	movs	r3, r0
 8003c58:	001a      	movs	r2, r3
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <vTaskPlaceOnEventListRestricted+0xfc>)
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <vTaskPlaceOnEventListRestricted+0xaa>
 8003c66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <vTaskPlaceOnEventListRestricted+0x100>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	0019      	movs	r1, r3
 8003c70:	2088      	movs	r0, #136	@ 0x88
 8003c72:	f002 fcc5 	bl	8006600 <prvTraceStoreKernelCallWithNumericParamOnly>
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <vTaskPlaceOnEventListRestricted+0xf8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f001 fa5a 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8003c80:	0003      	movs	r3, r0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	0018      	movs	r0, r3
 8003c86:	f002 fe4d 	bl	8006924 <prvTraceSetTaskInstanceFinished>
 8003c8a:	f001 fb50 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	0018      	movs	r0, r3
 8003c92:	f001 fa5d 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003c96:	0003      	movs	r3, r0
 8003c98:	001a      	movs	r2, r3
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <vTaskPlaceOnEventListRestricted+0xfc>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <vTaskPlaceOnEventListRestricted+0xdc>
 8003ca6:	f001 fb42 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8003caa:	0003      	movs	r3, r0
 8003cac:	0018      	movs	r0, r3
 8003cae:	f001 fa41 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f002 fe34 	bl	8006924 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fd0e 	bl	80046e4 <prvAddCurrentTaskToDelayedList>
    }
 8003cc8:	46c0      	nop			@ (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b006      	add	sp, #24
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	00000c44 	.word	0x00000c44
 8003cd4:	080085f4 	.word	0x080085f4
 8003cd8:	20000084 	.word	0x20000084
 8003cdc:	20001dc8 	.word	0x20001dc8
 8003ce0:	20000134 	.word	0x20000134

08003ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <xTaskRemoveFromEventList+0x22>
 8003cfa:	4a66      	ldr	r2, [pc, #408]	@ (8003e94 <xTaskRemoveFromEventList+0x1b0>)
 8003cfc:	4b66      	ldr	r3, [pc, #408]	@ (8003e98 <xTaskRemoveFromEventList+0x1b4>)
 8003cfe:	0011      	movs	r1, r2
 8003d00:	0018      	movs	r0, r3
 8003d02:	f003 ffb9 	bl	8007c78 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	6a12      	ldr	r2, [r2, #32]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	69d2      	ldr	r2, [r2, #28]
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3318      	adds	r3, #24
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d103      	bne.n	8003d34 <xTaskRemoveFromEventList+0x50>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b55      	ldr	r3, [pc, #340]	@ (8003e9c <xTaskRemoveFromEventList+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d172      	bne.n	8003e32 <xTaskRemoveFromEventList+0x14e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d103      	bne.n	8003d7a <xTaskRemoveFromEventList+0x96>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f001 f9df 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8003d92:	0003      	movs	r3, r0
 8003d94:	001a      	movs	r2, r3
 8003d96:	4b42      	ldr	r3, [pc, #264]	@ (8003ea0 <xTaskRemoveFromEventList+0x1bc>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <xTaskRemoveFromEventList+0xd0>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f001 f9c5 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8003daa:	0003      	movs	r3, r0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	0018      	movs	r0, r3
 8003db0:	f002 fa14 	bl	80061dc <prvTraceStoreTaskReady>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <xTaskRemoveFromEventList+0x1c0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <xTaskRemoveFromEventList+0xe4>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <xTaskRemoveFromEventList+0x1c0>)
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dcc:	4936      	ldr	r1, [pc, #216]	@ (8003ea8 <xTaskRemoveFromEventList+0x1c4>)
 8003dce:	0013      	movs	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	18cb      	adds	r3, r1, r3
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	3204      	adds	r2, #4
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	0013      	movs	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <xTaskRemoveFromEventList+0x1c4>)
 8003e0c:	189a      	adds	r2, r3, r2
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	615a      	str	r2, [r3, #20]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e16:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <xTaskRemoveFromEventList+0x1c4>)
 8003e18:	0013      	movs	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	585b      	ldr	r3, [r3, r1]
 8003e22:	1c58      	adds	r0, r3, #1
 8003e24:	4920      	ldr	r1, [pc, #128]	@ (8003ea8 <xTaskRemoveFromEventList+0x1c4>)
 8003e26:	0013      	movs	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	5058      	str	r0, [r3, r1]
 8003e30:	e01b      	b.n	8003e6a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <xTaskRemoveFromEventList+0x1c8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	61da      	str	r2, [r3, #28]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	621a      	str	r2, [r3, #32]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	3218      	adds	r2, #24
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3318      	adds	r3, #24
 8003e54:	001a      	movs	r2, r3
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4a13      	ldr	r2, [pc, #76]	@ (8003eac <xTaskRemoveFromEventList+0x1c8>)
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e60:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <xTaskRemoveFromEventList+0x1c8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <xTaskRemoveFromEventList+0x1c8>)
 8003e68:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <xTaskRemoveFromEventList+0x1cc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d905      	bls.n	8003e84 <xTaskRemoveFromEventList+0x1a0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <xTaskRemoveFromEventList+0x1d0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e001      	b.n	8003e88 <xTaskRemoveFromEventList+0x1a4>
    }
    else
    {
        xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003e88:	69fb      	ldr	r3, [r7, #28]
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b008      	add	sp, #32
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	00000c74 	.word	0x00000c74
 8003e98:	080085f4 	.word	0x080085f4
 8003e9c:	20000158 	.word	0x20000158
 8003ea0:	20001dc8 	.word	0x20001dc8
 8003ea4:	20000138 	.word	0x20000138
 8003ea8:	20000088 	.word	0x20000088
 8003eac:	2000011c 	.word	0x2000011c
 8003eb0:	20000084 	.word	0x20000084
 8003eb4:	20000144 	.word	0x20000144

08003eb8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <vTaskInternalSetTimeOutState+0x20>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <vTaskInternalSetTimeOutState+0x24>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	605a      	str	r2, [r3, #4]
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000148 	.word	0x20000148
 8003edc:	20000134 	.word	0x20000134

08003ee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <xTaskCheckForTimeOut+0x1c>
 8003ef0:	4a24      	ldr	r2, [pc, #144]	@ (8003f84 <xTaskCheckForTimeOut+0xa4>)
 8003ef2:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <xTaskCheckForTimeOut+0xa8>)
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f003 febe 	bl	8007c78 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <xTaskCheckForTimeOut+0x30>
 8003f02:	23cf      	movs	r3, #207	@ 0xcf
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	4b20      	ldr	r3, [pc, #128]	@ (8003f88 <xTaskCheckForTimeOut+0xa8>)
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f003 feb4 	bl	8007c78 <vAssertCalled>

    taskENTER_CRITICAL();
 8003f10:	f000 ffce 	bl	8004eb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003f14:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <xTaskCheckForTimeOut+0xac>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <xTaskCheckForTimeOut+0xb0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d00a      	beq.n	8003f46 <xTaskCheckForTimeOut+0x66>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d305      	bcc.n	8003f46 <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e016      	b.n	8003f74 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d20c      	bcs.n	8003f6a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff ffaa 	bl	8003eb8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e004      	b.n	8003f74 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003f74:	f000 ffae 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8003f78:	697b      	ldr	r3, [r7, #20]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b006      	add	sp, #24
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	00000cef 	.word	0x00000cef
 8003f88:	080085f4 	.word	0x080085f4
 8003f8c:	20000134 	.word	0x20000134
 8003f90:	20000148 	.word	0x20000148

08003f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003f98:	4b02      	ldr	r3, [pc, #8]	@ (8003fa4 <vTaskMissedYield+0x10>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000144 	.word	0x20000144

08003fa8 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
    }
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    }
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ffc:	f000 f842 	bl	8004084 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004000:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <prvIdleTask+0x1c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d9f9      	bls.n	8003ffc <prvIdleTask+0x8>
            {
                taskYIELD();
 8004008:	f000 ff42 	bl	8004e90 <vPortYield>
        prvCheckTasksWaitingTermination();
 800400c:	e7f6      	b.n	8003ffc <prvIdleTask+0x8>
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	20000088 	.word	0x20000088

08004014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e00c      	b.n	800403a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	0013      	movs	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	189b      	adds	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a10      	ldr	r2, [pc, #64]	@ (800406c <prvInitialiseTaskLists+0x58>)
 800402c:	189b      	adds	r3, r3, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f7fd fc58 	bl	80018e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3301      	adds	r3, #1
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d9ef      	bls.n	8004020 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <prvInitialiseTaskLists+0x5c>)
 8004042:	0018      	movs	r0, r3
 8004044:	f7fd fc4e 	bl	80018e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <prvInitialiseTaskLists+0x60>)
 800404a:	0018      	movs	r0, r3
 800404c:	f7fd fc4a 	bl	80018e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004050:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <prvInitialiseTaskLists+0x64>)
 8004052:	0018      	movs	r0, r3
 8004054:	f7fd fc46 	bl	80018e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004058:	4b08      	ldr	r3, [pc, #32]	@ (800407c <prvInitialiseTaskLists+0x68>)
 800405a:	4a05      	ldr	r2, [pc, #20]	@ (8004070 <prvInitialiseTaskLists+0x5c>)
 800405c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <prvInitialiseTaskLists+0x6c>)
 8004060:	4a04      	ldr	r2, [pc, #16]	@ (8004074 <prvInitialiseTaskLists+0x60>)
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000088 	.word	0x20000088
 8004070:	200000ec 	.word	0x200000ec
 8004074:	20000100 	.word	0x20000100
 8004078:	2000011c 	.word	0x2000011c
 800407c:	20000114 	.word	0x20000114
 8004080:	20000118 	.word	0x20000118

08004084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800409a:	e005      	b.n	80040a8 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
            ulCount++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2ba5      	cmp	r3, #165	@ 0xa5
 80040ae:	d0f5      	beq.n	800409c <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	b29b      	uxth	r3, r3
    }
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <uxTaskGetStackHighWaterMark+0x14>
 80040d2:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <uxTaskGetStackHighWaterMark+0x34>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	e000      	b.n	80040da <uxTaskGetStackHighWaterMark+0x16>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff ffd2 	bl	800408e <prvTaskCheckFreeStackSpace>
 80040ea:	0003      	movs	r3, r0
 80040ec:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80040ee:	68fb      	ldr	r3, [r7, #12]
    }
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b006      	add	sp, #24
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000084 	.word	0x20000084

080040fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <prvResetNextTaskUnblockTime+0x2c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800410a:	4b08      	ldr	r3, [pc, #32]	@ (800412c <prvResetNextTaskUnblockTime+0x30>)
 800410c:	2201      	movs	r2, #1
 800410e:	4252      	negs	r2, r2
 8004110:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004112:	e005      	b.n	8004120 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <prvResetNextTaskUnblockTime+0x2c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <prvResetNextTaskUnblockTime+0x30>)
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	20000114 	.word	0x20000114
 800412c:	20000150 	.word	0x20000150

08004130 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <xTaskGetCurrentTaskHandle+0x18>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]

        return xReturn;
 800413c:	687b      	ldr	r3, [r7, #4]
    }
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	20000084 	.word	0x20000084

0800414c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <xTaskGetSchedulerState+0x30>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800415a:	2301      	movs	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e008      	b.n	8004172 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <xTaskGetSchedulerState+0x34>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004168:	2302      	movs	r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e001      	b.n	8004172 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004172:	687b      	ldr	r3, [r7, #4]
    }
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}
 800417c:	2000013c 	.word	0x2000013c
 8004180:	20000158 	.word	0x20000158

08004184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d100      	bne.n	800419c <xTaskPriorityInherit+0x18>
 800419a:	e0be      	b.n	800431a <xTaskPriorityInherit+0x196>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a0:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d300      	bcc.n	80041ac <xTaskPriorityInherit+0x28>
 80041aa:	e0ad      	b.n	8004308 <xTaskPriorityInherit+0x184>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db06      	blt.n	80041c2 <xTaskPriorityInherit+0x3e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	2205      	movs	r2, #5
 80041bc:	1ad2      	subs	r2, r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ca:	0013      	movs	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a55      	ldr	r2, [pc, #340]	@ (8004328 <xTaskPriorityInherit+0x1a4>)
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	4299      	cmp	r1, r3
 80041d8:	d15d      	bne.n	8004296 <xTaskPriorityInherit+0x112>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3304      	adds	r3, #4
 80041de:	0018      	movs	r0, r3
 80041e0:	f7fd fbdf 	bl	80019a2 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 ffad 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80041f6:	0003      	movs	r3, r0
 80041f8:	001a      	movs	r2, r3
 80041fa:	4b4c      	ldr	r3, [pc, #304]	@ (800432c <xTaskPriorityInherit+0x1a8>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	4013      	ands	r3, r2
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <xTaskPriorityInherit+0x94>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 ff93 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800420e:	0003      	movs	r3, r0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	0018      	movs	r0, r3
 8004214:	f001 ffe2 	bl	80061dc <prvTraceStoreTaskReady>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421c:	4b44      	ldr	r3, [pc, #272]	@ (8004330 <xTaskPriorityInherit+0x1ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <xTaskPriorityInherit+0xa8>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	4b41      	ldr	r3, [pc, #260]	@ (8004330 <xTaskPriorityInherit+0x1ac>)
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004230:	493d      	ldr	r1, [pc, #244]	@ (8004328 <xTaskPriorityInherit+0x1a4>)
 8004232:	0013      	movs	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	189b      	adds	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	18cb      	adds	r3, r1, r3
 800423c:	3304      	adds	r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	3204      	adds	r2, #4
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1d1a      	adds	r2, r3, #4
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004266:	0013      	movs	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	189b      	adds	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a2e      	ldr	r2, [pc, #184]	@ (8004328 <xTaskPriorityInherit+0x1a4>)
 8004270:	189a      	adds	r2, r3, r2
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	615a      	str	r2, [r3, #20]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427a:	492b      	ldr	r1, [pc, #172]	@ (8004328 <xTaskPriorityInherit+0x1a4>)
 800427c:	0013      	movs	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	189b      	adds	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	585b      	ldr	r3, [r3, r1]
 8004286:	1c58      	adds	r0, r3, #1
 8004288:	4927      	ldr	r1, [pc, #156]	@ (8004328 <xTaskPriorityInherit+0x1a4>)
 800428a:	0013      	movs	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	189b      	adds	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	5058      	str	r0, [r3, r1]
 8004294:	e004      	b.n	80042a0 <xTaskPriorityInherit+0x11c>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004296:	4b23      	ldr	r3, [pc, #140]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 ff54 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80042a8:	0003      	movs	r3, r0
 80042aa:	001a      	movs	r2, r3
 80042ac:	4b1f      	ldr	r3, [pc, #124]	@ (800432c <xTaskPriorityInherit+0x1a8>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d024      	beq.n	8004302 <xTaskPriorityInherit+0x17e>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 ff3a 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80042c0:	0003      	movs	r3, r0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	001c      	movs	r4, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 ff33 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80042ce:	0003      	movs	r3, r0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	0019      	movs	r1, r3
 80042d4:	2003      	movs	r0, #3
 80042d6:	f002 faa3 	bl	8006820 <prvTraceGetPriorityProperty>
 80042da:	0003      	movs	r3, r0
 80042dc:	0022      	movs	r2, r4
 80042de:	2103      	movs	r1, #3
 80042e0:	208e      	movs	r0, #142	@ 0x8e
 80042e2:	f002 f8ef 	bl	80064c4 <prvTraceStoreKernelCallWithParam>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 ff23 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80042ee:	0003      	movs	r3, r0
 80042f0:	b2d9      	uxtb	r1, r3
 80042f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	001a      	movs	r2, r3
 80042fc:	2003      	movs	r0, #3
 80042fe:	f002 fa5d 	bl	80067bc <prvTraceSetPriorityProperty>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e008      	b.n	800431a <xTaskPriorityInherit+0x196>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800430c:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <xTaskPriorityInherit+0x1a0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	429a      	cmp	r2, r3
 8004314:	d201      	bcs.n	800431a <xTaskPriorityInherit+0x196>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800431a:	697b      	ldr	r3, [r7, #20]
    }
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b007      	add	sp, #28
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	20000084 	.word	0x20000084
 8004328:	20000088 	.word	0x20000088
 800432c:	20001dc8 	.word	0x20001dc8
 8004330:	20000138 	.word	0x20000138

08004334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d100      	bne.n	800434c <xTaskPriorityDisinherit+0x18>
 800434a:	e0b9      	b.n	80044c0 <xTaskPriorityDisinherit+0x18c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800434c:	4b5f      	ldr	r3, [pc, #380]	@ (80044cc <xTaskPriorityDisinherit+0x198>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	429a      	cmp	r2, r3
 8004354:	d005      	beq.n	8004362 <xTaskPriorityDisinherit+0x2e>
 8004356:	4a5e      	ldr	r2, [pc, #376]	@ (80044d0 <xTaskPriorityDisinherit+0x19c>)
 8004358:	4b5e      	ldr	r3, [pc, #376]	@ (80044d4 <xTaskPriorityDisinherit+0x1a0>)
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f003 fc8b 	bl	8007c78 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <xTaskPriorityDisinherit+0x42>
 800436a:	4a5b      	ldr	r2, [pc, #364]	@ (80044d8 <xTaskPriorityDisinherit+0x1a4>)
 800436c:	4b59      	ldr	r3, [pc, #356]	@ (80044d4 <xTaskPriorityDisinherit+0x1a0>)
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f003 fc81 	bl	8007c78 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004388:	429a      	cmp	r2, r3
 800438a:	d100      	bne.n	800438e <xTaskPriorityDisinherit+0x5a>
 800438c:	e098      	b.n	80044c0 <xTaskPriorityDisinherit+0x18c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <xTaskPriorityDisinherit+0x64>
 8004396:	e093      	b.n	80044c0 <xTaskPriorityDisinherit+0x18c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3304      	adds	r3, #4
 800439c:	0018      	movs	r0, r3
 800439e:	f7fd fb00 	bl	80019a2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 fed3 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80043aa:	0003      	movs	r3, r0
 80043ac:	001a      	movs	r2, r3
 80043ae:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <xTaskPriorityDisinherit+0x1a8>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	4013      	ands	r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d023      	beq.n	8004402 <xTaskPriorityDisinherit+0xce>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 feb9 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80043c2:	0003      	movs	r3, r0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	001c      	movs	r4, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 feb2 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80043d0:	0003      	movs	r3, r0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	0019      	movs	r1, r3
 80043d6:	2003      	movs	r0, #3
 80043d8:	f002 fa22 	bl	8006820 <prvTraceGetPriorityProperty>
 80043dc:	0003      	movs	r3, r0
 80043de:	0022      	movs	r2, r4
 80043e0:	2103      	movs	r1, #3
 80043e2:	208f      	movs	r0, #143	@ 0x8f
 80043e4:	f002 f86e 	bl	80064c4 <prvTraceStoreKernelCallWithParam>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 fea2 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80043f0:	0003      	movs	r3, r0
 80043f2:	b2d9      	uxtb	r1, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	001a      	movs	r2, r3
 80043fc:	2003      	movs	r0, #3
 80043fe:	f002 f9dd 	bl	80067bc <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	2205      	movs	r2, #5
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 fe99 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 800441e:	0003      	movs	r3, r0
 8004420:	001a      	movs	r2, r3
 8004422:	4b2e      	ldr	r3, [pc, #184]	@ (80044dc <xTaskPriorityDisinherit+0x1a8>)
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <xTaskPriorityDisinherit+0x10c>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	0018      	movs	r0, r3
 8004432:	f000 fe7f 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8004436:	0003      	movs	r3, r0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	0018      	movs	r0, r3
 800443c:	f001 fece 	bl	80061dc <prvTraceStoreTaskReady>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004444:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <xTaskPriorityDisinherit+0x1ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d903      	bls.n	8004454 <xTaskPriorityDisinherit+0x120>
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004450:	4b23      	ldr	r3, [pc, #140]	@ (80044e0 <xTaskPriorityDisinherit+0x1ac>)
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004458:	4922      	ldr	r1, [pc, #136]	@ (80044e4 <xTaskPriorityDisinherit+0x1b0>)
 800445a:	0013      	movs	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	189b      	adds	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	18cb      	adds	r3, r1, r3
 8004464:	3304      	adds	r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	3204      	adds	r2, #4
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	0013      	movs	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	189b      	adds	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4a13      	ldr	r2, [pc, #76]	@ (80044e4 <xTaskPriorityDisinherit+0x1b0>)
 8004498:	189a      	adds	r2, r3, r2
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	615a      	str	r2, [r3, #20]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4910      	ldr	r1, [pc, #64]	@ (80044e4 <xTaskPriorityDisinherit+0x1b0>)
 80044a4:	0013      	movs	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	189b      	adds	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	585b      	ldr	r3, [r3, r1]
 80044ae:	1c58      	adds	r0, r3, #1
 80044b0:	490c      	ldr	r1, [pc, #48]	@ (80044e4 <xTaskPriorityDisinherit+0x1b0>)
 80044b2:	0013      	movs	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80044c0:	697b      	ldr	r3, [r7, #20]
    }
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b007      	add	sp, #28
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	20000084 	.word	0x20000084
 80044d0:	00001048 	.word	0x00001048
 80044d4:	080085f4 	.word	0x080085f4
 80044d8:	00001049 	.word	0x00001049
 80044dc:	20001dc8 	.word	0x20001dc8
 80044e0:	20000138 	.word	0x20000138
 80044e4:	20000088 	.word	0x20000088

080044e8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b089      	sub	sp, #36	@ 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d100      	bne.n	8004502 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8004500:	e0cc      	b.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x1b4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 800450a:	4a66      	ldr	r2, [pc, #408]	@ (80046a4 <vTaskPriorityDisinheritAfterTimeout+0x1bc>)
 800450c:	4b66      	ldr	r3, [pc, #408]	@ (80046a8 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f003 fbb1 	bl	8007c78 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d902      	bls.n	8004526 <vTaskPriorityDisinheritAfterTimeout+0x3e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e002      	b.n	800452c <vTaskPriorityDisinheritAfterTimeout+0x44>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d100      	bne.n	8004538 <vTaskPriorityDisinheritAfterTimeout+0x50>
 8004536:	e0b1      	b.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x1b4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d000      	beq.n	8004544 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8004542:	e0ab      	b.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x1b4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004544:	4b59      	ldr	r3, [pc, #356]	@ (80046ac <vTaskPriorityDisinheritAfterTimeout+0x1c4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d105      	bne.n	800455a <vTaskPriorityDisinheritAfterTimeout+0x72>
 800454e:	4a58      	ldr	r2, [pc, #352]	@ (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x1c8>)
 8004550:	4b55      	ldr	r3, [pc, #340]	@ (80046a8 <vTaskPriorityDisinheritAfterTimeout+0x1c0>)
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f003 fb8f 	bl	8007c78 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fdf7 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8004562:	0003      	movs	r3, r0
 8004564:	001a      	movs	r2, r3
 8004566:	4b53      	ldr	r3, [pc, #332]	@ (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x1cc>)
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0xd0>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fddd 	bl	8005134 <prvTraceGetTaskNumberLow16>
 800457a:	0003      	movs	r3, r0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	001c      	movs	r4, r3
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 fdd6 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8004588:	0003      	movs	r3, r0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	0019      	movs	r1, r3
 800458e:	2003      	movs	r0, #3
 8004590:	f002 f946 	bl	8006820 <prvTraceGetPriorityProperty>
 8004594:	0003      	movs	r3, r0
 8004596:	0022      	movs	r2, r4
 8004598:	2103      	movs	r1, #3
 800459a:	208f      	movs	r0, #143	@ 0x8f
 800459c:	f001 ff92 	bl	80064c4 <prvTraceStoreKernelCallWithParam>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 fdc6 	bl	8005134 <prvTraceGetTaskNumberLow16>
 80045a8:	0003      	movs	r3, r0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	2003      	movs	r0, #3
 80045b4:	f002 f902 	bl	80067bc <prvTraceSetPriorityProperty>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db04      	blt.n	80045d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2205      	movs	r2, #5
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6959      	ldr	r1, [r3, #20]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	0013      	movs	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a34      	ldr	r2, [pc, #208]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x1d0>)
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	4299      	cmp	r1, r3
 80045ea:	d157      	bne.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x1b4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	3304      	adds	r3, #4
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fd f9d6 	bl	80019a2 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fda9 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80045fe:	0003      	movs	r3, r0
 8004600:	001a      	movs	r2, r3
 8004602:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x1cc>)
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	4013      	ands	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <vTaskPriorityDisinheritAfterTimeout+0x138>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 fd8f 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8004616:	0003      	movs	r3, r0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	0018      	movs	r0, r3
 800461c:	f001 fdde 	bl	80061dc <prvTraceStoreTaskReady>
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <vTaskPriorityDisinheritAfterTimeout+0x1d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d903      	bls.n	8004634 <vTaskPriorityDisinheritAfterTimeout+0x14c>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <vTaskPriorityDisinheritAfterTimeout+0x1d4>)
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004638:	491f      	ldr	r1, [pc, #124]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x1d0>)
 800463a:	0013      	movs	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	189b      	adds	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	18cb      	adds	r3, r1, r3
 8004644:	3304      	adds	r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	3204      	adds	r2, #4
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1d1a      	adds	r2, r3, #4
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466e:	0013      	movs	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	189b      	adds	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x1d0>)
 8004678:	189a      	adds	r2, r3, r2
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	615a      	str	r2, [r3, #20]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004682:	490d      	ldr	r1, [pc, #52]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x1d0>)
 8004684:	0013      	movs	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	189b      	adds	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	585b      	ldr	r3, [r3, r1]
 800468e:	1c58      	adds	r0, r3, #1
 8004690:	4909      	ldr	r1, [pc, #36]	@ (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x1d0>)
 8004692:	0013      	movs	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	189b      	adds	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b009      	add	sp, #36	@ 0x24
 80046a2:	bd90      	pop	{r4, r7, pc}
 80046a4:	00001098 	.word	0x00001098
 80046a8:	080085f4 	.word	0x080085f4
 80046ac:	20000084 	.word	0x20000084
 80046b0:	000010b3 	.word	0x000010b3
 80046b4:	20001dc8 	.word	0x20001dc8
 80046b8:	20000088 	.word	0x20000088
 80046bc:	20000138 	.word	0x20000138

080046c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80046c4:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046d2:	3201      	adds	r2, #1
 80046d4:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80046d6:	4b02      	ldr	r3, [pc, #8]	@ (80046e0 <pvTaskIncrementMutexHeldCount+0x20>)
 80046d8:	681b      	ldr	r3, [r3, #0]
    }
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000084 	.word	0x20000084

080046e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <prvAddCurrentTaskToDelayedList+0x74>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <prvAddCurrentTaskToDelayedList+0x78>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fd f951 	bl	80019a2 <uxListRemove>
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	18d3      	adds	r3, r2, r3
 8004706:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004708:	4b14      	ldr	r3, [pc, #80]	@ (800475c <prvAddCurrentTaskToDelayedList+0x78>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d209      	bcs.n	800472c <prvAddCurrentTaskToDelayedList+0x48>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <prvAddCurrentTaskToDelayedList+0x7c>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <prvAddCurrentTaskToDelayedList+0x78>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	0019      	movs	r1, r3
 8004724:	0010      	movs	r0, r2
 8004726:	f7fd f906 	bl	8001936 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800472a:	e010      	b.n	800474e <prvAddCurrentTaskToDelayedList+0x6a>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x80>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <prvAddCurrentTaskToDelayedList+0x78>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	0019      	movs	r1, r3
 8004738:	0010      	movs	r0, r2
 800473a:	f7fd f8fc 	bl	8001936 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <prvAddCurrentTaskToDelayedList+0x84>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d202      	bcs.n	800474e <prvAddCurrentTaskToDelayedList+0x6a>
                xNextTaskUnblockTime = xTimeToWake;
 8004748:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <prvAddCurrentTaskToDelayedList+0x84>)
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	20000134 	.word	0x20000134
 800475c:	20000084 	.word	0x20000084
 8004760:	20000118 	.word	0x20000118
 8004764:	20000114 	.word	0x20000114
 8004768:	20000150 	.word	0x20000150

0800476c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004776:	f000 fab5 	bl	8004ce4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <xTimerCreateTimerTask+0x50>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004782:	490f      	ldr	r1, [pc, #60]	@ (80047c0 <xTimerCreateTimerTask+0x54>)
 8004784:	480f      	ldr	r0, [pc, #60]	@ (80047c4 <xTimerCreateTimerTask+0x58>)
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <xTimerCreateTimerTask+0x5c>)
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	2303      	movs	r3, #3
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2300      	movs	r3, #0
 8004790:	2280      	movs	r2, #128	@ 0x80
 8004792:	f7fe fc54 	bl	800303e <xTaskCreate>
 8004796:	0003      	movs	r3, r0
 8004798:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <xTimerCreateTimerTask+0x44>
 80047a0:	231a      	movs	r3, #26
 80047a2:	33ff      	adds	r3, #255	@ 0xff
 80047a4:	001a      	movs	r2, r3
 80047a6:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <xTimerCreateTimerTask+0x60>)
 80047a8:	0011      	movs	r1, r2
 80047aa:	0018      	movs	r0, r3
 80047ac:	f003 fa64 	bl	8007c78 <vAssertCalled>
        return xReturn;
 80047b0:	687b      	ldr	r3, [r7, #4]
    }
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	2000018c 	.word	0x2000018c
 80047c0:	08008610 	.word	0x08008610
 80047c4:	08004911 	.word	0x08004911
 80047c8:	20000190 	.word	0x20000190
 80047cc:	08008618 	.word	0x08008618

080047d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80047dc:	e02e      	b.n	800483c <prvReloadTimer+0x6c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
 80047e8:	f000 fda1 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80047ec:	0003      	movs	r3, r0
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 fcae 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80047f4:	0003      	movs	r3, r0
 80047f6:	001a      	movs	r2, r3
 80047f8:	4b18      	ldr	r3, [pc, #96]	@ (800485c <prvReloadTimer+0x8c>)
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <prvReloadTimer+0x62>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 fd46 	bl	8005298 <prvTraceGetTimerNumberHigh16>
 800480c:	0003      	movs	r3, r0
 800480e:	001a      	movs	r2, r3
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <prvReloadTimer+0x8c>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	4013      	ands	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <prvReloadTimer+0x62>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fd2c 	bl	800527c <prvTraceGetTimerNumberLow16>
 8004824:	0003      	movs	r3, r0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	001a      	movs	r2, r3
 800482a:	2105      	movs	r1, #5
 800482c:	20db      	movs	r0, #219	@ 0xdb
 800482e:	f001 fde3 	bl	80063f8 <prvTraceStoreKernelCall>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	0010      	movs	r0, r2
 800483a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	18d1      	adds	r1, r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f901 	bl	8004a50 <prvInsertTimerInActiveList>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d1c5      	bne.n	80047de <prvReloadTimer+0xe>
        }
    }
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	46c0      	nop			@ (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20001dc8 	.word	0x20001dc8

08004860 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486a:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <prvProcessExpiredTimer+0xa8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3304      	adds	r3, #4
 8004878:	0018      	movs	r0, r3
 800487a:	f7fd f892 	bl	80019a2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2228      	movs	r2, #40	@ 0x28
 8004882:	5c9b      	ldrb	r3, [r3, r2]
 8004884:	001a      	movs	r2, r3
 8004886:	2304      	movs	r3, #4
 8004888:	4013      	ands	r3, r2
 800488a:	d006      	beq.n	800489a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0018      	movs	r0, r3
 8004894:	f7ff ff9c 	bl	80047d0 <prvReloadTimer>
 8004898:	e008      	b.n	80048ac <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2228      	movs	r2, #40	@ 0x28
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	2201      	movs	r2, #1
 80048a2:	4393      	bics	r3, r2
 80048a4:	b2d9      	uxtb	r1, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2228      	movs	r2, #40	@ 0x28
 80048aa:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
 80048ac:	f000 fd3f 	bl	800532e <prvTraceGetCurrentTaskHandle>
 80048b0:	0003      	movs	r3, r0
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fc4c 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 80048b8:	0003      	movs	r3, r0
 80048ba:	001a      	movs	r2, r3
 80048bc:	4b13      	ldr	r3, [pc, #76]	@ (800490c <prvProcessExpiredTimer+0xac>)
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d016      	beq.n	80048f6 <prvProcessExpiredTimer+0x96>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fce4 	bl	8005298 <prvTraceGetTimerNumberHigh16>
 80048d0:	0003      	movs	r3, r0
 80048d2:	001a      	movs	r2, r3
 80048d4:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <prvProcessExpiredTimer+0xac>)
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	4013      	ands	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <prvProcessExpiredTimer+0x96>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fcca 	bl	800527c <prvTraceGetTimerNumberLow16>
 80048e8:	0003      	movs	r3, r0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	001a      	movs	r2, r3
 80048ee:	2105      	movs	r1, #5
 80048f0:	20db      	movs	r0, #219	@ 0xdb
 80048f2:	f001 fd81 	bl	80063f8 <prvTraceStoreKernelCall>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	0010      	movs	r0, r2
 80048fe:	4798      	blx	r3
    }
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000184 	.word	0x20000184
 800490c:	20001dc8 	.word	0x20001dc8

08004910 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004918:	2308      	movs	r3, #8
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f855 	bl	80049cc <prvGetNextExpireTime>
 8004922:	0003      	movs	r3, r0
 8004924:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f805 	bl	800493c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004932:	f000 f8cf 	bl	8004ad4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	e7ee      	b.n	8004918 <prvTimerTask+0x8>
	...

0800493c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004946:	f7fe fe39 	bl	80035bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800494a:	2308      	movs	r3, #8
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f85e 	bl	8004a10 <prvSampleTimeNow>
 8004954:	0003      	movs	r3, r0
 8004956:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d12b      	bne.n	80049b6 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <prvProcessTimerOrBlockTask+0x42>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d808      	bhi.n	800497e <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 800496c:	f7fe fe32 	bl	80035d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff ff72 	bl	8004860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800497c:	e01d      	b.n	80049ba <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004984:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <prvProcessTimerOrBlockTask+0x88>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <prvProcessTimerOrBlockTask+0x56>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <prvProcessTimerOrBlockTask+0x58>
 8004992:	2300      	movs	r3, #0
 8004994:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004996:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <prvProcessTimerOrBlockTask+0x8c>)
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	0019      	movs	r1, r3
 80049a4:	f7fe fb18 	bl	8002fd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80049a8:	f7fe fe14 	bl	80035d4 <xTaskResumeAll>
 80049ac:	1e03      	subs	r3, r0, #0
 80049ae:	d104      	bne.n	80049ba <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80049b0:	f000 fa6e 	bl	8004e90 <vPortYield>
    }
 80049b4:	e001      	b.n	80049ba <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80049b6:	f7fe fe0d 	bl	80035d4 <xTaskResumeAll>
    }
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	46bd      	mov	sp, r7
 80049be:	b004      	add	sp, #16
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	20000188 	.word	0x20000188
 80049c8:	2000018c 	.word	0x2000018c

080049cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049d4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <prvGetNextExpireTime+0x40>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <prvGetNextExpireTime+0x16>
 80049de:	2201      	movs	r2, #1
 80049e0:	e000      	b.n	80049e4 <prvGetNextExpireTime+0x18>
 80049e2:	2200      	movs	r2, #0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <prvGetNextExpireTime+0x40>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e001      	b.n	8004a00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a00:	68fb      	ldr	r3, [r7, #12]
    }
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b004      	add	sp, #16
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	20000184 	.word	0x20000184

08004a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a18:	f7fe fee4 	bl	80037e4 <xTaskGetTickCount>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a20:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <prvSampleTimeNow+0x3c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d205      	bcs.n	8004a36 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004a2a:	f000 f933 	bl	8004c94 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e002      	b.n	8004a3c <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <prvSampleTimeNow+0x3c>)
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004a42:	68fb      	ldr	r3, [r7, #12]
    }
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b004      	add	sp, #16
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000194 	.word	0x20000194

08004a50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d812      	bhi.n	8004a9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e01b      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <prvInsertTimerInActiveList+0x7c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	0019      	movs	r1, r3
 8004a94:	0010      	movs	r0, r2
 8004a96:	f7fc ff4e 	bl	8001936 <vListInsert>
 8004a9a:	e012      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d206      	bcs.n	8004ab2 <prvInsertTimerInActiveList+0x62>
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e007      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <prvInsertTimerInActiveList+0x80>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	0019      	movs	r1, r3
 8004abc:	0010      	movs	r0, r2
 8004abe:	f7fc ff3a 	bl	8001936 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ac2:	697b      	ldr	r3, [r7, #20]
    }
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000188 	.word	0x20000188
 8004ad0:	20000184 	.word	0x20000184

08004ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ada:	e0c1      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	da00      	bge.n	8004ae6 <prvProcessReceivedCommands+0x12>
 8004ae4:	e0bc      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3304      	adds	r3, #4
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fc ff52 	bl	80019a2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004afe:	003b      	movs	r3, r7
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff ff85 	bl	8004a10 <prvSampleTimeNow>
 8004b06:	0003      	movs	r3, r0
 8004b08:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	d900      	bls.n	8004b14 <prvProcessReceivedCommands+0x40>
 8004b12:	e0a2      	b.n	8004c5a <prvProcessReceivedCommands+0x186>
 8004b14:	009a      	lsls	r2, r3, #2
 8004b16:	4b5a      	ldr	r3, [pc, #360]	@ (8004c80 <prvProcessReceivedCommands+0x1ac>)
 8004b18:	18d3      	adds	r3, r2, r3
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2228      	movs	r2, #40	@ 0x28
 8004b22:	5c9b      	ldrb	r3, [r3, r2]
 8004b24:	2201      	movs	r2, #1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b2d9      	uxtb	r1, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2228      	movs	r2, #40	@ 0x28
 8004b2e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	18d1      	adds	r1, r2, r3
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7ff ff85 	bl	8004a50 <prvInsertTimerInActiveList>
 8004b46:	1e03      	subs	r3, r0, #0
 8004b48:	d100      	bne.n	8004b4c <prvProcessReceivedCommands+0x78>
 8004b4a:	e088      	b.n	8004c5e <prvProcessReceivedCommands+0x18a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2228      	movs	r2, #40	@ 0x28
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	001a      	movs	r2, r3
 8004b54:	2304      	movs	r3, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	d00a      	beq.n	8004b70 <prvProcessReceivedCommands+0x9c>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	18d1      	adds	r1, r2, r3
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff fe31 	bl	80047d0 <prvReloadTimer>
 8004b6e:	e008      	b.n	8004b82 <prvProcessReceivedCommands+0xae>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2228      	movs	r2, #40	@ 0x28
 8004b74:	5c9b      	ldrb	r3, [r3, r2]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4393      	bics	r3, r2
 8004b7a:	b2d9      	uxtb	r1, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2228      	movs	r2, #40	@ 0x28
 8004b80:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
 8004b82:	f000 fbd4 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8004b86:	0003      	movs	r3, r0
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fae1 	bl	8005150 <prvTraceGetTaskNumberHigh16>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	001a      	movs	r2, r3
 8004b92:	4b3c      	ldr	r3, [pc, #240]	@ (8004c84 <prvProcessReceivedCommands+0x1b0>)
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	4013      	ands	r3, r2
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <prvProcessReceivedCommands+0xf8>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 fb79 	bl	8005298 <prvTraceGetTimerNumberHigh16>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4b36      	ldr	r3, [pc, #216]	@ (8004c84 <prvProcessReceivedCommands+0x1b0>)
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <prvProcessReceivedCommands+0xf8>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 fb5f 	bl	800527c <prvTraceGetTimerNumberLow16>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	2105      	movs	r1, #5
 8004bc6:	20db      	movs	r0, #219	@ 0xdb
 8004bc8:	f001 fc16 	bl	80063f8 <prvTraceStoreKernelCall>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004bd6:	e042      	b.n	8004c5e <prvProcessReceivedCommands+0x18a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2228      	movs	r2, #40	@ 0x28
 8004bdc:	5c9b      	ldrb	r3, [r3, r2]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4393      	bics	r3, r2
 8004be2:	b2d9      	uxtb	r1, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2228      	movs	r2, #40	@ 0x28
 8004be8:	5499      	strb	r1, [r3, r2]
                        break;
 8004bea:	e039      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2228      	movs	r2, #40	@ 0x28
 8004bf0:	5c9b      	ldrb	r3, [r3, r2]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b2d9      	uxtb	r1, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2228      	movs	r2, #40	@ 0x28
 8004bfc:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <prvProcessReceivedCommands+0x146>
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <prvProcessReceivedCommands+0x1b4>)
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <prvProcessReceivedCommands+0x1b8>)
 8004c12:	0011      	movs	r1, r2
 8004c14:	0018      	movs	r0, r3
 8004c16:	f003 f82f 	bl	8007c78 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	18d1      	adds	r1, r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7ff ff12 	bl	8004a50 <prvInsertTimerInActiveList>
                        break;
 8004c2c:	e018      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2228      	movs	r2, #40	@ 0x28
 8004c32:	5c9b      	ldrb	r3, [r3, r2]
 8004c34:	001a      	movs	r2, r3
 8004c36:	2302      	movs	r3, #2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d104      	bne.n	8004c46 <prvProcessReceivedCommands+0x172>
                            {
                                vPortFree( pxTimer );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 fa3e 	bl	80050c0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c44:	e00c      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2228      	movs	r2, #40	@ 0x28
 8004c4a:	5c9b      	ldrb	r3, [r3, r2]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4393      	bics	r3, r2
 8004c50:	b2d9      	uxtb	r1, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2228      	movs	r2, #40	@ 0x28
 8004c56:	5499      	strb	r1, [r3, r2]
                        break;
 8004c58:	e002      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	e000      	b.n	8004c60 <prvProcessReceivedCommands+0x18c>
                        break;
 8004c5e:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c60:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <prvProcessReceivedCommands+0x1bc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	1d39      	adds	r1, r7, #4
 8004c66:	2200      	movs	r2, #0
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fd fbdb 	bl	8002424 <xQueueReceive>
 8004c6e:	1e03      	subs	r3, r0, #0
 8004c70:	d000      	beq.n	8004c74 <prvProcessReceivedCommands+0x1a0>
 8004c72:	e733      	b.n	8004adc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b006      	add	sp, #24
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	08009004 	.word	0x08009004
 8004c84:	20001dc8 	.word	0x20001dc8
 8004c88:	0000035e 	.word	0x0000035e
 8004c8c:	08008618 	.word	0x08008618
 8004c90:	2000018c 	.word	0x2000018c

08004c94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c9a:	e00b      	b.n	8004cb4 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cdc <prvSwitchTimerLists+0x48>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	425a      	negs	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	0011      	movs	r1, r2
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7ff fdd6 	bl	8004860 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <prvSwitchTimerLists+0x48>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ee      	bne.n	8004c9c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004cbe:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <prvSwitchTimerLists+0x48>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <prvSwitchTimerLists+0x4c>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <prvSwitchTimerLists+0x48>)
 8004cca:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <prvSwitchTimerLists+0x4c>)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
    }
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	20000184 	.word	0x20000184
 8004ce0:	20000188 	.word	0x20000188

08004ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ce8:	f000 f8e2 	bl	8004eb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <prvCheckForValidListAndQueue+0x5c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d120      	bne.n	8004d36 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f7fc fdf4 	bl	80018e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004cfc:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <prvCheckForValidListAndQueue+0x64>)
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fc fdf0 	bl	80018e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <prvCheckForValidListAndQueue+0x68>)
 8004d06:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <prvCheckForValidListAndQueue+0x60>)
 8004d08:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <prvCheckForValidListAndQueue+0x6c>)
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <prvCheckForValidListAndQueue+0x64>)
 8004d0e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d10:	2200      	movs	r2, #0
 8004d12:	210c      	movs	r1, #12
 8004d14:	200a      	movs	r0, #10
 8004d16:	f7fc ff03 	bl	8001b20 <xQueueGenericCreate>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <prvCheckForValidListAndQueue+0x5c>)
 8004d1e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <prvCheckForValidListAndQueue+0x5c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <prvCheckForValidListAndQueue+0x5c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a09      	ldr	r2, [pc, #36]	@ (8004d54 <prvCheckForValidListAndQueue+0x70>)
 8004d2e:	0011      	movs	r1, r2
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fe f8ef 	bl	8002f14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d36:	f000 f8cd 	bl	8004ed4 <vPortExitCritical>
    }
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2000018c 	.word	0x2000018c
 8004d44:	2000015c 	.word	0x2000015c
 8004d48:	20000170 	.word	0x20000170
 8004d4c:	20000184 	.word	0x20000184
 8004d50:	20000188 	.word	0x20000188
 8004d54:	08008630 	.word	0x08008630

08004d58 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        }
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b04      	subs	r3, #4
 8004d7c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2280      	movs	r2, #128	@ 0x80
 8004d82:	0452      	lsls	r2, r2, #17
 8004d84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b04      	subs	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004d98:	4a08      	ldr	r2, [pc, #32]	@ (8004dbc <pxPortInitialiseStack+0x50>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b14      	subs	r3, #20
 8004da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b20      	subs	r3, #32
 8004dae:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004db0:	68fb      	ldr	r3, [r7, #12]
}
 8004db2:	0018      	movs	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b004      	add	sp, #16
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	08004dc1 	.word	0x08004dc1

08004dc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004dca:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <prvTaskExitError+0x30>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	d004      	beq.n	8004ddc <prvTaskExitError+0x1c>
 8004dd2:	4b08      	ldr	r3, [pc, #32]	@ (8004df4 <prvTaskExitError+0x34>)
 8004dd4:	21b2      	movs	r1, #178	@ 0xb2
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f002 ff4e 	bl	8007c78 <vAssertCalled>
    portDISABLE_INTERRUPTS();
 8004ddc:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0fc      	beq.n	8004de0 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	46c0      	nop			@ (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000004 	.word	0x20000004
 8004df4:	08008638 	.word	0x08008638

08004df8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004e10:	4a0b      	ldr	r2, [pc, #44]	@ (8004e40 <pxCurrentTCBConst2>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	3020      	adds	r0, #32
 8004e18:	f380 8809 	msr	PSP, r0
 8004e1c:	2002      	movs	r0, #2
 8004e1e:	f380 8814 	msr	CONTROL, r0
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004e28:	46ae      	mov	lr, r5
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	bc04      	pop	{r2}
 8004e2e:	b662      	cpsie	i
 8004e30:	4718      	bx	r3
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	46c0      	nop			@ (mov r8, r8)
 8004e3e:	46c0      	nop			@ (mov r8, r8)

08004e40 <pxCurrentTCBConst2>:
 8004e40:	20000084 	.word	0x20000084
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46c0      	nop			@ (mov r8, r8)

08004e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e88 <xPortStartScheduler+0x40>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <xPortStartScheduler+0x40>)
 8004e52:	21ff      	movs	r1, #255	@ 0xff
 8004e54:	0409      	lsls	r1, r1, #16
 8004e56:	430a      	orrs	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <xPortStartScheduler+0x40>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <xPortStartScheduler+0x40>)
 8004e60:	21ff      	movs	r1, #255	@ 0xff
 8004e62:	0609      	lsls	r1, r1, #24
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e68:	f000 f8a0 	bl	8004fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <xPortStartScheduler+0x44>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004e72:	f7ff ffcd 	bl	8004e10 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e76:	f7fe fdff 	bl	8003a78 <vTaskSwitchContext>
    prvTaskExitError();
 8004e7a:	f7ff ffa1 	bl	8004dc0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	e000ed20 	.word	0xe000ed20
 8004e8c:	20000004 	.word	0x20000004

08004e90 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <vPortYield+0x1c>)
 8004e96:	2280      	movs	r2, #128	@ 0x80
 8004e98:	0552      	lsls	r2, r2, #21
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004e9c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004ea0:	f3bf 8f6f 	isb	sy
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004eb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <vPortEnterCritical+0x20>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <vPortEnterCritical+0x20>)
 8004ebe:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004ec0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004ec4:	f3bf 8f6f 	isb	sy
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	20000004 	.word	0x20000004

08004ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <vPortExitCritical+0x38>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <vPortExitCritical+0x1c>
 8004ee0:	2326      	movs	r3, #38	@ 0x26
 8004ee2:	33ff      	adds	r3, #255	@ 0xff
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <vPortExitCritical+0x3c>)
 8004ee8:	0011      	movs	r1, r2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f002 fec4 	bl	8007c78 <vAssertCalled>
    uxCriticalNesting--;
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <vPortExitCritical+0x38>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <vPortExitCritical+0x38>)
 8004ef8:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004efa:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <vPortExitCritical+0x38>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d100      	bne.n	8004f04 <vPortExitCritical+0x30>
    {
        portENABLE_INTERRUPTS();
 8004f02:	b662      	cpsie	i
    }
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	20000004 	.word	0x20000004
 8004f10:	08008638 	.word	0x08008638

08004f14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004f14:	f3ef 8010 	mrs	r0, PRIMASK
 8004f18:	b672      	cpsid	i
 8004f1a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	0018      	movs	r0, r3

08004f20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004f20:	f380 8810 	msr	PRIMASK, r0
 8004f24:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004f26:	46c0      	nop			@ (mov r8, r8)
	...

08004f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f30:	f3ef 8009 	mrs	r0, PSP
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <pxCurrentTCBConst>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	3820      	subs	r0, #32
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f3e:	4644      	mov	r4, r8
 8004f40:	464d      	mov	r5, r9
 8004f42:	4656      	mov	r6, sl
 8004f44:	465f      	mov	r7, fp
 8004f46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f48:	b508      	push	{r3, lr}
 8004f4a:	b672      	cpsid	i
 8004f4c:	f7fe fd94 	bl	8003a78 <vTaskSwitchContext>
 8004f50:	b662      	cpsie	i
 8004f52:	bc0c      	pop	{r2, r3}
 8004f54:	6811      	ldr	r1, [r2, #0]
 8004f56:	6808      	ldr	r0, [r1, #0]
 8004f58:	3010      	adds	r0, #16
 8004f5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f5c:	46a0      	mov	r8, r4
 8004f5e:	46a9      	mov	r9, r5
 8004f60:	46b2      	mov	sl, r6
 8004f62:	46bb      	mov	fp, r7
 8004f64:	f380 8809 	msr	PSP, r0
 8004f68:	3820      	subs	r0, #32
 8004f6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f6c:	4718      	bx	r3
 8004f6e:	46c0      	nop			@ (mov r8, r8)

08004f70 <pxCurrentTCBConst>:
 8004f70:	20000084 	.word	0x20000084
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	46c0      	nop			@ (mov r8, r8)

08004f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7e:	f7ff ffc9 	bl	8004f14 <ulSetInterruptMaskFromISR>
 8004f82:	0003      	movs	r3, r0
 8004f84:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004f86:	f7fe fc45 	bl	8003814 <xTaskIncrementTick>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d003      	beq.n	8004f96 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <SysTick_Handler+0x30>)
 8004f90:	2280      	movs	r2, #128	@ 0x80
 8004f92:	0552      	lsls	r2, r2, #21
 8004f94:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff ffc1 	bl	8004f20 <vClearInterruptMaskFromISR>
}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <vPortSetupTimerInterrupt+0x34>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <vPortSetupTimerInterrupt+0x38>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <vPortSetupTimerInterrupt+0x3c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	22fa      	movs	r2, #250	@ 0xfa
 8004fc2:	0091      	lsls	r1, r2, #2
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7fb f89f 	bl	8000108 <__udivsi3>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	001a      	movs	r2, r3
 8004fce:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vPortSetupTimerInterrupt+0x40>)
 8004fd0:	3a01      	subs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fd4:	4b02      	ldr	r3, [pc, #8]	@ (8004fe0 <vPortSetupTimerInterrupt+0x34>)
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	e000e010 	.word	0xe000e010
 8004fe4:	e000e018 	.word	0xe000e018
 8004fe8:	20000014 	.word	0x20000014
 8004fec:	e000e014 	.word	0xe000e014

08004ff0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2207      	movs	r2, #7
 8005000:	4013      	ands	r3, r2
 8005002:	d00e      	beq.n	8005022 <pvPortMalloc+0x32>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2207      	movs	r2, #7
 8005008:	4393      	bics	r3, r2
 800500a:	3308      	adds	r3, #8
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d205      	bcs.n	800501e <pvPortMalloc+0x2e>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2207      	movs	r2, #7
 8005016:	4393      	bics	r3, r2
 8005018:	3308      	adds	r3, #8
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e001      	b.n	8005022 <pvPortMalloc+0x32>
            }
            else
            {
                xWantedSize = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8005022:	f7fe facb 	bl	80035bc <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8005026:	4b22      	ldr	r3, [pc, #136]	@ (80050b0 <pvPortMalloc+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800502e:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <pvPortMalloc+0xc4>)
 8005030:	2207      	movs	r2, #7
 8005032:	4393      	bics	r3, r2
 8005034:	001a      	movs	r2, r3
 8005036:	4b1e      	ldr	r3, [pc, #120]	@ (80050b0 <pvPortMalloc+0xc0>)
 8005038:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01a      	beq.n	8005076 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <pvPortMalloc+0xc8>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8005048:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <pvPortMalloc+0xcc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d813      	bhi.n	8005076 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800504e:	4b1a      	ldr	r3, [pc, #104]	@ (80050b8 <pvPortMalloc+0xc8>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	18d2      	adds	r2, r2, r3
 8005056:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <pvPortMalloc+0xc8>)
 8005058:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800505a:	429a      	cmp	r2, r3
 800505c:	d90b      	bls.n	8005076 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800505e:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <pvPortMalloc+0xc0>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <pvPortMalloc+0xc8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	18d3      	adds	r3, r2, r3
 8005068:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800506a:	4b13      	ldr	r3, [pc, #76]	@ (80050b8 <pvPortMalloc+0xc8>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	18d2      	adds	r2, r2, r3
 8005072:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <pvPortMalloc+0xc8>)
 8005074:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <pvPortMalloc+0x9a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	0019      	movs	r1, r3
 8005082:	2094      	movs	r0, #148	@ 0x94
 8005084:	f001 f912 	bl	80062ac <vTraceStoreMemMangEvent>
 8005088:	e005      	b.n	8005096 <pvPortMalloc+0xa6>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	0019      	movs	r1, r3
 8005090:	20e8      	movs	r0, #232	@ 0xe8
 8005092:	f001 f90b 	bl	80062ac <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8005096:	f7fe fa9d 	bl	80035d4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <pvPortMalloc+0xb4>
        {
            vApplicationMallocFailedHook();
 80050a0:	f002 fe08 	bl	8007cb4 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
 80050a4:	68fb      	ldr	r3, [r7, #12]
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	20001d9c 	.word	0x20001d9c
 80050b4:	2000019f 	.word	0x2000019f
 80050b8:	20001d98 	.word	0x20001d98
 80050bc:	00001bf7 	.word	0x00001bf7

080050c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <vPortFree+0x18>
 80050ce:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <vPortFree+0x20>)
 80050d0:	218a      	movs	r1, #138	@ 0x8a
 80050d2:	0018      	movs	r0, r3
 80050d4:	f002 fdd0 	bl	8007c78 <vAssertCalled>
}
 80050d8:	46c0      	nop			@ (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08008660 	.word	0x08008660

080050e4 <xPortGetFreeHeapSize>:
    xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80050e8:	4b03      	ldr	r3, [pc, #12]	@ (80050f8 <xPortGetFreeHeapSize+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a03      	ldr	r2, [pc, #12]	@ (80050fc <xPortGetFreeHeapSize+0x18>)
 80050ee:	1ad3      	subs	r3, r2, r3
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	20001d98 	.word	0x20001d98
 80050fc:	00001bf8 	.word	0x00001bf8

08005100 <prvTraceGetQueueNumber>:
}

#else

uint32_t prvTraceGetQueueNumber(void* handle)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber((TraceKernelPortQueueHandle_t)handle);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0018      	movs	r0, r3
 800510c:	f7fd fdae 	bl	8002c6c <uxQueueGetQueueNumber>
 8005110:	0003      	movs	r3, r0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}

0800511a <prvTraceGetQueueType>:

#endif

uint8_t prvTraceGetQueueType(void* pvQueue)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType((TraceKernelPortQueueHandle_t)pvQueue);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f7fd fdb7 	bl	8002c98 <ucQueueGetQueueType>
 800512a:	0003      	movs	r3, r0
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}

08005134 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* pvTask)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f7fe ff32 	bl	8003fa8 <uxTaskGetTaskNumber>
 8005144:	0003      	movs	r3, r0
 8005146:	b29b      	uxth	r3, r3
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* pvTask)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0018      	movs	r0, r3
 800515c:	f7fe ff24 	bl	8003fa8 <uxTaskGetTaskNumber>
 8005160:	0003      	movs	r3, r0
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	b29b      	uxth	r3, r3
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* pvTask, uint16_t uiValue)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	000a      	movs	r2, r1
 8005178:	1cbb      	adds	r3, r7, #2
 800517a:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_LOW16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	0018      	movs	r0, r3
 8005180:	f7fe ff12 	bl	8003fa8 <uxTaskGetTaskNumber>
 8005184:	0003      	movs	r3, r0
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	041a      	lsls	r2, r3, #16
 800518a:	1cbb      	adds	r3, r7, #2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0011      	movs	r1, r2
 8005194:	0018      	movs	r0, r3
 8005196:	f7fe ff1b 	bl	8003fd0 <vTaskSetTaskNumber>
}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* pvTask, uint16_t uiValue)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	000a      	movs	r2, r1
 80051ac:	1cbb      	adds	r3, r7, #2
 80051ae:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber((TraceKernelPortTaskHandle_t)pvTask, TRACE_SET_HIGH16(uxTaskGetTaskNumber((TraceKernelPortTaskHandle_t)pvTask), uiValue));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fe fef8 	bl	8003fa8 <uxTaskGetTaskNumber>
 80051b8:	0003      	movs	r3, r0
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	0c1a      	lsrs	r2, r3, #16
 80051be:	1cbb      	adds	r3, r7, #2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0011      	movs	r1, r2
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7fe ff00 	bl	8003fd0 <vTaskSetTaskNumber>
}
 80051d0:	46c0      	nop			@ (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* pvQueue)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(pvQueue));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7ff ff8c 	bl	8005100 <prvTraceGetQueueNumber>
 80051e8:	0003      	movs	r3, r0
 80051ea:	b29b      	uxth	r3, r3
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b002      	add	sp, #8
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* pvQueue)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(pvQueue));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff ff7e 	bl	8005100 <prvTraceGetQueueNumber>
 8005204:	0003      	movs	r3, r0
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	b29b      	uxth	r3, r3
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}

08005212 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* pvQueue, uint16_t uiValue)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	000a      	movs	r2, r1
 800521c:	1cbb      	adds	r3, r7, #2
 800521e:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_LOW16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff ff6c 	bl	8005100 <prvTraceGetQueueNumber>
 8005228:	0003      	movs	r3, r0
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	041a      	lsls	r2, r3, #16
 800522e:	1cbb      	adds	r3, r7, #2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f7fd fd21 	bl	8002c80 <vQueueSetQueueNumber>
}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	b002      	add	sp, #8
 8005244:	bd80      	pop	{r7, pc}

08005246 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* pvQueue, uint16_t uiValue)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	000a      	movs	r2, r1
 8005250:	1cbb      	adds	r3, r7, #2
 8005252:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber((TraceKernelPortQueueHandle_t)pvQueue, TRACE_SET_HIGH16(prvTraceGetQueueNumber(pvQueue), uiValue));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff ff52 	bl	8005100 <prvTraceGetQueueNumber>
 800525c:	0003      	movs	r3, r0
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	0c1a      	lsrs	r2, r3, #16
 8005262:	1cbb      	adds	r3, r7, #2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0011      	movs	r1, r2
 800526e:	0018      	movs	r0, r3
 8005270:	f7fd fd06 	bl	8002c80 <vQueueSetQueueNumber>
}
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvTraceGetTimerNumberLow16>:

#if (TRC_CFG_INCLUDE_TIMER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0)

uint16_t prvTraceGetTimerNumberLow16(void* pvTimer)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f7ff fd66 	bl	8004d58 <uxTimerGetTimerNumber>
 800528c:	0003      	movs	r3, r0
 800528e:	b29b      	uxth	r3, r3
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}

08005298 <prvTraceGetTimerNumberHigh16>:

uint16_t prvTraceGetTimerNumberHigh16(void* pvTimer)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTimerGetTimerNumber((TimerHandle_t)pvTimer));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7ff fd58 	bl	8004d58 <uxTimerGetTimerNumber>
 80052a8:	0003      	movs	r3, r0
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b29b      	uxth	r3, r3
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b002      	add	sp, #8
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <vTraceSetQueueName>:
};

#if (TRC_CFG_SCHEDULING_ONLY == 0)

void vTraceSetQueueName(void* pvQueue, const char* szName)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvQueue), szName);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff ff88 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80052c8:	0003      	movs	r3, r0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	0019      	movs	r1, r3
 80052d0:	2000      	movs	r0, #0
 80052d2:	f001 fcb3 	bl	8006c3c <prvTraceSetObjectName>
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b002      	add	sp, #8
 80052dc:	bd80      	pop	{r7, pc}

080052de <vTraceSetSemaphoreName>:

void vTraceSetSemaphoreName(void* pvSemaphore, const char* szName)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_SEMAPHORE, TRACE_GET_OBJECT_NUMBER(QUEUE, pvSemaphore), szName);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7ff ff74 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 80052f0:	0003      	movs	r3, r0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	0019      	movs	r1, r3
 80052f8:	2001      	movs	r0, #1
 80052fa:	f001 fc9f 	bl	8006c3c <prvTraceSetObjectName>
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}

08005306 <vTraceSetMutexName>:

void vTraceSetMutexName(void* pvMutex, const char* szName)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_MUTEX, TRACE_GET_OBJECT_NUMBER(QUEUE, pvMutex), szName);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0018      	movs	r0, r3
 8005314:	f7ff ff60 	bl	80051d8 <prvTraceGetQueueNumberLow16>
 8005318:	0003      	movs	r3, r0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	0019      	movs	r1, r3
 8005320:	2002      	movs	r0, #2
 8005322:	f001 fc8b 	bl	8006c3c <prvTraceSetObjectName>
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b002      	add	sp, #8
 800532c:	bd80      	pop	{r7, pc}

0800532e <prvTraceGetCurrentTaskHandle>:
#endif

#endif

void* prvTraceGetCurrentTaskHandle(void)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8005332:	f7fe fefd 	bl	8004130 <xTaskGetCurrentTaskHandle>
 8005336:	0003      	movs	r3, r0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <xTraceKernelPortInitialize>:

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
	(void)pxBuffer;

	return TRC_SUCCESS;
 8005346:	2300      	movs	r3, #0
}
 8005348:	0018      	movs	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0

	(void)xTzCtrlHandle;

#endif

	return TRC_SUCCESS;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTraceKernelPortInitObjectPropertyTable>:
}

#endif

traceResult xTraceKernelPortInitObjectPropertyTable(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8005360:	4b62      	ldr	r3, [pc, #392]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2209      	movs	r2, #9
 8005366:	649a      	str	r2, [r3, #72]	@ 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8005368:	4b60      	ldr	r3, [pc, #384]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2250      	movs	r2, #80	@ 0x50
 800536e:	2102      	movs	r1, #2
 8005370:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8005372:	4b5e      	ldr	r3, [pc, #376]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2251      	movs	r2, #81	@ 0x51
 8005378:	2106      	movs	r1, #6
 800537a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 800537c:	4b5b      	ldr	r3, [pc, #364]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2252      	movs	r2, #82	@ 0x52
 8005382:	2102      	movs	r1, #2
 8005384:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8005386:	4b59      	ldr	r3, [pc, #356]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2253      	movs	r2, #83	@ 0x53
 800538c:	2106      	movs	r1, #6
 800538e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8005390:	4b56      	ldr	r3, [pc, #344]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2254      	movs	r2, #84	@ 0x54
 8005396:	2104      	movs	r1, #4
 8005398:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 800539a:	4b54      	ldr	r3, [pc, #336]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2255      	movs	r2, #85	@ 0x55
 80053a0:	2101      	movs	r1, #1
 80053a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 80053a4:	4b51      	ldr	r3, [pc, #324]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2256      	movs	r2, #86	@ 0x56
 80053aa:	2102      	movs	r1, #2
 80053ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 80053ae:	4b4f      	ldr	r3, [pc, #316]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2257      	movs	r2, #87	@ 0x57
 80053b4:	2102      	movs	r1, #2
 80053b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 80053b8:	4b4c      	ldr	r3, [pc, #304]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2258      	movs	r2, #88	@ 0x58
 80053be:	2102      	movs	r1, #2
 80053c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80053c2:	4b4a      	ldr	r3, [pc, #296]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	225c      	movs	r2, #92	@ 0x5c
 80053c8:	210f      	movs	r1, #15
 80053ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80053cc:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	225d      	movs	r2, #93	@ 0x5d
 80053d2:	210f      	movs	r1, #15
 80053d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80053d6:	4b45      	ldr	r3, [pc, #276]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	225e      	movs	r2, #94	@ 0x5e
 80053dc:	210f      	movs	r1, #15
 80053de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80053e0:	4b42      	ldr	r3, [pc, #264]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	225f      	movs	r2, #95	@ 0x5f
 80053e6:	210f      	movs	r1, #15
 80053e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80053ea:	4b40      	ldr	r3, [pc, #256]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2260      	movs	r2, #96	@ 0x60
 80053f0:	210f      	movs	r1, #15
 80053f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80053f4:	4b3d      	ldr	r3, [pc, #244]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2261      	movs	r2, #97	@ 0x61
 80053fa:	210f      	movs	r1, #15
 80053fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80053fe:	4b3b      	ldr	r3, [pc, #236]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2262      	movs	r2, #98	@ 0x62
 8005404:	210f      	movs	r1, #15
 8005406:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8005408:	4b38      	ldr	r3, [pc, #224]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2263      	movs	r2, #99	@ 0x63
 800540e:	210f      	movs	r1, #15
 8005410:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8005412:	4b36      	ldr	r3, [pc, #216]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2264      	movs	r2, #100	@ 0x64
 8005418:	210f      	movs	r1, #15
 800541a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 800541c:	4b33      	ldr	r3, [pc, #204]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2268      	movs	r2, #104	@ 0x68
 8005422:	2110      	movs	r1, #16
 8005424:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8005426:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2269      	movs	r2, #105	@ 0x69
 800542c:	2110      	movs	r1, #16
 800542e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8005430:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	226a      	movs	r2, #106	@ 0x6a
 8005436:	2110      	movs	r1, #16
 8005438:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800543a:	4b2c      	ldr	r3, [pc, #176]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	226b      	movs	r2, #107	@ 0x6b
 8005440:	2113      	movs	r1, #19
 8005442:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8005444:	4b29      	ldr	r3, [pc, #164]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	226c      	movs	r2, #108	@ 0x6c
 800544a:	2111      	movs	r1, #17
 800544c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 800544e:	4b27      	ldr	r3, [pc, #156]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	226d      	movs	r2, #109	@ 0x6d
 8005454:	2110      	movs	r1, #16
 8005456:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8005458:	4b24      	ldr	r3, [pc, #144]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	226e      	movs	r2, #110	@ 0x6e
 800545e:	2113      	movs	r1, #19
 8005460:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8005462:	4b22      	ldr	r3, [pc, #136]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	226f      	movs	r2, #111	@ 0x6f
 8005468:	2113      	movs	r1, #19
 800546a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 800546c:	4b1f      	ldr	r3, [pc, #124]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2270      	movs	r2, #112	@ 0x70
 8005472:	2113      	movs	r1, #19
 8005474:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8005476:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2274      	movs	r2, #116	@ 0x74
 800547c:	2100      	movs	r1, #0
 800547e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8005480:	4b1a      	ldr	r3, [pc, #104]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2276      	movs	r2, #118	@ 0x76
 8005486:	2120      	movs	r1, #32
 8005488:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 800548a:	4b18      	ldr	r3, [pc, #96]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2278      	movs	r2, #120	@ 0x78
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8005494:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	227a      	movs	r2, #122	@ 0x7a
 800549a:	21a0      	movs	r1, #160	@ 0xa0
 800549c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800549e:	4b13      	ldr	r3, [pc, #76]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	227c      	movs	r2, #124	@ 0x7c
 80054a4:	2189      	movs	r1, #137	@ 0x89
 80054a6:	0049      	lsls	r1, r1, #1
 80054a8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 80054aa:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	227e      	movs	r2, #126	@ 0x7e
 80054b0:	21ab      	movs	r1, #171	@ 0xab
 80054b2:	0049      	lsls	r1, r1, #1
 80054b4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2280      	movs	r2, #128	@ 0x80
 80054bc:	21b3      	movs	r1, #179	@ 0xb3
 80054be:	0049      	lsls	r1, r1, #1
 80054c0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2282      	movs	r2, #130	@ 0x82
 80054c8:	21c6      	movs	r1, #198	@ 0xc6
 80054ca:	0049      	lsls	r1, r1, #1
 80054cc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80054ce:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2284      	movs	r2, #132	@ 0x84
 80054d4:	21d9      	movs	r1, #217	@ 0xd9
 80054d6:	0049      	lsls	r1, r1, #1
 80054d8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80054da:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <xTraceKernelPortInitObjectPropertyTable+0x190>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	22ec      	movs	r2, #236	@ 0xec
 80054e0:	0052      	lsls	r2, r2, #1
 80054e2:	64da      	str	r2, [r3, #76]	@ 0x4c

	return TRC_SUCCESS;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200031f8 	.word	0x200031f8

080054f0 <xTraceKernelPortInitObjectHandleStack>:

traceResult xTraceKernelPortInitObjectHandleStack(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80054fa:	4b40      	ldr	r3, [pc, #256]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	825a      	strh	r2, [r3, #18]
 8005500:	4b3e      	ldr	r3, [pc, #248]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005502:	8a5a      	ldrh	r2, [r3, #18]
 8005504:	4b3d      	ldr	r3, [pc, #244]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005506:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8005508:	4b3c      	ldr	r3, [pc, #240]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800550a:	2202      	movs	r2, #2
 800550c:	829a      	strh	r2, [r3, #20]
 800550e:	4b3b      	ldr	r3, [pc, #236]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005510:	8a9a      	ldrh	r2, [r3, #20]
 8005512:	4b3a      	ldr	r3, [pc, #232]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005514:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8005516:	4b39      	ldr	r3, [pc, #228]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005518:	2208      	movs	r2, #8
 800551a:	82da      	strh	r2, [r3, #22]
 800551c:	4b37      	ldr	r3, [pc, #220]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800551e:	8ada      	ldrh	r2, [r3, #22]
 8005520:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005522:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8005524:	4b35      	ldr	r3, [pc, #212]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005526:	220a      	movs	r2, #10
 8005528:	831a      	strh	r2, [r3, #24]
 800552a:	4b34      	ldr	r3, [pc, #208]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800552c:	8b1a      	ldrh	r2, [r3, #24]
 800552e:	4b33      	ldr	r3, [pc, #204]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005530:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8005532:	4b32      	ldr	r3, [pc, #200]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005534:	2210      	movs	r2, #16
 8005536:	835a      	strh	r2, [r3, #26]
 8005538:	4b30      	ldr	r3, [pc, #192]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800553a:	8b5a      	ldrh	r2, [r3, #26]
 800553c:	4b2f      	ldr	r3, [pc, #188]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800553e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8005540:	4b2e      	ldr	r3, [pc, #184]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005542:	2214      	movs	r2, #20
 8005544:	839a      	strh	r2, [r3, #28]
 8005546:	4b2d      	ldr	r3, [pc, #180]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005548:	8b9a      	ldrh	r2, [r3, #28]
 800554a:	4b2c      	ldr	r3, [pc, #176]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800554c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 800554e:	4b2b      	ldr	r3, [pc, #172]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005550:	2215      	movs	r2, #21
 8005552:	83da      	strh	r2, [r3, #30]
 8005554:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005556:	8bda      	ldrh	r2, [r3, #30]
 8005558:	4b28      	ldr	r3, [pc, #160]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800555a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 800555c:	4b27      	ldr	r3, [pc, #156]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800555e:	2217      	movs	r2, #23
 8005560:	841a      	strh	r2, [r3, #32]
 8005562:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005564:	8c1a      	ldrh	r2, [r3, #32]
 8005566:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005568:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800556a:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800556c:	2219      	movs	r2, #25
 800556e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8005570:	4b22      	ldr	r3, [pc, #136]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005572:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8005574:	4b21      	ldr	r3, [pc, #132]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005576:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8005578:	4b20      	ldr	r3, [pc, #128]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800557a:	2201      	movs	r2, #1
 800557c:	849a      	strh	r2, [r3, #36]	@ 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 800557e:	4b1f      	ldr	r3, [pc, #124]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005580:	2207      	movs	r2, #7
 8005582:	84da      	strh	r2, [r3, #38]	@ 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8005584:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005586:	2209      	movs	r2, #9
 8005588:	851a      	strh	r2, [r3, #40]	@ 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 800558a:	4b1c      	ldr	r3, [pc, #112]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800558c:	220f      	movs	r2, #15
 800558e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8005590:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005592:	2213      	movs	r2, #19
 8005594:	859a      	strh	r2, [r3, #44]	@ 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8005596:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 8005598:	2214      	movs	r2, #20
 800559a:	85da      	strh	r2, [r3, #46]	@ 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 800559e:	2216      	movs	r2, #22
 80055a0:	861a      	strh	r2, [r3, #48]	@ 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80055a2:	4b16      	ldr	r3, [pc, #88]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80055a4:	2218      	movs	r2, #24
 80055a6:	865a      	strh	r2, [r3, #50]	@ 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80055a8:	4b14      	ldr	r3, [pc, #80]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80055aa:	221a      	movs	r2, #26
 80055ac:	869a      	strh	r2, [r3, #52]	@ 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	e00a      	b.n	80055ca <xTraceKernelPortInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 80055b4:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3318      	adds	r3, #24
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	18d3      	adds	r3, r2, r3
 80055be:	3306      	adds	r3, #6
 80055c0:	2200      	movs	r2, #0
 80055c2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d9f1      	bls.n	80055b4 <xTraceKernelPortInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e009      	b.n	80055ea <xTraceKernelPortInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80055d6:	4a09      	ldr	r2, [pc, #36]	@ (80055fc <xTraceKernelPortInitObjectHandleStack+0x10c>)
 80055d8:	2148      	movs	r1, #72	@ 0x48
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	185b      	adds	r3, r3, r1
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b1a      	cmp	r3, #26
 80055ee:	d9f2      	bls.n	80055d6 <xTraceKernelPortInitObjectHandleStack+0xe6>
	}

	return TRC_SUCCESS;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b002      	add	sp, #8
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	20001dcc 	.word	0x20001dcc

08005600 <pszTraceGetErrorNotEnoughHandles>:

const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	0002      	movs	r2, r0
 8005608:	1dfb      	adds	r3, r7, #7
 800560a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 800560c:	1dfb      	adds	r3, r7, #7
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d816      	bhi.n	8005642 <pszTraceGetErrorNotEnoughHandles+0x42>
 8005614:	009a      	lsls	r2, r3, #2
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <pszTraceGetErrorNotEnoughHandles+0x4c>)
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 800561e:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <pszTraceGetErrorNotEnoughHandles+0x50>)
 8005620:	e010      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <pszTraceGetErrorNotEnoughHandles+0x54>)
 8005624:	e00e      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <pszTraceGetErrorNotEnoughHandles+0x58>)
 8005628:	e00c      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <pszTraceGetErrorNotEnoughHandles+0x5c>)
 800562c:	e00a      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 800562e:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8005630:	e008      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <pszTraceGetErrorNotEnoughHandles+0x64>)
 8005634:	e006      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8005636:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <pszTraceGetErrorNotEnoughHandles+0x68>)
 8005638:	e004      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <pszTraceGetErrorNotEnoughHandles+0x6c>)
 800563c:	e002      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800563e:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8005640:	e000      	b.n	8005644 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0800902c 	.word	0x0800902c
 8005650:	08008688 	.word	0x08008688
 8005654:	080086d0 	.word	0x080086d0
 8005658:	08008718 	.word	0x08008718
 800565c:	0800876c 	.word	0x0800876c
 8005660:	080087b8 	.word	0x080087b8
 8005664:	08008804 	.word	0x08008804
 8005668:	08008850 	.word	0x08008850
 800566c:	080088a4 	.word	0x080088a4
 8005670:	080088fc 	.word	0x080088fc
 8005674:	08008958 	.word	0x08008958

08005678 <xTraceEnable>:

	return TRC_SUCCESS;
}

traceResult xTraceEnable(uint32_t uiStartOption)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	if (xTraceInitialize() == TRC_FAIL)
 8005680:	f000 fc74 	bl	8005f6c <xTraceInitialize>
 8005684:	0003      	movs	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <xTraceEnable+0x16>
	{
		return TRC_FAIL;
 800568a:	2301      	movs	r3, #1
 800568c:	e021      	b.n	80056d2 <xTraceEnable+0x5a>
	}

	if (uiStartOption == TRC_START)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10b      	bne.n	80056ac <xTraceEnable+0x34>
	{
		if (xTraceKernelPortEnable() == TRC_FAIL)
 8005694:	f7ff fe5c 	bl	8005350 <xTraceKernelPortEnable>
 8005698:	0003      	movs	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <xTraceEnable+0x2a>
		{
			return TRC_FAIL;
 800569e:	2301      	movs	r3, #1
 80056a0:	e017      	b.n	80056d2 <xTraceEnable+0x5a>
		}
		
		prvTraceInitTimestamps();
 80056a2:	f000 f8a9 	bl	80057f8 <prvTraceInitTimestamps>

		prvTraceStart();
 80056a6:	f000 f825 	bl	80056f4 <prvTraceStart>
 80056aa:	e011      	b.n	80056d0 <xTraceEnable+0x58>
	}
	else if (uiStartOption == TRC_START_AWAIT_HOST)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d105      	bne.n	80056be <xTraceEnable+0x46>
	{
		prvTraceError("xTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80056b2:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <xTraceEnable+0x64>)
 80056b4:	0018      	movs	r0, r3
 80056b6:	f001 fb7d 	bl	8006db4 <prvTraceError>

		return TRC_FAIL;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e009      	b.n	80056d2 <xTraceEnable+0x5a>
	}
	else if (uiStartOption != TRC_START_FROM_HOST)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <xTraceEnable+0x58>
	{
		prvTraceError("xTraceEnable(TRC_START_FROM_HOST) not allowed in Snapshot mode");
 80056c4:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <xTraceEnable+0x68>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f001 fb74 	bl	8006db4 <prvTraceError>

		return TRC_FAIL;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <xTraceEnable+0x5a>
	}

	return TRC_SUCCESS;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b002      	add	sp, #8
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	08008988 	.word	0x08008988
 80056e0:	080089c8 	.word	0x080089c8

080056e4 <xTraceDisable>:


traceResult xTraceDisable(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	prvTraceStop();
 80056e8:	f000 f86e 	bl	80057c8 <prvTraceStop>

	return TRC_SUCCESS;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <prvTraceStart>:
	handle_of_last_logged_task = 0;
	trcCRITICAL_SECTION_END();
}

static void prvTraceStart(void)
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80056fa:	2417      	movs	r4, #23
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == (void*)0)
 8005702:	4b2d      	ldr	r3, [pc, #180]	@ (80057b8 <prvTraceStart+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d050      	beq.n	80057ac <prvTraceStart+0xb8>
	{
		TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized. Use vTraceEnable() instead!", TRC_UNUSED);
		return;
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 800570a:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <prvTraceStart+0xc4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d04d      	beq.n	80057b0 <prvTraceStart+0xbc>
		return; /* Already running */

	if (traceErrorMessage == (void*)0)
 8005714:	4b29      	ldr	r3, [pc, #164]	@ (80057bc <prvTraceStart+0xc8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d14a      	bne.n	80057b2 <prvTraceStart+0xbe>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	60bb      	str	r3, [r7, #8]
  return(result);
 8005722:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	2301      	movs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <prvTraceStart+0xcc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	4b21      	ldr	r3, [pc, #132]	@ (80057c0 <prvTraceStart+0xcc>)
 800573a:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 800573c:	4b1e      	ldr	r3, [pc, #120]	@ (80057b8 <prvTraceStart+0xc4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8005744:	f7ff fdf3 	bl	800532e <prvTraceGetCurrentTaskHandle>
 8005748:	0003      	movs	r3, r0
 800574a:	0018      	movs	r0, r3
 800574c:	f7ff fcf2 	bl	8005134 <prvTraceGetTaskNumberLow16>
 8005750:	0003      	movs	r3, r0
 8005752:	001a      	movs	r2, r3
 8005754:	0025      	movs	r5, r4
 8005756:	197b      	adds	r3, r7, r5
 8005758:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 800575a:	197b      	adds	r3, r7, r5
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d113      	bne.n	800578a <prvTraceStart+0x96>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8005762:	197c      	adds	r4, r7, r5
 8005764:	2003      	movs	r0, #3
 8005766:	f001 f971 	bl	8006a4c <prvTraceGetObjectHandle>
 800576a:	0003      	movs	r3, r0
 800576c:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 800576e:	4a15      	ldr	r2, [pc, #84]	@ (80057c4 <prvTraceStart+0xd0>)
 8005770:	197b      	adds	r3, r7, r5
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	0019      	movs	r1, r3
 8005776:	2003      	movs	r0, #3
 8005778:	f001 fa60 	bl	8006c3c <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 800577c:	197b      	adds	r3, r7, r5
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	0019      	movs	r1, r3
 8005784:	2003      	movs	r0, #3
 8005786:	f001 f819 	bl	80067bc <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800578a:	2317      	movs	r3, #23
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 ff9f 	bl	80066d4 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8005796:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <prvTraceStart+0xcc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <prvTraceStart+0xcc>)
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f383 8810 	msr	PRIMASK, r3
}
 80057aa:	e002      	b.n	80057b2 <prvTraceStart+0xbe>
		return;
 80057ac:	46c0      	nop			@ (mov r8, r8)
 80057ae:	e000      	b.n	80057b2 <prvTraceStart+0xbe>
		return; /* Already running */
 80057b0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b006      	add	sp, #24
 80057b6:	bdb0      	pop	{r4, r5, r7, pc}
 80057b8:	200031f8 	.word	0x200031f8
 80057bc:	20001e30 	.word	0x20001e30
 80057c0:	20001db4 	.word	0x20001db4
 80057c4:	08008a08 	.word	0x08008a08

080057c8 <prvTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
static void prvTraceStop(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != (void*)0)
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <prvTraceStop+0x28>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <prvTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <prvTraceStop+0x28>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80057dc:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <prvTraceStop+0x2c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <prvTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80057e4:	4b03      	ldr	r3, [pc, #12]	@ (80057f4 <prvTraceStop+0x2c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4798      	blx	r3
	}
}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	200031f8 	.word	0x200031f8
 80057f4:	20001dc0 	.word	0x20001dc0

080057f8 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
static void prvTraceInitTimestamps(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80057fc:	4b03      	ldr	r3, [pc, #12]	@ (800580c <prvTraceInitTimestamps+0x14>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b03      	ldr	r3, [pc, #12]	@ (8005810 <prvTraceInitTimestamps+0x18>)
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	46c0      	nop			@ (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	e000e018 	.word	0xe000e018
 8005810:	20001dc4 	.word	0x20001dc4

08005814 <writeInt8>:

#define MAX_ARG_SIZE (4+32)

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	0008      	movs	r0, r1
 800581e:	0011      	movs	r1, r2
 8005820:	1cfb      	adds	r3, r7, #3
 8005822:	1c02      	adds	r2, r0, #0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	1cbb      	adds	r3, r7, #2
 8005828:	1c0a      	adds	r2, r1, #0
 800582a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
 800582c:	1cfb      	adds	r3, r7, #3
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b23      	cmp	r3, #35	@ 0x23
 8005832:	d901      	bls.n	8005838 <writeInt8+0x24>
	{
		return 255;
 8005834:	23ff      	movs	r3, #255	@ 0xff
 8005836:	e010      	b.n	800585a <writeInt8+0x46>
	}

	((uint8_t*)buffer)[i] = value;
 8005838:	1cfb      	adds	r3, r7, #3
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	18d3      	adds	r3, r2, r3
 8005840:	1cba      	adds	r2, r7, #2
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	701a      	strb	r2, [r3, #0]

	if (i + 1 > MAX_ARG_SIZE)
 8005846:	1cfb      	adds	r3, r7, #3
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b23      	cmp	r3, #35	@ 0x23
 800584c:	d901      	bls.n	8005852 <writeInt8+0x3e>
	{
		return 255;
 800584e:	23ff      	movs	r3, #255	@ 0xff
 8005850:	e003      	b.n	800585a <writeInt8+0x46>
	}

	return ((uint8_t) (i + 1));
 8005852:	1cfb      	adds	r3, r7, #3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	b2db      	uxtb	r3, r3
}
 800585a:	0018      	movs	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	b002      	add	sp, #8
 8005860:	bd80      	pop	{r7, pc}

08005862 <writeInt16>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	0008      	movs	r0, r1
 800586c:	0011      	movs	r1, r2
 800586e:	1cfb      	adds	r3, r7, #3
 8005870:	1c02      	adds	r2, r0, #0
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	003b      	movs	r3, r7
 8005876:	1c0a      	adds	r2, r1, #0
 8005878:	801a      	strh	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
 800587a:	e010      	b.n	800589e <writeInt16+0x3c>
	{
		if (i >= MAX_ARG_SIZE)
 800587c:	1cfb      	adds	r3, r7, #3
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b23      	cmp	r3, #35	@ 0x23
 8005882:	d901      	bls.n	8005888 <writeInt16+0x26>
		{
			return 255;
 8005884:	23ff      	movs	r3, #255	@ 0xff
 8005886:	e025      	b.n	80058d4 <writeInt16+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 8005888:	1cfb      	adds	r3, r7, #3
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	18d3      	adds	r3, r2, r3
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
		i++;
 8005894:	1cfb      	adds	r3, r7, #3
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	1cfb      	adds	r3, r7, #3
 800589a:	3201      	adds	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
	while ((i % 2) != 0)
 800589e:	1cfb      	adds	r3, r7, #3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e7      	bne.n	800587c <writeInt16+0x1a>
	}

	if (i + 2 > MAX_ARG_SIZE)
 80058ac:	1cfb      	adds	r3, r7, #3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b22      	cmp	r3, #34	@ 0x22
 80058b2:	d901      	bls.n	80058b8 <writeInt16+0x56>
	{
		return 255;
 80058b4:	23ff      	movs	r3, #255	@ 0xff
 80058b6:	e00d      	b.n	80058d4 <writeInt16+0x72>
	}

	((uint16_t*)buffer)[i/2] = value;
 80058b8:	1cfb      	adds	r3, r7, #3
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	003a      	movs	r2, r7
 80058c8:	8812      	ldrh	r2, [r2, #0]
 80058ca:	801a      	strh	r2, [r3, #0]

	return ((uint8_t) (i + 2));
 80058cc:	1cfb      	adds	r3, r7, #3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	3302      	adds	r3, #2
 80058d2:	b2db      	uxtb	r3, r3
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <writeInt32>:
#endif

#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	230b      	movs	r3, #11
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	1c0a      	adds	r2, r1, #0
 80058ec:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(buffer != (void*)0, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
 80058ee:	e012      	b.n	8005916 <writeInt32+0x3a>
	{
		if (i >= MAX_ARG_SIZE)
 80058f0:	230b      	movs	r3, #11
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b23      	cmp	r3, #35	@ 0x23
 80058f8:	d901      	bls.n	80058fe <writeInt32+0x22>
		{
			return 255;
 80058fa:	23ff      	movs	r3, #255	@ 0xff
 80058fc:	e027      	b.n	800594e <writeInt32+0x72>
		}

		((uint8_t*)buffer)[i] = 0;
 80058fe:	210b      	movs	r1, #11
 8005900:	187b      	adds	r3, r7, r1
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	18d3      	adds	r3, r2, r3
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
		i++;
 800590c:	187b      	adds	r3, r7, r1
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	187b      	adds	r3, r7, r1
 8005912:	3201      	adds	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
	while ((i % 4) != 0)
 8005916:	210b      	movs	r1, #11
 8005918:	187b      	adds	r3, r7, r1
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2203      	movs	r2, #3
 800591e:	4013      	ands	r3, r2
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <writeInt32+0x14>
	}

	if (i + 4 > MAX_ARG_SIZE)
 8005926:	187b      	adds	r3, r7, r1
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b20      	cmp	r3, #32
 800592c:	d901      	bls.n	8005932 <writeInt32+0x56>
	{
		return 255;
 800592e:	23ff      	movs	r3, #255	@ 0xff
 8005930:	e00d      	b.n	800594e <writeInt32+0x72>
	}

	((uint32_t*)buffer)[i/4] = value;
 8005932:	210b      	movs	r1, #11
 8005934:	187b      	adds	r3, r7, r1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	089b      	lsrs	r3, r3, #2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	18d3      	adds	r3, r2, r3
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]

	return ((uint8_t) (i + 4));
 8005946:	187b      	adds	r3, r7, r1
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3304      	adds	r3, #4
 800594c:	b2db      	uxtb	r3, r3
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b004      	add	sp, #16
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <prvTraceUserEventFormat>:
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
 8005958:	b5b0      	push	{r4, r5, r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	001a      	movs	r2, r3
 8005966:	1cfb      	adds	r3, r7, #3
 8005968:	701a      	strb	r2, [r3, #0]
	uint16_t formatStrIndex = 0;
 800596a:	2316      	movs	r3, #22
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	2200      	movs	r2, #0
 8005970:	801a      	strh	r2, [r3, #0]
	uint8_t argCounter = 0;
 8005972:	2315      	movs	r3, #21
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
	uint8_t i = byteOffset;
 800597a:	2314      	movs	r3, #20
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	1cfa      	adds	r2, r7, #3
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	701a      	strb	r2, [r3, #0]

	while (formatStr[formatStrIndex] != '\0')
 8005984:	e16f      	b.n	8005c66 <prvTraceUserEventFormat+0x30e>
	{
		if (formatStr[formatStrIndex] == '%')
 8005986:	2116      	movs	r1, #22
 8005988:	187b      	adds	r3, r7, r1
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	18d3      	adds	r3, r2, r3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b25      	cmp	r3, #37	@ 0x25
 8005994:	d000      	beq.n	8005998 <prvTraceUserEventFormat+0x40>
 8005996:	e155      	b.n	8005c44 <prvTraceUserEventFormat+0x2ec>
		{
			if (formatStr[formatStrIndex + 1] == '%')
 8005998:	187b      	adds	r3, r7, r1
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b25      	cmp	r3, #37	@ 0x25
 80059a6:	d105      	bne.n	80059b4 <prvTraceUserEventFormat+0x5c>
			{
				formatStrIndex += 2;
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	187a      	adds	r2, r7, r1
 80059ac:	8812      	ldrh	r2, [r2, #0]
 80059ae:	3202      	adds	r2, #2
 80059b0:	801a      	strh	r2, [r3, #0]
				continue;
 80059b2:	e158      	b.n	8005c66 <prvTraceUserEventFormat+0x30e>
			}

			/* We found a possible argument */
			argCounter++;
 80059b4:	2115      	movs	r1, #21
 80059b6:	187b      	adds	r3, r7, r1
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	3201      	adds	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]

			formatStrIndex++;
 80059c0:	2116      	movs	r1, #22
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	187b      	adds	r3, r7, r1
 80059c8:	3201      	adds	r2, #1
 80059ca:	801a      	strh	r2, [r3, #0]

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80059cc:	e005      	b.n	80059da <prvTraceUserEventFormat+0x82>
				formatStrIndex++;
 80059ce:	2116      	movs	r1, #22
 80059d0:	187b      	adds	r3, r7, r1
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	3201      	adds	r2, #1
 80059d8:	801a      	strh	r2, [r3, #0]
			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
 80059da:	2116      	movs	r1, #22
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80059e8:	d906      	bls.n	80059f8 <prvTraceUserEventFormat+0xa0>
 80059ea:	187b      	adds	r3, r7, r1
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	18d3      	adds	r3, r2, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b39      	cmp	r3, #57	@ 0x39
 80059f6:	d9ea      	bls.n	80059ce <prvTraceUserEventFormat+0x76>
 80059f8:	2116      	movs	r1, #22
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	18d3      	adds	r3, r2, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b23      	cmp	r3, #35	@ 0x23
 8005a06:	d0e2      	beq.n	80059ce <prvTraceUserEventFormat+0x76>
 8005a08:	187b      	adds	r3, r7, r1
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a14:	d0db      	beq.n	80059ce <prvTraceUserEventFormat+0x76>

			/* This check is necessary to avoid moving past end of string. */
			if (formatStr[formatStrIndex] != '\0')
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	18d3      	adds	r3, r2, r3
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d100      	bne.n	8005a26 <prvTraceUserEventFormat+0xce>
 8005a24:	e129      	b.n	8005c7a <prvTraceUserEventFormat+0x322>
			{
				switch (formatStr[formatStrIndex])
 8005a26:	187b      	adds	r3, r7, r1
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	18d3      	adds	r3, r2, r3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	3b58      	subs	r3, #88	@ 0x58
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d900      	bls.n	8005a38 <prvTraceUserEventFormat+0xe0>
 8005a36:	e0f3      	b.n	8005c20 <prvTraceUserEventFormat+0x2c8>
 8005a38:	009a      	lsls	r2, r3, #2
 8005a3a:	4b96      	ldr	r3, [pc, #600]	@ (8005c94 <prvTraceUserEventFormat+0x33c>)
 8005a3c:	18d3      	adds	r3, r2, r3
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	469f      	mov	pc, r3
				{
					case 'd':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	60ba      	str	r2, [r7, #8]
 8005a48:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8005a4a:	2314      	movs	r3, #20
 8005a4c:	18fc      	adds	r4, r7, r3
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	7819      	ldrb	r1, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7ff ff41 	bl	80058dc <writeInt32>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	7023      	strb	r3, [r4, #0]
						break;
 8005a5e:	e0e6      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					case 'x':
					case 'X':
					case 'u':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, uint32_t));
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	60ba      	str	r2, [r7, #8]
 8005a66:	681a      	ldr	r2, [r3, #0]
						i = writeInt32(	buffer,
 8005a68:	2314      	movs	r3, #20
 8005a6a:	18fc      	adds	r4, r7, r3
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	7819      	ldrb	r1, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7ff ff32 	bl	80058dc <writeInt32>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	7023      	strb	r3, [r4, #0]
						break;
 8005a7c:	e0d7      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					case 's':
						{
							TraceStringHandle_t xString;
							xTraceStringRegister((char*)va_arg(vl, char*), &xString);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	60ba      	str	r2, [r7, #8]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2210      	movs	r2, #16
 8005a88:	18ba      	adds	r2, r7, r2
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 fa49 	bl	8005f24 <xTraceStringRegister>
							
							i = writeInt16(buffer,
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	2314      	movs	r3, #20
 8005a98:	18fc      	adds	r4, r7, r3
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	7819      	ldrb	r1, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff fede 	bl	8005862 <writeInt16>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	7023      	strb	r3, [r4, #0]
								i,
								(uint16_t)xString);
						}
						break;
 8005aaa:	e0c0      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					to keep va_arg and i consistent. */

					case 'f':
						i = writeInt32(	buffer,
										i,
										(uint32_t)va_arg(vl, double));
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	3307      	adds	r3, #7
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	4393      	bics	r3, r2
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	3208      	adds	r2, #8
 8005ab8:	60ba      	str	r2, [r7, #8]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
						i = writeInt32(	buffer,
 8005abe:	0010      	movs	r0, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	f7fa fbc5 	bl	8000250 <__aeabi_d2uiz>
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	2314      	movs	r3, #20
 8005aca:	18fc      	adds	r4, r7, r3
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	7819      	ldrb	r1, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7ff ff02 	bl	80058dc <writeInt32>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	7023      	strb	r3, [r4, #0]
						break;
 8005adc:	e0a7      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
#endif
					case 'l':
						formatStrIndex++;
 8005ade:	2116      	movs	r1, #22
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	3201      	adds	r2, #1
 8005ae8:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8005aea:	187b      	adds	r3, r7, r1
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b66      	cmp	r3, #102	@ 0x66
 8005af6:	d12f      	bne.n	8005b58 <prvTraceUserEventFormat+0x200>
							data on uint_32 format (will not be displayed anyway). This is just
							to keep va_arg and i consistent. */
							case 'f':
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
												i,
												(uint32_t)va_arg(vl, double));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3307      	adds	r3, #7
 8005afc:	2207      	movs	r2, #7
 8005afe:	4393      	bics	r3, r2
 8005b00:	001a      	movs	r2, r3
 8005b02:	3208      	adds	r2, #8
 8005b04:	60ba      	str	r2, [r7, #8]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* In this case, the value will not be shown anyway */
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	f7fa fb9f 	bl	8000250 <__aeabi_d2uiz>
 8005b12:	0002      	movs	r2, r0
 8005b14:	2514      	movs	r5, #20
 8005b16:	197c      	adds	r4, r7, r5
 8005b18:	197b      	adds	r3, r7, r5
 8005b1a:	7819      	ldrb	r1, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7ff fedc 	bl	80058dc <writeInt32>
 8005b24:	0003      	movs	r3, r0
 8005b26:	7023      	strb	r3, [r4, #0]

								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
												i,
												(uint32_t)va_arg(vl, double));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3307      	adds	r3, #7
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	4393      	bics	r3, r2
 8005b30:	001a      	movs	r2, r3
 8005b32:	3208      	adds	r2, #8
 8005b34:	60ba      	str	r2, [r7, #8]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
								i = writeInt32(	buffer, /* Do it twice, to write in total 8 bytes */
 8005b3a:	0010      	movs	r0, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	f7fa fb87 	bl	8000250 <__aeabi_d2uiz>
 8005b42:	0002      	movs	r2, r0
 8005b44:	197c      	adds	r4, r7, r5
 8005b46:	197b      	adds	r3, r7, r5
 8005b48:	7819      	ldrb	r1, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7ff fec5 	bl	80058dc <writeInt32>
 8005b52:	0003      	movs	r3, r0
 8005b54:	7023      	strb	r3, [r4, #0]
								break;
 8005b56:	e000      	b.n	8005b5a <prvTraceUserEventFormat+0x202>
#endif
							default:
								break;
 8005b58:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8005b5a:	e068      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					case 'h':
						formatStrIndex++;
 8005b5c:	2116      	movs	r1, #22
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	3201      	adds	r2, #1
 8005b66:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	18d3      	adds	r3, r2, r3
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d002      	beq.n	8005b7c <prvTraceUserEventFormat+0x224>
 8005b76:	2b75      	cmp	r3, #117	@ 0x75
 8005b78:	d010      	beq.n	8005b9c <prvTraceUserEventFormat+0x244>
												i,
												(uint16_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8005b7a:	e01f      	b.n	8005bbc <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	60ba      	str	r2, [r7, #8]
 8005b82:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	2314      	movs	r3, #20
 8005b88:	18fc      	adds	r4, r7, r3
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	7819      	ldrb	r1, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff fe66 	bl	8005862 <writeInt16>
 8005b96:	0003      	movs	r3, r0
 8005b98:	7023      	strb	r3, [r4, #0]
								break;
 8005b9a:	e00f      	b.n	8005bbc <prvTraceUserEventFormat+0x264>
												(uint16_t)va_arg(vl, uint32_t));
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	60ba      	str	r2, [r7, #8]
 8005ba2:	681b      	ldr	r3, [r3, #0]
								i = writeInt16(	buffer,
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	2314      	movs	r3, #20
 8005ba8:	18fc      	adds	r4, r7, r3
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	7819      	ldrb	r1, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7ff fe56 	bl	8005862 <writeInt16>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	7023      	strb	r3, [r4, #0]
								break;
 8005bba:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8005bbc:	e037      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					case 'b':
						formatStrIndex++;
 8005bbe:	2116      	movs	r1, #22
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	187b      	adds	r3, r7, r1
 8005bc6:	3201      	adds	r2, #1
 8005bc8:	801a      	strh	r2, [r3, #0]
						switch (formatStr[formatStrIndex])
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	18d3      	adds	r3, r2, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b64      	cmp	r3, #100	@ 0x64
 8005bd6:	d002      	beq.n	8005bde <prvTraceUserEventFormat+0x286>
 8005bd8:	2b75      	cmp	r3, #117	@ 0x75
 8005bda:	d010      	beq.n	8005bfe <prvTraceUserEventFormat+0x2a6>
												i,
												(uint8_t)va_arg(vl, uint32_t));
								break;

							default:
								break;
 8005bdc:	e01f      	b.n	8005c1e <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	60ba      	str	r2, [r7, #8]
 8005be4:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	2314      	movs	r3, #20
 8005bea:	18fc      	adds	r4, r7, r3
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	7819      	ldrb	r1, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7ff fe0e 	bl	8005814 <writeInt8>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	7023      	strb	r3, [r4, #0]
								break;
 8005bfc:	e00f      	b.n	8005c1e <prvTraceUserEventFormat+0x2c6>
												(uint8_t)va_arg(vl, uint32_t));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	1d1a      	adds	r2, r3, #4
 8005c02:	60ba      	str	r2, [r7, #8]
 8005c04:	681b      	ldr	r3, [r3, #0]
								i = writeInt8(	buffer,
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	2314      	movs	r3, #20
 8005c0a:	18fc      	adds	r4, r7, r3
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff fdfe 	bl	8005814 <writeInt8>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	7023      	strb	r3, [r4, #0]
								break;
 8005c1c:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8005c1e:	e006      	b.n	8005c2e <prvTraceUserEventFormat+0x2d6>
					default:
						/* False alarm: this wasn't a valid format specifier */
						argCounter--;
 8005c20:	2115      	movs	r1, #21
 8005c22:	187b      	adds	r3, r7, r1
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
						break;
 8005c2c:	46c0      	nop			@ (mov r8, r8)
				}

				if (argCounter > 15)
 8005c2e:	2315      	movs	r3, #21
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b0f      	cmp	r3, #15
 8005c36:	d905      	bls.n	8005c44 <prvTraceUserEventFormat+0x2ec>
				{
					prvTraceError("xTracePrintF - Too many arguments, max 15 allowed!");
 8005c38:	4b17      	ldr	r3, [pc, #92]	@ (8005c98 <prvTraceUserEventFormat+0x340>)
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f001 f8ba 	bl	8006db4 <prvTraceError>
					return 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e022      	b.n	8005c8a <prvTraceUserEventFormat+0x332>
				}
			}
			else
				break;
		}
		formatStrIndex++;
 8005c44:	2116      	movs	r1, #22
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	3201      	adds	r2, #1
 8005c4e:	801a      	strh	r2, [r3, #0]
		if (i == 255)
 8005c50:	2314      	movs	r3, #20
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2bff      	cmp	r3, #255	@ 0xff
 8005c58:	d105      	bne.n	8005c66 <prvTraceUserEventFormat+0x30e>
		{
			prvTraceError("xTracePrintF - Too large arguments, max 32 byte allowed!");
 8005c5a:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <prvTraceUserEventFormat+0x344>)
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f001 f8a9 	bl	8006db4 <prvTraceError>
			return 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e011      	b.n	8005c8a <prvTraceUserEventFormat+0x332>
	while (formatStr[formatStrIndex] != '\0')
 8005c66:	2316      	movs	r3, #22
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	18d3      	adds	r3, r2, r3
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d000      	beq.n	8005c78 <prvTraceUserEventFormat+0x320>
 8005c76:	e686      	b.n	8005986 <prvTraceUserEventFormat+0x2e>
 8005c78:	e000      	b.n	8005c7c <prvTraceUserEventFormat+0x324>
				break;
 8005c7a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return (uint8_t)(i+3)/4;
 8005c7c:	2314      	movs	r3, #20
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	3303      	adds	r3, #3
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	b2db      	uxtb	r3, r3
}
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b006      	add	sp, #24
 8005c90:	bdb0      	pop	{r4, r5, r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	08009050 	.word	0x08009050
 8005c98:	08008a14 	.word	0x08008a14
 8005c9c:	08008a48 	.word	0x08008a48

08005ca0 <xTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrintF(TraceStringHandle_t eventLabel, const char* formatStr, ...)
{
 8005ca0:	b40e      	push	{r1, r2, r3}
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
	va_list vl;

	va_start(vl, formatStr);
 8005caa:	2320      	movs	r3, #32
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	60fb      	str	r3, [r7, #12]
	xTraceVPrintF(eventLabel, formatStr, vl);
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	69f9      	ldr	r1, [r7, #28]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 f808 	bl	8005ccc <xTraceVPrintF>
	va_end(vl);

	return TRC_SUCCESS;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b005      	add	sp, #20
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	b003      	add	sp, #12
 8005cca:	4718      	bx	r3

08005ccc <xTraceVPrintF>:
 * See xTracePrintF documentation for further details.
 *
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceVPrintF(TraceStringHandle_t eventLabel, const char* formatStr, va_list vl)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b094      	sub	sp, #80	@ 0x50
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	uint32_t tempDataBuffer[(3 + MAX_ARG_SIZE) / 4];
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(formatStr != (void*)0, "vTraceVPrintF: formatStr == NULL", TRC_FAIL);

	trcCRITICAL_SECTION_BEGIN();
 8005ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce8:	f383 8810 	msr	PRIMASK, r3
}
 8005cec:	46c0      	nop			@ (mov r8, r8)
 8005cee:	4b5e      	ldr	r3, [pc, #376]	@ (8005e68 <xTraceVPrintF+0x19c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8005e68 <xTraceVPrintF+0x19c>)
 8005cf6:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d100      	bne.n	8005d04 <xTraceVPrintF+0x38>
 8005d02:	e0a0      	b.n	8005e46 <xTraceVPrintF+0x17a>
 8005d04:	4b5a      	ldr	r3, [pc, #360]	@ (8005e70 <xTraceVPrintF+0x1a4>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d100      	bne.n	8005d0e <xTraceVPrintF+0x42>
 8005d0c:	e09b      	b.n	8005e46 <xTraceVPrintF+0x17a>
	{
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);
 8005d0e:	2114      	movs	r1, #20
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	64bb      	str	r3, [r7, #72]	@ 0x48

		ue1->type = (uint8_t)EVENT_BEING_WRITTEN;	 /* Update this as the last step */
 8005d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d16:	22aa      	movs	r2, #170	@ 0xaa
 8005d18:	701a      	strb	r2, [r3, #0]

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
 8005d1a:	187a      	adds	r2, r7, r1
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	68b8      	ldr	r0, [r7, #8]
 8005d20:	2304      	movs	r3, #4
 8005d22:	f7ff fe19 	bl	8005958 <prvTraceUserEventFormat>
 8005d26:	0003      	movs	r3, r0
 8005d28:	647b      	str	r3, [r7, #68]	@ 0x44

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	0011      	movs	r1, r2
 8005d30:	0018      	movs	r0, r3
 8005d32:	f000 ffed 	bl	8006d10 <prvTraceOpenSymbol>
 8005d36:	0003      	movs	r3, r0
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3c:	805a      	strh	r2, [r3, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
 8005d3e:	20ff      	movs	r0, #255	@ 0xff
 8005d40:	f001 f92c 	bl	8006f9c <prvTraceGetDTS>
 8005d44:	0003      	movs	r3, r0
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4a:	705a      	strb	r2, [r3, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
 8005d4c:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d077      	beq.n	8005e46 <xTraceVPrintF+0x17a>
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
 8005d56:	4b45      	ldr	r3, [pc, #276]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d5e:	18d2      	adds	r2, r2, r3
 8005d60:	4b42      	ldr	r3, [pc, #264]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d91f      	bls.n	8005daa <xTraceVPrintF+0xde>
			{
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8005d6a:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	2182      	movs	r1, #130	@ 0x82
 8005d78:	00c9      	lsls	r1, r1, #3
 8005d7a:	468c      	mov	ip, r1
 8005d7c:	4463      	add	r3, ip
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	1d18      	adds	r0, r3, #4
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
 8005d82:	4b3a      	ldr	r3, [pc, #232]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	4b38      	ldr	r3, [pc, #224]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	009b      	lsls	r3, r3, #2
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8005d92:	001a      	movs	r2, r3
 8005d94:	2100      	movs	r1, #0
 8005d96:	f002 fbcf 	bl	8008538 <memset>
				RecorderDataPtr->nextFreeIndex = 0;
 8005d9a:	4b34      	ldr	r3, [pc, #208]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
 8005da2:	4b32      	ldr	r3, [pc, #200]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2201      	movs	r2, #1
 8005da8:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
 8005daa:	4b30      	ldr	r3, [pc, #192]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d045      	beq.n	8005e40 <xTraceVPrintF+0x174>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
 8005db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	0018      	movs	r0, r3
 8005dba:	f001 f829 	bl	8006e10 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	2182      	movs	r1, #130	@ 0x82
 8005dcc:	00c9      	lsls	r1, r1, #3
 8005dce:	468c      	mov	ip, r1
 8005dd0:	4463      	add	r3, ip
 8005dd2:	18d3      	adds	r3, r2, r3
 8005dd4:	1d18      	adds	r0, r3, #4
						tempDataBuffer,
						noOfSlots * 4);
 8005dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd8:	009a      	lsls	r2, r3, #2
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
 8005dda:	2314      	movs	r3, #20
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	0019      	movs	r1, r3
 8005de0:	f002 fbe8 	bl	80085b4 <memcpy>

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8005de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de6:	b2d9      	uxtb	r1, r3
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8005de8:	4b20      	ldr	r3, [pc, #128]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b1f      	ldr	r3, [pc, #124]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	009b      	lsls	r3, r3, #2
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
 8005df4:	3969      	subs	r1, #105	@ 0x69
 8005df6:	b2c8      	uxtb	r0, r1
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
 8005df8:	491e      	ldr	r1, [pc, #120]	@ (8005e74 <xTraceVPrintF+0x1a8>)
 8005dfa:	18d3      	adds	r3, r2, r3
 8005dfc:	185b      	adds	r3, r3, r1
 8005dfe:	1c02      	adds	r2, r0, #0
 8005e00:	701a      	strb	r2, [r3, #0]

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
 8005e02:	4b1a      	ldr	r3, [pc, #104]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	4b18      	ldr	r3, [pc, #96]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e0e:	188a      	adds	r2, r1, r2
 8005e10:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
 8005e12:	4b16      	ldr	r3, [pc, #88]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1e:	188a      	adds	r2, r1, r2
 8005e20:	615a      	str	r2, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005e22:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	23fa      	movs	r3, #250	@ 0xfa
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d307      	bcc.n	8005e40 <xTraceVPrintF+0x174>
				{
					#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
 8005e30:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2201      	movs	r2, #1
 8005e36:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
 8005e38:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <xTraceVPrintF+0x1a0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8005e40:	2001      	movs	r0, #1
 8005e42:	f000 ffe5 	bl	8006e10 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <xTraceVPrintF+0x19c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <xTraceVPrintF+0x19c>)
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif

	return TRC_SUCCESS;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	b014      	add	sp, #80	@ 0x50
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	20001db4 	.word	0x20001db4
 8005e6c:	200031f8 	.word	0x200031f8
 8005e70:	20001dbc 	.word	0x20001dbc
 8005e74:	00000414 	.word	0x00000414

08005e78 <xTracePrint>:
 * Generates a User Event with a text label. The label is created/looked up
 * in the symbol table using xTraceStringRegister.
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTracePrint(TraceStringHandle_t chn, const char* str)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b089      	sub	sp, #36	@ 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e82:	f3ef 8310 	mrs	r3, PRIMASK
 8005e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e88:	68fb      	ldr	r3, [r7, #12]
#if (TRC_CFG_USE_SEPARATE_USER_EVENT_BUFFER == 0)
	UserEvent* ue;
	uint8_t dts1;
	TRACE_ALLOC_CRITICAL_SECTION();

	trcCRITICAL_SECTION_BEGIN();
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f383 8810 	msr	PRIMASK, r3
}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <xTracePrint+0xa0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <xTracePrint+0xa0>)
 8005ea0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <xTracePrint+0xa4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d025      	beq.n	8005ef8 <xTracePrint+0x80>
 8005eac:	4b1c      	ldr	r3, [pc, #112]	@ (8005f20 <xTracePrint+0xa8>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d021      	beq.n	8005ef8 <xTracePrint+0x80>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005eb4:	20ff      	movs	r0, #255	@ 0xff
 8005eb6:	f001 f871 	bl	8006f9c <prvTraceGetDTS>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	001a      	movs	r2, r3
 8005ebe:	241b      	movs	r4, #27
 8005ec0:	193b      	adds	r3, r7, r4
 8005ec2:	701a      	strb	r2, [r3, #0]
		ue = (UserEvent*) prvTraceNextFreeEventBufferSlot();
 8005ec4:	f000 fd4e 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	617b      	str	r3, [r7, #20]
		if (ue != (void*)0)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d012      	beq.n	8005ef8 <xTracePrint+0x80>
		{
			ue->dts = dts1;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	193a      	adds	r2, r7, r4
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	705a      	strb	r2, [r3, #1]
			ue->type = (uint8_t)USER_EVENT;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2298      	movs	r2, #152	@ 0x98
 8005ede:	701a      	strb	r2, [r3, #0]
			ue->payload = prvTraceOpenSymbol(str, chn);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 ff12 	bl	8006d10 <prvTraceOpenSymbol>
 8005eec:	0003      	movs	r3, r0
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8005ef4:	f001 f828 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <xTracePrint+0xa0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <xTracePrint+0xa0>)
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	46c0      	nop			@ (mov r8, r8)

		prvTraceUBHelper2(channel, tempDataBuffer, noOfSlots);
	}
#endif

	return TRC_SUCCESS;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b009      	add	sp, #36	@ 0x24
 8005f16:	bd90      	pop	{r4, r7, pc}
 8005f18:	20001db4 	.word	0x20001db4
 8005f1c:	200031f8 	.word	0x200031f8
 8005f20:	20001dbc 	.word	0x20001dbc

08005f24 <xTraceStringRegister>:
 *	 ...
 *	 xTracePrintF(myEventHandle, "My value is: %d", myValue);
 ******************************************************************************/
#if ((TRC_CFG_SCHEDULING_ONLY == 0) && (TRC_CFG_INCLUDE_USER_EVENTS == 1))
traceResult xTraceStringRegister(const char* label, TraceStringHandle_t *pxString)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	TRACE_ASSERT(label != (void*)0, "xTraceStringRegister: label == NULL", TRC_FAIL);
	TRACE_ASSERT(RecorderDataPtr != 0, "Recorder not initialized, call vTraceEnable() first!", TRC_FAIL);

	*pxString = prvTraceOpenSymbol(label, 0);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 feec 	bl	8006d10 <prvTraceOpenSymbol>
 8005f38:	0002      	movs	r2, r0
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <xTraceRegisterString>:

/* DEPRECATED */
TraceStringHandle_t xTraceRegisterString(const char* name)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t trcStr = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
	xTraceStringRegister(name, &trcStr);
 8005f54:	230c      	movs	r3, #12
 8005f56:	18fa      	adds	r2, r7, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff ffe1 	bl	8005f24 <xTraceStringRegister>

	return trcStr;
 8005f62:	68fb      	ldr	r3, [r7, #12]
}
 8005f64:	0018      	movs	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b004      	add	sp, #16
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xTraceInitialize>:
#endif

traceResult xTraceInitialize(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8005f70:	4b7f      	ldr	r3, [pc, #508]	@ (8006170 <xTraceInitialize+0x204>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e0f6      	b.n	800616a <xTraceInitialize+0x1fe>
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8005f7c:	4b7d      	ldr	r3, [pc, #500]	@ (8006174 <xTraceInitialize+0x208>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	4252      	negs	r2, r2
 8005f82:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8005f84:	4b7c      	ldr	r3, [pc, #496]	@ (8006178 <xTraceInitialize+0x20c>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8005f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800617c <xTraceInitialize+0x210>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8005f90:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <xTraceInitialize+0x214>)
 8005f92:	4a7c      	ldr	r2, [pc, #496]	@ (8006184 <xTraceInitialize+0x218>)
 8005f94:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return TRC_FAIL;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8005f96:	4b7c      	ldr	r3, [pc, #496]	@ (8006188 <xTraceInitialize+0x21c>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800618c <xTraceInitialize+0x220>)
 8005f9c:	601a      	str	r2, [r3, #0]

	if (xTraceKernelPortInitialize(&xKernelPortDataBuffer) == TRC_FAIL)
 8005f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006190 <xTraceInitialize+0x224>)
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff f9cc 	bl	800533e <xTraceKernelPortInitialize>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <xTraceInitialize+0x44>
	{
		return TRC_FAIL;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0dc      	b.n	800616a <xTraceInitialize+0x1fe>
	}

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8005fb0:	4b73      	ldr	r3, [pc, #460]	@ (8006180 <xTraceInitialize+0x214>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a77      	ldr	r2, [pc, #476]	@ (8006194 <xTraceInitialize+0x228>)
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f002 fabd 	bl	8008538 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8005fbe:	4b70      	ldr	r3, [pc, #448]	@ (8006180 <xTraceInitialize+0x214>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a75      	ldr	r2, [pc, #468]	@ (8006198 <xTraceInitialize+0x22c>)
 8005fc4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8005fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8006180 <xTraceInitialize+0x214>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2207      	movs	r2, #7
 8005fcc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8005fce:	4b6c      	ldr	r3, [pc, #432]	@ (8006180 <xTraceInitialize+0x214>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006180 <xTraceInitialize+0x214>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a6e      	ldr	r2, [pc, #440]	@ (8006194 <xTraceInitialize+0x228>)
 8005fdc:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8005fde:	4b68      	ldr	r3, [pc, #416]	@ (8006180 <xTraceInitialize+0x214>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	22fa      	movs	r2, #250	@ 0xfa
 8005fe4:	0092      	lsls	r2, r2, #2
 8005fe6:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8005fe8:	4b65      	ldr	r3, [pc, #404]	@ (8006180 <xTraceInitialize+0x214>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a6b      	ldr	r2, [pc, #428]	@ (800619c <xTraceInitialize+0x230>)
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005ff0:	4b63      	ldr	r3, [pc, #396]	@ (8006180 <xTraceInitialize+0x214>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	645a      	str	r2, [r3, #68]	@ 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8005ff8:	4b61      	ldr	r3, [pc, #388]	@ (8006180 <xTraceInitialize+0x214>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	635a      	str	r2, [r3, #52]	@ 0x34

	/* This function is kernel specific */
	xTraceKernelPortInitObjectPropertyTable();
 8006000:	f7ff f9ac 	bl	800535c <xTraceKernelPortInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8006004:	4b5e      	ldr	r3, [pc, #376]	@ (8006180 <xTraceInitialize+0x214>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2398      	movs	r3, #152	@ 0x98
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4964      	ldr	r1, [pc, #400]	@ (80061a0 <xTraceInitialize+0x234>)
 800600e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8006010:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <xTraceInitialize+0x214>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2399      	movs	r3, #153	@ 0x99
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	21c8      	movs	r1, #200	@ 0xc8
 800601a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 800601c:	4b58      	ldr	r3, [pc, #352]	@ (8006180 <xTraceInitialize+0x214>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	239a      	movs	r3, #154	@ 0x9a
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	2101      	movs	r1, #1
 8006026:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8006028:	4b55      	ldr	r3, [pc, #340]	@ (8006180 <xTraceInitialize+0x214>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	23ef      	movs	r3, #239	@ 0xef
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	495c      	ldr	r1, [pc, #368]	@ (80061a4 <xTraceInitialize+0x238>)
 8006032:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8006034:	4b52      	ldr	r3, [pc, #328]	@ (8006180 <xTraceInitialize+0x214>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	22f0      	movs	r2, #240	@ 0xf0
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	4694      	mov	ip, r2
 800603e:	4463      	add	r3, ip
 8006040:	4959      	ldr	r1, [pc, #356]	@ (80061a8 <xTraceInitialize+0x23c>)
 8006042:	2250      	movs	r2, #80	@ 0x50
 8006044:	0018      	movs	r0, r3
 8006046:	f000 fdd5 	bl	8006bf4 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 800604a:	4b4d      	ldr	r3, [pc, #308]	@ (8006180 <xTraceInitialize+0x214>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	2382      	movs	r3, #130	@ 0x82
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	4956      	ldr	r1, [pc, #344]	@ (80061ac <xTraceInitialize+0x240>)
 8006054:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8006056:	4b4a      	ldr	r3, [pc, #296]	@ (8006180 <xTraceInitialize+0x214>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a55      	ldr	r2, [pc, #340]	@ (80061b0 <xTraceInitialize+0x244>)
 800605c:	210a      	movs	r1, #10
 800605e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8006060:	4b47      	ldr	r3, [pc, #284]	@ (8006180 <xTraceInitialize+0x214>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a53      	ldr	r2, [pc, #332]	@ (80061b4 <xTraceInitialize+0x248>)
 8006066:	210b      	movs	r1, #11
 8006068:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 800606a:	4b45      	ldr	r3, [pc, #276]	@ (8006180 <xTraceInitialize+0x214>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a52      	ldr	r2, [pc, #328]	@ (80061b8 <xTraceInitialize+0x24c>)
 8006070:	210c      	movs	r1, #12
 8006072:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8006074:	4b42      	ldr	r3, [pc, #264]	@ (8006180 <xTraceInitialize+0x214>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a50      	ldr	r2, [pc, #320]	@ (80061bc <xTraceInitialize+0x250>)
 800607a:	210d      	movs	r1, #13
 800607c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 800607e:	4b40      	ldr	r3, [pc, #256]	@ (8006180 <xTraceInitialize+0x214>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a4f      	ldr	r2, [pc, #316]	@ (80061c0 <xTraceInitialize+0x254>)
 8006084:	2171      	movs	r1, #113	@ 0x71
 8006086:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8006088:	4b3d      	ldr	r3, [pc, #244]	@ (8006180 <xTraceInitialize+0x214>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a4d      	ldr	r2, [pc, #308]	@ (80061c4 <xTraceInitialize+0x258>)
 800608e:	2172      	movs	r1, #114	@ 0x72
 8006090:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8006092:	4b3b      	ldr	r3, [pc, #236]	@ (8006180 <xTraceInitialize+0x214>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a4c      	ldr	r2, [pc, #304]	@ (80061c8 <xTraceInitialize+0x25c>)
 8006098:	2173      	movs	r1, #115	@ 0x73
 800609a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 800609c:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <xTraceInitialize+0x214>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a4a      	ldr	r2, [pc, #296]	@ (80061cc <xTraceInitialize+0x260>)
 80060a2:	2174      	movs	r1, #116	@ 0x74
 80060a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 80060a6:	4b36      	ldr	r3, [pc, #216]	@ (8006180 <xTraceInitialize+0x214>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	239e      	movs	r3, #158	@ 0x9e
 80060ac:	015b      	lsls	r3, r3, #5
 80060ae:	21f1      	movs	r1, #241	@ 0xf1
 80060b0:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
 80060b2:	4b33      	ldr	r3, [pc, #204]	@ (8006180 <xTraceInitialize+0x214>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a46      	ldr	r2, [pc, #280]	@ (80061d0 <xTraceInitialize+0x264>)
 80060b8:	21f2      	movs	r1, #242	@ 0xf2
 80060ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 80060bc:	4b30      	ldr	r3, [pc, #192]	@ (8006180 <xTraceInitialize+0x214>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a44      	ldr	r2, [pc, #272]	@ (80061d4 <xTraceInitialize+0x268>)
 80060c2:	21f3      	movs	r1, #243	@ 0xf3
 80060c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 80060c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <xTraceInitialize+0x214>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a43      	ldr	r2, [pc, #268]	@ (80061d8 <xTraceInitialize+0x26c>)
 80060cc:	21f4      	movs	r1, #244	@ 0xf4
 80060ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	xTraceKernelPortInitObjectHandleStack();
 80060d0:	f7ff fa0e 	bl	80054f0 <xTraceKernelPortInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 80060d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006180 <xTraceInitialize+0x214>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22f4      	movs	r2, #244	@ 0xf4
 80060da:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80060dc:	4b28      	ldr	r3, [pc, #160]	@ (8006180 <xTraceInitialize+0x214>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	22f3      	movs	r2, #243	@ 0xf3
 80060e2:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80060e4:	4b26      	ldr	r3, [pc, #152]	@ (8006180 <xTraceInitialize+0x214>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	22f2      	movs	r2, #242	@ 0xf2
 80060ea:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80060ec:	4b24      	ldr	r3, [pc, #144]	@ (8006180 <xTraceInitialize+0x214>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	22f1      	movs	r2, #241	@ 0xf1
 80060f2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80060f4:	4b22      	ldr	r3, [pc, #136]	@ (8006180 <xTraceInitialize+0x214>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2274      	movs	r2, #116	@ 0x74
 80060fa:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80060fc:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <xTraceInitialize+0x214>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2273      	movs	r2, #115	@ 0x73
 8006102:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8006104:	4b1e      	ldr	r3, [pc, #120]	@ (8006180 <xTraceInitialize+0x214>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2272      	movs	r2, #114	@ 0x72
 800610a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 800610c:	4b1c      	ldr	r3, [pc, #112]	@ (8006180 <xTraceInitialize+0x214>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2271      	movs	r2, #113	@ 0x71
 8006112:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8006114:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <xTraceInitialize+0x214>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2204      	movs	r2, #4
 800611a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 800611c:	4b18      	ldr	r3, [pc, #96]	@ (8006180 <xTraceInitialize+0x214>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2203      	movs	r2, #3
 8006122:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8006124:	4b16      	ldr	r3, [pc, #88]	@ (8006180 <xTraceInitialize+0x214>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2202      	movs	r2, #2
 800612a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 800612c:	4b14      	ldr	r3, [pc, #80]	@ (8006180 <xTraceInitialize+0x214>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != (void*)0)
 8006134:	4b11      	ldr	r3, [pc, #68]	@ (800617c <xTraceInitialize+0x210>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <xTraceInitialize+0x1f6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <xTraceInitialize+0x214>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	22f0      	movs	r2, #240	@ 0xf0
 8006142:	0092      	lsls	r2, r2, #2
 8006144:	1898      	adds	r0, r3, r2
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <xTraceInitialize+0x210>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2250      	movs	r2, #80	@ 0x50
 800614c:	0019      	movs	r1, r3
 800614e:	f000 fd51 	bl	8006bf4 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8006152:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <xTraceInitialize+0x214>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	23ee      	movs	r3, #238	@ 0xee
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	2101      	movs	r1, #1
 800615c:	50d1      	str	r1, [r2, r3]
		prvTraceStop();
 800615e:	f7ff fb33 	bl	80057c8 <prvTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8006162:	4b03      	ldr	r3, [pc, #12]	@ (8006170 <xTraceInitialize+0x204>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8006168:	2300      	movs	r3, #0
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200031fc 	.word	0x200031fc
 8006174:	20001dc8 	.word	0x20001dc8
 8006178:	20001dca 	.word	0x20001dca
 800617c:	20001e30 	.word	0x20001e30
 8006180:	200031f8 	.word	0x200031f8
 8006184:	20001e34 	.word	0x20001e34
 8006188:	e000e018 	.word	0xe000e018
 800618c:	20001dc4 	.word	0x20001dc4
 8006190:	20001da0 	.word	0x20001da0
 8006194:	000013c4 	.word	0x000013c4
 8006198:	00001aa1 	.word	0x00001aa1
 800619c:	f0f0f0f0 	.word	0xf0f0f0f0
 80061a0:	f1f1f1f1 	.word	0xf1f1f1f1
 80061a4:	f2f2f2f2 	.word	0xf2f2f2f2
 80061a8:	08008a84 	.word	0x08008a84
 80061ac:	f3f3f3f3 	.word	0xf3f3f3f3
 80061b0:	000013b8 	.word	0x000013b8
 80061b4:	000013b9 	.word	0x000013b9
 80061b8:	000013ba 	.word	0x000013ba
 80061bc:	000013bb 	.word	0x000013bb
 80061c0:	000013bc 	.word	0x000013bc
 80061c4:	000013bd 	.word	0x000013bd
 80061c8:	000013be 	.word	0x000013be
 80061cc:	000013bf 	.word	0x000013bf
 80061d0:	000013c1 	.word	0x000013c1
 80061d4:	000013c2 	.word	0x000013c2
 80061d8:	000013c3 	.word	0x000013c3

080061dc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	0002      	movs	r2, r0
 80061e4:	1dfb      	adds	r3, r7, #7
 80061e6:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d04d      	beq.n	800628c <prvTraceStoreTaskReady+0xb0>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 80061f0:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <prvTraceStoreTaskReady+0xbc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04b      	beq.n	8006290 <prvTraceStoreTaskReady+0xb4>
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);

	if (recorder_busy)
 80061f8:	4b28      	ldr	r3, [pc, #160]	@ (800629c <prvTraceStoreTaskReady+0xc0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <prvTraceStoreTaskReady+0x2e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8006200:	4b27      	ldr	r3, [pc, #156]	@ (80062a0 <prvTraceStoreTaskReady+0xc4>)
 8006202:	0018      	movs	r0, r3
 8006204:	f000 fdd6 	bl	8006db4 <prvTraceError>
		return;
 8006208:	e043      	b.n	8006292 <prvTraceStoreTaskReady+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620a:	f3ef 8310 	mrs	r3, PRIMASK
 800620e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006210:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	2301      	movs	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	4b1e      	ldr	r3, [pc, #120]	@ (800629c <prvTraceStoreTaskReady+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <prvTraceStoreTaskReady+0xc0>)
 8006228:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800622a:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <prvTraceStoreTaskReady+0xc8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d020      	beq.n	8006276 <prvTraceStoreTaskReady+0x9a>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006234:	251a      	movs	r5, #26
 8006236:	197c      	adds	r4, r7, r5
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <prvTraceStoreTaskReady+0xcc>)
 800623a:	0018      	movs	r0, r3
 800623c:	f000 feae 	bl	8006f9c <prvTraceGetDTS>
 8006240:	0003      	movs	r3, r0
 8006242:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8006244:	2419      	movs	r4, #25
 8006246:	193b      	adds	r3, r7, r4
 8006248:	1dfa      	adds	r2, r7, #7
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800624e:	f000 fb89 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 8006252:	0003      	movs	r3, r0
 8006254:	617b      	str	r3, [r7, #20]
		if (tr != (void*)0)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <prvTraceStoreTaskReady+0x9a>
		{
			tr->type = DIV_TASK_READY;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	197a      	adds	r2, r7, r5
 8006266:	8812      	ldrh	r2, [r2, #0]
 8006268:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	193a      	adds	r2, r7, r4
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8006272:	f000 fe69 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006276:	4b09      	ldr	r3, [pc, #36]	@ (800629c <prvTraceStoreTaskReady+0xc0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	1e5a      	subs	r2, r3, #1
 800627c:	4b07      	ldr	r3, [pc, #28]	@ (800629c <prvTraceStoreTaskReady+0xc0>)
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f383 8810 	msr	PRIMASK, r3
}
 800628a:	e002      	b.n	8006292 <prvTraceStoreTaskReady+0xb6>
		return;
 800628c:	46c0      	nop			@ (mov r8, r8)
 800628e:	e000      	b.n	8006292 <prvTraceStoreTaskReady+0xb6>
		return;
 8006290:	46c0      	nop			@ (mov r8, r8)
}
 8006292:	46bd      	mov	sp, r7
 8006294:	b008      	add	sp, #32
 8006296:	bdb0      	pop	{r4, r5, r7, pc}
 8006298:	20000010 	.word	0x20000010
 800629c:	20001db4 	.word	0x20001db4
 80062a0:	08008a98 	.word	0x08008a98
 80062a4:	200031f8 	.word	0x200031f8
 80062a8:	0000ffff 	.word	0x0000ffff

080062ac <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80062ac:	b5b0      	push	{r4, r5, r7, lr}
 80062ae:	b08e      	sub	sp, #56	@ 0x38
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == (void*)0)
 80062b8:	4b4c      	ldr	r3, [pc, #304]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d100      	bne.n	80062c2 <vTraceStoreMemMangEvent+0x16>
 80062c0:	e090      	b.n	80063e4 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da03      	bge.n	80062d0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	425b      	negs	r3, r3
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ce:	e001      	b.n	80062d4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d4:	f3ef 8310 	mrs	r3, PRIMASK
 80062d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80062dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062de:	2301      	movs	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f383 8810 	msr	PRIMASK, r3
}
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	4b41      	ldr	r3, [pc, #260]	@ (80063f0 <vTraceStoreMemMangEvent+0x144>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	4b3f      	ldr	r3, [pc, #252]	@ (80063f0 <vTraceStoreMemMangEvent+0x144>)
 80062f2:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d015      	beq.n	8006326 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 80062fa:	4b3c      	ldr	r3, [pc, #240]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4b3a      	ldr	r3, [pc, #232]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	188a      	adds	r2, r1, r2
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800630a:	4b38      	ldr	r3, [pc, #224]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006310:	4b36      	ldr	r3, [pc, #216]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	429a      	cmp	r2, r3
 8006318:	d905      	bls.n	8006326 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800631a:	4b34      	ldr	r3, [pc, #208]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b33      	ldr	r3, [pc, #204]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8006326:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <vTraceStoreMemMangEvent+0x140>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	2b00      	cmp	r3, #0
 800632e:	d04e      	beq.n	80063ce <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8006330:	20ff      	movs	r0, #255	@ 0xff
 8006332:	f000 fe33 	bl	8006f9c <prvTraceGetDTS>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	242f      	movs	r4, #47	@ 0x2f
 800633c:	193b      	adds	r3, r7, r4
 800633e:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8006340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006342:	4a2c      	ldr	r2, [pc, #176]	@ (80063f4 <vTraceStoreMemMangEvent+0x148>)
 8006344:	0019      	movs	r1, r3
 8006346:	0010      	movs	r0, r2
 8006348:	f000 f92c 	bl	80065a4 <prvTraceGetParam>
 800634c:	0002      	movs	r2, r0
 800634e:	252c      	movs	r5, #44	@ 0x2c
 8006350:	197b      	adds	r3, r7, r5
 8006352:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8006354:	f000 fb06 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 8006358:	0003      	movs	r3, r0
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28

		if (ms != (void*)0)
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d035      	beq.n	80063ce <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	193a      	adds	r2, r7, r4
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	197a      	adds	r2, r7, r5
 8006374:	8812      	ldrh	r2, [r2, #0]
 8006376:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006378:	f000 fde6 	bl	8006f48 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a1d      	ldr	r2, [pc, #116]	@ (80063f4 <vTraceStoreMemMangEvent+0x148>)
 8006380:	0019      	movs	r1, r3
 8006382:	0010      	movs	r0, r2
 8006384:	f000 f90e 	bl	80065a4 <prvTraceGetParam>
 8006388:	0002      	movs	r2, r0
 800638a:	2426      	movs	r4, #38	@ 0x26
 800638c:	193b      	adds	r3, r7, r4
 800638e:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8006390:	2525      	movs	r5, #37	@ 0x25
 8006392:	197b      	adds	r3, r7, r5
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8006398:	f000 fae4 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 800639c:	0003      	movs	r3, r0
 800639e:	623b      	str	r3, [r7, #32]
			if (ma != (void*)0)
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d013      	beq.n	80063ce <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	193a      	adds	r2, r7, r4
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	197a      	adds	r2, r7, r5
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	3301      	adds	r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80063ca:	f000 fdbd 	bl	8006f48 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80063ce:	4b08      	ldr	r3, [pc, #32]	@ (80063f0 <vTraceStoreMemMangEvent+0x144>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	1e5a      	subs	r2, r3, #1
 80063d4:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <vTraceStoreMemMangEvent+0x144>)
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f383 8810 	msr	PRIMASK, r3
}
 80063e2:	e000      	b.n	80063e6 <vTraceStoreMemMangEvent+0x13a>
		return;
 80063e4:	46c0      	nop			@ (mov r8, r8)
}
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b00e      	add	sp, #56	@ 0x38
 80063ea:	bdb0      	pop	{r4, r5, r7, pc}
 80063ec:	200031f8 	.word	0x200031f8
 80063f0:	20001db4 	.word	0x20001db4
 80063f4:	0000ffff 	.word	0x0000ffff

080063f8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80063f8:	b5b0      	push	{r4, r5, r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	607a      	str	r2, [r7, #4]
 8006402:	230b      	movs	r3, #11
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	1c0a      	adds	r2, r1, #0
 8006408:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 800640a:	4b29      	ldr	r3, [pc, #164]	@ (80064b0 <prvTraceStoreKernelCall+0xb8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <prvTraceStoreKernelCall+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8006412:	4b28      	ldr	r3, [pc, #160]	@ (80064b4 <prvTraceStoreKernelCall+0xbc>)
 8006414:	0018      	movs	r0, r3
 8006416:	f000 fccd 	bl	8006db4 <prvTraceError>
		return;
 800641a:	e045      	b.n	80064a8 <prvTraceStoreKernelCall+0xb0>
	}

	if (handle_of_last_logged_task == 0)
 800641c:	4b26      	ldr	r3, [pc, #152]	@ (80064b8 <prvTraceStoreKernelCall+0xc0>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d040      	beq.n	80064a6 <prvTraceStoreKernelCall+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006424:	f3ef 8310 	mrs	r3, PRIMASK
 8006428:	617b      	str	r3, [r7, #20]
  return(result);
 800642a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
 800642e:	2301      	movs	r3, #1
 8006430:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f383 8810 	msr	PRIMASK, r3
}
 8006438:	46c0      	nop			@ (mov r8, r8)
 800643a:	4b1d      	ldr	r3, [pc, #116]	@ (80064b0 <prvTraceStoreKernelCall+0xb8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <prvTraceStoreKernelCall+0xb8>)
 8006442:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8006444:	4b1d      	ldr	r3, [pc, #116]	@ (80064bc <prvTraceStoreKernelCall+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	2b00      	cmp	r3, #0
 800644c:	d020      	beq.n	8006490 <prvTraceStoreKernelCall+0x98>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800644e:	2522      	movs	r5, #34	@ 0x22
 8006450:	197c      	adds	r4, r7, r5
 8006452:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <prvTraceStoreKernelCall+0xc8>)
 8006454:	0018      	movs	r0, r3
 8006456:	f000 fda1 	bl	8006f9c <prvTraceGetDTS>
 800645a:	0003      	movs	r3, r0
 800645c:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800645e:	2421      	movs	r4, #33	@ 0x21
 8006460:	193b      	adds	r3, r7, r4
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8006466:	f000 fa7d 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 800646a:	0003      	movs	r3, r0
 800646c:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <prvTraceStoreKernelCall+0x98>
		{
			kse->dts = dts1;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	197a      	adds	r2, r7, r5
 8006478:	8812      	ldrh	r2, [r2, #0]
 800647a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	193a      	adds	r2, r7, r4
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800648c:	f000 fd5c 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <prvTraceStoreKernelCall+0xb8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1e5a      	subs	r2, r3, #1
 8006496:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <prvTraceStoreKernelCall+0xb8>)
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f383 8810 	msr	PRIMASK, r3
}
 80064a4:	e000      	b.n	80064a8 <prvTraceStoreKernelCall+0xb0>
		return;
 80064a6:	46c0      	nop			@ (mov r8, r8)
}
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b00a      	add	sp, #40	@ 0x28
 80064ac:	bdb0      	pop	{r4, r5, r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	20001db4 	.word	0x20001db4
 80064b4:	08008ad0 	.word	0x08008ad0
 80064b8:	20001dbc 	.word	0x20001dbc
 80064bc:	200031f8 	.word	0x200031f8
 80064c0:	0000ffff 	.word	0x0000ffff

080064c4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c6:	b08b      	sub	sp, #44	@ 0x2c
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	230b      	movs	r3, #11
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	1c0a      	adds	r2, r1, #0
 80064d6:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);

	if (recorder_busy)
 80064d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006594 <prvTraceStoreKernelCallWithParam+0xd0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <prvTraceStoreKernelCallWithParam+0x26>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80064e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006598 <prvTraceStoreKernelCallWithParam+0xd4>)
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 fc66 	bl	8006db4 <prvTraceError>
		return;
 80064e8:	e051      	b.n	800658e <prvTraceStoreKernelCallWithParam+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ea:	f3ef 8310 	mrs	r3, PRIMASK
 80064ee:	617b      	str	r3, [r7, #20]
  return(result);
 80064f0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f4:	2301      	movs	r3, #1
 80064f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f383 8810 	msr	PRIMASK, r3
}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	4b24      	ldr	r3, [pc, #144]	@ (8006594 <prvTraceStoreKernelCallWithParam+0xd0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	4b23      	ldr	r3, [pc, #140]	@ (8006594 <prvTraceStoreKernelCallWithParam+0xd0>)
 8006508:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800650a:	4b24      	ldr	r3, [pc, #144]	@ (800659c <prvTraceStoreKernelCallWithParam+0xd8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d031      	beq.n	8006578 <prvTraceStoreKernelCallWithParam+0xb4>
 8006514:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <prvTraceStoreKernelCallWithParam+0xdc>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d02d      	beq.n	8006578 <prvTraceStoreKernelCallWithParam+0xb4>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800651c:	20ff      	movs	r0, #255	@ 0xff
 800651e:	f000 fd3d 	bl	8006f9c <prvTraceGetDTS>
 8006522:	0003      	movs	r3, r0
 8006524:	001a      	movs	r2, r3
 8006526:	2423      	movs	r4, #35	@ 0x23
 8006528:	193b      	adds	r3, r7, r4
 800652a:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	0019      	movs	r1, r3
 8006530:	20ff      	movs	r0, #255	@ 0xff
 8006532:	f000 f837 	bl	80065a4 <prvTraceGetParam>
 8006536:	0002      	movs	r2, r0
 8006538:	2522      	movs	r5, #34	@ 0x22
 800653a:	197b      	adds	r3, r7, r5
 800653c:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800653e:	2621      	movs	r6, #33	@ 0x21
 8006540:	19bb      	adds	r3, r7, r6
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8006546:	f000 fa0d 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 800654a:	0003      	movs	r3, r0
 800654c:	61fb      	str	r3, [r7, #28]
		if (kse != (void*)0)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d011      	beq.n	8006578 <prvTraceStoreKernelCallWithParam+0xb4>
		{
			kse->dts = dts2;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	193a      	adds	r2, r7, r4
 8006558:	7812      	ldrb	r2, [r2, #0]
 800655a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	19ba      	adds	r2, r7, r6
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	197a      	adds	r2, r7, r5
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8006574:	f000 fce8 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8006578:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <prvTraceStoreKernelCallWithParam+0xd0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <prvTraceStoreKernelCallWithParam+0xd0>)
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f383 8810 	msr	PRIMASK, r3
}
 800658c:	46c0      	nop			@ (mov r8, r8)
}
 800658e:	46bd      	mov	sp, r7
 8006590:	b00b      	add	sp, #44	@ 0x2c
 8006592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006594:	20001db4 	.word	0x20001db4
 8006598:	08008b08 	.word	0x08008b08
 800659c:	200031f8 	.word	0x200031f8
 80065a0:	20001dbc 	.word	0x20001dbc

080065a4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d801      	bhi.n	80065ba <prvTraceGetParam+0x16>
	{
		return param;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	e01e      	b.n	80065f8 <prvTraceGetParam+0x54>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80065ba:	f000 f9d3 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 80065be:	0003      	movs	r3, r0
 80065c0:	60fb      	str	r3, [r7, #12]
		if (xps != (void*)0)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d014      	beq.n	80065f2 <prvTraceGetParam+0x4e>
		{
			xps->type = DIV_XPS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	4013      	ands	r3, r2
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4013      	ands	r3, r2
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80065ee:	f000 fcab 	bl	8006f48 <prvTraceUpdateCounters>
		}

		return param & param_max;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4013      	ands	r3, r2
	}
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b004      	add	sp, #16
 80065fe:	bd80      	pop	{r7, pc}

08006600 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	b08a      	sub	sp, #40	@ 0x28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 800660a:	2326      	movs	r3, #38	@ 0x26
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	2200      	movs	r2, #0
 8006610:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);

	if (recorder_busy)
 8006612:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <prvTraceStoreKernelCallWithNumericParamOnly+0x24>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 800661a:	4b2a      	ldr	r3, [pc, #168]	@ (80066c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800661c:	0018      	movs	r0, r3
 800661e:	f000 fbc9 	bl	8006db4 <prvTraceError>
		return;
 8006622:	e04a      	b.n	80066ba <prvTraceStoreKernelCallWithNumericParamOnly+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006624:	f3ef 8310 	mrs	r3, PRIMASK
 8006628:	613b      	str	r3, [r7, #16]
  return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	2301      	movs	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			@ (mov r8, r8)
 800663a:	4b21      	ldr	r3, [pc, #132]	@ (80066c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	4b1f      	ldr	r3, [pc, #124]	@ (80066c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8006642:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8006644:	4b20      	ldr	r3, [pc, #128]	@ (80066c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02a      	beq.n	80066a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
 800664e:	4b1f      	ldr	r3, [pc, #124]	@ (80066cc <prvTraceStoreKernelCallWithNumericParamOnly+0xcc>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d026      	beq.n	80066a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8006656:	20ff      	movs	r0, #255	@ 0xff
 8006658:	f000 fca0 	bl	8006f9c <prvTraceGetDTS>
 800665c:	0003      	movs	r3, r0
 800665e:	001a      	movs	r2, r3
 8006660:	241f      	movs	r4, #31
 8006662:	193b      	adds	r3, r7, r4
 8006664:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	4a19      	ldr	r2, [pc, #100]	@ (80066d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 800666a:	0019      	movs	r1, r3
 800666c:	0010      	movs	r0, r2
 800666e:	f7ff ff99 	bl	80065a4 <prvTraceGetParam>
 8006672:	0002      	movs	r2, r0
 8006674:	2526      	movs	r5, #38	@ 0x26
 8006676:	197b      	adds	r3, r7, r5
 8006678:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 800667a:	f000 f973 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 800667e:	0003      	movs	r3, r0
 8006680:	61bb      	str	r3, [r7, #24]
		if (kse != (void*)0)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00d      	beq.n	80066a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>
		{
			kse->dts = dts6;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	193a      	adds	r2, r7, r4
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	197a      	adds	r2, r7, r5
 800669c:	8812      	ldrh	r2, [r2, #0]
 800669e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80066a0:	f000 fc52 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80066a4:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f383 8810 	msr	PRIMASK, r3
}
 80066b8:	46c0      	nop			@ (mov r8, r8)
}
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b00a      	add	sp, #40	@ 0x28
 80066be:	bdb0      	pop	{r4, r5, r7, pc}
 80066c0:	20001db4 	.word	0x20001db4
 80066c4:	08008b40 	.word	0x08008b40
 80066c8:	200031f8 	.word	0x200031f8
 80066cc:	20001dbc 	.word	0x20001dbc
 80066d0:	0000ffff 	.word	0x0000ffff

080066d4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b089      	sub	sp, #36	@ 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	0002      	movs	r2, r0
 80066dc:	1dfb      	adds	r3, r7, #7
 80066de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	2301      	movs	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	46c0      	nop			@ (mov r8, r8)
 80066f6:	4b2d      	ldr	r3, [pc, #180]	@ (80067ac <prvTraceStoreTaskswitch+0xd8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	4b2b      	ldr	r3, [pc, #172]	@ (80067ac <prvTraceStoreTaskswitch+0xd8>)
 80066fe:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8006700:	4b2b      	ldr	r3, [pc, #172]	@ (80067b0 <prvTraceStoreTaskswitch+0xdc>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	1dfa      	adds	r2, r7, #7
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d03f      	beq.n	800678c <prvTraceStoreTaskswitch+0xb8>
 800670c:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <prvTraceStoreTaskswitch+0xe0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	2b00      	cmp	r3, #0
 8006714:	d03a      	beq.n	800678c <prvTraceStoreTaskswitch+0xb8>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006716:	231a      	movs	r3, #26
 8006718:	18fc      	adds	r4, r7, r3
 800671a:	4b27      	ldr	r3, [pc, #156]	@ (80067b8 <prvTraceStoreTaskswitch+0xe4>)
 800671c:	0018      	movs	r0, r3
 800671e:	f000 fc3d 	bl	8006f9c <prvTraceGetDTS>
 8006722:	0003      	movs	r3, r0
 8006724:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 8006726:	4b22      	ldr	r3, [pc, #136]	@ (80067b0 <prvTraceStoreTaskswitch+0xdc>)
 8006728:	1dfa      	adds	r2, r7, #7
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800672e:	2319      	movs	r3, #25
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	4a1f      	ldr	r2, [pc, #124]	@ (80067b0 <prvTraceStoreTaskswitch+0xdc>)
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8006738:	f000 f914 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 800673c:	0003      	movs	r3, r0
 800673e:	617b      	str	r3, [r7, #20]

		if (ts != (void*)0)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d022      	beq.n	800678c <prvTraceStoreTaskswitch+0xb8>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8006746:	4b1a      	ldr	r3, [pc, #104]	@ (80067b0 <prvTraceStoreTaskswitch+0xdc>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	0019      	movs	r1, r3
 800674c:	2003      	movs	r0, #3
 800674e:	f000 f8c1 	bl	80068d4 <prvTraceGetObjectState>
 8006752:	0003      	movs	r3, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	d103      	bne.n	8006760 <prvTraceStoreTaskswitch+0x8c>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2207      	movs	r2, #7
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <prvTraceStoreTaskswitch+0x92>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2206      	movs	r2, #6
 8006764:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	221a      	movs	r2, #26
 800676a:	18ba      	adds	r2, r7, r2
 800676c:	8812      	ldrh	r2, [r2, #0]
 800676e:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2219      	movs	r2, #25
 8006774:	18ba      	adds	r2, r7, r2
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <prvTraceStoreTaskswitch+0xdc>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	0019      	movs	r1, r3
 8006782:	2003      	movs	r0, #3
 8006784:	f000 f876 	bl	8006874 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8006788:	f000 fbde 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <prvTraceStoreTaskswitch+0xd8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	1e5a      	subs	r2, r3, #1
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <prvTraceStoreTaskswitch+0xd8>)
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f383 8810 	msr	PRIMASK, r3
}
 80067a0:	46c0      	nop			@ (mov r8, r8)
}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b009      	add	sp, #36	@ 0x24
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	20001db4 	.word	0x20001db4
 80067b0:	20001dbc 	.word	0x20001dbc
 80067b4:	200031f8 	.word	0x200031f8
 80067b8:	0000ffff 	.word	0x0000ffff

080067bc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	0004      	movs	r4, r0
 80067c4:	0008      	movs	r0, r1
 80067c6:	0011      	movs	r1, r2
 80067c8:	1dfb      	adds	r3, r7, #7
 80067ca:	1c22      	adds	r2, r4, #0
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	1dbb      	adds	r3, r7, #6
 80067d0:	1c02      	adds	r2, r0, #0
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	1d7b      	adds	r3, r7, #5
 80067d6:	1c0a      	adds	r2, r1, #0
 80067d8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 80067da:	4b10      	ldr	r3, [pc, #64]	@ (800681c <prvTraceSetPriorityProperty+0x60>)
 80067dc:	681c      	ldr	r4, [r3, #0]
 80067de:	1dfb      	adds	r3, r7, #7
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	1dbb      	adds	r3, r7, #6
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	0011      	movs	r1, r2
 80067e8:	0018      	movs	r0, r3
 80067ea:	f000 f8e5 	bl	80069b8 <uiIndexOfObject>
 80067ee:	0003      	movs	r3, r0
 80067f0:	0018      	movs	r0, r3
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <prvTraceSetPriorityProperty+0x60>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	1dfb      	adds	r3, r7, #7
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	215c      	movs	r1, #92	@ 0x5c
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	185b      	adds	r3, r3, r1
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	18c3      	adds	r3, r0, r3
 8006804:	3301      	adds	r3, #1
 8006806:	2288      	movs	r2, #136	@ 0x88
 8006808:	18e3      	adds	r3, r4, r3
 800680a:	189b      	adds	r3, r3, r2
 800680c:	1d7a      	adds	r2, r7, #5
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	701a      	strb	r2, [r3, #0]
}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b003      	add	sp, #12
 8006818:	bd90      	pop	{r4, r7, pc}
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	200031f8 	.word	0x200031f8

08006820 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	0002      	movs	r2, r0
 8006828:	1dfb      	adds	r3, r7, #7
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	1dbb      	adds	r3, r7, #6
 800682e:	1c0a      	adds	r2, r1, #0
 8006830:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8006832:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <prvTraceGetPriorityProperty+0x50>)
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	1dfb      	adds	r3, r7, #7
 8006838:	781a      	ldrb	r2, [r3, #0]
 800683a:	1dbb      	adds	r3, r7, #6
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	0011      	movs	r1, r2
 8006840:	0018      	movs	r0, r3
 8006842:	f000 f8b9 	bl	80069b8 <uiIndexOfObject>
 8006846:	0003      	movs	r3, r0
 8006848:	0018      	movs	r0, r3
 800684a:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <prvTraceGetPriorityProperty+0x50>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	1dfb      	adds	r3, r7, #7
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	215c      	movs	r1, #92	@ 0x5c
 8006854:	18d3      	adds	r3, r2, r3
 8006856:	185b      	adds	r3, r3, r1
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	18c3      	adds	r3, r0, r3
 800685c:	3301      	adds	r3, #1
 800685e:	2288      	movs	r2, #136	@ 0x88
 8006860:	18e3      	adds	r3, r4, r3
 8006862:	189b      	adds	r3, r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b003      	add	sp, #12
 800686c:	bd90      	pop	{r4, r7, pc}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	200031f8 	.word	0x200031f8

08006874 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	0004      	movs	r4, r0
 800687c:	0008      	movs	r0, r1
 800687e:	0011      	movs	r1, r2
 8006880:	1dfb      	adds	r3, r7, #7
 8006882:	1c22      	adds	r2, r4, #0
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	1dbb      	adds	r3, r7, #6
 8006888:	1c02      	adds	r2, r0, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	1d7b      	adds	r3, r7, #5
 800688e:	1c0a      	adds	r2, r1, #0
 8006890:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8006892:	4b0f      	ldr	r3, [pc, #60]	@ (80068d0 <prvTraceSetObjectState+0x5c>)
 8006894:	681c      	ldr	r4, [r3, #0]
 8006896:	1dfb      	adds	r3, r7, #7
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	1dbb      	adds	r3, r7, #6
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	0011      	movs	r1, r2
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 f889 	bl	80069b8 <uiIndexOfObject>
 80068a6:	0003      	movs	r3, r0
 80068a8:	0018      	movs	r0, r3
 80068aa:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <prvTraceSetObjectState+0x5c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	1dfb      	adds	r3, r7, #7
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	215c      	movs	r1, #92	@ 0x5c
 80068b4:	18d3      	adds	r3, r2, r3
 80068b6:	185b      	adds	r3, r3, r1
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	18c3      	adds	r3, r0, r3
 80068bc:	2288      	movs	r2, #136	@ 0x88
 80068be:	18e3      	adds	r3, r4, r3
 80068c0:	189b      	adds	r3, r3, r2
 80068c2:	1d7a      	adds	r2, r7, #5
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
}
 80068c8:	46c0      	nop			@ (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b003      	add	sp, #12
 80068ce:	bd90      	pop	{r4, r7, pc}
 80068d0:	200031f8 	.word	0x200031f8

080068d4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 80068d4:	b590      	push	{r4, r7, lr}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	0002      	movs	r2, r0
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	1dbb      	adds	r3, r7, #6
 80068e2:	1c0a      	adds	r2, r1, #0
 80068e4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80068e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <prvTraceGetObjectState+0x4c>)
 80068e8:	681c      	ldr	r4, [r3, #0]
 80068ea:	1dfb      	adds	r3, r7, #7
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	1dbb      	adds	r3, r7, #6
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	0011      	movs	r1, r2
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 f85f 	bl	80069b8 <uiIndexOfObject>
 80068fa:	0003      	movs	r3, r0
 80068fc:	0018      	movs	r0, r3
 80068fe:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <prvTraceGetObjectState+0x4c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	1dfb      	adds	r3, r7, #7
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	215c      	movs	r1, #92	@ 0x5c
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	185b      	adds	r3, r3, r1
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	18c3      	adds	r3, r0, r3
 8006910:	2288      	movs	r2, #136	@ 0x88
 8006912:	18e3      	adds	r3, r4, r3
 8006914:	189b      	adds	r3, r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	b003      	add	sp, #12
 800691e:	bd90      	pop	{r4, r7, pc}
 8006920:	200031f8 	.word	0x200031f8

08006924 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	0002      	movs	r2, r0
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	701a      	strb	r2, [r3, #0]

	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8006930:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <prvTraceSetTaskInstanceFinished+0x3c>)
 8006932:	681c      	ldr	r4, [r3, #0]
 8006934:	1dfb      	adds	r3, r7, #7
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2103      	movs	r1, #3
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f83c 	bl	80069b8 <uiIndexOfObject>
 8006940:	0003      	movs	r3, r0
 8006942:	0019      	movs	r1, r3
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <prvTraceSetTaskInstanceFinished+0x3c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	225f      	movs	r2, #95	@ 0x5f
 800694a:	5c9b      	ldrb	r3, [r3, r2]
 800694c:	18cb      	adds	r3, r1, r3
 800694e:	2288      	movs	r2, #136	@ 0x88
 8006950:	18e3      	adds	r3, r4, r3
 8006952:	189b      	adds	r3, r3, r2
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
#endif
}
 8006958:	46c0      	nop			@ (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b003      	add	sp, #12
 800695e:	bd90      	pop	{r4, r7, pc}
 8006960:	200031f8 	.word	0x200031f8

08006964 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8006968:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return (void*)0;
 8006972:	2300      	movs	r3, #0
 8006974:	e018      	b.n	80069a8 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	23fa      	movs	r3, #250	@ 0xfa
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	429a      	cmp	r2, r3
 8006982:	d305      	bcc.n	8006990 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8006984:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <prvTraceNextFreeEventBufferSlot+0x50>)
 8006986:	0018      	movs	r0, r3
 8006988:	f000 fa14 	bl	8006db4 <prvTraceError>
		return (void*)0;
 800698c:	2300      	movs	r3, #0
 800698e:	e00b      	b.n	80069a8 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8006990:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <prvTraceNextFreeEventBufferSlot+0x4c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	2182      	movs	r1, #130	@ 0x82
 800699e:	00c9      	lsls	r1, r1, #3
 80069a0:	468c      	mov	ip, r1
 80069a2:	4463      	add	r3, ip
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	3304      	adds	r3, #4
}
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	200031f8 	.word	0x200031f8
 80069b4:	08008b78 	.word	0x08008b78

080069b8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	0002      	movs	r2, r0
 80069c0:	1dfb      	adds	r3, r7, #7
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	1dbb      	adds	r3, r7, #6
 80069c6:	1c0a      	adds	r2, r1, #0
 80069c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80069ca:	1dbb      	adds	r3, r7, #6
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d82e      	bhi.n	8006a30 <uiIndexOfObject+0x78>
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d02a      	beq.n	8006a30 <uiIndexOfObject+0x78>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 80069da:	4b1a      	ldr	r3, [pc, #104]	@ (8006a44 <uiIndexOfObject+0x8c>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	1dbb      	adds	r3, r7, #6
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2150      	movs	r1, #80	@ 0x50
 80069e4:	18d3      	adds	r3, r2, r3
 80069e6:	185b      	adds	r3, r3, r1
 80069e8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80069ea:	1dfa      	adds	r2, r7, #7
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d81e      	bhi.n	8006a30 <uiIndexOfObject+0x78>
	{
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 80069f2:	4b14      	ldr	r3, [pc, #80]	@ (8006a44 <uiIndexOfObject+0x8c>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	1dbb      	adds	r3, r7, #6
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	3338      	adds	r3, #56	@ 0x38
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	3304      	adds	r3, #4
 8006a02:	8819      	ldrh	r1, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8006a04:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <uiIndexOfObject+0x8c>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	1dbb      	adds	r3, r7, #6
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2068      	movs	r0, #104	@ 0x68
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	181b      	adds	r3, r3, r0
 8006a12:	781b      	ldrb	r3, [r3, #0]
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8006a14:	001a      	movs	r2, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle - 1)));
 8006a16:	1dfb      	adds	r3, r7, #7
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	3b01      	subs	r3, #1
		index = (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] +
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	4353      	muls	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	200e      	movs	r0, #14
 8006a24:	183b      	adds	r3, r7, r0
 8006a26:	188a      	adds	r2, r1, r2
 8006a28:	801a      	strh	r2, [r3, #0]
		return index;
 8006a2a:	183b      	adds	r3, r7, r0
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	e004      	b.n	8006a3a <uiIndexOfObject+0x82>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8006a30:	4b05      	ldr	r3, [pc, #20]	@ (8006a48 <uiIndexOfObject+0x90>)
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f9be 	bl	8006db4 <prvTraceError>
	return 0;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b004      	add	sp, #16
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			@ (mov r8, r8)
 8006a44:	200031f8 	.word	0x200031f8
 8006a48:	08008ba0 	.word	0x08008ba0

08006a4c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b089      	sub	sp, #36	@ 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	0002      	movs	r2, r0
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
	TRACE_ASSERT(RecorderDataPtr != (void*)0, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	2301      	movs	r3, #1
 8006a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f383 8810 	msr	PRIMASK, r3
}
 8006a6c:	46c0      	nop			@ (mov r8, r8)
 8006a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ba0 <prvTraceGetObjectHandle+0x154>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba0 <prvTraceGetObjectHandle+0x154>)
 8006a76:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8006a78:	1dfb      	adds	r3, r7, #7
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	4b49      	ldr	r3, [pc, #292]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006a7e:	0052      	lsls	r2, r2, #1
 8006a80:	5ad3      	ldrh	r3, [r2, r3]
 8006a82:	001a      	movs	r2, r3
 8006a84:	4b48      	ldr	r3, [pc, #288]	@ (8006ba8 <prvTraceGetObjectHandle+0x15c>)
 8006a86:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8006a88:	4b47      	ldr	r3, [pc, #284]	@ (8006ba8 <prvTraceGetObjectHandle+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a45      	ldr	r2, [pc, #276]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006a8e:	2148      	movs	r1, #72	@ 0x48
 8006a90:	18d3      	adds	r3, r2, r3
 8006a92:	185b      	adds	r3, r3, r1
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d117      	bne.n	8006aca <prvTraceGetObjectHandle+0x7e>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8006a9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ba8 <prvTraceGetObjectHandle+0x15c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8006aa0:	1dfb      	adds	r3, r7, #7
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	493f      	ldr	r1, [pc, #252]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	18cb      	adds	r3, r1, r3
 8006aac:	3302      	adds	r3, #2
 8006aae:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8006ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba8 <prvTraceGetObjectHandle+0x15c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8006aba:	3201      	adds	r2, #1
 8006abc:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8006abe:	4a39      	ldr	r2, [pc, #228]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006ac0:	2148      	movs	r1, #72	@ 0x48
 8006ac2:	18d3      	adds	r3, r2, r3
 8006ac4:	185b      	adds	r3, r3, r1
 8006ac6:	1c02      	adds	r2, r0, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8006aca:	4b37      	ldr	r3, [pc, #220]	@ (8006ba8 <prvTraceGetObjectHandle+0x15c>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	241f      	movs	r4, #31
 8006ad0:	193b      	adds	r3, r7, r4
 8006ad2:	4934      	ldr	r1, [pc, #208]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006ad4:	2048      	movs	r0, #72	@ 0x48
 8006ad6:	188a      	adds	r2, r1, r2
 8006ad8:	1812      	adds	r2, r2, r0
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8006ade:	1dfb      	adds	r3, r7, #7
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	4b30      	ldr	r3, [pc, #192]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006ae4:	0052      	lsls	r2, r2, #1
 8006ae6:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8006ae8:	1dfb      	adds	r3, r7, #7
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	492d      	ldr	r1, [pc, #180]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006aee:	3310      	adds	r3, #16
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	18cb      	adds	r3, r1, r3
 8006af4:	3304      	adds	r3, #4
 8006af6:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d90c      	bls.n	8006b16 <prvTraceGetObjectHandle+0xca>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8006afc:	1dfb      	adds	r3, r7, #7
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7fe fd7d 	bl	8005600 <pszTraceGetErrorNotEnoughHandles>
 8006b06:	0003      	movs	r3, r0
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 f953 	bl	8006db4 <prvTraceError>
		handle = 0;
 8006b0e:	193b      	adds	r3, r7, r4
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e031      	b.n	8006b7a <prvTraceGetObjectHandle+0x12e>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8006b16:	1dfb      	adds	r3, r7, #7
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4a22      	ldr	r2, [pc, #136]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b1c:	0059      	lsls	r1, r3, #1
 8006b1e:	5a8a      	ldrh	r2, [r1, r2]
 8006b20:	3201      	adds	r2, #1
 8006b22:	b291      	uxth	r1, r2
 8006b24:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8006b2a:	1dfb      	adds	r3, r7, #7
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b30:	0052      	lsls	r2, r2, #1
 8006b32:	5ad3      	ldrh	r3, [r2, r3]
 8006b34:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8006b36:	1dfb      	adds	r3, r7, #7
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	18d3      	adds	r3, r2, r3
 8006b42:	3302      	adds	r3, #2
 8006b44:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8006b46:	1acb      	subs	r3, r1, r3
 8006b48:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8006b4a:	1dfb      	adds	r3, r7, #7
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b50:	3318      	adds	r3, #24
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	18d3      	adds	r3, r2, r3
 8006b56:	3306      	adds	r3, #6
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	001a      	movs	r2, r3
		if (hndCount >
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	dd0b      	ble.n	8006b7a <prvTraceGetObjectHandle+0x12e>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8006b66:	1dfb      	adds	r3, r7, #7
 8006b68:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 8006b6a:	0011      	movs	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8006b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba4 <prvTraceGetObjectHandle+0x158>)
 8006b6e:	3318      	adds	r3, #24
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	18d3      	adds	r3, r2, r3
 8006b74:	3306      	adds	r3, #6
 8006b76:	1c0a      	adds	r2, r1, #0
 8006b78:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 8006b7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <prvTraceGetObjectHandle+0x154>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <prvTraceGetObjectHandle+0x154>)
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f383 8810 	msr	PRIMASK, r3
}
 8006b8e:	46c0      	nop			@ (mov r8, r8)

	return handle;
 8006b90:	231f      	movs	r3, #31
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	781b      	ldrb	r3, [r3, #0]
}
 8006b96:	0018      	movs	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b009      	add	sp, #36	@ 0x24
 8006b9c:	bd90      	pop	{r4, r7, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	20001db4 	.word	0x20001db4
 8006ba4:	20001dcc 	.word	0x20001dcc
 8006ba8:	20003200 	.word	0x20003200

08006bac <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8006bac:	b5b0      	push	{r4, r5, r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	1dfb      	adds	r3, r7, #7
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	1dbb      	adds	r3, r7, #6
 8006bba:	1c0a      	adds	r2, r1, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8006bbe:	250e      	movs	r5, #14
 8006bc0:	197c      	adds	r4, r7, r5
 8006bc2:	1dfb      	adds	r3, r7, #7
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	1dbb      	adds	r3, r7, #6
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	0011      	movs	r1, r2
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f7ff fef3 	bl	80069b8 <uiIndexOfObject>
 8006bd2:	0003      	movs	r3, r0
 8006bd4:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8006bd6:	4b06      	ldr	r3, [pc, #24]	@ (8006bf0 <prvMarkObjectAsUsed+0x44>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	197b      	adds	r3, r7, r5
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	2188      	movs	r1, #136	@ 0x88
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	185b      	adds	r3, r3, r1
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
}
 8006be8:	46c0      	nop			@ (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b004      	add	sp, #16
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf0:	200031f8 	.word	0x200031f8

08006bf4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e010      	b.n	8006c28 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	18d2      	adds	r2, r2, r3
 8006c0c:	68f9      	ldr	r1, [r7, #12]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	18cb      	adds	r3, r1, r3
 8006c12:	7812      	ldrb	r2, [r2, #0]
 8006c14:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	18d3      	adds	r3, r2, r3
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	3301      	adds	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d3ea      	bcc.n	8006c06 <prvStrncpy+0x12>
			break;
	}
}
 8006c30:	e000      	b.n	8006c34 <prvStrncpy+0x40>
			break;
 8006c32:	46c0      	nop			@ (mov r8, r8)
}
 8006c34:	46c0      	nop			@ (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b006      	add	sp, #24
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	603a      	str	r2, [r7, #0]
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	1c02      	adds	r2, r0, #0
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	1dbb      	adds	r3, r7, #6
 8006c4c:	1c0a      	adds	r2, r1, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	if (name == (void*)0)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <prvTraceSetObjectName+0x1e>
	{
		name = "";
 8006c56:	4b28      	ldr	r3, [pc, #160]	@ (8006cf8 <prvTraceSetObjectName+0xbc>)
 8006c58:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8006c5a:	1dfb      	adds	r3, r7, #7
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d904      	bls.n	8006c6c <prvTraceSetObjectName+0x30>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8006c62:	4b26      	ldr	r3, [pc, #152]	@ (8006cfc <prvTraceSetObjectName+0xc0>)
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 f8a5 	bl	8006db4 <prvTraceError>
		return;
 8006c6a:	e041      	b.n	8006cf0 <prvTraceSetObjectName+0xb4>
	}

	if (handle == 0)
 8006c6c:	1dbb      	adds	r3, r7, #6
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <prvTraceSetObjectName+0x42>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8006c74:	4b22      	ldr	r3, [pc, #136]	@ (8006d00 <prvTraceSetObjectName+0xc4>)
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 f89c 	bl	8006db4 <prvTraceError>
		return;
 8006c7c:	e038      	b.n	8006cf0 <prvTraceSetObjectName+0xb4>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8006c7e:	4b21      	ldr	r3, [pc, #132]	@ (8006d04 <prvTraceSetObjectName+0xc8>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	1dfb      	adds	r3, r7, #7
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2150      	movs	r1, #80	@ 0x50
 8006c88:	18d3      	adds	r3, r2, r3
 8006c8a:	185b      	adds	r3, r3, r1
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	1dba      	adds	r2, r7, #6
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d909      	bls.n	8006caa <prvTraceSetObjectName+0x6e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8006c96:	1dfb      	adds	r3, r7, #7
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f7fe fcb0 	bl	8005600 <pszTraceGetErrorNotEnoughHandles>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 f886 	bl	8006db4 <prvTraceError>
 8006ca8:	e022      	b.n	8006cf0 <prvTraceSetObjectName+0xb4>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8006caa:	1dfb      	adds	r3, r7, #7
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	1dbb      	adds	r3, r7, #6
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	0011      	movs	r1, r2
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7ff fe7f 	bl	80069b8 <uiIndexOfObject>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	001a      	movs	r2, r3
 8006cbe:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <prvTraceSetObjectName+0xcc>)
 8006cc0:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == (void*)0)
 8006cc2:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <prvTraceSetObjectName+0xd0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d112      	bne.n	8006cf0 <prvTraceSetObjectName+0xb4>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8006cca:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <prvTraceSetObjectName+0xc8>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <prvTraceSetObjectName+0xcc>)
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	3388      	adds	r3, #136	@ 0x88
 8006cd4:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <prvTraceSetObjectName+0xc8>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	1dfb      	adds	r3, r7, #7
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	215c      	movs	r1, #92	@ 0x5c
 8006ce0:	18d3      	adds	r3, r2, r3
 8006ce2:	185b      	adds	r3, r3, r1
 8006ce4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	0019      	movs	r1, r3
 8006cec:	f7ff ff82 	bl	8006bf4 <prvStrncpy>
		}
	}
}
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b002      	add	sp, #8
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	08008c10 	.word	0x08008c10
 8006cfc:	08008c14 	.word	0x08008c14
 8006d00:	08008c44 	.word	0x08008c44
 8006d04:	200031f8 	.word	0x200031f8
 8006d08:	20003204 	.word	0x20003204
 8006d0c:	20001e30 	.word	0x20001e30

08006d10 <prvTraceOpenSymbol>:

TraceStringHandle_t prvTraceOpenSymbol(const char* name, TraceStringHandle_t userEventChannel)
{
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b089      	sub	sp, #36	@ 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 8006d1a:	240b      	movs	r4, #11
 8006d1c:	193b      	adds	r3, r7, r4
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
	crc = 0;
 8006d22:	250a      	movs	r5, #10
 8006d24:	197b      	adds	r3, r7, r5
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
	
	TRACE_ASSERT(name != (void*)0, "prvTraceOpenSymbol: name == NULL", (TraceStringHandle_t)0);

	prvTraceGetChecksum(name, &crc, &len);
 8006d2a:	193a      	adds	r2, r7, r4
 8006d2c:	1979      	adds	r1, r7, r5
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 fb67 	bl	8007404 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d36:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f383 8810 	msr	PRIMASK, r3
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <prvTraceOpenSymbol+0xa0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	4b17      	ldr	r3, [pc, #92]	@ (8006db0 <prvTraceOpenSymbol+0xa0>)
 8006d54:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 8006d56:	197b      	adds	r3, r7, r5
 8006d58:	7819      	ldrb	r1, [r3, #0]
 8006d5a:	193b      	adds	r3, r7, r4
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9f1 	bl	8007148 <prvTraceLookupSymbolTableEntry>
 8006d66:	0002      	movs	r2, r0
 8006d68:	261e      	movs	r6, #30
 8006d6a:	19bb      	adds	r3, r7, r6
 8006d6c:	801a      	strh	r2, [r3, #0]
	if (!result)
 8006d6e:	19bb      	adds	r3, r7, r6
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <prvTraceOpenSymbol+0x7c>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 8006d76:	197b      	adds	r3, r7, r5
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	193b      	adds	r3, r7, r4
 8006d7c:	781a      	ldrb	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa6b 	bl	800725c <prvTraceCreateSymbolTableEntry>
 8006d86:	0002      	movs	r2, r0
 8006d88:	19bb      	adds	r3, r7, r6
 8006d8a:	801a      	strh	r2, [r3, #0]
	}
	trcCRITICAL_SECTION_END();
 8006d8c:	4b08      	ldr	r3, [pc, #32]	@ (8006db0 <prvTraceOpenSymbol+0xa0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <prvTraceOpenSymbol+0xa0>)
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f383 8810 	msr	PRIMASK, r3
}
 8006da0:	46c0      	nop			@ (mov r8, r8)

	return result;
 8006da2:	231e      	movs	r3, #30
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	881b      	ldrh	r3, [r3, #0]
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b009      	add	sp, #36	@ 0x24
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db0:	20001db4 	.word	0x20001db4

08006db4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != (void*)0)
 8006dbc:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <prvTraceError+0x54>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <prvTraceError+0x14>
	{
		xTraceDisable();
 8006dc4:	f7fe fc8e 	bl	80056e4 <xTraceDisable>
	}

	/* If first error only... */
	if (traceErrorMessage == (void*)0)
 8006dc8:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <prvTraceError+0x58>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d117      	bne.n	8006e00 <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <prvTraceError+0x58>)
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != (void*)0)
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <prvTraceError+0x54>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d010      	beq.n	8006e00 <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006dde:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <prvTraceError+0x54>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	22f0      	movs	r2, #240	@ 0xf0
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	1898      	adds	r0, r3, r2
 8006de8:	4b08      	ldr	r3, [pc, #32]	@ (8006e0c <prvTraceError+0x58>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2250      	movs	r2, #80	@ 0x50
 8006dee:	0019      	movs	r1, r3
 8006df0:	f7ff ff00 	bl	8006bf4 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <prvTraceError+0x54>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	23ee      	movs	r3, #238	@ 0xee
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	50d1      	str	r1, [r2, r3]
		}
	}
}
 8006e00:	46c0      	nop			@ (mov r8, r8)
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b002      	add	sp, #8
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200031f8 	.word	0x200031f8
 8006e0c:	20001e30 	.word	0x20001e30

08006e10 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	0002      	movs	r2, r0
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
 8006e24:	e080      	b.n	8006f28 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8006e26:	4b46      	ldr	r3, [pc, #280]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	18d3      	adds	r3, r2, r3
 8006e30:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8006e32:	4b43      	ldr	r3, [pc, #268]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4942      	ldr	r1, [pc, #264]	@ (8006f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	185b      	adds	r3, r3, r1
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b98      	cmp	r3, #152	@ 0x98
 8006e44:	d931      	bls.n	8006eaa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8006e46:	4b3e      	ldr	r3, [pc, #248]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	493d      	ldr	r1, [pc, #244]	@ (8006f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006e50:	18d3      	adds	r3, r2, r3
 8006e52:	185b      	adds	r3, r3, r1
 8006e54:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8006e56:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e58:	d827      	bhi.n	8006eaa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9a>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4938      	ldr	r1, [pc, #224]	@ (8006f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	185b      	adds	r3, r3, r1
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	210f      	movs	r1, #15
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	3268      	adds	r2, #104	@ 0x68
 8006e70:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	781a      	ldrb	r2, [r3, #0]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	18d2      	adds	r2, r2, r3
 8006e7a:	4b31      	ldr	r3, [pc, #196]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d24d      	bcs.n	8006f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8006e84:	4b2e      	ldr	r3, [pc, #184]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	2082      	movs	r0, #130	@ 0x82
 8006e8e:	00c0      	lsls	r0, r0, #3
 8006e90:	4684      	mov	ip, r0
 8006e92:	4463      	add	r3, ip
 8006e94:	18d3      	adds	r3, r2, r3
 8006e96:	1d18      	adds	r0, r3, #4
 8006e98:	187b      	adds	r3, r7, r1
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	001a      	movs	r2, r3
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f001 fb48 	bl	8008538 <memset>
		{
 8006ea8:	e03a      	b.n	8006f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8006eaa:	4b25      	ldr	r3, [pc, #148]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4924      	ldr	r1, [pc, #144]	@ (8006f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006eb4:	18d3      	adds	r3, r2, r3
 8006eb6:	185b      	adds	r3, r3, r1
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d131      	bne.n	8006f22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d20f      	bcs.n	8006eec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	2182      	movs	r1, #130	@ 0x82
 8006ed6:	00c9      	lsls	r1, r1, #3
 8006ed8:	468c      	mov	ip, r1
 8006eda:	4463      	add	r3, ip
 8006edc:	18d3      	adds	r3, r2, r3
 8006ede:	3304      	adds	r3, #4
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f001 fb27 	bl	8008538 <memset>
 8006eea:	e01a      	b.n	8006f22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8006eec:	4b14      	ldr	r3, [pc, #80]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a14      	ldr	r2, [pc, #80]	@ (8006f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
 8006ef2:	4694      	mov	ip, r2
 8006ef4:	4463      	add	r3, ip
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	2100      	movs	r1, #0
 8006efa:	0018      	movs	r0, r3
 8006efc:	f001 fb1c 	bl	8008538 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8006f00:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x130>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	2182      	movs	r1, #130	@ 0x82
 8006f0a:	00c9      	lsls	r1, r1, #3
 8006f0c:	468c      	mov	ip, r1
 8006f0e:	4463      	add	r3, ip
 8006f10:	18d3      	adds	r3, r2, r3
 8006f12:	3304      	adds	r3, #4
 8006f14:	2204      	movs	r2, #4
 8006f16:	2100      	movs	r1, #0
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f001 fb0d 	bl	8008538 <memset>
 8006f1e:	e000      	b.n	8006f22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x112>
		{
 8006f20:	46c0      	nop			@ (mov r8, r8)
			}
		}
		i++;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	3301      	adds	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8006f28:	1dfb      	adds	r3, r7, #7
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d200      	bcs.n	8006f34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x124>
 8006f32:	e778      	b.n	8006e26 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
	}
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b006      	add	sp, #24
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	200031f8 	.word	0x200031f8
 8006f44:	00000414 	.word	0x00000414

08006f48 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8006f4c:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01c      	beq.n	8006f90 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	3201      	adds	r2, #1
 8006f68:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	23fa      	movs	r3, #250	@ 0xfa
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d307      	bcc.n	8006f88 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8006f78:	4b07      	ldr	r3, [pc, #28]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <prvTraceUpdateCounters+0x50>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f7ff ff41 	bl	8006e10 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8006f8e:	e000      	b.n	8006f92 <prvTraceUpdateCounters+0x4a>
		return;
 8006f90:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	200031f8 	.word	0x200031f8

08006f9c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	0002      	movs	r2, r0
 8006fa4:	1dbb      	adds	r3, r7, #6
 8006fa6:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);

	
	if (RecorderDataPtr->frequency == 0)
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d116      	bne.n	8006fec <prvTraceGetDTS+0x50>
	{	
		if (timestampFrequency != 0)
 8006fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800712c <prvTraceGetDTS+0x190>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d006      	beq.n	8006fd4 <prvTraceGetDTS+0x38>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8006fc6:	4b59      	ldr	r3, [pc, #356]	@ (800712c <prvTraceGetDTS+0x190>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b57      	ldr	r3, [pc, #348]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	0892      	lsrs	r2, r2, #2
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fd2:	e00b      	b.n	8006fec <prvTraceGetDTS+0x50>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8006fd4:	4b56      	ldr	r3, [pc, #344]	@ (8007130 <prvTraceGetDTS+0x194>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b56      	ldr	r3, [pc, #344]	@ (8007134 <prvTraceGetDTS+0x198>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d005      	beq.n	8006fec <prvTraceGetDTS+0x50>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8006fe0:	4b55      	ldr	r3, [pc, #340]	@ (8007138 <prvTraceGetDTS+0x19c>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b50      	ldr	r3, [pc, #320]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	0892      	lsrs	r2, r2, #2
 8006fea:	625a      	str	r2, [r3, #36]	@ 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8006fec:	230c      	movs	r3, #12
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f000 fa39 	bl	8007468 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4b50      	ldr	r3, [pc, #320]	@ (800713c <prvTraceGetDTS+0x1a0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4b4e      	ldr	r3, [pc, #312]	@ (800713c <prvTraceGetDTS+0x1a0>)
 8007004:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 8007006:	4b48      	ldr	r3, [pc, #288]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d047      	beq.n	80070a0 <prvTraceGetDTS+0x104>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8007010:	4b45      	ldr	r3, [pc, #276]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	429a      	cmp	r2, r3
 800701a:	d921      	bls.n	8007060 <prvTraceGetDTS+0xc4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800701c:	4b42      	ldr	r3, [pc, #264]	@ (8007128 <prvTraceGetDTS+0x18c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007022:	4b41      	ldr	r3, [pc, #260]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	0019      	movs	r1, r3
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f7f9 f86c 	bl	8000108 <__udivsi3>
 8007030:	0003      	movs	r3, r0
 8007032:	001a      	movs	r2, r3
 8007034:	4b3c      	ldr	r3, [pc, #240]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	18a2      	adds	r2, r4, r2
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800703c:	4b3a      	ldr	r3, [pc, #232]	@ (8007128 <prvTraceGetDTS+0x18c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007042:	4b39      	ldr	r3, [pc, #228]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	0011      	movs	r1, r2
 800704c:	0018      	movs	r0, r3
 800704e:	f7f9 f8e1 	bl	8000214 <__aeabi_uidivmod>
 8007052:	000b      	movs	r3, r1
 8007054:	001a      	movs	r2, r3
 8007056:	4b34      	ldr	r3, [pc, #208]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	18a2      	adds	r2, r4, r2
 800705c:	629a      	str	r2, [r3, #40]	@ 0x28
 800705e:	e007      	b.n	8007070 <prvTraceGetDTS+0xd4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8007060:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007066:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	188a      	adds	r2, r1, r2
 800706e:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8007070:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007076:	4b2c      	ldr	r3, [pc, #176]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	429a      	cmp	r2, r3
 800707e:	d313      	bcc.n	80070a8 <prvTraceGetDTS+0x10c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8007080:	4b29      	ldr	r3, [pc, #164]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	3201      	adds	r2, #1
 8007088:	62da      	str	r2, [r3, #44]	@ 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800708a:	4b27      	ldr	r3, [pc, #156]	@ (8007128 <prvTraceGetDTS+0x18c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007090:	4b25      	ldr	r3, [pc, #148]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007096:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <prvTraceGetDTS+0x18c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	1a8a      	subs	r2, r1, r2
 800709c:	629a      	str	r2, [r3, #40]	@ 0x28
 800709e:	e003      	b.n	80070a8 <prvTraceGetDTS+0x10c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80070a0:	4b21      	ldr	r3, [pc, #132]	@ (8007128 <prvTraceGetDTS+0x18c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 80070a8:	1dbb      	adds	r3, r7, #6
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d92f      	bls.n	8007112 <prvTraceGetDTS+0x176>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 80070b2:	f7ff fc57 	bl	8006964 <prvTraceNextFreeEventBufferSlot>
 80070b6:	0003      	movs	r3, r0
 80070b8:	617b      	str	r3, [r7, #20]

		if (xts != (void*)0)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d028      	beq.n	8007112 <prvTraceGetDTS+0x176>
		{
			if (param_maxDTS == 0xFFFF)
 80070c0:	1dbb      	adds	r3, r7, #6
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <prvTraceGetDTS+0x1a4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d10b      	bne.n	80070e2 <prvTraceGetDTS+0x146>
			{
				xts->type = (uint8_t)XTS16;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	22a9      	movs	r2, #169	@ 0xa9
 80070ce:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	705a      	strb	r2, [r3, #1]
 80070e0:	e015      	b.n	800710e <prvTraceGetDTS+0x172>
			}
			else if (param_maxDTS == 0xFF)
 80070e2:	1dbb      	adds	r3, r7, #6
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	2bff      	cmp	r3, #255	@ 0xff
 80070e8:	d10d      	bne.n	8007106 <prvTraceGetDTS+0x16a>
			{
				xts->type = (uint8_t)XTS8;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	22a8      	movs	r2, #168	@ 0xa8
 80070ee:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	0e1b      	lsrs	r3, r3, #24
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	705a      	strb	r2, [r3, #1]
 8007104:	e003      	b.n	800710e <prvTraceGetDTS+0x172>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8007106:	4b0f      	ldr	r3, [pc, #60]	@ (8007144 <prvTraceGetDTS+0x1a8>)
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff fe53 	bl	8006db4 <prvTraceError>
			}
			prvTraceUpdateCounters();
 800710e:	f7ff ff1b 	bl	8006f48 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b29b      	uxth	r3, r3
 8007116:	1dba      	adds	r2, r7, #6
 8007118:	8812      	ldrh	r2, [r2, #0]
 800711a:	4013      	ands	r3, r2
 800711c:	b29b      	uxth	r3, r3
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b007      	add	sp, #28
 8007124:	bd90      	pop	{r4, r7, pc}
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	200031f8 	.word	0x200031f8
 800712c:	20001db8 	.word	0x20001db8
 8007130:	e000e018 	.word	0xe000e018
 8007134:	20001dc4 	.word	0x20001dc4
 8007138:	20000014 	.word	0x20000014
 800713c:	20003208 	.word	0x20003208
 8007140:	0000ffff 	.word	0x0000ffff
 8007144:	08008c74 	.word	0x08008c74

08007148 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 TraceStringHandle_t chn)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	0008      	movs	r0, r1
 8007152:	0011      	movs	r1, r2
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	240b      	movs	r4, #11
 8007158:	193b      	adds	r3, r7, r4
 800715a:	1c02      	adds	r2, r0, #0
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	230a      	movs	r3, #10
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	1c0a      	adds	r2, r1, #0
 8007164:	701a      	strb	r2, [r3, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8007166:	4b3c      	ldr	r3, [pc, #240]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 8007168:	6819      	ldr	r1, [r3, #0]
 800716a:	193b      	adds	r3, r7, r4
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	2316      	movs	r3, #22
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	3299      	adds	r2, #153	@ 0x99
 8007174:	32ff      	adds	r2, #255	@ 0xff
 8007176:	0052      	lsls	r2, r2, #1
 8007178:	188a      	adds	r2, r1, r2
 800717a:	3204      	adds	r2, #4
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(name != (void*)0, "prvTraceLookupSymbolTableEntry: name == NULL", (TraceStringHandle_t)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (TraceStringHandle_t)0);

	while (i != 0)
 8007180:	e05c      	b.n	800723c <prvTraceLookupSymbolTableEntry+0xf4>
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8007182:	4b35      	ldr	r3, [pc, #212]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	2016      	movs	r0, #22
 8007188:	183b      	adds	r3, r7, r0
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	239b      	movs	r3, #155	@ 0x9b
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	188a      	adds	r2, r1, r2
 8007194:	18d3      	adds	r3, r2, r3
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	0019      	movs	r1, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	22ff      	movs	r2, #255	@ 0xff
 800719e:	4013      	ands	r3, r2
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d131      	bne.n	8007208 <prvTraceLookupSymbolTableEntry+0xc0>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 80071a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	183b      	adds	r3, r7, r0
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	1cda      	adds	r2, r3, #3
 80071ae:	239b      	movs	r3, #155	@ 0x9b
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	188a      	adds	r2, r1, r2
 80071b4:	18d3      	adds	r3, r2, r3
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	001a      	movs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	429a      	cmp	r2, r3
 80071c0:	d122      	bne.n	8007208 <prvTraceLookupSymbolTableEntry+0xc0>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 80071c2:	4b25      	ldr	r3, [pc, #148]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	183b      	adds	r3, r7, r0
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	240a      	movs	r4, #10
 80071ce:	193b      	adds	r3, r7, r4
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	18d2      	adds	r2, r2, r3
 80071d4:	239b      	movs	r3, #155	@ 0x9b
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	188a      	adds	r2, r1, r2
 80071da:	18d3      	adds	r3, r2, r3
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d112      	bne.n	8007208 <prvTraceLookupSymbolTableEntry+0xc0>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 80071e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	183b      	adds	r3, r7, r0
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	219a      	movs	r1, #154	@ 0x9a
 80071ee:	0089      	lsls	r1, r1, #2
 80071f0:	468c      	mov	ip, r1
 80071f2:	4463      	add	r3, ip
 80071f4:	18d3      	adds	r3, r2, r3
 80071f6:	1d18      	adds	r0, r3, #4
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	0019      	movs	r1, r3
 8007200:	f001 f9a2 	bl	8008548 <strncmp>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d01f      	beq.n	8007248 <prvTraceLookupSymbolTableEntry+0x100>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	2416      	movs	r4, #22
 800720e:	193b      	adds	r3, r7, r4
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	239b      	movs	r3, #155	@ 0x9b
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	188a      	adds	r2, r1, r2
 8007218:	18d3      	adds	r3, r2, r3
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	0018      	movs	r0, r3
 800721e:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <prvTraceLookupSymbolTableEntry+0x110>)
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	193b      	adds	r3, r7, r4
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	239b      	movs	r3, #155	@ 0x9b
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	188a      	adds	r2, r1, r2
 800722e:	18d3      	adds	r3, r2, r3
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	b29a      	uxth	r2, r3
 8007236:	193b      	adds	r3, r7, r4
 8007238:	1882      	adds	r2, r0, r2
 800723a:	801a      	strh	r2, [r3, #0]
	while (i != 0)
 800723c:	2316      	movs	r3, #22
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d19d      	bne.n	8007182 <prvTraceLookupSymbolTableEntry+0x3a>
 8007246:	e000      	b.n	800724a <prvTraceLookupSymbolTableEntry+0x102>
						break; /* found */
 8007248:	46c0      	nop			@ (mov r8, r8)
	}
	return i;
 800724a:	2316      	movs	r3, #22
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	881b      	ldrh	r3, [r3, #0]
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	b007      	add	sp, #28
 8007256:	bd90      	pop	{r4, r7, pc}
 8007258:	200031f8 	.word	0x200031f8

0800725c <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
TraceStringHandle_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										TraceStringHandle_t channel)
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	0008      	movs	r0, r1
 8007266:	0011      	movs	r1, r2
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	230b      	movs	r3, #11
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	1c02      	adds	r2, r0, #0
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	200a      	movs	r0, #10
 8007274:	183b      	adds	r3, r7, r0
 8007276:	1c0a      	adds	r2, r1, #0
 8007278:	701a      	strb	r2, [r3, #0]
	TraceStringHandle_t ret = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]

	TRACE_ASSERT(name != (void*)0, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800727e:	4b5f      	ldr	r3, [pc, #380]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	239a      	movs	r3, #154	@ 0x9a
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	58d2      	ldr	r2, [r2, r3]
 8007288:	183b      	adds	r3, r7, r0
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	18d3      	adds	r3, r2, r3
 800728e:	3304      	adds	r3, #4
 8007290:	2bc7      	cmp	r3, #199	@ 0xc7
 8007292:	d906      	bls.n	80072a2 <prvTraceCreateSymbolTableEntry+0x46>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8007294:	4b5a      	ldr	r3, [pc, #360]	@ (8007400 <prvTraceCreateSymbolTableEntry+0x1a4>)
 8007296:	0018      	movs	r0, r3
 8007298:	f7ff fd8c 	bl	8006db4 <prvTraceError>
		ret = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	e0a7      	b.n	80073f2 <prvTraceCreateSymbolTableEntry+0x196>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80072a2:	4b56      	ldr	r3, [pc, #344]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	250b      	movs	r5, #11
 80072a8:	197b      	adds	r3, r7, r5
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	3399      	adds	r3, #153	@ 0x99
 80072ae:	33ff      	adds	r3, #255	@ 0xff
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	3304      	adds	r3, #4
 80072b6:	8818      	ldrh	r0, [r3, #0]
		RecorderDataPtr->SymbolTable.symbytes
 80072b8:	4b50      	ldr	r3, [pc, #320]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072ba:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80072bc:	4b4f      	ldr	r3, [pc, #316]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	239a      	movs	r3, #154	@ 0x9a
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	58d2      	ldr	r2, [r2, r3]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 80072c6:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 80072c8:	239b      	movs	r3, #155	@ 0x9b
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	188a      	adds	r2, r1, r2
 80072ce:	18d3      	adds	r3, r2, r3
 80072d0:	1c02      	adds	r2, r0, #0
 80072d2:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80072d4:	4b49      	ldr	r3, [pc, #292]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	197b      	adds	r3, r7, r5
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	3399      	adds	r3, #153	@ 0x99
 80072de:	33ff      	adds	r3, #255	@ 0xff
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	18d3      	adds	r3, r2, r3
 80072e4:	3304      	adds	r3, #4
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	b298      	uxth	r0, r3
		RecorderDataPtr->SymbolTable.symbytes
 80072ec:	4b43      	ldr	r3, [pc, #268]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072ee:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80072f0:	4b42      	ldr	r3, [pc, #264]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	239a      	movs	r3, #154	@ 0x9a
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	58d3      	ldr	r3, [r2, r3]
 80072fa:	1c5a      	adds	r2, r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 80072fc:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 80072fe:	239b      	movs	r3, #155	@ 0x9b
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	188a      	adds	r2, r1, r2
 8007304:	18d3      	adds	r3, r2, r3
 8007306:	1c02      	adds	r2, r0, #0
 8007308:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
 800730a:	4b3c      	ldr	r3, [pc, #240]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 800730c:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800730e:	4b3b      	ldr	r3, [pc, #236]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	239a      	movs	r3, #154	@ 0x9a
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	58d3      	ldr	r3, [r2, r3]
 8007318:	1c9a      	adds	r2, r3, #2
			(uint8_t)(channel & 0x00FF);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	b2d8      	uxtb	r0, r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800731e:	239b      	movs	r3, #155	@ 0x9b
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	188a      	adds	r2, r1, r2
 8007324:	18d3      	adds	r3, r2, r3
 8007326:	1c02      	adds	r2, r0, #0
 8007328:	701a      	strb	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0a18      	lsrs	r0, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
 800732e:	4b33      	ldr	r3, [pc, #204]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007330:	6819      	ldr	r1, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8007332:	4b32      	ldr	r3, [pc, #200]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	239a      	movs	r3, #154	@ 0x9a
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	58d3      	ldr	r3, [r2, r3]
 800733c:	1cda      	adds	r2, r3, #3
			(uint8_t)(channel / 0x100);
 800733e:	b2c0      	uxtb	r0, r0
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 8007340:	239b      	movs	r3, #155	@ 0x9b
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	188a      	adds	r2, r1, r2
 8007346:	18d3      	adds	r3, r2, r3
 8007348:	1c02      	adds	r2, r0, #0
 800734a:	701a      	strb	r2, [r3, #0]

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800734c:	4b2b      	ldr	r3, [pc, #172]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 800734e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 8007350:	4b2a      	ldr	r3, [pc, #168]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	239a      	movs	r3, #154	@ 0x9a
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	58cb      	ldr	r3, [r1, r3]
 800735a:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800735c:	219a      	movs	r1, #154	@ 0x9a
 800735e:	0089      	lsls	r1, r1, #2
 8007360:	468c      	mov	ip, r1
 8007362:	4463      	add	r3, ip
 8007364:	18d3      	adds	r3, r2, r3
 8007366:	1d18      	adds	r0, r3, #4
 8007368:	240a      	movs	r4, #10
 800736a:	193b      	adds	r3, r7, r4
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	0019      	movs	r1, r3
 8007372:	f7ff fc3f 	bl	8006bf4 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 8007376:	4b21      	ldr	r3, [pc, #132]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 8007378:	6819      	ldr	r1, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800737a:	4b20      	ldr	r3, [pc, #128]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	239a      	movs	r3, #154	@ 0x9a
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	58d2      	ldr	r2, [r2, r3]
 8007384:	0020      	movs	r0, r4
 8007386:	183b      	adds	r3, r7, r0
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	18d3      	adds	r3, r2, r3
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	239b      	movs	r3, #155	@ 0x9b
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	188a      	adds	r2, r1, r2
 8007394:	18d3      	adds	r3, r2, r3
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800739a:	4b18      	ldr	r3, [pc, #96]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	239a      	movs	r3, #154	@ 0x9a
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	58d1      	ldr	r1, [r2, r3]
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 80073a4:	4b15      	ldr	r3, [pc, #84]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80073a6:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 80073a8:	197b      	adds	r3, r7, r5
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b289      	uxth	r1, r1
 80073ae:	3399      	adds	r3, #153	@ 0x99
 80073b0:	33ff      	adds	r3, #255	@ 0xff
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	18d3      	adds	r3, r2, r3
 80073b6:	3304      	adds	r3, #4
 80073b8:	1c0a      	adds	r2, r1, #0
 80073ba:	801a      	strh	r2, [r3, #0]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 80073bc:	4b0f      	ldr	r3, [pc, #60]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	239a      	movs	r3, #154	@ 0x9a
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	58d2      	ldr	r2, [r2, r3]
 80073c6:	183b      	adds	r3, r7, r0
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	18d1      	adds	r1, r2, r3
 80073cc:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	3105      	adds	r1, #5
 80073d2:	239a      	movs	r3, #154	@ 0x9a
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	50d1      	str	r1, [r2, r3]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 80073d8:	4b08      	ldr	r3, [pc, #32]	@ (80073fc <prvTraceCreateSymbolTableEntry+0x1a0>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	239a      	movs	r3, #154	@ 0x9a
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	58d3      	ldr	r3, [r2, r3]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	183a      	adds	r2, r7, r0
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	3205      	adds	r2, #5
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	617b      	str	r3, [r7, #20]
	}

	return ret;
 80073f2:	697b      	ldr	r3, [r7, #20]
}
 80073f4:	0018      	movs	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b006      	add	sp, #24
 80073fa:	bdb0      	pop	{r4, r5, r7, pc}
 80073fc:	200031f8 	.word	0x200031f8
 8007400:	08008c98 	.word	0x08008c98

08007404 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 8007410:	2301      	movs	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != (void*)0, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
	TRACE_ASSERT(pcrc != (void*)0, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
	TRACE_ASSERT(plength != (void*)0, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);

	if (pname != (const char *) 0)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <prvTraceGetChecksum+0x44>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 800741e:	e008      	b.n	8007432 <prvTraceGetChecksum+0x2e>
		{
			crc += c;
 8007420:	2317      	movs	r3, #23
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	61bb      	str	r3, [r7, #24]
			length++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	60fa      	str	r2, [r7, #12]
 8007438:	2117      	movs	r1, #23
 800743a:	187a      	adds	r2, r7, r1
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	7013      	strb	r3, [r2, #0]
 8007440:	187b      	adds	r3, r7, r1
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1eb      	bne.n	8007420 <prvTraceGetChecksum+0x1c>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	223f      	movs	r2, #63	@ 0x3f
 800744e:	4013      	ands	r3, r2
 8007450:	b2da      	uxtb	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	701a      	strb	r2, [r3, #0]
}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b008      	add	sp, #32
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8007478:	4b2d      	ldr	r3, [pc, #180]	@ (8007530 <prvTracePortGetTimeStamp+0xc8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d107      	bne.n	8007490 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d04f      	beq.n	8007526 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8007486:	4b2b      	ldr	r3, [pc, #172]	@ (8007534 <prvTracePortGetTimeStamp+0xcc>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
		return;
 800748e:	e04a      	b.n	8007526 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8007490:	4b29      	ldr	r3, [pc, #164]	@ (8007538 <prvTracePortGetTimeStamp+0xd0>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b29      	ldr	r3, [pc, #164]	@ (800753c <prvTracePortGetTimeStamp+0xd4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	3301      	adds	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 800749e:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <prvTracePortGetTimeStamp+0xd8>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b28      	ldr	r3, [pc, #160]	@ (8007544 <prvTracePortGetTimeStamp+0xdc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	db03      	blt.n	80074b6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 80074ae:	4b24      	ldr	r3, [pc, #144]	@ (8007540 <prvTracePortGetTimeStamp+0xd8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e002      	b.n	80074bc <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 80074b6:	4b23      	ldr	r3, [pc, #140]	@ (8007544 <prvTracePortGetTimeStamp+0xdc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 80074bc:	4b20      	ldr	r3, [pc, #128]	@ (8007540 <prvTracePortGetTimeStamp+0xd8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d107      	bne.n	80074d6 <prvTracePortGetTimeStamp+0x6e>
 80074c6:	4b20      	ldr	r3, [pc, #128]	@ (8007548 <prvTracePortGetTimeStamp+0xe0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d202      	bcs.n	80074d6 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d016      	beq.n	800750a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 80074dc:	4b16      	ldr	r3, [pc, #88]	@ (8007538 <prvTracePortGetTimeStamp+0xd0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	089b      	lsrs	r3, r3, #2
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	435a      	muls	r2, r3
 80074e8:	4b12      	ldr	r3, [pc, #72]	@ (8007534 <prvTracePortGetTimeStamp+0xcc>)
 80074ea:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 80074ec:	4b12      	ldr	r3, [pc, #72]	@ (8007538 <prvTracePortGetTimeStamp+0xd0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	2203      	movs	r2, #3
 80074f4:	4013      	ands	r3, r2
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	435a      	muls	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	18d3      	adds	r3, r2, r3
 80074fe:	089a      	lsrs	r2, r3, #2
 8007500:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <prvTracePortGetTimeStamp+0xcc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	18d2      	adds	r2, r2, r3
 8007506:	4b0b      	ldr	r3, [pc, #44]	@ (8007534 <prvTracePortGetTimeStamp+0xcc>)
 8007508:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <prvTracePortGetTimeStamp+0xd8>)
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8007516:	4b07      	ldr	r3, [pc, #28]	@ (8007534 <prvTracePortGetTimeStamp+0xcc>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 800751e:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <prvTracePortGetTimeStamp+0xe0>)
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e000      	b.n	8007528 <prvTracePortGetTimeStamp+0xc0>
		return;
 8007526:	46c0      	nop			@ (mov r8, r8)
}
 8007528:	46bd      	mov	sp, r7
 800752a:	b004      	add	sp, #16
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			@ (mov r8, r8)
 8007530:	20001da8 	.word	0x20001da8
 8007534:	20001dac 	.word	0x20001dac
 8007538:	e000e014 	.word	0xe000e014
 800753c:	e000e018 	.word	0xe000e018
 8007540:	2000320c 	.word	0x2000320c
 8007544:	20001da4 	.word	0x20001da4
 8007548:	20003210 	.word	0x20003210

0800754c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	0002      	movs	r2, r0
 8007554:	1dfb      	adds	r3, r7, #7
 8007556:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007558:	1dfb      	adds	r3, r7, #7
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b7f      	cmp	r3, #127	@ 0x7f
 800755e:	d809      	bhi.n	8007574 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007560:	1dfb      	adds	r3, r7, #7
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	001a      	movs	r2, r3
 8007566:	231f      	movs	r3, #31
 8007568:	401a      	ands	r2, r3
 800756a:	4b04      	ldr	r3, [pc, #16]	@ (800757c <__NVIC_EnableIRQ+0x30>)
 800756c:	2101      	movs	r1, #1
 800756e:	4091      	lsls	r1, r2
 8007570:	000a      	movs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
  }
}
 8007574:	46c0      	nop			@ (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}
 800757c:	e000e100 	.word	0xe000e100

08007580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	0002      	movs	r2, r0
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	1dfb      	adds	r3, r7, #7
 800758c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b7f      	cmp	r3, #127	@ 0x7f
 8007594:	d828      	bhi.n	80075e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007596:	4a2f      	ldr	r2, [pc, #188]	@ (8007654 <__NVIC_SetPriority+0xd4>)
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b25b      	sxtb	r3, r3
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	33c0      	adds	r3, #192	@ 0xc0
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	589b      	ldr	r3, [r3, r2]
 80075a6:	1dfa      	adds	r2, r7, #7
 80075a8:	7812      	ldrb	r2, [r2, #0]
 80075aa:	0011      	movs	r1, r2
 80075ac:	2203      	movs	r2, #3
 80075ae:	400a      	ands	r2, r1
 80075b0:	00d2      	lsls	r2, r2, #3
 80075b2:	21ff      	movs	r1, #255	@ 0xff
 80075b4:	4091      	lsls	r1, r2
 80075b6:	000a      	movs	r2, r1
 80075b8:	43d2      	mvns	r2, r2
 80075ba:	401a      	ands	r2, r3
 80075bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	019b      	lsls	r3, r3, #6
 80075c2:	22ff      	movs	r2, #255	@ 0xff
 80075c4:	401a      	ands	r2, r3
 80075c6:	1dfb      	adds	r3, r7, #7
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	0018      	movs	r0, r3
 80075cc:	2303      	movs	r3, #3
 80075ce:	4003      	ands	r3, r0
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075d4:	481f      	ldr	r0, [pc, #124]	@ (8007654 <__NVIC_SetPriority+0xd4>)
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	430a      	orrs	r2, r1
 80075e0:	33c0      	adds	r3, #192	@ 0xc0
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80075e6:	e031      	b.n	800764c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007658 <__NVIC_SetPriority+0xd8>)
 80075ea:	1dfb      	adds	r3, r7, #7
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	0019      	movs	r1, r3
 80075f0:	230f      	movs	r3, #15
 80075f2:	400b      	ands	r3, r1
 80075f4:	3b08      	subs	r3, #8
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	3306      	adds	r3, #6
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	18d3      	adds	r3, r2, r3
 80075fe:	3304      	adds	r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	1dfa      	adds	r2, r7, #7
 8007604:	7812      	ldrb	r2, [r2, #0]
 8007606:	0011      	movs	r1, r2
 8007608:	2203      	movs	r2, #3
 800760a:	400a      	ands	r2, r1
 800760c:	00d2      	lsls	r2, r2, #3
 800760e:	21ff      	movs	r1, #255	@ 0xff
 8007610:	4091      	lsls	r1, r2
 8007612:	000a      	movs	r2, r1
 8007614:	43d2      	mvns	r2, r2
 8007616:	401a      	ands	r2, r3
 8007618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	019b      	lsls	r3, r3, #6
 800761e:	22ff      	movs	r2, #255	@ 0xff
 8007620:	401a      	ands	r2, r3
 8007622:	1dfb      	adds	r3, r7, #7
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	0018      	movs	r0, r3
 8007628:	2303      	movs	r3, #3
 800762a:	4003      	ands	r3, r0
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007630:	4809      	ldr	r0, [pc, #36]	@ (8007658 <__NVIC_SetPriority+0xd8>)
 8007632:	1dfb      	adds	r3, r7, #7
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	001c      	movs	r4, r3
 8007638:	230f      	movs	r3, #15
 800763a:	4023      	ands	r3, r4
 800763c:	3b08      	subs	r3, #8
 800763e:	089b      	lsrs	r3, r3, #2
 8007640:	430a      	orrs	r2, r1
 8007642:	3306      	adds	r3, #6
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	18c3      	adds	r3, r0, r3
 8007648:	3304      	adds	r3, #4
 800764a:	601a      	str	r2, [r3, #0]
}
 800764c:	46c0      	nop			@ (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b003      	add	sp, #12
 8007652:	bd90      	pop	{r4, r7, pc}
 8007654:	e000e100 	.word	0xe000e100
 8007658:	e000ed00 	.word	0xe000ed00

0800765c <main>:
float sum_prod(float x);


// Main function
int main()
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af02      	add	r7, sp, #8
	uint32_t	free_heap_size;

	// Configure System Clock
	SystemClock_Config();
 8007662:	f000 f8ff 	bl	8007864 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8007666:	f000 fdb5 	bl	80081d4 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 800766a:	f000 fdff 	bl	800826c <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 800766e:	f000 fe4b 	bl	8008308 <BSP_Console_Init>
	my_printf("Console Ready!\r\n");
 8007672:	4b5e      	ldr	r3, [pc, #376]	@ (80077ec <main+0x190>)
 8007674:	0018      	movs	r0, r3
 8007676:	f000 fd67 	bl	8008148 <my_printf>

	// Initialize NVIC
	//BSP_NVIC_Init();

	// Start Trace Recording
	vTraceEnable(TRC_START);		// xTraceEnable(TRC_START);
 800767a:	2001      	movs	r0, #1
 800767c:	f7fd fffc 	bl	8005678 <xTraceEnable>

	// Report Free Heap Size
	free_heap_size = xPortGetFreeHeapSize();
 8007680:	f7fd fd30 	bl	80050e4 <xPortGetFreeHeapSize>
 8007684:	0003      	movs	r3, r0
 8007686:	607b      	str	r3, [r7, #4]
	my_printf("\r\nFree Heap Size is %d bytes\r\n", free_heap_size);
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4b59      	ldr	r3, [pc, #356]	@ (80077f0 <main+0x194>)
 800768c:	0011      	movs	r1, r2
 800768e:	0018      	movs	r0, r3
 8007690:	f000 fd5a 	bl	8008148 <my_printf>


	// Create Semaphore object (this is not a 'give')
	my_printf("\r\nNow creating Binary Semaphore...\r\n");
 8007694:	4b57      	ldr	r3, [pc, #348]	@ (80077f4 <main+0x198>)
 8007696:	0018      	movs	r0, r3
 8007698:	f000 fd56 	bl	8008148 <my_printf>
	xSem = xSemaphoreCreateBinary();
 800769c:	2203      	movs	r2, #3
 800769e:	2100      	movs	r1, #0
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7fa fa3d 	bl	8001b20 <xQueueGenericCreate>
 80076a6:	0002      	movs	r2, r0
 80076a8:	4b53      	ldr	r3, [pc, #332]	@ (80077f8 <main+0x19c>)
 80076aa:	601a      	str	r2, [r3, #0]
	vTraceSetSemaphoreName(xSem, "xSEM");
 80076ac:	4b52      	ldr	r3, [pc, #328]	@ (80077f8 <main+0x19c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a52      	ldr	r2, [pc, #328]	@ (80077fc <main+0x1a0>)
 80076b2:	0011      	movs	r1, r2
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7fd fe12 	bl	80052de <vTraceSetSemaphoreName>
	free_heap_size = xPortGetFreeHeapSize();
 80076ba:	f7fd fd13 	bl	80050e4 <xPortGetFreeHeapSize>
 80076be:	0003      	movs	r3, r0
 80076c0:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007800 <main+0x1a4>)
 80076c6:	0011      	movs	r1, r2
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 fd3d 	bl	8008148 <my_printf>

	// Create Queue to hold console messages
	my_printf("\r\nNow creating Message Queue...\r\n");
 80076ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007804 <main+0x1a8>)
 80076d0:	0018      	movs	r0, r3
 80076d2:	f000 fd39 	bl	8008148 <my_printf>
	xConsoleQueue = xQueueCreate(4, sizeof(message_t));
 80076d6:	2200      	movs	r2, #0
 80076d8:	2140      	movs	r1, #64	@ 0x40
 80076da:	2004      	movs	r0, #4
 80076dc:	f7fa fa20 	bl	8001b20 <xQueueGenericCreate>
 80076e0:	0002      	movs	r2, r0
 80076e2:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <main+0x1ac>)
 80076e4:	601a      	str	r2, [r3, #0]
	vTraceSetQueueName(xConsoleQueue, "Console Queue");
 80076e6:	4b48      	ldr	r3, [pc, #288]	@ (8007808 <main+0x1ac>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a48      	ldr	r2, [pc, #288]	@ (800780c <main+0x1b0>)
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7fd fde1 	bl	80052b6 <vTraceSetQueueName>
	free_heap_size = xPortGetFreeHeapSize();
 80076f4:	f7fd fcf6 	bl	80050e4 <xPortGetFreeHeapSize>
 80076f8:	0003      	movs	r3, r0
 80076fa:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4b40      	ldr	r3, [pc, #256]	@ (8007800 <main+0x1a4>)
 8007700:	0011      	movs	r1, r2
 8007702:	0018      	movs	r0, r3
 8007704:	f000 fd20 	bl	8008148 <my_printf>

	// Create a Mutex for accessing the console
	my_printf("\r\nNow creating Mutex...\r\n");
 8007708:	4b41      	ldr	r3, [pc, #260]	@ (8007810 <main+0x1b4>)
 800770a:	0018      	movs	r0, r3
 800770c:	f000 fd1c 	bl	8008148 <my_printf>
	xConsoleMutex = xSemaphoreCreateMutex();
 8007710:	2001      	movs	r0, #1
 8007712:	f7fa fb4d 	bl	8001db0 <xQueueCreateMutex>
 8007716:	0002      	movs	r2, r0
 8007718:	4b3e      	ldr	r3, [pc, #248]	@ (8007814 <main+0x1b8>)
 800771a:	601a      	str	r2, [r3, #0]
	vTraceSetMutexName(xConsoleMutex, "Console Mutex");
 800771c:	4b3d      	ldr	r3, [pc, #244]	@ (8007814 <main+0x1b8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a3d      	ldr	r2, [pc, #244]	@ (8007818 <main+0x1bc>)
 8007722:	0011      	movs	r1, r2
 8007724:	0018      	movs	r0, r3
 8007726:	f7fd fdee 	bl	8005306 <vTraceSetMutexName>
	free_heap_size = xPortGetFreeHeapSize();
 800772a:	f7fd fcdb 	bl	80050e4 <xPortGetFreeHeapSize>
 800772e:	0003      	movs	r3, r0
 8007730:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4b32      	ldr	r3, [pc, #200]	@ (8007800 <main+0x1a4>)
 8007736:	0011      	movs	r1, r2
 8007738:	0018      	movs	r0, r3
 800773a:	f000 fd05 	bl	8008148 <my_printf>

	// Register the Trace User Event Channels
	my_printf("\r\nNow registering Trace events...\r\n");
 800773e:	4b37      	ldr	r3, [pc, #220]	@ (800781c <main+0x1c0>)
 8007740:	0018      	movs	r0, r3
 8007742:	f000 fd01 	bl	8008148 <my_printf>
	ue1 = xTraceRegisterString("ticks");
 8007746:	4b36      	ldr	r3, [pc, #216]	@ (8007820 <main+0x1c4>)
 8007748:	0018      	movs	r0, r3
 800774a:	f7fe fbfd 	bl	8005f48 <xTraceRegisterString>
 800774e:	0002      	movs	r2, r0
 8007750:	4b34      	ldr	r3, [pc, #208]	@ (8007824 <main+0x1c8>)
 8007752:	601a      	str	r2, [r3, #0]
	ue2 = xTraceRegisterString("msg");
 8007754:	4b34      	ldr	r3, [pc, #208]	@ (8007828 <main+0x1cc>)
 8007756:	0018      	movs	r0, r3
 8007758:	f7fe fbf6 	bl	8005f48 <xTraceRegisterString>
 800775c:	0002      	movs	r2, r0
 800775e:	4b33      	ldr	r3, [pc, #204]	@ (800782c <main+0x1d0>)
 8007760:	601a      	str	r2, [r3, #0]
	ue3 = xTraceRegisterString("HWM");
 8007762:	4b33      	ldr	r3, [pc, #204]	@ (8007830 <main+0x1d4>)
 8007764:	0018      	movs	r0, r3
 8007766:	f7fe fbef 	bl	8005f48 <xTraceRegisterString>
 800776a:	0002      	movs	r2, r0
 800776c:	4b31      	ldr	r3, [pc, #196]	@ (8007834 <main+0x1d8>)
 800776e:	601a      	str	r2, [r3, #0]
	free_heap_size = xPortGetFreeHeapSize();
 8007770:	f7fd fcb8 	bl	80050e4 <xPortGetFreeHeapSize>
 8007774:	0003      	movs	r3, r0
 8007776:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4b21      	ldr	r3, [pc, #132]	@ (8007800 <main+0x1a4>)
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f000 fce2 	bl	8008148 <my_printf>

	// Create Tasks
	my_printf("\r\nNow creating Tasks...\r\n");
 8007784:	4b2c      	ldr	r3, [pc, #176]	@ (8007838 <main+0x1dc>)
 8007786:	0018      	movs	r0, r3
 8007788:	f000 fcde 	bl	8008148 <my_printf>
	xTaskCreate(vTask1,	"Task_1",	128, NULL, 2, &vTask1_handle);
 800778c:	492b      	ldr	r1, [pc, #172]	@ (800783c <main+0x1e0>)
 800778e:	482c      	ldr	r0, [pc, #176]	@ (8007840 <main+0x1e4>)
 8007790:	4b2c      	ldr	r3, [pc, #176]	@ (8007844 <main+0x1e8>)
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	2302      	movs	r3, #2
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2300      	movs	r3, #0
 800779a:	2280      	movs	r2, #128	@ 0x80
 800779c:	f7fb fc4f 	bl	800303e <xTaskCreate>
	xTaskCreate(vTask2,	"Task_2",	128, NULL, 3, &vTask2_handle);
 80077a0:	4929      	ldr	r1, [pc, #164]	@ (8007848 <main+0x1ec>)
 80077a2:	482a      	ldr	r0, [pc, #168]	@ (800784c <main+0x1f0>)
 80077a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007850 <main+0x1f4>)
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2303      	movs	r3, #3
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	2280      	movs	r2, #128	@ 0x80
 80077b0:	f7fb fc45 	bl	800303e <xTaskCreate>
	xTaskCreate(vTaskHWM,	"Task_HWM",	128, NULL, 1, &vTaskHWM_handle);
 80077b4:	4927      	ldr	r1, [pc, #156]	@ (8007854 <main+0x1f8>)
 80077b6:	4828      	ldr	r0, [pc, #160]	@ (8007858 <main+0x1fc>)
 80077b8:	4b28      	ldr	r3, [pc, #160]	@ (800785c <main+0x200>)
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	2301      	movs	r3, #1
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2300      	movs	r3, #0
 80077c2:	2280      	movs	r2, #128	@ 0x80
 80077c4:	f7fb fc3b 	bl	800303e <xTaskCreate>
	free_heap_size = xPortGetFreeHeapSize();
 80077c8:	f7fd fc8c 	bl	80050e4 <xPortGetFreeHeapSize>
 80077cc:	0003      	movs	r3, r0
 80077ce:	607b      	str	r3, [r7, #4]
	my_printf("Free Heap Size is %d bytes\r\n", free_heap_size);
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <main+0x1a4>)
 80077d4:	0011      	movs	r1, r2
 80077d6:	0018      	movs	r0, r3
 80077d8:	f000 fcb6 	bl	8008148 <my_printf>

	// Give a nice name to the Queue in the trace recorder
	// vTraceSetQueueName(xConsoleQueue, "Console Queue");

	// Start the Scheduler
	my_printf("\r\nNow Starting Scheduler...\r\n");
 80077dc:	4b20      	ldr	r3, [pc, #128]	@ (8007860 <main+0x204>)
 80077de:	0018      	movs	r0, r3
 80077e0:	f000 fcb2 	bl	8008148 <my_printf>
	vTaskStartScheduler();
 80077e4:	f7fb fe7e 	bl	80034e4 <vTaskStartScheduler>

	while(1)
 80077e8:	46c0      	nop			@ (mov r8, r8)
 80077ea:	e7fd      	b.n	80077e8 <main+0x18c>
 80077ec:	08008ce0 	.word	0x08008ce0
 80077f0:	08008cf4 	.word	0x08008cf4
 80077f4:	08008d14 	.word	0x08008d14
 80077f8:	20003220 	.word	0x20003220
 80077fc:	08008d3c 	.word	0x08008d3c
 8007800:	08008d44 	.word	0x08008d44
 8007804:	08008d64 	.word	0x08008d64
 8007808:	20003228 	.word	0x20003228
 800780c:	08008d88 	.word	0x08008d88
 8007810:	08008d98 	.word	0x08008d98
 8007814:	20003224 	.word	0x20003224
 8007818:	08008db4 	.word	0x08008db4
 800781c:	08008dc4 	.word	0x08008dc4
 8007820:	08008de8 	.word	0x08008de8
 8007824:	2000322c 	.word	0x2000322c
 8007828:	08008df0 	.word	0x08008df0
 800782c:	20003230 	.word	0x20003230
 8007830:	08008df4 	.word	0x08008df4
 8007834:	20003234 	.word	0x20003234
 8007838:	08008df8 	.word	0x08008df8
 800783c:	08008e14 	.word	0x08008e14
 8007840:	08007999 	.word	0x08007999
 8007844:	20003214 	.word	0x20003214
 8007848:	08008e1c 	.word	0x08008e1c
 800784c:	080079d9 	.word	0x080079d9
 8007850:	20003218 	.word	0x20003218
 8007854:	08008e24 	.word	0x08008e24
 8007858:	08007a71 	.word	0x08007a71
 800785c:	2000321c 	.word	0x2000321c
 8007860:	08008e30 	.word	0x08008e30

08007864 <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
	timeout = 1000000;
 800786e:	4b44      	ldr	r3, [pc, #272]	@ (8007980 <SystemClock_Config+0x11c>)
 8007870:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8007872:	4b44      	ldr	r3, [pc, #272]	@ (8007984 <SystemClock_Config+0x120>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	4b43      	ldr	r3, [pc, #268]	@ (8007984 <SystemClock_Config+0x120>)
 8007878:	2180      	movs	r1, #128	@ 0x80
 800787a:	02c9      	lsls	r1, r1, #11
 800787c:	430a      	orrs	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8007880:	4b40      	ldr	r3, [pc, #256]	@ (8007984 <SystemClock_Config+0x120>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b3f      	ldr	r3, [pc, #252]	@ (8007984 <SystemClock_Config+0x120>)
 8007886:	2180      	movs	r1, #128	@ 0x80
 8007888:	0249      	lsls	r1, r1, #9
 800788a:	430a      	orrs	r2, r1
 800788c:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 800788e:	4b3d      	ldr	r3, [pc, #244]	@ (8007984 <SystemClock_Config+0x120>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	2380      	movs	r3, #128	@ 0x80
 8007894:	029b      	lsls	r3, r3, #10
 8007896:	4013      	ands	r3, r2
 8007898:	60bb      	str	r3, [r7, #8]
		timeout--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b01      	subs	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <SystemClock_Config+0x48>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f0      	bne.n	800788e <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80078ac:	4b35      	ldr	r3, [pc, #212]	@ (8007984 <SystemClock_Config+0x120>)
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b34      	ldr	r3, [pc, #208]	@ (8007984 <SystemClock_Config+0x120>)
 80078b2:	4935      	ldr	r1, [pc, #212]	@ (8007988 <SystemClock_Config+0x124>)
 80078b4:	400a      	ands	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80078b8:	4b32      	ldr	r3, [pc, #200]	@ (8007984 <SystemClock_Config+0x120>)
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4b31      	ldr	r3, [pc, #196]	@ (8007984 <SystemClock_Config+0x120>)
 80078be:	2180      	movs	r1, #128	@ 0x80
 80078c0:	0249      	lsls	r1, r1, #9
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80078c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007984 <SystemClock_Config+0x120>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80078cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007984 <SystemClock_Config+0x120>)
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	4b2c      	ldr	r3, [pc, #176]	@ (8007984 <SystemClock_Config+0x120>)
 80078d2:	492e      	ldr	r1, [pc, #184]	@ (800798c <SystemClock_Config+0x128>)
 80078d4:	400a      	ands	r2, r1
 80078d6:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80078d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007984 <SystemClock_Config+0x120>)
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4b29      	ldr	r3, [pc, #164]	@ (8007984 <SystemClock_Config+0x120>)
 80078de:	2180      	movs	r1, #128	@ 0x80
 80078e0:	0349      	lsls	r1, r1, #13
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 80078e6:	4b27      	ldr	r3, [pc, #156]	@ (8007984 <SystemClock_Config+0x120>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b26      	ldr	r3, [pc, #152]	@ (8007984 <SystemClock_Config+0x120>)
 80078ec:	2180      	movs	r1, #128	@ 0x80
 80078ee:	0449      	lsls	r1, r1, #17
 80078f0:	430a      	orrs	r2, r1
 80078f2:	601a      	str	r2, [r3, #0]
	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80078f4:	4b23      	ldr	r3, [pc, #140]	@ (8007984 <SystemClock_Config+0x120>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	049b      	lsls	r3, r3, #18
 80078fc:	4013      	ands	r3, r2
 80078fe:	607b      	str	r3, [r7, #4]
		timeout--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b01      	subs	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <SystemClock_Config+0xae>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f0      	bne.n	80078f4 <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8007912:	4b1c      	ldr	r3, [pc, #112]	@ (8007984 <SystemClock_Config+0x120>)
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	4b1b      	ldr	r3, [pc, #108]	@ (8007984 <SystemClock_Config+0x120>)
 8007918:	21f0      	movs	r1, #240	@ 0xf0
 800791a:	438a      	bics	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800791e:	4a19      	ldr	r2, [pc, #100]	@ (8007984 <SystemClock_Config+0x120>)
 8007920:	4b18      	ldr	r3, [pc, #96]	@ (8007984 <SystemClock_Config+0x120>)
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8007926:	4b17      	ldr	r3, [pc, #92]	@ (8007984 <SystemClock_Config+0x120>)
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <SystemClock_Config+0x120>)
 800792c:	4918      	ldr	r1, [pc, #96]	@ (8007990 <SystemClock_Config+0x12c>)
 800792e:	400a      	ands	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8007932:	4a14      	ldr	r2, [pc, #80]	@ (8007984 <SystemClock_Config+0x120>)
 8007934:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <SystemClock_Config+0x120>)
 8007936:	6852      	ldr	r2, [r2, #4]
 8007938:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800793a:	4b16      	ldr	r3, [pc, #88]	@ (8007994 <SystemClock_Config+0x130>)
 800793c:	2211      	movs	r2, #17
 800793e:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <SystemClock_Config+0x120>)
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <SystemClock_Config+0x120>)
 8007946:	2103      	movs	r1, #3
 8007948:	438a      	bics	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <SystemClock_Config+0x120>)
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b0c      	ldr	r3, [pc, #48]	@ (8007984 <SystemClock_Config+0x120>)
 8007952:	2102      	movs	r1, #2
 8007954:	430a      	orrs	r2, r1
 8007956:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8007958:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <SystemClock_Config+0x120>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	220c      	movs	r2, #12
 800795e:	4013      	ands	r3, r2
 8007960:	603b      	str	r3, [r7, #0]
		timeout--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b01      	subs	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d002      	beq.n	8007974 <SystemClock_Config+0x110>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f1      	bne.n	8007958 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8007974:	f000 fd5a 	bl	800842c <SystemCoreClockUpdate>
}
 8007978:	46c0      	nop			@ (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b004      	add	sp, #16
 800797e:	bd80      	pop	{r7, pc}
 8007980:	000f4240 	.word	0x000f4240
 8007984:	40021000 	.word	0x40021000
 8007988:	fffe7fff 	.word	0xfffe7fff
 800798c:	ffc3ffff 	.word	0xffc3ffff
 8007990:	fffff8ff 	.word	0xfffff8ff
 8007994:	40022000 	.word	0x40022000

08007998 <vTask1>:

/*
 *	Task_1
 */
void vTask1 (void *pvParameters)
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b089      	sub	sp, #36	@ 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	uint8_t	msg[] = "This is task_1 message"; 	// 22 bytes string
 80079a0:	2308      	movs	r3, #8
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	4a0a      	ldr	r2, [pc, #40]	@ (80079d0 <vTask1+0x38>)
 80079a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80079a8:	c313      	stmia	r3!, {r0, r1, r4}
 80079aa:	ca03      	ldmia	r2!, {r0, r1}
 80079ac:	c303      	stmia	r3!, {r0, r1}
 80079ae:	8811      	ldrh	r1, [r2, #0]
 80079b0:	8019      	strh	r1, [r3, #0]
 80079b2:	7892      	ldrb	r2, [r2, #2]
 80079b4:	709a      	strb	r2, [r3, #2]

	while(1)
	{
		// Send message to Trace Recorder
		vTracePrint(ue2, (char *)msg);
 80079b6:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <vTask1+0x3c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2208      	movs	r2, #8
 80079bc:	18ba      	adds	r2, r7, r2
 80079be:	0011      	movs	r1, r2
 80079c0:	0018      	movs	r0, r3
 80079c2:	f7fe fa59 	bl	8005e78 <xTracePrint>

		// Wait for 100ms
		vTaskDelay(100);
 80079c6:	2064      	movs	r0, #100	@ 0x64
 80079c8:	f7fb fd26 	bl	8003418 <vTaskDelay>
		vTracePrint(ue2, (char *)msg);
 80079cc:	46c0      	nop			@ (mov r8, r8)
 80079ce:	e7f2      	b.n	80079b6 <vTask1+0x1e>
 80079d0:	08008e50 	.word	0x08008e50
 80079d4:	20003230 	.word	0x20003230

080079d8 <vTask2>:

/*
 *	Task_2
 */
void vTask2 (void *pvParameters)
{
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b08f      	sub	sp, #60	@ 0x3c
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	uint8_t		msg[] = "This is a much longer task_2 message"; // 36 bytes string
 80079e0:	2308      	movs	r3, #8
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a60 <vTask2+0x88>)
 80079e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80079e8:	c313      	stmia	r3!, {r0, r1, r4}
 80079ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80079ec:	c313      	stmia	r3!, {r0, r1, r4}
 80079ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80079f0:	c313      	stmia	r3!, {r0, r1, r4}
 80079f2:	7812      	ldrb	r2, [r2, #0]
 80079f4:	701a      	strb	r2, [r3, #0]
	float 		x,y;

	// Initialize the user Push-Button
	BSP_PB_Init();
 80079f6:	f000 fc39 	bl	800826c <BSP_PB_Init>

	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn, configMAX_API_CALL_INTERRUPT_PRIORITY + 1);
 80079fa:	2106      	movs	r1, #6
 80079fc:	2007      	movs	r0, #7
 80079fe:	f7ff fdbf 	bl	8007580 <__NVIC_SetPriority>

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007a02:	2007      	movs	r0, #7
 8007a04:	f7ff fda2 	bl	800754c <__NVIC_EnableIRQ>

	// Take the semaphore once to make sure it is cleared
	xSemaphoreTake(xSem, 0);
 8007a08:	4b16      	ldr	r3, [pc, #88]	@ (8007a64 <vTask2+0x8c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f7fa ff0a 	bl	8002828 <xQueueSemaphoreTake>

	// Now enter the task loop
	while(1)
	{
		// Wait here endlessly until button is pressed
		xSemaphoreTake(xSem, portMAX_DELAY);
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <vTask2+0x8c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	4252      	negs	r2, r2
 8007a1c:	0011      	movs	r1, r2
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f7fa ff02 	bl	8002828 <xQueueSemaphoreTake>

		// Compute y
		x = 1.0f;
 8007a24:	23fe      	movs	r3, #254	@ 0xfe
 8007a26:	059b      	lsls	r3, r3, #22
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
		y = sum_prod(x);
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2c:	1c18      	adds	r0, r3, #0
 8007a2e:	f000 f94b 	bl	8007cc8 <sum_prod>
 8007a32:	1c03      	adds	r3, r0, #0
 8007a34:	633b      	str	r3, [r7, #48]	@ 0x30

		// Send message to trace Recorder
		vTracePrint (ue2, (char *)msg);
 8007a36:	4b0c      	ldr	r3, [pc, #48]	@ (8007a68 <vTask2+0x90>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	18ba      	adds	r2, r7, r2
 8007a3e:	0011      	movs	r1, r2
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7fe fa19 	bl	8005e78 <xTracePrint>
		vTracePrintF(ue2, (char *)"%d", (uint32_t)y);
 8007a46:	4b08      	ldr	r3, [pc, #32]	@ (8007a68 <vTask2+0x90>)
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a4c:	f7f8 fbe8 	bl	8000220 <__aeabi_f2uiz>
 8007a50:	0002      	movs	r2, r0
 8007a52:	4b06      	ldr	r3, [pc, #24]	@ (8007a6c <vTask2+0x94>)
 8007a54:	0019      	movs	r1, r3
 8007a56:	0020      	movs	r0, r4
 8007a58:	f7fe f922 	bl	8005ca0 <xTracePrintF>
		xSemaphoreTake(xSem, portMAX_DELAY);
 8007a5c:	46c0      	nop			@ (mov r8, r8)
 8007a5e:	e7d9      	b.n	8007a14 <vTask2+0x3c>
 8007a60:	08008e6c 	.word	0x08008e6c
 8007a64:	20003220 	.word	0x20003220
 8007a68:	20003230 	.word	0x20003230
 8007a6c:	08008e68 	.word	0x08008e68

08007a70 <vTaskHWM>:

/*
 * vTaskHWM
 */
void vTaskHWM (void *pvParameters)
{
 8007a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a72:	b089      	sub	sp, #36	@ 0x24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	6078      	str	r0, [r7, #4]
	uint32_t	count;
	uint16_t	hwm_Task1, hwm_Task2, hwm_TaskHWM;
	uint32_t	free_heap_size;

	count = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

	// Prepare console layout using ANSI escape sequences
	my_printf("%c[0m",   0x1B);	// Remove all text attributes
 8007a7c:	4b62      	ldr	r3, [pc, #392]	@ (8007c08 <vTaskHWM+0x198>)
 8007a7e:	211b      	movs	r1, #27
 8007a80:	0018      	movs	r0, r3
 8007a82:	f000 fb61 	bl	8008148 <my_printf>
	my_printf("%c[2J",   0x1B); 	// Clear console
 8007a86:	4b61      	ldr	r3, [pc, #388]	@ (8007c0c <vTaskHWM+0x19c>)
 8007a88:	211b      	movs	r1, #27
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 fb5c 	bl	8008148 <my_printf>
	my_printf("%c[1;0H", 0x1B);	// Move cursor [1:0]
 8007a90:	4b5f      	ldr	r3, [pc, #380]	@ (8007c10 <vTaskHWM+0x1a0>)
 8007a92:	211b      	movs	r1, #27
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 fb57 	bl	8008148 <my_printf>

	my_printf("High Water Marks console");
 8007a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8007c14 <vTaskHWM+0x1a4>)
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 fb53 	bl	8008148 <my_printf>

	my_printf("%c[3;0H", 0x1B);	// Move cursor line 3
 8007aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8007c18 <vTaskHWM+0x1a8>)
 8007aa4:	211b      	movs	r1, #27
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	f000 fb4e 	bl	8008148 <my_printf>
	my_printf("Iteration");
 8007aac:	4b5b      	ldr	r3, [pc, #364]	@ (8007c1c <vTaskHWM+0x1ac>)
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 fb4a 	bl	8008148 <my_printf>

	my_printf("%c[4;0H", 0x1B);	// Move cursor line 4
 8007ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8007c20 <vTaskHWM+0x1b0>)
 8007ab6:	211b      	movs	r1, #27
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f000 fb45 	bl	8008148 <my_printf>
	my_printf("Task1");
 8007abe:	4b59      	ldr	r3, [pc, #356]	@ (8007c24 <vTaskHWM+0x1b4>)
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f000 fb41 	bl	8008148 <my_printf>

	my_printf("%c[5;0H", 0x1B);	// Move cursor line 5
 8007ac6:	4b58      	ldr	r3, [pc, #352]	@ (8007c28 <vTaskHWM+0x1b8>)
 8007ac8:	211b      	movs	r1, #27
 8007aca:	0018      	movs	r0, r3
 8007acc:	f000 fb3c 	bl	8008148 <my_printf>
	my_printf("Task2");
 8007ad0:	4b56      	ldr	r3, [pc, #344]	@ (8007c2c <vTaskHWM+0x1bc>)
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f000 fb38 	bl	8008148 <my_printf>

	my_printf("%c[6;0H", 0x1B);	// Move cursor line 6
 8007ad8:	4b55      	ldr	r3, [pc, #340]	@ (8007c30 <vTaskHWM+0x1c0>)
 8007ada:	211b      	movs	r1, #27
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 fb33 	bl	8008148 <my_printf>
	my_printf("TaskHWM");
 8007ae2:	4b54      	ldr	r3, [pc, #336]	@ (8007c34 <vTaskHWM+0x1c4>)
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 fb2f 	bl	8008148 <my_printf>

	my_printf("%c[7;0H", 0x1B);	// Move cursor line 7
 8007aea:	4b53      	ldr	r3, [pc, #332]	@ (8007c38 <vTaskHWM+0x1c8>)
 8007aec:	211b      	movs	r1, #27
 8007aee:	0018      	movs	r0, r3
 8007af0:	f000 fb2a 	bl	8008148 <my_printf>
	my_printf("Free Heap");
 8007af4:	4b51      	ldr	r3, [pc, #324]	@ (8007c3c <vTaskHWM+0x1cc>)
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 fb26 	bl	8008148 <my_printf>


	while(1)
	{
	  // Gather High Water Marks
	  hwm_Task1	= uxTaskGetStackHighWaterMark(vTask1_handle);
 8007afc:	4b50      	ldr	r3, [pc, #320]	@ (8007c40 <vTaskHWM+0x1d0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f7fc fadf 	bl	80040c4 <uxTaskGetStackHighWaterMark>
 8007b06:	0002      	movs	r2, r0
 8007b08:	2412      	movs	r4, #18
 8007b0a:	193b      	adds	r3, r7, r4
 8007b0c:	801a      	strh	r2, [r3, #0]
	  hwm_Task2 	= uxTaskGetStackHighWaterMark(vTask2_handle);
 8007b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8007c44 <vTaskHWM+0x1d4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	0018      	movs	r0, r3
 8007b14:	f7fc fad6 	bl	80040c4 <uxTaskGetStackHighWaterMark>
 8007b18:	0002      	movs	r2, r0
 8007b1a:	2610      	movs	r6, #16
 8007b1c:	19bb      	adds	r3, r7, r6
 8007b1e:	801a      	strh	r2, [r3, #0]
	  hwm_TaskHWM	= uxTaskGetStackHighWaterMark(vTaskHWM_handle);
 8007b20:	4b49      	ldr	r3, [pc, #292]	@ (8007c48 <vTaskHWM+0x1d8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	0018      	movs	r0, r3
 8007b26:	f7fc facd 	bl	80040c4 <uxTaskGetStackHighWaterMark>
 8007b2a:	0002      	movs	r2, r0
 8007b2c:	230e      	movs	r3, #14
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	801a      	strh	r2, [r3, #0]

	  // Get free Heap size
	  free_heap_size = xPortGetFreeHeapSize();
 8007b32:	f7fd fad7 	bl	80050e4 <xPortGetFreeHeapSize>
 8007b36:	0003      	movs	r3, r0
 8007b38:	60bb      	str	r3, [r7, #8]

	  // Reports watermarks into Trace Recorder
	  vTracePrintF(ue3, (char *)"1[%d] 2[%d] HWM[%d]",
 8007b3a:	4b44      	ldr	r3, [pc, #272]	@ (8007c4c <vTaskHWM+0x1dc>)
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	0025      	movs	r5, r4
 8007b40:	193b      	adds	r3, r7, r4
 8007b42:	881a      	ldrh	r2, [r3, #0]
 8007b44:	19bb      	adds	r3, r7, r6
 8007b46:	881c      	ldrh	r4, [r3, #0]
 8007b48:	230e      	movs	r3, #14
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	4940      	ldr	r1, [pc, #256]	@ (8007c50 <vTaskHWM+0x1e0>)
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	0023      	movs	r3, r4
 8007b54:	f7fe f8a4 	bl	8005ca0 <xTracePrintF>
                             hwm_Task1,
                             hwm_Task2,
                             hwm_TaskHWM );

	  // Display results into console
	  my_printf("%c[0;31;40m", 0x1B); 	// Red over black
 8007b58:	4b3e      	ldr	r3, [pc, #248]	@ (8007c54 <vTaskHWM+0x1e4>)
 8007b5a:	211b      	movs	r1, #27
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f000 faf3 	bl	8008148 <my_printf>

	  my_printf("%c[3;12H", 0x1B);
 8007b62:	4b3d      	ldr	r3, [pc, #244]	@ (8007c58 <vTaskHWM+0x1e8>)
 8007b64:	211b      	movs	r1, #27
 8007b66:	0018      	movs	r0, r3
 8007b68:	f000 faee 	bl	8008148 <my_printf>
	  my_printf("%5d", count);
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c5c <vTaskHWM+0x1ec>)
 8007b70:	0011      	movs	r1, r2
 8007b72:	0018      	movs	r0, r3
 8007b74:	f000 fae8 	bl	8008148 <my_printf>

	  my_printf("%c[1;33;44m", 0x1B); 	// Yellow over blue
 8007b78:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <vTaskHWM+0x1f0>)
 8007b7a:	211b      	movs	r1, #27
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f000 fae3 	bl	8008148 <my_printf>

	  my_printf("%c[4;12H", 0x1B);
 8007b82:	4b38      	ldr	r3, [pc, #224]	@ (8007c64 <vTaskHWM+0x1f4>)
 8007b84:	211b      	movs	r1, #27
 8007b86:	0018      	movs	r0, r3
 8007b88:	f000 fade 	bl	8008148 <my_printf>
	  my_printf("%5d", hwm_Task1);
 8007b8c:	197b      	adds	r3, r7, r5
 8007b8e:	881a      	ldrh	r2, [r3, #0]
 8007b90:	4b32      	ldr	r3, [pc, #200]	@ (8007c5c <vTaskHWM+0x1ec>)
 8007b92:	0011      	movs	r1, r2
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 fad7 	bl	8008148 <my_printf>

	  my_printf("%c[5;12H", 0x1B);
 8007b9a:	4b33      	ldr	r3, [pc, #204]	@ (8007c68 <vTaskHWM+0x1f8>)
 8007b9c:	211b      	movs	r1, #27
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f000 fad2 	bl	8008148 <my_printf>
	  my_printf("%5d", hwm_Task2);
 8007ba4:	19bb      	adds	r3, r7, r6
 8007ba6:	881a      	ldrh	r2, [r3, #0]
 8007ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8007c5c <vTaskHWM+0x1ec>)
 8007baa:	0011      	movs	r1, r2
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 facb 	bl	8008148 <my_printf>

	  my_printf("%c[6;12H", 0x1B);
 8007bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8007c6c <vTaskHWM+0x1fc>)
 8007bb4:	211b      	movs	r1, #27
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f000 fac6 	bl	8008148 <my_printf>
	  my_printf("%5d", hwm_TaskHWM);
 8007bbc:	230e      	movs	r3, #14
 8007bbe:	18fb      	adds	r3, r7, r3
 8007bc0:	881a      	ldrh	r2, [r3, #0]
 8007bc2:	4b26      	ldr	r3, [pc, #152]	@ (8007c5c <vTaskHWM+0x1ec>)
 8007bc4:	0011      	movs	r1, r2
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f000 fabe 	bl	8008148 <my_printf>

	  my_printf("%c[1;35;40m", 0x1B); 	// Majenta over black
 8007bcc:	4b28      	ldr	r3, [pc, #160]	@ (8007c70 <vTaskHWM+0x200>)
 8007bce:	211b      	movs	r1, #27
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fab9 	bl	8008148 <my_printf>
	  my_printf("%c[7;12H", 0x1B);
 8007bd6:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <vTaskHWM+0x204>)
 8007bd8:	211b      	movs	r1, #27
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f000 fab4 	bl	8008148 <my_printf>
	  my_printf("%5d", free_heap_size);
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c5c <vTaskHWM+0x1ec>)
 8007be4:	0011      	movs	r1, r2
 8007be6:	0018      	movs	r0, r3
 8007be8:	f000 faae 	bl	8008148 <my_printf>

	  my_printf("%c[0m", 0x1B); 		// Remove all text attributes
 8007bec:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <vTaskHWM+0x198>)
 8007bee:	211b      	movs	r1, #27
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f000 faa9 	bl	8008148 <my_printf>
	  count++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]

	  // Wait for 200ms
	  vTaskDelay(200);
 8007bfc:	20c8      	movs	r0, #200	@ 0xc8
 8007bfe:	f7fb fc0b 	bl	8003418 <vTaskDelay>
	  hwm_Task1	= uxTaskGetStackHighWaterMark(vTask1_handle);
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	e77a      	b.n	8007afc <vTaskHWM+0x8c>
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	08008e94 	.word	0x08008e94
 8007c0c:	08008e9c 	.word	0x08008e9c
 8007c10:	08008ea4 	.word	0x08008ea4
 8007c14:	08008eac 	.word	0x08008eac
 8007c18:	08008ec8 	.word	0x08008ec8
 8007c1c:	08008ed0 	.word	0x08008ed0
 8007c20:	08008edc 	.word	0x08008edc
 8007c24:	08008ee4 	.word	0x08008ee4
 8007c28:	08008eec 	.word	0x08008eec
 8007c2c:	08008ef4 	.word	0x08008ef4
 8007c30:	08008efc 	.word	0x08008efc
 8007c34:	08008f04 	.word	0x08008f04
 8007c38:	08008f0c 	.word	0x08008f0c
 8007c3c:	08008f14 	.word	0x08008f14
 8007c40:	20003214 	.word	0x20003214
 8007c44:	20003218 	.word	0x20003218
 8007c48:	2000321c 	.word	0x2000321c
 8007c4c:	20003234 	.word	0x20003234
 8007c50:	08008f20 	.word	0x08008f20
 8007c54:	08008f34 	.word	0x08008f34
 8007c58:	08008f40 	.word	0x08008f40
 8007c5c:	08008f4c 	.word	0x08008f4c
 8007c60:	08008f50 	.word	0x08008f50
 8007c64:	08008f5c 	.word	0x08008f5c
 8007c68:	08008f68 	.word	0x08008f68
 8007c6c:	08008f74 	.word	0x08008f74
 8007c70:	08008f80 	.word	0x08008f80
 8007c74:	08008f8c 	.word	0x08008f8c

08007c78 <vAssertCalled>:

/*
 * Assertion Handler
 */
void vAssertCalled( char *file, int line )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	taskDISABLE_INTERRUPTS();
 8007c82:	b672      	cpsid	i

	my_printf("Assertion Failed\r\n");
 8007c84:	4b08      	ldr	r3, [pc, #32]	@ (8007ca8 <vAssertCalled+0x30>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f000 fa5e 	bl	8008148 <my_printf>
	my_printf("File %s\r\n", file);
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <vAssertCalled+0x34>)
 8007c90:	0011      	movs	r1, r2
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 fa58 	bl	8008148 <my_printf>
	my_printf("Line %d\r\n", line);
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <vAssertCalled+0x38>)
 8007c9c:	0011      	movs	r1, r2
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f000 fa52 	bl	8008148 <my_printf>

	while(1);
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	e7fd      	b.n	8007ca4 <vAssertCalled+0x2c>
 8007ca8:	08008fc0 	.word	0x08008fc0
 8007cac:	08008fd4 	.word	0x08008fd4
 8007cb0:	08008fe0 	.word	0x08008fe0

08007cb4 <vApplicationMallocFailedHook>:

/*
 * Malloc failed Basic Hook
 */
void vApplicationMallocFailedHook()
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
	my_printf("Malloc Failed\r\n");
 8007cb8:	4b02      	ldr	r3, [pc, #8]	@ (8007cc4 <vApplicationMallocFailedHook+0x10>)
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f000 fa44 	bl	8008148 <my_printf>

	while(1);
 8007cc0:	46c0      	nop			@ (mov r8, r8)
 8007cc2:	e7fd      	b.n	8007cc0 <vApplicationMallocFailedHook+0xc>
 8007cc4:	08008fec 	.word	0x08008fec

08007cc8 <sum_prod>:
 * coef[n] is an array of 120 32-bit integers
 *
 * returns y a floating point number
 */
float sum_prod(float x)
{
 8007cc8:	b5b0      	push	{r4, r5, r7, lr}
 8007cca:	b0fc      	sub	sp, #496	@ 0x1f0
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	uint32_t 	coef[120];
	float		y;
	uint8_t		n;

	// Initialize array
	for (n=0; n<120; n++) coef[n] = n;
 8007cd0:	23ec      	movs	r3, #236	@ 0xec
 8007cd2:	33ff      	adds	r3, #255	@ 0xff
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e011      	b.n	8007d00 <sum_prod+0x38>
 8007cdc:	20ec      	movs	r0, #236	@ 0xec
 8007cde:	30ff      	adds	r0, #255	@ 0xff
 8007ce0:	183b      	adds	r3, r7, r0
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	183b      	adds	r3, r7, r0
 8007ce6:	7819      	ldrb	r1, [r3, #0]
 8007ce8:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <sum_prod+0xb8>)
 8007cea:	24f8      	movs	r4, #248	@ 0xf8
 8007cec:	0064      	lsls	r4, r4, #1
 8007cee:	191b      	adds	r3, r3, r4
 8007cf0:	19db      	adds	r3, r3, r7
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	50d1      	str	r1, [r2, r3]
 8007cf6:	183b      	adds	r3, r7, r0
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	183b      	adds	r3, r7, r0
 8007cfc:	3201      	adds	r2, #1
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	22ec      	movs	r2, #236	@ 0xec
 8007d02:	32ff      	adds	r2, #255	@ 0xff
 8007d04:	18bb      	adds	r3, r7, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b77      	cmp	r3, #119	@ 0x77
 8007d0a:	d9e7      	bls.n	8007cdc <sum_prod+0x14>

	// Calculate sum of products
	y = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	21f6      	movs	r1, #246	@ 0xf6
 8007d10:	0049      	lsls	r1, r1, #1
 8007d12:	1879      	adds	r1, r7, r1
 8007d14:	600b      	str	r3, [r1, #0]
	for (n=0; n<120; n++) y += x * coef[n];
 8007d16:	18bb      	adds	r3, r7, r2
 8007d18:	2200      	movs	r2, #0
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e022      	b.n	8007d64 <sum_prod+0x9c>
 8007d1e:	24ec      	movs	r4, #236	@ 0xec
 8007d20:	34ff      	adds	r4, #255	@ 0xff
 8007d22:	193b      	adds	r3, r7, r4
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	4b16      	ldr	r3, [pc, #88]	@ (8007d80 <sum_prod+0xb8>)
 8007d28:	21f8      	movs	r1, #248	@ 0xf8
 8007d2a:	0049      	lsls	r1, r1, #1
 8007d2c:	185b      	adds	r3, r3, r1
 8007d2e:	19db      	adds	r3, r3, r7
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	58d3      	ldr	r3, [r2, r3]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7f8 ff35 	bl	8000ba4 <__aeabi_ui2f>
 8007d3a:	1c03      	adds	r3, r0, #0
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	1c18      	adds	r0, r3, #0
 8007d40:	f7f8 fc2e 	bl	80005a0 <__aeabi_fmul>
 8007d44:	1c03      	adds	r3, r0, #0
 8007d46:	1c19      	adds	r1, r3, #0
 8007d48:	25f6      	movs	r5, #246	@ 0xf6
 8007d4a:	006d      	lsls	r5, r5, #1
 8007d4c:	197b      	adds	r3, r7, r5
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	f7f8 fa9c 	bl	800028c <__aeabi_fadd>
 8007d54:	1c03      	adds	r3, r0, #0
 8007d56:	197a      	adds	r2, r7, r5
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	193b      	adds	r3, r7, r4
 8007d5c:	781a      	ldrb	r2, [r3, #0]
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	3201      	adds	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	23ec      	movs	r3, #236	@ 0xec
 8007d66:	33ff      	adds	r3, #255	@ 0xff
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b77      	cmp	r3, #119	@ 0x77
 8007d6e:	d9d6      	bls.n	8007d1e <sum_prod+0x56>

	return y;
 8007d70:	23f6      	movs	r3, #246	@ 0xf6
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	681b      	ldr	r3, [r3, #0]
}
 8007d78:	1c18      	adds	r0, r3, #0
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	b07c      	add	sp, #496	@ 0x1f0
 8007d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d80:	fffffe18 	.word	0xfffffe18

08007d84 <vApplicationStackOverflowHook>:

/*
 * Stack Overflow Basic Hook
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	while(1);
 8007d8e:	46c0      	nop			@ (mov r8, r8)
 8007d90:	e7fd      	b.n	8007d8e <vApplicationStackOverflowHook+0xa>
	...

08007d94 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	if (str) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00a      	beq.n	8007dba <printchar+0x26>
		**str = c;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
		++(*str);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8007db8:	e00a      	b.n	8007dd0 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <printchar+0x44>)
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2240      	movs	r2, #64	@ 0x40
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	d1f9      	bne.n	8007dbc <printchar+0x28>
		USART2->TDR = c;
 8007dc8:	4b03      	ldr	r3, [pc, #12]	@ (8007dd8 <printchar+0x44>)
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8007dd0:	46c0      	nop			@ (mov r8, r8)
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40004400 	.word	0x40004400

08007ddc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8007ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dde:	46c6      	mov	lr, r8
 8007de0:	b500      	push	{lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8007dee:	2400      	movs	r4, #0
 8007df0:	2320      	movs	r3, #32
 8007df2:	4698      	mov	r8, r3

	if (width > 0) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd16      	ble.n	8007e28 <prints+0x4c>
		register int len = 0;
 8007dfa:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8007dfc:	68be      	ldr	r6, [r7, #8]
 8007dfe:	e001      	b.n	8007e04 <prints+0x28>
 8007e00:	3501      	adds	r5, #1
 8007e02:	3601      	adds	r6, #1
 8007e04:	7833      	ldrb	r3, [r6, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1fa      	bne.n	8007e00 <prints+0x24>
		if (len >= width) width = 0;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	db02      	blt.n	8007e16 <prints+0x3a>
 8007e10:	2300      	movs	r3, #0
 8007e12:	607b      	str	r3, [r7, #4]
 8007e14:	e002      	b.n	8007e1c <prints+0x40>
		else width -= len;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	1b5b      	subs	r3, r3, r5
 8007e1a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	4013      	ands	r3, r2
 8007e22:	d001      	beq.n	8007e28 <prints+0x4c>
 8007e24:	2330      	movs	r3, #48	@ 0x30
 8007e26:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d119      	bne.n	8007e64 <prints+0x88>
		for ( ; width > 0; --width) {
 8007e30:	e008      	b.n	8007e44 <prints+0x68>
			printchar (out, padchar);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4641      	mov	r1, r8
 8007e36:	0018      	movs	r0, r3
 8007e38:	f7ff ffac 	bl	8007d94 <printchar>
			++pc;
 8007e3c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dcf3      	bgt.n	8007e32 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8007e4a:	e00b      	b.n	8007e64 <prints+0x88>
		printchar (out, *string);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	001a      	movs	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	0011      	movs	r1, r2
 8007e56:	0018      	movs	r0, r3
 8007e58:	f7ff ff9c 	bl	8007d94 <printchar>
		++pc;
 8007e5c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ef      	bne.n	8007e4c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8007e6c:	e008      	b.n	8007e80 <prints+0xa4>
		printchar (out, padchar);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4641      	mov	r1, r8
 8007e72:	0018      	movs	r0, r3
 8007e74:	f7ff ff8e 	bl	8007d94 <printchar>
		++pc;
 8007e78:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	607b      	str	r3, [r7, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dcf3      	bgt.n	8007e6e <prints+0x92>
	}

	return pc;
 8007e86:	0023      	movs	r3, r4
}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bc80      	pop	{r7}
 8007e90:	46b8      	mov	r8, r7
 8007e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e94 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	46ce      	mov	lr, r9
 8007e98:	4647      	mov	r7, r8
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b089      	sub	sp, #36	@ 0x24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4699      	mov	r9, r3
 8007eac:	2600      	movs	r6, #0
	register unsigned int u = i;
 8007eae:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10e      	bne.n	8007ed4 <printi+0x40>
		print_buf[0] = '0';
 8007eb6:	2114      	movs	r1, #20
 8007eb8:	187b      	adds	r3, r7, r1
 8007eba:	2230      	movs	r2, #48	@ 0x30
 8007ebc:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8007ebe:	187b      	adds	r3, r7, r1
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8007ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ec8:	1879      	adds	r1, r7, r1
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff ff86 	bl	8007ddc <prints>
 8007ed0:	0003      	movs	r3, r0
 8007ed2:	e04e      	b.n	8007f72 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <printi+0x5c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b0a      	cmp	r3, #10
 8007ede:	d107      	bne.n	8007ef0 <printi+0x5c>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da04      	bge.n	8007ef0 <printi+0x5c>
		neg = 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4699      	mov	r9, r3
		u = -i;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	425b      	negs	r3, r3
 8007eee:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8007ef0:	2314      	movs	r3, #20
 8007ef2:	18fc      	adds	r4, r7, r3
 8007ef4:	340b      	adds	r4, #11
	*s = '\0';
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	7023      	strb	r3, [r4, #0]

	while (u) {
 8007efa:	e019      	b.n	8007f30 <printi+0x9c>
		t = u % b;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0019      	movs	r1, r3
 8007f00:	0028      	movs	r0, r5
 8007f02:	f7f8 f987 	bl	8000214 <__aeabi_uidivmod>
 8007f06:	000b      	movs	r3, r1
 8007f08:	4698      	mov	r8, r3
		if( t >= 10 )
 8007f0a:	4643      	mov	r3, r8
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	dd02      	ble.n	8007f16 <printi+0x82>
			t += letbase - '0' - 10;
 8007f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f12:	3b3a      	subs	r3, #58	@ 0x3a
 8007f14:	4498      	add	r8, r3
		*--s = t + '0';
 8007f16:	4643      	mov	r3, r8
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	3c01      	subs	r4, #1
 8007f1c:	3330      	adds	r3, #48	@ 0x30
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	7023      	strb	r3, [r4, #0]
		u /= b;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	0019      	movs	r1, r3
 8007f26:	0028      	movs	r0, r5
 8007f28:	f7f8 f8ee 	bl	8000108 <__udivsi3>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	001d      	movs	r5, r3
	while (u) {
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	d1e3      	bne.n	8007efc <printi+0x68>
	}

	if (neg) {
 8007f34:	464b      	mov	r3, r9
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d013      	beq.n	8007f62 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8007f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <printi+0xc8>
 8007f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f42:	2202      	movs	r2, #2
 8007f44:	4013      	ands	r3, r2
 8007f46:	d009      	beq.n	8007f5c <printi+0xc8>
			printchar (out, '-');
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	212d      	movs	r1, #45	@ 0x2d
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f7ff ff21 	bl	8007d94 <printchar>
			++pc;
 8007f52:	3601      	adds	r6, #1
			--width;
 8007f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f56:	3b01      	subs	r3, #1
 8007f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f5a:	e002      	b.n	8007f62 <printi+0xce>
		}
		else {
			*--s = '-';
 8007f5c:	3c01      	subs	r4, #1
 8007f5e:	232d      	movs	r3, #45	@ 0x2d
 8007f60:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8007f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	0021      	movs	r1, r4
 8007f6a:	f7ff ff37 	bl	8007ddc <prints>
 8007f6e:	0003      	movs	r3, r0
 8007f70:	18f3      	adds	r3, r6, r3
}
 8007f72:	0018      	movs	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b009      	add	sp, #36	@ 0x24
 8007f78:	bcc0      	pop	{r6, r7}
 8007f7a:	46b9      	mov	r9, r7
 8007f7c:	46b0      	mov	r8, r6
 8007f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f80 <print>:

static int print(char **out, const char *format, va_list args )
{
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	b08b      	sub	sp, #44	@ 0x2c
 8007f84:	af04      	add	r7, sp, #16
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8007f8c:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8007f8e:	e0c6      	b.n	800811e <print+0x19e>
		if (*format == '%') {
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b25      	cmp	r3, #37	@ 0x25
 8007f96:	d000      	beq.n	8007f9a <print+0x1a>
 8007f98:	e0b2      	b.n	8008100 <print+0x180>
			++format;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8007fa0:	2600      	movs	r6, #0
 8007fa2:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d100      	bne.n	8007fae <print+0x2e>
 8007fac:	e0bd      	b.n	800812a <print+0x1aa>
			if (*format == '%') goto out;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b25      	cmp	r3, #37	@ 0x25
 8007fb4:	d100      	bne.n	8007fb8 <print+0x38>
 8007fb6:	e0a5      	b.n	8008104 <print+0x184>
			if (*format == '-') {
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fbe:	d10a      	bne.n	8007fd6 <print+0x56>
				++format;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8007fc6:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8007fc8:	e005      	b.n	8007fd6 <print+0x56>
				++format;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	4333      	orrs	r3, r6
 8007fd4:	001e      	movs	r6, r3
			while (*format == '0') {
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b30      	cmp	r3, #48	@ 0x30
 8007fdc:	d0f5      	beq.n	8007fca <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8007fde:	e00b      	b.n	8007ff8 <print+0x78>
				width *= 10;
 8007fe0:	002b      	movs	r3, r5
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	195b      	adds	r3, r3, r5
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	001d      	movs	r5, r3
				width += *format - '0';
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	3b30      	subs	r3, #48	@ 0x30
 8007ff0:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b2f      	cmp	r3, #47	@ 0x2f
 8007ffe:	d903      	bls.n	8008008 <print+0x88>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b39      	cmp	r3, #57	@ 0x39
 8008006:	d9eb      	bls.n	8007fe0 <print+0x60>
			}
			if( *format == 's' ) {
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b73      	cmp	r3, #115	@ 0x73
 800800e:	d10f      	bne.n	8008030 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	1d1a      	adds	r2, r3, #4
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800801a:	d000      	beq.n	800801e <print+0x9e>
 800801c:	e000      	b.n	8008020 <print+0xa0>
 800801e:	4949      	ldr	r1, [pc, #292]	@ (8008144 <print+0x1c4>)
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	0033      	movs	r3, r6
 8008024:	002a      	movs	r2, r5
 8008026:	f7ff fed9 	bl	8007ddc <prints>
 800802a:	0003      	movs	r3, r0
 800802c:	18e4      	adds	r4, r4, r3
				continue;
 800802e:	e073      	b.n	8008118 <print+0x198>
			}
			if( *format == 'd' ) {
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b64      	cmp	r3, #100	@ 0x64
 8008036:	d10f      	bne.n	8008058 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	1d1a      	adds	r2, r3, #4
 800803c:	607a      	str	r2, [r7, #4]
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	2361      	movs	r3, #97	@ 0x61
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	9601      	str	r6, [sp, #4]
 8008048:	9500      	str	r5, [sp, #0]
 800804a:	2301      	movs	r3, #1
 800804c:	220a      	movs	r2, #10
 800804e:	f7ff ff21 	bl	8007e94 <printi>
 8008052:	0003      	movs	r3, r0
 8008054:	18e4      	adds	r4, r4, r3
				continue;
 8008056:	e05f      	b.n	8008118 <print+0x198>
			}
			if( *format == 'x' ) {
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b78      	cmp	r3, #120	@ 0x78
 800805e:	d10f      	bne.n	8008080 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	6819      	ldr	r1, [r3, #0]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	2361      	movs	r3, #97	@ 0x61
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	9601      	str	r6, [sp, #4]
 8008070:	9500      	str	r5, [sp, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	2210      	movs	r2, #16
 8008076:	f7ff ff0d 	bl	8007e94 <printi>
 800807a:	0003      	movs	r3, r0
 800807c:	18e4      	adds	r4, r4, r3
				continue;
 800807e:	e04b      	b.n	8008118 <print+0x198>
			}
			if( *format == 'X' ) {
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b58      	cmp	r3, #88	@ 0x58
 8008086:	d10f      	bne.n	80080a8 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	2341      	movs	r3, #65	@ 0x41
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	9601      	str	r6, [sp, #4]
 8008098:	9500      	str	r5, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	2210      	movs	r2, #16
 800809e:	f7ff fef9 	bl	8007e94 <printi>
 80080a2:	0003      	movs	r3, r0
 80080a4:	18e4      	adds	r4, r4, r3
				continue;
 80080a6:	e037      	b.n	8008118 <print+0x198>
			}
			if( *format == 'u' ) {
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b75      	cmp	r3, #117	@ 0x75
 80080ae:	d10f      	bne.n	80080d0 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	607a      	str	r2, [r7, #4]
 80080b6:	6819      	ldr	r1, [r3, #0]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	2361      	movs	r3, #97	@ 0x61
 80080bc:	9302      	str	r3, [sp, #8]
 80080be:	9601      	str	r6, [sp, #4]
 80080c0:	9500      	str	r5, [sp, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	220a      	movs	r2, #10
 80080c6:	f7ff fee5 	bl	8007e94 <printi>
 80080ca:	0003      	movs	r3, r0
 80080cc:	18e4      	adds	r4, r4, r3
				continue;
 80080ce:	e023      	b.n	8008118 <print+0x198>
			}
			if( *format == 'c' ) {
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b63      	cmp	r3, #99	@ 0x63
 80080d6:	d11f      	bne.n	8008118 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	1d1a      	adds	r2, r3, #4
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	2114      	movs	r1, #20
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80080e8:	187b      	adds	r3, r7, r1
 80080ea:	2200      	movs	r2, #0
 80080ec:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80080ee:	1879      	adds	r1, r7, r1
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	0033      	movs	r3, r6
 80080f4:	002a      	movs	r2, r5
 80080f6:	f7ff fe71 	bl	8007ddc <prints>
 80080fa:	0003      	movs	r3, r0
 80080fc:	18e4      	adds	r4, r4, r3
				continue;
 80080fe:	e00b      	b.n	8008118 <print+0x198>
			}
		}
		else {
		out:
 8008100:	46c0      	nop			@ (mov r8, r8)
 8008102:	e000      	b.n	8008106 <print+0x186>
			if (*format == '%') goto out;
 8008104:	46c0      	nop			@ (mov r8, r8)
			printchar (out, *format);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	001a      	movs	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	0011      	movs	r1, r2
 8008110:	0018      	movs	r0, r3
 8008112:	f7ff fe3f 	bl	8007d94 <printchar>
			++pc;
 8008116:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3301      	adds	r3, #1
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d000      	beq.n	8008128 <print+0x1a8>
 8008126:	e733      	b.n	8007f90 <print+0x10>
 8008128:	e000      	b.n	800812c <print+0x1ac>
			if (*format == '\0') break;
 800812a:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <print+0x1ba>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800813a:	0023      	movs	r3, r4
}
 800813c:	0018      	movs	r0, r3
 800813e:	46bd      	mov	sp, r7
 8008140:	b007      	add	sp, #28
 8008142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008144:	08008ffc 	.word	0x08008ffc

08008148 <my_printf>:

int my_printf(const char *format, ...)
{
 8008148:	b40f      	push	{r0, r1, r2, r3}
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
        va_list args;
        va_start( args, format );
 8008150:	2314      	movs	r3, #20
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	0019      	movs	r1, r3
 800815c:	2000      	movs	r0, #0
 800815e:	f7ff ff0f 	bl	8007f80 <print>
 8008162:	0003      	movs	r3, r0
}
 8008164:	0018      	movs	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bc80      	pop	{r7}
 800816c:	bc08      	pop	{r3}
 800816e:	b004      	add	sp, #16
 8008170:	4718      	bx	r3

08008172 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	af00      	add	r7, sp, #0
}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008180:	46c0      	nop			@ (mov r8, r8)
 8008182:	e7fd      	b.n	8008180 <HardFault_Handler+0x4>

08008184 <EXTI4_15_IRQHandler>:
  * This function handles EXTI line 13 interrupt request.
  */
extern xSemaphoreHandle xSem;

void EXTI4_15_IRQHandler()
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]

	// Test for line 13 pending interrupt
	if ((EXTI->PR & EXTI_PR_PR13_Msk) != 0)
 800818e:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <EXTI4_15_IRQHandler+0x44>)
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	2380      	movs	r3, #128	@ 0x80
 8008194:	019b      	lsls	r3, r3, #6
 8008196:	4013      	ands	r3, r2
 8008198:	d011      	beq.n	80081be <EXTI4_15_IRQHandler+0x3a>
	{
		// Clear pending bit 13 by writing a '1'
		EXTI->PR = EXTI_PR_PR13;
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <EXTI4_15_IRQHandler+0x44>)
 800819c:	2280      	movs	r2, #128	@ 0x80
 800819e:	0192      	lsls	r2, r2, #6
 80081a0:	615a      	str	r2, [r3, #20]

		// Release the semaphore
		xSemaphoreGiveFromISR(xSem, &xHigherPriorityTaskWoken);
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <EXTI4_15_IRQHandler+0x48>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	1d3a      	adds	r2, r7, #4
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7fa f81c 	bl	80021e8 <xQueueGiveFromISR>

	    // Perform a context switch to the waiting task
	    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <EXTI4_15_IRQHandler+0x3a>
 80081b6:	4b06      	ldr	r3, [pc, #24]	@ (80081d0 <EXTI4_15_IRQHandler+0x4c>)
 80081b8:	2280      	movs	r2, #128	@ 0x80
 80081ba:	0552      	lsls	r2, r2, #21
 80081bc:	601a      	str	r2, [r3, #0]
	}
}
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b002      	add	sp, #8
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	46c0      	nop			@ (mov r8, r8)
 80081c8:	40010400 	.word	0x40010400
 80081cc:	20003220 	.word	0x20003220
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80081d8:	4b22      	ldr	r3, [pc, #136]	@ (8008264 <BSP_LED_Init+0x90>)
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	4b21      	ldr	r3, [pc, #132]	@ (8008264 <BSP_LED_Init+0x90>)
 80081de:	2180      	movs	r1, #128	@ 0x80
 80081e0:	0289      	lsls	r1, r1, #10
 80081e2:	430a      	orrs	r2, r1
 80081e4:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80081e6:	2390      	movs	r3, #144	@ 0x90
 80081e8:	05db      	lsls	r3, r3, #23
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	2390      	movs	r3, #144	@ 0x90
 80081ee:	05db      	lsls	r3, r3, #23
 80081f0:	491d      	ldr	r1, [pc, #116]	@ (8008268 <BSP_LED_Init+0x94>)
 80081f2:	400a      	ands	r2, r1
 80081f4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80081f6:	2390      	movs	r3, #144	@ 0x90
 80081f8:	05db      	lsls	r3, r3, #23
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	2390      	movs	r3, #144	@ 0x90
 80081fe:	05db      	lsls	r3, r3, #23
 8008200:	2180      	movs	r1, #128	@ 0x80
 8008202:	00c9      	lsls	r1, r1, #3
 8008204:	430a      	orrs	r2, r1
 8008206:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8008208:	2390      	movs	r3, #144	@ 0x90
 800820a:	05db      	lsls	r3, r3, #23
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	2390      	movs	r3, #144	@ 0x90
 8008210:	05db      	lsls	r3, r3, #23
 8008212:	2120      	movs	r1, #32
 8008214:	438a      	bics	r2, r1
 8008216:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8008218:	2390      	movs	r3, #144	@ 0x90
 800821a:	05db      	lsls	r3, r3, #23
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	2390      	movs	r3, #144	@ 0x90
 8008220:	05db      	lsls	r3, r3, #23
 8008222:	4911      	ldr	r1, [pc, #68]	@ (8008268 <BSP_LED_Init+0x94>)
 8008224:	400a      	ands	r2, r1
 8008226:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8008228:	2390      	movs	r3, #144	@ 0x90
 800822a:	05db      	lsls	r3, r3, #23
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	2390      	movs	r3, #144	@ 0x90
 8008230:	05db      	lsls	r3, r3, #23
 8008232:	21c0      	movs	r1, #192	@ 0xc0
 8008234:	0109      	lsls	r1, r1, #4
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800823a:	2390      	movs	r3, #144	@ 0x90
 800823c:	05db      	lsls	r3, r3, #23
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	2390      	movs	r3, #144	@ 0x90
 8008242:	05db      	lsls	r3, r3, #23
 8008244:	4908      	ldr	r1, [pc, #32]	@ (8008268 <BSP_LED_Init+0x94>)
 8008246:	400a      	ands	r2, r1
 8008248:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800824a:	2390      	movs	r3, #144	@ 0x90
 800824c:	05db      	lsls	r3, r3, #23
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	2390      	movs	r3, #144	@ 0x90
 8008252:	05db      	lsls	r3, r3, #23
 8008254:	2180      	movs	r1, #128	@ 0x80
 8008256:	0389      	lsls	r1, r1, #14
 8008258:	430a      	orrs	r2, r1
 800825a:	619a      	str	r2, [r3, #24]
}
 800825c:	46c0      	nop			@ (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	46c0      	nop			@ (mov r8, r8)
 8008264:	40021000 	.word	0x40021000
 8008268:	fffff3ff 	.word	0xfffff3ff

0800826c <BSP_PB_Init>:
 * BSP_PB_Init()
 * - Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 * - Enable EXTI13 interrupt on PC13 falling edge
 */
void BSP_PB_Init()
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8008270:	4b1f      	ldr	r3, [pc, #124]	@ (80082f0 <BSP_PB_Init+0x84>)
 8008272:	695a      	ldr	r2, [r3, #20]
 8008274:	4b1e      	ldr	r3, [pc, #120]	@ (80082f0 <BSP_PB_Init+0x84>)
 8008276:	2180      	movs	r1, #128	@ 0x80
 8008278:	0309      	lsls	r1, r1, #12
 800827a:	430a      	orrs	r2, r1
 800827c:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 800827e:	4b1d      	ldr	r3, [pc, #116]	@ (80082f4 <BSP_PB_Init+0x88>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b1c      	ldr	r3, [pc, #112]	@ (80082f4 <BSP_PB_Init+0x88>)
 8008284:	491c      	ldr	r1, [pc, #112]	@ (80082f8 <BSP_PB_Init+0x8c>)
 8008286:	400a      	ands	r2, r1
 8008288:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800828a:	4a1a      	ldr	r2, [pc, #104]	@ (80082f4 <BSP_PB_Init+0x88>)
 800828c:	4b19      	ldr	r3, [pc, #100]	@ (80082f4 <BSP_PB_Init+0x88>)
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8008292:	4b18      	ldr	r3, [pc, #96]	@ (80082f4 <BSP_PB_Init+0x88>)
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	4b17      	ldr	r3, [pc, #92]	@ (80082f4 <BSP_PB_Init+0x88>)
 8008298:	4917      	ldr	r1, [pc, #92]	@ (80082f8 <BSP_PB_Init+0x8c>)
 800829a:	400a      	ands	r2, r1
 800829c:	60da      	str	r2, [r3, #12]

	// Enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800829e:	4b14      	ldr	r3, [pc, #80]	@ (80082f0 <BSP_PB_Init+0x84>)
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	4b13      	ldr	r3, [pc, #76]	@ (80082f0 <BSP_PB_Init+0x84>)
 80082a4:	2101      	movs	r1, #1
 80082a6:	430a      	orrs	r2, r1
 80082a8:	619a      	str	r2, [r3, #24]

	// Select Port C as interrupt source for EXTI line 13
	SYSCFG->EXTICR[3] &= ~ SYSCFG_EXTICR4_EXTI13_Msk;
 80082aa:	4b14      	ldr	r3, [pc, #80]	@ (80082fc <BSP_PB_Init+0x90>)
 80082ac:	695a      	ldr	r2, [r3, #20]
 80082ae:	4b13      	ldr	r3, [pc, #76]	@ (80082fc <BSP_PB_Init+0x90>)
 80082b0:	21f0      	movs	r1, #240	@ 0xf0
 80082b2:	438a      	bics	r2, r1
 80082b4:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |=   SYSCFG_EXTICR4_EXTI13_PC;
 80082b6:	4b11      	ldr	r3, [pc, #68]	@ (80082fc <BSP_PB_Init+0x90>)
 80082b8:	695a      	ldr	r2, [r3, #20]
 80082ba:	4b10      	ldr	r3, [pc, #64]	@ (80082fc <BSP_PB_Init+0x90>)
 80082bc:	2120      	movs	r1, #32
 80082be:	430a      	orrs	r2, r1
 80082c0:	615a      	str	r2, [r3, #20]

	// Enable EXTI line 13
	EXTI->IMR |= EXTI_IMR_IM13;
 80082c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008300 <BSP_PB_Init+0x94>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008300 <BSP_PB_Init+0x94>)
 80082c8:	2180      	movs	r1, #128	@ 0x80
 80082ca:	0189      	lsls	r1, r1, #6
 80082cc:	430a      	orrs	r2, r1
 80082ce:	601a      	str	r2, [r3, #0]

	// Disable Rising / Enable Falling trigger
	EXTI->RTSR &= ~EXTI_RTSR_RT13;
 80082d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008300 <BSP_PB_Init+0x94>)
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <BSP_PB_Init+0x94>)
 80082d6:	490b      	ldr	r1, [pc, #44]	@ (8008304 <BSP_PB_Init+0x98>)
 80082d8:	400a      	ands	r2, r1
 80082da:	609a      	str	r2, [r3, #8]
	EXTI->FTSR |=  EXTI_FTSR_FT13;
 80082dc:	4b08      	ldr	r3, [pc, #32]	@ (8008300 <BSP_PB_Init+0x94>)
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <BSP_PB_Init+0x94>)
 80082e2:	2180      	movs	r1, #128	@ 0x80
 80082e4:	0189      	lsls	r1, r1, #6
 80082e6:	430a      	orrs	r2, r1
 80082e8:	60da      	str	r2, [r3, #12]
}
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40021000 	.word	0x40021000
 80082f4:	48000800 	.word	0x48000800
 80082f8:	f3ffffff 	.word	0xf3ffffff
 80082fc:	40010000 	.word	0x40010000
 8008300:	40010400 	.word	0x40010400
 8008304:	ffffdfff 	.word	0xffffdfff

08008308 <BSP_Console_Init>:
	}
	return state;
}

void BSP_Console_Init()
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800830c:	4b2b      	ldr	r3, [pc, #172]	@ (80083bc <BSP_Console_Init+0xb4>)
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	4b2a      	ldr	r3, [pc, #168]	@ (80083bc <BSP_Console_Init+0xb4>)
 8008312:	2180      	movs	r1, #128	@ 0x80
 8008314:	0289      	lsls	r1, r1, #10
 8008316:	430a      	orrs	r2, r1
 8008318:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 800831a:	2390      	movs	r3, #144	@ 0x90
 800831c:	05db      	lsls	r3, r3, #23
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	2390      	movs	r3, #144	@ 0x90
 8008322:	05db      	lsls	r3, r3, #23
 8008324:	21f0      	movs	r1, #240	@ 0xf0
 8008326:	438a      	bics	r2, r1
 8008328:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 800832a:	2390      	movs	r3, #144	@ 0x90
 800832c:	05db      	lsls	r3, r3, #23
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	2390      	movs	r3, #144	@ 0x90
 8008332:	05db      	lsls	r3, r3, #23
 8008334:	21a0      	movs	r1, #160	@ 0xa0
 8008336:	430a      	orrs	r2, r1
 8008338:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 800833a:	2390      	movs	r3, #144	@ 0x90
 800833c:	05db      	lsls	r3, r3, #23
 800833e:	6a1a      	ldr	r2, [r3, #32]
 8008340:	2390      	movs	r3, #144	@ 0x90
 8008342:	05db      	lsls	r3, r3, #23
 8008344:	491e      	ldr	r1, [pc, #120]	@ (80083c0 <BSP_Console_Init+0xb8>)
 8008346:	400a      	ands	r2, r1
 8008348:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800834a:	2390      	movs	r3, #144	@ 0x90
 800834c:	05db      	lsls	r3, r3, #23
 800834e:	6a1a      	ldr	r2, [r3, #32]
 8008350:	2390      	movs	r3, #144	@ 0x90
 8008352:	05db      	lsls	r3, r3, #23
 8008354:	2188      	movs	r1, #136	@ 0x88
 8008356:	0149      	lsls	r1, r1, #5
 8008358:	430a      	orrs	r2, r1
 800835a:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800835c:	4b17      	ldr	r3, [pc, #92]	@ (80083bc <BSP_Console_Init+0xb4>)
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	4b16      	ldr	r3, [pc, #88]	@ (80083bc <BSP_Console_Init+0xb4>)
 8008362:	2180      	movs	r1, #128	@ 0x80
 8008364:	0289      	lsls	r1, r1, #10
 8008366:	430a      	orrs	r2, r1
 8008368:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800836a:	4b16      	ldr	r3, [pc, #88]	@ (80083c4 <BSP_Console_Init+0xbc>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8008370:	4b14      	ldr	r3, [pc, #80]	@ (80083c4 <BSP_Console_Init+0xbc>)
 8008372:	2200      	movs	r2, #0
 8008374:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8008376:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <BSP_Console_Init+0xbc>)
 8008378:	2200      	movs	r2, #0
 800837a:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 800837c:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <BSP_Console_Init+0xb4>)
 800837e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008380:	4b0e      	ldr	r3, [pc, #56]	@ (80083bc <BSP_Console_Init+0xb4>)
 8008382:	4911      	ldr	r1, [pc, #68]	@ (80083c8 <BSP_Console_Init+0xc0>)
 8008384:	400a      	ands	r2, r1
 8008386:	631a      	str	r2, [r3, #48]	@ 0x30
	// With OVER8=0 and Fck=48MHz, USARTDIV =   48E6/115200 = 416.6666
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
	USART2->CR1 |= USART_CR1_OVER8;
 8008388:	4b0e      	ldr	r3, [pc, #56]	@ (80083c4 <BSP_Console_Init+0xbc>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <BSP_Console_Init+0xbc>)
 800838e:	2180      	movs	r1, #128	@ 0x80
 8008390:	0209      	lsls	r1, r1, #8
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8008396:	4b0b      	ldr	r3, [pc, #44]	@ (80083c4 <BSP_Console_Init+0xbc>)
 8008398:	4a0c      	ldr	r2, [pc, #48]	@ (80083cc <BSP_Console_Init+0xc4>)
 800839a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800839c:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <BSP_Console_Init+0xbc>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	4b08      	ldr	r3, [pc, #32]	@ (80083c4 <BSP_Console_Init+0xbc>)
 80083a2:	210c      	movs	r1, #12
 80083a4:	430a      	orrs	r2, r1
 80083a6:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 80083a8:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <BSP_Console_Init+0xbc>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <BSP_Console_Init+0xbc>)
 80083ae:	2101      	movs	r1, #1
 80083b0:	430a      	orrs	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	46c0      	nop			@ (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	40021000 	.word	0x40021000
 80083c0:	ffff00ff 	.word	0xffff00ff
 80083c4:	40004400 	.word	0x40004400
 80083c8:	fffcffff 	.word	0xfffcffff
 80083cc:	00000341 	.word	0x00000341

080083d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80083d0:	480d      	ldr	r0, [pc, #52]	@ (8008408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80083d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80083d4:	f000 f825 	bl	8008422 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083d8:	480c      	ldr	r0, [pc, #48]	@ (800840c <LoopForever+0x6>)
  ldr r1, =_edata
 80083da:	490d      	ldr	r1, [pc, #52]	@ (8008410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80083dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008414 <LoopForever+0xe>)
  movs r3, #0
 80083de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083e0:	e002      	b.n	80083e8 <LoopCopyDataInit>

080083e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083e6:	3304      	adds	r3, #4

080083e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083ec:	d3f9      	bcc.n	80083e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80083f0:	4c0a      	ldr	r4, [pc, #40]	@ (800841c <LoopForever+0x16>)
  movs r3, #0
 80083f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083f4:	e001      	b.n	80083fa <LoopFillZerobss>

080083f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083f8:	3204      	adds	r2, #4

080083fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083fc:	d3fb      	bcc.n	80083f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80083fe:	f000 f8b5 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008402:	f7ff f92b 	bl	800765c <main>

08008406 <LoopForever>:

LoopForever:
    b LoopForever
 8008406:	e7fe      	b.n	8008406 <LoopForever>
  ldr   r0, =_estack
 8008408:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800840c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008410:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8008414:	080090ec 	.word	0x080090ec
  ldr r2, =_sbss
 8008418:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800841c:	20003238 	.word	0x20003238

08008420 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008420:	e7fe      	b.n	8008420 <ADC1_COMP_IRQHandler>

08008422 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	2300      	movs	r3, #0
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	2300      	movs	r3, #0
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	2300      	movs	r3, #0
 8008440:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008442:	4b38      	ldr	r3, [pc, #224]	@ (8008524 <SystemCoreClockUpdate+0xf8>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	220c      	movs	r2, #12
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d011      	beq.n	8008476 <SystemCoreClockUpdate+0x4a>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b08      	cmp	r3, #8
 8008456:	d84f      	bhi.n	80084f8 <SystemCoreClockUpdate+0xcc>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <SystemCoreClockUpdate+0x3a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d004      	beq.n	800846e <SystemCoreClockUpdate+0x42>
 8008464:	e048      	b.n	80084f8 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8008466:	4b30      	ldr	r3, [pc, #192]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 8008468:	4a30      	ldr	r2, [pc, #192]	@ (800852c <SystemCoreClockUpdate+0x100>)
 800846a:	601a      	str	r2, [r3, #0]
      break;
 800846c:	e048      	b.n	8008500 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800846e:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 8008470:	4a2e      	ldr	r2, [pc, #184]	@ (800852c <SystemCoreClockUpdate+0x100>)
 8008472:	601a      	str	r2, [r3, #0]
      break;
 8008474:	e044      	b.n	8008500 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008476:	4b2b      	ldr	r3, [pc, #172]	@ (8008524 <SystemCoreClockUpdate+0xf8>)
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	23f0      	movs	r3, #240	@ 0xf0
 800847c:	039b      	lsls	r3, r3, #14
 800847e:	4013      	ands	r3, r2
 8008480:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008482:	4b28      	ldr	r3, [pc, #160]	@ (8008524 <SystemCoreClockUpdate+0xf8>)
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	23c0      	movs	r3, #192	@ 0xc0
 8008488:	025b      	lsls	r3, r3, #9
 800848a:	4013      	ands	r3, r2
 800848c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	0c9b      	lsrs	r3, r3, #18
 8008492:	3302      	adds	r3, #2
 8008494:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8008496:	4b23      	ldr	r3, [pc, #140]	@ (8008524 <SystemCoreClockUpdate+0xf8>)
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	220f      	movs	r2, #15
 800849c:	4013      	ands	r3, r2
 800849e:	3301      	adds	r3, #1
 80084a0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	2380      	movs	r3, #128	@ 0x80
 80084a6:	025b      	lsls	r3, r3, #9
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d10a      	bne.n	80084c2 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	481f      	ldr	r0, [pc, #124]	@ (800852c <SystemCoreClockUpdate+0x100>)
 80084b0:	f7f7 fe2a 	bl	8000108 <__udivsi3>
 80084b4:	0003      	movs	r3, r0
 80084b6:	001a      	movs	r2, r3
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	435a      	muls	r2, r3
 80084bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 80084be:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80084c0:	e01e      	b.n	8008500 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	23c0      	movs	r3, #192	@ 0xc0
 80084c6:	025b      	lsls	r3, r3, #9
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d10a      	bne.n	80084e2 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	4818      	ldr	r0, [pc, #96]	@ (8008530 <SystemCoreClockUpdate+0x104>)
 80084d0:	f7f7 fe1a 	bl	8000108 <__udivsi3>
 80084d4:	0003      	movs	r3, r0
 80084d6:	001a      	movs	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	435a      	muls	r2, r3
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 80084de:	601a      	str	r2, [r3, #0]
      break;
 80084e0:	e00e      	b.n	8008500 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	4811      	ldr	r0, [pc, #68]	@ (800852c <SystemCoreClockUpdate+0x100>)
 80084e6:	f7f7 fe0f 	bl	8000108 <__udivsi3>
 80084ea:	0003      	movs	r3, r0
 80084ec:	001a      	movs	r2, r3
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	435a      	muls	r2, r3
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 80084f4:	601a      	str	r2, [r3, #0]
      break;
 80084f6:	e003      	b.n	8008500 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 80084fa:	4a0c      	ldr	r2, [pc, #48]	@ (800852c <SystemCoreClockUpdate+0x100>)
 80084fc:	601a      	str	r2, [r3, #0]
      break;
 80084fe:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8008500:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <SystemCoreClockUpdate+0xf8>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	220f      	movs	r2, #15
 8008508:	4013      	ands	r3, r2
 800850a:	4a0a      	ldr	r2, [pc, #40]	@ (8008534 <SystemCoreClockUpdate+0x108>)
 800850c:	5cd3      	ldrb	r3, [r2, r3]
 800850e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8008510:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	40da      	lsrs	r2, r3
 8008518:	4b03      	ldr	r3, [pc, #12]	@ (8008528 <SystemCoreClockUpdate+0xfc>)
 800851a:	601a      	str	r2, [r3, #0]
}
 800851c:	46c0      	nop			@ (mov r8, r8)
 800851e:	46bd      	mov	sp, r7
 8008520:	b004      	add	sp, #16
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40021000 	.word	0x40021000
 8008528:	20000014 	.word	0x20000014
 800852c:	007a1200 	.word	0x007a1200
 8008530:	02dc6c00 	.word	0x02dc6c00
 8008534:	080090d4 	.word	0x080090d4

08008538 <memset>:
 8008538:	0003      	movs	r3, r0
 800853a:	1882      	adds	r2, r0, r2
 800853c:	4293      	cmp	r3, r2
 800853e:	d100      	bne.n	8008542 <memset+0xa>
 8008540:	4770      	bx	lr
 8008542:	7019      	strb	r1, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	e7f9      	b.n	800853c <memset+0x4>

08008548 <strncmp>:
 8008548:	b530      	push	{r4, r5, lr}
 800854a:	0005      	movs	r5, r0
 800854c:	1e10      	subs	r0, r2, #0
 800854e:	d00b      	beq.n	8008568 <strncmp+0x20>
 8008550:	2400      	movs	r4, #0
 8008552:	3a01      	subs	r2, #1
 8008554:	5d2b      	ldrb	r3, [r5, r4]
 8008556:	5d08      	ldrb	r0, [r1, r4]
 8008558:	4283      	cmp	r3, r0
 800855a:	d104      	bne.n	8008566 <strncmp+0x1e>
 800855c:	42a2      	cmp	r2, r4
 800855e:	d002      	beq.n	8008566 <strncmp+0x1e>
 8008560:	3401      	adds	r4, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f6      	bne.n	8008554 <strncmp+0xc>
 8008566:	1a18      	subs	r0, r3, r0
 8008568:	bd30      	pop	{r4, r5, pc}
	...

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	2600      	movs	r6, #0
 8008570:	4c0c      	ldr	r4, [pc, #48]	@ (80085a4 <__libc_init_array+0x38>)
 8008572:	4d0d      	ldr	r5, [pc, #52]	@ (80085a8 <__libc_init_array+0x3c>)
 8008574:	1b64      	subs	r4, r4, r5
 8008576:	10a4      	asrs	r4, r4, #2
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	2600      	movs	r6, #0
 800857e:	f000 f823 	bl	80085c8 <_init>
 8008582:	4c0a      	ldr	r4, [pc, #40]	@ (80085ac <__libc_init_array+0x40>)
 8008584:	4d0a      	ldr	r5, [pc, #40]	@ (80085b0 <__libc_init_array+0x44>)
 8008586:	1b64      	subs	r4, r4, r5
 8008588:	10a4      	asrs	r4, r4, #2
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	00b3      	lsls	r3, r6, #2
 8008592:	58eb      	ldr	r3, [r5, r3]
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	00b3      	lsls	r3, r6, #2
 800859c:	58eb      	ldr	r3, [r5, r3]
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	080090e4 	.word	0x080090e4
 80085a8:	080090e4 	.word	0x080090e4
 80085ac:	080090e8 	.word	0x080090e8
 80085b0:	080090e4 	.word	0x080090e4

080085b4 <memcpy>:
 80085b4:	2300      	movs	r3, #0
 80085b6:	b510      	push	{r4, lr}
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d100      	bne.n	80085be <memcpy+0xa>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	5ccc      	ldrb	r4, [r1, r3]
 80085c0:	54c4      	strb	r4, [r0, r3]
 80085c2:	3301      	adds	r3, #1
 80085c4:	e7f8      	b.n	80085b8 <memcpy+0x4>
	...

080085c8 <_init>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	46c0      	nop			@ (mov r8, r8)
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr

080085d4 <_fini>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	46c0      	nop			@ (mov r8, r8)
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr
